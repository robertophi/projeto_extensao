
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000075ec memsz 0x000075ec flags r-x
    LOAD off    0x0000860c vaddr 0x0004760c paddr 0x00047cec align 2**12
         filesz 0x000006e0 memsz 0x000006e0 flags rw-
    LOAD off    0x000093cc vaddr 0x000483cc paddr 0x000483cc align 2**12
         filesz 0x00000000 memsz 0x00000914 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000072b8  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  000472d8  000472d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000006e0  0004760c  00047cec  0000860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000914  000483cc  000483cc  000093cc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00008cec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000009f0  00000000  00000000  00008d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000019c4  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00017c8a  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007716  00000000  00000000  00022d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e864  00000000  00000000  0002a46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000019e0  00000000  00000000  00038cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d42  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005634  00000000  00000000  0003d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00042a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00042a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00046b94  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00046b97  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00046b9c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00046b9d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00046b9e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00046ba9  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00046bb4  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00046bbf  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000039  00000000  00000000  00046bca  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003950b  00000000  00000000  00046c03  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .text	00000000 .text
000472d8 l    d  .rodata	00000000 .rodata
0004760c l    d  .rwdata	00000000 .rwdata
000483cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 app.cpp
00040620 l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
000405c0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00041e24 l     F .text	00000030 _Z12read_uleb128PKhPj
00041e54 l     F .text	00000054 _Z12read_sleb128PKhPi
00041ea8 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00041f44 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
00042118 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
000421a8 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
000422a8 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0004232c l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
000483e0 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0004842c l     O .bss	00000800 emergency_buffer
000483ec l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
00042fc0 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 fp-bit.c
000435e0 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00044228 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
000483f0 l     O .bss	00000004 fc_static
0004446c l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00044584 l     F .text	000000cc _Unwind_RaiseException_Phase2
00044650 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00047a14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
000461f0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00046420 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00046500 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00047cc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
00046d44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00046dc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00047090 l     F .text	00000004 register_fini
00041524 g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
00042d64 g     F .text	00000040 __cxa_free_exception
00043590 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00042b14 g     F .text	00000018 _ZSt10unexpectedv
0004656c g     F .text	00000050 alt_main
00041694 g     F .text	00000020 _ZN4WiFiD2Ev
0004441c g     F .text	00000014 _Unwind_GetIPInfo
00047cec g       *ABS*	00000000 __flash_rwdata_start
00042ed8 g     F .text	00000074 __cxa_rethrow
000443bc g     F .text	0000000c _Unwind_SjLj_Unregister
00042a34 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0004440c g     F .text	00000010 _Unwind_GetIP
00048ce0 g       *ABS*	00000000 __alt_heap_start
00045ccc g     F .text	00000074 _kill_r
00042d54 g     F .text	00000010 _ZNSt9bad_allocD2Ev
0004348c g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00045c0c g     F .text	000000a0 _signal_r
0004347c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00047478  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000465dc g     F .text	00000020 __malloc_unlock
0004072c g     F .text	000001c8 _ZN3App8compass8Ei
00043028 g     F .text	00000020 _ZSt18uncaught_exceptionv
00043a78 g     F .text	00000174 __divsf3
00048414 g     O .bss	00000004 altera_avalon_timer_ts_freq
00042ca0 g     F .text	00000010 _ZNSt9exceptionD2Ev
000415a4 g     F .text	00000038 _ZN6MotorsC2Ev
000415dc g     F .text	00000038 _ZN6MotorsC1Ev
00041564 g     F .text	00000040 _ZN6Motors21write_to_next_collumnEv
00047368  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
000411dc g     F .text	00000044 _ZN3FFTC2Ev
0004444c g     F .text	00000008 _Unwind_GetRegionStart
00040020 g       *ABS*	00000000 __flash_exceptions_start
000416f4 g     F .text	00000020 _ZN4WiFiC1Ev
00042b2c g     F .text	00000100 _Znwm
00048400 g     O .bss	00000004 errno
0004481c g     F .text	00000080 _Unwind_Backtrace
00044d68 g     F .text	0000002c __make_fp
00048408 g     O .bss	00000004 alt_argv
0004fc9c g       *ABS*	00000000 _gp
00041400 g     F .text	00000050 _ZN6Motors11write_delayEjjj
000437c4 g     F .text	00000070 __subsf3
000462c0 g     F .text	00000020 getpid
000483d0 g     O .bss	00000004 _ZN3App3fftE
000423b0 g     F .text	00000180 __cxa_call_unexpected
00043020 g     F .text	00000008 __cxa_get_exception_ptr
00047b1c g     O .rwdata	00000180 alt_fd_list
000447cc g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
000443e0 g     F .text	00000014 _Unwind_GetCFA
00042a20 g     F .text	00000014 _ZSt13set_terminatePFvvE
00041788 g     F .text	00000190 _ZN4WiFi7receiveEPhPj
000440bc g     F .text	000000f8 __floatsidf
000472d8 g       *ABS*	00000000 __DTOR_END__
00040f1c g     F .text	00000050 _ZN3AppC1Ev
000432c4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000414f0 g     F .text	00000034 _ZN6Motors5writeEj
000469f8 g     F .text	00000104 altera_avalon_jtag_uart_read
0004520c g     F .text	00000014 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00044364 g     F .text	00000008 __udivsi3
000459f0 g     F .text	000000cc _raise_r
00043d54 g     F .text	00000078 __lesf2
00040550 g     F .text	00000070 _ZN3App11defineIndexEii
000483f4 g     O .bss	00000004 __malloc_top_pad
00045cc8 g     F .text	00000004 _getpid_r
00041008  w    F .text	00000050 _ZN9run_param4nextEv
000432e4 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00045b44 g     F .text	000000b4 __sigtramp_r
00045980 g     F .text	00000070 _sbrk_r
000412cc g     F .text	00000040 _ZN3FFT5writeEPh
000474ac  w    O .rodata	00000020 _ZTVSt9type_info
00042c70 g     F .text	00000010 _ZNKSt9exception4whatEv
00047ce4 g     O .rwdata	00000004 alt_max_fd
00041140  w    F .text	00000028 _ZN3App6Buffer6lengthEv
000450a8 g     F .text	00000138 __unpack_d
000473e4  w    O .rodata	0000000c _ZTISt9bad_alloc
000483f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0004744c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00043344 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00041e18 g     F .text	0000000c _ZdlPv
00047cc4 g     O .rwdata	00000004 _global_impure_ptr
00048ce0 g       *ABS*	00000000 __bss_end
00046250 g     F .text	00000070 alt_getchar
000443ac g     F .text	00000010 _Unwind_SjLj_Register
00040a54 g     F .text	00000038 _ZN3App12writeCompassEi
000451e0 g     F .text	00000018 abort
00041640 g     F .text	00000054 _ZN6Motors12getSingletonEv
000416d4 g     F .text	00000020 _ZN4WiFiC2Ev
00043048 g     F .text	000000a4 __cxa_end_catch
00042cf4 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00042aec g     F .text	00000018 _ZSt9terminatev
00047af4 g     O .rwdata	00000028 alt_dev_null
00044bf8 g     F .text	000000c8 __unpack_f
0004741c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000414a0 g     F .text	00000050 _ZN6Motors11write_powerEjjj
00046da4 g     F .text	0000001c alt_dcache_flush_all
00047c9c  w    O .rwdata	00000008 _ZTISt9exception
00047cec g       *ABS*	00000000 __ram_rwdata_end
000435c0 g     F .text	00000010 _ZNSt9type_infoD1Ev
00047cdc g     O .rwdata	00000008 alt_dev_list
000483e8 g     O .bss	00000004 __new_handler
00046ce0 g     F .text	00000028 alt_timestamp_freq
000435b0 g     F .text	00000010 _ZNSt9type_infoD0Ev
00043bec g     F .text	00000078 __gtsf2
0004760c g       *ABS*	00000000 __ram_rodata_end
00047ccc g     O .rwdata	00000004 jtag_uart_0
00040ee8 g     F .text	00000034 _ZN3AppD2Ev
000462e0 g     F .text	00000140 kill
00045d40 g     F .text	00000050 strcat
0004436c g     F .text	00000008 __umodsi3
000435a8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00040650 g     F .text	000000dc _ZN3App14writeGyroscopeEiii
00048ce0 g       *ABS*	00000000 end
00044a98 g     F .text	00000160 __pack_f
00041284 g     F .text	00000020 _ZN3FFTD1Ev
0004456c g     F .text	00000018 _Unwind_DeleteException
000472d0 g       *ABS*	00000000 __CTOR_LIST__
000586a0 g       *ABS*	00000000 __alt_stack_pointer
00044a18 g     F .text	00000080 __clzsi2
00043204 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00046afc g     F .text	000000a4 altera_avalon_jtag_uart_write
00047390  w    O .rodata	00000012 _ZTSSt13bad_exception
00041264 g     F .text	00000020 _ZN3FFTD2Ev
00045edc g     F .text	00000314 _free_r
000465fc g     F .text	00000258 alt_printf
00047094 g     F .text	000001bc __call_exitprocs
00041380 g     F .text	00000020 _ZN6MotorsD1Ev
00047cbc g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000003c _start
000403a4 g     F .text	000001ac _ZN3App10evenMotorsEii
000474cc  w    O .rodata	0000000d _ZTSSt9type_info
0004130c g     F .text	00000054 _ZN3FFT12getSingletonEv
000473c0  w    O .rodata	00000014 _ZTVSt9bad_alloc
00045cac g     F .text	0000001c signal
000469b8 g     F .text	00000040 alt_sys_init
00043dcc g     F .text	00000098 __floatsisf
00046f24 g     F .text	0000016c __register_exitproc
000473d4  w    O .rodata	0000000d _ZTSSt9bad_alloc
00041220 g     F .text	00000044 _ZN3FFTC1Ev
00044374 g     F .text	00000038 __mulsi3
0004760c g       *ABS*	00000000 __ram_rwdata_start
000446d4 g     F .text	000000f8 _Unwind_SjLj_RaiseException
000472d8 g       *ABS*	00000000 __ram_rodata_start
00048c2c g     O .bss	00000028 __malloc_current_mallinfo
00044678 g     F .text	0000005c _Unwind_SjLj_Resume
000435d0 g     F .text	00000010 _ZNSt9type_infoD2Ev
000433c0 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00041714 g     F .text	00000074 _ZN4WiFi5writeEPci
00048ce0 g       *ABS*	00000000 __alt_stack_base
00042d10 g     F .text	00000034 _ZNSt9bad_allocD0Ev
0004346c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0004489c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
00043e64 g     F .text	00000258 __divdf3
000483cc g     O .bss	00000004 _ZN3App6motorsE
00043588 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00041994 g     F .text	000000b0 _ZN4WiFi10stopServerEv
0004760c g     O .rwdata	00000408 __malloc_av_
000474dc g     O .rodata	00000010 __thenan_sf
0004737c  w    O .rodata	00000014 _ZTVSt9exception
00043270 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
000465bc g     F .text	00000020 __malloc_lock
000468c8 g     F .text	000000bc sbrk
000473f0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00042f4c g     F .text	00000074 __cxa_throw
00044430 g     F .text	00000010 _Unwind_SetIP
000483cc g       *ABS*	00000000 __bss_start
00045960 g     F .text	00000020 memset
00041ca0 g     F .text	000000d8 main
000483d4 g     O .bss	00000004 _ZN3FFT3fftE
0004840c g     O .bss	00000004 alt_envp
000483fc g     O .bss	00000004 __malloc_max_total_mem
00042a10 g     F .text	00000008 __cxa_get_globals_fast
00043cdc g     F .text	00000078 __ltsf2
000586a0 g       *ABS*	00000000 __alt_heap_limit
000441b4 g     F .text	00000074 __truncdfsf2
00046ba0 g     F .text	000000a4 alt_timestamp_start
00048c54 g     O .bss	0000008c _atexit0
00045220 g     F .text	00000740 _malloc_r
00047ce8 g     O .rwdata	00000004 alt_errno
00045b34 g     F .text	00000010 _init_signal
00047440  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00042ce4 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
000442a4 g     F .text	00000060 __divsi3
0004005c g     F .text	00000348 _ZN3App9oddMotorsEii
000474ec g     O .rodata	00000014 __thenan_df
00045db0 g     F .text	0000012c _malloc_trim_r
00040a8c g     F .text	00000138 _ZN3App10writeAudioEPii
000472d8 g       *ABS*	00000000 __CTOR_END__
00043898 g     F .text	000001e0 __mulsf3
000472d8 g       *ABS*	00000000 __flash_rodata_start
000472d8 g       *ABS*	00000000 __DTOR_LIST__
00046984 g     F .text	00000034 alt_irq_init
00040fbc  w    F .text	0000004c _ZN9run_param4initEv
00041614 g     F .text	0000002c _ZN6Motors4readEv
000416b4 g     F .text	00000020 _ZN4WiFiD1Ev
00043438 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00047500 g     O .rodata	00000100 __clz_tab
00046ef0 g     F .text	00000014 atexit
00043c64 g     F .text	00000078 __gesf2
00044464 g     F .text	00000008 _Unwind_GetTextRelBase
00042c2c g     F .text	00000044 __cxa_call_terminate
00041058  w    F .text	000000e8 _ZN3App6Buffer3popEv
00047cc0 g     O .rwdata	00000004 _impure_ptr
00048404 g     O .bss	00000004 alt_argc
000483dc g     O .bss	00000004 _ZN4WiFi4wifiE
00048410 g     O .bss	00000004 altera_avalon_timer_ts_base
00046e50 g     F .text	00000064 _do_dtors
00040bc4 g     F .text	00000230 _ZN3App3runEv
00040df4 g     F .text	00000070 _ZN3App10fftHandlerEj
00044454 g     F .text	00000008 _Unwind_FindEnclosingFunction
00041d78 g     F .text	000000a0 _Znam
00047cd4 g     O .rwdata	00000008 alt_fs_list
00044440 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00041450 g     F .text	00000050 _ZN6Motors15write_variationEjjj
000430ec g     F .text	00000118 __cxa_begin_catch
000432d4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00042b04 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00040020 g       *ABS*	00000000 __ram_exceptions_start
000413a0 g     F .text	00000060 _ZN6Motors5writeEjjjj
00046c44 g     F .text	0000009c alt_timestamp
00042cb0 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00047ca8 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000483d8 g     O .bss	00000004 _ZN6Motors6motorsE
00042da4 g     F .text	00000134 __cxa_allocate_exception
000474a0  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00042d04 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
00047cec g       *ABS*	00000000 _edata
00048ce0 g       *ABS*	00000000 _end
00047ca4 g     O .rwdata	00000001 _ZSt7nothrow
00040eb4 g     F .text	00000034 _ZN3AppD1Ev
00042530 g     F .text	000004e0 __gxx_personality_sj0
00040020 g       *ABS*	00000000 __ram_exceptions_end
00043374 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00041a44 g     F .text	00000064 _ZN4WiFi11startServerEv
00042c90 g     F .text	00000010 _ZNSt9exceptionD1Ev
00041918 g     F .text	0000007c _ZN4WiFi15sendInstructionEPc
00047cb8 g     O .rwdata	00000004 __malloc_trim_threshold
00046ed0 g     F .text	00000020 altera_nios2_qsys_irq_init
00046f04 g     F .text	00000020 exit
000443f4 g     F .text	00000018 _Unwind_SetGR
00041168  w    F .text	00000074 _ZN3App6BufferC1Ev
00042a48 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
00041c4c g     F .text	00000054 _ZN4WiFi12getSingletonEv
000412a4 g     F .text	00000028 _ZN3FFT4readEv
00044304 g     F .text	00000060 __modsi3
00042d44 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00048418 g     O .bss	00000014 _ZN3App6bufferE
000586a0 g       *ABS*	00000000 __alt_data_end
000434c0 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000473a4  w    O .rodata	0000000c _ZTISt13bad_exception
00040f6c g     F .text	00000050 _ZN3AppC2Ev
00047cd0 g     O .rwdata	00000004 esp8266
00044cc0 g     F .text	000000a8 __fpcmp_parts_f
00046230 g     F .text	00000020 _exit
000448f4 g     F .text	00000124 __muldi3
000443c8 g     F .text	00000018 _Unwind_GetGR
00042a18 g     F .text	00000008 __cxa_get_globals
00047cac g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00045d90 g     F .text	00000020 strlen
00045ad0 g     F .text	00000064 _init_signal_r
00047cb0  w    O .rwdata	00000008 _ZTISt9type_info
00046854 g     F .text	00000074 alt_putchar
000473b0  w    O .rodata	0000000d _ZTSSt9exception
00042c80 g     F .text	00000010 _ZNSt9exceptionD0Ev
00046eb4 g     F .text	0000001c alt_icache_flush_all
0004445c g     F .text	00000008 _Unwind_GetDataRelBase
00040e64 g     F .text	00000050 _ZN3App5setupEv
00046dec g     F .text	00000064 _do_ctors
00045bf8 g     F .text	00000014 __sigtramp
00041aa8 g     F .text	000001a4 _ZN4WiFi6configEPcS0_
00046d08 g     F .text	0000003c close
00043834 g     F .text	00000064 __addsf3
00046480 g     F .text	00000080 alt_load
000408f4 g     F .text	00000160 _ZN3App8compass4Ei
00044d94 g     F .text	00000314 __pack_d
00043598 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00041360 g     F .text	00000020 _ZN6MotorsD2Ev
00045abc g     F .text	00000014 raise
000451f8 g     F .text	00000014 free
00043290 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08400814 	ori	at,at,32
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00040020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40020:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40024:	dee1a814 	ori	sp,sp,34464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   40028:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4002c:	d6bf2714 	ori	gp,gp,64668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40030:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40034:	10a0f314 	ori	r2,r2,33740

    movhi r3, %hi(__bss_end)
   40038:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4003c:	18e33814 	ori	r3,r3,36064

    beq r2, r3, 1f
   40040:	10c00326 	beq	r2,r3,40050 <_start+0x30>

0:
    stw zero, (r2)
   40044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4004c:	10fffd36 	bltu	r2,r3,40044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40050:	00464800 	call	46480 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40054:	004656c0 	call	4656c <alt_main>

00040058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40058:	003fff06 	br	40058 <alt_after_alt_main>

0004005c <_ZN3App9oddMotorsEii>:
         return evenMotors(value, size);
     }
     return oddMotors(value, size);
 }

 int App::oddMotors(int value, int size) {
   4005c:	deffee04 	addi	sp,sp,-72
   40060:	dfc01115 	stw	ra,68(sp)
   40064:	df001015 	stw	fp,64(sp)
   40068:	dc000f15 	stw	r16,60(sp)
   4006c:	df000f04 	addi	fp,sp,60
   40070:	e13ff815 	stw	r4,-32(fp)
   40074:	e17ff915 	stw	r5,-28(fp)
   40078:	e1bffa15 	stw	r6,-24(fp)
     float line_int = 200.0/(size-2);
   4007c:	e0bffa17 	ldw	r2,-24(fp)
   40080:	113fff84 	addi	r4,r2,-2
   40084:	00440bc0 	call	440bc <__floatsidf>
   40088:	100f883a 	mov	r7,r2
   4008c:	1811883a 	mov	r8,r3
   40090:	0009883a 	mov	r4,zero
   40094:	01501a74 	movhi	r5,16489
   40098:	380d883a 	mov	r6,r7
   4009c:	400f883a 	mov	r7,r8
   400a0:	0043e640 	call	43e64 <__divdf3>
   400a4:	1009883a 	mov	r4,r2
   400a8:	180b883a 	mov	r5,r3
   400ac:	2005883a 	mov	r2,r4
   400b0:	2807883a 	mov	r3,r5
   400b4:	1009883a 	mov	r4,r2
   400b8:	180b883a 	mov	r5,r3
   400bc:	00441b40 	call	441b4 <__truncdfsf2>
   400c0:	e0bff715 	stw	r2,-36(fp)
     int half_mot = (size-1)/2;
   400c4:	e0bffa17 	ldw	r2,-24(fp)
   400c8:	10ffffc4 	addi	r3,r2,-1
   400cc:	1804d7fa 	srli	r2,r3,31
   400d0:	10c5883a 	add	r2,r2,r3
   400d4:	1005d07a 	srai	r2,r2,1
   400d8:	e0bff615 	stw	r2,-40(fp)
     float half_int_end = line_int*(half_mot-1)/2.0;
   400dc:	e0bff617 	ldw	r2,-40(fp)
   400e0:	113fffc4 	addi	r4,r2,-1
   400e4:	0043dcc0 	call	43dcc <__floatsisf>
   400e8:	1009883a 	mov	r4,r2
   400ec:	e17ff717 	ldw	r5,-36(fp)
   400f0:	00438980 	call	43898 <__mulsf3>
   400f4:	1009883a 	mov	r4,r2
   400f8:	01500034 	movhi	r5,16384
   400fc:	0043a780 	call	43a78 <__divsf3>
   40100:	e0bff515 	stw	r2,-44(fp)
     if((-1)*half_int_end < value && value < half_int_end) {
   40104:	e0bff517 	ldw	r2,-44(fp)
   40108:	1420003c 	xorhi	r16,r2,32768
   4010c:	e13ff917 	ldw	r4,-28(fp)
   40110:	0043dcc0 	call	43dcc <__floatsisf>
   40114:	8009883a 	mov	r4,r16
   40118:	100b883a 	mov	r5,r2
   4011c:	0043cdc0 	call	43cdc <__ltsf2>
   40120:	1004803a 	cmplt	r2,r2,zero
   40124:	1000011e 	bne	r2,zero,4012c <_ZN3App9oddMotorsEii+0xd0>
   40128:	00000b06 	br	40158 <_ZN3App9oddMotorsEii+0xfc>
   4012c:	e13ff917 	ldw	r4,-28(fp)
   40130:	0043dcc0 	call	43dcc <__floatsisf>
   40134:	1009883a 	mov	r4,r2
   40138:	e17ff517 	ldw	r5,-44(fp)
   4013c:	0043cdc0 	call	43cdc <__ltsf2>
   40140:	1004803a 	cmplt	r2,r2,zero
   40144:	1000011e 	bne	r2,zero,4014c <_ZN3App9oddMotorsEii+0xf0>
   40148:	00000306 	br	40158 <_ZN3App9oddMotorsEii+0xfc>
         return half_mot;
   4014c:	e0bff617 	ldw	r2,-40(fp)
   40150:	e0bfff15 	stw	r2,-4(fp)
   40154:	00008c06 	br	40388 <_ZN3App9oddMotorsEii+0x32c>
     }
     float mot_int_beg;
     int x = -1;
   40158:	00bfffc4 	movi	r2,-1
   4015c:	e0bff315 	stw	r2,-52(fp)
     if(value > 0) {
   40160:	e0bff917 	ldw	r2,-28(fp)
   40164:	10800050 	cmplti	r2,r2,1
   40168:	1000451e 	bne	r2,zero,40280 <_ZN3App9oddMotorsEii+0x224>
         mot_int_beg = half_int_end;
   4016c:	e0bff517 	ldw	r2,-44(fp)
   40170:	e0bff415 	stw	r2,-48(fp)
         for(int i = half_mot+1; i < size - 1 && x == -1; i++) {
   40174:	e0bff617 	ldw	r2,-40(fp)
   40178:	10800044 	addi	r2,r2,1
   4017c:	e0bff215 	stw	r2,-56(fp)
   40180:	00002e06 	br	4023c <_ZN3App9oddMotorsEii+0x1e0>
             if(mot_int_beg <= value && value < mot_int_beg + line_int) {
   40184:	e13ff917 	ldw	r4,-28(fp)
   40188:	0043dcc0 	call	43dcc <__floatsisf>
   4018c:	e03ffe05 	stb	zero,-8(fp)
   40190:	1009883a 	mov	r4,r2
   40194:	e17ff417 	ldw	r5,-48(fp)
   40198:	0043c640 	call	43c64 <__gesf2>
   4019c:	1004403a 	cmpge	r2,r2,zero
   401a0:	1000011e 	bne	r2,zero,401a8 <_ZN3App9oddMotorsEii+0x14c>
   401a4:	00000206 	br	401b0 <_ZN3App9oddMotorsEii+0x154>
   401a8:	00c00044 	movi	r3,1
   401ac:	e0fffe05 	stb	r3,-8(fp)
   401b0:	e0fffe03 	ldbu	r3,-8(fp)
   401b4:	1880005c 	xori	r2,r3,1
   401b8:	10803fcc 	andi	r2,r2,255
   401bc:	1004c03a 	cmpne	r2,r2,zero
   401c0:	1000171e 	bne	r2,zero,40220 <_ZN3App9oddMotorsEii+0x1c4>
   401c4:	e13ff917 	ldw	r4,-28(fp)
   401c8:	0043dcc0 	call	43dcc <__floatsisf>
   401cc:	1021883a 	mov	r16,r2
   401d0:	e13ff417 	ldw	r4,-48(fp)
   401d4:	e17ff717 	ldw	r5,-36(fp)
   401d8:	00438340 	call	43834 <__addsf3>
   401dc:	e03ffd05 	stb	zero,-12(fp)
   401e0:	8009883a 	mov	r4,r16
   401e4:	100b883a 	mov	r5,r2
   401e8:	0043cdc0 	call	43cdc <__ltsf2>
   401ec:	1004803a 	cmplt	r2,r2,zero
   401f0:	1000011e 	bne	r2,zero,401f8 <_ZN3App9oddMotorsEii+0x19c>
   401f4:	00000206 	br	40200 <_ZN3App9oddMotorsEii+0x1a4>
   401f8:	00800044 	movi	r2,1
   401fc:	e0bffd05 	stb	r2,-12(fp)
   40200:	e0fffd03 	ldbu	r3,-12(fp)
   40204:	1880005c 	xori	r2,r3,1
   40208:	10803fcc 	andi	r2,r2,255
   4020c:	1004c03a 	cmpne	r2,r2,zero
   40210:	1000031e 	bne	r2,zero,40220 <_ZN3App9oddMotorsEii+0x1c4>
                 x = i;
   40214:	e0bff217 	ldw	r2,-56(fp)
   40218:	e0bff315 	stw	r2,-52(fp)
     float mot_int_beg;
     int x = -1;
     if(value > 0) {
         mot_int_beg = half_int_end;
         for(int i = half_mot+1; i < size - 1 && x == -1; i++) {
             if(mot_int_beg <= value && value < mot_int_beg + line_int) {
   4021c:	00000406 	br	40230 <_ZN3App9oddMotorsEii+0x1d4>
                 x = i;
             } else {
                 mot_int_beg += line_int;
   40220:	e13ff417 	ldw	r4,-48(fp)
   40224:	e17ff717 	ldw	r5,-36(fp)
   40228:	00438340 	call	43834 <__addsf3>
   4022c:	e0bff415 	stw	r2,-48(fp)
     }
     float mot_int_beg;
     int x = -1;
     if(value > 0) {
         mot_int_beg = half_int_end;
         for(int i = half_mot+1; i < size - 1 && x == -1; i++) {
   40230:	e0bff217 	ldw	r2,-56(fp)
   40234:	10800044 	addi	r2,r2,1
   40238:	e0bff215 	stw	r2,-56(fp)
   4023c:	e0bffa17 	ldw	r2,-24(fp)
   40240:	10ffffc4 	addi	r3,r2,-1
   40244:	e0bff217 	ldw	r2,-56(fp)
   40248:	10c0030e 	bge	r2,r3,40258 <_ZN3App9oddMotorsEii+0x1fc>
   4024c:	e0bff317 	ldw	r2,-52(fp)
   40250:	10bfffe0 	cmpeqi	r2,r2,-1
   40254:	103fcb1e 	bne	r2,zero,40184 <_ZN3App9oddMotorsEii+0x128>
                 x = i;
             } else {
                 mot_int_beg += line_int;
             }
         }
         if (x == -1) {
   40258:	e0bff317 	ldw	r2,-52(fp)
   4025c:	10bfffd8 	cmpnei	r2,r2,-1
   40260:	1000041e 	bne	r2,zero,40274 <_ZN3App9oddMotorsEii+0x218>
             return size-1;
   40264:	e0bffa17 	ldw	r2,-24(fp)
   40268:	10bfffc4 	addi	r2,r2,-1
   4026c:	e0bfff15 	stw	r2,-4(fp)
   40270:	00004506 	br	40388 <_ZN3App9oddMotorsEii+0x32c>
         }
         return x;
   40274:	e0bff317 	ldw	r2,-52(fp)
   40278:	e0bfff15 	stw	r2,-4(fp)
   4027c:	00004206 	br	40388 <_ZN3App9oddMotorsEii+0x32c>
     }
     mot_int_beg = half_int_end*(-1);
   40280:	e0bff517 	ldw	r2,-44(fp)
   40284:	10a0003c 	xorhi	r2,r2,32768
   40288:	e0bff415 	stw	r2,-48(fp)
     for(int i = half_mot-1; i > 0 && x == -1; i--) {
   4028c:	e0bff617 	ldw	r2,-40(fp)
   40290:	10bfffc4 	addi	r2,r2,-1
   40294:	e0bff115 	stw	r2,-60(fp)
   40298:	00002e06 	br	40354 <_ZN3App9oddMotorsEii+0x2f8>
         if(mot_int_beg - line_int < value && value <= mot_int_beg) {
   4029c:	e13ff417 	ldw	r4,-48(fp)
   402a0:	e17ff717 	ldw	r5,-36(fp)
   402a4:	00437c40 	call	437c4 <__subsf3>
   402a8:	1021883a 	mov	r16,r2
   402ac:	e13ff917 	ldw	r4,-28(fp)
   402b0:	0043dcc0 	call	43dcc <__floatsisf>
   402b4:	e03ffc05 	stb	zero,-16(fp)
   402b8:	8009883a 	mov	r4,r16
   402bc:	100b883a 	mov	r5,r2
   402c0:	0043cdc0 	call	43cdc <__ltsf2>
   402c4:	1004803a 	cmplt	r2,r2,zero
   402c8:	1000011e 	bne	r2,zero,402d0 <_ZN3App9oddMotorsEii+0x274>
   402cc:	00000206 	br	402d8 <_ZN3App9oddMotorsEii+0x27c>
   402d0:	00c00044 	movi	r3,1
   402d4:	e0fffc05 	stb	r3,-16(fp)
   402d8:	e0fffc03 	ldbu	r3,-16(fp)
   402dc:	1880005c 	xori	r2,r3,1
   402e0:	10803fcc 	andi	r2,r2,255
   402e4:	1004c03a 	cmpne	r2,r2,zero
   402e8:	1000131e 	bne	r2,zero,40338 <_ZN3App9oddMotorsEii+0x2dc>
   402ec:	e13ff917 	ldw	r4,-28(fp)
   402f0:	0043dcc0 	call	43dcc <__floatsisf>
   402f4:	e03ffb05 	stb	zero,-20(fp)
   402f8:	1009883a 	mov	r4,r2
   402fc:	e17ff417 	ldw	r5,-48(fp)
   40300:	0043d540 	call	43d54 <__lesf2>
   40304:	10800050 	cmplti	r2,r2,1
   40308:	1000011e 	bne	r2,zero,40310 <_ZN3App9oddMotorsEii+0x2b4>
   4030c:	00000206 	br	40318 <_ZN3App9oddMotorsEii+0x2bc>
   40310:	00800044 	movi	r2,1
   40314:	e0bffb05 	stb	r2,-20(fp)
   40318:	e0fffb03 	ldbu	r3,-20(fp)
   4031c:	1880005c 	xori	r2,r3,1
   40320:	10803fcc 	andi	r2,r2,255
   40324:	1004c03a 	cmpne	r2,r2,zero
   40328:	1000031e 	bne	r2,zero,40338 <_ZN3App9oddMotorsEii+0x2dc>
             x = i;
   4032c:	e0bff117 	ldw	r2,-60(fp)
   40330:	e0bff315 	stw	r2,-52(fp)
         }
         return x;
     }
     mot_int_beg = half_int_end*(-1);
     for(int i = half_mot-1; i > 0 && x == -1; i--) {
         if(mot_int_beg - line_int < value && value <= mot_int_beg) {
   40334:	00000406 	br	40348 <_ZN3App9oddMotorsEii+0x2ec>
             x = i;
         } else {
             mot_int_beg -= line_int;
   40338:	e13ff417 	ldw	r4,-48(fp)
   4033c:	e17ff717 	ldw	r5,-36(fp)
   40340:	00437c40 	call	437c4 <__subsf3>
   40344:	e0bff415 	stw	r2,-48(fp)
             return size-1;
         }
         return x;
     }
     mot_int_beg = half_int_end*(-1);
     for(int i = half_mot-1; i > 0 && x == -1; i--) {
   40348:	e0bff117 	ldw	r2,-60(fp)
   4034c:	10bfffc4 	addi	r2,r2,-1
   40350:	e0bff115 	stw	r2,-60(fp)
   40354:	e0bff117 	ldw	r2,-60(fp)
   40358:	10800050 	cmplti	r2,r2,1
   4035c:	1000031e 	bne	r2,zero,4036c <_ZN3App9oddMotorsEii+0x310>
   40360:	e0bff317 	ldw	r2,-52(fp)
   40364:	10bfffe0 	cmpeqi	r2,r2,-1
   40368:	103fcc1e 	bne	r2,zero,4029c <_ZN3App9oddMotorsEii+0x240>
             x = i;
         } else {
             mot_int_beg -= line_int;
         }
     }
     if (x == -1) {
   4036c:	e0bff317 	ldw	r2,-52(fp)
   40370:	10bfffd8 	cmpnei	r2,r2,-1
   40374:	1000021e 	bne	r2,zero,40380 <_ZN3App9oddMotorsEii+0x324>
         return 0;
   40378:	e03fff15 	stw	zero,-4(fp)
   4037c:	00000206 	br	40388 <_ZN3App9oddMotorsEii+0x32c>
     }
     return x;
   40380:	e0bff317 	ldw	r2,-52(fp)
   40384:	e0bfff15 	stw	r2,-4(fp)
   40388:	e0bfff17 	ldw	r2,-4(fp)
 }
   4038c:	e037883a 	mov	sp,fp
   40390:	dfc00217 	ldw	ra,8(sp)
   40394:	df000117 	ldw	fp,4(sp)
   40398:	dc000017 	ldw	r16,0(sp)
   4039c:	dec00304 	addi	sp,sp,12
   403a0:	f800283a 	ret

000403a4 <_ZN3App10evenMotorsEii>:

 int App::evenMotors(int value, int size) {
   403a4:	defff304 	addi	sp,sp,-52
   403a8:	dfc00c15 	stw	ra,48(sp)
   403ac:	df000b15 	stw	fp,44(sp)
   403b0:	dc000a15 	stw	r16,40(sp)
   403b4:	df000a04 	addi	fp,sp,40
   403b8:	e13ffa15 	stw	r4,-24(fp)
   403bc:	e17ffb15 	stw	r5,-20(fp)
   403c0:	e1bffc15 	stw	r6,-16(fp)
     float line_int = 200.0/(size-2);
   403c4:	e0bffc17 	ldw	r2,-16(fp)
   403c8:	113fff84 	addi	r4,r2,-2
   403cc:	00440bc0 	call	440bc <__floatsidf>
   403d0:	100f883a 	mov	r7,r2
   403d4:	1811883a 	mov	r8,r3
   403d8:	0009883a 	mov	r4,zero
   403dc:	01501a74 	movhi	r5,16489
   403e0:	380d883a 	mov	r6,r7
   403e4:	400f883a 	mov	r7,r8
   403e8:	0043e640 	call	43e64 <__divdf3>
   403ec:	1009883a 	mov	r4,r2
   403f0:	180b883a 	mov	r5,r3
   403f4:	2005883a 	mov	r2,r4
   403f8:	2807883a 	mov	r3,r5
   403fc:	1009883a 	mov	r4,r2
   40400:	180b883a 	mov	r5,r3
   40404:	00441b40 	call	441b4 <__truncdfsf2>
   40408:	e0bff915 	stw	r2,-28(fp)
     if(value <= -100) {
   4040c:	e0bffb17 	ldw	r2,-20(fp)
   40410:	10bfe748 	cmpgei	r2,r2,-99
   40414:	1000021e 	bne	r2,zero,40420 <_ZN3App10evenMotorsEii+0x7c>
         return 0;
   40418:	e03fff15 	stw	zero,-4(fp)
   4041c:	00004506 	br	40534 <_ZN3App10evenMotorsEii+0x190>
     }
     if(value >= 100) {
   40420:	e0bffb17 	ldw	r2,-20(fp)
   40424:	10801910 	cmplti	r2,r2,100
   40428:	1000041e 	bne	r2,zero,4043c <_ZN3App10evenMotorsEii+0x98>
         return size-1;
   4042c:	e0bffc17 	ldw	r2,-16(fp)
   40430:	10bfffc4 	addi	r2,r2,-1
   40434:	e0bfff15 	stw	r2,-4(fp)
   40438:	00003e06 	br	40534 <_ZN3App10evenMotorsEii+0x190>
     }
     float int_beg = -100;
   4043c:	00b0b234 	movhi	r2,49864
   40440:	e0bff815 	stw	r2,-32(fp)
     int x = -1;
   40444:	00bfffc4 	movi	r2,-1
   40448:	e0bff715 	stw	r2,-36(fp)
     for(int i = 1; i < size-1 && x == -1; i++) {
   4044c:	00800044 	movi	r2,1
   40450:	e0bff615 	stw	r2,-40(fp)
   40454:	00002e06 	br	40510 <_ZN3App10evenMotorsEii+0x16c>
         if(int_beg < value && value <= int_beg + line_int) {
   40458:	e13ffb17 	ldw	r4,-20(fp)
   4045c:	0043dcc0 	call	43dcc <__floatsisf>
   40460:	e03ffe05 	stb	zero,-8(fp)
   40464:	1009883a 	mov	r4,r2
   40468:	e17ff817 	ldw	r5,-32(fp)
   4046c:	0043bec0 	call	43bec <__gtsf2>
   40470:	10800048 	cmpgei	r2,r2,1
   40474:	1000011e 	bne	r2,zero,4047c <_ZN3App10evenMotorsEii+0xd8>
   40478:	00000206 	br	40484 <_ZN3App10evenMotorsEii+0xe0>
   4047c:	00800044 	movi	r2,1
   40480:	e0bffe05 	stb	r2,-8(fp)
   40484:	e0fffe03 	ldbu	r3,-8(fp)
   40488:	1880005c 	xori	r2,r3,1
   4048c:	10803fcc 	andi	r2,r2,255
   40490:	1004c03a 	cmpne	r2,r2,zero
   40494:	1000171e 	bne	r2,zero,404f4 <_ZN3App10evenMotorsEii+0x150>
   40498:	e13ffb17 	ldw	r4,-20(fp)
   4049c:	0043dcc0 	call	43dcc <__floatsisf>
   404a0:	1021883a 	mov	r16,r2
   404a4:	e13ff817 	ldw	r4,-32(fp)
   404a8:	e17ff917 	ldw	r5,-28(fp)
   404ac:	00438340 	call	43834 <__addsf3>
   404b0:	e03ffd05 	stb	zero,-12(fp)
   404b4:	8009883a 	mov	r4,r16
   404b8:	100b883a 	mov	r5,r2
   404bc:	0043d540 	call	43d54 <__lesf2>
   404c0:	10800050 	cmplti	r2,r2,1
   404c4:	1000011e 	bne	r2,zero,404cc <_ZN3App10evenMotorsEii+0x128>
   404c8:	00000206 	br	404d4 <_ZN3App10evenMotorsEii+0x130>
   404cc:	00800044 	movi	r2,1
   404d0:	e0bffd05 	stb	r2,-12(fp)
   404d4:	e0fffd03 	ldbu	r3,-12(fp)
   404d8:	1880005c 	xori	r2,r3,1
   404dc:	10803fcc 	andi	r2,r2,255
   404e0:	1004c03a 	cmpne	r2,r2,zero
   404e4:	1000031e 	bne	r2,zero,404f4 <_ZN3App10evenMotorsEii+0x150>
             x = i;
   404e8:	e0bff617 	ldw	r2,-40(fp)
   404ec:	e0bff715 	stw	r2,-36(fp)
         return size-1;
     }
     float int_beg = -100;
     int x = -1;
     for(int i = 1; i < size-1 && x == -1; i++) {
         if(int_beg < value && value <= int_beg + line_int) {
   404f0:	00000406 	br	40504 <_ZN3App10evenMotorsEii+0x160>
             x = i;
         } else {
             int_beg += line_int;
   404f4:	e13ff817 	ldw	r4,-32(fp)
   404f8:	e17ff917 	ldw	r5,-28(fp)
   404fc:	00438340 	call	43834 <__addsf3>
   40500:	e0bff815 	stw	r2,-32(fp)
     if(value >= 100) {
         return size-1;
     }
     float int_beg = -100;
     int x = -1;
     for(int i = 1; i < size-1 && x == -1; i++) {
   40504:	e0bff617 	ldw	r2,-40(fp)
   40508:	10800044 	addi	r2,r2,1
   4050c:	e0bff615 	stw	r2,-40(fp)
   40510:	e0bffc17 	ldw	r2,-16(fp)
   40514:	10ffffc4 	addi	r3,r2,-1
   40518:	e0bff617 	ldw	r2,-40(fp)
   4051c:	10c0030e 	bge	r2,r3,4052c <_ZN3App10evenMotorsEii+0x188>
   40520:	e0bff717 	ldw	r2,-36(fp)
   40524:	10bfffe0 	cmpeqi	r2,r2,-1
   40528:	103fcb1e 	bne	r2,zero,40458 <_ZN3App10evenMotorsEii+0xb4>
             x = i;
         } else {
             int_beg += line_int;
         }
     }
     return x;
   4052c:	e0bff717 	ldw	r2,-36(fp)
   40530:	e0bfff15 	stw	r2,-4(fp)
   40534:	e0bfff17 	ldw	r2,-4(fp)
 }
   40538:	e037883a 	mov	sp,fp
   4053c:	dfc00217 	ldw	ra,8(sp)
   40540:	df000117 	ldw	fp,4(sp)
   40544:	dc000017 	ldw	r16,0(sp)
   40548:	dec00304 	addi	sp,sp,12
   4054c:	f800283a 	ret

00040550 <_ZN3App11defineIndexEii>:
        zAngle = zAngle > 240 ? 240 : zAngle;
        zAngle += 10;
        motors->write(( 0 | x | y | zAngle));
    }

int App::defineIndex(int value, int size) {
   40550:	defffa04 	addi	sp,sp,-24
   40554:	dfc00515 	stw	ra,20(sp)
   40558:	df000415 	stw	fp,16(sp)
   4055c:	df000404 	addi	fp,sp,16
   40560:	e13ffc15 	stw	r4,-16(fp)
   40564:	e17ffd15 	stw	r5,-12(fp)
   40568:	e1bffe15 	stw	r6,-8(fp)
     if(size%2 == 0) {
   4056c:	e0bffe17 	ldw	r2,-8(fp)
   40570:	1080004c 	andi	r2,r2,1
   40574:	1004c03a 	cmpne	r2,r2,zero
   40578:	1000061e 	bne	r2,zero,40594 <_ZN3App11defineIndexEii+0x44>
         return evenMotors(value, size);
   4057c:	e13ffc17 	ldw	r4,-16(fp)
   40580:	e17ffd17 	ldw	r5,-12(fp)
   40584:	e1bffe17 	ldw	r6,-8(fp)
   40588:	00403a40 	call	403a4 <_ZN3App10evenMotorsEii>
   4058c:	e0bfff15 	stw	r2,-4(fp)
   40590:	00000506 	br	405a8 <_ZN3App11defineIndexEii+0x58>
     }
     return oddMotors(value, size);
   40594:	e13ffc17 	ldw	r4,-16(fp)
   40598:	e17ffd17 	ldw	r5,-12(fp)
   4059c:	e1bffe17 	ldw	r6,-8(fp)
   405a0:	004005c0 	call	4005c <_ZN3App9oddMotorsEii>
   405a4:	e0bfff15 	stw	r2,-4(fp)
   405a8:	e0bfff17 	ldw	r2,-4(fp)
 }
   405ac:	e037883a 	mov	sp,fp
   405b0:	dfc00117 	ldw	ra,4(sp)
   405b4:	df000017 	ldw	fp,0(sp)
   405b8:	dec00204 	addi	sp,sp,8
   405bc:	f800283a 	ret

000405c0 <_Z41__static_initialization_and_destruction_0ii>:
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   405c0:	defffc04 	addi	sp,sp,-16
   405c4:	dfc00315 	stw	ra,12(sp)
   405c8:	df000215 	stw	fp,8(sp)
   405cc:	df000204 	addi	fp,sp,8
   405d0:	e13ffe15 	stw	r4,-8(fp)
   405d4:	e17fff15 	stw	r5,-4(fp)
   405d8:	e0bffe17 	ldw	r2,-8(fp)
   405dc:	10800058 	cmpnei	r2,r2,1
   405e0:	10000a1e 	bne	r2,zero,4060c <_Z41__static_initialization_and_destruction_0ii+0x4c>
   405e4:	e0ffff17 	ldw	r3,-4(fp)
   405e8:	00bfffd4 	movui	r2,65535
   405ec:	1880071e 	bne	r3,r2,4060c <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define COLUMNS 5
#define LINES 8
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
   405f0:	00416400 	call	41640 <_ZN6Motors12getSingletonEv>
   405f4:	d0a1cc15 	stw	r2,-30928(gp)
FFT	*App::fft = FFT::getSingleton();
   405f8:	004130c0 	call	4130c <_ZN3FFT12getSingletonEv>
   405fc:	d0a1cd15 	stw	r2,-30924(gp)
App::Buffer	App::buffer;
   40600:	01000174 	movhi	r4,5
   40604:	21210604 	addi	r4,r4,-31720
   40608:	00411680 	call	41168 <_ZN3App6BufferC1Ev>
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   4060c:	e037883a 	mov	sp,fp
   40610:	dfc00117 	ldw	ra,4(sp)
   40614:	df000017 	ldw	fp,0(sp)
   40618:	dec00204 	addi	sp,sp,8
   4061c:	f800283a 	ret

00040620 <_GLOBAL__I__ZN3App6motorsE>:
   40620:	defffe04 	addi	sp,sp,-8
   40624:	dfc00115 	stw	ra,4(sp)
   40628:	df000015 	stw	fp,0(sp)
   4062c:	d839883a 	mov	fp,sp
   40630:	01000044 	movi	r4,1
   40634:	017fffd4 	movui	r5,65535
   40638:	00405c00 	call	405c0 <_Z41__static_initialization_and_destruction_0ii>
   4063c:	e037883a 	mov	sp,fp
   40640:	dfc00117 	ldw	ra,4(sp)
   40644:	df000017 	ldw	fp,0(sp)
   40648:	dec00204 	addi	sp,sp,8
   4064c:	f800283a 	ret

00040650 <_ZN3App14writeGyroscopeEiii>:
    }
    motors->write( 0 | LINES-1 | motor | compass_vib_value );
}


void App::writeGyroscope(int xAngle, int yAngle, int zAngle) {
   40650:	defff604 	addi	sp,sp,-40
   40654:	dfc00915 	stw	ra,36(sp)
   40658:	df000815 	stw	fp,32(sp)
   4065c:	df000804 	addi	fp,sp,32
   40660:	e13ffa15 	stw	r4,-24(fp)
   40664:	e17ffb15 	stw	r5,-20(fp)
   40668:	e1bffc15 	stw	r6,-16(fp)
   4066c:	e1fffd15 	stw	r7,-12(fp)
        int x = defineIndex(xAngle, COLUMNS) << 16;
   40670:	e13ffa17 	ldw	r4,-24(fp)
   40674:	e17ffb17 	ldw	r5,-20(fp)
   40678:	01800144 	movi	r6,5
   4067c:	00405500 	call	40550 <_ZN3App11defineIndexEii>
   40680:	1004943a 	slli	r2,r2,16
   40684:	e0bff915 	stw	r2,-28(fp)
        int y = defineIndex(yAngle, LINES) << 8;
   40688:	e13ffa17 	ldw	r4,-24(fp)
   4068c:	e17ffc17 	ldw	r5,-16(fp)
   40690:	01800204 	movi	r6,8
   40694:	00405500 	call	40550 <_ZN3App11defineIndexEii>
   40698:	1004923a 	slli	r2,r2,8
   4069c:	e0bff815 	stw	r2,-32(fp)
        zAngle = zAngle < 0 ? zAngle*(-1) : zAngle;
   406a0:	e0bffd17 	ldw	r2,-12(fp)
   406a4:	e0bffe15 	stw	r2,-8(fp)
   406a8:	e0fffe17 	ldw	r3,-8(fp)
   406ac:	1804403a 	cmpge	r2,r3,zero
   406b0:	1000031e 	bne	r2,zero,406c0 <_ZN3App14writeGyroscopeEiii+0x70>
   406b4:	e0bffe17 	ldw	r2,-8(fp)
   406b8:	0085c83a 	sub	r2,zero,r2
   406bc:	e0bffe15 	stw	r2,-8(fp)
   406c0:	e0fffe17 	ldw	r3,-8(fp)
   406c4:	e0fffd15 	stw	r3,-12(fp)
        zAngle = zAngle > 240 ? 240 : zAngle;
   406c8:	e0bffd17 	ldw	r2,-12(fp)
   406cc:	e0bfff15 	stw	r2,-4(fp)
   406d0:	e0ffff17 	ldw	r3,-4(fp)
   406d4:	18803c50 	cmplti	r2,r3,241
   406d8:	1000021e 	bne	r2,zero,406e4 <_ZN3App14writeGyroscopeEiii+0x94>
   406dc:	00803c04 	movi	r2,240
   406e0:	e0bfff15 	stw	r2,-4(fp)
   406e4:	e0ffff17 	ldw	r3,-4(fp)
   406e8:	e0fffd15 	stw	r3,-12(fp)
        zAngle += 10;
   406ec:	e0bffd17 	ldw	r2,-12(fp)
   406f0:	10800284 	addi	r2,r2,10
   406f4:	e0bffd15 	stw	r2,-12(fp)
        motors->write(( 0 | x | y | zAngle));
   406f8:	d121cc17 	ldw	r4,-30928(gp)
   406fc:	e0fff917 	ldw	r3,-28(fp)
   40700:	e0bff817 	ldw	r2,-32(fp)
   40704:	1886b03a 	or	r3,r3,r2
   40708:	e0bffd17 	ldw	r2,-12(fp)
   4070c:	1884b03a 	or	r2,r3,r2
   40710:	100b883a 	mov	r5,r2
   40714:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
    }
   40718:	e037883a 	mov	sp,fp
   4071c:	dfc00117 	ldw	ra,4(sp)
   40720:	df000017 	ldw	fp,0(sp)
   40724:	dec00204 	addi	sp,sp,8
   40728:	f800283a 	ret

0004072c <_ZN3App8compass8Ei>:
    }
    int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 | motor | compass_vib_value );
}

void App::compass8(int direction) {
   4072c:	defff704 	addi	sp,sp,-36
   40730:	dfc00815 	stw	ra,32(sp)
   40734:	df000715 	stw	fp,28(sp)
   40738:	df000704 	addi	fp,sp,28
   4073c:	e13ffa15 	stw	r4,-24(fp)
   40740:	e17ffb15 	stw	r5,-20(fp)
    if(direction < 5 || direction > 355) {
   40744:	e0bffb17 	ldw	r2,-20(fp)
   40748:	10800150 	cmplti	r2,r2,5
   4074c:	1000031e 	bne	r2,zero,4075c <_ZN3App8compass8Ei+0x30>
   40750:	e0bffb17 	ldw	r2,-20(fp)
   40754:	10805910 	cmplti	r2,r2,356
   40758:	1000261e 	bne	r2,zero,407f4 <_ZN3App8compass8Ei+0xc8>
        motors->write( 0 | LINES-2 | (COLUMNS-1)/2 | compass_vib_value );
   4075c:	d121cc17 	ldw	r4,-30928(gp)
   40760:	e0bffa17 	ldw	r2,-24(fp)
   40764:	10800017 	ldw	r2,0(r2)
   40768:	10800194 	ori	r2,r2,6
   4076c:	100b883a 	mov	r5,r2
   40770:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
        if(direction < 5 && direction != 0)
   40774:	e0bffb17 	ldw	r2,-20(fp)
   40778:	10800148 	cmpgei	r2,r2,5
   4077c:	10000d1e 	bne	r2,zero,407b4 <_ZN3App8compass8Ei+0x88>
   40780:	e0bffb17 	ldw	r2,-20(fp)
   40784:	1005003a 	cmpeq	r2,r2,zero
   40788:	10000a1e 	bne	r2,zero,407b4 <_ZN3App8compass8Ei+0x88>
            motors->write( 0 | LINES-1 | 3 | compass_vib_value/2 );
   4078c:	d121cc17 	ldw	r4,-30928(gp)
   40790:	e0bffa17 	ldw	r2,-24(fp)
   40794:	10c00017 	ldw	r3,0(r2)
   40798:	1804d7fa 	srli	r2,r3,31
   4079c:	10c5883a 	add	r2,r2,r3
   407a0:	1005d07a 	srai	r2,r2,1
   407a4:	108001d4 	ori	r2,r2,7
   407a8:	100b883a 	mov	r5,r2
   407ac:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
}

void App::compass8(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | LINES-2 | (COLUMNS-1)/2 | compass_vib_value );
        if(direction < 5 && direction != 0)
   407b0:	00004b06 	br	408e0 <_ZN3App8compass8Ei+0x1b4>
            motors->write( 0 | LINES-1 | 3 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
   407b4:	e0bffb17 	ldw	r2,-20(fp)
   407b8:	10805910 	cmplti	r2,r2,356
   407bc:	1000481e 	bne	r2,zero,408e0 <_ZN3App8compass8Ei+0x1b4>
   407c0:	e0bffb17 	ldw	r2,-20(fp)
   407c4:	10805a20 	cmpeqi	r2,r2,360
   407c8:	1000451e 	bne	r2,zero,408e0 <_ZN3App8compass8Ei+0x1b4>
            motors->write( 0 | LINES-1 | COLUMNS-4 | compass_vib_value/2 );
   407cc:	d121cc17 	ldw	r4,-30928(gp)
   407d0:	e0bffa17 	ldw	r2,-24(fp)
   407d4:	10c00017 	ldw	r3,0(r2)
   407d8:	1804d7fa 	srli	r2,r3,31
   407dc:	10c5883a 	add	r2,r2,r3
   407e0:	1005d07a 	srai	r2,r2,1
   407e4:	108001d4 	ori	r2,r2,7
   407e8:	100b883a 	mov	r5,r2
   407ec:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
        return;
   407f0:	00003b06 	br	408e0 <_ZN3App8compass8Ei+0x1b4>
    }
    int motor;
    if(direction <= 180) {
   407f4:	e0bffb17 	ldw	r2,-20(fp)
   407f8:	10802d48 	cmpgei	r2,r2,181
   407fc:	1000181e 	bne	r2,zero,40860 <_ZN3App8compass8Ei+0x134>
        if(direction <= 90) {
   40800:	e0bffb17 	ldw	r2,-20(fp)
   40804:	108016c8 	cmpgei	r2,r2,91
   40808:	10000b1e 	bne	r2,zero,40838 <_ZN3App8compass8Ei+0x10c>
            motor = direction <= 45 ? 3 : 2;
   4080c:	e0bffb17 	ldw	r2,-20(fp)
   40810:	10800b88 	cmpgei	r2,r2,46
   40814:	1000031e 	bne	r2,zero,40824 <_ZN3App8compass8Ei+0xf8>
   40818:	008000c4 	movi	r2,3
   4081c:	e0bfff15 	stw	r2,-4(fp)
   40820:	00000206 	br	4082c <_ZN3App8compass8Ei+0x100>
   40824:	00800084 	movi	r2,2
   40828:	e0bfff15 	stw	r2,-4(fp)
   4082c:	e0bfff17 	ldw	r2,-4(fp)
   40830:	e0bff915 	stw	r2,-28(fp)
   40834:	00002206 	br	408c0 <_ZN3App8compass8Ei+0x194>
        } else {
            motor = direction <= 135 ? 1 : 0;
   40838:	e0bffb17 	ldw	r2,-20(fp)
   4083c:	10802208 	cmpgei	r2,r2,136
   40840:	1000031e 	bne	r2,zero,40850 <_ZN3App8compass8Ei+0x124>
   40844:	00800044 	movi	r2,1
   40848:	e0bffe15 	stw	r2,-8(fp)
   4084c:	00000106 	br	40854 <_ZN3App8compass8Ei+0x128>
   40850:	e03ffe15 	stw	zero,-8(fp)
   40854:	e0bffe17 	ldw	r2,-8(fp)
   40858:	e0bff915 	stw	r2,-28(fp)
   4085c:	00001806 	br	408c0 <_ZN3App8compass8Ei+0x194>
        }
    } else {
        if(direction < 270) {
   40860:	e0bffb17 	ldw	r2,-20(fp)
   40864:	10804388 	cmpgei	r2,r2,270
   40868:	10000b1e 	bne	r2,zero,40898 <_ZN3App8compass8Ei+0x16c>
            motor = direction < 225 ? COLUMNS-1 : COLUMNS-2;
   4086c:	e0bffb17 	ldw	r2,-20(fp)
   40870:	10803848 	cmpgei	r2,r2,225
   40874:	1000031e 	bne	r2,zero,40884 <_ZN3App8compass8Ei+0x158>
   40878:	00800104 	movi	r2,4
   4087c:	e0bffd15 	stw	r2,-12(fp)
   40880:	00000206 	br	4088c <_ZN3App8compass8Ei+0x160>
   40884:	008000c4 	movi	r2,3
   40888:	e0bffd15 	stw	r2,-12(fp)
   4088c:	e0bffd17 	ldw	r2,-12(fp)
   40890:	e0bff915 	stw	r2,-28(fp)
   40894:	00000a06 	br	408c0 <_ZN3App8compass8Ei+0x194>
        } else {
            motor = direction < 315 ? COLUMNS-3 : COLUMNS-4;
   40898:	e0bffb17 	ldw	r2,-20(fp)
   4089c:	10804ec8 	cmpgei	r2,r2,315
   408a0:	1000031e 	bne	r2,zero,408b0 <_ZN3App8compass8Ei+0x184>
   408a4:	00800084 	movi	r2,2
   408a8:	e0bffc15 	stw	r2,-16(fp)
   408ac:	00000206 	br	408b8 <_ZN3App8compass8Ei+0x18c>
   408b0:	00800044 	movi	r2,1
   408b4:	e0bffc15 	stw	r2,-16(fp)
   408b8:	e0bffc17 	ldw	r2,-16(fp)
   408bc:	e0bff915 	stw	r2,-28(fp)
        }
    }
    motors->write( 0 | LINES-1 | motor | compass_vib_value );
   408c0:	d121cc17 	ldw	r4,-30928(gp)
   408c4:	e0bffa17 	ldw	r2,-24(fp)
   408c8:	10c00017 	ldw	r3,0(r2)
   408cc:	e0bff917 	ldw	r2,-28(fp)
   408d0:	1884b03a 	or	r2,r3,r2
   408d4:	108001d4 	ori	r2,r2,7
   408d8:	100b883a 	mov	r5,r2
   408dc:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
}
   408e0:	e037883a 	mov	sp,fp
   408e4:	dfc00117 	ldw	ra,4(sp)
   408e8:	df000017 	ldw	fp,0(sp)
   408ec:	dec00204 	addi	sp,sp,8
   408f0:	f800283a 	ret

000408f4 <_ZN3App8compass4Ei>:
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}

void App::compass4(int direction) {
   408f4:	defff804 	addi	sp,sp,-32
   408f8:	dfc00715 	stw	ra,28(sp)
   408fc:	df000615 	stw	fp,24(sp)
   40900:	df000604 	addi	fp,sp,24
   40904:	e13ffb15 	stw	r4,-20(fp)
   40908:	e17ffc15 	stw	r5,-16(fp)
    if(direction < 5 || direction > 355) {
   4090c:	e0bffc17 	ldw	r2,-16(fp)
   40910:	10800150 	cmplti	r2,r2,5
   40914:	1000031e 	bne	r2,zero,40924 <_ZN3App8compass4Ei+0x30>
   40918:	e0bffc17 	ldw	r2,-16(fp)
   4091c:	10805910 	cmplti	r2,r2,356
   40920:	1000261e 	bne	r2,zero,409bc <_ZN3App8compass4Ei+0xc8>
        motors->write( 0 | LINES-2 | (COLUMNS-1)/2 | compass_vib_value );
   40924:	d121cc17 	ldw	r4,-30928(gp)
   40928:	e0bffb17 	ldw	r2,-20(fp)
   4092c:	10800017 	ldw	r2,0(r2)
   40930:	10800194 	ori	r2,r2,6
   40934:	100b883a 	mov	r5,r2
   40938:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
        if(direction < 5 && direction != 0)
   4093c:	e0bffc17 	ldw	r2,-16(fp)
   40940:	10800148 	cmpgei	r2,r2,5
   40944:	10000d1e 	bne	r2,zero,4097c <_ZN3App8compass4Ei+0x88>
   40948:	e0bffc17 	ldw	r2,-16(fp)
   4094c:	1005003a 	cmpeq	r2,r2,zero
   40950:	10000a1e 	bne	r2,zero,4097c <_ZN3App8compass4Ei+0x88>
            motors->write( 0 | LINES-1 | 1 | compass_vib_value/2 );
   40954:	d121cc17 	ldw	r4,-30928(gp)
   40958:	e0bffb17 	ldw	r2,-20(fp)
   4095c:	10c00017 	ldw	r3,0(r2)
   40960:	1804d7fa 	srli	r2,r3,31
   40964:	10c5883a 	add	r2,r2,r3
   40968:	1005d07a 	srai	r2,r2,1
   4096c:	108001d4 	ori	r2,r2,7
   40970:	100b883a 	mov	r5,r2
   40974:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
}

void App::compass4(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | LINES-2 | (COLUMNS-1)/2 | compass_vib_value );
        if(direction < 5 && direction != 0)
   40978:	00003106 	br	40a40 <_ZN3App8compass4Ei+0x14c>
            motors->write( 0 | LINES-1 | 1 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
   4097c:	e0bffc17 	ldw	r2,-16(fp)
   40980:	10805910 	cmplti	r2,r2,356
   40984:	10002e1e 	bne	r2,zero,40a40 <_ZN3App8compass4Ei+0x14c>
   40988:	e0bffc17 	ldw	r2,-16(fp)
   4098c:	10805a20 	cmpeqi	r2,r2,360
   40990:	10002b1e 	bne	r2,zero,40a40 <_ZN3App8compass4Ei+0x14c>
            motors->write( 0 | LINES-1 | COLUMNS-2 | compass_vib_value/2 );
   40994:	d121cc17 	ldw	r4,-30928(gp)
   40998:	e0bffb17 	ldw	r2,-20(fp)
   4099c:	10c00017 	ldw	r3,0(r2)
   409a0:	1804d7fa 	srli	r2,r3,31
   409a4:	10c5883a 	add	r2,r2,r3
   409a8:	1005d07a 	srai	r2,r2,1
   409ac:	108001d4 	ori	r2,r2,7
   409b0:	100b883a 	mov	r5,r2
   409b4:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
        return;
   409b8:	00002106 	br	40a40 <_ZN3App8compass4Ei+0x14c>
    }
    int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
   409bc:	e0bffc17 	ldw	r2,-16(fp)
   409c0:	10802d08 	cmpgei	r2,r2,180
   409c4:	10000a1e 	bne	r2,zero,409f0 <_ZN3App8compass4Ei+0xfc>
   409c8:	e0bffc17 	ldw	r2,-16(fp)
   409cc:	10801688 	cmpgei	r2,r2,90
   409d0:	1000031e 	bne	r2,zero,409e0 <_ZN3App8compass4Ei+0xec>
   409d4:	00800044 	movi	r2,1
   409d8:	e0bffe15 	stw	r2,-8(fp)
   409dc:	00000106 	br	409e4 <_ZN3App8compass4Ei+0xf0>
   409e0:	e03ffe15 	stw	zero,-8(fp)
   409e4:	e0bffe17 	ldw	r2,-8(fp)
   409e8:	e0bfff15 	stw	r2,-4(fp)
   409ec:	00000a06 	br	40a18 <_ZN3App8compass4Ei+0x124>
   409f0:	e0bffc17 	ldw	r2,-16(fp)
   409f4:	10804388 	cmpgei	r2,r2,270
   409f8:	1000031e 	bne	r2,zero,40a08 <_ZN3App8compass4Ei+0x114>
   409fc:	008000c4 	movi	r2,3
   40a00:	e0bffd15 	stw	r2,-12(fp)
   40a04:	00000206 	br	40a10 <_ZN3App8compass4Ei+0x11c>
   40a08:	00800104 	movi	r2,4
   40a0c:	e0bffd15 	stw	r2,-12(fp)
   40a10:	e0bffd17 	ldw	r2,-12(fp)
   40a14:	e0bfff15 	stw	r2,-4(fp)
   40a18:	e0bfff17 	ldw	r2,-4(fp)
   40a1c:	e0bffa15 	stw	r2,-24(fp)
    motors->write( 0 | LINES-1 | motor | compass_vib_value );
   40a20:	d121cc17 	ldw	r4,-30928(gp)
   40a24:	e0bffb17 	ldw	r2,-20(fp)
   40a28:	10c00017 	ldw	r3,0(r2)
   40a2c:	e0bffa17 	ldw	r2,-24(fp)
   40a30:	1884b03a 	or	r2,r3,r2
   40a34:	108001d4 	ori	r2,r2,7
   40a38:	100b883a 	mov	r5,r2
   40a3c:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
}
   40a40:	e037883a 	mov	sp,fp
   40a44:	dfc00117 	ldw	ra,4(sp)
   40a48:	df000017 	ldw	fp,0(sp)
   40a4c:	dec00204 	addi	sp,sp,8
   40a50:	f800283a 	ret

00040a54 <_ZN3App12writeCompassEi>:
		fft->write(buffer.pop());
}

//If we have 5 motors in a column, each motor is responsible for 72� each; We receive a float in (-180�, 180�]. To simplify we add 180 to it.

void App::writeCompass(int direction) {
   40a54:	defffc04 	addi	sp,sp,-16
   40a58:	dfc00315 	stw	ra,12(sp)
   40a5c:	df000215 	stw	fp,8(sp)
   40a60:	df000204 	addi	fp,sp,8
   40a64:	e13ffe15 	stw	r4,-8(fp)
   40a68:	e17fff15 	stw	r5,-4(fp)
    if(COLUMNS >= 8) {
        return compass8(direction);
    } else if(COLUMNS >= 4) {
        return compass4(direction);
   40a6c:	e13ffe17 	ldw	r4,-8(fp)
   40a70:	e17fff17 	ldw	r5,-4(fp)
   40a74:	00408f40 	call	408f4 <_ZN3App8compass4Ei>
    }
}
   40a78:	e037883a 	mov	sp,fp
   40a7c:	dfc00117 	ldw	ra,4(sp)
   40a80:	df000017 	ldw	fp,0(sp)
   40a84:	dec00204 	addi	sp,sp,8
   40a88:	f800283a 	ret

00040a8c <_ZN3App10writeAudioEPii>:
         }
     }
     return x;
 }

void App::writeAudio(int* freq, int samples) {
   40a8c:	defff504 	addi	sp,sp,-44
   40a90:	dfc00a15 	stw	ra,40(sp)
   40a94:	df000915 	stw	fp,36(sp)
   40a98:	dc400815 	stw	r17,32(sp)
   40a9c:	dc000715 	stw	r16,28(sp)
   40aa0:	df000704 	addi	fp,sp,28
   40aa4:	e13ffd15 	stw	r4,-12(fp)
   40aa8:	e17ffe15 	stw	r5,-8(fp)
   40aac:	e1bfff15 	stw	r6,-4(fp)
	int commom = samples/COLUMNS;
   40ab0:	e13fff17 	ldw	r4,-4(fp)
   40ab4:	01400144 	movi	r5,5
   40ab8:	00442a40 	call	442a4 <__divsi3>
   40abc:	e0bffc15 	stw	r2,-16(fp)
	int summation = 0;
   40ac0:	e03ffb15 	stw	zero,-20(fp)
	int pos = 0;
   40ac4:	e03ffa15 	stw	zero,-24(fp)
	motors->write_to_next_line();
   40ac8:	d121cc17 	ldw	r4,-30928(gp)
   40acc:	00415240 	call	41524 <_ZN6Motors18write_to_next_lineEv>
	motors->write( 0 | 0 | 255 | 0 );
   40ad0:	d121cc17 	ldw	r4,-30928(gp)
   40ad4:	01403fc4 	movi	r5,255
   40ad8:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
	motors->write( 2 << 24 | 0 | 255 | 1 );
   40adc:	d121cc17 	ldw	r4,-30928(gp)
   40ae0:	01408034 	movhi	r5,512
   40ae4:	29403fc4 	addi	r5,r5,255
   40ae8:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
	for(int i = 0; i < samples; i++) {
   40aec:	e03ff915 	stw	zero,-28(fp)
   40af0:	00002a06 	br	40b9c <_ZN3App10writeAudioEPii+0x110>
		summation += freq[i];
   40af4:	e0bff917 	ldw	r2,-28(fp)
   40af8:	1085883a 	add	r2,r2,r2
   40afc:	1085883a 	add	r2,r2,r2
   40b00:	1007883a 	mov	r3,r2
   40b04:	e0bffe17 	ldw	r2,-8(fp)
   40b08:	1885883a 	add	r2,r3,r2
   40b0c:	10c00017 	ldw	r3,0(r2)
   40b10:	e0bffb17 	ldw	r2,-20(fp)
   40b14:	10c5883a 	add	r2,r2,r3
   40b18:	e0bffb15 	stw	r2,-20(fp)
		if(i%commom == commom - 1) {
   40b1c:	e13ff917 	ldw	r4,-28(fp)
   40b20:	e17ffc17 	ldw	r5,-16(fp)
   40b24:	00443040 	call	44304 <__modsi3>
   40b28:	1007883a 	mov	r3,r2
   40b2c:	e0bffc17 	ldw	r2,-16(fp)
   40b30:	10bfffc4 	addi	r2,r2,-1
   40b34:	1880161e 	bne	r3,r2,40b90 <_ZN3App10writeAudioEPii+0x104>
			motors->write((1<<24)| 0 | (pos << 8) |(5));
   40b38:	d121cc17 	ldw	r4,-30928(gp)
   40b3c:	e0bffa17 	ldw	r2,-24(fp)
   40b40:	1006923a 	slli	r3,r2,8
   40b44:	00804034 	movhi	r2,256
   40b48:	10800144 	addi	r2,r2,5
   40b4c:	1884b03a 	or	r2,r3,r2
   40b50:	100b883a 	mov	r5,r2
   40b54:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
   40b58:	d421cc17 	ldw	r16,-30928(gp)
   40b5c:	e0bffa17 	ldw	r2,-24(fp)
   40b60:	1022923a 	slli	r17,r2,8
   40b64:	e13ffb17 	ldw	r4,-20(fp)
   40b68:	e17ffc17 	ldw	r5,-16(fp)
   40b6c:	00442a40 	call	442a4 <__divsi3>
   40b70:	8884b03a 	or	r2,r17,r2
   40b74:	100b883a 	mov	r5,r2
   40b78:	8009883a 	mov	r4,r16
   40b7c:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
			pos++;
   40b80:	e0bffa17 	ldw	r2,-24(fp)
   40b84:	10800044 	addi	r2,r2,1
   40b88:	e0bffa15 	stw	r2,-24(fp)
			summation = 0;
   40b8c:	e03ffb15 	stw	zero,-20(fp)
	int summation = 0;
	int pos = 0;
	motors->write_to_next_line();
	motors->write( 0 | 0 | 255 | 0 );
	motors->write( 2 << 24 | 0 | 255 | 1 );
	for(int i = 0; i < samples; i++) {
   40b90:	e0bff917 	ldw	r2,-28(fp)
   40b94:	10800044 	addi	r2,r2,1
   40b98:	e0bff915 	stw	r2,-28(fp)
   40b9c:	e0fff917 	ldw	r3,-28(fp)
   40ba0:	e0bfff17 	ldw	r2,-4(fp)
   40ba4:	18bfd316 	blt	r3,r2,40af4 <_ZN3App10writeAudioEPii+0x68>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
			pos++;
			summation = 0;
		}
	}
}
   40ba8:	e037883a 	mov	sp,fp
   40bac:	dfc00317 	ldw	ra,12(sp)
   40bb0:	df000217 	ldw	fp,8(sp)
   40bb4:	dc400117 	ldw	r17,4(sp)
   40bb8:	dc000017 	ldw	r16,0(sp)
   40bbc:	dec00404 	addi	sp,sp,16
   40bc0:	f800283a 	ret

00040bc4 <_ZN3App3runEv>:

void App::run() {
   40bc4:	defff304 	addi	sp,sp,-52
   40bc8:	dfc00c15 	stw	ra,48(sp)
   40bcc:	df000b15 	stw	fp,44(sp)
   40bd0:	df000b04 	addi	fp,sp,44
   40bd4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char *data;
	unsigned int *size;

	//Shift amount de 10, Decaimento de 15 e potencia de 255 em cada motor, durante inicialização do programa.
	motors->write((1<<24)|(255<<16)|(255<<8)|(10));
   40bd8:	d121cc17 	ldw	r4,-30928(gp)
   40bdc:	01408034 	movhi	r5,512
   40be0:	297fc284 	addi	r5,r5,-246
   40be4:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(15));
   40be8:	d121cc17 	ldw	r4,-30928(gp)
   40bec:	0140c034 	movhi	r5,768
   40bf0:	297fc3c4 	addi	r5,r5,-241
   40bf4:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));
   40bf8:	d121cc17 	ldw	r4,-30928(gp)
   40bfc:	01404034 	movhi	r5,256
   40c00:	297fffc4 	addi	r5,r5,-1
   40c04:	00414f00 	call	414f0 <_ZN6Motors5writeEj>

	alt_timestamp_start();
   40c08:	0046ba00 	call	46ba0 <alt_timestamp_start>
   40c0c:	00000006 	br	40c10 <_ZN3App3runEv+0x4c>

	while (1) {

		wifi->receive(data, size);
   40c10:	e0bffe17 	ldw	r2,-8(fp)
   40c14:	11000417 	ldw	r4,16(r2)
   40c18:	e17ffd17 	ldw	r5,-12(fp)
   40c1c:	e1bffc17 	ldw	r6,-16(fp)
   40c20:	00417880 	call	41788 <_ZN4WiFi7receiveEPhPj>
		char type = data[0];
   40c24:	e0bffd17 	ldw	r2,-12(fp)
   40c28:	10800003 	ldbu	r2,0(r2)
   40c2c:	e0bffb05 	stb	r2,-20(fp)
		if(alt_timestamp() >= 500) {
   40c30:	0046c440 	call	46c44 <alt_timestamp>
   40c34:	10807d28 	cmpgeui	r2,r2,500
   40c38:	10803fcc 	andi	r2,r2,255
   40c3c:	1005003a 	cmpeq	r2,r2,zero
   40c40:	10000c1e 	bne	r2,zero,40c74 <_ZN3App3runEv+0xb0>
			running.next();
   40c44:	e0bffe17 	ldw	r2,-8(fp)
   40c48:	11000104 	addi	r4,r2,4
   40c4c:	00410080 	call	41008 <_ZN9run_param4nextEv>
			motors->write( 1 | 255 << 16 | 255 << 8 | 0); // setting shift amount to instantaneous
   40c50:	d121cc17 	ldw	r4,-30928(gp)
   40c54:	01404034 	movhi	r5,256
   40c58:	297fc044 	addi	r5,r5,-255
   40c5c:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
			motors->write( 0 | 255 << 16 | 255 << 8 | 0); // setting all motors to not vibrate
   40c60:	d121cc17 	ldw	r4,-30928(gp)
   40c64:	01404034 	movhi	r5,256
   40c68:	297fc004 	addi	r5,r5,-256
   40c6c:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
			alt_timestamp_start();
   40c70:	0046ba00 	call	46ba0 <alt_timestamp_start>
		}
		if(running.current != type) {
   40c74:	e0bffe17 	ldw	r2,-8(fp)
   40c78:	10800203 	ldbu	r2,8(r2)
   40c7c:	10c03fcc 	andi	r3,r2,255
   40c80:	18c0201c 	xori	r3,r3,128
   40c84:	18ffe004 	addi	r3,r3,-128
   40c88:	e0bffb07 	ldb	r2,-20(fp)
   40c8c:	18bfe01e 	bne	r3,r2,40c10 <_ZN3App3runEv+0x4c>
			continue;
		}
		switch (type) {
   40c90:	e0bffb07 	ldb	r2,-20(fp)
   40c94:	e0bfff15 	stw	r2,-4(fp)
   40c98:	e0ffff17 	ldw	r3,-4(fp)
   40c9c:	188018e0 	cmpeqi	r2,r3,99
   40ca0:	10003e1e 	bne	r2,zero,40d9c <_ZN3App3runEv+0x1d8>
   40ca4:	e0ffff17 	ldw	r3,-4(fp)
   40ca8:	18801908 	cmpgei	r2,r3,100
   40cac:	1000041e 	bne	r2,zero,40cc0 <_ZN3App3runEv+0xfc>
   40cb0:	e0ffff17 	ldw	r3,-4(fp)
   40cb4:	18801860 	cmpeqi	r2,r3,97
   40cb8:	10002b1e 	bne	r2,zero,40d68 <_ZN3App3runEv+0x1a4>
   40cbc:	003fd406 	br	40c10 <_ZN3App3runEv+0x4c>
   40cc0:	e0ffff17 	ldw	r3,-4(fp)
   40cc4:	188019e0 	cmpeqi	r2,r3,103
   40cc8:	10003b1e 	bne	r2,zero,40db8 <_ZN3App3runEv+0x1f4>
   40ccc:	e0ffff17 	ldw	r3,-4(fp)
   40cd0:	18801b60 	cmpeqi	r2,r3,109
   40cd4:	1000011e 	bne	r2,zero,40cdc <_ZN3App3runEv+0x118>
   40cd8:	003fcd06 	br	40c10 <_ZN3App3runEv+0x4c>
		case 'm': { /* motors */
			int cmd = (int)(data[1]);
   40cdc:	e0bffd17 	ldw	r2,-12(fp)
   40ce0:	10800044 	addi	r2,r2,1
   40ce4:	10800003 	ldbu	r2,0(r2)
   40ce8:	10803fcc 	andi	r2,r2,255
   40cec:	e0bffa15 	stw	r2,-24(fp)
			int linha = (int)(data[2]);
   40cf0:	e0bffd17 	ldw	r2,-12(fp)
   40cf4:	10800084 	addi	r2,r2,2
   40cf8:	10800003 	ldbu	r2,0(r2)
   40cfc:	10803fcc 	andi	r2,r2,255
   40d00:	e0bff915 	stw	r2,-28(fp)
			int coluna = (int)(data[3]);
   40d04:	e0bffd17 	ldw	r2,-12(fp)
   40d08:	108000c4 	addi	r2,r2,3
   40d0c:	10800003 	ldbu	r2,0(r2)
   40d10:	10803fcc 	andi	r2,r2,255
   40d14:	e0bff815 	stw	r2,-32(fp)
			int valor = (int)(data[4]);
   40d18:	e0bffd17 	ldw	r2,-12(fp)
   40d1c:	10800104 	addi	r2,r2,4
   40d20:	10800003 	ldbu	r2,0(r2)
   40d24:	10803fcc 	andi	r2,r2,255
   40d28:	e0bff715 	stw	r2,-36(fp)
//			alt_putstr("Motors received. Sending it to the motors...\n");
			int command = (  (cmd << 24) | (linha << 16) | (coluna << 8) | (valor) );
   40d2c:	e0bffa17 	ldw	r2,-24(fp)
   40d30:	1006963a 	slli	r3,r2,24
   40d34:	e0bff917 	ldw	r2,-28(fp)
   40d38:	1004943a 	slli	r2,r2,16
   40d3c:	1886b03a 	or	r3,r3,r2
   40d40:	e0bff817 	ldw	r2,-32(fp)
   40d44:	1004923a 	slli	r2,r2,8
   40d48:	1886b03a 	or	r3,r3,r2
   40d4c:	e0bff717 	ldw	r2,-36(fp)
   40d50:	1884b03a 	or	r2,r3,r2
   40d54:	e0bff615 	stw	r2,-40(fp)
//			alt_printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
			motors->write(command);
   40d58:	d121cc17 	ldw	r4,-30928(gp)
   40d5c:	e17ff617 	ldw	r5,-40(fp)
   40d60:	00414f00 	call	414f0 <_ZN6Motors5writeEj>
		}
			break;
   40d64:	003faa06 	br	40c10 <_ZN3App3runEv+0x4c>
		case 'a': { /*audio*/
//			alt_putstr("Audio received. Sending it to the FFT...\n");
//			alt_printf("%s\n", data);
			//buffer.push(data);
			motors->write_to_next_line();
   40d68:	d121cc17 	ldw	r4,-30928(gp)
   40d6c:	00415240 	call	41524 <_ZN6Motors18write_to_next_lineEv>
			fft->write(data);
   40d70:	d121cd17 	ldw	r4,-30924(gp)
   40d74:	e17ffd17 	ldw	r5,-12(fp)
   40d78:	00412cc0 	call	412cc <_ZN3FFT5writeEPh>
			int* freq = fft->read();
   40d7c:	d121cd17 	ldw	r4,-30924(gp)
   40d80:	00412a40 	call	412a4 <_ZN3FFT4readEv>
   40d84:	e0bff515 	stw	r2,-44(fp)
			writeAudio(freq, 11);
   40d88:	e13ffe17 	ldw	r4,-8(fp)
   40d8c:	e17ff517 	ldw	r5,-44(fp)
   40d90:	018002c4 	movi	r6,11
   40d94:	0040a8c0 	call	40a8c <_ZN3App10writeAudioEPii>
			//	fft->write(buffer.pop());
			//}


		}
			break;
   40d98:	003f9d06 	br	40c10 <_ZN3App3runEv+0x4c>
		case 'c': { /*compass*/
//			alt_putstr("Compass received. Sending to the motors...\n");
//			alt_printf("%s\n", data);

			writeCompass((int)data[1]);
   40d9c:	e0bffd17 	ldw	r2,-12(fp)
   40da0:	10800044 	addi	r2,r2,1
   40da4:	10800003 	ldbu	r2,0(r2)
   40da8:	11403fcc 	andi	r5,r2,255
   40dac:	e13ffe17 	ldw	r4,-8(fp)
   40db0:	0040a540 	call	40a54 <_ZN3App12writeCompassEi>
		}
			break;
   40db4:	003f9606 	br	40c10 <_ZN3App3runEv+0x4c>
		case 'g': { /*gyroscope*/
//			alt_putstr("Gyroscope received. Sending to the motors...\n");
//			alt_printf("%s\n", data);
			writeGyroscope(int(data[1]), int(data[2]), int(data[3]));
   40db8:	e0bffd17 	ldw	r2,-12(fp)
   40dbc:	10800044 	addi	r2,r2,1
   40dc0:	10800003 	ldbu	r2,0(r2)
   40dc4:	11403fcc 	andi	r5,r2,255
   40dc8:	e0bffd17 	ldw	r2,-12(fp)
   40dcc:	10800084 	addi	r2,r2,2
   40dd0:	10800003 	ldbu	r2,0(r2)
   40dd4:	11803fcc 	andi	r6,r2,255
   40dd8:	e0bffd17 	ldw	r2,-12(fp)
   40ddc:	108000c4 	addi	r2,r2,3
   40de0:	10800003 	ldbu	r2,0(r2)
   40de4:	11c03fcc 	andi	r7,r2,255
   40de8:	e13ffe17 	ldw	r4,-8(fp)
   40dec:	00406500 	call	40650 <_ZN3App14writeGyroscopeEiii>
	motors->write((2<<24)|(255<<16)|(255<<8)|(15));
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));

	alt_timestamp_start();

	while (1) {
   40df0:	003f8706 	br	40c10 <_ZN3App3runEv+0x4c>

00040df4 <_ZN3App10fftHandlerEj>:
	wifi->config(SSID, PASSWORD);
	wifi->startServer();
	//fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
   40df4:	defffc04 	addi	sp,sp,-16
   40df8:	dfc00315 	stw	ra,12(sp)
   40dfc:	df000215 	stw	fp,8(sp)
   40e00:	dc000115 	stw	r16,4(sp)
   40e04:	df000104 	addi	fp,sp,4
   40e08:	e13fff15 	stw	r4,-4(fp)

	//	motors->write(output);
	fft->read();
   40e0c:	d121cd17 	ldw	r4,-30924(gp)
   40e10:	00412a40 	call	412a4 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
   40e14:	01000174 	movhi	r4,5
   40e18:	21210604 	addi	r4,r4,-31720
   40e1c:	00411400 	call	41140 <_ZN3App6Buffer6lengthEv>
   40e20:	10800048 	cmpgei	r2,r2,1
   40e24:	10803fcc 	andi	r2,r2,255
   40e28:	1005003a 	cmpeq	r2,r2,zero
   40e2c:	1000071e 	bne	r2,zero,40e4c <_ZN3App10fftHandlerEj+0x58>
		fft->write(buffer.pop());
   40e30:	d421cd17 	ldw	r16,-30924(gp)
   40e34:	01000174 	movhi	r4,5
   40e38:	21210604 	addi	r4,r4,-31720
   40e3c:	00410580 	call	41058 <_ZN3App6Buffer3popEv>
   40e40:	100b883a 	mov	r5,r2
   40e44:	8009883a 	mov	r4,r16
   40e48:	00412cc0 	call	412cc <_ZN3FFT5writeEPh>
}
   40e4c:	e037883a 	mov	sp,fp
   40e50:	dfc00217 	ldw	ra,8(sp)
   40e54:	df000117 	ldw	fp,4(sp)
   40e58:	dc000017 	ldw	r16,0(sp)
   40e5c:	dec00304 	addi	sp,sp,12
   40e60:	f800283a 	ret

00040e64 <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
   40e64:	defffd04 	addi	sp,sp,-12
   40e68:	dfc00215 	stw	ra,8(sp)
   40e6c:	df000115 	stw	fp,4(sp)
   40e70:	df000104 	addi	fp,sp,4
   40e74:	e13fff15 	stw	r4,-4(fp)
	wifi->config(SSID, PASSWORD);
   40e78:	e0bfff17 	ldw	r2,-4(fp)
   40e7c:	11000417 	ldw	r4,16(r2)
   40e80:	01400134 	movhi	r5,4
   40e84:	295cb804 	addi	r5,r5,29408
   40e88:	01800134 	movhi	r6,4
   40e8c:	319cbb04 	addi	r6,r6,29420
   40e90:	0041aa80 	call	41aa8 <_ZN4WiFi6configEPcS0_>
	wifi->startServer();
   40e94:	e0bfff17 	ldw	r2,-4(fp)
   40e98:	11000417 	ldw	r4,16(r2)
   40e9c:	0041a440 	call	41a44 <_ZN4WiFi11startServerEv>
	//fft->setInterruptHandler(App::fftHandler);
}
   40ea0:	e037883a 	mov	sp,fp
   40ea4:	dfc00117 	ldw	ra,4(sp)
   40ea8:	df000017 	ldw	fp,0(sp)
   40eac:	dec00204 	addi	sp,sp,8
   40eb0:	f800283a 	ret

00040eb4 <_ZN3AppD1Ev>:
	wifi = WiFi::getSingleton();
	compass_vib_value = 25;
	running.init();
}

App::~App() {
   40eb4:	defffd04 	addi	sp,sp,-12
   40eb8:	dfc00215 	stw	ra,8(sp)
   40ebc:	df000115 	stw	fp,4(sp)
   40ec0:	df000104 	addi	fp,sp,4
   40ec4:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   40ec8:	e0bfff17 	ldw	r2,-4(fp)
   40ecc:	11000417 	ldw	r4,16(r2)
   40ed0:	00419940 	call	41994 <_ZN4WiFi10stopServerEv>
}
   40ed4:	e037883a 	mov	sp,fp
   40ed8:	dfc00117 	ldw	ra,4(sp)
   40edc:	df000017 	ldw	fp,0(sp)
   40ee0:	dec00204 	addi	sp,sp,8
   40ee4:	f800283a 	ret

00040ee8 <_ZN3AppD2Ev>:
	wifi = WiFi::getSingleton();
	compass_vib_value = 25;
	running.init();
}

App::~App() {
   40ee8:	defffd04 	addi	sp,sp,-12
   40eec:	dfc00215 	stw	ra,8(sp)
   40ef0:	df000115 	stw	fp,4(sp)
   40ef4:	df000104 	addi	fp,sp,4
   40ef8:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   40efc:	e0bfff17 	ldw	r2,-4(fp)
   40f00:	11000417 	ldw	r4,16(r2)
   40f04:	00419940 	call	41994 <_ZN4WiFi10stopServerEv>
}
   40f08:	e037883a 	mov	sp,fp
   40f0c:	dfc00117 	ldw	ra,4(sp)
   40f10:	df000017 	ldw	fp,0(sp)
   40f14:	dec00204 	addi	sp,sp,8
   40f18:	f800283a 	ret

00040f1c <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   40f1c:	defffd04 	addi	sp,sp,-12
   40f20:	dfc00215 	stw	ra,8(sp)
   40f24:	df000115 	stw	fp,4(sp)
   40f28:	df000104 	addi	fp,sp,4
   40f2c:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   40f30:	0041c4c0 	call	41c4c <_ZN4WiFi12getSingletonEv>
   40f34:	1007883a 	mov	r3,r2
   40f38:	e0bfff17 	ldw	r2,-4(fp)
   40f3c:	10c00415 	stw	r3,16(r2)
	compass_vib_value = 25;
   40f40:	e0ffff17 	ldw	r3,-4(fp)
   40f44:	00800644 	movi	r2,25
   40f48:	18800015 	stw	r2,0(r3)
	running.init();
   40f4c:	e0bfff17 	ldw	r2,-4(fp)
   40f50:	11000104 	addi	r4,r2,4
   40f54:	0040fbc0 	call	40fbc <_ZN9run_param4initEv>
}
   40f58:	e037883a 	mov	sp,fp
   40f5c:	dfc00117 	ldw	ra,4(sp)
   40f60:	df000017 	ldw	fp,0(sp)
   40f64:	dec00204 	addi	sp,sp,8
   40f68:	f800283a 	ret

00040f6c <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   40f6c:	defffd04 	addi	sp,sp,-12
   40f70:	dfc00215 	stw	ra,8(sp)
   40f74:	df000115 	stw	fp,4(sp)
   40f78:	df000104 	addi	fp,sp,4
   40f7c:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   40f80:	0041c4c0 	call	41c4c <_ZN4WiFi12getSingletonEv>
   40f84:	1007883a 	mov	r3,r2
   40f88:	e0bfff17 	ldw	r2,-4(fp)
   40f8c:	10c00415 	stw	r3,16(r2)
	compass_vib_value = 25;
   40f90:	e0ffff17 	ldw	r3,-4(fp)
   40f94:	00800644 	movi	r2,25
   40f98:	18800015 	stw	r2,0(r3)
	running.init();
   40f9c:	e0bfff17 	ldw	r2,-4(fp)
   40fa0:	11000104 	addi	r4,r2,4
   40fa4:	0040fbc0 	call	40fbc <_ZN9run_param4initEv>
}
   40fa8:	e037883a 	mov	sp,fp
   40fac:	dfc00117 	ldw	ra,4(sp)
   40fb0:	df000017 	ldw	fp,0(sp)
   40fb4:	dec00204 	addi	sp,sp,8
   40fb8:	f800283a 	ret

00040fbc <_ZN9run_param4initEv>:
struct run_param {
	char* possible;
	char current;
	int iterator;

	void init() {
   40fbc:	defffe04 	addi	sp,sp,-8
   40fc0:	df000115 	stw	fp,4(sp)
   40fc4:	df000104 	addi	fp,sp,4
   40fc8:	e13fff15 	stw	r4,-4(fp)
		possible = "macg";
   40fcc:	e0ffff17 	ldw	r3,-4(fp)
   40fd0:	00800134 	movhi	r2,4
   40fd4:	109cb604 	addi	r2,r2,29400
   40fd8:	18800015 	stw	r2,0(r3)
		current = possible[0];
   40fdc:	e0bfff17 	ldw	r2,-4(fp)
   40fe0:	10800017 	ldw	r2,0(r2)
   40fe4:	10c00003 	ldbu	r3,0(r2)
   40fe8:	e0bfff17 	ldw	r2,-4(fp)
   40fec:	10c00105 	stb	r3,4(r2)
		iterator = 0;
   40ff0:	e0bfff17 	ldw	r2,-4(fp)
   40ff4:	10000215 	stw	zero,8(r2)
	}
   40ff8:	e037883a 	mov	sp,fp
   40ffc:	df000017 	ldw	fp,0(sp)
   41000:	dec00104 	addi	sp,sp,4
   41004:	f800283a 	ret

00041008 <_ZN9run_param4nextEv>:
	void next() {
   41008:	defffe04 	addi	sp,sp,-8
   4100c:	df000115 	stw	fp,4(sp)
   41010:	df000104 	addi	fp,sp,4
   41014:	e13fff15 	stw	r4,-4(fp)
		current = possible[iterator++];
   41018:	e0bfff17 	ldw	r2,-4(fp)
   4101c:	10c00017 	ldw	r3,0(r2)
   41020:	e0bfff17 	ldw	r2,-4(fp)
   41024:	11000217 	ldw	r4,8(r2)
   41028:	2005883a 	mov	r2,r4
   4102c:	1885883a 	add	r2,r3,r2
   41030:	10c00003 	ldbu	r3,0(r2)
   41034:	e0bfff17 	ldw	r2,-4(fp)
   41038:	10c00105 	stb	r3,4(r2)
   4103c:	20c00044 	addi	r3,r4,1
   41040:	e0bfff17 	ldw	r2,-4(fp)
   41044:	10c00215 	stw	r3,8(r2)
	}
   41048:	e037883a 	mov	sp,fp
   4104c:	df000017 	ldw	fp,0(sp)
   41050:	dec00104 	addi	sp,sp,4
   41054:	f800283a 	ret

00041058 <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
   41058:	defffd04 	addi	sp,sp,-12
   4105c:	df000215 	stw	fp,8(sp)
   41060:	df000204 	addi	fp,sp,8
   41064:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
   41068:	e0bffe17 	ldw	r2,-8(fp)
   4106c:	10800217 	ldw	r2,8(r2)
   41070:	10bfffd8 	cmpnei	r2,r2,-1
   41074:	1000021e 	bne	r2,zero,41080 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
   41078:	e03fff15 	stw	zero,-4(fp)
   4107c:	00002b06 	br	4112c <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
   41080:	e0bffe17 	ldw	r2,-8(fp)
   41084:	10800217 	ldw	r2,8(r2)
   41088:	10c00044 	addi	r3,r2,1
   4108c:	e0bffe17 	ldw	r2,-8(fp)
   41090:	10c00215 	stw	r3,8(r2)
   41094:	e0bffe17 	ldw	r2,-8(fp)
   41098:	10800217 	ldw	r2,8(r2)
   4109c:	1007883a 	mov	r3,r2
   410a0:	e0bffe17 	ldw	r2,-8(fp)
   410a4:	10800017 	ldw	r2,0(r2)
   410a8:	1884703a 	and	r2,r3,r2
   410ac:	1007883a 	mov	r3,r2
   410b0:	e0bffe17 	ldw	r2,-8(fp)
   410b4:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
   410b8:	e0bffe17 	ldw	r2,-8(fp)
   410bc:	10c00217 	ldw	r3,8(r2)
   410c0:	e0bffe17 	ldw	r2,-8(fp)
   410c4:	10800317 	ldw	r2,12(r2)
   410c8:	1880091e 	bne	r3,r2,410f0 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
   410cc:	e0bffe17 	ldw	r2,-8(fp)
   410d0:	10000315 	stw	zero,12(r2)
					begin = -1;
   410d4:	e0fffe17 	ldw	r3,-8(fp)
   410d8:	00bfffc4 	movi	r2,-1
   410dc:	18800215 	stw	r2,8(r3)
					len = 0;
   410e0:	e0bffe17 	ldw	r2,-8(fp)
   410e4:	10000115 	stw	zero,4(r2)
					return NULL;;
   410e8:	e03fff15 	stw	zero,-4(fp)
   410ec:	00000f06 	br	4112c <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
   410f0:	e0bffe17 	ldw	r2,-8(fp)
   410f4:	10800117 	ldw	r2,4(r2)
   410f8:	10ffffc4 	addi	r3,r2,-1
   410fc:	e0bffe17 	ldw	r2,-8(fp)
   41100:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
   41104:	e0bffe17 	ldw	r2,-8(fp)
   41108:	10c00417 	ldw	r3,16(r2)
   4110c:	e0bffe17 	ldw	r2,-8(fp)
   41110:	10800217 	ldw	r2,8(r2)
   41114:	1085883a 	add	r2,r2,r2
   41118:	1085883a 	add	r2,r2,r2
   4111c:	1885883a 	add	r2,r3,r2
   41120:	10bfff04 	addi	r2,r2,-4
   41124:	10800017 	ldw	r2,0(r2)
   41128:	e0bfff15 	stw	r2,-4(fp)
   4112c:	e0bfff17 	ldw	r2,-4(fp)
			}
   41130:	e037883a 	mov	sp,fp
   41134:	df000017 	ldw	fp,0(sp)
   41138:	dec00104 	addi	sp,sp,4
   4113c:	f800283a 	ret

00041140 <_ZN3App6Buffer6lengthEv>:

			int length() {
   41140:	defffe04 	addi	sp,sp,-8
   41144:	df000115 	stw	fp,4(sp)
   41148:	df000104 	addi	fp,sp,4
   4114c:	e13fff15 	stw	r4,-4(fp)
				return len;
   41150:	e0bfff17 	ldw	r2,-4(fp)
   41154:	10800117 	ldw	r2,4(r2)
			}
   41158:	e037883a 	mov	sp,fp
   4115c:	df000017 	ldw	fp,0(sp)
   41160:	dec00104 	addi	sp,sp,4
   41164:	f800283a 	ret

00041168 <_ZN3App6BufferC1Ev>:

private:
	int compass_vib_value;
	class Buffer {
		public:
			Buffer(){
   41168:	defffd04 	addi	sp,sp,-12
   4116c:	dfc00215 	stw	ra,8(sp)
   41170:	df000115 	stw	fp,4(sp)
   41174:	df000104 	addi	fp,sp,4
   41178:	e13fff15 	stw	r4,-4(fp)
				size = 10;
   4117c:	e0ffff17 	ldw	r3,-4(fp)
   41180:	00800284 	movi	r2,10
   41184:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
   41188:	e0bfff17 	ldw	r2,-4(fp)
   4118c:	10800017 	ldw	r2,0(r2)
   41190:	1085883a 	add	r2,r2,r2
   41194:	1085883a 	add	r2,r2,r2
   41198:	1009883a 	mov	r4,r2
   4119c:	0041d780 	call	41d78 <_Znam>
   411a0:	1007883a 	mov	r3,r2
   411a4:	e0bfff17 	ldw	r2,-4(fp)
   411a8:	10c00415 	stw	r3,16(r2)
				begin = -1;
   411ac:	e0ffff17 	ldw	r3,-4(fp)
   411b0:	00bfffc4 	movi	r2,-1
   411b4:	18800215 	stw	r2,8(r3)
				end = 0;
   411b8:	e0bfff17 	ldw	r2,-4(fp)
   411bc:	10000315 	stw	zero,12(r2)
				len = 0;
   411c0:	e0bfff17 	ldw	r2,-4(fp)
   411c4:	10000115 	stw	zero,4(r2)
			}
   411c8:	e037883a 	mov	sp,fp
   411cc:	dfc00117 	ldw	ra,4(sp)
   411d0:	df000017 	ldw	fp,0(sp)
   411d4:	dec00204 	addi	sp,sp,8
   411d8:	f800283a 	ret

000411dc <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   411dc:	defffe04 	addi	sp,sp,-8
   411e0:	df000115 	stw	fp,4(sp)
   411e4:	df000104 	addi	fp,sp,4
   411e8:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   411ec:	e0ffff17 	ldw	r3,-4(fp)
   411f0:	00a40a14 	movui	r2,36904
   411f4:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   411f8:	e0ffff17 	ldw	r3,-4(fp)
   411fc:	00a40e14 	movui	r2,36920
   41200:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   41204:	e0ffff17 	ldw	r3,-4(fp)
   41208:	00a41214 	movui	r2,36936
   4120c:	18800215 	stw	r2,8(r3)
}
   41210:	e037883a 	mov	sp,fp
   41214:	df000017 	ldw	fp,0(sp)
   41218:	dec00104 	addi	sp,sp,4
   4121c:	f800283a 	ret

00041220 <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   41220:	defffe04 	addi	sp,sp,-8
   41224:	df000115 	stw	fp,4(sp)
   41228:	df000104 	addi	fp,sp,4
   4122c:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   41230:	e0ffff17 	ldw	r3,-4(fp)
   41234:	00a40a14 	movui	r2,36904
   41238:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   4123c:	e0ffff17 	ldw	r3,-4(fp)
   41240:	00a40e14 	movui	r2,36920
   41244:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   41248:	e0ffff17 	ldw	r3,-4(fp)
   4124c:	00a41214 	movui	r2,36936
   41250:	18800215 	stw	r2,8(r3)
}
   41254:	e037883a 	mov	sp,fp
   41258:	df000017 	ldw	fp,0(sp)
   4125c:	dec00104 	addi	sp,sp,4
   41260:	f800283a 	ret

00041264 <_ZN3FFTD2Ev>:

FFT::~FFT() {
   41264:	defffe04 	addi	sp,sp,-8
   41268:	df000115 	stw	fp,4(sp)
   4126c:	df000104 	addi	fp,sp,4
   41270:	e13fff15 	stw	r4,-4(fp)
}
   41274:	e037883a 	mov	sp,fp
   41278:	df000017 	ldw	fp,0(sp)
   4127c:	dec00104 	addi	sp,sp,4
   41280:	f800283a 	ret

00041284 <_ZN3FFTD1Ev>:
	data = (volatile unsigned int*) matrixAddress;
	writeFFT =(volatile unsigned int*) fftAddress;
	readFFT = (volatile unsigned int*) fftAddress+4;
}

FFT::~FFT() {
   41284:	defffe04 	addi	sp,sp,-8
   41288:	df000115 	stw	fp,4(sp)
   4128c:	df000104 	addi	fp,sp,4
   41290:	e13fff15 	stw	r4,-4(fp)
}
   41294:	e037883a 	mov	sp,fp
   41298:	df000017 	ldw	fp,0(sp)
   4129c:	dec00104 	addi	sp,sp,4
   412a0:	f800283a 	ret

000412a4 <_ZN3FFT4readEv>:
void FFT::write(unsigned char *input) {
	writeFFT = (unsigned int*)input;
	delete input;
}

int* FFT::read() {
   412a4:	defffe04 	addi	sp,sp,-8
   412a8:	df000115 	stw	fp,4(sp)
   412ac:	df000104 	addi	fp,sp,4
   412b0:	e13fff15 	stw	r4,-4(fp)
	return (int*)readFFT;
   412b4:	e0bfff17 	ldw	r2,-4(fp)
   412b8:	10800217 	ldw	r2,8(r2)
}
   412bc:	e037883a 	mov	sp,fp
   412c0:	df000017 	ldw	fp,0(sp)
   412c4:	dec00104 	addi	sp,sp,4
   412c8:	f800283a 	ret

000412cc <_ZN3FFT5writeEPh>:
	if (fft == 0)
		fft = new FFT();
	return fft;
}

void FFT::write(unsigned char *input) {
   412cc:	defffc04 	addi	sp,sp,-16
   412d0:	dfc00315 	stw	ra,12(sp)
   412d4:	df000215 	stw	fp,8(sp)
   412d8:	df000204 	addi	fp,sp,8
   412dc:	e13ffe15 	stw	r4,-8(fp)
   412e0:	e17fff15 	stw	r5,-4(fp)
	writeFFT = (unsigned int*)input;
   412e4:	e0ffff17 	ldw	r3,-4(fp)
   412e8:	e0bffe17 	ldw	r2,-8(fp)
   412ec:	10c00115 	stw	r3,4(r2)
	delete input;
   412f0:	e13fff17 	ldw	r4,-4(fp)
   412f4:	0041e180 	call	41e18 <_ZdlPv>
}
   412f8:	e037883a 	mov	sp,fp
   412fc:	dfc00117 	ldw	ra,4(sp)
   41300:	df000017 	ldw	fp,0(sp)
   41304:	dec00204 	addi	sp,sp,8
   41308:	f800283a 	ret

0004130c <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
   4130c:	defffd04 	addi	sp,sp,-12
   41310:	dfc00215 	stw	ra,8(sp)
   41314:	df000115 	stw	fp,4(sp)
   41318:	dc000015 	stw	r16,0(sp)
   4131c:	d839883a 	mov	fp,sp
	if (fft == 0)
   41320:	d0a1ce17 	ldw	r2,-30920(gp)
   41324:	1004c03a 	cmpne	r2,r2,zero
   41328:	1000061e 	bne	r2,zero,41344 <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
   4132c:	01000304 	movi	r4,12
   41330:	0042b2c0 	call	42b2c <_Znwm>
   41334:	1021883a 	mov	r16,r2
   41338:	8009883a 	mov	r4,r16
   4133c:	00412200 	call	41220 <_ZN3FFTC1Ev>
   41340:	d421ce15 	stw	r16,-30920(gp)
	return fft;
   41344:	d0a1ce17 	ldw	r2,-30920(gp)
}
   41348:	e037883a 	mov	sp,fp
   4134c:	dfc00217 	ldw	ra,8(sp)
   41350:	df000117 	ldw	fp,4(sp)
   41354:	dc000017 	ldw	r16,0(sp)
   41358:	dec00304 	addi	sp,sp,12
   4135c:	f800283a 	ret

00041360 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41360:	defffe04 	addi	sp,sp,-8
   41364:	df000115 	stw	fp,4(sp)
   41368:	df000104 	addi	fp,sp,4
   4136c:	e13fff15 	stw	r4,-4(fp)
}
   41370:	e037883a 	mov	sp,fp
   41374:	df000017 	ldw	fp,0(sp)
   41378:	dec00104 	addi	sp,sp,4
   4137c:	f800283a 	ret

00041380 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41380:	defffe04 	addi	sp,sp,-8
   41384:	df000115 	stw	fp,4(sp)
   41388:	df000104 	addi	fp,sp,4
   4138c:	e13fff15 	stw	r4,-4(fp)
}
   41390:	e037883a 	mov	sp,fp
   41394:	df000017 	ldw	fp,0(sp)
   41398:	dec00104 	addi	sp,sp,4
   4139c:	f800283a 	ret

000413a0 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
   413a0:	defffb04 	addi	sp,sp,-20
   413a4:	df000415 	stw	fp,16(sp)
   413a8:	df000404 	addi	fp,sp,16
   413ac:	e13ffc15 	stw	r4,-16(fp)
   413b0:	e17ffd15 	stw	r5,-12(fp)
   413b4:	e1bffe15 	stw	r6,-8(fp)
   413b8:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
   413bc:	e0bffc17 	ldw	r2,-16(fp)
   413c0:	11000017 	ldw	r4,0(r2)
   413c4:	e0bffd17 	ldw	r2,-12(fp)
   413c8:	1006963a 	slli	r3,r2,24
   413cc:	e0bffe17 	ldw	r2,-8(fp)
   413d0:	1004943a 	slli	r2,r2,16
   413d4:	1887883a 	add	r3,r3,r2
   413d8:	e0bfff17 	ldw	r2,-4(fp)
   413dc:	1004923a 	slli	r2,r2,8
   413e0:	1887883a 	add	r3,r3,r2
   413e4:	e0800117 	ldw	r2,4(fp)
   413e8:	1885883a 	add	r2,r3,r2
   413ec:	20800015 	stw	r2,0(r4)
}
   413f0:	e037883a 	mov	sp,fp
   413f4:	df000017 	ldw	fp,0(sp)
   413f8:	dec00104 	addi	sp,sp,4
   413fc:	f800283a 	ret

00041400 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
   41400:	defff904 	addi	sp,sp,-28
   41404:	dfc00615 	stw	ra,24(sp)
   41408:	df000515 	stw	fp,20(sp)
   4140c:	df000504 	addi	fp,sp,20
   41410:	e13ffc15 	stw	r4,-16(fp)
   41414:	e17ffd15 	stw	r5,-12(fp)
   41418:	e1bffe15 	stw	r6,-8(fp)
   4141c:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
   41420:	e0bfff17 	ldw	r2,-4(fp)
   41424:	d8800015 	stw	r2,0(sp)
   41428:	e13ffc17 	ldw	r4,-16(fp)
   4142c:	01400084 	movi	r5,2
   41430:	e1bffd17 	ldw	r6,-12(fp)
   41434:	e1fffe17 	ldw	r7,-8(fp)
   41438:	00413a00 	call	413a0 <_ZN6Motors5writeEjjjj>
}
   4143c:	e037883a 	mov	sp,fp
   41440:	dfc00117 	ldw	ra,4(sp)
   41444:	df000017 	ldw	fp,0(sp)
   41448:	dec00204 	addi	sp,sp,8
   4144c:	f800283a 	ret

00041450 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(0, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
   41450:	defff904 	addi	sp,sp,-28
   41454:	dfc00615 	stw	ra,24(sp)
   41458:	df000515 	stw	fp,20(sp)
   4145c:	df000504 	addi	fp,sp,20
   41460:	e13ffc15 	stw	r4,-16(fp)
   41464:	e17ffd15 	stw	r5,-12(fp)
   41468:	e1bffe15 	stw	r6,-8(fp)
   4146c:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
   41470:	e0bfff17 	ldw	r2,-4(fp)
   41474:	d8800015 	stw	r2,0(sp)
   41478:	e13ffc17 	ldw	r4,-16(fp)
   4147c:	01400044 	movi	r5,1
   41480:	e1bffd17 	ldw	r6,-12(fp)
   41484:	e1fffe17 	ldw	r7,-8(fp)
   41488:	00413a00 	call	413a0 <_ZN6Motors5writeEjjjj>
}
   4148c:	e037883a 	mov	sp,fp
   41490:	dfc00117 	ldw	ra,4(sp)
   41494:	df000017 	ldw	fp,0(sp)
   41498:	dec00204 	addi	sp,sp,8
   4149c:	f800283a 	ret

000414a0 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
   414a0:	defff904 	addi	sp,sp,-28
   414a4:	dfc00615 	stw	ra,24(sp)
   414a8:	df000515 	stw	fp,20(sp)
   414ac:	df000504 	addi	fp,sp,20
   414b0:	e13ffc15 	stw	r4,-16(fp)
   414b4:	e17ffd15 	stw	r5,-12(fp)
   414b8:	e1bffe15 	stw	r6,-8(fp)
   414bc:	e1ffff15 	stw	r7,-4(fp)
	write(0, line, column, valor);
   414c0:	e0bfff17 	ldw	r2,-4(fp)
   414c4:	d8800015 	stw	r2,0(sp)
   414c8:	e13ffc17 	ldw	r4,-16(fp)
   414cc:	000b883a 	mov	r5,zero
   414d0:	e1bffd17 	ldw	r6,-12(fp)
   414d4:	e1fffe17 	ldw	r7,-8(fp)
   414d8:	00413a00 	call	413a0 <_ZN6Motors5writeEjjjj>
}
   414dc:	e037883a 	mov	sp,fp
   414e0:	dfc00117 	ldw	ra,4(sp)
   414e4:	df000017 	ldw	fp,0(sp)
   414e8:	dec00204 	addi	sp,sp,8
   414ec:	f800283a 	ret

000414f0 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
   414f0:	defffd04 	addi	sp,sp,-12
   414f4:	df000215 	stw	fp,8(sp)
   414f8:	df000204 	addi	fp,sp,8
   414fc:	e13ffe15 	stw	r4,-8(fp)
   41500:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
   41504:	e0bffe17 	ldw	r2,-8(fp)
   41508:	10c00017 	ldw	r3,0(r2)
   4150c:	e0bfff17 	ldw	r2,-4(fp)
   41510:	18800015 	stw	r2,0(r3)
}
   41514:	e037883a 	mov	sp,fp
   41518:	df000017 	ldw	fp,0(sp)
   4151c:	dec00104 	addi	sp,sp,4
   41520:	f800283a 	ret

00041524 <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
   41524:	defffc04 	addi	sp,sp,-16
   41528:	dfc00315 	stw	ra,12(sp)
   4152c:	df000215 	stw	fp,8(sp)
   41530:	df000204 	addi	fp,sp,8
   41534:	e13fff15 	stw	r4,-4(fp)
	write(3, 255, 255, 0);
   41538:	d8000015 	stw	zero,0(sp)
   4153c:	e13fff17 	ldw	r4,-4(fp)
   41540:	014000c4 	movi	r5,3
   41544:	01803fc4 	movi	r6,255
   41548:	01c03fc4 	movi	r7,255
   4154c:	00413a00 	call	413a0 <_ZN6Motors5writeEjjjj>
}
   41550:	e037883a 	mov	sp,fp
   41554:	dfc00117 	ldw	ra,4(sp)
   41558:	df000017 	ldw	fp,0(sp)
   4155c:	dec00204 	addi	sp,sp,8
   41560:	f800283a 	ret

00041564 <_ZN6Motors21write_to_next_collumnEv>:

void Motors::write_to_next_collumn() {
   41564:	defffc04 	addi	sp,sp,-16
   41568:	dfc00315 	stw	ra,12(sp)
   4156c:	df000215 	stw	fp,8(sp)
   41570:	df000204 	addi	fp,sp,8
   41574:	e13fff15 	stw	r4,-4(fp)
	write(4, 255, 255, 0);
   41578:	d8000015 	stw	zero,0(sp)
   4157c:	e13fff17 	ldw	r4,-4(fp)
   41580:	01400104 	movi	r5,4
   41584:	01803fc4 	movi	r6,255
   41588:	01c03fc4 	movi	r7,255
   4158c:	00413a00 	call	413a0 <_ZN6Motors5writeEjjjj>
}
   41590:	e037883a 	mov	sp,fp
   41594:	dfc00117 	ldw	ra,4(sp)
   41598:	df000017 	ldw	fp,0(sp)
   4159c:	dec00204 	addi	sp,sp,8
   415a0:	f800283a 	ret

000415a4 <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
   415a4:	defffe04 	addi	sp,sp,-8
   415a8:	df000115 	stw	fp,4(sp)
   415ac:	df000104 	addi	fp,sp,4
   415b0:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   415b4:	e0ffff17 	ldw	r3,-4(fp)
   415b8:	00881a04 	movi	r2,8296
   415bc:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   415c0:	e0ffff17 	ldw	r3,-4(fp)
   415c4:	00881b04 	movi	r2,8300
   415c8:	18800115 	stw	r2,4(r3)
}
   415cc:	e037883a 	mov	sp,fp
   415d0:	df000017 	ldw	fp,0(sp)
   415d4:	dec00104 	addi	sp,sp,4
   415d8:	f800283a 	ret

000415dc <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumn() {
	write(4, 255, 255, 0);
}

/* private */
Motors::Motors() {
   415dc:	defffe04 	addi	sp,sp,-8
   415e0:	df000115 	stw	fp,4(sp)
   415e4:	df000104 	addi	fp,sp,4
   415e8:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   415ec:	e0ffff17 	ldw	r3,-4(fp)
   415f0:	00881a04 	movi	r2,8296
   415f4:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   415f8:	e0ffff17 	ldw	r3,-4(fp)
   415fc:	00881b04 	movi	r2,8300
   41600:	18800115 	stw	r2,4(r3)
}
   41604:	e037883a 	mov	sp,fp
   41608:	df000017 	ldw	fp,0(sp)
   4160c:	dec00104 	addi	sp,sp,4
   41610:	f800283a 	ret

00041614 <_ZN6Motors4readEv>:

unsigned int Motors::read() {
   41614:	defffe04 	addi	sp,sp,-8
   41618:	df000115 	stw	fp,4(sp)
   4161c:	df000104 	addi	fp,sp,4
   41620:	e13fff15 	stw	r4,-4(fp)
	return *status;
   41624:	e0bfff17 	ldw	r2,-4(fp)
   41628:	10800117 	ldw	r2,4(r2)
   4162c:	10800017 	ldw	r2,0(r2)
}
   41630:	e037883a 	mov	sp,fp
   41634:	df000017 	ldw	fp,0(sp)
   41638:	dec00104 	addi	sp,sp,4
   4163c:	f800283a 	ret

00041640 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
   41640:	defffd04 	addi	sp,sp,-12
   41644:	dfc00215 	stw	ra,8(sp)
   41648:	df000115 	stw	fp,4(sp)
   4164c:	dc000015 	stw	r16,0(sp)
   41650:	d839883a 	mov	fp,sp
	if (motors == 0)
   41654:	d0a1cf17 	ldw	r2,-30916(gp)
   41658:	1004c03a 	cmpne	r2,r2,zero
   4165c:	1000061e 	bne	r2,zero,41678 <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
   41660:	01000204 	movi	r4,8
   41664:	0042b2c0 	call	42b2c <_Znwm>
   41668:	1021883a 	mov	r16,r2
   4166c:	8009883a 	mov	r4,r16
   41670:	00415dc0 	call	415dc <_ZN6MotorsC1Ev>
   41674:	d421cf15 	stw	r16,-30916(gp)
	return motors;
   41678:	d0a1cf17 	ldw	r2,-30916(gp)
}
   4167c:	e037883a 	mov	sp,fp
   41680:	dfc00217 	ldw	ra,8(sp)
   41684:	df000117 	ldw	fp,4(sp)
   41688:	dc000017 	ldw	r16,0(sp)
   4168c:	dec00304 	addi	sp,sp,12
   41690:	f800283a 	ret

00041694 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41694:	defffe04 	addi	sp,sp,-8
   41698:	df000115 	stw	fp,4(sp)
   4169c:	df000104 	addi	fp,sp,4
   416a0:	e13fff15 	stw	r4,-4(fp)
}
   416a4:	e037883a 	mov	sp,fp
   416a8:	df000017 	ldw	fp,0(sp)
   416ac:	dec00104 	addi	sp,sp,4
   416b0:	f800283a 	ret

000416b4 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   416b4:	defffe04 	addi	sp,sp,-8
   416b8:	df000115 	stw	fp,4(sp)
   416bc:	df000104 	addi	fp,sp,4
   416c0:	e13fff15 	stw	r4,-4(fp)
}
   416c4:	e037883a 	mov	sp,fp
   416c8:	df000017 	ldw	fp,0(sp)
   416cc:	dec00104 	addi	sp,sp,4
   416d0:	f800283a 	ret

000416d4 <_ZN4WiFiC2Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
   416d4:	defffe04 	addi	sp,sp,-8
   416d8:	df000115 	stw	fp,4(sp)
   416dc:	df000104 	addi	fp,sp,4
   416e0:	e13fff15 	stw	r4,-4(fp)
}
   416e4:	e037883a 	mov	sp,fp
   416e8:	df000017 	ldw	fp,0(sp)
   416ec:	dec00104 	addi	sp,sp,4
   416f0:	f800283a 	ret

000416f4 <_ZN4WiFiC1Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
   416f4:	defffe04 	addi	sp,sp,-8
   416f8:	df000115 	stw	fp,4(sp)
   416fc:	df000104 	addi	fp,sp,4
   41700:	e13fff15 	stw	r4,-4(fp)
}
   41704:	e037883a 	mov	sp,fp
   41708:	df000017 	ldw	fp,0(sp)
   4170c:	dec00104 	addi	sp,sp,4
   41710:	f800283a 	ret

00041714 <_ZN4WiFi5writeEPci>:
		k = alt_getchar();
		alt_printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
   41714:	defffa04 	addi	sp,sp,-24
   41718:	dfc00515 	stw	ra,20(sp)
   4171c:	df000415 	stw	fp,16(sp)
   41720:	df000404 	addi	fp,sp,16
   41724:	e13ffd15 	stw	r4,-12(fp)
   41728:	e17ffe15 	stw	r5,-8(fp)
   4172c:	e1bfff15 	stw	r6,-4(fp)
	for (int i = 0; i < size; i++) {
   41730:	e03ffc15 	stw	zero,-16(fp)
   41734:	00000c06 	br	41768 <_ZN4WiFi5writeEPci+0x54>
		alt_putchar(msg[i]);
   41738:	e0bffc17 	ldw	r2,-16(fp)
   4173c:	1007883a 	mov	r3,r2
   41740:	e0bffe17 	ldw	r2,-8(fp)
   41744:	1885883a 	add	r2,r3,r2
   41748:	10800003 	ldbu	r2,0(r2)
   4174c:	11003fcc 	andi	r4,r2,255
   41750:	2100201c 	xori	r4,r4,128
   41754:	213fe004 	addi	r4,r4,-128
   41758:	00468540 	call	46854 <alt_putchar>
		alt_printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
	for (int i = 0; i < size; i++) {
   4175c:	e0bffc17 	ldw	r2,-16(fp)
   41760:	10800044 	addi	r2,r2,1
   41764:	e0bffc15 	stw	r2,-16(fp)
   41768:	e0fffc17 	ldw	r3,-16(fp)
   4176c:	e0bfff17 	ldw	r2,-4(fp)
   41770:	18bff116 	blt	r3,r2,41738 <_ZN4WiFi5writeEPci+0x24>
		alt_putchar(msg[i]);
	}
}
   41774:	e037883a 	mov	sp,fp
   41778:	dfc00117 	ldw	ra,4(sp)
   4177c:	df000017 	ldw	fp,0(sp)
   41780:	dec00204 	addi	sp,sp,8
   41784:	f800283a 	ret

00041788 <_ZN4WiFi7receiveEPhPj>:
	char rst[] = "AT+RST";
	sendInstruction(stop);
	sendInstruction(rst);
}

void WiFi::receive(unsigned char* data, unsigned int *size) {
   41788:	defff604 	addi	sp,sp,-40
   4178c:	dfc00915 	stw	ra,36(sp)
   41790:	df000815 	stw	fp,32(sp)
   41794:	dc000715 	stw	r16,28(sp)
   41798:	df000704 	addi	fp,sp,28
   4179c:	e13ffd15 	stw	r4,-12(fp)
   417a0:	e17ffe15 	stw	r5,-8(fp)
   417a4:	e1bfff15 	stw	r6,-4(fp)
	char c;
	unsigned int i;
	i=0;
   417a8:	e03ffb15 	stw	zero,-20(fp)

	do {
		c = alt_getchar();
   417ac:	00462500 	call	46250 <alt_getchar>
   417b0:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   417b4:	e0bffb17 	ldw	r2,-20(fp)
   417b8:	10800044 	addi	r2,r2,1
   417bc:	e0bffb15 	stw	r2,-20(fp)
void WiFi::receive(unsigned char* data, unsigned int *size) {
	char c;
	unsigned int i;
	i=0;

	do {
   417c0:	e0bffc07 	ldb	r2,-16(fp)
   417c4:	10800ae0 	cmpeqi	r2,r2,43
   417c8:	1000031e 	bne	r2,zero,417d8 <_ZN4WiFi7receiveEPhPj+0x50>
   417cc:	e0bffb17 	ldw	r2,-20(fp)
   417d0:	10810030 	cmpltui	r2,r2,1024
   417d4:	103ff51e 	bne	r2,zero,417ac <_ZN4WiFi7receiveEPhPj+0x24>
		c = alt_getchar();
		i=i+1;
	} while (c != '+' and i<1024);
	do {
		c = alt_getchar();
   417d8:	00462500 	call	46250 <alt_getchar>
   417dc:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   417e0:	e0bffb17 	ldw	r2,-20(fp)
   417e4:	10800044 	addi	r2,r2,1
   417e8:	e0bffb15 	stw	r2,-20(fp)

	do {
		c = alt_getchar();
		i=i+1;
	} while (c != '+' and i<1024);
	do {
   417ec:	e0bffc07 	ldb	r2,-16(fp)
   417f0:	10800b20 	cmpeqi	r2,r2,44
   417f4:	1000031e 	bne	r2,zero,41804 <_ZN4WiFi7receiveEPhPj+0x7c>
   417f8:	e0bffb17 	ldw	r2,-20(fp)
   417fc:	10810030 	cmpltui	r2,r2,1024
   41800:	103ff51e 	bne	r2,zero,417d8 <_ZN4WiFi7receiveEPhPj+0x50>
		c = alt_getchar();
		i=i+1;
	} while (c != ',' and i<1024);

	do {
		c = alt_getchar();
   41804:	00462500 	call	46250 <alt_getchar>
   41808:	e0bffc05 	stb	r2,-16(fp)
		i=1+i;
   4180c:	e0bffb17 	ldw	r2,-20(fp)
   41810:	10800044 	addi	r2,r2,1
   41814:	e0bffb15 	stw	r2,-20(fp)
	do {
		c = alt_getchar();
		i=i+1;
	} while (c != ',' and i<1024);

	do {
   41818:	e0bffc07 	ldb	r2,-16(fp)
   4181c:	10800b20 	cmpeqi	r2,r2,44
   41820:	1000031e 	bne	r2,zero,41830 <_ZN4WiFi7receiveEPhPj+0xa8>
   41824:	e0bffb17 	ldw	r2,-20(fp)
   41828:	10810030 	cmpltui	r2,r2,1024
   4182c:	103ff51e 	bne	r2,zero,41804 <_ZN4WiFi7receiveEPhPj+0x7c>
		c = alt_getchar();
		i=1+i;
	} while (c != ',' and i<1024);

	*size = 0;
   41830:	e0bfff17 	ldw	r2,-4(fp)
   41834:	10000015 	stw	zero,0(r2)

	c = alt_getchar();
   41838:	00462500 	call	46250 <alt_getchar>
   4183c:	e0bffc05 	stb	r2,-16(fp)

	while (c != ':' and i<1024) {
   41840:	00000f06 	br	41880 <_ZN4WiFi7receiveEPhPj+0xf8>
		*size = *size * 10 + c - '0';
   41844:	e0bfff17 	ldw	r2,-4(fp)
   41848:	11000017 	ldw	r4,0(r2)
   4184c:	01400284 	movi	r5,10
   41850:	00443740 	call	44374 <__mulsi3>
   41854:	1007883a 	mov	r3,r2
   41858:	e0bffc07 	ldb	r2,-16(fp)
   4185c:	1885883a 	add	r2,r3,r2
   41860:	10fff404 	addi	r3,r2,-48
   41864:	e0bfff17 	ldw	r2,-4(fp)
   41868:	10c00015 	stw	r3,0(r2)
		c = alt_getchar();
   4186c:	00462500 	call	46250 <alt_getchar>
   41870:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   41874:	e0bffb17 	ldw	r2,-20(fp)
   41878:	10800044 	addi	r2,r2,1
   4187c:	e0bffb15 	stw	r2,-20(fp)

	*size = 0;

	c = alt_getchar();

	while (c != ':' and i<1024) {
   41880:	e0bffc07 	ldb	r2,-16(fp)
   41884:	10800ea0 	cmpeqi	r2,r2,58
   41888:	1000031e 	bne	r2,zero,41898 <_ZN4WiFi7receiveEPhPj+0x110>
   4188c:	e0bffb17 	ldw	r2,-20(fp)
   41890:	10810030 	cmpltui	r2,r2,1024
   41894:	103feb1e 	bne	r2,zero,41844 <_ZN4WiFi7receiveEPhPj+0xbc>
		c = alt_getchar();
		i=i+1;
	}

	unsigned int j,max;
	j = 0;
   41898:	e03ffa15 	stw	zero,-24(fp)
	max= *size;
   4189c:	e0bfff17 	ldw	r2,-4(fp)
   418a0:	10800017 	ldw	r2,0(r2)
   418a4:	e0bff915 	stw	r2,-28(fp)
	if(max>2048){
   418a8:	e0bff917 	ldw	r2,-28(fp)
   418ac:	10820070 	cmpltui	r2,r2,2049
   418b0:	1000021e 	bne	r2,zero,418bc <_ZN4WiFi7receiveEPhPj+0x134>
		max = 2048;
   418b4:	00820004 	movi	r2,2048
   418b8:	e0bff915 	stw	r2,-28(fp)
	}

	for(j=0;j < max;j+=1){
   418bc:	e03ffa15 	stw	zero,-24(fp)
   418c0:	00000806 	br	418e4 <_ZN4WiFi7receiveEPhPj+0x15c>
		data[j] = alt_getchar();
   418c4:	e0fffa17 	ldw	r3,-24(fp)
   418c8:	e0bffe17 	ldw	r2,-8(fp)
   418cc:	18a1883a 	add	r16,r3,r2
   418d0:	00462500 	call	46250 <alt_getchar>
   418d4:	80800005 	stb	r2,0(r16)
	max= *size;
	if(max>2048){
		max = 2048;
	}

	for(j=0;j < max;j+=1){
   418d8:	e0bffa17 	ldw	r2,-24(fp)
   418dc:	10800044 	addi	r2,r2,1
   418e0:	e0bffa15 	stw	r2,-24(fp)
   418e4:	e0fffa17 	ldw	r3,-24(fp)
   418e8:	e0bff917 	ldw	r2,-28(fp)
   418ec:	18bff536 	bltu	r3,r2,418c4 <_ZN4WiFi7receiveEPhPj+0x13c>
	//Finalmente. Função getc(file) estava mudando o valor de *size durante o loop
	//Alocar as condições de laço para j,max antes de iniciar resolveu

	//Outro problema: transmissão do audio / imagem: As vezes o size explode por algum motivo
	//Então coloquei um valor máximo para max (2048 ok? )
	data[j] = '\0';
   418f0:	e0bffa17 	ldw	r2,-24(fp)
   418f4:	e0fffe17 	ldw	r3,-8(fp)
   418f8:	10c5883a 	add	r2,r2,r3
   418fc:	10000005 	stb	zero,0(r2)
}
   41900:	e037883a 	mov	sp,fp
   41904:	dfc00217 	ldw	ra,8(sp)
   41908:	df000117 	ldw	fp,4(sp)
   4190c:	dc000017 	ldw	r16,0(sp)
   41910:	dec00304 	addi	sp,sp,12
   41914:	f800283a 	ret

00041918 <_ZN4WiFi15sendInstructionEPc>:

/* private */
WiFi::WiFi() {
}

void WiFi::sendInstruction(char * instruction) {
   41918:	defffb04 	addi	sp,sp,-20
   4191c:	dfc00415 	stw	ra,16(sp)
   41920:	df000315 	stw	fp,12(sp)
   41924:	df000304 	addi	fp,sp,12
   41928:	e13ffe15 	stw	r4,-8(fp)
   4192c:	e17fff15 	stw	r5,-4(fp)
	write(instruction, strlen(instruction));
   41930:	e13fff17 	ldw	r4,-4(fp)
   41934:	0045d900 	call	45d90 <strlen>
   41938:	100d883a 	mov	r6,r2
   4193c:	e13ffe17 	ldw	r4,-8(fp)
   41940:	e17fff17 	ldw	r5,-4(fp)
   41944:	00417140 	call	41714 <_ZN4WiFi5writeEPci>
	write("\r\n", 2);
   41948:	e13ffe17 	ldw	r4,-8(fp)
   4194c:	01400134 	movhi	r5,4
   41950:	295cbe04 	addi	r5,r5,29432
   41954:	01800084 	movi	r6,2
   41958:	00417140 	call	41714 <_ZN4WiFi5writeEPci>

	char k;
	do {
		k = alt_getchar();
   4195c:	00462500 	call	46250 <alt_getchar>
   41960:	e0bffd05 	stb	r2,-12(fp)
		alt_printf("%c",k);
   41964:	e17ffd07 	ldb	r5,-12(fp)
   41968:	01000134 	movhi	r4,4
   4196c:	211cbf04 	addi	r4,r4,29436
   41970:	00465fc0 	call	465fc <alt_printf>
void WiFi::sendInstruction(char * instruction) {
	write(instruction, strlen(instruction));
	write("\r\n", 2);

	char k;
	do {
   41974:	e0bffd07 	ldb	r2,-12(fp)
   41978:	108012d8 	cmpnei	r2,r2,75
   4197c:	103ff71e 	bne	r2,zero,4195c <_ZN4WiFi15sendInstructionEPc+0x44>
		k = alt_getchar();
		alt_printf("%c",k);
	} while (k != 'K');
}
   41980:	e037883a 	mov	sp,fp
   41984:	dfc00117 	ldw	ra,4(sp)
   41988:	df000017 	ldw	fp,0(sp)
   4198c:	dec00204 	addi	sp,sp,8
   41990:	f800283a 	ret

00041994 <_ZN4WiFi10stopServerEv>:
void WiFi::startServer() {
	char server[] = "AT+CIPSERVER=1,80";
	sendInstruction(server);
}

void WiFi::stopServer() {
   41994:	defff704 	addi	sp,sp,-36
   41998:	dfc00815 	stw	ra,32(sp)
   4199c:	df000715 	stw	fp,28(sp)
   419a0:	df000704 	addi	fp,sp,28
   419a4:	e13fff15 	stw	r4,-4(fp)
	char stop[] = "AT+CIPSERVER=0";
   419a8:	00c00134 	movhi	r3,4
   419ac:	18dcc004 	addi	r3,r3,29440
   419b0:	18800017 	ldw	r2,0(r3)
   419b4:	e0bff915 	stw	r2,-28(fp)
   419b8:	18800117 	ldw	r2,4(r3)
   419bc:	e0bffa15 	stw	r2,-24(fp)
   419c0:	18800217 	ldw	r2,8(r3)
   419c4:	e0bffb15 	stw	r2,-20(fp)
   419c8:	1880030b 	ldhu	r2,12(r3)
   419cc:	e0bffc0d 	sth	r2,-16(fp)
   419d0:	18800383 	ldbu	r2,14(r3)
   419d4:	e0bffc85 	stb	r2,-14(fp)
	char rst[] = "AT+RST";
   419d8:	00c00134 	movhi	r3,4
   419dc:	18dcc404 	addi	r3,r3,29456
   419e0:	18800003 	ldbu	r2,0(r3)
   419e4:	e0bffcc5 	stb	r2,-13(fp)
   419e8:	18800043 	ldbu	r2,1(r3)
   419ec:	e0bffd05 	stb	r2,-12(fp)
   419f0:	18800083 	ldbu	r2,2(r3)
   419f4:	e0bffd45 	stb	r2,-11(fp)
   419f8:	188000c3 	ldbu	r2,3(r3)
   419fc:	e0bffd85 	stb	r2,-10(fp)
   41a00:	18800103 	ldbu	r2,4(r3)
   41a04:	e0bffdc5 	stb	r2,-9(fp)
   41a08:	18800143 	ldbu	r2,5(r3)
   41a0c:	e0bffe05 	stb	r2,-8(fp)
   41a10:	18800183 	ldbu	r2,6(r3)
   41a14:	e0bffe45 	stb	r2,-7(fp)
	sendInstruction(stop);
   41a18:	e13fff17 	ldw	r4,-4(fp)
   41a1c:	e17ff904 	addi	r5,fp,-28
   41a20:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>
	sendInstruction(rst);
   41a24:	e17ffcc4 	addi	r5,fp,-13
   41a28:	e13fff17 	ldw	r4,-4(fp)
   41a2c:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>
}
   41a30:	e037883a 	mov	sp,fp
   41a34:	dfc00117 	ldw	ra,4(sp)
   41a38:	df000017 	ldw	fp,0(sp)
   41a3c:	dec00204 	addi	sp,sp,8
   41a40:	f800283a 	ret

00041a44 <_ZN4WiFi11startServerEv>:

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
	sendInstruction(ip);
}

void WiFi::startServer() {
   41a44:	defff804 	addi	sp,sp,-32
   41a48:	dfc00715 	stw	ra,28(sp)
   41a4c:	df000615 	stw	fp,24(sp)
   41a50:	df000604 	addi	fp,sp,24
   41a54:	e13fff15 	stw	r4,-4(fp)
	char server[] = "AT+CIPSERVER=1,80";
   41a58:	00c00134 	movhi	r3,4
   41a5c:	18dcc604 	addi	r3,r3,29464
   41a60:	18800017 	ldw	r2,0(r3)
   41a64:	e0bffa15 	stw	r2,-24(fp)
   41a68:	18800117 	ldw	r2,4(r3)
   41a6c:	e0bffb15 	stw	r2,-20(fp)
   41a70:	18800217 	ldw	r2,8(r3)
   41a74:	e0bffc15 	stw	r2,-16(fp)
   41a78:	18800317 	ldw	r2,12(r3)
   41a7c:	e0bffd15 	stw	r2,-12(fp)
   41a80:	1880040b 	ldhu	r2,16(r3)
   41a84:	e0bffe0d 	sth	r2,-8(fp)
	sendInstruction(server);
   41a88:	e13fff17 	ldw	r4,-4(fp)
   41a8c:	e17ffa04 	addi	r5,fp,-24
   41a90:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>
}
   41a94:	e037883a 	mov	sp,fp
   41a98:	dfc00117 	ldw	ra,4(sp)
   41a9c:	df000017 	ldw	fp,0(sp)
   41aa0:	dec00204 	addi	sp,sp,8
   41aa4:	f800283a 	ret

00041aa8 <_ZN4WiFi6configEPcS0_>:
	if (wifi == 0)
		wifi = new WiFi();
	return wifi;
}

void WiFi::config(char* name, char* password) {
   41aa8:	deffec04 	addi	sp,sp,-80
   41aac:	dfc01315 	stw	ra,76(sp)
   41ab0:	df001215 	stw	fp,72(sp)
   41ab4:	dc001115 	stw	r16,68(sp)
   41ab8:	df001104 	addi	fp,sp,68
   41abc:	e13ffd15 	stw	r4,-12(fp)
   41ac0:	e17ffe15 	stw	r5,-8(fp)
   41ac4:	e1bfff15 	stw	r6,-4(fp)
	char modeConfig[] = "AT+CWMODE=2";
   41ac8:	00c00134 	movhi	r3,4
   41acc:	18dcce04 	addi	r3,r3,29496
   41ad0:	18800017 	ldw	r2,0(r3)
   41ad4:	e0bff115 	stw	r2,-60(fp)
   41ad8:	18800117 	ldw	r2,4(r3)
   41adc:	e0bff215 	stw	r2,-56(fp)
   41ae0:	18800217 	ldw	r2,8(r3)
   41ae4:	e0bff315 	stw	r2,-52(fp)
	sendInstruction(modeConfig);
   41ae8:	e17ff104 	addi	r5,fp,-60
   41aec:	e13ffd17 	ldw	r4,-12(fp)
   41af0:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>

	char *apConfig;
	int apSize = 18 + strlen(name) + strlen(password);
   41af4:	e13ffe17 	ldw	r4,-8(fp)
   41af8:	0045d900 	call	45d90 <strlen>
   41afc:	1021883a 	mov	r16,r2
   41b00:	e13fff17 	ldw	r4,-4(fp)
   41b04:	0045d900 	call	45d90 <strlen>
   41b08:	8085883a 	add	r2,r16,r2
   41b0c:	10800484 	addi	r2,r2,18
   41b10:	e0bfef15 	stw	r2,-68(fp)
	apConfig = new char[apSize];
   41b14:	e13fef17 	ldw	r4,-68(fp)
   41b18:	0041d780 	call	41d78 <_Znam>
   41b1c:	e0bff015 	stw	r2,-64(fp)
	strcpy(apConfig, "AT+CWSAP=\"");
   41b20:	e0fff017 	ldw	r3,-64(fp)
   41b24:	00801044 	movi	r2,65
   41b28:	18800005 	stb	r2,0(r3)
   41b2c:	00801504 	movi	r2,84
   41b30:	18800045 	stb	r2,1(r3)
   41b34:	00800ac4 	movi	r2,43
   41b38:	18800085 	stb	r2,2(r3)
   41b3c:	008010c4 	movi	r2,67
   41b40:	188000c5 	stb	r2,3(r3)
   41b44:	008015c4 	movi	r2,87
   41b48:	18800105 	stb	r2,4(r3)
   41b4c:	008014c4 	movi	r2,83
   41b50:	18800145 	stb	r2,5(r3)
   41b54:	00801044 	movi	r2,65
   41b58:	18800185 	stb	r2,6(r3)
   41b5c:	00801404 	movi	r2,80
   41b60:	188001c5 	stb	r2,7(r3)
   41b64:	00800f44 	movi	r2,61
   41b68:	18800205 	stb	r2,8(r3)
   41b6c:	00800884 	movi	r2,34
   41b70:	18800245 	stb	r2,9(r3)
   41b74:	18000285 	stb	zero,10(r3)
	strcat(apConfig, name);
   41b78:	e13ff017 	ldw	r4,-64(fp)
   41b7c:	e17ffe17 	ldw	r5,-8(fp)
   41b80:	0045d400 	call	45d40 <strcat>
	strcat(apConfig, "\",\"");
   41b84:	e13ff017 	ldw	r4,-64(fp)
   41b88:	01400134 	movhi	r5,4
   41b8c:	295ccb04 	addi	r5,r5,29484
   41b90:	0045d400 	call	45d40 <strcat>
	strcat(apConfig, password);
   41b94:	e13ff017 	ldw	r4,-64(fp)
   41b98:	e17fff17 	ldw	r5,-4(fp)
   41b9c:	0045d400 	call	45d40 <strcat>
	strcat(apConfig, "\",5,3");
   41ba0:	e13ff017 	ldw	r4,-64(fp)
   41ba4:	01400134 	movhi	r5,4
   41ba8:	295ccc04 	addi	r5,r5,29488
   41bac:	0045d400 	call	45d40 <strcat>
	sendInstruction(apConfig);
   41bb0:	e13ffd17 	ldw	r4,-12(fp)
   41bb4:	e17ff017 	ldw	r5,-64(fp)
   41bb8:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>

	char mux[] = "AT+CIPMUX=1";
   41bbc:	00c00134 	movhi	r3,4
   41bc0:	18dcd104 	addi	r3,r3,29508
   41bc4:	18800017 	ldw	r2,0(r3)
   41bc8:	e0bff415 	stw	r2,-48(fp)
   41bcc:	18800117 	ldw	r2,4(r3)
   41bd0:	e0bff515 	stw	r2,-44(fp)
   41bd4:	18800217 	ldw	r2,8(r3)
   41bd8:	e0bff615 	stw	r2,-40(fp)
	sendInstruction(mux);
   41bdc:	e17ff404 	addi	r5,fp,-48
   41be0:	e13ffd17 	ldw	r4,-12(fp)
   41be4:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
   41be8:	00c00134 	movhi	r3,4
   41bec:	18dcd404 	addi	r3,r3,29520
   41bf0:	18800017 	ldw	r2,0(r3)
   41bf4:	e0bff715 	stw	r2,-36(fp)
   41bf8:	18800117 	ldw	r2,4(r3)
   41bfc:	e0bff815 	stw	r2,-32(fp)
   41c00:	18800217 	ldw	r2,8(r3)
   41c04:	e0bff915 	stw	r2,-28(fp)
   41c08:	18800317 	ldw	r2,12(r3)
   41c0c:	e0bffa15 	stw	r2,-24(fp)
   41c10:	18800417 	ldw	r2,16(r3)
   41c14:	e0bffb15 	stw	r2,-20(fp)
   41c18:	1880050b 	ldhu	r2,20(r3)
   41c1c:	e0bffc0d 	sth	r2,-16(fp)
   41c20:	18800583 	ldbu	r2,22(r3)
   41c24:	e0bffc85 	stb	r2,-14(fp)
	sendInstruction(ip);
   41c28:	e17ff704 	addi	r5,fp,-36
   41c2c:	e13ffd17 	ldw	r4,-12(fp)
   41c30:	00419180 	call	41918 <_ZN4WiFi15sendInstructionEPc>
}
   41c34:	e037883a 	mov	sp,fp
   41c38:	dfc00217 	ldw	ra,8(sp)
   41c3c:	df000117 	ldw	fp,4(sp)
   41c40:	dc000017 	ldw	r16,0(sp)
   41c44:	dec00304 	addi	sp,sp,12
   41c48:	f800283a 	ret

00041c4c <_ZN4WiFi12getSingletonEv>:

/* public */
WiFi::~WiFi() {
}

WiFi *WiFi::getSingleton() {
   41c4c:	defffd04 	addi	sp,sp,-12
   41c50:	dfc00215 	stw	ra,8(sp)
   41c54:	df000115 	stw	fp,4(sp)
   41c58:	dc000015 	stw	r16,0(sp)
   41c5c:	d839883a 	mov	fp,sp
	if (wifi == 0)
   41c60:	d0a1d017 	ldw	r2,-30912(gp)
   41c64:	1004c03a 	cmpne	r2,r2,zero
   41c68:	1000061e 	bne	r2,zero,41c84 <_ZN4WiFi12getSingletonEv+0x38>
		wifi = new WiFi();
   41c6c:	01000044 	movi	r4,1
   41c70:	0042b2c0 	call	42b2c <_Znwm>
   41c74:	1021883a 	mov	r16,r2
   41c78:	8009883a 	mov	r4,r16
   41c7c:	00416f40 	call	416f4 <_ZN4WiFiC1Ev>
   41c80:	d421d015 	stw	r16,-30912(gp)
	return wifi;
   41c84:	d0a1d017 	ldw	r2,-30912(gp)
}
   41c88:	e037883a 	mov	sp,fp
   41c8c:	dfc00217 	ldw	ra,8(sp)
   41c90:	df000117 	ldw	fp,4(sp)
   41c94:	dc000017 	ldw	r16,0(sp)
   41c98:	dec00304 	addi	sp,sp,12
   41c9c:	f800283a 	ret

00041ca0 <main>:
#include "system.h"
#include "app.h"

int main()
   41ca0:	deffe204 	addi	sp,sp,-120
   41ca4:	dfc01d15 	stw	ra,116(sp)
   41ca8:	df001c15 	stw	fp,112(sp)
   41cac:	ddc01b15 	stw	r23,108(sp)
   41cb0:	dd801a15 	stw	r22,104(sp)
   41cb4:	dd401915 	stw	r21,100(sp)
   41cb8:	dd001815 	stw	r20,96(sp)
   41cbc:	dcc01715 	stw	r19,92(sp)
   41cc0:	dc801615 	stw	r18,88(sp)
   41cc4:	dc401515 	stw	r17,84(sp)
   41cc8:	dc001415 	stw	r16,80(sp)
   41ccc:	df001404 	addi	fp,sp,80
   41cd0:	00800134 	movhi	r2,4
   41cd4:	10894c04 	addi	r2,r2,9520
   41cd8:	e0bff715 	stw	r2,-36(fp)
   41cdc:	00800134 	movhi	r2,4
   41ce0:	109c9404 	addi	r2,r2,29264
   41ce4:	e0bff815 	stw	r2,-32(fp)
   41ce8:	e0bff904 	addi	r2,fp,-28
   41cec:	e0ffec04 	addi	r3,fp,-80
   41cf0:	10c00015 	stw	r3,0(r2)
   41cf4:	00c00134 	movhi	r3,4
   41cf8:	18c75004 	addi	r3,r3,7488
   41cfc:	10c00115 	stw	r3,4(r2)
   41d00:	16c00215 	stw	sp,8(r2)
   41d04:	e13ff104 	addi	r4,fp,-60
   41d08:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
{
	App app;
   41d0c:	00bfffc4 	movi	r2,-1
   41d10:	e0bff215 	stw	r2,-56(fp)
   41d14:	e13fec04 	addi	r4,fp,-80
   41d18:	0040f1c0 	call	40f1c <_ZN3AppC1Ev>

	app.setup();
   41d1c:	00800044 	movi	r2,1
   41d20:	e0bff215 	stw	r2,-56(fp)
   41d24:	e13fec04 	addi	r4,fp,-80
   41d28:	0040e640 	call	40e64 <_ZN3App5setupEv>
	while(1){

		app.run();
   41d2c:	00800044 	movi	r2,1
   41d30:	e0bff215 	stw	r2,-56(fp)
   41d34:	e13fec04 	addi	r4,fp,-80
   41d38:	0040bc40 	call	40bc4 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
   41d3c:	003ffb06 	br	41d2c <main+0x8c>
   41d40:	e7001404 	addi	fp,fp,80
   41d44:	e0bff317 	ldw	r2,-52(fp)
   41d48:	e0bfff15 	stw	r2,-4(fp)
   41d4c:	e0ffff17 	ldw	r3,-4(fp)
   41d50:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
   41d54:	e03ff215 	stw	zero,-56(fp)
   41d58:	e13fec04 	addi	r4,fp,-80
   41d5c:	0040eb40 	call	40eb4 <_ZN3AppD1Ev>
   41d60:	e0bffe17 	ldw	r2,-8(fp)
   41d64:	e0bfff15 	stw	r2,-4(fp)
   41d68:	00bfffc4 	movi	r2,-1
   41d6c:	e0bff215 	stw	r2,-56(fp)
   41d70:	e13fff17 	ldw	r4,-4(fp)
   41d74:	00446780 	call	44678 <_Unwind_SjLj_Resume>

00041d78 <_Znam>:
   41d78:	deffee04 	addi	sp,sp,-72
   41d7c:	00800134 	movhi	r2,4
   41d80:	10894c04 	addi	r2,r2,9520
   41d84:	d8800615 	stw	r2,24(sp)
   41d88:	00c00134 	movhi	r3,4
   41d8c:	18dc9604 	addi	r3,r3,29272
   41d90:	00800134 	movhi	r2,4
   41d94:	10877d04 	addi	r2,r2,7668
   41d98:	d9000e15 	stw	r4,56(sp)
   41d9c:	d809883a 	mov	r4,sp
   41da0:	d8800915 	stw	r2,36(sp)
   41da4:	dfc01115 	stw	ra,68(sp)
   41da8:	df001015 	stw	fp,64(sp)
   41dac:	ddc00f15 	stw	r23,60(sp)
   41db0:	d8c00715 	stw	r3,28(sp)
   41db4:	dec00815 	stw	sp,32(sp)
   41db8:	dec00a15 	stw	sp,40(sp)
   41dbc:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   41dc0:	00800044 	movi	r2,1
   41dc4:	d8800115 	stw	r2,4(sp)
   41dc8:	d9000e17 	ldw	r4,56(sp)
   41dcc:	0042b2c0 	call	42b2c <_Znwm>
   41dd0:	d809883a 	mov	r4,sp
   41dd4:	d8800d15 	stw	r2,52(sp)
   41dd8:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   41ddc:	d8800d17 	ldw	r2,52(sp)
   41de0:	dfc01117 	ldw	ra,68(sp)
   41de4:	df001017 	ldw	fp,64(sp)
   41de8:	ddc00f17 	ldw	r23,60(sp)
   41dec:	dec01204 	addi	sp,sp,72
   41df0:	f800283a 	ret
   41df4:	d8800317 	ldw	r2,12(sp)
   41df8:	00ffffc4 	movi	r3,-1
   41dfc:	d9000217 	ldw	r4,8(sp)
   41e00:	10c00226 	beq	r2,r3,41e0c <_Znam+0x94>
   41e04:	d8c00115 	stw	r3,4(sp)
   41e08:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   41e0c:	00bfffc4 	movi	r2,-1
   41e10:	d8800115 	stw	r2,4(sp)
   41e14:	00423b00 	call	423b0 <__cxa_call_unexpected>

00041e18 <_ZdlPv>:
   41e18:	20000126 	beq	r4,zero,41e20 <_ZdlPv+0x8>
   41e1c:	00451f81 	jmpi	451f8 <free>
   41e20:	f800283a 	ret

00041e24 <_Z12read_uleb128PKhPj>:
   41e24:	000d883a 	mov	r6,zero
   41e28:	000f883a 	mov	r7,zero
   41e2c:	20c00007 	ldb	r3,0(r4)
   41e30:	21000044 	addi	r4,r4,1
   41e34:	18801fcc 	andi	r2,r3,127
   41e38:	1184983a 	sll	r2,r2,r6
   41e3c:	318001c4 	addi	r6,r6,7
   41e40:	388eb03a 	or	r7,r7,r2
   41e44:	183ff916 	blt	r3,zero,41e2c <_Z12read_uleb128PKhPj+0x8>
   41e48:	2005883a 	mov	r2,r4
   41e4c:	29c00015 	stw	r7,0(r5)
   41e50:	f800283a 	ret

00041e54 <_Z12read_sleb128PKhPi>:
   41e54:	000f883a 	mov	r7,zero
   41e58:	0011883a 	mov	r8,zero
   41e5c:	20c00007 	ldb	r3,0(r4)
   41e60:	21000044 	addi	r4,r4,1
   41e64:	19803fcc 	andi	r6,r3,255
   41e68:	30801fcc 	andi	r2,r6,127
   41e6c:	11c4983a 	sll	r2,r2,r7
   41e70:	39c001c4 	addi	r7,r7,7
   41e74:	4090b03a 	or	r8,r8,r2
   41e78:	183ff816 	blt	r3,zero,41e5c <_Z12read_sleb128PKhPi+0x8>
   41e7c:	008007c4 	movi	r2,31
   41e80:	11c00636 	bltu	r2,r7,41e9c <_Z12read_sleb128PKhPi+0x48>
   41e84:	3080100c 	andi	r2,r6,64
   41e88:	10000426 	beq	r2,zero,41e9c <_Z12read_sleb128PKhPi+0x48>
   41e8c:	00800044 	movi	r2,1
   41e90:	11c4983a 	sll	r2,r2,r7
   41e94:	0085c83a 	sub	r2,zero,r2
   41e98:	4090b03a 	or	r8,r8,r2
   41e9c:	2005883a 	mov	r2,r4
   41ea0:	2a000015 	stw	r8,0(r5)
   41ea4:	f800283a 	ret

00041ea8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   41ea8:	28800017 	ldw	r2,0(r5)
   41eac:	defffb04 	addi	sp,sp,-20
   41eb0:	30c00017 	ldw	r3,0(r6)
   41eb4:	dc400215 	stw	r17,8(sp)
   41eb8:	2823883a 	mov	r17,r5
   41ebc:	11400217 	ldw	r5,8(r2)
   41ec0:	dc800315 	stw	r18,12(sp)
   41ec4:	dc000115 	stw	r16,4(sp)
   41ec8:	dfc00415 	stw	ra,16(sp)
   41ecc:	2021883a 	mov	r16,r4
   41ed0:	d8c00015 	stw	r3,0(sp)
   41ed4:	8809883a 	mov	r4,r17
   41ed8:	3025883a 	mov	r18,r6
   41edc:	283ee83a 	callr	r5
   41ee0:	10803fcc 	andi	r2,r2,255
   41ee4:	880b883a 	mov	r5,r17
   41ee8:	8009883a 	mov	r4,r16
   41eec:	d80d883a 	mov	r6,sp
   41ef0:	01c00044 	movi	r7,1
   41ef4:	10000326 	beq	r2,zero,41f04 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
   41ef8:	d8800017 	ldw	r2,0(sp)
   41efc:	10c00017 	ldw	r3,0(r2)
   41f00:	d8c00015 	stw	r3,0(sp)
   41f04:	80800017 	ldw	r2,0(r16)
   41f08:	10c00417 	ldw	r3,16(r2)
   41f0c:	183ee83a 	callr	r3
   41f10:	10803fcc 	andi	r2,r2,255
   41f14:	0007883a 	mov	r3,zero
   41f18:	10000326 	beq	r2,zero,41f28 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
   41f1c:	d8800017 	ldw	r2,0(sp)
   41f20:	00c00044 	movi	r3,1
   41f24:	90800015 	stw	r2,0(r18)
   41f28:	1805883a 	mov	r2,r3
   41f2c:	dfc00417 	ldw	ra,16(sp)
   41f30:	dc800317 	ldw	r18,12(sp)
   41f34:	dc400217 	ldw	r17,8(sp)
   41f38:	dc000117 	ldw	r16,4(sp)
   41f3c:	dec00504 	addi	sp,sp,20
   41f40:	f800283a 	ret

00041f44 <_Z28read_encoded_value_with_basehjPKhPj>:
   41f44:	defff904 	addi	sp,sp,-28
   41f48:	dc400215 	stw	r17,8(sp)
   41f4c:	00801404 	movi	r2,80
   41f50:	24403fcc 	andi	r17,r4,255
   41f54:	dd000515 	stw	r20,20(sp)
   41f58:	dcc00415 	stw	r19,16(sp)
   41f5c:	dc800315 	stw	r18,12(sp)
   41f60:	dc000115 	stw	r16,4(sp)
   41f64:	dfc00615 	stw	ra,24(sp)
   41f68:	2025883a 	mov	r18,r4
   41f6c:	2829883a 	mov	r20,r5
   41f70:	3021883a 	mov	r16,r6
   41f74:	3827883a 	mov	r19,r7
   41f78:	88801826 	beq	r17,r2,41fdc <_Z28read_encoded_value_with_basehjPKhPj+0x98>
   41f7c:	88c003cc 	andi	r3,r17,15
   41f80:	00800304 	movi	r2,12
   41f84:	10c0012e 	bgeu	r2,r3,41f8c <_Z28read_encoded_value_with_basehjPKhPj+0x48>
   41f88:	00451e00 	call	451e0 <abort>
   41f8c:	18c5883a 	add	r2,r3,r3
   41f90:	1085883a 	add	r2,r2,r2
   41f94:	00c00134 	movhi	r3,4
   41f98:	18c7ea04 	addi	r3,r3,8104
   41f9c:	10c5883a 	add	r2,r2,r3
   41fa0:	11000017 	ldw	r4,0(r2)
   41fa4:	2000683a 	jmp	r4
   41fa8:	00042018 	cmpnei	zero,zero,4224
   41fac:	00042100 	call	4210 <__alt_mem_onchip_memory2_0-0x3bdf0>
   41fb0:	000420ac 	andhi	zero,zero,4226
   41fb4:	00042018 	cmpnei	zero,zero,4224
   41fb8:	00042070 	cmpltui	zero,zero,4225
   41fbc:	00041f88 	cmpgei	zero,zero,4222
   41fc0:	00041f88 	cmpgei	zero,zero,4222
   41fc4:	00041f88 	cmpgei	zero,zero,4222
   41fc8:	00041f88 	cmpgei	zero,zero,4222
   41fcc:	000420e8 	cmpgeui	zero,zero,4227
   41fd0:	000420c4 	movi	zero,4227
   41fd4:	00042018 	cmpnei	zero,zero,4224
   41fd8:	00042070 	cmpltui	zero,zero,4225
   41fdc:	308000c4 	addi	r2,r6,3
   41fe0:	00ffff04 	movi	r3,-4
   41fe4:	10c4703a 	and	r2,r2,r3
   41fe8:	11000017 	ldw	r4,0(r2)
   41fec:	11400104 	addi	r5,r2,4
   41ff0:	2805883a 	mov	r2,r5
   41ff4:	99000015 	stw	r4,0(r19)
   41ff8:	dfc00617 	ldw	ra,24(sp)
   41ffc:	dd000517 	ldw	r20,20(sp)
   42000:	dcc00417 	ldw	r19,16(sp)
   42004:	dc800317 	ldw	r18,12(sp)
   42008:	dc400217 	ldw	r17,8(sp)
   4200c:	dc000117 	ldw	r16,4(sp)
   42010:	dec00704 	addi	sp,sp,28
   42014:	f800283a 	ret
   42018:	30800043 	ldbu	r2,1(r6)
   4201c:	30c00083 	ldbu	r3,2(r6)
   42020:	310000c3 	ldbu	r4,3(r6)
   42024:	31400003 	ldbu	r5,0(r6)
   42028:	1004923a 	slli	r2,r2,8
   4202c:	1806943a 	slli	r3,r3,16
   42030:	2008963a 	slli	r4,r4,24
   42034:	1144b03a 	or	r2,r2,r5
   42038:	1886b03a 	or	r3,r3,r2
   4203c:	20c8b03a 	or	r4,r4,r3
   42040:	31400104 	addi	r5,r6,4
   42044:	203fea26 	beq	r4,zero,41ff0 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   42048:	88c01c0c 	andi	r3,r17,112
   4204c:	00800404 	movi	r2,16
   42050:	18801426 	beq	r3,r2,420a4 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
   42054:	90803fcc 	andi	r2,r18,255
   42058:	1080201c 	xori	r2,r2,128
   4205c:	10bfe004 	addi	r2,r2,-128
   42060:	2509883a 	add	r4,r4,r20
   42064:	103fe20e 	bge	r2,zero,41ff0 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   42068:	21000017 	ldw	r4,0(r4)
   4206c:	003fe006 	br	41ff0 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   42070:	30800043 	ldbu	r2,1(r6)
   42074:	31800083 	ldbu	r6,2(r6)
   42078:	820000c3 	ldbu	r8,3(r16)
   4207c:	1004923a 	slli	r2,r2,8
   42080:	82400003 	ldbu	r9,0(r16)
   42084:	300c943a 	slli	r6,r6,16
   42088:	4010963a 	slli	r8,r8,24
   4208c:	1244b03a 	or	r2,r2,r9
   42090:	308cb03a 	or	r6,r6,r2
   42094:	4184b03a 	or	r2,r8,r6
   42098:	1009883a 	mov	r4,r2
   4209c:	81400204 	addi	r5,r16,8
   420a0:	003fe806 	br	42044 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   420a4:	8029883a 	mov	r20,r16
   420a8:	003fea06 	br	42054 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
   420ac:	30800043 	ldbu	r2,1(r6)
   420b0:	30c00003 	ldbu	r3,0(r6)
   420b4:	31400084 	addi	r5,r6,2
   420b8:	1004923a 	slli	r2,r2,8
   420bc:	10c8b03a 	or	r4,r2,r3
   420c0:	003fe006 	br	42044 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   420c4:	30800043 	ldbu	r2,1(r6)
   420c8:	30c00003 	ldbu	r3,0(r6)
   420cc:	31400084 	addi	r5,r6,2
   420d0:	1004923a 	slli	r2,r2,8
   420d4:	10c4b03a 	or	r2,r2,r3
   420d8:	113fffcc 	andi	r4,r2,65535
   420dc:	2120001c 	xori	r4,r4,32768
   420e0:	21200004 	addi	r4,r4,-32768
   420e4:	003fd706 	br	42044 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   420e8:	3009883a 	mov	r4,r6
   420ec:	d80b883a 	mov	r5,sp
   420f0:	0041e540 	call	41e54 <_Z12read_sleb128PKhPi>
   420f4:	d9000017 	ldw	r4,0(sp)
   420f8:	100b883a 	mov	r5,r2
   420fc:	003fd106 	br	42044 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   42100:	3009883a 	mov	r4,r6
   42104:	d80b883a 	mov	r5,sp
   42108:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   4210c:	d9000017 	ldw	r4,0(sp)
   42110:	100b883a 	mov	r5,r2
   42114:	003fcb06 	br	42044 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

00042118 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
   42118:	deffff04 	addi	sp,sp,-4
   4211c:	21003fcc 	andi	r4,r4,255
   42120:	00803fc4 	movi	r2,255
   42124:	dfc00015 	stw	ra,0(sp)
   42128:	20800c26 	beq	r4,r2,4215c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   4212c:	21001c0c 	andi	r4,r4,112
   42130:	00800804 	movi	r2,32
   42134:	20800d26 	beq	r4,r2,4216c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
   42138:	1100070e 	bge	r2,r4,42158 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
   4213c:	00801004 	movi	r2,64
   42140:	20801126 	beq	r4,r2,42188 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
   42144:	00801404 	movi	r2,80
   42148:	20800426 	beq	r4,r2,4215c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   4214c:	00800c04 	movi	r2,48
   42150:	20801126 	beq	r4,r2,42198 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
   42154:	00451e00 	call	451e0 <abort>
   42158:	2000081e 	bne	r4,zero,4217c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
   4215c:	0005883a 	mov	r2,zero
   42160:	dfc00017 	ldw	ra,0(sp)
   42164:	dec00104 	addi	sp,sp,4
   42168:	f800283a 	ret
   4216c:	2809883a 	mov	r4,r5
   42170:	dfc00017 	ldw	ra,0(sp)
   42174:	dec00104 	addi	sp,sp,4
   42178:	00444641 	jmpi	44464 <_Unwind_GetTextRelBase>
   4217c:	00800404 	movi	r2,16
   42180:	20bff626 	beq	r4,r2,4215c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   42184:	00451e00 	call	451e0 <abort>
   42188:	2809883a 	mov	r4,r5
   4218c:	dfc00017 	ldw	ra,0(sp)
   42190:	dec00104 	addi	sp,sp,4
   42194:	004444c1 	jmpi	4444c <_Unwind_GetRegionStart>
   42198:	2809883a 	mov	r4,r5
   4219c:	dfc00017 	ldw	ra,0(sp)
   421a0:	dec00104 	addi	sp,sp,4
   421a4:	004445c1 	jmpi	4445c <_Unwind_GetDataRelBase>

000421a8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   421a8:	defffa04 	addi	sp,sp,-24
   421ac:	dc800415 	stw	r18,16(sp)
   421b0:	dc400315 	stw	r17,12(sp)
   421b4:	dc000215 	stw	r16,8(sp)
   421b8:	dfc00515 	stw	ra,20(sp)
   421bc:	2021883a 	mov	r16,r4
   421c0:	000f883a 	mov	r7,zero
   421c4:	3023883a 	mov	r17,r6
   421c8:	2825883a 	mov	r18,r5
   421cc:	20000226 	beq	r4,zero,421d8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
   421d0:	004444c0 	call	4444c <_Unwind_GetRegionStart>
   421d4:	100f883a 	mov	r7,r2
   421d8:	89c00015 	stw	r7,0(r17)
   421dc:	90c00003 	ldbu	r3,0(r18)
   421e0:	800b883a 	mov	r5,r16
   421e4:	00803fc4 	movi	r2,255
   421e8:	1c003fcc 	andi	r16,r3,255
   421ec:	91800044 	addi	r6,r18,1
   421f0:	8009883a 	mov	r4,r16
   421f4:	18802226 	beq	r3,r2,42280 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
   421f8:	d9800115 	stw	r6,4(sp)
   421fc:	00421180 	call	42118 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42200:	d9800117 	ldw	r6,4(sp)
   42204:	8009883a 	mov	r4,r16
   42208:	100b883a 	mov	r5,r2
   4220c:	89c00104 	addi	r7,r17,4
   42210:	0041f440 	call	41f44 <_Z28read_encoded_value_with_basehjPKhPj>
   42214:	100d883a 	mov	r6,r2
   42218:	30800003 	ldbu	r2,0(r6)
   4221c:	31c00044 	addi	r7,r6,1
   42220:	00c03fc4 	movi	r3,255
   42224:	d80b883a 	mov	r5,sp
   42228:	3809883a 	mov	r4,r7
   4222c:	88800505 	stb	r2,20(r17)
   42230:	10c01b26 	beq	r2,r3,422a0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
   42234:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   42238:	100f883a 	mov	r7,r2
   4223c:	d8800017 	ldw	r2,0(sp)
   42240:	3885883a 	add	r2,r7,r2
   42244:	88800315 	stw	r2,12(r17)
   42248:	38800003 	ldbu	r2,0(r7)
   4224c:	39000044 	addi	r4,r7,1
   42250:	d80b883a 	mov	r5,sp
   42254:	88800545 	stb	r2,21(r17)
   42258:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   4225c:	d8c00017 	ldw	r3,0(sp)
   42260:	10c9883a 	add	r4,r2,r3
   42264:	89000415 	stw	r4,16(r17)
   42268:	dfc00517 	ldw	ra,20(sp)
   4226c:	dc800417 	ldw	r18,16(sp)
   42270:	dc400317 	ldw	r17,12(sp)
   42274:	dc000217 	ldw	r16,8(sp)
   42278:	dec00604 	addi	sp,sp,24
   4227c:	f800283a 	ret
   42280:	89c00115 	stw	r7,4(r17)
   42284:	30800003 	ldbu	r2,0(r6)
   42288:	31c00044 	addi	r7,r6,1
   4228c:	00c03fc4 	movi	r3,255
   42290:	d80b883a 	mov	r5,sp
   42294:	3809883a 	mov	r4,r7
   42298:	88800505 	stb	r2,20(r17)
   4229c:	10ffe51e 	bne	r2,r3,42234 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
   422a0:	88000315 	stw	zero,12(r17)
   422a4:	003fe806 	br	42248 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

000422a8 <_Z15get_ttype_entryP16lsda_header_infoj>:
   422a8:	defffe04 	addi	sp,sp,-8
   422ac:	dfc00115 	stw	ra,4(sp)
   422b0:	21c00503 	ldbu	r7,20(r4)
   422b4:	00803fc4 	movi	r2,255
   422b8:	38801a26 	beq	r7,r2,42324 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
   422bc:	38c001cc 	andi	r3,r7,7
   422c0:	00800084 	movi	r2,2
   422c4:	18801326 	beq	r3,r2,42314 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
   422c8:	10c0050e 	bge	r2,r3,422e0 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
   422cc:	008000c4 	movi	r2,3
   422d0:	18800426 	beq	r3,r2,422e4 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
   422d4:	00800104 	movi	r2,4
   422d8:	18801026 	beq	r3,r2,4231c <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
   422dc:	00451e00 	call	451e0 <abort>
   422e0:	183ffe1e 	bne	r3,zero,422dc <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
   422e4:	2945883a 	add	r2,r5,r5
   422e8:	1085883a 	add	r2,r2,r2
   422ec:	21800317 	ldw	r6,12(r4)
   422f0:	21400217 	ldw	r5,8(r4)
   422f4:	3809883a 	mov	r4,r7
   422f8:	308dc83a 	sub	r6,r6,r2
   422fc:	d80f883a 	mov	r7,sp
   42300:	0041f440 	call	41f44 <_Z28read_encoded_value_with_basehjPKhPj>
   42304:	d8800017 	ldw	r2,0(sp)
   42308:	dfc00117 	ldw	ra,4(sp)
   4230c:	dec00204 	addi	sp,sp,8
   42310:	f800283a 	ret
   42314:	2945883a 	add	r2,r5,r5
   42318:	003ff406 	br	422ec <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   4231c:	280490fa 	slli	r2,r5,3
   42320:	003ff206 	br	422ec <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   42324:	0005883a 	mov	r2,zero
   42328:	003ff006 	br	422ec <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0004232c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
   4232c:	20800317 	ldw	r2,12(r4)
   42330:	defffa04 	addi	sp,sp,-24
   42334:	dc800415 	stw	r18,16(sp)
   42338:	11c5c83a 	sub	r2,r2,r7
   4233c:	dc400315 	stw	r17,12(sp)
   42340:	dc000215 	stw	r16,8(sp)
   42344:	dfc00515 	stw	ra,20(sp)
   42348:	2023883a 	mov	r17,r4
   4234c:	d9800115 	stw	r6,4(sp)
   42350:	2825883a 	mov	r18,r5
   42354:	143fffc4 	addi	r16,r2,-1
   42358:	8009883a 	mov	r4,r16
   4235c:	d80b883a 	mov	r5,sp
   42360:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   42364:	1021883a 	mov	r16,r2
   42368:	d8800017 	ldw	r2,0(sp)
   4236c:	8809883a 	mov	r4,r17
   42370:	100b883a 	mov	r5,r2
   42374:	10000826 	beq	r2,zero,42398 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
   42378:	00422a80 	call	422a8 <_Z15get_ttype_entryP16lsda_header_infoj>
   4237c:	1009883a 	mov	r4,r2
   42380:	900b883a 	mov	r5,r18
   42384:	d9800104 	addi	r6,sp,4
   42388:	0041ea80 	call	41ea8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   4238c:	10803fcc 	andi	r2,r2,255
   42390:	103ff126 	beq	r2,zero,42358 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
   42394:	00800044 	movi	r2,1
   42398:	dfc00517 	ldw	ra,20(sp)
   4239c:	dc800417 	ldw	r18,16(sp)
   423a0:	dc400317 	ldw	r17,12(sp)
   423a4:	dc000217 	ldw	r16,8(sp)
   423a8:	dec00604 	addi	sp,sp,24
   423ac:	f800283a 	ret

000423b0 <__cxa_call_unexpected>:
   423b0:	deffe204 	addi	sp,sp,-120
   423b4:	00800134 	movhi	r2,4
   423b8:	10894c04 	addi	r2,r2,9520
   423bc:	00c00134 	movhi	r3,4
   423c0:	18dc9b04 	addi	r3,r3,29292
   423c4:	d8800c15 	stw	r2,48(sp)
   423c8:	d9001815 	stw	r4,96(sp)
   423cc:	00800134 	movhi	r2,4
   423d0:	10890e04 	addi	r2,r2,9272
   423d4:	d9000604 	addi	r4,sp,24
   423d8:	d8c00d15 	stw	r3,52(sp)
   423dc:	dfc01d15 	stw	ra,116(sp)
   423e0:	d8800f15 	stw	r2,60(sp)
   423e4:	df001c15 	stw	fp,112(sp)
   423e8:	ddc01b15 	stw	r23,108(sp)
   423ec:	dec00e15 	stw	sp,56(sp)
   423f0:	dec01015 	stw	sp,64(sp)
   423f4:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   423f8:	d9001817 	ldw	r4,96(sp)
   423fc:	00430ec0 	call	430ec <__cxa_begin_catch>
   42400:	d8801817 	ldw	r2,96(sp)
   42404:	10fff504 	addi	r3,r2,-44
   42408:	18800917 	ldw	r2,36(r3)
   4240c:	19400617 	ldw	r5,24(r3)
   42410:	19000217 	ldw	r4,8(r3)
   42414:	d8800215 	stw	r2,8(sp)
   42418:	18800817 	ldw	r2,32(r3)
   4241c:	18c00317 	ldw	r3,12(r3)
   42420:	d9401615 	stw	r5,88(sp)
   42424:	d8801715 	stw	r2,92(sp)
   42428:	00800084 	movi	r2,2
   4242c:	d8c01515 	stw	r3,84(sp)
   42430:	d8800715 	stw	r2,28(sp)
   42434:	0042b040 	call	42b04 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   42438:	d8800717 	ldw	r2,28(sp)
   4243c:	d8c00817 	ldw	r3,32(sp)
   42440:	d8801a15 	stw	r2,104(sp)
   42444:	d9401a17 	ldw	r5,104(sp)
   42448:	00800044 	movi	r2,1
   4244c:	d8c01915 	stw	r3,100(sp)
   42450:	28800826 	beq	r5,r2,42474 <__cxa_call_unexpected+0xc4>
   42454:	d8000715 	stw	zero,28(sp)
   42458:	00430480 	call	43048 <__cxa_end_catch>
   4245c:	d8000715 	stw	zero,28(sp)
   42460:	00430480 	call	43048 <__cxa_end_catch>
   42464:	d9001917 	ldw	r4,100(sp)
   42468:	00bfffc4 	movi	r2,-1
   4246c:	d8800715 	stw	r2,28(sp)
   42470:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   42474:	d9001917 	ldw	r4,100(sp)
   42478:	00430ec0 	call	430ec <__cxa_begin_catch>
   4247c:	0042a100 	call	42a10 <__cxa_get_globals_fast>
   42480:	10800017 	ldw	r2,0(r2)
   42484:	d8c01a17 	ldw	r3,104(sp)
   42488:	0009883a 	mov	r4,zero
   4248c:	11401004 	addi	r5,r2,64
   42490:	d9401315 	stw	r5,76(sp)
   42494:	d8801415 	stw	r2,80(sp)
   42498:	d8c00715 	stw	r3,28(sp)
   4249c:	d9401717 	ldw	r5,92(sp)
   424a0:	d80d883a 	mov	r6,sp
   424a4:	00421a80 	call	421a8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   424a8:	d8801417 	ldw	r2,80(sp)
   424ac:	d809883a 	mov	r4,sp
   424b0:	d9801317 	ldw	r6,76(sp)
   424b4:	11400017 	ldw	r5,0(r2)
   424b8:	d9c01617 	ldw	r7,88(sp)
   424bc:	004232c0 	call	4232c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   424c0:	10803fcc 	andi	r2,r2,255
   424c4:	1000151e 	bne	r2,zero,4251c <__cxa_call_unexpected+0x16c>
   424c8:	d8c01a17 	ldw	r3,104(sp)
   424cc:	d809883a 	mov	r4,sp
   424d0:	01400134 	movhi	r5,4
   424d4:	295ce904 	addi	r5,r5,29604
   424d8:	d8c00715 	stw	r3,28(sp)
   424dc:	000d883a 	mov	r6,zero
   424e0:	d9c01617 	ldw	r7,88(sp)
   424e4:	004232c0 	call	4232c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   424e8:	10803fcc 	andi	r2,r2,255
   424ec:	10000c26 	beq	r2,zero,42520 <__cxa_call_unexpected+0x170>
   424f0:	01000104 	movi	r4,4
   424f4:	0042da40 	call	42da4 <__cxa_allocate_exception>
   424f8:	1009883a 	mov	r4,r2
   424fc:	00800134 	movhi	r2,4
   42500:	109cdc04 	addi	r2,r2,29552
   42504:	20800015 	stw	r2,0(r4)
   42508:	01400134 	movhi	r5,4
   4250c:	295ce904 	addi	r5,r5,29604
   42510:	01800134 	movhi	r6,4
   42514:	318b3904 	addi	r6,r6,11492
   42518:	0042f4c0 	call	42f4c <__cxa_throw>
   4251c:	0042ed80 	call	42ed8 <__cxa_rethrow>
   42520:	d9401a17 	ldw	r5,104(sp)
   42524:	d9001517 	ldw	r4,84(sp)
   42528:	d9400715 	stw	r5,28(sp)
   4252c:	0042a480 	call	42a48 <_ZN10__cxxabiv111__terminateEPFvvE>

00042530 <__gxx_personality_sj0>:
   42530:	deffd304 	addi	sp,sp,-180
   42534:	00800134 	movhi	r2,4
   42538:	108a7304 	addi	r2,r2,10700
   4253c:	00c00134 	movhi	r3,4
   42540:	18dc9f04 	addi	r3,r3,29308
   42544:	d8801315 	stw	r2,76(sp)
   42548:	d9002315 	stw	r4,140(sp)
   4254c:	00800134 	movhi	r2,4
   42550:	10894c04 	addi	r2,r2,9520
   42554:	d9000a04 	addi	r4,sp,40
   42558:	d8801015 	stw	r2,64(sp)
   4255c:	d8c01115 	stw	r3,68(sp)
   42560:	dfc02c15 	stw	ra,176(sp)
   42564:	df002b15 	stw	fp,172(sp)
   42568:	ddc02a15 	stw	r23,168(sp)
   4256c:	dec01215 	stw	sp,72(sp)
   42570:	dec01415 	stw	sp,80(sp)
   42574:	d9802515 	stw	r6,148(sp)
   42578:	d9402415 	stw	r5,144(sp)
   4257c:	d9c02615 	stw	r7,152(sp)
   42580:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   42584:	d8c02317 	ldw	r3,140(sp)
   42588:	00800044 	movi	r2,1
   4258c:	18800a26 	beq	r3,r2,425b8 <__gxx_personality_sj0+0x88>
   42590:	010000c4 	movi	r4,3
   42594:	d9002215 	stw	r4,136(sp)
   42598:	d9000a04 	addi	r4,sp,40
   4259c:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   425a0:	d8802217 	ldw	r2,136(sp)
   425a4:	dfc02c17 	ldw	ra,176(sp)
   425a8:	df002b17 	ldw	fp,172(sp)
   425ac:	ddc02a17 	ldw	r23,168(sp)
   425b0:	dec02d04 	addi	sp,sp,180
   425b4:	f800283a 	ret
   425b8:	d9402d17 	ldw	r5,180(sp)
   425bc:	d9002517 	ldw	r4,148(sp)
   425c0:	0007883a 	mov	r3,zero
   425c4:	28800504 	addi	r2,r5,20
   425c8:	d8800015 	stw	r2,0(sp)
   425cc:	28bff504 	addi	r2,r5,-44
   425d0:	d8801a15 	stw	r2,104(sp)
   425d4:	0090caf4 	movhi	r2,17195
   425d8:	108ac004 	addi	r2,r2,11008
   425dc:	2080ad26 	beq	r4,r2,42894 <__gxx_personality_sj0+0x364>
   425e0:	d8c02105 	stb	r3,132(sp)
   425e4:	d8c02417 	ldw	r3,144(sp)
   425e8:	00800184 	movi	r2,6
   425ec:	1880281e 	bne	r3,r2,42690 <__gxx_personality_sj0+0x160>
   425f0:	d8802103 	ldbu	r2,132(sp)
   425f4:	10002626 	beq	r2,zero,42690 <__gxx_personality_sj0+0x160>
   425f8:	d9001a17 	ldw	r4,104(sp)
   425fc:	d9401a17 	ldw	r5,104(sp)
   42600:	d8801a17 	ldw	r2,104(sp)
   42604:	21000917 	ldw	r4,36(r4)
   42608:	29400617 	ldw	r5,24(r5)
   4260c:	10800817 	ldw	r2,32(r2)
   42610:	d9001d15 	stw	r4,116(sp)
   42614:	d9401b15 	stw	r5,108(sp)
   42618:	d8802015 	stw	r2,128(sp)
   4261c:	2000ad1e 	bne	r4,zero,428d4 <__gxx_personality_sj0+0x3a4>
   42620:	01000044 	movi	r4,1
   42624:	00800044 	movi	r2,1
   42628:	2080e126 	beq	r4,r2,429b0 <__gxx_personality_sj0+0x480>
   4262c:	d8801b17 	ldw	r2,108(sp)
   42630:	1000d316 	blt	r2,zero,42980 <__gxx_personality_sj0+0x450>
   42634:	d9802d17 	ldw	r6,180(sp)
   42638:	d9002e17 	ldw	r4,184(sp)
   4263c:	00bfffc4 	movi	r2,-1
   42640:	000b883a 	mov	r5,zero
   42644:	d8800b15 	stw	r2,44(sp)
   42648:	00443f40 	call	443f4 <_Unwind_SetGR>
   4264c:	d9801b17 	ldw	r6,108(sp)
   42650:	d9002e17 	ldw	r4,184(sp)
   42654:	01400044 	movi	r5,1
   42658:	00443f40 	call	443f4 <_Unwind_SetGR>
   4265c:	d9002e17 	ldw	r4,184(sp)
   42660:	d9401d17 	ldw	r5,116(sp)
   42664:	00444300 	call	44430 <_Unwind_SetIP>
   42668:	010001c4 	movi	r4,7
   4266c:	d9002215 	stw	r4,136(sp)
   42670:	d9000a04 	addi	r4,sp,40
   42674:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   42678:	d8802217 	ldw	r2,136(sp)
   4267c:	dfc02c17 	ldw	ra,176(sp)
   42680:	df002b17 	ldw	fp,172(sp)
   42684:	ddc02a17 	ldw	r23,168(sp)
   42688:	dec02d04 	addi	sp,sp,180
   4268c:	f800283a 	ret
   42690:	d9002e17 	ldw	r4,184(sp)
   42694:	00ffffc4 	movi	r3,-1
   42698:	d8c00b15 	stw	r3,44(sp)
   4269c:	00444400 	call	44440 <_Unwind_GetLanguageSpecificData>
   426a0:	10007226 	beq	r2,zero,4286c <__gxx_personality_sj0+0x33c>
   426a4:	d9002e17 	ldw	r4,184(sp)
   426a8:	d9800404 	addi	r6,sp,16
   426ac:	100b883a 	mov	r5,r2
   426b0:	d8802015 	stw	r2,128(sp)
   426b4:	00421a80 	call	421a8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   426b8:	d9000903 	ldbu	r4,36(sp)
   426bc:	d9402e17 	ldw	r5,184(sp)
   426c0:	d8801e15 	stw	r2,120(sp)
   426c4:	00421180 	call	42118 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   426c8:	d9002e17 	ldw	r4,184(sp)
   426cc:	d8800615 	stw	r2,24(sp)
   426d0:	004440c0 	call	4440c <_Unwind_GetIP>
   426d4:	10bfffc4 	addi	r2,r2,-1
   426d8:	d8801c15 	stw	r2,112(sp)
   426dc:	10006316 	blt	r2,zero,4286c <__gxx_personality_sj0+0x33c>
   426e0:	10001b1e 	bne	r2,zero,42750 <__gxx_personality_sj0+0x220>
   426e4:	01000044 	movi	r4,1
   426e8:	d8001f15 	stw	zero,124(sp)
   426ec:	d8001d15 	stw	zero,116(sp)
   426f0:	d8001b15 	stw	zero,108(sp)
   426f4:	d9402417 	ldw	r5,144(sp)
   426f8:	00c00044 	movi	r3,1
   426fc:	28c4703a 	and	r2,r5,r3
   42700:	1005003a 	cmpeq	r2,r2,zero
   42704:	10006a1e 	bne	r2,zero,428b0 <__gxx_personality_sj0+0x380>
   42708:	00800084 	movi	r2,2
   4270c:	20805726 	beq	r4,r2,4286c <__gxx_personality_sj0+0x33c>
   42710:	d8802103 	ldbu	r2,132(sp)
   42714:	10008626 	beq	r2,zero,42930 <__gxx_personality_sj0+0x400>
   42718:	d9001a17 	ldw	r4,104(sp)
   4271c:	d9401d17 	ldw	r5,116(sp)
   42720:	d8801b17 	ldw	r2,108(sp)
   42724:	00c00184 	movi	r3,6
   42728:	d8c02215 	stw	r3,136(sp)
   4272c:	21400915 	stw	r5,36(r4)
   42730:	20800615 	stw	r2,24(r4)
   42734:	d8c01f17 	ldw	r3,124(sp)
   42738:	d9402017 	ldw	r5,128(sp)
   4273c:	d8800017 	ldw	r2,0(sp)
   42740:	20c00715 	stw	r3,28(r4)
   42744:	21400815 	stw	r5,32(r4)
   42748:	20800a15 	stw	r2,40(r4)
   4274c:	003f9206 	br	42598 <__gxx_personality_sj0+0x68>
   42750:	d9001e17 	ldw	r4,120(sp)
   42754:	d9400204 	addi	r5,sp,8
   42758:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   4275c:	d9401c17 	ldw	r5,112(sp)
   42760:	1009883a 	mov	r4,r2
   42764:	297fffc4 	addi	r5,r5,-1
   42768:	d9401c15 	stw	r5,112(sp)
   4276c:	d9400104 	addi	r5,sp,4
   42770:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   42774:	d8801e15 	stw	r2,120(sp)
   42778:	d8801c17 	ldw	r2,112(sp)
   4277c:	103ff41e 	bne	r2,zero,42750 <__gxx_personality_sj0+0x220>
   42780:	d8800217 	ldw	r2,8(sp)
   42784:	d8c00117 	ldw	r3,4(sp)
   42788:	01000044 	movi	r4,1
   4278c:	1105883a 	add	r2,r2,r4
   42790:	d8801d15 	stw	r2,116(sp)
   42794:	1800541e 	bne	r3,zero,428e8 <__gxx_personality_sj0+0x3b8>
   42798:	d8001f15 	stw	zero,124(sp)
   4279c:	d8c01d17 	ldw	r3,116(sp)
   427a0:	18003226 	beq	r3,zero,4286c <__gxx_personality_sj0+0x33c>
   427a4:	d9001f17 	ldw	r4,124(sp)
   427a8:	20007226 	beq	r4,zero,42974 <__gxx_personality_sj0+0x444>
   427ac:	d9402417 	ldw	r5,144(sp)
   427b0:	2880020c 	andi	r2,r5,8
   427b4:	10006a1e 	bne	r2,zero,42960 <__gxx_personality_sj0+0x430>
   427b8:	d8802103 	ldbu	r2,132(sp)
   427bc:	10006826 	beq	r2,zero,42960 <__gxx_personality_sj0+0x430>
   427c0:	d8801a17 	ldw	r2,104(sp)
   427c4:	10800017 	ldw	r2,0(r2)
   427c8:	d8801915 	stw	r2,100(sp)
   427cc:	d8c01917 	ldw	r3,100(sp)
   427d0:	d8001805 	stb	zero,96(sp)
   427d4:	1807003a 	cmpeq	r3,r3,zero
   427d8:	d8c02715 	stw	r3,156(sp)
   427dc:	00000706 	br	427fc <__gxx_personality_sj0+0x2cc>
   427e0:	01000044 	movi	r4,1
   427e4:	d9001805 	stb	r4,96(sp)
   427e8:	d8800217 	ldw	r2,8(sp)
   427ec:	10005e26 	beq	r2,zero,42968 <__gxx_personality_sj0+0x438>
   427f0:	d8c01717 	ldw	r3,92(sp)
   427f4:	1885883a 	add	r2,r3,r2
   427f8:	d8801f15 	stw	r2,124(sp)
   427fc:	d9001f17 	ldw	r4,124(sp)
   42800:	d9400104 	addi	r5,sp,4
   42804:	0041e540 	call	41e54 <_Z12read_sleb128PKhPi>
   42808:	1009883a 	mov	r4,r2
   4280c:	d9400204 	addi	r5,sp,8
   42810:	d8801715 	stw	r2,92(sp)
   42814:	0041e540 	call	41e54 <_Z12read_sleb128PKhPi>
   42818:	d8800117 	ldw	r2,4(sp)
   4281c:	103ff026 	beq	r2,zero,427e0 <__gxx_personality_sj0+0x2b0>
   42820:	0080360e 	bge	zero,r2,428fc <__gxx_personality_sj0+0x3cc>
   42824:	017fffc4 	movi	r5,-1
   42828:	d9400b15 	stw	r5,44(sp)
   4282c:	d9000404 	addi	r4,sp,16
   42830:	100b883a 	mov	r5,r2
   42834:	00422a80 	call	422a8 <_Z15get_ttype_entryP16lsda_header_infoj>
   42838:	10000826 	beq	r2,zero,4285c <__gxx_personality_sj0+0x32c>
   4283c:	d8c02717 	ldw	r3,156(sp)
   42840:	183fe91e 	bne	r3,zero,427e8 <__gxx_personality_sj0+0x2b8>
   42844:	d9401917 	ldw	r5,100(sp)
   42848:	1009883a 	mov	r4,r2
   4284c:	d80d883a 	mov	r6,sp
   42850:	0041ea80 	call	41ea8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   42854:	10803fcc 	andi	r2,r2,255
   42858:	103fe326 	beq	r2,zero,427e8 <__gxx_personality_sj0+0x2b8>
   4285c:	d9000117 	ldw	r4,4(sp)
   42860:	d9001b15 	stw	r4,108(sp)
   42864:	010000c4 	movi	r4,3
   42868:	003fa206 	br	426f4 <__gxx_personality_sj0+0x1c4>
   4286c:	01400204 	movi	r5,8
   42870:	d9000a04 	addi	r4,sp,40
   42874:	d9402215 	stw	r5,136(sp)
   42878:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   4287c:	d8802217 	ldw	r2,136(sp)
   42880:	dfc02c17 	ldw	ra,176(sp)
   42884:	df002b17 	ldw	fp,172(sp)
   42888:	ddc02a17 	ldw	r23,168(sp)
   4288c:	dec02d04 	addi	sp,sp,180
   42890:	f800283a 	ret
   42894:	d9402617 	ldw	r5,152(sp)
   42898:	0091d3b4 	movhi	r2,18254
   4289c:	109550c4 	addi	r2,r2,21827
   428a0:	28bf4f1e 	bne	r5,r2,425e0 <__gxx_personality_sj0+0xb0>
   428a4:	d8802317 	ldw	r2,140(sp)
   428a8:	1007883a 	mov	r3,r2
   428ac:	003f4c06 	br	425e0 <__gxx_personality_sj0+0xb0>
   428b0:	d9402417 	ldw	r5,144(sp)
   428b4:	2880020c 	andi	r2,r5,8
   428b8:	10000826 	beq	r2,zero,428dc <__gxx_personality_sj0+0x3ac>
   428bc:	20c04026 	beq	r4,r3,429c0 <__gxx_personality_sj0+0x490>
   428c0:	d8801b17 	ldw	r2,108(sp)
   428c4:	103f5b0e 	bge	r2,zero,42634 <__gxx_personality_sj0+0x104>
   428c8:	00800084 	movi	r2,2
   428cc:	d8800b15 	stw	r2,44(sp)
   428d0:	0042b140 	call	42b14 <_ZSt10unexpectedv>
   428d4:	010000c4 	movi	r4,3
   428d8:	003f5206 	br	42624 <__gxx_personality_sj0+0xf4>
   428dc:	d8802103 	ldbu	r2,132(sp)
   428e0:	103f501e 	bne	r2,zero,42624 <__gxx_personality_sj0+0xf4>
   428e4:	003ff506 	br	428bc <__gxx_personality_sj0+0x38c>
   428e8:	d8800817 	ldw	r2,32(sp)
   428ec:	1885883a 	add	r2,r3,r2
   428f0:	1105c83a 	sub	r2,r2,r4
   428f4:	d8801f15 	stw	r2,124(sp)
   428f8:	003fa806 	br	4279c <__gxx_personality_sj0+0x26c>
   428fc:	d9002717 	ldw	r4,156(sp)
   42900:	20000e1e 	bne	r4,zero,4293c <__gxx_personality_sj0+0x40c>
   42904:	017fffc4 	movi	r5,-1
   42908:	d9400b15 	stw	r5,44(sp)
   4290c:	d9800017 	ldw	r6,0(sp)
   42910:	d9401917 	ldw	r5,100(sp)
   42914:	100f883a 	mov	r7,r2
   42918:	d9000404 	addi	r4,sp,16
   4291c:	004232c0 	call	4232c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42920:	1080005c 	xori	r2,r2,1
   42924:	10803fcc 	andi	r2,r2,255
   42928:	103faf26 	beq	r2,zero,427e8 <__gxx_personality_sj0+0x2b8>
   4292c:	003fcb06 	br	4285c <__gxx_personality_sj0+0x32c>
   42930:	00800184 	movi	r2,6
   42934:	d8802215 	stw	r2,136(sp)
   42938:	003f1706 	br	42598 <__gxx_personality_sj0+0x68>
   4293c:	d9000717 	ldw	r4,28(sp)
   42940:	d9400304 	addi	r5,sp,12
   42944:	2089c83a 	sub	r4,r4,r2
   42948:	213fffc4 	addi	r4,r4,-1
   4294c:	0041e240 	call	41e24 <_Z12read_uleb128PKhPj>
   42950:	d8c00317 	ldw	r3,12(sp)
   42954:	1807003a 	cmpeq	r3,r3,zero
   42958:	1805883a 	mov	r2,r3
   4295c:	003ff106 	br	42924 <__gxx_personality_sj0+0x3f4>
   42960:	d8001915 	stw	zero,100(sp)
   42964:	003f9906 	br	427cc <__gxx_personality_sj0+0x29c>
   42968:	d8801803 	ldbu	r2,96(sp)
   4296c:	1004c03a 	cmpne	r2,r2,zero
   42970:	103fbe26 	beq	r2,zero,4286c <__gxx_personality_sj0+0x33c>
   42974:	01000084 	movi	r4,2
   42978:	d8001b15 	stw	zero,108(sp)
   4297c:	003f5d06 	br	426f4 <__gxx_personality_sj0+0x1c4>
   42980:	d9402017 	ldw	r5,128(sp)
   42984:	d9002e17 	ldw	r4,184(sp)
   42988:	00bfffc4 	movi	r2,-1
   4298c:	d9800404 	addi	r6,sp,16
   42990:	d8800b15 	stw	r2,44(sp)
   42994:	00421a80 	call	421a8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   42998:	d9000903 	ldbu	r4,36(sp)
   4299c:	d9402e17 	ldw	r5,184(sp)
   429a0:	00421180 	call	42118 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   429a4:	d8c01a17 	ldw	r3,104(sp)
   429a8:	18800915 	stw	r2,36(r3)
   429ac:	003f2106 	br	42634 <__gxx_personality_sj0+0x104>
   429b0:	d9002d17 	ldw	r4,180(sp)
   429b4:	00bfffc4 	movi	r2,-1
   429b8:	d8800b15 	stw	r2,44(sp)
   429bc:	0042c2c0 	call	42c2c <__cxa_call_terminate>
   429c0:	00bfffc4 	movi	r2,-1
   429c4:	d8800b15 	stw	r2,44(sp)
   429c8:	0042aec0 	call	42aec <_ZSt9terminatev>
   429cc:	d9000b17 	ldw	r4,44(sp)
   429d0:	d9400c17 	ldw	r5,48(sp)
   429d4:	00800044 	movi	r2,1
   429d8:	d9002915 	stw	r4,164(sp)
   429dc:	d9402815 	stw	r5,160(sp)
   429e0:	20800626 	beq	r4,r2,429fc <__gxx_personality_sj0+0x4cc>
   429e4:	d8000b15 	stw	zero,44(sp)
   429e8:	00430480 	call	43048 <__cxa_end_catch>
   429ec:	d9002817 	ldw	r4,160(sp)
   429f0:	00bfffc4 	movi	r2,-1
   429f4:	d8800b15 	stw	r2,44(sp)
   429f8:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   429fc:	d9002817 	ldw	r4,160(sp)
   42a00:	00430ec0 	call	430ec <__cxa_begin_catch>
   42a04:	d8c02917 	ldw	r3,164(sp)
   42a08:	d8c00b15 	stw	r3,44(sp)
   42a0c:	0042aec0 	call	42aec <_ZSt9terminatev>

00042a10 <__cxa_get_globals_fast>:
   42a10:	d0a1d104 	addi	r2,gp,-30908
   42a14:	f800283a 	ret

00042a18 <__cxa_get_globals>:
   42a18:	d0a1d104 	addi	r2,gp,-30908
   42a1c:	f800283a 	ret

00042a20 <_ZSt13set_terminatePFvvE>:
   42a20:	00c00134 	movhi	r3,4
   42a24:	18df2a04 	addi	r3,r3,31912
   42a28:	18800017 	ldw	r2,0(r3)
   42a2c:	19000015 	stw	r4,0(r3)
   42a30:	f800283a 	ret

00042a34 <_ZSt14set_unexpectedPFvvE>:
   42a34:	00c00134 	movhi	r3,4
   42a38:	18df2b04 	addi	r3,r3,31916
   42a3c:	18800017 	ldw	r2,0(r3)
   42a40:	19000015 	stw	r4,0(r3)
   42a44:	f800283a 	ret

00042a48 <_ZN10__cxxabiv111__terminateEPFvvE>:
   42a48:	deffed04 	addi	sp,sp,-76
   42a4c:	00800134 	movhi	r2,4
   42a50:	10894c04 	addi	r2,r2,9520
   42a54:	d8800615 	stw	r2,24(sp)
   42a58:	00c00134 	movhi	r3,4
   42a5c:	18dca304 	addi	r3,r3,29324
   42a60:	00800134 	movhi	r2,4
   42a64:	108aa904 	addi	r2,r2,10916
   42a68:	d9000d15 	stw	r4,52(sp)
   42a6c:	d809883a 	mov	r4,sp
   42a70:	d8800915 	stw	r2,36(sp)
   42a74:	dfc01215 	stw	ra,72(sp)
   42a78:	df001115 	stw	fp,68(sp)
   42a7c:	ddc01015 	stw	r23,64(sp)
   42a80:	d8c00715 	stw	r3,28(sp)
   42a84:	dec00815 	stw	sp,32(sp)
   42a88:	dec00a15 	stw	sp,40(sp)
   42a8c:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   42a90:	00800084 	movi	r2,2
   42a94:	d8800115 	stw	r2,4(sp)
   42a98:	d8800d17 	ldw	r2,52(sp)
   42a9c:	103ee83a 	callr	r2
   42aa0:	00451e00 	call	451e0 <abort>
   42aa4:	d8800117 	ldw	r2,4(sp)
   42aa8:	d8c00217 	ldw	r3,8(sp)
   42aac:	d8800f15 	stw	r2,60(sp)
   42ab0:	d8c00e15 	stw	r3,56(sp)
   42ab4:	d8c00f17 	ldw	r3,60(sp)
   42ab8:	00800044 	movi	r2,1
   42abc:	18800626 	beq	r3,r2,42ad8 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
   42ac0:	d8000115 	stw	zero,4(sp)
   42ac4:	00430480 	call	43048 <__cxa_end_catch>
   42ac8:	d9000e17 	ldw	r4,56(sp)
   42acc:	00bfffc4 	movi	r2,-1
   42ad0:	d8800115 	stw	r2,4(sp)
   42ad4:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   42ad8:	d9000e17 	ldw	r4,56(sp)
   42adc:	00430ec0 	call	430ec <__cxa_begin_catch>
   42ae0:	d8c00f17 	ldw	r3,60(sp)
   42ae4:	d8c00115 	stw	r3,4(sp)
   42ae8:	00451e00 	call	451e0 <abort>

00042aec <_ZSt9terminatev>:
   42aec:	00800134 	movhi	r2,4
   42af0:	109f2a04 	addi	r2,r2,31912
   42af4:	11000017 	ldw	r4,0(r2)
   42af8:	deffff04 	addi	sp,sp,-4
   42afc:	dfc00015 	stw	ra,0(sp)
   42b00:	0042a480 	call	42a48 <_ZN10__cxxabiv111__terminateEPFvvE>

00042b04 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   42b04:	deffff04 	addi	sp,sp,-4
   42b08:	dfc00015 	stw	ra,0(sp)
   42b0c:	203ee83a 	callr	r4
   42b10:	0042aec0 	call	42aec <_ZSt9terminatev>

00042b14 <_ZSt10unexpectedv>:
   42b14:	00800134 	movhi	r2,4
   42b18:	109f2b04 	addi	r2,r2,31916
   42b1c:	11000017 	ldw	r4,0(r2)
   42b20:	deffff04 	addi	sp,sp,-4
   42b24:	dfc00015 	stw	ra,0(sp)
   42b28:	0042b040 	call	42b04 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00042b2c <_Znwm>:
   42b2c:	deffee04 	addi	sp,sp,-72
   42b30:	00800134 	movhi	r2,4
   42b34:	10894c04 	addi	r2,r2,9520
   42b38:	d8800615 	stw	r2,24(sp)
   42b3c:	00c00134 	movhi	r3,4
   42b40:	18dca704 	addi	r3,r3,29340
   42b44:	00800134 	movhi	r2,4
   42b48:	108b0204 	addi	r2,r2,11272
   42b4c:	d9000e15 	stw	r4,56(sp)
   42b50:	d809883a 	mov	r4,sp
   42b54:	d8800915 	stw	r2,36(sp)
   42b58:	dfc01115 	stw	ra,68(sp)
   42b5c:	df001015 	stw	fp,64(sp)
   42b60:	ddc00f15 	stw	r23,60(sp)
   42b64:	d8c00715 	stw	r3,28(sp)
   42b68:	dec00815 	stw	sp,32(sp)
   42b6c:	dec00a15 	stw	sp,40(sp)
   42b70:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   42b74:	d8800e17 	ldw	r2,56(sp)
   42b78:	10000a1e 	bne	r2,zero,42ba4 <_Znwm+0x78>
   42b7c:	00800044 	movi	r2,1
   42b80:	d8800e15 	stw	r2,56(sp)
   42b84:	00000706 	br	42ba4 <_Znwm+0x78>
   42b88:	00800174 	movhi	r2,5
   42b8c:	10a0fa04 	addi	r2,r2,-31768
   42b90:	10c00017 	ldw	r3,0(r2)
   42b94:	18000f26 	beq	r3,zero,42bd4 <_Znwm+0xa8>
   42b98:	00800044 	movi	r2,1
   42b9c:	d8800115 	stw	r2,4(sp)
   42ba0:	183ee83a 	callr	r3
   42ba4:	d9000e17 	ldw	r4,56(sp)
   42ba8:	004520c0 	call	4520c <malloc>
   42bac:	d8800d15 	stw	r2,52(sp)
   42bb0:	103ff526 	beq	r2,zero,42b88 <_Znwm+0x5c>
   42bb4:	d809883a 	mov	r4,sp
   42bb8:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   42bbc:	d8800d17 	ldw	r2,52(sp)
   42bc0:	dfc01117 	ldw	ra,68(sp)
   42bc4:	df001017 	ldw	fp,64(sp)
   42bc8:	ddc00f17 	ldw	r23,60(sp)
   42bcc:	dec01204 	addi	sp,sp,72
   42bd0:	f800283a 	ret
   42bd4:	01000104 	movi	r4,4
   42bd8:	0042da40 	call	42da4 <__cxa_allocate_exception>
   42bdc:	1009883a 	mov	r4,r2
   42be0:	00800134 	movhi	r2,4
   42be4:	109cf204 	addi	r2,r2,29640
   42be8:	20800015 	stw	r2,0(r4)
   42bec:	00c00044 	movi	r3,1
   42bf0:	d8c00115 	stw	r3,4(sp)
   42bf4:	01400134 	movhi	r5,4
   42bf8:	295cf904 	addi	r5,r5,29668
   42bfc:	01800134 	movhi	r6,4
   42c00:	318b5104 	addi	r6,r6,11588
   42c04:	0042f4c0 	call	42f4c <__cxa_throw>
   42c08:	d8800317 	ldw	r2,12(sp)
   42c0c:	00ffffc4 	movi	r3,-1
   42c10:	d9000217 	ldw	r4,8(sp)
   42c14:	10c00226 	beq	r2,r3,42c20 <_Znwm+0xf4>
   42c18:	d8c00115 	stw	r3,4(sp)
   42c1c:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   42c20:	00bfffc4 	movi	r2,-1
   42c24:	d8800115 	stw	r2,4(sp)
   42c28:	00423b00 	call	423b0 <__cxa_call_unexpected>

00042c2c <__cxa_call_terminate>:
   42c2c:	defffe04 	addi	sp,sp,-8
   42c30:	dc000015 	stw	r16,0(sp)
   42c34:	dfc00115 	stw	ra,4(sp)
   42c38:	2021883a 	mov	r16,r4
   42c3c:	20000626 	beq	r4,zero,42c58 <__cxa_call_terminate+0x2c>
   42c40:	00430ec0 	call	430ec <__cxa_begin_catch>
   42c44:	80c00017 	ldw	r3,0(r16)
   42c48:	0090caf4 	movhi	r2,17195
   42c4c:	108ac004 	addi	r2,r2,11008
   42c50:	81000117 	ldw	r4,4(r16)
   42c54:	18800126 	beq	r3,r2,42c5c <__cxa_call_terminate+0x30>
   42c58:	0042aec0 	call	42aec <_ZSt9terminatev>
   42c5c:	0091d3b4 	movhi	r2,18254
   42c60:	109550c4 	addi	r2,r2,21827
   42c64:	20bffc1e 	bne	r4,r2,42c58 <__cxa_call_terminate+0x2c>
   42c68:	813ff817 	ldw	r4,-32(r16)
   42c6c:	0042a480 	call	42a48 <_ZN10__cxxabiv111__terminateEPFvvE>

00042c70 <_ZNKSt9exception4whatEv>:
   42c70:	20800017 	ldw	r2,0(r4)
   42c74:	10ffff17 	ldw	r3,-4(r2)
   42c78:	18800117 	ldw	r2,4(r3)
   42c7c:	f800283a 	ret

00042c80 <_ZNSt9exceptionD0Ev>:
   42c80:	00800134 	movhi	r2,4
   42c84:	109ce104 	addi	r2,r2,29572
   42c88:	20800015 	stw	r2,0(r4)
   42c8c:	0041e181 	jmpi	41e18 <_ZdlPv>

00042c90 <_ZNSt9exceptionD1Ev>:
   42c90:	00800134 	movhi	r2,4
   42c94:	109ce104 	addi	r2,r2,29572
   42c98:	20800015 	stw	r2,0(r4)
   42c9c:	f800283a 	ret

00042ca0 <_ZNSt9exceptionD2Ev>:
   42ca0:	00800134 	movhi	r2,4
   42ca4:	109ce104 	addi	r2,r2,29572
   42ca8:	20800015 	stw	r2,0(r4)
   42cac:	f800283a 	ret

00042cb0 <_ZNSt13bad_exceptionD0Ev>:
   42cb0:	defffe04 	addi	sp,sp,-8
   42cb4:	00800134 	movhi	r2,4
   42cb8:	109cdc04 	addi	r2,r2,29552
   42cbc:	dc400015 	stw	r17,0(sp)
   42cc0:	20800015 	stw	r2,0(r4)
   42cc4:	2023883a 	mov	r17,r4
   42cc8:	dfc00115 	stw	ra,4(sp)
   42ccc:	0042ca00 	call	42ca0 <_ZNSt9exceptionD2Ev>
   42cd0:	8809883a 	mov	r4,r17
   42cd4:	dfc00117 	ldw	ra,4(sp)
   42cd8:	dc400017 	ldw	r17,0(sp)
   42cdc:	dec00204 	addi	sp,sp,8
   42ce0:	0041e181 	jmpi	41e18 <_ZdlPv>

00042ce4 <_ZNSt13bad_exceptionD1Ev>:
   42ce4:	00800134 	movhi	r2,4
   42ce8:	109cdc04 	addi	r2,r2,29552
   42cec:	20800015 	stw	r2,0(r4)
   42cf0:	0042ca01 	jmpi	42ca0 <_ZNSt9exceptionD2Ev>

00042cf4 <_ZNSt13bad_exceptionD2Ev>:
   42cf4:	00800134 	movhi	r2,4
   42cf8:	109cdc04 	addi	r2,r2,29552
   42cfc:	20800015 	stw	r2,0(r4)
   42d00:	0042ca01 	jmpi	42ca0 <_ZNSt9exceptionD2Ev>

00042d04 <_ZSt15set_new_handlerPFvvE>:
   42d04:	d0a1d317 	ldw	r2,-30900(gp)
   42d08:	d121d315 	stw	r4,-30900(gp)
   42d0c:	f800283a 	ret

00042d10 <_ZNSt9bad_allocD0Ev>:
   42d10:	defffe04 	addi	sp,sp,-8
   42d14:	00800134 	movhi	r2,4
   42d18:	109cf204 	addi	r2,r2,29640
   42d1c:	dc400015 	stw	r17,0(sp)
   42d20:	20800015 	stw	r2,0(r4)
   42d24:	2023883a 	mov	r17,r4
   42d28:	dfc00115 	stw	ra,4(sp)
   42d2c:	0042ca00 	call	42ca0 <_ZNSt9exceptionD2Ev>
   42d30:	8809883a 	mov	r4,r17
   42d34:	dfc00117 	ldw	ra,4(sp)
   42d38:	dc400017 	ldw	r17,0(sp)
   42d3c:	dec00204 	addi	sp,sp,8
   42d40:	0041e181 	jmpi	41e18 <_ZdlPv>

00042d44 <_ZNSt9bad_allocD1Ev>:
   42d44:	00800134 	movhi	r2,4
   42d48:	109cf204 	addi	r2,r2,29640
   42d4c:	20800015 	stw	r2,0(r4)
   42d50:	0042ca01 	jmpi	42ca0 <_ZNSt9exceptionD2Ev>

00042d54 <_ZNSt9bad_allocD2Ev>:
   42d54:	00800134 	movhi	r2,4
   42d58:	109cf204 	addi	r2,r2,29640
   42d5c:	20800015 	stw	r2,0(r4)
   42d60:	0042ca01 	jmpi	42ca0 <_ZNSt9exceptionD2Ev>

00042d64 <__cxa_free_exception>:
   42d64:	2007883a 	mov	r3,r4
   42d68:	00800174 	movhi	r2,5
   42d6c:	10a10b04 	addi	r2,r2,-31700
   42d70:	213ff004 	addi	r4,r4,-64
   42d74:	11420004 	addi	r5,r2,2048
   42d78:	18800336 	bltu	r3,r2,42d88 <__cxa_free_exception+0x24>
   42d7c:	1885c83a 	sub	r2,r3,r2
   42d80:	1004d27a 	srli	r2,r2,9
   42d84:	19400136 	bltu	r3,r5,42d8c <__cxa_free_exception+0x28>
   42d88:	00451f81 	jmpi	451f8 <free>
   42d8c:	00ffff84 	movi	r3,-2
   42d90:	1886183a 	rol	r3,r3,r2
   42d94:	d0a1d417 	ldw	r2,-30896(gp)
   42d98:	10c4703a 	and	r2,r2,r3
   42d9c:	d0a1d415 	stw	r2,-30896(gp)
   42da0:	f800283a 	ret

00042da4 <__cxa_allocate_exception>:
   42da4:	deffed04 	addi	sp,sp,-76
   42da8:	00800134 	movhi	r2,4
   42dac:	10894c04 	addi	r2,r2,9520
   42db0:	21001004 	addi	r4,r4,64
   42db4:	00c00134 	movhi	r3,4
   42db8:	18dcac04 	addi	r3,r3,29360
   42dbc:	d8800615 	stw	r2,24(sp)
   42dc0:	d9000d15 	stw	r4,52(sp)
   42dc4:	00800134 	movhi	r2,4
   42dc8:	108bad04 	addi	r2,r2,11956
   42dcc:	d809883a 	mov	r4,sp
   42dd0:	dfc01215 	stw	ra,72(sp)
   42dd4:	d8c00715 	stw	r3,28(sp)
   42dd8:	d8800915 	stw	r2,36(sp)
   42ddc:	df001115 	stw	fp,68(sp)
   42de0:	ddc01015 	stw	r23,64(sp)
   42de4:	dec00815 	stw	sp,32(sp)
   42de8:	dec00a15 	stw	sp,40(sp)
   42dec:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   42df0:	d9000d17 	ldw	r4,52(sp)
   42df4:	004520c0 	call	4520c <malloc>
   42df8:	d8800e15 	stw	r2,56(sp)
   42dfc:	1000171e 	bne	r2,zero,42e5c <__cxa_allocate_exception+0xb8>
   42e00:	d8c00d17 	ldw	r3,52(sp)
   42e04:	00808004 	movi	r2,512
   42e08:	d1e1d417 	ldw	r7,-30896(gp)
   42e0c:	10c02636 	bltu	r2,r3,42ea8 <__cxa_allocate_exception+0x104>
   42e10:	3807883a 	mov	r3,r7
   42e14:	01400044 	movi	r5,1
   42e18:	1944703a 	and	r2,r3,r5
   42e1c:	0009883a 	mov	r4,zero
   42e20:	01800104 	movi	r6,4
   42e24:	10000526 	beq	r2,zero,42e3c <__cxa_allocate_exception+0x98>
   42e28:	2149883a 	add	r4,r4,r5
   42e2c:	21801e26 	beq	r4,r6,42ea8 <__cxa_allocate_exception+0x104>
   42e30:	1806d07a 	srli	r3,r3,1
   42e34:	1944703a 	and	r2,r3,r5
   42e38:	103ffb1e 	bne	r2,zero,42e28 <__cxa_allocate_exception+0x84>
   42e3c:	2904983a 	sll	r2,r5,r4
   42e40:	2008927a 	slli	r4,r4,9
   42e44:	00c00174 	movhi	r3,5
   42e48:	18e10b04 	addi	r3,r3,-31700
   42e4c:	3884b03a 	or	r2,r7,r2
   42e50:	20c9883a 	add	r4,r4,r3
   42e54:	d9000e15 	stw	r4,56(sp)
   42e58:	d0a1d415 	stw	r2,-30896(gp)
   42e5c:	0042a180 	call	42a18 <__cxa_get_globals>
   42e60:	10c00117 	ldw	r3,4(r2)
   42e64:	d9000e17 	ldw	r4,56(sp)
   42e68:	000b883a 	mov	r5,zero
   42e6c:	18c00044 	addi	r3,r3,1
   42e70:	10c00115 	stw	r3,4(r2)
   42e74:	01801004 	movi	r6,64
   42e78:	00459600 	call	45960 <memset>
   42e7c:	d8800e17 	ldw	r2,56(sp)
   42e80:	d809883a 	mov	r4,sp
   42e84:	10801004 	addi	r2,r2,64
   42e88:	d8800f15 	stw	r2,60(sp)
   42e8c:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   42e90:	d8800f17 	ldw	r2,60(sp)
   42e94:	dfc01217 	ldw	ra,72(sp)
   42e98:	df001117 	ldw	fp,68(sp)
   42e9c:	ddc01017 	ldw	r23,64(sp)
   42ea0:	dec01304 	addi	sp,sp,76
   42ea4:	f800283a 	ret
   42ea8:	00800044 	movi	r2,1
   42eac:	d8800115 	stw	r2,4(sp)
   42eb0:	0042aec0 	call	42aec <_ZSt9terminatev>
   42eb4:	d8800317 	ldw	r2,12(sp)
   42eb8:	00ffffc4 	movi	r3,-1
   42ebc:	d9000217 	ldw	r4,8(sp)
   42ec0:	10c00226 	beq	r2,r3,42ecc <__cxa_allocate_exception+0x128>
   42ec4:	d8c00115 	stw	r3,4(sp)
   42ec8:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   42ecc:	00bfffc4 	movi	r2,-1
   42ed0:	d8800115 	stw	r2,4(sp)
   42ed4:	00423b00 	call	423b0 <__cxa_call_unexpected>

00042ed8 <__cxa_rethrow>:
   42ed8:	defffe04 	addi	sp,sp,-8
   42edc:	dc400015 	stw	r17,0(sp)
   42ee0:	dfc00115 	stw	ra,4(sp)
   42ee4:	0042a180 	call	42a18 <__cxa_get_globals>
   42ee8:	100b883a 	mov	r5,r2
   42eec:	10800117 	ldw	r2,4(r2)
   42ef0:	2c400017 	ldw	r17,0(r5)
   42ef4:	10800044 	addi	r2,r2,1
   42ef8:	28800115 	stw	r2,4(r5)
   42efc:	88000b26 	beq	r17,zero,42f2c <__cxa_rethrow+0x54>
   42f00:	88c00b17 	ldw	r3,44(r17)
   42f04:	0090caf4 	movhi	r2,17195
   42f08:	108ac004 	addi	r2,r2,11008
   42f0c:	89000c17 	ldw	r4,48(r17)
   42f10:	18800726 	beq	r3,r2,42f30 <__cxa_rethrow+0x58>
   42f14:	28000015 	stw	zero,0(r5)
   42f18:	8c400b04 	addi	r17,r17,44
   42f1c:	8809883a 	mov	r4,r17
   42f20:	004489c0 	call	4489c <_Unwind_SjLj_Resume_or_Rethrow>
   42f24:	8809883a 	mov	r4,r17
   42f28:	00430ec0 	call	430ec <__cxa_begin_catch>
   42f2c:	0042aec0 	call	42aec <_ZSt9terminatev>
   42f30:	0091d3b4 	movhi	r2,18254
   42f34:	109550c4 	addi	r2,r2,21827
   42f38:	20bff61e 	bne	r4,r2,42f14 <__cxa_rethrow+0x3c>
   42f3c:	88800517 	ldw	r2,20(r17)
   42f40:	0085c83a 	sub	r2,zero,r2
   42f44:	88800515 	stw	r2,20(r17)
   42f48:	003ff306 	br	42f18 <__cxa_rethrow+0x40>

00042f4c <__cxa_throw>:
   42f4c:	00800134 	movhi	r2,4
   42f50:	109f2b04 	addi	r2,r2,31916
   42f54:	00c00134 	movhi	r3,4
   42f58:	18df2a04 	addi	r3,r3,31912
   42f5c:	12000017 	ldw	r8,0(r2)
   42f60:	19c00017 	ldw	r7,0(r3)
   42f64:	defffe04 	addi	sp,sp,-8
   42f68:	213ff004 	addi	r4,r4,-64
   42f6c:	dfc00115 	stw	ra,4(sp)
   42f70:	dc400015 	stw	r17,0(sp)
   42f74:	0090caf4 	movhi	r2,17195
   42f78:	108ac004 	addi	r2,r2,11008
   42f7c:	20800b15 	stw	r2,44(r4)
   42f80:	00d1d3b4 	movhi	r3,18254
   42f84:	18d550c4 	addi	r3,r3,21827
   42f88:	24400b04 	addi	r17,r4,44
   42f8c:	00800134 	movhi	r2,4
   42f90:	108bf004 	addi	r2,r2,12224
   42f94:	21400015 	stw	r5,0(r4)
   42f98:	21800115 	stw	r6,4(r4)
   42f9c:	22000215 	stw	r8,8(r4)
   42fa0:	21c00315 	stw	r7,12(r4)
   42fa4:	20c00c15 	stw	r3,48(r4)
   42fa8:	20800d15 	stw	r2,52(r4)
   42fac:	8809883a 	mov	r4,r17
   42fb0:	00446d40 	call	446d4 <_Unwind_SjLj_RaiseException>
   42fb4:	8809883a 	mov	r4,r17
   42fb8:	00430ec0 	call	430ec <__cxa_begin_catch>
   42fbc:	0042aec0 	call	42aec <_ZSt9terminatev>

00042fc0 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   42fc0:	defffe04 	addi	sp,sp,-8
   42fc4:	00800044 	movi	r2,1
   42fc8:	dfc00115 	stw	ra,4(sp)
   42fcc:	dc000015 	stw	r16,0(sp)
   42fd0:	28fff504 	addi	r3,r5,-44
   42fd4:	11001036 	bltu	r2,r4,43018 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
   42fd8:	18800117 	ldw	r2,4(r3)
   42fdc:	10000826 	beq	r2,zero,43000 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
   42fe0:	2c000504 	addi	r16,r5,20
   42fe4:	8009883a 	mov	r4,r16
   42fe8:	103ee83a 	callr	r2
   42fec:	8009883a 	mov	r4,r16
   42ff0:	dfc00117 	ldw	ra,4(sp)
   42ff4:	dc000017 	ldw	r16,0(sp)
   42ff8:	dec00204 	addi	sp,sp,8
   42ffc:	0042d641 	jmpi	42d64 <__cxa_free_exception>
   43000:	2c000504 	addi	r16,r5,20
   43004:	8009883a 	mov	r4,r16
   43008:	dfc00117 	ldw	ra,4(sp)
   4300c:	dc000017 	ldw	r16,0(sp)
   43010:	dec00204 	addi	sp,sp,8
   43014:	0042d641 	jmpi	42d64 <__cxa_free_exception>
   43018:	19000317 	ldw	r4,12(r3)
   4301c:	0042a480 	call	42a48 <_ZN10__cxxabiv111__terminateEPFvvE>

00043020 <__cxa_get_exception_ptr>:
   43020:	20bfff17 	ldw	r2,-4(r4)
   43024:	f800283a 	ret

00043028 <_ZSt18uncaught_exceptionv>:
   43028:	deffff04 	addi	sp,sp,-4
   4302c:	dfc00015 	stw	ra,0(sp)
   43030:	0042a180 	call	42a18 <__cxa_get_globals>
   43034:	10800117 	ldw	r2,4(r2)
   43038:	1004c03a 	cmpne	r2,r2,zero
   4303c:	dfc00017 	ldw	ra,0(sp)
   43040:	dec00104 	addi	sp,sp,4
   43044:	f800283a 	ret

00043048 <__cxa_end_catch>:
   43048:	deffff04 	addi	sp,sp,-4
   4304c:	dfc00015 	stw	ra,0(sp)
   43050:	0042a100 	call	42a10 <__cxa_get_globals_fast>
   43054:	11000017 	ldw	r4,0(r2)
   43058:	1007883a 	mov	r3,r2
   4305c:	20001326 	beq	r4,zero,430ac <__cxa_end_catch+0x64>
   43060:	21400b17 	ldw	r5,44(r4)
   43064:	0090caf4 	movhi	r2,17195
   43068:	108ac004 	addi	r2,r2,11008
   4306c:	21800c17 	ldw	r6,48(r4)
   43070:	28800526 	beq	r5,r2,43088 <__cxa_end_catch+0x40>
   43074:	21000b04 	addi	r4,r4,44
   43078:	18000015 	stw	zero,0(r3)
   4307c:	dfc00017 	ldw	ra,0(sp)
   43080:	dec00104 	addi	sp,sp,4
   43084:	004456c1 	jmpi	4456c <_Unwind_DeleteException>
   43088:	0091d3b4 	movhi	r2,18254
   4308c:	109550c4 	addi	r2,r2,21827
   43090:	30bff81e 	bne	r6,r2,43074 <__cxa_end_catch+0x2c>
   43094:	20800517 	ldw	r2,20(r4)
   43098:	10000e16 	blt	r2,zero,430d4 <__cxa_end_catch+0x8c>
   4309c:	117fffc4 	addi	r5,r2,-1
   430a0:	28000526 	beq	r5,zero,430b8 <__cxa_end_catch+0x70>
   430a4:	28000a16 	blt	r5,zero,430d0 <__cxa_end_catch+0x88>
   430a8:	21400515 	stw	r5,20(r4)
   430ac:	dfc00017 	ldw	ra,0(sp)
   430b0:	dec00104 	addi	sp,sp,4
   430b4:	f800283a 	ret
   430b8:	20800417 	ldw	r2,16(r4)
   430bc:	21000b04 	addi	r4,r4,44
   430c0:	18800015 	stw	r2,0(r3)
   430c4:	dfc00017 	ldw	ra,0(sp)
   430c8:	dec00104 	addi	sp,sp,4
   430cc:	004456c1 	jmpi	4456c <_Unwind_DeleteException>
   430d0:	0042aec0 	call	42aec <_ZSt9terminatev>
   430d4:	11400044 	addi	r5,r2,1
   430d8:	283ff31e 	bne	r5,zero,430a8 <__cxa_end_catch+0x60>
   430dc:	20800417 	ldw	r2,16(r4)
   430e0:	21400515 	stw	r5,20(r4)
   430e4:	18800015 	stw	r2,0(r3)
   430e8:	003ff006 	br	430ac <__cxa_end_catch+0x64>

000430ec <__cxa_begin_catch>:
   430ec:	deffee04 	addi	sp,sp,-72
   430f0:	00800134 	movhi	r2,4
   430f4:	10894c04 	addi	r2,r2,9520
   430f8:	00c00134 	movhi	r3,4
   430fc:	18dcb004 	addi	r3,r3,29376
   43100:	d8800615 	stw	r2,24(sp)
   43104:	d9000e15 	stw	r4,56(sp)
   43108:	00800134 	movhi	r2,4
   4310c:	108c7804 	addi	r2,r2,12768
   43110:	d809883a 	mov	r4,sp
   43114:	d8c00715 	stw	r3,28(sp)
   43118:	dfc01115 	stw	ra,68(sp)
   4311c:	d8800915 	stw	r2,36(sp)
   43120:	df001015 	stw	fp,64(sp)
   43124:	ddc00f15 	stw	r23,60(sp)
   43128:	dec00815 	stw	sp,32(sp)
   4312c:	dec00a15 	stw	sp,40(sp)
   43130:	00443ac0 	call	443ac <_Unwind_SjLj_Register>
   43134:	0042a180 	call	42a18 <__cxa_get_globals>
   43138:	100d883a 	mov	r6,r2
   4313c:	d8800e17 	ldw	r2,56(sp)
   43140:	31c00017 	ldw	r7,0(r6)
   43144:	117ff504 	addi	r5,r2,-44
   43148:	28c00b17 	ldw	r3,44(r5)
   4314c:	0090caf4 	movhi	r2,17195
   43150:	108ac004 	addi	r2,r2,11008
   43154:	29000c17 	ldw	r4,48(r5)
   43158:	18800b26 	beq	r3,r2,43188 <__cxa_begin_catch+0x9c>
   4315c:	38001d1e 	bne	r7,zero,431d4 <__cxa_begin_catch+0xe8>
   43160:	d8000d15 	stw	zero,52(sp)
   43164:	31400015 	stw	r5,0(r6)
   43168:	d809883a 	mov	r4,sp
   4316c:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   43170:	d8800d17 	ldw	r2,52(sp)
   43174:	dfc01117 	ldw	ra,68(sp)
   43178:	df001017 	ldw	fp,64(sp)
   4317c:	ddc00f17 	ldw	r23,60(sp)
   43180:	dec01204 	addi	sp,sp,72
   43184:	f800283a 	ret
   43188:	0091d3b4 	movhi	r2,18254
   4318c:	109550c4 	addi	r2,r2,21827
   43190:	20bff21e 	bne	r4,r2,4315c <__cxa_begin_catch+0x70>
   43194:	28c00517 	ldw	r3,20(r5)
   43198:	18000b16 	blt	r3,zero,431c8 <__cxa_begin_catch+0xdc>
   4319c:	18800044 	addi	r2,r3,1
   431a0:	28800515 	stw	r2,20(r5)
   431a4:	30800117 	ldw	r2,4(r6)
   431a8:	10bfffc4 	addi	r2,r2,-1
   431ac:	30800115 	stw	r2,4(r6)
   431b0:	39400226 	beq	r7,r5,431bc <__cxa_begin_catch+0xd0>
   431b4:	29c00415 	stw	r7,16(r5)
   431b8:	31400015 	stw	r5,0(r6)
   431bc:	29400a17 	ldw	r5,40(r5)
   431c0:	d9400d15 	stw	r5,52(sp)
   431c4:	003fe806 	br	43168 <__cxa_begin_catch+0x7c>
   431c8:	00800044 	movi	r2,1
   431cc:	10c5c83a 	sub	r2,r2,r3
   431d0:	003ff306 	br	431a0 <__cxa_begin_catch+0xb4>
   431d4:	00800044 	movi	r2,1
   431d8:	d8800115 	stw	r2,4(sp)
   431dc:	0042aec0 	call	42aec <_ZSt9terminatev>
   431e0:	d8800317 	ldw	r2,12(sp)
   431e4:	00ffffc4 	movi	r3,-1
   431e8:	d9000217 	ldw	r4,8(sp)
   431ec:	10c00226 	beq	r2,r3,431f8 <__cxa_begin_catch+0x10c>
   431f0:	d8c00115 	stw	r3,4(sp)
   431f4:	00446780 	call	44678 <_Unwind_SjLj_Resume>
   431f8:	00bfffc4 	movi	r2,-1
   431fc:	d8800115 	stw	r2,4(sp)
   43200:	00423b00 	call	423b0 <__cxa_call_unexpected>

00043204 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   43204:	20c00017 	ldw	r3,0(r4)
   43208:	defffa04 	addi	sp,sp,-24
   4320c:	dc000415 	stw	r16,16(sp)
   43210:	1a000617 	ldw	r8,24(r3)
   43214:	3021883a 	mov	r16,r6
   43218:	31800017 	ldw	r6,0(r6)
   4321c:	00800404 	movi	r2,16
   43220:	dfc00515 	stw	ra,20(sp)
   43224:	d8800215 	stw	r2,8(sp)
   43228:	d8000015 	stw	zero,0(sp)
   4322c:	d8000115 	stw	zero,4(sp)
   43230:	d8000315 	stw	zero,12(sp)
   43234:	d80f883a 	mov	r7,sp
   43238:	403ee83a 	callr	r8
   4323c:	d8800117 	ldw	r2,4(sp)
   43240:	00c00184 	movi	r3,6
   43244:	0009883a 	mov	r4,zero
   43248:	1080018c 	andi	r2,r2,6
   4324c:	10c0031e 	bne	r2,r3,4325c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
   43250:	d8800017 	ldw	r2,0(sp)
   43254:	01000044 	movi	r4,1
   43258:	80800015 	stw	r2,0(r16)
   4325c:	2005883a 	mov	r2,r4
   43260:	dfc00517 	ldw	ra,20(sp)
   43264:	dc000417 	ldw	r16,16(sp)
   43268:	dec00604 	addi	sp,sp,24
   4326c:	f800283a 	ret

00043270 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   43270:	d8800017 	ldw	r2,0(sp)
   43274:	00c00184 	movi	r3,6
   43278:	1180021e 	bne	r2,r6,43284 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
   4327c:	1805883a 	mov	r2,r3
   43280:	f800283a 	ret
   43284:	00c00044 	movi	r3,1
   43288:	1805883a 	mov	r2,r3
   4328c:	f800283a 	ret

00043290 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   43290:	defffe04 	addi	sp,sp,-8
   43294:	00800134 	movhi	r2,4
   43298:	109cfe04 	addi	r2,r2,29688
   4329c:	dc400015 	stw	r17,0(sp)
   432a0:	20800015 	stw	r2,0(r4)
   432a4:	2023883a 	mov	r17,r4
   432a8:	dfc00115 	stw	ra,4(sp)
   432ac:	00435d00 	call	435d0 <_ZNSt9type_infoD2Ev>
   432b0:	8809883a 	mov	r4,r17
   432b4:	dfc00117 	ldw	ra,4(sp)
   432b8:	dc400017 	ldw	r17,0(sp)
   432bc:	dec00204 	addi	sp,sp,8
   432c0:	0041e181 	jmpi	41e18 <_ZdlPv>

000432c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   432c4:	00800134 	movhi	r2,4
   432c8:	109cfe04 	addi	r2,r2,29688
   432cc:	20800015 	stw	r2,0(r4)
   432d0:	00435d01 	jmpi	435d0 <_ZNSt9type_infoD2Ev>

000432d4 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   432d4:	00800134 	movhi	r2,4
   432d8:	109cfe04 	addi	r2,r2,29688
   432dc:	20800015 	stw	r2,0(r4)
   432e0:	00435d01 	jmpi	435d0 <_ZNSt9type_infoD2Ev>

000432e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   432e4:	2811883a 	mov	r8,r5
   432e8:	20c00117 	ldw	r3,4(r4)
   432ec:	40800117 	ldw	r2,4(r8)
   432f0:	deffff04 	addi	sp,sp,-4
   432f4:	dfc00015 	stw	ra,0(sp)
   432f8:	200b883a 	mov	r5,r4
   432fc:	02400044 	movi	r9,1
   43300:	18800426 	beq	r3,r2,43314 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
   43304:	008000c4 	movi	r2,3
   43308:	4009883a 	mov	r4,r8
   4330c:	0013883a 	mov	r9,zero
   43310:	11c0042e 	bgeu	r2,r7,43324 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
   43314:	4805883a 	mov	r2,r9
   43318:	dfc00017 	ldw	ra,0(sp)
   4331c:	dec00104 	addi	sp,sp,4
   43320:	f800283a 	ret
   43324:	40800017 	ldw	r2,0(r8)
   43328:	10c00517 	ldw	r3,20(r2)
   4332c:	183ee83a 	callr	r3
   43330:	12403fcc 	andi	r9,r2,255
   43334:	4805883a 	mov	r2,r9
   43338:	dfc00017 	ldw	ra,0(sp)
   4333c:	dec00104 	addi	sp,sp,4
   43340:	f800283a 	ret

00043344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   43344:	20c00117 	ldw	r3,4(r4)
   43348:	28800117 	ldw	r2,4(r5)
   4334c:	0009883a 	mov	r4,zero
   43350:	1880061e 	bne	r3,r2,4336c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
   43354:	00800184 	movi	r2,6
   43358:	38800115 	stw	r2,4(r7)
   4335c:	00800204 	movi	r2,8
   43360:	39800015 	stw	r6,0(r7)
   43364:	38800315 	stw	r2,12(r7)
   43368:	01000044 	movi	r4,1
   4336c:	2005883a 	mov	r2,r4
   43370:	f800283a 	ret

00043374 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   43374:	da000017 	ldw	r8,0(sp)
   43378:	d8800217 	ldw	r2,8(sp)
   4337c:	d9400317 	ldw	r5,12(sp)
   43380:	40800926 	beq	r8,r2,433a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
   43384:	21000117 	ldw	r4,4(r4)
   43388:	38800117 	ldw	r2,4(r7)
   4338c:	2080041e 	bne	r4,r2,433a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
   43390:	00800044 	movi	r2,1
   43394:	28800315 	stw	r2,12(r5)
   43398:	2a000015 	stw	r8,0(r5)
   4339c:	29800115 	stw	r6,4(r5)
   433a0:	0005883a 	mov	r2,zero
   433a4:	f800283a 	ret
   433a8:	d8800117 	ldw	r2,4(sp)
   433ac:	21000117 	ldw	r4,4(r4)
   433b0:	10c00117 	ldw	r3,4(r2)
   433b4:	20fff41e 	bne	r4,r3,43388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   433b8:	29800215 	stw	r6,8(r5)
   433bc:	003ff806 	br	433a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

000433c0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   433c0:	defffb04 	addi	sp,sp,-20
   433c4:	dd400315 	stw	r21,12(sp)
   433c8:	dcc00215 	stw	r19,8(sp)
   433cc:	dc400115 	stw	r17,4(sp)
   433d0:	dc000015 	stw	r16,0(sp)
   433d4:	2823883a 	mov	r17,r5
   433d8:	3027883a 	mov	r19,r6
   433dc:	382b883a 	mov	r21,r7
   433e0:	dfc00415 	stw	ra,16(sp)
   433e4:	2021883a 	mov	r16,r4
   433e8:	00433440 	call	43344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   433ec:	10803fcc 	andi	r2,r2,255
   433f0:	880b883a 	mov	r5,r17
   433f4:	980d883a 	mov	r6,r19
   433f8:	a80f883a 	mov	r7,r21
   433fc:	00c00044 	movi	r3,1
   43400:	1000051e 	bne	r2,zero,43418 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
   43404:	81000217 	ldw	r4,8(r16)
   43408:	20800017 	ldw	r2,0(r4)
   4340c:	10c00617 	ldw	r3,24(r2)
   43410:	183ee83a 	callr	r3
   43414:	10c03fcc 	andi	r3,r2,255
   43418:	1805883a 	mov	r2,r3
   4341c:	dfc00417 	ldw	ra,16(sp)
   43420:	dd400317 	ldw	r21,12(sp)
   43424:	dcc00217 	ldw	r19,8(sp)
   43428:	dc400117 	ldw	r17,4(sp)
   4342c:	dc000017 	ldw	r16,0(sp)
   43430:	dec00504 	addi	sp,sp,20
   43434:	f800283a 	ret

00043438 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   43438:	defffe04 	addi	sp,sp,-8
   4343c:	00800134 	movhi	r2,4
   43440:	109d1504 	addi	r2,r2,29780
   43444:	dc400015 	stw	r17,0(sp)
   43448:	20800015 	stw	r2,0(r4)
   4344c:	2023883a 	mov	r17,r4
   43450:	dfc00115 	stw	ra,4(sp)
   43454:	00432d40 	call	432d4 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   43458:	8809883a 	mov	r4,r17
   4345c:	dfc00117 	ldw	ra,4(sp)
   43460:	dc400017 	ldw	r17,0(sp)
   43464:	dec00204 	addi	sp,sp,8
   43468:	0041e181 	jmpi	41e18 <_ZdlPv>

0004346c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   4346c:	00800134 	movhi	r2,4
   43470:	109d1504 	addi	r2,r2,29780
   43474:	20800015 	stw	r2,0(r4)
   43478:	00432d41 	jmpi	432d4 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0004347c <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   4347c:	00800134 	movhi	r2,4
   43480:	109d1504 	addi	r2,r2,29780
   43484:	20800015 	stw	r2,0(r4)
   43488:	00432d41 	jmpi	432d4 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0004348c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   4348c:	da400017 	ldw	r9,0(sp)
   43490:	2011883a 	mov	r8,r4
   43494:	49800526 	beq	r9,r6,434ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
   43498:	41000217 	ldw	r4,8(r8)
   4349c:	20800017 	ldw	r2,0(r4)
   434a0:	da400015 	stw	r9,0(sp)
   434a4:	10c00817 	ldw	r3,32(r2)
   434a8:	1800683a 	jmp	r3
   434ac:	39000117 	ldw	r4,4(r7)
   434b0:	40c00117 	ldw	r3,4(r8)
   434b4:	00800184 	movi	r2,6
   434b8:	193ff71e 	bne	r3,r4,43498 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
   434bc:	f800283a 	ret

000434c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   434c0:	20c00117 	ldw	r3,4(r4)
   434c4:	38800117 	ldw	r2,4(r7)
   434c8:	defffb04 	addi	sp,sp,-20
   434cc:	dfc00415 	stw	ra,16(sp)
   434d0:	da000517 	ldw	r8,20(sp)
   434d4:	dac00617 	ldw	r11,24(sp)
   434d8:	da400717 	ldw	r9,28(sp)
   434dc:	da800817 	ldw	r10,32(sp)
   434e0:	18800c1e 	bne	r3,r2,43514 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   434e4:	51800115 	stw	r6,4(r10)
   434e8:	52000015 	stw	r8,0(r10)
   434ec:	28001c16 	blt	r5,zero,43560 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
   434f0:	4145883a 	add	r2,r8,r5
   434f4:	48801e26 	beq	r9,r2,43570 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
   434f8:	00800044 	movi	r2,1
   434fc:	0007883a 	mov	r3,zero
   43500:	50800315 	stw	r2,12(r10)
   43504:	1805883a 	mov	r2,r3
   43508:	dfc00417 	ldw	ra,16(sp)
   4350c:	dec00504 	addi	sp,sp,20
   43510:	f800283a 	ret
   43514:	42400d26 	beq	r8,r9,4354c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
   43518:	21000217 	ldw	r4,8(r4)
   4351c:	20800017 	ldw	r2,0(r4)
   43520:	da000015 	stw	r8,0(sp)
   43524:	dac00115 	stw	r11,4(sp)
   43528:	da400215 	stw	r9,8(sp)
   4352c:	da800315 	stw	r10,12(sp)
   43530:	10c00717 	ldw	r3,28(r2)
   43534:	183ee83a 	callr	r3
   43538:	10c03fcc 	andi	r3,r2,255
   4353c:	1805883a 	mov	r2,r3
   43540:	dfc00417 	ldw	ra,16(sp)
   43544:	dec00504 	addi	sp,sp,20
   43548:	f800283a 	ret
   4354c:	58800117 	ldw	r2,4(r11)
   43550:	18bff11e 	bne	r3,r2,43518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
   43554:	0007883a 	mov	r3,zero
   43558:	51800215 	stw	r6,8(r10)
   4355c:	003fe906 	br	43504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43560:	00bfff84 	movi	r2,-2
   43564:	28800426 	beq	r5,r2,43578 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
   43568:	0007883a 	mov	r3,zero
   4356c:	003fe506 	br	43504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43570:	00800184 	movi	r2,6
   43574:	003fe106 	br	434fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
   43578:	00800044 	movi	r2,1
   4357c:	0007883a 	mov	r3,zero
   43580:	50800315 	stw	r2,12(r10)
   43584:	003fdf06 	br	43504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

00043588 <_ZNKSt9type_info14__is_pointer_pEv>:
   43588:	0005883a 	mov	r2,zero
   4358c:	f800283a 	ret

00043590 <_ZNKSt9type_info15__is_function_pEv>:
   43590:	0005883a 	mov	r2,zero
   43594:	f800283a 	ret

00043598 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   43598:	20c00117 	ldw	r3,4(r4)
   4359c:	28800117 	ldw	r2,4(r5)
   435a0:	1885003a 	cmpeq	r2,r3,r2
   435a4:	f800283a 	ret

000435a8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   435a8:	0005883a 	mov	r2,zero
   435ac:	f800283a 	ret

000435b0 <_ZNSt9type_infoD0Ev>:
   435b0:	00800134 	movhi	r2,4
   435b4:	109d2d04 	addi	r2,r2,29876
   435b8:	20800015 	stw	r2,0(r4)
   435bc:	0041e181 	jmpi	41e18 <_ZdlPv>

000435c0 <_ZNSt9type_infoD1Ev>:
   435c0:	00800134 	movhi	r2,4
   435c4:	109d2d04 	addi	r2,r2,29876
   435c8:	20800015 	stw	r2,0(r4)
   435cc:	f800283a 	ret

000435d0 <_ZNSt9type_infoD2Ev>:
   435d0:	00800134 	movhi	r2,4
   435d4:	109d2d04 	addi	r2,r2,29876
   435d8:	20800015 	stw	r2,0(r4)
   435dc:	f800283a 	ret

000435e0 <_fpadd_parts>:
   435e0:	21c00017 	ldw	r7,0(r4)
   435e4:	02000044 	movi	r8,1
   435e8:	41c0332e 	bgeu	r8,r7,436b8 <_fpadd_parts+0xd8>
   435ec:	28800017 	ldw	r2,0(r5)
   435f0:	4080462e 	bgeu	r8,r2,4370c <_fpadd_parts+0x12c>
   435f4:	00c00104 	movi	r3,4
   435f8:	38c06b26 	beq	r7,r3,437a8 <_fpadd_parts+0x1c8>
   435fc:	10c04326 	beq	r2,r3,4370c <_fpadd_parts+0x12c>
   43600:	00c00084 	movi	r3,2
   43604:	10c02e26 	beq	r2,r3,436c0 <_fpadd_parts+0xe0>
   43608:	38c04026 	beq	r7,r3,4370c <_fpadd_parts+0x12c>
   4360c:	22800217 	ldw	r10,8(r4)
   43610:	28c00217 	ldw	r3,8(r5)
   43614:	23000317 	ldw	r12,12(r4)
   43618:	2a400317 	ldw	r9,12(r5)
   4361c:	50cfc83a 	sub	r7,r10,r3
   43620:	3817883a 	mov	r11,r7
   43624:	38004f16 	blt	r7,zero,43764 <_fpadd_parts+0x184>
   43628:	008007c4 	movi	r2,31
   4362c:	11c03316 	blt	r2,r7,436fc <_fpadd_parts+0x11c>
   43630:	02c0540e 	bge	zero,r11,43784 <_fpadd_parts+0x1a4>
   43634:	41c4983a 	sll	r2,r8,r7
   43638:	49c6d83a 	srl	r3,r9,r7
   4363c:	10bfffc4 	addi	r2,r2,-1
   43640:	4884703a 	and	r2,r9,r2
   43644:	1004c03a 	cmpne	r2,r2,zero
   43648:	1892b03a 	or	r9,r3,r2
   4364c:	20c00117 	ldw	r3,4(r4)
   43650:	28800117 	ldw	r2,4(r5)
   43654:	18803c26 	beq	r3,r2,43748 <_fpadd_parts+0x168>
   43658:	18002f26 	beq	r3,zero,43718 <_fpadd_parts+0x138>
   4365c:	4b05c83a 	sub	r2,r9,r12
   43660:	10004216 	blt	r2,zero,4376c <_fpadd_parts+0x18c>
   43664:	32800215 	stw	r10,8(r6)
   43668:	30800315 	stw	r2,12(r6)
   4366c:	30000115 	stw	zero,4(r6)
   43670:	31000317 	ldw	r4,12(r6)
   43674:	01d00034 	movhi	r7,16384
   43678:	39ffff84 	addi	r7,r7,-2
   4367c:	20bfffc4 	addi	r2,r4,-1
   43680:	2007883a 	mov	r3,r4
   43684:	38800836 	bltu	r7,r2,436a8 <_fpadd_parts+0xc8>
   43688:	31400217 	ldw	r5,8(r6)
   4368c:	18c9883a 	add	r4,r3,r3
   43690:	20bfffc4 	addi	r2,r4,-1
   43694:	297fffc4 	addi	r5,r5,-1
   43698:	2007883a 	mov	r3,r4
   4369c:	38bffb2e 	bgeu	r7,r2,4368c <_fpadd_parts+0xac>
   436a0:	31400215 	stw	r5,8(r6)
   436a4:	31000315 	stw	r4,12(r6)
   436a8:	008000c4 	movi	r2,3
   436ac:	30800015 	stw	r2,0(r6)
   436b0:	20001b16 	blt	r4,zero,43720 <_fpadd_parts+0x140>
   436b4:	3009883a 	mov	r4,r6
   436b8:	2005883a 	mov	r2,r4
   436bc:	f800283a 	ret
   436c0:	38fffd1e 	bne	r7,r3,436b8 <_fpadd_parts+0xd8>
   436c4:	31c00015 	stw	r7,0(r6)
   436c8:	20800117 	ldw	r2,4(r4)
   436cc:	30800115 	stw	r2,4(r6)
   436d0:	20c00217 	ldw	r3,8(r4)
   436d4:	30c00215 	stw	r3,8(r6)
   436d8:	20800317 	ldw	r2,12(r4)
   436dc:	30800315 	stw	r2,12(r6)
   436e0:	20c00117 	ldw	r3,4(r4)
   436e4:	28800117 	ldw	r2,4(r5)
   436e8:	3009883a 	mov	r4,r6
   436ec:	1886703a 	and	r3,r3,r2
   436f0:	2005883a 	mov	r2,r4
   436f4:	30c00115 	stw	r3,4(r6)
   436f8:	f800283a 	ret
   436fc:	1a801716 	blt	r3,r10,4375c <_fpadd_parts+0x17c>
   43700:	1815883a 	mov	r10,r3
   43704:	0019883a 	mov	r12,zero
   43708:	003fd006 	br	4364c <_fpadd_parts+0x6c>
   4370c:	2809883a 	mov	r4,r5
   43710:	2005883a 	mov	r2,r4
   43714:	f800283a 	ret
   43718:	6245c83a 	sub	r2,r12,r9
   4371c:	003fd006 	br	43660 <_fpadd_parts+0x80>
   43720:	30800217 	ldw	r2,8(r6)
   43724:	2006d07a 	srli	r3,r4,1
   43728:	2100004c 	andi	r4,r4,1
   4372c:	10800044 	addi	r2,r2,1
   43730:	1906b03a 	or	r3,r3,r4
   43734:	3009883a 	mov	r4,r6
   43738:	30800215 	stw	r2,8(r6)
   4373c:	2005883a 	mov	r2,r4
   43740:	30c00315 	stw	r3,12(r6)
   43744:	f800283a 	ret
   43748:	4b09883a 	add	r4,r9,r12
   4374c:	30c00115 	stw	r3,4(r6)
   43750:	32800215 	stw	r10,8(r6)
   43754:	31000315 	stw	r4,12(r6)
   43758:	003fd306 	br	436a8 <_fpadd_parts+0xc8>
   4375c:	0013883a 	mov	r9,zero
   43760:	003fba06 	br	4364c <_fpadd_parts+0x6c>
   43764:	01cfc83a 	sub	r7,zero,r7
   43768:	003faf06 	br	43628 <_fpadd_parts+0x48>
   4376c:	0089c83a 	sub	r4,zero,r2
   43770:	00800044 	movi	r2,1
   43774:	30800115 	stw	r2,4(r6)
   43778:	32800215 	stw	r10,8(r6)
   4377c:	31000315 	stw	r4,12(r6)
   43780:	003fbb06 	br	43670 <_fpadd_parts+0x90>
   43784:	583fb126 	beq	r11,zero,4364c <_fpadd_parts+0x6c>
   43788:	41c4983a 	sll	r2,r8,r7
   4378c:	61c6d83a 	srl	r3,r12,r7
   43790:	51d5883a 	add	r10,r10,r7
   43794:	10bfffc4 	addi	r2,r2,-1
   43798:	6084703a 	and	r2,r12,r2
   4379c:	1004c03a 	cmpne	r2,r2,zero
   437a0:	1898b03a 	or	r12,r3,r2
   437a4:	003fa906 	br	4364c <_fpadd_parts+0x6c>
   437a8:	11ffc31e 	bne	r2,r7,436b8 <_fpadd_parts+0xd8>
   437ac:	28c00117 	ldw	r3,4(r5)
   437b0:	20800117 	ldw	r2,4(r4)
   437b4:	10ffc026 	beq	r2,r3,436b8 <_fpadd_parts+0xd8>
   437b8:	01000134 	movhi	r4,4
   437bc:	211d3704 	addi	r4,r4,29916
   437c0:	003fbd06 	br	436b8 <_fpadd_parts+0xd8>

000437c4 <__subsf3>:
   437c4:	deffef04 	addi	sp,sp,-68
   437c8:	dcc00f15 	stw	r19,60(sp)
   437cc:	dcc00204 	addi	r19,sp,8
   437d0:	dc400e15 	stw	r17,56(sp)
   437d4:	d9000015 	stw	r4,0(sp)
   437d8:	d9400115 	stw	r5,4(sp)
   437dc:	d809883a 	mov	r4,sp
   437e0:	980b883a 	mov	r5,r19
   437e4:	dc400604 	addi	r17,sp,24
   437e8:	dfc01015 	stw	ra,64(sp)
   437ec:	0044bf80 	call	44bf8 <__unpack_f>
   437f0:	d9000104 	addi	r4,sp,4
   437f4:	880b883a 	mov	r5,r17
   437f8:	0044bf80 	call	44bf8 <__unpack_f>
   437fc:	d8800717 	ldw	r2,28(sp)
   43800:	9809883a 	mov	r4,r19
   43804:	880b883a 	mov	r5,r17
   43808:	d9800a04 	addi	r6,sp,40
   4380c:	1080005c 	xori	r2,r2,1
   43810:	d8800715 	stw	r2,28(sp)
   43814:	00435e00 	call	435e0 <_fpadd_parts>
   43818:	1009883a 	mov	r4,r2
   4381c:	0044a980 	call	44a98 <__pack_f>
   43820:	dfc01017 	ldw	ra,64(sp)
   43824:	dcc00f17 	ldw	r19,60(sp)
   43828:	dc400e17 	ldw	r17,56(sp)
   4382c:	dec01104 	addi	sp,sp,68
   43830:	f800283a 	ret

00043834 <__addsf3>:
   43834:	deffef04 	addi	sp,sp,-68
   43838:	dcc00f15 	stw	r19,60(sp)
   4383c:	dcc00204 	addi	r19,sp,8
   43840:	dc400e15 	stw	r17,56(sp)
   43844:	d9000015 	stw	r4,0(sp)
   43848:	d9400115 	stw	r5,4(sp)
   4384c:	d809883a 	mov	r4,sp
   43850:	980b883a 	mov	r5,r19
   43854:	dc400604 	addi	r17,sp,24
   43858:	dfc01015 	stw	ra,64(sp)
   4385c:	0044bf80 	call	44bf8 <__unpack_f>
   43860:	d9000104 	addi	r4,sp,4
   43864:	880b883a 	mov	r5,r17
   43868:	0044bf80 	call	44bf8 <__unpack_f>
   4386c:	d9800a04 	addi	r6,sp,40
   43870:	9809883a 	mov	r4,r19
   43874:	880b883a 	mov	r5,r17
   43878:	00435e00 	call	435e0 <_fpadd_parts>
   4387c:	1009883a 	mov	r4,r2
   43880:	0044a980 	call	44a98 <__pack_f>
   43884:	dfc01017 	ldw	ra,64(sp)
   43888:	dcc00f17 	ldw	r19,60(sp)
   4388c:	dc400e17 	ldw	r17,56(sp)
   43890:	dec01104 	addi	sp,sp,68
   43894:	f800283a 	ret

00043898 <__mulsf3>:
   43898:	deffef04 	addi	sp,sp,-68
   4389c:	dc400f15 	stw	r17,60(sp)
   438a0:	dc400204 	addi	r17,sp,8
   438a4:	dc000e15 	stw	r16,56(sp)
   438a8:	d9000015 	stw	r4,0(sp)
   438ac:	d9400115 	stw	r5,4(sp)
   438b0:	d809883a 	mov	r4,sp
   438b4:	880b883a 	mov	r5,r17
   438b8:	dc000604 	addi	r16,sp,24
   438bc:	dfc01015 	stw	ra,64(sp)
   438c0:	0044bf80 	call	44bf8 <__unpack_f>
   438c4:	d9000104 	addi	r4,sp,4
   438c8:	800b883a 	mov	r5,r16
   438cc:	0044bf80 	call	44bf8 <__unpack_f>
   438d0:	d9000217 	ldw	r4,8(sp)
   438d4:	00800044 	movi	r2,1
   438d8:	01400104 	movi	r5,4
   438dc:	1100142e 	bgeu	r2,r4,43930 <__mulsf3+0x98>
   438e0:	d8c00617 	ldw	r3,24(sp)
   438e4:	10c0052e 	bgeu	r2,r3,438fc <__mulsf3+0x64>
   438e8:	21400f26 	beq	r4,r5,43928 <__mulsf3+0x90>
   438ec:	19405d26 	beq	r3,r5,43a64 <__mulsf3+0x1cc>
   438f0:	00800084 	movi	r2,2
   438f4:	20800e26 	beq	r4,r2,43930 <__mulsf3+0x98>
   438f8:	1880181e 	bne	r3,r2,4395c <__mulsf3+0xc4>
   438fc:	d8c00717 	ldw	r3,28(sp)
   43900:	d8800317 	ldw	r2,12(sp)
   43904:	8009883a 	mov	r4,r16
   43908:	10c4c03a 	cmpne	r2,r2,r3
   4390c:	d8800715 	stw	r2,28(sp)
   43910:	0044a980 	call	44a98 <__pack_f>
   43914:	dfc01017 	ldw	ra,64(sp)
   43918:	dc400f17 	ldw	r17,60(sp)
   4391c:	dc000e17 	ldw	r16,56(sp)
   43920:	dec01104 	addi	sp,sp,68
   43924:	f800283a 	ret
   43928:	00800084 	movi	r2,2
   4392c:	18804f26 	beq	r3,r2,43a6c <__mulsf3+0x1d4>
   43930:	d8800317 	ldw	r2,12(sp)
   43934:	d8c00717 	ldw	r3,28(sp)
   43938:	8809883a 	mov	r4,r17
   4393c:	10c4c03a 	cmpne	r2,r2,r3
   43940:	d8800315 	stw	r2,12(sp)
   43944:	0044a980 	call	44a98 <__pack_f>
   43948:	dfc01017 	ldw	ra,64(sp)
   4394c:	dc400f17 	ldw	r17,60(sp)
   43950:	dc000e17 	ldw	r16,56(sp)
   43954:	dec01104 	addi	sp,sp,68
   43958:	f800283a 	ret
   4395c:	d8800517 	ldw	r2,20(sp)
   43960:	da000917 	ldw	r8,36(sp)
   43964:	0013883a 	mov	r9,zero
   43968:	0007883a 	mov	r3,zero
   4396c:	480f883a 	mov	r7,r9
   43970:	180b883a 	mov	r5,r3
   43974:	400d883a 	mov	r6,r8
   43978:	1009883a 	mov	r4,r2
   4397c:	00448f40 	call	448f4 <__muldi3>
   43980:	da800417 	ldw	r10,16(sp)
   43984:	d9800817 	ldw	r6,32(sp)
   43988:	da400317 	ldw	r9,12(sp)
   4398c:	52800084 	addi	r10,r10,2
   43990:	3295883a 	add	r10,r6,r10
   43994:	d9800717 	ldw	r6,28(sp)
   43998:	180b883a 	mov	r5,r3
   4399c:	180f883a 	mov	r7,r3
   439a0:	4992c03a 	cmpne	r9,r9,r6
   439a4:	da400b15 	stw	r9,44(sp)
   439a8:	1007883a 	mov	r3,r2
   439ac:	da800c15 	stw	r10,48(sp)
   439b0:	2800070e 	bge	r5,zero,439d0 <__mulsf3+0x138>
   439b4:	2880004c 	andi	r2,r5,1
   439b8:	1005003a 	cmpeq	r2,r2,zero
   439bc:	500d883a 	mov	r6,r10
   439c0:	10001e26 	beq	r2,zero,43a3c <__mulsf3+0x1a4>
   439c4:	380ed07a 	srli	r7,r7,1
   439c8:	31800044 	addi	r6,r6,1
   439cc:	d9800c15 	stw	r6,48(sp)
   439d0:	01100034 	movhi	r4,16384
   439d4:	213fffc4 	addi	r4,r4,-1
   439d8:	21c00b36 	bltu	r4,r7,43a08 <__mulsf3+0x170>
   439dc:	d8800c17 	ldw	r2,48(sp)
   439e0:	00000206 	br	439ec <__mulsf3+0x154>
   439e4:	18c7883a 	add	r3,r3,r3
   439e8:	21c00636 	bltu	r4,r7,43a04 <__mulsf3+0x16c>
   439ec:	10bfffc4 	addi	r2,r2,-1
   439f0:	39cf883a 	add	r7,r7,r7
   439f4:	183ffb0e 	bge	r3,zero,439e4 <__mulsf3+0x14c>
   439f8:	39c00054 	ori	r7,r7,1
   439fc:	18c7883a 	add	r3,r3,r3
   43a00:	21fffa2e 	bgeu	r4,r7,439ec <__mulsf3+0x154>
   43a04:	d8800c15 	stw	r2,48(sp)
   43a08:	39001fcc 	andi	r4,r7,127
   43a0c:	00801004 	movi	r2,64
   43a10:	20800d26 	beq	r4,r2,43a48 <__mulsf3+0x1b0>
   43a14:	008000c4 	movi	r2,3
   43a18:	d9000a04 	addi	r4,sp,40
   43a1c:	d9c00d15 	stw	r7,52(sp)
   43a20:	d8800a15 	stw	r2,40(sp)
   43a24:	0044a980 	call	44a98 <__pack_f>
   43a28:	dfc01017 	ldw	ra,64(sp)
   43a2c:	dc400f17 	ldw	r17,60(sp)
   43a30:	dc000e17 	ldw	r16,56(sp)
   43a34:	dec01104 	addi	sp,sp,68
   43a38:	f800283a 	ret
   43a3c:	1804d07a 	srli	r2,r3,1
   43a40:	10e00034 	orhi	r3,r2,32768
   43a44:	003fdf06 	br	439c4 <__mulsf3+0x12c>
   43a48:	3880200c 	andi	r2,r7,128
   43a4c:	103ff11e 	bne	r2,zero,43a14 <__mulsf3+0x17c>
   43a50:	183ff026 	beq	r3,zero,43a14 <__mulsf3+0x17c>
   43a54:	3907883a 	add	r3,r7,r4
   43a58:	00bfe004 	movi	r2,-128
   43a5c:	188e703a 	and	r7,r3,r2
   43a60:	003fec06 	br	43a14 <__mulsf3+0x17c>
   43a64:	00800084 	movi	r2,2
   43a68:	20bfa41e 	bne	r4,r2,438fc <__mulsf3+0x64>
   43a6c:	01000134 	movhi	r4,4
   43a70:	211d3704 	addi	r4,r4,29916
   43a74:	003fb306 	br	43944 <__mulsf3+0xac>

00043a78 <__divsf3>:
   43a78:	defff304 	addi	sp,sp,-52
   43a7c:	dc400b15 	stw	r17,44(sp)
   43a80:	dc400204 	addi	r17,sp,8
   43a84:	dc000a15 	stw	r16,40(sp)
   43a88:	d9000015 	stw	r4,0(sp)
   43a8c:	d9400115 	stw	r5,4(sp)
   43a90:	d809883a 	mov	r4,sp
   43a94:	880b883a 	mov	r5,r17
   43a98:	dc000604 	addi	r16,sp,24
   43a9c:	dfc00c15 	stw	ra,48(sp)
   43aa0:	0044bf80 	call	44bf8 <__unpack_f>
   43aa4:	d9000104 	addi	r4,sp,4
   43aa8:	800b883a 	mov	r5,r16
   43aac:	0044bf80 	call	44bf8 <__unpack_f>
   43ab0:	d9000217 	ldw	r4,8(sp)
   43ab4:	00800044 	movi	r2,1
   43ab8:	01800104 	movi	r6,4
   43abc:	11000a2e 	bgeu	r2,r4,43ae8 <__divsf3+0x70>
   43ac0:	d9400617 	ldw	r5,24(sp)
   43ac4:	1140432e 	bgeu	r2,r5,43bd4 <__divsf3+0x15c>
   43ac8:	d8800317 	ldw	r2,12(sp)
   43acc:	d8c00717 	ldw	r3,28(sp)
   43ad0:	10c4f03a 	xor	r2,r2,r3
   43ad4:	d8800315 	stw	r2,12(sp)
   43ad8:	21800226 	beq	r4,r6,43ae4 <__divsf3+0x6c>
   43adc:	00800084 	movi	r2,2
   43ae0:	2080101e 	bne	r4,r2,43b24 <__divsf3+0xac>
   43ae4:	29000726 	beq	r5,r4,43b04 <__divsf3+0x8c>
   43ae8:	8809883a 	mov	r4,r17
   43aec:	0044a980 	call	44a98 <__pack_f>
   43af0:	dfc00c17 	ldw	ra,48(sp)
   43af4:	dc400b17 	ldw	r17,44(sp)
   43af8:	dc000a17 	ldw	r16,40(sp)
   43afc:	dec00d04 	addi	sp,sp,52
   43b00:	f800283a 	ret
   43b04:	01000134 	movhi	r4,4
   43b08:	211d3704 	addi	r4,r4,29916
   43b0c:	0044a980 	call	44a98 <__pack_f>
   43b10:	dfc00c17 	ldw	ra,48(sp)
   43b14:	dc400b17 	ldw	r17,44(sp)
   43b18:	dc000a17 	ldw	r16,40(sp)
   43b1c:	dec00d04 	addi	sp,sp,52
   43b20:	f800283a 	ret
   43b24:	29802d26 	beq	r5,r6,43bdc <__divsf3+0x164>
   43b28:	28801a26 	beq	r5,r2,43b94 <__divsf3+0x11c>
   43b2c:	d8c00417 	ldw	r3,16(sp)
   43b30:	d8800817 	ldw	r2,32(sp)
   43b34:	d9000517 	ldw	r4,20(sp)
   43b38:	d9800917 	ldw	r6,36(sp)
   43b3c:	1885c83a 	sub	r2,r3,r2
   43b40:	d8800415 	stw	r2,16(sp)
   43b44:	2180032e 	bgeu	r4,r6,43b54 <__divsf3+0xdc>
   43b48:	10bfffc4 	addi	r2,r2,-1
   43b4c:	d8800415 	stw	r2,16(sp)
   43b50:	2109883a 	add	r4,r4,r4
   43b54:	01500034 	movhi	r5,16384
   43b58:	0007883a 	mov	r3,zero
   43b5c:	0005883a 	mov	r2,zero
   43b60:	01c007c4 	movi	r7,31
   43b64:	10800044 	addi	r2,r2,1
   43b68:	21800236 	bltu	r4,r6,43b74 <__divsf3+0xfc>
   43b6c:	1946b03a 	or	r3,r3,r5
   43b70:	2189c83a 	sub	r4,r4,r6
   43b74:	280ad07a 	srli	r5,r5,1
   43b78:	2109883a 	add	r4,r4,r4
   43b7c:	11fff91e 	bne	r2,r7,43b64 <__divsf3+0xec>
   43b80:	19401fcc 	andi	r5,r3,127
   43b84:	00801004 	movi	r2,64
   43b88:	28800a26 	beq	r5,r2,43bb4 <__divsf3+0x13c>
   43b8c:	d8c00515 	stw	r3,20(sp)
   43b90:	003fd506 	br	43ae8 <__divsf3+0x70>
   43b94:	8809883a 	mov	r4,r17
   43b98:	d9800215 	stw	r6,8(sp)
   43b9c:	0044a980 	call	44a98 <__pack_f>
   43ba0:	dfc00c17 	ldw	ra,48(sp)
   43ba4:	dc400b17 	ldw	r17,44(sp)
   43ba8:	dc000a17 	ldw	r16,40(sp)
   43bac:	dec00d04 	addi	sp,sp,52
   43bb0:	f800283a 	ret
   43bb4:	1880200c 	andi	r2,r3,128
   43bb8:	103ff41e 	bne	r2,zero,43b8c <__divsf3+0x114>
   43bbc:	203ff326 	beq	r4,zero,43b8c <__divsf3+0x114>
   43bc0:	1947883a 	add	r3,r3,r5
   43bc4:	00bfe004 	movi	r2,-128
   43bc8:	1886703a 	and	r3,r3,r2
   43bcc:	d8c00515 	stw	r3,20(sp)
   43bd0:	003fc506 	br	43ae8 <__divsf3+0x70>
   43bd4:	8009883a 	mov	r4,r16
   43bd8:	003fc406 	br	43aec <__divsf3+0x74>
   43bdc:	8809883a 	mov	r4,r17
   43be0:	d8000515 	stw	zero,20(sp)
   43be4:	d8000415 	stw	zero,16(sp)
   43be8:	003fc006 	br	43aec <__divsf3+0x74>

00043bec <__gtsf2>:
   43bec:	defff304 	addi	sp,sp,-52
   43bf0:	dc400b15 	stw	r17,44(sp)
   43bf4:	dc400204 	addi	r17,sp,8
   43bf8:	dc000a15 	stw	r16,40(sp)
   43bfc:	d9000015 	stw	r4,0(sp)
   43c00:	d9400115 	stw	r5,4(sp)
   43c04:	d809883a 	mov	r4,sp
   43c08:	880b883a 	mov	r5,r17
   43c0c:	dc000604 	addi	r16,sp,24
   43c10:	dfc00c15 	stw	ra,48(sp)
   43c14:	0044bf80 	call	44bf8 <__unpack_f>
   43c18:	d9000104 	addi	r4,sp,4
   43c1c:	800b883a 	mov	r5,r16
   43c20:	0044bf80 	call	44bf8 <__unpack_f>
   43c24:	d8800217 	ldw	r2,8(sp)
   43c28:	00c00044 	movi	r3,1
   43c2c:	01bfffc4 	movi	r6,-1
   43c30:	1880062e 	bgeu	r3,r2,43c4c <__gtsf2+0x60>
   43c34:	d8800617 	ldw	r2,24(sp)
   43c38:	8809883a 	mov	r4,r17
   43c3c:	800b883a 	mov	r5,r16
   43c40:	1880022e 	bgeu	r3,r2,43c4c <__gtsf2+0x60>
   43c44:	0044cc00 	call	44cc0 <__fpcmp_parts_f>
   43c48:	100d883a 	mov	r6,r2
   43c4c:	3005883a 	mov	r2,r6
   43c50:	dfc00c17 	ldw	ra,48(sp)
   43c54:	dc400b17 	ldw	r17,44(sp)
   43c58:	dc000a17 	ldw	r16,40(sp)
   43c5c:	dec00d04 	addi	sp,sp,52
   43c60:	f800283a 	ret

00043c64 <__gesf2>:
   43c64:	defff304 	addi	sp,sp,-52
   43c68:	dc400b15 	stw	r17,44(sp)
   43c6c:	dc400204 	addi	r17,sp,8
   43c70:	dc000a15 	stw	r16,40(sp)
   43c74:	d9000015 	stw	r4,0(sp)
   43c78:	d9400115 	stw	r5,4(sp)
   43c7c:	d809883a 	mov	r4,sp
   43c80:	880b883a 	mov	r5,r17
   43c84:	dc000604 	addi	r16,sp,24
   43c88:	dfc00c15 	stw	ra,48(sp)
   43c8c:	0044bf80 	call	44bf8 <__unpack_f>
   43c90:	d9000104 	addi	r4,sp,4
   43c94:	800b883a 	mov	r5,r16
   43c98:	0044bf80 	call	44bf8 <__unpack_f>
   43c9c:	d8800217 	ldw	r2,8(sp)
   43ca0:	00c00044 	movi	r3,1
   43ca4:	01bfffc4 	movi	r6,-1
   43ca8:	1880062e 	bgeu	r3,r2,43cc4 <__gesf2+0x60>
   43cac:	d8800617 	ldw	r2,24(sp)
   43cb0:	8809883a 	mov	r4,r17
   43cb4:	800b883a 	mov	r5,r16
   43cb8:	1880022e 	bgeu	r3,r2,43cc4 <__gesf2+0x60>
   43cbc:	0044cc00 	call	44cc0 <__fpcmp_parts_f>
   43cc0:	100d883a 	mov	r6,r2
   43cc4:	3005883a 	mov	r2,r6
   43cc8:	dfc00c17 	ldw	ra,48(sp)
   43ccc:	dc400b17 	ldw	r17,44(sp)
   43cd0:	dc000a17 	ldw	r16,40(sp)
   43cd4:	dec00d04 	addi	sp,sp,52
   43cd8:	f800283a 	ret

00043cdc <__ltsf2>:
   43cdc:	defff304 	addi	sp,sp,-52
   43ce0:	dc400b15 	stw	r17,44(sp)
   43ce4:	dc400204 	addi	r17,sp,8
   43ce8:	dc000a15 	stw	r16,40(sp)
   43cec:	d9000015 	stw	r4,0(sp)
   43cf0:	d9400115 	stw	r5,4(sp)
   43cf4:	d809883a 	mov	r4,sp
   43cf8:	880b883a 	mov	r5,r17
   43cfc:	dc000604 	addi	r16,sp,24
   43d00:	dfc00c15 	stw	ra,48(sp)
   43d04:	0044bf80 	call	44bf8 <__unpack_f>
   43d08:	d9000104 	addi	r4,sp,4
   43d0c:	800b883a 	mov	r5,r16
   43d10:	0044bf80 	call	44bf8 <__unpack_f>
   43d14:	d8800217 	ldw	r2,8(sp)
   43d18:	00c00044 	movi	r3,1
   43d1c:	180d883a 	mov	r6,r3
   43d20:	1880062e 	bgeu	r3,r2,43d3c <__ltsf2+0x60>
   43d24:	d8800617 	ldw	r2,24(sp)
   43d28:	8809883a 	mov	r4,r17
   43d2c:	800b883a 	mov	r5,r16
   43d30:	1880022e 	bgeu	r3,r2,43d3c <__ltsf2+0x60>
   43d34:	0044cc00 	call	44cc0 <__fpcmp_parts_f>
   43d38:	100d883a 	mov	r6,r2
   43d3c:	3005883a 	mov	r2,r6
   43d40:	dfc00c17 	ldw	ra,48(sp)
   43d44:	dc400b17 	ldw	r17,44(sp)
   43d48:	dc000a17 	ldw	r16,40(sp)
   43d4c:	dec00d04 	addi	sp,sp,52
   43d50:	f800283a 	ret

00043d54 <__lesf2>:
   43d54:	defff304 	addi	sp,sp,-52
   43d58:	dc400b15 	stw	r17,44(sp)
   43d5c:	dc400204 	addi	r17,sp,8
   43d60:	dc000a15 	stw	r16,40(sp)
   43d64:	d9000015 	stw	r4,0(sp)
   43d68:	d9400115 	stw	r5,4(sp)
   43d6c:	d809883a 	mov	r4,sp
   43d70:	880b883a 	mov	r5,r17
   43d74:	dc000604 	addi	r16,sp,24
   43d78:	dfc00c15 	stw	ra,48(sp)
   43d7c:	0044bf80 	call	44bf8 <__unpack_f>
   43d80:	d9000104 	addi	r4,sp,4
   43d84:	800b883a 	mov	r5,r16
   43d88:	0044bf80 	call	44bf8 <__unpack_f>
   43d8c:	d8800217 	ldw	r2,8(sp)
   43d90:	00c00044 	movi	r3,1
   43d94:	180d883a 	mov	r6,r3
   43d98:	1880062e 	bgeu	r3,r2,43db4 <__lesf2+0x60>
   43d9c:	d8800617 	ldw	r2,24(sp)
   43da0:	8809883a 	mov	r4,r17
   43da4:	800b883a 	mov	r5,r16
   43da8:	1880022e 	bgeu	r3,r2,43db4 <__lesf2+0x60>
   43dac:	0044cc00 	call	44cc0 <__fpcmp_parts_f>
   43db0:	100d883a 	mov	r6,r2
   43db4:	3005883a 	mov	r2,r6
   43db8:	dfc00c17 	ldw	ra,48(sp)
   43dbc:	dc400b17 	ldw	r17,44(sp)
   43dc0:	dc000a17 	ldw	r16,40(sp)
   43dc4:	dec00d04 	addi	sp,sp,52
   43dc8:	f800283a 	ret

00043dcc <__floatsisf>:
   43dcc:	2006d7fa 	srli	r3,r4,31
   43dd0:	defffa04 	addi	sp,sp,-24
   43dd4:	008000c4 	movi	r2,3
   43dd8:	dfc00515 	stw	ra,20(sp)
   43ddc:	dc000415 	stw	r16,16(sp)
   43de0:	d8800015 	stw	r2,0(sp)
   43de4:	d8c00115 	stw	r3,4(sp)
   43de8:	2000081e 	bne	r4,zero,43e0c <__floatsisf+0x40>
   43dec:	00800084 	movi	r2,2
   43df0:	d8800015 	stw	r2,0(sp)
   43df4:	d809883a 	mov	r4,sp
   43df8:	0044a980 	call	44a98 <__pack_f>
   43dfc:	dfc00517 	ldw	ra,20(sp)
   43e00:	dc000417 	ldw	r16,16(sp)
   43e04:	dec00604 	addi	sp,sp,24
   43e08:	f800283a 	ret
   43e0c:	00800784 	movi	r2,30
   43e10:	1807003a 	cmpeq	r3,r3,zero
   43e14:	d8800215 	stw	r2,8(sp)
   43e18:	18000e1e 	bne	r3,zero,43e54 <__floatsisf+0x88>
   43e1c:	00a00034 	movhi	r2,32768
   43e20:	20800e26 	beq	r4,r2,43e5c <__floatsisf+0x90>
   43e24:	0121c83a 	sub	r16,zero,r4
   43e28:	8009883a 	mov	r4,r16
   43e2c:	dc000315 	stw	r16,12(sp)
   43e30:	0044a180 	call	44a18 <__clzsi2>
   43e34:	117fffc4 	addi	r5,r2,-1
   43e38:	017fee0e 	bge	zero,r5,43df4 <__floatsisf+0x28>
   43e3c:	d8800217 	ldw	r2,8(sp)
   43e40:	8146983a 	sll	r3,r16,r5
   43e44:	1145c83a 	sub	r2,r2,r5
   43e48:	d8c00315 	stw	r3,12(sp)
   43e4c:	d8800215 	stw	r2,8(sp)
   43e50:	003fe806 	br	43df4 <__floatsisf+0x28>
   43e54:	2021883a 	mov	r16,r4
   43e58:	003ff306 	br	43e28 <__floatsisf+0x5c>
   43e5c:	00b3c034 	movhi	r2,52992
   43e60:	003fe606 	br	43dfc <__floatsisf+0x30>

00043e64 <__divdf3>:
   43e64:	deffed04 	addi	sp,sp,-76
   43e68:	dcc01115 	stw	r19,68(sp)
   43e6c:	dcc00404 	addi	r19,sp,16
   43e70:	2011883a 	mov	r8,r4
   43e74:	2813883a 	mov	r9,r5
   43e78:	dc000e15 	stw	r16,56(sp)
   43e7c:	d809883a 	mov	r4,sp
   43e80:	980b883a 	mov	r5,r19
   43e84:	dc000904 	addi	r16,sp,36
   43e88:	dfc01215 	stw	ra,72(sp)
   43e8c:	da400115 	stw	r9,4(sp)
   43e90:	d9c00315 	stw	r7,12(sp)
   43e94:	da000015 	stw	r8,0(sp)
   43e98:	d9800215 	stw	r6,8(sp)
   43e9c:	dc801015 	stw	r18,64(sp)
   43ea0:	dc400f15 	stw	r17,60(sp)
   43ea4:	00450a80 	call	450a8 <__unpack_d>
   43ea8:	d9000204 	addi	r4,sp,8
   43eac:	800b883a 	mov	r5,r16
   43eb0:	00450a80 	call	450a8 <__unpack_d>
   43eb4:	d9000417 	ldw	r4,16(sp)
   43eb8:	00800044 	movi	r2,1
   43ebc:	11000b2e 	bgeu	r2,r4,43eec <__divdf3+0x88>
   43ec0:	d9400917 	ldw	r5,36(sp)
   43ec4:	1140762e 	bgeu	r2,r5,440a0 <__divdf3+0x23c>
   43ec8:	d8800517 	ldw	r2,20(sp)
   43ecc:	d8c00a17 	ldw	r3,40(sp)
   43ed0:	01800104 	movi	r6,4
   43ed4:	10c4f03a 	xor	r2,r2,r3
   43ed8:	d8800515 	stw	r2,20(sp)
   43edc:	21800226 	beq	r4,r6,43ee8 <__divdf3+0x84>
   43ee0:	00800084 	movi	r2,2
   43ee4:	2080141e 	bne	r4,r2,43f38 <__divdf3+0xd4>
   43ee8:	29000926 	beq	r5,r4,43f10 <__divdf3+0xac>
   43eec:	9809883a 	mov	r4,r19
   43ef0:	0044d940 	call	44d94 <__pack_d>
   43ef4:	dfc01217 	ldw	ra,72(sp)
   43ef8:	dcc01117 	ldw	r19,68(sp)
   43efc:	dc801017 	ldw	r18,64(sp)
   43f00:	dc400f17 	ldw	r17,60(sp)
   43f04:	dc000e17 	ldw	r16,56(sp)
   43f08:	dec01304 	addi	sp,sp,76
   43f0c:	f800283a 	ret
   43f10:	01000134 	movhi	r4,4
   43f14:	211d3b04 	addi	r4,r4,29932
   43f18:	0044d940 	call	44d94 <__pack_d>
   43f1c:	dfc01217 	ldw	ra,72(sp)
   43f20:	dcc01117 	ldw	r19,68(sp)
   43f24:	dc801017 	ldw	r18,64(sp)
   43f28:	dc400f17 	ldw	r17,60(sp)
   43f2c:	dc000e17 	ldw	r16,56(sp)
   43f30:	dec01304 	addi	sp,sp,76
   43f34:	f800283a 	ret
   43f38:	29805b26 	beq	r5,r6,440a8 <__divdf3+0x244>
   43f3c:	28802d26 	beq	r5,r2,43ff4 <__divdf3+0x190>
   43f40:	d8c00617 	ldw	r3,24(sp)
   43f44:	d8800b17 	ldw	r2,44(sp)
   43f48:	d9c00817 	ldw	r7,32(sp)
   43f4c:	dc400d17 	ldw	r17,52(sp)
   43f50:	188bc83a 	sub	r5,r3,r2
   43f54:	d9800717 	ldw	r6,28(sp)
   43f58:	dc000c17 	ldw	r16,48(sp)
   43f5c:	d9400615 	stw	r5,24(sp)
   43f60:	3c403836 	bltu	r7,r17,44044 <__divdf3+0x1e0>
   43f64:	89c03626 	beq	r17,r7,44040 <__divdf3+0x1dc>
   43f68:	0015883a 	mov	r10,zero
   43f6c:	001d883a 	mov	r14,zero
   43f70:	02c40034 	movhi	r11,4096
   43f74:	001f883a 	mov	r15,zero
   43f78:	003f883a 	mov	ra,zero
   43f7c:	04800f44 	movi	r18,61
   43f80:	00000f06 	br	43fc0 <__divdf3+0x15c>
   43f84:	601d883a 	mov	r14,r12
   43f88:	681f883a 	mov	r15,r13
   43f8c:	400d883a 	mov	r6,r8
   43f90:	100f883a 	mov	r7,r2
   43f94:	3191883a 	add	r8,r6,r6
   43f98:	5808d07a 	srli	r4,r11,1
   43f9c:	4185803a 	cmpltu	r2,r8,r6
   43fa0:	39d3883a 	add	r9,r7,r7
   43fa4:	28c6b03a 	or	r3,r5,r3
   43fa8:	1245883a 	add	r2,r2,r9
   43fac:	1815883a 	mov	r10,r3
   43fb0:	2017883a 	mov	r11,r4
   43fb4:	400d883a 	mov	r6,r8
   43fb8:	100f883a 	mov	r7,r2
   43fbc:	fc801726 	beq	ra,r18,4401c <__divdf3+0x1b8>
   43fc0:	580a97fa 	slli	r5,r11,31
   43fc4:	5006d07a 	srli	r3,r10,1
   43fc8:	ffc00044 	addi	ra,ra,1
   43fcc:	3c7ff136 	bltu	r7,r17,43f94 <__divdf3+0x130>
   43fd0:	3411c83a 	sub	r8,r6,r16
   43fd4:	3205803a 	cmpltu	r2,r6,r8
   43fd8:	3c53c83a 	sub	r9,r7,r17
   43fdc:	7298b03a 	or	r12,r14,r10
   43fe0:	7adab03a 	or	r13,r15,r11
   43fe4:	4885c83a 	sub	r2,r9,r2
   43fe8:	89ffe61e 	bne	r17,r7,43f84 <__divdf3+0x120>
   43fec:	343fe936 	bltu	r6,r16,43f94 <__divdf3+0x130>
   43ff0:	003fe406 	br	43f84 <__divdf3+0x120>
   43ff4:	9809883a 	mov	r4,r19
   43ff8:	d9800415 	stw	r6,16(sp)
   43ffc:	0044d940 	call	44d94 <__pack_d>
   44000:	dfc01217 	ldw	ra,72(sp)
   44004:	dcc01117 	ldw	r19,68(sp)
   44008:	dc801017 	ldw	r18,64(sp)
   4400c:	dc400f17 	ldw	r17,60(sp)
   44010:	dc000e17 	ldw	r16,56(sp)
   44014:	dec01304 	addi	sp,sp,76
   44018:	f800283a 	ret
   4401c:	00803fc4 	movi	r2,255
   44020:	7090703a 	and	r8,r14,r2
   44024:	00802004 	movi	r2,128
   44028:	0007883a 	mov	r3,zero
   4402c:	0013883a 	mov	r9,zero
   44030:	40800d26 	beq	r8,r2,44068 <__divdf3+0x204>
   44034:	dbc00815 	stw	r15,32(sp)
   44038:	db800715 	stw	r14,28(sp)
   4403c:	003fab06 	br	43eec <__divdf3+0x88>
   44040:	343fc92e 	bgeu	r6,r16,43f68 <__divdf3+0x104>
   44044:	3185883a 	add	r2,r6,r6
   44048:	1189803a 	cmpltu	r4,r2,r6
   4404c:	39c7883a 	add	r3,r7,r7
   44050:	20c9883a 	add	r4,r4,r3
   44054:	297fffc4 	addi	r5,r5,-1
   44058:	100d883a 	mov	r6,r2
   4405c:	200f883a 	mov	r7,r4
   44060:	d9400615 	stw	r5,24(sp)
   44064:	003fc006 	br	43f68 <__divdf3+0x104>
   44068:	483ff21e 	bne	r9,zero,44034 <__divdf3+0x1d0>
   4406c:	01004004 	movi	r4,256
   44070:	7104703a 	and	r2,r14,r4
   44074:	10c4b03a 	or	r2,r2,r3
   44078:	103fee1e 	bne	r2,zero,44034 <__divdf3+0x1d0>
   4407c:	31c4b03a 	or	r2,r6,r7
   44080:	103fec26 	beq	r2,zero,44034 <__divdf3+0x1d0>
   44084:	7205883a 	add	r2,r14,r8
   44088:	1391803a 	cmpltu	r8,r2,r14
   4408c:	43d1883a 	add	r8,r8,r15
   44090:	013fc004 	movi	r4,-256
   44094:	111c703a 	and	r14,r2,r4
   44098:	401f883a 	mov	r15,r8
   4409c:	003fe506 	br	44034 <__divdf3+0x1d0>
   440a0:	8009883a 	mov	r4,r16
   440a4:	003f9206 	br	43ef0 <__divdf3+0x8c>
   440a8:	9809883a 	mov	r4,r19
   440ac:	d8000715 	stw	zero,28(sp)
   440b0:	d8000815 	stw	zero,32(sp)
   440b4:	d8000615 	stw	zero,24(sp)
   440b8:	003f8d06 	br	43ef0 <__divdf3+0x8c>

000440bc <__floatsidf>:
   440bc:	2006d7fa 	srli	r3,r4,31
   440c0:	defff604 	addi	sp,sp,-40
   440c4:	008000c4 	movi	r2,3
   440c8:	dfc00915 	stw	ra,36(sp)
   440cc:	dcc00815 	stw	r19,32(sp)
   440d0:	dc800715 	stw	r18,28(sp)
   440d4:	dc400615 	stw	r17,24(sp)
   440d8:	dc000515 	stw	r16,20(sp)
   440dc:	d8800015 	stw	r2,0(sp)
   440e0:	d8c00115 	stw	r3,4(sp)
   440e4:	20000f1e 	bne	r4,zero,44124 <__floatsidf+0x68>
   440e8:	00800084 	movi	r2,2
   440ec:	d8800015 	stw	r2,0(sp)
   440f0:	d809883a 	mov	r4,sp
   440f4:	0044d940 	call	44d94 <__pack_d>
   440f8:	1009883a 	mov	r4,r2
   440fc:	180b883a 	mov	r5,r3
   44100:	2005883a 	mov	r2,r4
   44104:	2807883a 	mov	r3,r5
   44108:	dfc00917 	ldw	ra,36(sp)
   4410c:	dcc00817 	ldw	r19,32(sp)
   44110:	dc800717 	ldw	r18,28(sp)
   44114:	dc400617 	ldw	r17,24(sp)
   44118:	dc000517 	ldw	r16,20(sp)
   4411c:	dec00a04 	addi	sp,sp,40
   44120:	f800283a 	ret
   44124:	00800f04 	movi	r2,60
   44128:	1807003a 	cmpeq	r3,r3,zero
   4412c:	d8800215 	stw	r2,8(sp)
   44130:	18001126 	beq	r3,zero,44178 <__floatsidf+0xbc>
   44134:	0027883a 	mov	r19,zero
   44138:	2025883a 	mov	r18,r4
   4413c:	d9000315 	stw	r4,12(sp)
   44140:	dcc00415 	stw	r19,16(sp)
   44144:	0044a180 	call	44a18 <__clzsi2>
   44148:	11000744 	addi	r4,r2,29
   4414c:	013fe80e 	bge	zero,r4,440f0 <__floatsidf+0x34>
   44150:	10bfff44 	addi	r2,r2,-3
   44154:	10000c16 	blt	r2,zero,44188 <__floatsidf+0xcc>
   44158:	90a2983a 	sll	r17,r18,r2
   4415c:	0021883a 	mov	r16,zero
   44160:	d8800217 	ldw	r2,8(sp)
   44164:	dc400415 	stw	r17,16(sp)
   44168:	dc000315 	stw	r16,12(sp)
   4416c:	1105c83a 	sub	r2,r2,r4
   44170:	d8800215 	stw	r2,8(sp)
   44174:	003fde06 	br	440f0 <__floatsidf+0x34>
   44178:	00a00034 	movhi	r2,32768
   4417c:	20800a26 	beq	r4,r2,441a8 <__floatsidf+0xec>
   44180:	0109c83a 	sub	r4,zero,r4
   44184:	003feb06 	br	44134 <__floatsidf+0x78>
   44188:	9006d07a 	srli	r3,r18,1
   4418c:	008007c4 	movi	r2,31
   44190:	1105c83a 	sub	r2,r2,r4
   44194:	1886d83a 	srl	r3,r3,r2
   44198:	9922983a 	sll	r17,r19,r4
   4419c:	9120983a 	sll	r16,r18,r4
   441a0:	1c62b03a 	or	r17,r3,r17
   441a4:	003fee06 	br	44160 <__floatsidf+0xa4>
   441a8:	0009883a 	mov	r4,zero
   441ac:	01707834 	movhi	r5,49632
   441b0:	003fd306 	br	44100 <__floatsidf+0x44>

000441b4 <__truncdfsf2>:
   441b4:	defff804 	addi	sp,sp,-32
   441b8:	2005883a 	mov	r2,r4
   441bc:	2807883a 	mov	r3,r5
   441c0:	d809883a 	mov	r4,sp
   441c4:	d9400204 	addi	r5,sp,8
   441c8:	d8c00115 	stw	r3,4(sp)
   441cc:	d8800015 	stw	r2,0(sp)
   441d0:	dfc00715 	stw	ra,28(sp)
   441d4:	00450a80 	call	450a8 <__unpack_d>
   441d8:	d9c00517 	ldw	r7,20(sp)
   441dc:	da000617 	ldw	r8,24(sp)
   441e0:	02d00034 	movhi	r11,16384
   441e4:	5affffc4 	addi	r11,r11,-1
   441e8:	3812d7ba 	srli	r9,r7,30
   441ec:	401a90ba 	slli	r13,r8,2
   441f0:	3ac4703a 	and	r2,r7,r11
   441f4:	0007883a 	mov	r3,zero
   441f8:	6a52b03a 	or	r9,r13,r9
   441fc:	10c4b03a 	or	r2,r2,r3
   44200:	d9000217 	ldw	r4,8(sp)
   44204:	d9400317 	ldw	r5,12(sp)
   44208:	d9800417 	ldw	r6,16(sp)
   4420c:	480f883a 	mov	r7,r9
   44210:	10000126 	beq	r2,zero,44218 <__truncdfsf2+0x64>
   44214:	49c00054 	ori	r7,r9,1
   44218:	0044d680 	call	44d68 <__make_fp>
   4421c:	dfc00717 	ldw	ra,28(sp)
   44220:	dec00804 	addi	sp,sp,32
   44224:	f800283a 	ret

00044228 <udivmodsi4>:
   44228:	29001b2e 	bgeu	r5,r4,44298 <udivmodsi4+0x70>
   4422c:	28001a16 	blt	r5,zero,44298 <udivmodsi4+0x70>
   44230:	00800044 	movi	r2,1
   44234:	0007883a 	mov	r3,zero
   44238:	01c007c4 	movi	r7,31
   4423c:	00000306 	br	4424c <udivmodsi4+0x24>
   44240:	19c01326 	beq	r3,r7,44290 <udivmodsi4+0x68>
   44244:	18c00044 	addi	r3,r3,1
   44248:	28000416 	blt	r5,zero,4425c <udivmodsi4+0x34>
   4424c:	294b883a 	add	r5,r5,r5
   44250:	1085883a 	add	r2,r2,r2
   44254:	293ffa36 	bltu	r5,r4,44240 <udivmodsi4+0x18>
   44258:	10000d26 	beq	r2,zero,44290 <udivmodsi4+0x68>
   4425c:	0007883a 	mov	r3,zero
   44260:	21400236 	bltu	r4,r5,4426c <udivmodsi4+0x44>
   44264:	2149c83a 	sub	r4,r4,r5
   44268:	1886b03a 	or	r3,r3,r2
   4426c:	1004d07a 	srli	r2,r2,1
   44270:	280ad07a 	srli	r5,r5,1
   44274:	103ffa1e 	bne	r2,zero,44260 <udivmodsi4+0x38>
   44278:	30000226 	beq	r6,zero,44284 <udivmodsi4+0x5c>
   4427c:	2005883a 	mov	r2,r4
   44280:	f800283a 	ret
   44284:	1809883a 	mov	r4,r3
   44288:	2005883a 	mov	r2,r4
   4428c:	f800283a 	ret
   44290:	0007883a 	mov	r3,zero
   44294:	003ff806 	br	44278 <udivmodsi4+0x50>
   44298:	00800044 	movi	r2,1
   4429c:	0007883a 	mov	r3,zero
   442a0:	003fef06 	br	44260 <udivmodsi4+0x38>

000442a4 <__divsi3>:
   442a4:	defffe04 	addi	sp,sp,-8
   442a8:	dc000015 	stw	r16,0(sp)
   442ac:	dfc00115 	stw	ra,4(sp)
   442b0:	0021883a 	mov	r16,zero
   442b4:	20000c16 	blt	r4,zero,442e8 <__divsi3+0x44>
   442b8:	000d883a 	mov	r6,zero
   442bc:	28000e16 	blt	r5,zero,442f8 <__divsi3+0x54>
   442c0:	00442280 	call	44228 <udivmodsi4>
   442c4:	1007883a 	mov	r3,r2
   442c8:	8005003a 	cmpeq	r2,r16,zero
   442cc:	1000011e 	bne	r2,zero,442d4 <__divsi3+0x30>
   442d0:	00c7c83a 	sub	r3,zero,r3
   442d4:	1805883a 	mov	r2,r3
   442d8:	dfc00117 	ldw	ra,4(sp)
   442dc:	dc000017 	ldw	r16,0(sp)
   442e0:	dec00204 	addi	sp,sp,8
   442e4:	f800283a 	ret
   442e8:	0109c83a 	sub	r4,zero,r4
   442ec:	04000044 	movi	r16,1
   442f0:	000d883a 	mov	r6,zero
   442f4:	283ff20e 	bge	r5,zero,442c0 <__divsi3+0x1c>
   442f8:	014bc83a 	sub	r5,zero,r5
   442fc:	8021003a 	cmpeq	r16,r16,zero
   44300:	003fef06 	br	442c0 <__divsi3+0x1c>

00044304 <__modsi3>:
   44304:	deffff04 	addi	sp,sp,-4
   44308:	dfc00015 	stw	ra,0(sp)
   4430c:	01800044 	movi	r6,1
   44310:	2807883a 	mov	r3,r5
   44314:	20000416 	blt	r4,zero,44328 <__modsi3+0x24>
   44318:	28000c16 	blt	r5,zero,4434c <__modsi3+0x48>
   4431c:	dfc00017 	ldw	ra,0(sp)
   44320:	dec00104 	addi	sp,sp,4
   44324:	00442281 	jmpi	44228 <udivmodsi4>
   44328:	0109c83a 	sub	r4,zero,r4
   4432c:	28000b16 	blt	r5,zero,4435c <__modsi3+0x58>
   44330:	180b883a 	mov	r5,r3
   44334:	01800044 	movi	r6,1
   44338:	00442280 	call	44228 <udivmodsi4>
   4433c:	0085c83a 	sub	r2,zero,r2
   44340:	dfc00017 	ldw	ra,0(sp)
   44344:	dec00104 	addi	sp,sp,4
   44348:	f800283a 	ret
   4434c:	014bc83a 	sub	r5,zero,r5
   44350:	dfc00017 	ldw	ra,0(sp)
   44354:	dec00104 	addi	sp,sp,4
   44358:	00442281 	jmpi	44228 <udivmodsi4>
   4435c:	0147c83a 	sub	r3,zero,r5
   44360:	003ff306 	br	44330 <__modsi3+0x2c>

00044364 <__udivsi3>:
   44364:	000d883a 	mov	r6,zero
   44368:	00442281 	jmpi	44228 <udivmodsi4>

0004436c <__umodsi3>:
   4436c:	01800044 	movi	r6,1
   44370:	00442281 	jmpi	44228 <udivmodsi4>

00044374 <__mulsi3>:
   44374:	20000a26 	beq	r4,zero,443a0 <__mulsi3+0x2c>
   44378:	0007883a 	mov	r3,zero
   4437c:	2080004c 	andi	r2,r4,1
   44380:	1005003a 	cmpeq	r2,r2,zero
   44384:	2008d07a 	srli	r4,r4,1
   44388:	1000011e 	bne	r2,zero,44390 <__mulsi3+0x1c>
   4438c:	1947883a 	add	r3,r3,r5
   44390:	294b883a 	add	r5,r5,r5
   44394:	203ff91e 	bne	r4,zero,4437c <__mulsi3+0x8>
   44398:	1805883a 	mov	r2,r3
   4439c:	f800283a 	ret
   443a0:	0007883a 	mov	r3,zero
   443a4:	1805883a 	mov	r2,r3
   443a8:	f800283a 	ret

000443ac <_Unwind_SjLj_Register>:
   443ac:	d0a1d517 	ldw	r2,-30892(gp)
   443b0:	20800015 	stw	r2,0(r4)
   443b4:	d121d515 	stw	r4,-30892(gp)
   443b8:	f800283a 	ret

000443bc <_Unwind_SjLj_Unregister>:
   443bc:	20800017 	ldw	r2,0(r4)
   443c0:	d0a1d515 	stw	r2,-30892(gp)
   443c4:	f800283a 	ret

000443c8 <_Unwind_GetGR>:
   443c8:	20800017 	ldw	r2,0(r4)
   443cc:	294b883a 	add	r5,r5,r5
   443d0:	294b883a 	add	r5,r5,r5
   443d4:	288b883a 	add	r5,r5,r2
   443d8:	28800217 	ldw	r2,8(r5)
   443dc:	f800283a 	ret

000443e0 <_Unwind_GetCFA>:
   443e0:	21000017 	ldw	r4,0(r4)
   443e4:	0005883a 	mov	r2,zero
   443e8:	20000126 	beq	r4,zero,443f0 <_Unwind_GetCFA+0x10>
   443ec:	20800a17 	ldw	r2,40(r4)
   443f0:	f800283a 	ret

000443f4 <_Unwind_SetGR>:
   443f4:	20800017 	ldw	r2,0(r4)
   443f8:	294b883a 	add	r5,r5,r5
   443fc:	294b883a 	add	r5,r5,r5
   44400:	288b883a 	add	r5,r5,r2
   44404:	29800215 	stw	r6,8(r5)
   44408:	f800283a 	ret

0004440c <_Unwind_GetIP>:
   4440c:	20c00017 	ldw	r3,0(r4)
   44410:	18800117 	ldw	r2,4(r3)
   44414:	10800044 	addi	r2,r2,1
   44418:	f800283a 	ret

0004441c <_Unwind_GetIPInfo>:
   4441c:	20c00017 	ldw	r3,0(r4)
   44420:	28000015 	stw	zero,0(r5)
   44424:	18800117 	ldw	r2,4(r3)
   44428:	10800044 	addi	r2,r2,1
   4442c:	f800283a 	ret

00044430 <_Unwind_SetIP>:
   44430:	20800017 	ldw	r2,0(r4)
   44434:	297fffc4 	addi	r5,r5,-1
   44438:	11400115 	stw	r5,4(r2)
   4443c:	f800283a 	ret

00044440 <_Unwind_GetLanguageSpecificData>:
   44440:	20c00017 	ldw	r3,0(r4)
   44444:	18800717 	ldw	r2,28(r3)
   44448:	f800283a 	ret

0004444c <_Unwind_GetRegionStart>:
   4444c:	0005883a 	mov	r2,zero
   44450:	f800283a 	ret

00044454 <_Unwind_FindEnclosingFunction>:
   44454:	0005883a 	mov	r2,zero
   44458:	f800283a 	ret

0004445c <_Unwind_GetDataRelBase>:
   4445c:	0005883a 	mov	r2,zero
   44460:	f800283a 	ret

00044464 <_Unwind_GetTextRelBase>:
   44464:	0005883a 	mov	r2,zero
   44468:	f800283a 	ret

0004446c <_Unwind_ForcedUnwind_Phase2>:
   4446c:	defff604 	addi	sp,sp,-40
   44470:	dd400815 	stw	r21,32(sp)
   44474:	dd000715 	stw	r20,28(sp)
   44478:	25400317 	ldw	r21,12(r4)
   4447c:	25000417 	ldw	r20,16(r4)
   44480:	28800017 	ldw	r2,0(r5)
   44484:	dc800515 	stw	r18,20(sp)
   44488:	dc000315 	stw	r16,12(sp)
   4448c:	2825883a 	mov	r18,r5
   44490:	2021883a 	mov	r16,r4
   44494:	dfc00915 	stw	ra,36(sp)
   44498:	dcc00615 	stw	r19,24(sp)
   4449c:	dc400415 	stw	r17,16(sp)
   444a0:	00001406 	br	444f4 <_Unwind_ForcedUnwind_Phase2+0x88>
   444a4:	00800144 	movi	r2,5
   444a8:	88802626 	beq	r17,r2,44544 <_Unwind_ForcedUnwind_Phase2+0xd8>
   444ac:	98000c26 	beq	r19,zero,444e0 <_Unwind_ForcedUnwind_Phase2+0x74>
   444b0:	82000017 	ldw	r8,0(r16)
   444b4:	dc000015 	stw	r16,0(sp)
   444b8:	dc800115 	stw	r18,4(sp)
   444bc:	82400117 	ldw	r9,4(r16)
   444c0:	400d883a 	mov	r6,r8
   444c4:	480f883a 	mov	r7,r9
   444c8:	983ee83a 	callr	r19
   444cc:	1023883a 	mov	r17,r2
   444d0:	008001c4 	movi	r2,7
   444d4:	88801b26 	beq	r17,r2,44544 <_Unwind_ForcedUnwind_Phase2+0xd8>
   444d8:	00800204 	movi	r2,8
   444dc:	8880181e 	bne	r17,r2,44540 <_Unwind_ForcedUnwind_Phase2+0xd4>
   444e0:	91000017 	ldw	r4,0(r18)
   444e4:	00443bc0 	call	443bc <_Unwind_SjLj_Unregister>
   444e8:	90800017 	ldw	r2,0(r18)
   444ec:	10800017 	ldw	r2,0(r2)
   444f0:	90800015 	stw	r2,0(r18)
   444f4:	01400684 	movi	r5,26
   444f8:	04400144 	movi	r17,5
   444fc:	0027883a 	mov	r19,zero
   44500:	10000326 	beq	r2,zero,44510 <_Unwind_ForcedUnwind_Phase2+0xa4>
   44504:	14c00617 	ldw	r19,24(r2)
   44508:	0023883a 	mov	r17,zero
   4450c:	01400284 	movi	r5,10
   44510:	dc000015 	stw	r16,0(sp)
   44514:	dc800115 	stw	r18,4(sp)
   44518:	80800017 	ldw	r2,0(r16)
   4451c:	dd000215 	stw	r20,8(sp)
   44520:	80c00117 	ldw	r3,4(r16)
   44524:	01000044 	movi	r4,1
   44528:	100d883a 	mov	r6,r2
   4452c:	180f883a 	mov	r7,r3
   44530:	a83ee83a 	callr	r21
   44534:	01400284 	movi	r5,10
   44538:	01000044 	movi	r4,1
   4453c:	103fd926 	beq	r2,zero,444a4 <_Unwind_ForcedUnwind_Phase2+0x38>
   44540:	04400084 	movi	r17,2
   44544:	8805883a 	mov	r2,r17
   44548:	dfc00917 	ldw	ra,36(sp)
   4454c:	dd400817 	ldw	r21,32(sp)
   44550:	dd000717 	ldw	r20,28(sp)
   44554:	dcc00617 	ldw	r19,24(sp)
   44558:	dc800517 	ldw	r18,20(sp)
   4455c:	dc400417 	ldw	r17,16(sp)
   44560:	dc000317 	ldw	r16,12(sp)
   44564:	dec00a04 	addi	sp,sp,40
   44568:	f800283a 	ret

0004456c <_Unwind_DeleteException>:
   4456c:	20800217 	ldw	r2,8(r4)
   44570:	200b883a 	mov	r5,r4
   44574:	01000044 	movi	r4,1
   44578:	10000126 	beq	r2,zero,44580 <_Unwind_DeleteException+0x14>
   4457c:	1000683a 	jmp	r2
   44580:	f800283a 	ret

00044584 <_Unwind_RaiseException_Phase2>:
   44584:	defffa04 	addi	sp,sp,-24
   44588:	dc800415 	stw	r18,16(sp)
   4458c:	2825883a 	mov	r18,r5
   44590:	29400017 	ldw	r5,0(r5)
   44594:	dc400315 	stw	r17,12(sp)
   44598:	dfc00515 	stw	ra,20(sp)
   4459c:	dc000215 	stw	r16,8(sp)
   445a0:	2023883a 	mov	r17,r4
   445a4:	28001b26 	beq	r5,zero,44614 <_Unwind_RaiseException_Phase2+0x90>
   445a8:	88800417 	ldw	r2,16(r17)
   445ac:	0007883a 	mov	r3,zero
   445b0:	2a000617 	ldw	r8,24(r5)
   445b4:	28a1003a 	cmpeq	r16,r5,r2
   445b8:	802090ba 	slli	r16,r16,2
   445bc:	18001b1e 	bne	r3,zero,4462c <_Unwind_RaiseException_Phase2+0xa8>
   445c0:	40000e26 	beq	r8,zero,445fc <_Unwind_RaiseException_Phase2+0x78>
   445c4:	88800017 	ldw	r2,0(r17)
   445c8:	dc400015 	stw	r17,0(sp)
   445cc:	dc800115 	stw	r18,4(sp)
   445d0:	88c00117 	ldw	r3,4(r17)
   445d4:	01000044 	movi	r4,1
   445d8:	81400094 	ori	r5,r16,2
   445dc:	180f883a 	mov	r7,r3
   445e0:	100d883a 	mov	r6,r2
   445e4:	403ee83a 	callr	r8
   445e8:	1007883a 	mov	r3,r2
   445ec:	008001c4 	movi	r2,7
   445f0:	18800f26 	beq	r3,r2,44630 <_Unwind_RaiseException_Phase2+0xac>
   445f4:	00800204 	movi	r2,8
   445f8:	18800c1e 	bne	r3,r2,4462c <_Unwind_RaiseException_Phase2+0xa8>
   445fc:	8000131e 	bne	r16,zero,4464c <_Unwind_RaiseException_Phase2+0xc8>
   44600:	91400017 	ldw	r5,0(r18)
   44604:	28800017 	ldw	r2,0(r5)
   44608:	100b883a 	mov	r5,r2
   4460c:	90800015 	stw	r2,0(r18)
   44610:	283fe51e 	bne	r5,zero,445a8 <_Unwind_RaiseException_Phase2+0x24>
   44614:	88800417 	ldw	r2,16(r17)
   44618:	00c00144 	movi	r3,5
   4461c:	0011883a 	mov	r8,zero
   44620:	28a1003a 	cmpeq	r16,r5,r2
   44624:	802090ba 	slli	r16,r16,2
   44628:	183fe526 	beq	r3,zero,445c0 <_Unwind_RaiseException_Phase2+0x3c>
   4462c:	00c00084 	movi	r3,2
   44630:	1805883a 	mov	r2,r3
   44634:	dfc00517 	ldw	ra,20(sp)
   44638:	dc800417 	ldw	r18,16(sp)
   4463c:	dc400317 	ldw	r17,12(sp)
   44640:	dc000217 	ldw	r16,8(sp)
   44644:	dec00604 	addi	sp,sp,24
   44648:	f800283a 	ret
   4464c:	00451e00 	call	451e0 <abort>

00044650 <uw_install_context>:
   44650:	28800017 	ldw	r2,0(r5)
   44654:	deffff04 	addi	sp,sp,-4
   44658:	df000015 	stw	fp,0(sp)
   4465c:	10c00804 	addi	r3,r2,32
   44660:	d839883a 	mov	fp,sp
   44664:	d0a1d515 	stw	r2,-30892(gp)
   44668:	19000117 	ldw	r4,4(r3)
   4466c:	1f000017 	ldw	fp,0(r3)
   44670:	1ec00217 	ldw	sp,8(r3)
   44674:	2000683a 	jmp	r4

00044678 <_Unwind_SjLj_Resume>:
   44678:	d0e1d517 	ldw	r3,-30892(gp)
   4467c:	20800317 	ldw	r2,12(r4)
   44680:	defffc04 	addi	sp,sp,-16
   44684:	dfc00315 	stw	ra,12(sp)
   44688:	dc000215 	stw	r16,8(sp)
   4468c:	d8c00015 	stw	r3,0(sp)
   44690:	d8c00115 	stw	r3,4(sp)
   44694:	1000071e 	bne	r2,zero,446b4 <_Unwind_SjLj_Resume+0x3c>
   44698:	dc000104 	addi	r16,sp,4
   4469c:	800b883a 	mov	r5,r16
   446a0:	00445840 	call	44584 <_Unwind_RaiseException_Phase2>
   446a4:	1007883a 	mov	r3,r2
   446a8:	008001c4 	movi	r2,7
   446ac:	18800626 	beq	r3,r2,446c8 <_Unwind_SjLj_Resume+0x50>
   446b0:	00451e00 	call	451e0 <abort>
   446b4:	dc000104 	addi	r16,sp,4
   446b8:	800b883a 	mov	r5,r16
   446bc:	004446c0 	call	4446c <_Unwind_ForcedUnwind_Phase2>
   446c0:	1007883a 	mov	r3,r2
   446c4:	003ff806 	br	446a8 <_Unwind_SjLj_Resume+0x30>
   446c8:	800b883a 	mov	r5,r16
   446cc:	d809883a 	mov	r4,sp
   446d0:	00446500 	call	44650 <uw_install_context>

000446d4 <_Unwind_SjLj_RaiseException>:
   446d4:	d0a1d517 	ldw	r2,-30892(gp)
   446d8:	defff804 	addi	sp,sp,-32
   446dc:	dc000415 	stw	r16,16(sp)
   446e0:	dfc00715 	stw	ra,28(sp)
   446e4:	dc800615 	stw	r18,24(sp)
   446e8:	dc400515 	stw	r17,20(sp)
   446ec:	2021883a 	mov	r16,r4
   446f0:	d8800215 	stw	r2,8(sp)
   446f4:	d8800315 	stw	r2,12(sp)
   446f8:	10001626 	beq	r2,zero,44754 <_Unwind_SjLj_RaiseException+0x80>
   446fc:	dc400304 	addi	r17,sp,12
   44700:	04800184 	movi	r18,6
   44704:	00000106 	br	4470c <_Unwind_SjLj_RaiseException+0x38>
   44708:	d8800315 	stw	r2,12(sp)
   4470c:	12000617 	ldw	r8,24(r2)
   44710:	40000d26 	beq	r8,zero,44748 <_Unwind_SjLj_RaiseException+0x74>
   44714:	80800017 	ldw	r2,0(r16)
   44718:	dc000015 	stw	r16,0(sp)
   4471c:	80c00117 	ldw	r3,4(r16)
   44720:	01000044 	movi	r4,1
   44724:	dc400115 	stw	r17,4(sp)
   44728:	180f883a 	mov	r7,r3
   4472c:	200b883a 	mov	r5,r4
   44730:	100d883a 	mov	r6,r2
   44734:	403ee83a 	callr	r8
   44738:	1007883a 	mov	r3,r2
   4473c:	14800d26 	beq	r2,r18,44774 <_Unwind_SjLj_RaiseException+0xa0>
   44740:	00800204 	movi	r2,8
   44744:	1880191e 	bne	r3,r2,447ac <_Unwind_SjLj_RaiseException+0xd8>
   44748:	d8800317 	ldw	r2,12(sp)
   4474c:	10800017 	ldw	r2,0(r2)
   44750:	103fed1e 	bne	r2,zero,44708 <_Unwind_SjLj_RaiseException+0x34>
   44754:	00c00144 	movi	r3,5
   44758:	1805883a 	mov	r2,r3
   4475c:	dfc00717 	ldw	ra,28(sp)
   44760:	dc800617 	ldw	r18,24(sp)
   44764:	dc400517 	ldw	r17,20(sp)
   44768:	dc000417 	ldw	r16,16(sp)
   4476c:	dec00804 	addi	sp,sp,32
   44770:	f800283a 	ret
   44774:	d8800317 	ldw	r2,12(sp)
   44778:	80000315 	stw	zero,12(r16)
   4477c:	8009883a 	mov	r4,r16
   44780:	80800415 	stw	r2,16(r16)
   44784:	d8800217 	ldw	r2,8(sp)
   44788:	880b883a 	mov	r5,r17
   4478c:	d8800315 	stw	r2,12(sp)
   44790:	00445840 	call	44584 <_Unwind_RaiseException_Phase2>
   44794:	1007883a 	mov	r3,r2
   44798:	008001c4 	movi	r2,7
   4479c:	18bfee1e 	bne	r3,r2,44758 <_Unwind_SjLj_RaiseException+0x84>
   447a0:	880b883a 	mov	r5,r17
   447a4:	d9000204 	addi	r4,sp,8
   447a8:	00446500 	call	44650 <uw_install_context>
   447ac:	00c000c4 	movi	r3,3
   447b0:	1805883a 	mov	r2,r3
   447b4:	dfc00717 	ldw	ra,28(sp)
   447b8:	dc800617 	ldw	r18,24(sp)
   447bc:	dc400517 	ldw	r17,20(sp)
   447c0:	dc000417 	ldw	r16,16(sp)
   447c4:	dec00804 	addi	sp,sp,32
   447c8:	f800283a 	ret

000447cc <_Unwind_SjLj_ForcedUnwind>:
   447cc:	defffc04 	addi	sp,sp,-16
   447d0:	d0a1d517 	ldw	r2,-30892(gp)
   447d4:	dc000215 	stw	r16,8(sp)
   447d8:	dc000104 	addi	r16,sp,4
   447dc:	21400315 	stw	r5,12(r4)
   447e0:	21800415 	stw	r6,16(r4)
   447e4:	800b883a 	mov	r5,r16
   447e8:	dfc00315 	stw	ra,12(sp)
   447ec:	d8800015 	stw	r2,0(sp)
   447f0:	d8800115 	stw	r2,4(sp)
   447f4:	004446c0 	call	4446c <_Unwind_ForcedUnwind_Phase2>
   447f8:	00c001c4 	movi	r3,7
   447fc:	10c00426 	beq	r2,r3,44810 <_Unwind_SjLj_ForcedUnwind+0x44>
   44800:	dfc00317 	ldw	ra,12(sp)
   44804:	dc000217 	ldw	r16,8(sp)
   44808:	dec00404 	addi	sp,sp,16
   4480c:	f800283a 	ret
   44810:	800b883a 	mov	r5,r16
   44814:	d809883a 	mov	r4,sp
   44818:	00446500 	call	44650 <uw_install_context>

0004481c <_Unwind_Backtrace>:
   4481c:	d0a1d517 	ldw	r2,-30892(gp)
   44820:	defffa04 	addi	sp,sp,-24
   44824:	dcc00415 	stw	r19,16(sp)
   44828:	dc800315 	stw	r18,12(sp)
   4482c:	dc400215 	stw	r17,8(sp)
   44830:	2025883a 	mov	r18,r4
   44834:	2823883a 	mov	r17,r5
   44838:	04c00144 	movi	r19,5
   4483c:	dfc00515 	stw	ra,20(sp)
   44840:	dc000115 	stw	r16,4(sp)
   44844:	d8800015 	stw	r2,0(sp)
   44848:	00000406 	br	4485c <_Unwind_Backtrace+0x40>
   4484c:	84c00b26 	beq	r16,r19,4487c <_Unwind_Backtrace+0x60>
   44850:	d8800017 	ldw	r2,0(sp)
   44854:	10800017 	ldw	r2,0(r2)
   44858:	d8800015 	stw	r2,0(sp)
   4485c:	04000144 	movi	r16,5
   44860:	10000126 	beq	r2,zero,44868 <_Unwind_Backtrace+0x4c>
   44864:	0021883a 	mov	r16,zero
   44868:	d809883a 	mov	r4,sp
   4486c:	880b883a 	mov	r5,r17
   44870:	903ee83a 	callr	r18
   44874:	103ff526 	beq	r2,zero,4484c <_Unwind_Backtrace+0x30>
   44878:	040000c4 	movi	r16,3
   4487c:	8005883a 	mov	r2,r16
   44880:	dfc00517 	ldw	ra,20(sp)
   44884:	dcc00417 	ldw	r19,16(sp)
   44888:	dc800317 	ldw	r18,12(sp)
   4488c:	dc400217 	ldw	r17,8(sp)
   44890:	dc000117 	ldw	r16,4(sp)
   44894:	dec00604 	addi	sp,sp,24
   44898:	f800283a 	ret

0004489c <_Unwind_SjLj_Resume_or_Rethrow>:
   4489c:	20800317 	ldw	r2,12(r4)
   448a0:	defffc04 	addi	sp,sp,-16
   448a4:	dfc00315 	stw	ra,12(sp)
   448a8:	dc000215 	stw	r16,8(sp)
   448ac:	10000926 	beq	r2,zero,448d4 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   448b0:	d0a1d517 	ldw	r2,-30892(gp)
   448b4:	dc000104 	addi	r16,sp,4
   448b8:	800b883a 	mov	r5,r16
   448bc:	d8800015 	stw	r2,0(sp)
   448c0:	d8800115 	stw	r2,4(sp)
   448c4:	004446c0 	call	4446c <_Unwind_ForcedUnwind_Phase2>
   448c8:	00c001c4 	movi	r3,7
   448cc:	10c00626 	beq	r2,r3,448e8 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   448d0:	00451e00 	call	451e0 <abort>
   448d4:	00446d40 	call	446d4 <_Unwind_SjLj_RaiseException>
   448d8:	dfc00317 	ldw	ra,12(sp)
   448dc:	dc000217 	ldw	r16,8(sp)
   448e0:	dec00404 	addi	sp,sp,16
   448e4:	f800283a 	ret
   448e8:	800b883a 	mov	r5,r16
   448ec:	d809883a 	mov	r4,sp
   448f0:	00446500 	call	44650 <uw_install_context>

000448f4 <__muldi3>:
   448f4:	defff204 	addi	sp,sp,-56
   448f8:	df000c15 	stw	fp,48(sp)
   448fc:	3038d43a 	srli	fp,r6,16
   44900:	dd000815 	stw	r20,32(sp)
   44904:	dc400515 	stw	r17,20(sp)
   44908:	2028d43a 	srli	r20,r4,16
   4490c:	247fffcc 	andi	r17,r4,65535
   44910:	dc000415 	stw	r16,16(sp)
   44914:	343fffcc 	andi	r16,r6,65535
   44918:	dcc00715 	stw	r19,28(sp)
   4491c:	d9000015 	stw	r4,0(sp)
   44920:	2827883a 	mov	r19,r5
   44924:	8809883a 	mov	r4,r17
   44928:	d9400115 	stw	r5,4(sp)
   4492c:	800b883a 	mov	r5,r16
   44930:	d9800215 	stw	r6,8(sp)
   44934:	dfc00d15 	stw	ra,52(sp)
   44938:	d9c00315 	stw	r7,12(sp)
   4493c:	dd800a15 	stw	r22,40(sp)
   44940:	dd400915 	stw	r21,36(sp)
   44944:	302d883a 	mov	r22,r6
   44948:	ddc00b15 	stw	r23,44(sp)
   4494c:	dc800615 	stw	r18,24(sp)
   44950:	00443740 	call	44374 <__mulsi3>
   44954:	8809883a 	mov	r4,r17
   44958:	e00b883a 	mov	r5,fp
   4495c:	102b883a 	mov	r21,r2
   44960:	00443740 	call	44374 <__mulsi3>
   44964:	800b883a 	mov	r5,r16
   44968:	a009883a 	mov	r4,r20
   4496c:	1023883a 	mov	r17,r2
   44970:	00443740 	call	44374 <__mulsi3>
   44974:	a009883a 	mov	r4,r20
   44978:	e00b883a 	mov	r5,fp
   4497c:	1021883a 	mov	r16,r2
   44980:	00443740 	call	44374 <__mulsi3>
   44984:	a8ffffcc 	andi	r3,r21,65535
   44988:	a82ad43a 	srli	r21,r21,16
   4498c:	8c23883a 	add	r17,r17,r16
   44990:	1011883a 	mov	r8,r2
   44994:	ac6b883a 	add	r21,r21,r17
   44998:	a804943a 	slli	r2,r21,16
   4499c:	b009883a 	mov	r4,r22
   449a0:	980b883a 	mov	r5,r19
   449a4:	10c7883a 	add	r3,r2,r3
   449a8:	a812d43a 	srli	r9,r21,16
   449ac:	180d883a 	mov	r6,r3
   449b0:	ac00022e 	bgeu	r21,r16,449bc <__muldi3+0xc8>
   449b4:	00800074 	movhi	r2,1
   449b8:	4091883a 	add	r8,r8,r2
   449bc:	4267883a 	add	r19,r8,r9
   449c0:	302d883a 	mov	r22,r6
   449c4:	00443740 	call	44374 <__mulsi3>
   449c8:	d9400317 	ldw	r5,12(sp)
   449cc:	d9000017 	ldw	r4,0(sp)
   449d0:	1023883a 	mov	r17,r2
   449d4:	00443740 	call	44374 <__mulsi3>
   449d8:	14cb883a 	add	r5,r2,r19
   449dc:	894b883a 	add	r5,r17,r5
   449e0:	b005883a 	mov	r2,r22
   449e4:	2807883a 	mov	r3,r5
   449e8:	dfc00d17 	ldw	ra,52(sp)
   449ec:	df000c17 	ldw	fp,48(sp)
   449f0:	ddc00b17 	ldw	r23,44(sp)
   449f4:	dd800a17 	ldw	r22,40(sp)
   449f8:	dd400917 	ldw	r21,36(sp)
   449fc:	dd000817 	ldw	r20,32(sp)
   44a00:	dcc00717 	ldw	r19,28(sp)
   44a04:	dc800617 	ldw	r18,24(sp)
   44a08:	dc400517 	ldw	r17,20(sp)
   44a0c:	dc000417 	ldw	r16,16(sp)
   44a10:	dec00e04 	addi	sp,sp,56
   44a14:	f800283a 	ret

00044a18 <__clzsi2>:
   44a18:	00bfffd4 	movui	r2,65535
   44a1c:	11000e36 	bltu	r2,r4,44a58 <__clzsi2+0x40>
   44a20:	00803fc4 	movi	r2,255
   44a24:	01400204 	movi	r5,8
   44a28:	0007883a 	mov	r3,zero
   44a2c:	11001036 	bltu	r2,r4,44a70 <__clzsi2+0x58>
   44a30:	000b883a 	mov	r5,zero
   44a34:	20c6d83a 	srl	r3,r4,r3
   44a38:	00800134 	movhi	r2,4
   44a3c:	109d4004 	addi	r2,r2,29952
   44a40:	1887883a 	add	r3,r3,r2
   44a44:	18800003 	ldbu	r2,0(r3)
   44a48:	00c00804 	movi	r3,32
   44a4c:	2885883a 	add	r2,r5,r2
   44a50:	1885c83a 	sub	r2,r3,r2
   44a54:	f800283a 	ret
   44a58:	01400404 	movi	r5,16
   44a5c:	00804034 	movhi	r2,256
   44a60:	10bfffc4 	addi	r2,r2,-1
   44a64:	2807883a 	mov	r3,r5
   44a68:	113ff22e 	bgeu	r2,r4,44a34 <__clzsi2+0x1c>
   44a6c:	01400604 	movi	r5,24
   44a70:	2807883a 	mov	r3,r5
   44a74:	20c6d83a 	srl	r3,r4,r3
   44a78:	00800134 	movhi	r2,4
   44a7c:	109d4004 	addi	r2,r2,29952
   44a80:	1887883a 	add	r3,r3,r2
   44a84:	18800003 	ldbu	r2,0(r3)
   44a88:	00c00804 	movi	r3,32
   44a8c:	2885883a 	add	r2,r5,r2
   44a90:	1885c83a 	sub	r2,r3,r2
   44a94:	f800283a 	ret

00044a98 <__pack_f>:
   44a98:	20c00017 	ldw	r3,0(r4)
   44a9c:	01c00044 	movi	r7,1
   44aa0:	21800317 	ldw	r6,12(r4)
   44aa4:	21400117 	ldw	r5,4(r4)
   44aa8:	38c02d2e 	bgeu	r7,r3,44b60 <__pack_f+0xc8>
   44aac:	00800104 	movi	r2,4
   44ab0:	18802826 	beq	r3,r2,44b54 <__pack_f+0xbc>
   44ab4:	00800084 	movi	r2,2
   44ab8:	18800126 	beq	r3,r2,44ac0 <__pack_f+0x28>
   44abc:	3000101e 	bne	r6,zero,44b00 <__pack_f+0x68>
   44ac0:	000d883a 	mov	r6,zero
   44ac4:	0007883a 	mov	r3,zero
   44ac8:	19003fcc 	andi	r4,r3,255
   44acc:	200895fa 	slli	r4,r4,23
   44ad0:	00c02034 	movhi	r3,128
   44ad4:	18ffffc4 	addi	r3,r3,-1
   44ad8:	30c6703a 	and	r3,r6,r3
   44adc:	10a0002c 	andhi	r2,r2,32768
   44ae0:	10c4b03a 	or	r2,r2,r3
   44ae4:	280a97fa 	slli	r5,r5,31
   44ae8:	1104b03a 	or	r2,r2,r4
   44aec:	00e00034 	movhi	r3,32768
   44af0:	18ffffc4 	addi	r3,r3,-1
   44af4:	10c4703a 	and	r2,r2,r3
   44af8:	1144b03a 	or	r2,r2,r5
   44afc:	f800283a 	ret
   44b00:	21000217 	ldw	r4,8(r4)
   44b04:	00bfe084 	movi	r2,-126
   44b08:	20801b16 	blt	r4,r2,44b78 <__pack_f+0xe0>
   44b0c:	00801fc4 	movi	r2,127
   44b10:	11001016 	blt	r2,r4,44b54 <__pack_f+0xbc>
   44b14:	308e703a 	and	r7,r6,r2
   44b18:	2087883a 	add	r3,r4,r2
   44b1c:	00801004 	movi	r2,64
   44b20:	38800526 	beq	r7,r2,44b38 <__pack_f+0xa0>
   44b24:	31800fc4 	addi	r6,r6,63
   44b28:	30000716 	blt	r6,zero,44b48 <__pack_f+0xb0>
   44b2c:	300490ba 	slli	r2,r6,2
   44b30:	100cd27a 	srli	r6,r2,9
   44b34:	003fe406 	br	44ac8 <__pack_f+0x30>
   44b38:	3080200c 	andi	r2,r6,128
   44b3c:	103ffa26 	beq	r2,zero,44b28 <__pack_f+0x90>
   44b40:	31cd883a 	add	r6,r6,r7
   44b44:	003ff806 	br	44b28 <__pack_f+0x90>
   44b48:	300cd07a 	srli	r6,r6,1
   44b4c:	18c00044 	addi	r3,r3,1
   44b50:	003ff606 	br	44b2c <__pack_f+0x94>
   44b54:	000d883a 	mov	r6,zero
   44b58:	00ffffc4 	movi	r3,-1
   44b5c:	003fda06 	br	44ac8 <__pack_f+0x30>
   44b60:	31800434 	orhi	r6,r6,16
   44b64:	00802034 	movhi	r2,128
   44b68:	10bfffc4 	addi	r2,r2,-1
   44b6c:	308c703a 	and	r6,r6,r2
   44b70:	00ffffc4 	movi	r3,-1
   44b74:	003fd406 	br	44ac8 <__pack_f+0x30>
   44b78:	1109c83a 	sub	r4,r2,r4
   44b7c:	00800644 	movi	r2,25
   44b80:	11001216 	blt	r2,r4,44bcc <__pack_f+0x134>
   44b84:	3904983a 	sll	r2,r7,r4
   44b88:	3106d83a 	srl	r3,r6,r4
   44b8c:	10bfffc4 	addi	r2,r2,-1
   44b90:	3084703a 	and	r2,r6,r2
   44b94:	1004c03a 	cmpne	r2,r2,zero
   44b98:	1886b03a 	or	r3,r3,r2
   44b9c:	19001fcc 	andi	r4,r3,127
   44ba0:	00801004 	movi	r2,64
   44ba4:	20800c26 	beq	r4,r2,44bd8 <__pack_f+0x140>
   44ba8:	18c00fc4 	addi	r3,r3,63
   44bac:	00900034 	movhi	r2,16384
   44bb0:	10bfffc4 	addi	r2,r2,-1
   44bb4:	180cd1fa 	srli	r6,r3,7
   44bb8:	10c7803a 	cmpltu	r3,r2,r3
   44bbc:	00802034 	movhi	r2,128
   44bc0:	10bfffc4 	addi	r2,r2,-1
   44bc4:	308c703a 	and	r6,r6,r2
   44bc8:	003fbf06 	br	44ac8 <__pack_f+0x30>
   44bcc:	0007883a 	mov	r3,zero
   44bd0:	000d883a 	mov	r6,zero
   44bd4:	003ff906 	br	44bbc <__pack_f+0x124>
   44bd8:	1880200c 	andi	r2,r3,128
   44bdc:	10000126 	beq	r2,zero,44be4 <__pack_f+0x14c>
   44be0:	1907883a 	add	r3,r3,r4
   44be4:	180cd1fa 	srli	r6,r3,7
   44be8:	00900034 	movhi	r2,16384
   44bec:	10bfffc4 	addi	r2,r2,-1
   44bf0:	10c7803a 	cmpltu	r3,r2,r3
   44bf4:	003ff106 	br	44bbc <__pack_f+0x124>

00044bf8 <__unpack_f>:
   44bf8:	21800017 	ldw	r6,0(r4)
   44bfc:	00c02034 	movhi	r3,128
   44c00:	18ffffc4 	addi	r3,r3,-1
   44c04:	3004d5fa 	srli	r2,r6,23
   44c08:	3008d7fa 	srli	r4,r6,31
   44c0c:	30ce703a 	and	r7,r6,r3
   44c10:	10c03fcc 	andi	r3,r2,255
   44c14:	29000115 	stw	r4,4(r5)
   44c18:	1800131e 	bne	r3,zero,44c68 <__unpack_f+0x70>
   44c1c:	38000f26 	beq	r7,zero,44c5c <__unpack_f+0x64>
   44c20:	380691fa 	slli	r3,r7,7
   44c24:	01bfe084 	movi	r6,-126
   44c28:	008000c4 	movi	r2,3
   44c2c:	01100034 	movhi	r4,16384
   44c30:	213fffc4 	addi	r4,r4,-1
   44c34:	28800015 	stw	r2,0(r5)
   44c38:	29800215 	stw	r6,8(r5)
   44c3c:	20c00536 	bltu	r4,r3,44c54 <__unpack_f+0x5c>
   44c40:	3005883a 	mov	r2,r6
   44c44:	18c7883a 	add	r3,r3,r3
   44c48:	10bfffc4 	addi	r2,r2,-1
   44c4c:	20fffd2e 	bgeu	r4,r3,44c44 <__unpack_f+0x4c>
   44c50:	28800215 	stw	r2,8(r5)
   44c54:	28c00315 	stw	r3,12(r5)
   44c58:	f800283a 	ret
   44c5c:	00800084 	movi	r2,2
   44c60:	28800015 	stw	r2,0(r5)
   44c64:	f800283a 	ret
   44c68:	00803fc4 	movi	r2,255
   44c6c:	18800826 	beq	r3,r2,44c90 <__unpack_f+0x98>
   44c70:	380491fa 	slli	r2,r7,7
   44c74:	18ffe044 	addi	r3,r3,-127
   44c78:	28c00215 	stw	r3,8(r5)
   44c7c:	10900034 	orhi	r2,r2,16384
   44c80:	28800315 	stw	r2,12(r5)
   44c84:	008000c4 	movi	r2,3
   44c88:	28800015 	stw	r2,0(r5)
   44c8c:	f800283a 	ret
   44c90:	3800031e 	bne	r7,zero,44ca0 <__unpack_f+0xa8>
   44c94:	00800104 	movi	r2,4
   44c98:	28800015 	stw	r2,0(r5)
   44c9c:	f800283a 	ret
   44ca0:	3080042c 	andhi	r2,r6,16
   44ca4:	10000426 	beq	r2,zero,44cb8 <__unpack_f+0xc0>
   44ca8:	00800044 	movi	r2,1
   44cac:	28800015 	stw	r2,0(r5)
   44cb0:	29c00315 	stw	r7,12(r5)
   44cb4:	f800283a 	ret
   44cb8:	28000015 	stw	zero,0(r5)
   44cbc:	003ffc06 	br	44cb0 <__unpack_f+0xb8>

00044cc0 <__fpcmp_parts_f>:
   44cc0:	21800017 	ldw	r6,0(r4)
   44cc4:	00c00044 	movi	r3,1
   44cc8:	19800a2e 	bgeu	r3,r6,44cf4 <__fpcmp_parts_f+0x34>
   44ccc:	28800017 	ldw	r2,0(r5)
   44cd0:	1880082e 	bgeu	r3,r2,44cf4 <__fpcmp_parts_f+0x34>
   44cd4:	00c00104 	movi	r3,4
   44cd8:	30c01e26 	beq	r6,r3,44d54 <__fpcmp_parts_f+0x94>
   44cdc:	10c01a26 	beq	r2,r3,44d48 <__fpcmp_parts_f+0x88>
   44ce0:	00c00084 	movi	r3,2
   44ce4:	30c00526 	beq	r6,r3,44cfc <__fpcmp_parts_f+0x3c>
   44ce8:	10c0071e 	bne	r2,r3,44d08 <__fpcmp_parts_f+0x48>
   44cec:	20800117 	ldw	r2,4(r4)
   44cf0:	1000091e 	bne	r2,zero,44d18 <__fpcmp_parts_f+0x58>
   44cf4:	00800044 	movi	r2,1
   44cf8:	f800283a 	ret
   44cfc:	10c0121e 	bne	r2,r3,44d48 <__fpcmp_parts_f+0x88>
   44d00:	0005883a 	mov	r2,zero
   44d04:	f800283a 	ret
   44d08:	20c00117 	ldw	r3,4(r4)
   44d0c:	28800117 	ldw	r2,4(r5)
   44d10:	18800326 	beq	r3,r2,44d20 <__fpcmp_parts_f+0x60>
   44d14:	183ff726 	beq	r3,zero,44cf4 <__fpcmp_parts_f+0x34>
   44d18:	00bfffc4 	movi	r2,-1
   44d1c:	f800283a 	ret
   44d20:	21800217 	ldw	r6,8(r4)
   44d24:	28800217 	ldw	r2,8(r5)
   44d28:	11bffa16 	blt	r2,r6,44d14 <__fpcmp_parts_f+0x54>
   44d2c:	30800416 	blt	r6,r2,44d40 <__fpcmp_parts_f+0x80>
   44d30:	21000317 	ldw	r4,12(r4)
   44d34:	29400317 	ldw	r5,12(r5)
   44d38:	293ff636 	bltu	r5,r4,44d14 <__fpcmp_parts_f+0x54>
   44d3c:	217ff02e 	bgeu	r4,r5,44d00 <__fpcmp_parts_f+0x40>
   44d40:	183fec1e 	bne	r3,zero,44cf4 <__fpcmp_parts_f+0x34>
   44d44:	003ff406 	br	44d18 <__fpcmp_parts_f+0x58>
   44d48:	28800117 	ldw	r2,4(r5)
   44d4c:	103fe91e 	bne	r2,zero,44cf4 <__fpcmp_parts_f+0x34>
   44d50:	003ff106 	br	44d18 <__fpcmp_parts_f+0x58>
   44d54:	11bfe51e 	bne	r2,r6,44cec <__fpcmp_parts_f+0x2c>
   44d58:	28c00117 	ldw	r3,4(r5)
   44d5c:	20800117 	ldw	r2,4(r4)
   44d60:	1885c83a 	sub	r2,r3,r2
   44d64:	f800283a 	ret

00044d68 <__make_fp>:
   44d68:	defffb04 	addi	sp,sp,-20
   44d6c:	d9000015 	stw	r4,0(sp)
   44d70:	d809883a 	mov	r4,sp
   44d74:	dfc00415 	stw	ra,16(sp)
   44d78:	d9400115 	stw	r5,4(sp)
   44d7c:	d9800215 	stw	r6,8(sp)
   44d80:	d9c00315 	stw	r7,12(sp)
   44d84:	0044a980 	call	44a98 <__pack_f>
   44d88:	dfc00417 	ldw	ra,16(sp)
   44d8c:	dec00504 	addi	sp,sp,20
   44d90:	f800283a 	ret

00044d94 <__pack_d>:
   44d94:	20c00017 	ldw	r3,0(r4)
   44d98:	defffd04 	addi	sp,sp,-12
   44d9c:	dc000015 	stw	r16,0(sp)
   44da0:	dc800215 	stw	r18,8(sp)
   44da4:	dc400115 	stw	r17,4(sp)
   44da8:	00800044 	movi	r2,1
   44dac:	22000317 	ldw	r8,12(r4)
   44db0:	001f883a 	mov	r15,zero
   44db4:	22400417 	ldw	r9,16(r4)
   44db8:	24000117 	ldw	r16,4(r4)
   44dbc:	10c0552e 	bgeu	r2,r3,44f14 <__pack_d+0x180>
   44dc0:	00800104 	movi	r2,4
   44dc4:	18804f26 	beq	r3,r2,44f04 <__pack_d+0x170>
   44dc8:	00800084 	movi	r2,2
   44dcc:	18800226 	beq	r3,r2,44dd8 <__pack_d+0x44>
   44dd0:	4244b03a 	or	r2,r8,r9
   44dd4:	10001a1e 	bne	r2,zero,44e40 <__pack_d+0xac>
   44dd8:	000d883a 	mov	r6,zero
   44ddc:	000f883a 	mov	r7,zero
   44de0:	0011883a 	mov	r8,zero
   44de4:	00800434 	movhi	r2,16
   44de8:	10bfffc4 	addi	r2,r2,-1
   44dec:	301d883a 	mov	r14,r6
   44df0:	3884703a 	and	r2,r7,r2
   44df4:	400a953a 	slli	r5,r8,20
   44df8:	79bffc2c 	andhi	r6,r15,65520
   44dfc:	308cb03a 	or	r6,r6,r2
   44e00:	00e00434 	movhi	r3,32784
   44e04:	18ffffc4 	addi	r3,r3,-1
   44e08:	800497fa 	slli	r2,r16,31
   44e0c:	30c6703a 	and	r3,r6,r3
   44e10:	1946b03a 	or	r3,r3,r5
   44e14:	01600034 	movhi	r5,32768
   44e18:	297fffc4 	addi	r5,r5,-1
   44e1c:	194a703a 	and	r5,r3,r5
   44e20:	288ab03a 	or	r5,r5,r2
   44e24:	2807883a 	mov	r3,r5
   44e28:	7005883a 	mov	r2,r14
   44e2c:	dc800217 	ldw	r18,8(sp)
   44e30:	dc400117 	ldw	r17,4(sp)
   44e34:	dc000017 	ldw	r16,0(sp)
   44e38:	dec00304 	addi	sp,sp,12
   44e3c:	f800283a 	ret
   44e40:	21000217 	ldw	r4,8(r4)
   44e44:	00bf0084 	movi	r2,-1022
   44e48:	20803f16 	blt	r4,r2,44f48 <__pack_d+0x1b4>
   44e4c:	0080ffc4 	movi	r2,1023
   44e50:	11002c16 	blt	r2,r4,44f04 <__pack_d+0x170>
   44e54:	00803fc4 	movi	r2,255
   44e58:	408c703a 	and	r6,r8,r2
   44e5c:	00802004 	movi	r2,128
   44e60:	0007883a 	mov	r3,zero
   44e64:	000f883a 	mov	r7,zero
   44e68:	2280ffc4 	addi	r10,r4,1023
   44e6c:	30801e26 	beq	r6,r2,44ee8 <__pack_d+0x154>
   44e70:	00801fc4 	movi	r2,127
   44e74:	4089883a 	add	r4,r8,r2
   44e78:	220d803a 	cmpltu	r6,r4,r8
   44e7c:	324d883a 	add	r6,r6,r9
   44e80:	2011883a 	mov	r8,r4
   44e84:	3013883a 	mov	r9,r6
   44e88:	00880034 	movhi	r2,8192
   44e8c:	10bfffc4 	addi	r2,r2,-1
   44e90:	12400d36 	bltu	r2,r9,44ec8 <__pack_d+0x134>
   44e94:	4804963a 	slli	r2,r9,24
   44e98:	400cd23a 	srli	r6,r8,8
   44e9c:	480ed23a 	srli	r7,r9,8
   44ea0:	013fffc4 	movi	r4,-1
   44ea4:	118cb03a 	or	r6,r2,r6
   44ea8:	01400434 	movhi	r5,16
   44eac:	297fffc4 	addi	r5,r5,-1
   44eb0:	3104703a 	and	r2,r6,r4
   44eb4:	3946703a 	and	r3,r7,r5
   44eb8:	5201ffcc 	andi	r8,r10,2047
   44ebc:	100d883a 	mov	r6,r2
   44ec0:	180f883a 	mov	r7,r3
   44ec4:	003fc706 	br	44de4 <__pack_d+0x50>
   44ec8:	480897fa 	slli	r4,r9,31
   44ecc:	4004d07a 	srli	r2,r8,1
   44ed0:	4806d07a 	srli	r3,r9,1
   44ed4:	52800044 	addi	r10,r10,1
   44ed8:	2084b03a 	or	r2,r4,r2
   44edc:	1011883a 	mov	r8,r2
   44ee0:	1813883a 	mov	r9,r3
   44ee4:	003feb06 	br	44e94 <__pack_d+0x100>
   44ee8:	383fe11e 	bne	r7,zero,44e70 <__pack_d+0xdc>
   44eec:	01004004 	movi	r4,256
   44ef0:	4104703a 	and	r2,r8,r4
   44ef4:	10c4b03a 	or	r2,r2,r3
   44ef8:	103fe326 	beq	r2,zero,44e88 <__pack_d+0xf4>
   44efc:	3005883a 	mov	r2,r6
   44f00:	003fdc06 	br	44e74 <__pack_d+0xe0>
   44f04:	000d883a 	mov	r6,zero
   44f08:	000f883a 	mov	r7,zero
   44f0c:	0201ffc4 	movi	r8,2047
   44f10:	003fb406 	br	44de4 <__pack_d+0x50>
   44f14:	0005883a 	mov	r2,zero
   44f18:	00c00234 	movhi	r3,8
   44f1c:	408cb03a 	or	r6,r8,r2
   44f20:	48ceb03a 	or	r7,r9,r3
   44f24:	013fffc4 	movi	r4,-1
   44f28:	01400434 	movhi	r5,16
   44f2c:	297fffc4 	addi	r5,r5,-1
   44f30:	3104703a 	and	r2,r6,r4
   44f34:	3946703a 	and	r3,r7,r5
   44f38:	100d883a 	mov	r6,r2
   44f3c:	180f883a 	mov	r7,r3
   44f40:	0201ffc4 	movi	r8,2047
   44f44:	003fa706 	br	44de4 <__pack_d+0x50>
   44f48:	1109c83a 	sub	r4,r2,r4
   44f4c:	00800e04 	movi	r2,56
   44f50:	11004316 	blt	r2,r4,45060 <__pack_d+0x2cc>
   44f54:	21fff804 	addi	r7,r4,-32
   44f58:	38004516 	blt	r7,zero,45070 <__pack_d+0x2dc>
   44f5c:	49d8d83a 	srl	r12,r9,r7
   44f60:	001b883a 	mov	r13,zero
   44f64:	0023883a 	mov	r17,zero
   44f68:	01400044 	movi	r5,1
   44f6c:	0025883a 	mov	r18,zero
   44f70:	38004716 	blt	r7,zero,45090 <__pack_d+0x2fc>
   44f74:	29d6983a 	sll	r11,r5,r7
   44f78:	0015883a 	mov	r10,zero
   44f7c:	00bfffc4 	movi	r2,-1
   44f80:	5089883a 	add	r4,r10,r2
   44f84:	588b883a 	add	r5,r11,r2
   44f88:	228d803a 	cmpltu	r6,r4,r10
   44f8c:	314b883a 	add	r5,r6,r5
   44f90:	4104703a 	and	r2,r8,r4
   44f94:	4946703a 	and	r3,r9,r5
   44f98:	10c4b03a 	or	r2,r2,r3
   44f9c:	10000226 	beq	r2,zero,44fa8 <__pack_d+0x214>
   44fa0:	04400044 	movi	r17,1
   44fa4:	0025883a 	mov	r18,zero
   44fa8:	00803fc4 	movi	r2,255
   44fac:	644eb03a 	or	r7,r12,r17
   44fb0:	3892703a 	and	r9,r7,r2
   44fb4:	00802004 	movi	r2,128
   44fb8:	6c90b03a 	or	r8,r13,r18
   44fbc:	0015883a 	mov	r10,zero
   44fc0:	48801626 	beq	r9,r2,4501c <__pack_d+0x288>
   44fc4:	01001fc4 	movi	r4,127
   44fc8:	3905883a 	add	r2,r7,r4
   44fcc:	11cd803a 	cmpltu	r6,r2,r7
   44fd0:	320d883a 	add	r6,r6,r8
   44fd4:	100f883a 	mov	r7,r2
   44fd8:	00840034 	movhi	r2,4096
   44fdc:	10bfffc4 	addi	r2,r2,-1
   44fe0:	3011883a 	mov	r8,r6
   44fe4:	0007883a 	mov	r3,zero
   44fe8:	11801b36 	bltu	r2,r6,45058 <__pack_d+0x2c4>
   44fec:	4004963a 	slli	r2,r8,24
   44ff0:	3808d23a 	srli	r4,r7,8
   44ff4:	400ad23a 	srli	r5,r8,8
   44ff8:	1813883a 	mov	r9,r3
   44ffc:	1108b03a 	or	r4,r2,r4
   45000:	00bfffc4 	movi	r2,-1
   45004:	00c00434 	movhi	r3,16
   45008:	18ffffc4 	addi	r3,r3,-1
   4500c:	208c703a 	and	r6,r4,r2
   45010:	28ce703a 	and	r7,r5,r3
   45014:	4a01ffcc 	andi	r8,r9,2047
   45018:	003f7206 	br	44de4 <__pack_d+0x50>
   4501c:	503fe91e 	bne	r10,zero,44fc4 <__pack_d+0x230>
   45020:	01004004 	movi	r4,256
   45024:	3904703a 	and	r2,r7,r4
   45028:	0007883a 	mov	r3,zero
   4502c:	10c4b03a 	or	r2,r2,r3
   45030:	10000626 	beq	r2,zero,4504c <__pack_d+0x2b8>
   45034:	3a45883a 	add	r2,r7,r9
   45038:	11cd803a 	cmpltu	r6,r2,r7
   4503c:	320d883a 	add	r6,r6,r8
   45040:	100f883a 	mov	r7,r2
   45044:	3011883a 	mov	r8,r6
   45048:	0007883a 	mov	r3,zero
   4504c:	00840034 	movhi	r2,4096
   45050:	10bfffc4 	addi	r2,r2,-1
   45054:	123fe52e 	bgeu	r2,r8,44fec <__pack_d+0x258>
   45058:	00c00044 	movi	r3,1
   4505c:	003fe306 	br	44fec <__pack_d+0x258>
   45060:	0009883a 	mov	r4,zero
   45064:	0013883a 	mov	r9,zero
   45068:	000b883a 	mov	r5,zero
   4506c:	003fe406 	br	45000 <__pack_d+0x26c>
   45070:	4a47883a 	add	r3,r9,r9
   45074:	008007c4 	movi	r2,31
   45078:	1105c83a 	sub	r2,r2,r4
   4507c:	1886983a 	sll	r3,r3,r2
   45080:	4118d83a 	srl	r12,r8,r4
   45084:	491ad83a 	srl	r13,r9,r4
   45088:	1b18b03a 	or	r12,r3,r12
   4508c:	003fb506 	br	44f64 <__pack_d+0x1d0>
   45090:	2806d07a 	srli	r3,r5,1
   45094:	008007c4 	movi	r2,31
   45098:	1105c83a 	sub	r2,r2,r4
   4509c:	1896d83a 	srl	r11,r3,r2
   450a0:	2914983a 	sll	r10,r5,r4
   450a4:	003fb506 	br	44f7c <__pack_d+0x1e8>

000450a8 <__unpack_d>:
   450a8:	20c00117 	ldw	r3,4(r4)
   450ac:	22400017 	ldw	r9,0(r4)
   450b0:	00800434 	movhi	r2,16
   450b4:	10bfffc4 	addi	r2,r2,-1
   450b8:	1808d53a 	srli	r4,r3,20
   450bc:	180cd7fa 	srli	r6,r3,31
   450c0:	1894703a 	and	r10,r3,r2
   450c4:	2201ffcc 	andi	r8,r4,2047
   450c8:	281b883a 	mov	r13,r5
   450cc:	4817883a 	mov	r11,r9
   450d0:	29800115 	stw	r6,4(r5)
   450d4:	5019883a 	mov	r12,r10
   450d8:	40001e1e 	bne	r8,zero,45154 <__unpack_d+0xac>
   450dc:	4a84b03a 	or	r2,r9,r10
   450e0:	10001926 	beq	r2,zero,45148 <__unpack_d+0xa0>
   450e4:	4804d63a 	srli	r2,r9,24
   450e8:	500c923a 	slli	r6,r10,8
   450ec:	013f0084 	movi	r4,-1022
   450f0:	00c40034 	movhi	r3,4096
   450f4:	18ffffc4 	addi	r3,r3,-1
   450f8:	118cb03a 	or	r6,r2,r6
   450fc:	008000c4 	movi	r2,3
   45100:	480a923a 	slli	r5,r9,8
   45104:	68800015 	stw	r2,0(r13)
   45108:	69000215 	stw	r4,8(r13)
   4510c:	19800b36 	bltu	r3,r6,4513c <__unpack_d+0x94>
   45110:	200f883a 	mov	r7,r4
   45114:	1811883a 	mov	r8,r3
   45118:	2945883a 	add	r2,r5,r5
   4511c:	1149803a 	cmpltu	r4,r2,r5
   45120:	3187883a 	add	r3,r6,r6
   45124:	20c9883a 	add	r4,r4,r3
   45128:	100b883a 	mov	r5,r2
   4512c:	200d883a 	mov	r6,r4
   45130:	39ffffc4 	addi	r7,r7,-1
   45134:	413ff82e 	bgeu	r8,r4,45118 <__unpack_d+0x70>
   45138:	69c00215 	stw	r7,8(r13)
   4513c:	69800415 	stw	r6,16(r13)
   45140:	69400315 	stw	r5,12(r13)
   45144:	f800283a 	ret
   45148:	00800084 	movi	r2,2
   4514c:	28800015 	stw	r2,0(r5)
   45150:	f800283a 	ret
   45154:	0081ffc4 	movi	r2,2047
   45158:	40800f26 	beq	r8,r2,45198 <__unpack_d+0xf0>
   4515c:	480cd63a 	srli	r6,r9,24
   45160:	5006923a 	slli	r3,r10,8
   45164:	4804923a 	slli	r2,r9,8
   45168:	0009883a 	mov	r4,zero
   4516c:	30c6b03a 	or	r3,r6,r3
   45170:	01440034 	movhi	r5,4096
   45174:	110cb03a 	or	r6,r2,r4
   45178:	423f0044 	addi	r8,r8,-1023
   4517c:	194eb03a 	or	r7,r3,r5
   45180:	008000c4 	movi	r2,3
   45184:	69c00415 	stw	r7,16(r13)
   45188:	6a000215 	stw	r8,8(r13)
   4518c:	68800015 	stw	r2,0(r13)
   45190:	69800315 	stw	r6,12(r13)
   45194:	f800283a 	ret
   45198:	4a84b03a 	or	r2,r9,r10
   4519c:	1000031e 	bne	r2,zero,451ac <__unpack_d+0x104>
   451a0:	00800104 	movi	r2,4
   451a4:	28800015 	stw	r2,0(r5)
   451a8:	f800283a 	ret
   451ac:	0009883a 	mov	r4,zero
   451b0:	01400234 	movhi	r5,8
   451b4:	4904703a 	and	r2,r9,r4
   451b8:	5146703a 	and	r3,r10,r5
   451bc:	10c4b03a 	or	r2,r2,r3
   451c0:	10000526 	beq	r2,zero,451d8 <__unpack_d+0x130>
   451c4:	00800044 	movi	r2,1
   451c8:	68800015 	stw	r2,0(r13)
   451cc:	6b000415 	stw	r12,16(r13)
   451d0:	6ac00315 	stw	r11,12(r13)
   451d4:	f800283a 	ret
   451d8:	68000015 	stw	zero,0(r13)
   451dc:	003ffb06 	br	451cc <__unpack_d+0x124>

000451e0 <abort>:
   451e0:	deffff04 	addi	sp,sp,-4
   451e4:	01000184 	movi	r4,6
   451e8:	dfc00015 	stw	ra,0(sp)
   451ec:	0045abc0 	call	45abc <raise>
   451f0:	01000044 	movi	r4,1
   451f4:	00462300 	call	46230 <_exit>

000451f8 <free>:
   451f8:	00800134 	movhi	r2,4
   451fc:	109f3004 	addi	r2,r2,31936
   45200:	200b883a 	mov	r5,r4
   45204:	11000017 	ldw	r4,0(r2)
   45208:	0045edc1 	jmpi	45edc <_free_r>

0004520c <malloc>:
   4520c:	00800134 	movhi	r2,4
   45210:	109f3004 	addi	r2,r2,31936
   45214:	200b883a 	mov	r5,r4
   45218:	11000017 	ldw	r4,0(r2)
   4521c:	00452201 	jmpi	45220 <_malloc_r>

00045220 <_malloc_r>:
   45220:	defff604 	addi	sp,sp,-40
   45224:	28c002c4 	addi	r3,r5,11
   45228:	00800584 	movi	r2,22
   4522c:	dc800215 	stw	r18,8(sp)
   45230:	dfc00915 	stw	ra,36(sp)
   45234:	df000815 	stw	fp,32(sp)
   45238:	ddc00715 	stw	r23,28(sp)
   4523c:	dd800615 	stw	r22,24(sp)
   45240:	dd400515 	stw	r21,20(sp)
   45244:	dd000415 	stw	r20,16(sp)
   45248:	dcc00315 	stw	r19,12(sp)
   4524c:	dc400115 	stw	r17,4(sp)
   45250:	dc000015 	stw	r16,0(sp)
   45254:	2025883a 	mov	r18,r4
   45258:	10c01236 	bltu	r2,r3,452a4 <_malloc_r+0x84>
   4525c:	04400404 	movi	r17,16
   45260:	8940142e 	bgeu	r17,r5,452b4 <_malloc_r+0x94>
   45264:	00800304 	movi	r2,12
   45268:	0007883a 	mov	r3,zero
   4526c:	90800015 	stw	r2,0(r18)
   45270:	1805883a 	mov	r2,r3
   45274:	dfc00917 	ldw	ra,36(sp)
   45278:	df000817 	ldw	fp,32(sp)
   4527c:	ddc00717 	ldw	r23,28(sp)
   45280:	dd800617 	ldw	r22,24(sp)
   45284:	dd400517 	ldw	r21,20(sp)
   45288:	dd000417 	ldw	r20,16(sp)
   4528c:	dcc00317 	ldw	r19,12(sp)
   45290:	dc800217 	ldw	r18,8(sp)
   45294:	dc400117 	ldw	r17,4(sp)
   45298:	dc000017 	ldw	r16,0(sp)
   4529c:	dec00a04 	addi	sp,sp,40
   452a0:	f800283a 	ret
   452a4:	00bffe04 	movi	r2,-8
   452a8:	18a2703a 	and	r17,r3,r2
   452ac:	883fed16 	blt	r17,zero,45264 <_malloc_r+0x44>
   452b0:	897fec36 	bltu	r17,r5,45264 <_malloc_r+0x44>
   452b4:	9009883a 	mov	r4,r18
   452b8:	00465bc0 	call	465bc <__malloc_lock>
   452bc:	00807dc4 	movi	r2,503
   452c0:	14402b2e 	bgeu	r2,r17,45370 <_malloc_r+0x150>
   452c4:	8806d27a 	srli	r3,r17,9
   452c8:	18003f1e 	bne	r3,zero,453c8 <_malloc_r+0x1a8>
   452cc:	880cd0fa 	srli	r6,r17,3
   452d0:	300490fa 	slli	r2,r6,3
   452d4:	02c00134 	movhi	r11,4
   452d8:	5add8304 	addi	r11,r11,30220
   452dc:	12cb883a 	add	r5,r2,r11
   452e0:	2c000317 	ldw	r16,12(r5)
   452e4:	580f883a 	mov	r7,r11
   452e8:	2c00041e 	bne	r5,r16,452fc <_malloc_r+0xdc>
   452ec:	00000a06 	br	45318 <_malloc_r+0xf8>
   452f0:	1800860e 	bge	r3,zero,4550c <_malloc_r+0x2ec>
   452f4:	84000317 	ldw	r16,12(r16)
   452f8:	2c000726 	beq	r5,r16,45318 <_malloc_r+0xf8>
   452fc:	80800117 	ldw	r2,4(r16)
   45300:	00ffff04 	movi	r3,-4
   45304:	10c8703a 	and	r4,r2,r3
   45308:	2447c83a 	sub	r3,r4,r17
   4530c:	008003c4 	movi	r2,15
   45310:	10fff70e 	bge	r2,r3,452f0 <_malloc_r+0xd0>
   45314:	31bfffc4 	addi	r6,r6,-1
   45318:	32400044 	addi	r9,r6,1
   4531c:	02800134 	movhi	r10,4
   45320:	529d8504 	addi	r10,r10,30228
   45324:	54000217 	ldw	r16,8(r10)
   45328:	8280a026 	beq	r16,r10,455ac <_malloc_r+0x38c>
   4532c:	80800117 	ldw	r2,4(r16)
   45330:	00ffff04 	movi	r3,-4
   45334:	10ca703a 	and	r5,r2,r3
   45338:	2c4dc83a 	sub	r6,r5,r17
   4533c:	008003c4 	movi	r2,15
   45340:	11808316 	blt	r2,r6,45550 <_malloc_r+0x330>
   45344:	52800315 	stw	r10,12(r10)
   45348:	52800215 	stw	r10,8(r10)
   4534c:	30002916 	blt	r6,zero,453f4 <_malloc_r+0x1d4>
   45350:	8147883a 	add	r3,r16,r5
   45354:	18800117 	ldw	r2,4(r3)
   45358:	9009883a 	mov	r4,r18
   4535c:	10800054 	ori	r2,r2,1
   45360:	18800115 	stw	r2,4(r3)
   45364:	00465dc0 	call	465dc <__malloc_unlock>
   45368:	80c00204 	addi	r3,r16,8
   4536c:	003fc006 	br	45270 <_malloc_r+0x50>
   45370:	02c00134 	movhi	r11,4
   45374:	5add8304 	addi	r11,r11,30220
   45378:	8ac5883a 	add	r2,r17,r11
   4537c:	14000317 	ldw	r16,12(r2)
   45380:	580f883a 	mov	r7,r11
   45384:	8806d0fa 	srli	r3,r17,3
   45388:	14006c26 	beq	r2,r16,4553c <_malloc_r+0x31c>
   4538c:	80c00117 	ldw	r3,4(r16)
   45390:	00bfff04 	movi	r2,-4
   45394:	81800317 	ldw	r6,12(r16)
   45398:	1886703a 	and	r3,r3,r2
   4539c:	80c7883a 	add	r3,r16,r3
   453a0:	18800117 	ldw	r2,4(r3)
   453a4:	81400217 	ldw	r5,8(r16)
   453a8:	9009883a 	mov	r4,r18
   453ac:	10800054 	ori	r2,r2,1
   453b0:	18800115 	stw	r2,4(r3)
   453b4:	31400215 	stw	r5,8(r6)
   453b8:	29800315 	stw	r6,12(r5)
   453bc:	00465dc0 	call	465dc <__malloc_unlock>
   453c0:	80c00204 	addi	r3,r16,8
   453c4:	003faa06 	br	45270 <_malloc_r+0x50>
   453c8:	00800104 	movi	r2,4
   453cc:	10c0052e 	bgeu	r2,r3,453e4 <_malloc_r+0x1c4>
   453d0:	00800504 	movi	r2,20
   453d4:	10c07836 	bltu	r2,r3,455b8 <_malloc_r+0x398>
   453d8:	198016c4 	addi	r6,r3,91
   453dc:	300490fa 	slli	r2,r6,3
   453e0:	003fbc06 	br	452d4 <_malloc_r+0xb4>
   453e4:	8804d1ba 	srli	r2,r17,6
   453e8:	11800e04 	addi	r6,r2,56
   453ec:	300490fa 	slli	r2,r6,3
   453f0:	003fb806 	br	452d4 <_malloc_r+0xb4>
   453f4:	00807fc4 	movi	r2,511
   453f8:	1140bb36 	bltu	r2,r5,456e8 <_malloc_r+0x4c8>
   453fc:	2806d0fa 	srli	r3,r5,3
   45400:	573ffe04 	addi	fp,r10,-8
   45404:	00800044 	movi	r2,1
   45408:	180890fa 	slli	r4,r3,3
   4540c:	1807d0ba 	srai	r3,r3,2
   45410:	e1c00117 	ldw	r7,4(fp)
   45414:	5909883a 	add	r4,r11,r4
   45418:	21400217 	ldw	r5,8(r4)
   4541c:	10c4983a 	sll	r2,r2,r3
   45420:	81000315 	stw	r4,12(r16)
   45424:	81400215 	stw	r5,8(r16)
   45428:	388eb03a 	or	r7,r7,r2
   4542c:	2c000315 	stw	r16,12(r5)
   45430:	24000215 	stw	r16,8(r4)
   45434:	e1c00115 	stw	r7,4(fp)
   45438:	4807883a 	mov	r3,r9
   4543c:	4800cd16 	blt	r9,zero,45774 <_malloc_r+0x554>
   45440:	1807d0ba 	srai	r3,r3,2
   45444:	00800044 	movi	r2,1
   45448:	10c8983a 	sll	r4,r2,r3
   4544c:	39004436 	bltu	r7,r4,45560 <_malloc_r+0x340>
   45450:	21c4703a 	and	r2,r4,r7
   45454:	10000a1e 	bne	r2,zero,45480 <_malloc_r+0x260>
   45458:	2109883a 	add	r4,r4,r4
   4545c:	00bfff04 	movi	r2,-4
   45460:	4884703a 	and	r2,r9,r2
   45464:	3906703a 	and	r3,r7,r4
   45468:	12400104 	addi	r9,r2,4
   4546c:	1800041e 	bne	r3,zero,45480 <_malloc_r+0x260>
   45470:	2109883a 	add	r4,r4,r4
   45474:	3904703a 	and	r2,r7,r4
   45478:	4a400104 	addi	r9,r9,4
   4547c:	103ffc26 	beq	r2,zero,45470 <_malloc_r+0x250>
   45480:	480490fa 	slli	r2,r9,3
   45484:	4819883a 	mov	r12,r9
   45488:	023fff04 	movi	r8,-4
   4548c:	589b883a 	add	r13,r11,r2
   45490:	6807883a 	mov	r3,r13
   45494:	014003c4 	movi	r5,15
   45498:	1c000317 	ldw	r16,12(r3)
   4549c:	1c00041e 	bne	r3,r16,454b0 <_malloc_r+0x290>
   454a0:	0000a706 	br	45740 <_malloc_r+0x520>
   454a4:	3000ab0e 	bge	r6,zero,45754 <_malloc_r+0x534>
   454a8:	84000317 	ldw	r16,12(r16)
   454ac:	1c00a426 	beq	r3,r16,45740 <_malloc_r+0x520>
   454b0:	80800117 	ldw	r2,4(r16)
   454b4:	1204703a 	and	r2,r2,r8
   454b8:	144dc83a 	sub	r6,r2,r17
   454bc:	29bff90e 	bge	r5,r6,454a4 <_malloc_r+0x284>
   454c0:	81000317 	ldw	r4,12(r16)
   454c4:	80c00217 	ldw	r3,8(r16)
   454c8:	89400054 	ori	r5,r17,1
   454cc:	8445883a 	add	r2,r16,r17
   454d0:	20c00215 	stw	r3,8(r4)
   454d4:	19000315 	stw	r4,12(r3)
   454d8:	81400115 	stw	r5,4(r16)
   454dc:	1187883a 	add	r3,r2,r6
   454e0:	31000054 	ori	r4,r6,1
   454e4:	50800315 	stw	r2,12(r10)
   454e8:	50800215 	stw	r2,8(r10)
   454ec:	19800015 	stw	r6,0(r3)
   454f0:	11000115 	stw	r4,4(r2)
   454f4:	12800215 	stw	r10,8(r2)
   454f8:	12800315 	stw	r10,12(r2)
   454fc:	9009883a 	mov	r4,r18
   45500:	00465dc0 	call	465dc <__malloc_unlock>
   45504:	80c00204 	addi	r3,r16,8
   45508:	003f5906 	br	45270 <_malloc_r+0x50>
   4550c:	8109883a 	add	r4,r16,r4
   45510:	20800117 	ldw	r2,4(r4)
   45514:	80c00217 	ldw	r3,8(r16)
   45518:	81400317 	ldw	r5,12(r16)
   4551c:	10800054 	ori	r2,r2,1
   45520:	20800115 	stw	r2,4(r4)
   45524:	28c00215 	stw	r3,8(r5)
   45528:	19400315 	stw	r5,12(r3)
   4552c:	9009883a 	mov	r4,r18
   45530:	00465dc0 	call	465dc <__malloc_unlock>
   45534:	80c00204 	addi	r3,r16,8
   45538:	003f4d06 	br	45270 <_malloc_r+0x50>
   4553c:	80800204 	addi	r2,r16,8
   45540:	14000317 	ldw	r16,12(r2)
   45544:	143f911e 	bne	r2,r16,4538c <_malloc_r+0x16c>
   45548:	1a400084 	addi	r9,r3,2
   4554c:	003f7306 	br	4531c <_malloc_r+0xfc>
   45550:	88c00054 	ori	r3,r17,1
   45554:	8445883a 	add	r2,r16,r17
   45558:	80c00115 	stw	r3,4(r16)
   4555c:	003fdf06 	br	454dc <_malloc_r+0x2bc>
   45560:	e4000217 	ldw	r16,8(fp)
   45564:	00bfff04 	movi	r2,-4
   45568:	80c00117 	ldw	r3,4(r16)
   4556c:	802d883a 	mov	r22,r16
   45570:	18aa703a 	and	r21,r3,r2
   45574:	ac401636 	bltu	r21,r17,455d0 <_malloc_r+0x3b0>
   45578:	ac49c83a 	sub	r4,r21,r17
   4557c:	008003c4 	movi	r2,15
   45580:	1100130e 	bge	r2,r4,455d0 <_malloc_r+0x3b0>
   45584:	88800054 	ori	r2,r17,1
   45588:	8447883a 	add	r3,r16,r17
   4558c:	80800115 	stw	r2,4(r16)
   45590:	20800054 	ori	r2,r4,1
   45594:	18800115 	stw	r2,4(r3)
   45598:	e0c00215 	stw	r3,8(fp)
   4559c:	9009883a 	mov	r4,r18
   455a0:	00465dc0 	call	465dc <__malloc_unlock>
   455a4:	80c00204 	addi	r3,r16,8
   455a8:	003f3106 	br	45270 <_malloc_r+0x50>
   455ac:	39c00117 	ldw	r7,4(r7)
   455b0:	573ffe04 	addi	fp,r10,-8
   455b4:	003fa006 	br	45438 <_malloc_r+0x218>
   455b8:	00801504 	movi	r2,84
   455bc:	10c06736 	bltu	r2,r3,4575c <_malloc_r+0x53c>
   455c0:	8804d33a 	srli	r2,r17,12
   455c4:	11801b84 	addi	r6,r2,110
   455c8:	300490fa 	slli	r2,r6,3
   455cc:	003f4106 	br	452d4 <_malloc_r+0xb4>
   455d0:	d0a1d617 	ldw	r2,-30888(gp)
   455d4:	d0e00817 	ldw	r3,-32736(gp)
   455d8:	053fffc4 	movi	r20,-1
   455dc:	10800404 	addi	r2,r2,16
   455e0:	88a7883a 	add	r19,r17,r2
   455e4:	1d000326 	beq	r3,r20,455f4 <_malloc_r+0x3d4>
   455e8:	98c01fc4 	addi	r3,r19,127
   455ec:	00bfe004 	movi	r2,-128
   455f0:	18a6703a 	and	r19,r3,r2
   455f4:	9009883a 	mov	r4,r18
   455f8:	980b883a 	mov	r5,r19
   455fc:	00459800 	call	45980 <_sbrk_r>
   45600:	1009883a 	mov	r4,r2
   45604:	15000426 	beq	r2,r20,45618 <_malloc_r+0x3f8>
   45608:	854b883a 	add	r5,r16,r21
   4560c:	1029883a 	mov	r20,r2
   45610:	11405a2e 	bgeu	r2,r5,4577c <_malloc_r+0x55c>
   45614:	87000c26 	beq	r16,fp,45648 <_malloc_r+0x428>
   45618:	e4000217 	ldw	r16,8(fp)
   4561c:	80c00117 	ldw	r3,4(r16)
   45620:	00bfff04 	movi	r2,-4
   45624:	1884703a 	and	r2,r3,r2
   45628:	14400336 	bltu	r2,r17,45638 <_malloc_r+0x418>
   4562c:	1449c83a 	sub	r4,r2,r17
   45630:	008003c4 	movi	r2,15
   45634:	113fd316 	blt	r2,r4,45584 <_malloc_r+0x364>
   45638:	9009883a 	mov	r4,r18
   4563c:	00465dc0 	call	465dc <__malloc_unlock>
   45640:	0007883a 	mov	r3,zero
   45644:	003f0a06 	br	45270 <_malloc_r+0x50>
   45648:	05c00174 	movhi	r23,5
   4564c:	bde30b04 	addi	r23,r23,-29652
   45650:	b8800017 	ldw	r2,0(r23)
   45654:	988d883a 	add	r6,r19,r2
   45658:	b9800015 	stw	r6,0(r23)
   4565c:	d0e00817 	ldw	r3,-32736(gp)
   45660:	00bfffc4 	movi	r2,-1
   45664:	18808e26 	beq	r3,r2,458a0 <_malloc_r+0x680>
   45668:	2145c83a 	sub	r2,r4,r5
   4566c:	3085883a 	add	r2,r6,r2
   45670:	b8800015 	stw	r2,0(r23)
   45674:	20c001cc 	andi	r3,r4,7
   45678:	18005f1e 	bne	r3,zero,457f8 <_malloc_r+0x5d8>
   4567c:	000b883a 	mov	r5,zero
   45680:	a4c5883a 	add	r2,r20,r19
   45684:	10801fcc 	andi	r2,r2,127
   45688:	00c02004 	movi	r3,128
   4568c:	1887c83a 	sub	r3,r3,r2
   45690:	28e7883a 	add	r19,r5,r3
   45694:	9009883a 	mov	r4,r18
   45698:	980b883a 	mov	r5,r19
   4569c:	00459800 	call	45980 <_sbrk_r>
   456a0:	1007883a 	mov	r3,r2
   456a4:	00bfffc4 	movi	r2,-1
   456a8:	18807a26 	beq	r3,r2,45894 <_malloc_r+0x674>
   456ac:	1d05c83a 	sub	r2,r3,r20
   456b0:	9885883a 	add	r2,r19,r2
   456b4:	10c00054 	ori	r3,r2,1
   456b8:	b8800017 	ldw	r2,0(r23)
   456bc:	a021883a 	mov	r16,r20
   456c0:	a0c00115 	stw	r3,4(r20)
   456c4:	9885883a 	add	r2,r19,r2
   456c8:	b8800015 	stw	r2,0(r23)
   456cc:	e5000215 	stw	r20,8(fp)
   456d0:	b7003626 	beq	r22,fp,457ac <_malloc_r+0x58c>
   456d4:	018003c4 	movi	r6,15
   456d8:	35404b36 	bltu	r6,r21,45808 <_malloc_r+0x5e8>
   456dc:	00800044 	movi	r2,1
   456e0:	a0800115 	stw	r2,4(r20)
   456e4:	003fcd06 	br	4561c <_malloc_r+0x3fc>
   456e8:	2808d27a 	srli	r4,r5,9
   456ec:	2000371e 	bne	r4,zero,457cc <_malloc_r+0x5ac>
   456f0:	2808d0fa 	srli	r4,r5,3
   456f4:	200690fa 	slli	r3,r4,3
   456f8:	58d1883a 	add	r8,r11,r3
   456fc:	41800217 	ldw	r6,8(r8)
   45700:	41805b26 	beq	r8,r6,45870 <_malloc_r+0x650>
   45704:	30800117 	ldw	r2,4(r6)
   45708:	00ffff04 	movi	r3,-4
   4570c:	10c4703a 	and	r2,r2,r3
   45710:	2880022e 	bgeu	r5,r2,4571c <_malloc_r+0x4fc>
   45714:	31800217 	ldw	r6,8(r6)
   45718:	41bffa1e 	bne	r8,r6,45704 <_malloc_r+0x4e4>
   4571c:	32000317 	ldw	r8,12(r6)
   45720:	39c00117 	ldw	r7,4(r7)
   45724:	82000315 	stw	r8,12(r16)
   45728:	81800215 	stw	r6,8(r16)
   4572c:	07000134 	movhi	fp,4
   45730:	e71d8304 	addi	fp,fp,30220
   45734:	34000315 	stw	r16,12(r6)
   45738:	44000215 	stw	r16,8(r8)
   4573c:	003f3e06 	br	45438 <_malloc_r+0x218>
   45740:	63000044 	addi	r12,r12,1
   45744:	608000cc 	andi	r2,r12,3
   45748:	10005d26 	beq	r2,zero,458c0 <_malloc_r+0x6a0>
   4574c:	18c00204 	addi	r3,r3,8
   45750:	003f5106 	br	45498 <_malloc_r+0x278>
   45754:	8089883a 	add	r4,r16,r2
   45758:	003f6d06 	br	45510 <_malloc_r+0x2f0>
   4575c:	00805504 	movi	r2,340
   45760:	10c02036 	bltu	r2,r3,457e4 <_malloc_r+0x5c4>
   45764:	8804d3fa 	srli	r2,r17,15
   45768:	11801dc4 	addi	r6,r2,119
   4576c:	300490fa 	slli	r2,r6,3
   45770:	003ed806 	br	452d4 <_malloc_r+0xb4>
   45774:	48c000c4 	addi	r3,r9,3
   45778:	003f3106 	br	45440 <_malloc_r+0x220>
   4577c:	05c00174 	movhi	r23,5
   45780:	bde30b04 	addi	r23,r23,-29652
   45784:	b8800017 	ldw	r2,0(r23)
   45788:	988d883a 	add	r6,r19,r2
   4578c:	b9800015 	stw	r6,0(r23)
   45790:	293fb21e 	bne	r5,r4,4565c <_malloc_r+0x43c>
   45794:	20801fcc 	andi	r2,r4,127
   45798:	103fb01e 	bne	r2,zero,4565c <_malloc_r+0x43c>
   4579c:	e4000217 	ldw	r16,8(fp)
   457a0:	9d45883a 	add	r2,r19,r21
   457a4:	10800054 	ori	r2,r2,1
   457a8:	80800115 	stw	r2,4(r16)
   457ac:	b8c00017 	ldw	r3,0(r23)
   457b0:	d0a1d717 	ldw	r2,-30884(gp)
   457b4:	10c0012e 	bgeu	r2,r3,457bc <_malloc_r+0x59c>
   457b8:	d0e1d715 	stw	r3,-30884(gp)
   457bc:	d0a1d817 	ldw	r2,-30880(gp)
   457c0:	10ff962e 	bgeu	r2,r3,4561c <_malloc_r+0x3fc>
   457c4:	d0e1d815 	stw	r3,-30880(gp)
   457c8:	003f9406 	br	4561c <_malloc_r+0x3fc>
   457cc:	00800104 	movi	r2,4
   457d0:	11001e36 	bltu	r2,r4,4584c <_malloc_r+0x62c>
   457d4:	2804d1ba 	srli	r2,r5,6
   457d8:	11000e04 	addi	r4,r2,56
   457dc:	200690fa 	slli	r3,r4,3
   457e0:	003fc506 	br	456f8 <_malloc_r+0x4d8>
   457e4:	00815504 	movi	r2,1364
   457e8:	10c01d2e 	bgeu	r2,r3,45860 <_malloc_r+0x640>
   457ec:	01801f84 	movi	r6,126
   457f0:	0080fc04 	movi	r2,1008
   457f4:	003eb706 	br	452d4 <_malloc_r+0xb4>
   457f8:	00800204 	movi	r2,8
   457fc:	10cbc83a 	sub	r5,r2,r3
   45800:	2169883a 	add	r20,r4,r5
   45804:	003f9e06 	br	45680 <_malloc_r+0x460>
   45808:	00bffe04 	movi	r2,-8
   4580c:	a93ffd04 	addi	r4,r21,-12
   45810:	2088703a 	and	r4,r4,r2
   45814:	b10b883a 	add	r5,r22,r4
   45818:	00c00144 	movi	r3,5
   4581c:	28c00215 	stw	r3,8(r5)
   45820:	28c00115 	stw	r3,4(r5)
   45824:	b0800117 	ldw	r2,4(r22)
   45828:	1080004c 	andi	r2,r2,1
   4582c:	2084b03a 	or	r2,r4,r2
   45830:	b0800115 	stw	r2,4(r22)
   45834:	313fdd2e 	bgeu	r6,r4,457ac <_malloc_r+0x58c>
   45838:	b1400204 	addi	r5,r22,8
   4583c:	9009883a 	mov	r4,r18
   45840:	0045edc0 	call	45edc <_free_r>
   45844:	e4000217 	ldw	r16,8(fp)
   45848:	003fd806 	br	457ac <_malloc_r+0x58c>
   4584c:	00800504 	movi	r2,20
   45850:	11001536 	bltu	r2,r4,458a8 <_malloc_r+0x688>
   45854:	210016c4 	addi	r4,r4,91
   45858:	200690fa 	slli	r3,r4,3
   4585c:	003fa606 	br	456f8 <_malloc_r+0x4d8>
   45860:	8804d4ba 	srli	r2,r17,18
   45864:	11801f04 	addi	r6,r2,124
   45868:	300490fa 	slli	r2,r6,3
   4586c:	003e9906 	br	452d4 <_malloc_r+0xb4>
   45870:	2009d0ba 	srai	r4,r4,2
   45874:	01400134 	movhi	r5,4
   45878:	295d8304 	addi	r5,r5,30220
   4587c:	00c00044 	movi	r3,1
   45880:	28800117 	ldw	r2,4(r5)
   45884:	1906983a 	sll	r3,r3,r4
   45888:	10c4b03a 	or	r2,r2,r3
   4588c:	28800115 	stw	r2,4(r5)
   45890:	003fa306 	br	45720 <_malloc_r+0x500>
   45894:	0027883a 	mov	r19,zero
   45898:	00c00044 	movi	r3,1
   4589c:	003f8606 	br	456b8 <_malloc_r+0x498>
   458a0:	d1200815 	stw	r4,-32736(gp)
   458a4:	003f7306 	br	45674 <_malloc_r+0x454>
   458a8:	00801504 	movi	r2,84
   458ac:	11001936 	bltu	r2,r4,45914 <_malloc_r+0x6f4>
   458b0:	2804d33a 	srli	r2,r5,12
   458b4:	11001b84 	addi	r4,r2,110
   458b8:	200690fa 	slli	r3,r4,3
   458bc:	003f8e06 	br	456f8 <_malloc_r+0x4d8>
   458c0:	480b883a 	mov	r5,r9
   458c4:	6807883a 	mov	r3,r13
   458c8:	288000cc 	andi	r2,r5,3
   458cc:	18fffe04 	addi	r3,r3,-8
   458d0:	297fffc4 	addi	r5,r5,-1
   458d4:	10001526 	beq	r2,zero,4592c <_malloc_r+0x70c>
   458d8:	18800217 	ldw	r2,8(r3)
   458dc:	10fffa26 	beq	r2,r3,458c8 <_malloc_r+0x6a8>
   458e0:	2109883a 	add	r4,r4,r4
   458e4:	393f1e36 	bltu	r7,r4,45560 <_malloc_r+0x340>
   458e8:	203f1d26 	beq	r4,zero,45560 <_malloc_r+0x340>
   458ec:	21c4703a 	and	r2,r4,r7
   458f0:	10000226 	beq	r2,zero,458fc <_malloc_r+0x6dc>
   458f4:	6013883a 	mov	r9,r12
   458f8:	003ee106 	br	45480 <_malloc_r+0x260>
   458fc:	2109883a 	add	r4,r4,r4
   45900:	3904703a 	and	r2,r7,r4
   45904:	63000104 	addi	r12,r12,4
   45908:	103ffc26 	beq	r2,zero,458fc <_malloc_r+0x6dc>
   4590c:	6013883a 	mov	r9,r12
   45910:	003edb06 	br	45480 <_malloc_r+0x260>
   45914:	00805504 	movi	r2,340
   45918:	11000836 	bltu	r2,r4,4593c <_malloc_r+0x71c>
   4591c:	2804d3fa 	srli	r2,r5,15
   45920:	11001dc4 	addi	r4,r2,119
   45924:	200690fa 	slli	r3,r4,3
   45928:	003f7306 	br	456f8 <_malloc_r+0x4d8>
   4592c:	0104303a 	nor	r2,zero,r4
   45930:	388e703a 	and	r7,r7,r2
   45934:	e1c00115 	stw	r7,4(fp)
   45938:	003fe906 	br	458e0 <_malloc_r+0x6c0>
   4593c:	00815504 	movi	r2,1364
   45940:	1100032e 	bgeu	r2,r4,45950 <_malloc_r+0x730>
   45944:	01001f84 	movi	r4,126
   45948:	00c0fc04 	movi	r3,1008
   4594c:	003f6a06 	br	456f8 <_malloc_r+0x4d8>
   45950:	2804d4ba 	srli	r2,r5,18
   45954:	11001f04 	addi	r4,r2,124
   45958:	200690fa 	slli	r3,r4,3
   4595c:	003f6606 	br	456f8 <_malloc_r+0x4d8>

00045960 <memset>:
   45960:	30000526 	beq	r6,zero,45978 <memset+0x18>
   45964:	310d883a 	add	r6,r6,r4
   45968:	2005883a 	mov	r2,r4
   4596c:	11400005 	stb	r5,0(r2)
   45970:	10800044 	addi	r2,r2,1
   45974:	11bffd1e 	bne	r2,r6,4596c <memset+0xc>
   45978:	2005883a 	mov	r2,r4
   4597c:	f800283a 	ret

00045980 <_sbrk_r>:
   45980:	defffd04 	addi	sp,sp,-12
   45984:	dc000015 	stw	r16,0(sp)
   45988:	04000174 	movhi	r16,5
   4598c:	84210004 	addi	r16,r16,-31744
   45990:	dc400115 	stw	r17,4(sp)
   45994:	80000015 	stw	zero,0(r16)
   45998:	2023883a 	mov	r17,r4
   4599c:	2809883a 	mov	r4,r5
   459a0:	dfc00215 	stw	ra,8(sp)
   459a4:	00468c80 	call	468c8 <sbrk>
   459a8:	1007883a 	mov	r3,r2
   459ac:	00bfffc4 	movi	r2,-1
   459b0:	18800626 	beq	r3,r2,459cc <_sbrk_r+0x4c>
   459b4:	1805883a 	mov	r2,r3
   459b8:	dfc00217 	ldw	ra,8(sp)
   459bc:	dc400117 	ldw	r17,4(sp)
   459c0:	dc000017 	ldw	r16,0(sp)
   459c4:	dec00304 	addi	sp,sp,12
   459c8:	f800283a 	ret
   459cc:	80800017 	ldw	r2,0(r16)
   459d0:	103ff826 	beq	r2,zero,459b4 <_sbrk_r+0x34>
   459d4:	88800015 	stw	r2,0(r17)
   459d8:	1805883a 	mov	r2,r3
   459dc:	dfc00217 	ldw	ra,8(sp)
   459e0:	dc400117 	ldw	r17,4(sp)
   459e4:	dc000017 	ldw	r16,0(sp)
   459e8:	dec00304 	addi	sp,sp,12
   459ec:	f800283a 	ret

000459f0 <_raise_r>:
   459f0:	defffd04 	addi	sp,sp,-12
   459f4:	008007c4 	movi	r2,31
   459f8:	dc400115 	stw	r17,4(sp)
   459fc:	dc000015 	stw	r16,0(sp)
   45a00:	dfc00215 	stw	ra,8(sp)
   45a04:	2821883a 	mov	r16,r5
   45a08:	2023883a 	mov	r17,r4
   45a0c:	11402736 	bltu	r2,r5,45aac <_raise_r+0xbc>
   45a10:	20c00b17 	ldw	r3,44(r4)
   45a14:	18001326 	beq	r3,zero,45a64 <_raise_r+0x74>
   45a18:	2945883a 	add	r2,r5,r5
   45a1c:	1085883a 	add	r2,r2,r2
   45a20:	188b883a 	add	r5,r3,r2
   45a24:	28c00017 	ldw	r3,0(r5)
   45a28:	18000e26 	beq	r3,zero,45a64 <_raise_r+0x74>
   45a2c:	01000044 	movi	r4,1
   45a30:	19000526 	beq	r3,r4,45a48 <_raise_r+0x58>
   45a34:	00bfffc4 	movi	r2,-1
   45a38:	18801326 	beq	r3,r2,45a88 <_raise_r+0x98>
   45a3c:	28000015 	stw	zero,0(r5)
   45a40:	8009883a 	mov	r4,r16
   45a44:	183ee83a 	callr	r3
   45a48:	0007883a 	mov	r3,zero
   45a4c:	1805883a 	mov	r2,r3
   45a50:	dfc00217 	ldw	ra,8(sp)
   45a54:	dc400117 	ldw	r17,4(sp)
   45a58:	dc000017 	ldw	r16,0(sp)
   45a5c:	dec00304 	addi	sp,sp,12
   45a60:	f800283a 	ret
   45a64:	0045cc80 	call	45cc8 <_getpid_r>
   45a68:	100b883a 	mov	r5,r2
   45a6c:	8809883a 	mov	r4,r17
   45a70:	800d883a 	mov	r6,r16
   45a74:	dfc00217 	ldw	ra,8(sp)
   45a78:	dc400117 	ldw	r17,4(sp)
   45a7c:	dc000017 	ldw	r16,0(sp)
   45a80:	dec00304 	addi	sp,sp,12
   45a84:	0045ccc1 	jmpi	45ccc <_kill_r>
   45a88:	2007883a 	mov	r3,r4
   45a8c:	00800584 	movi	r2,22
   45a90:	88800015 	stw	r2,0(r17)
   45a94:	1805883a 	mov	r2,r3
   45a98:	dfc00217 	ldw	ra,8(sp)
   45a9c:	dc400117 	ldw	r17,4(sp)
   45aa0:	dc000017 	ldw	r16,0(sp)
   45aa4:	dec00304 	addi	sp,sp,12
   45aa8:	f800283a 	ret
   45aac:	00800584 	movi	r2,22
   45ab0:	00ffffc4 	movi	r3,-1
   45ab4:	20800015 	stw	r2,0(r4)
   45ab8:	003fe406 	br	45a4c <_raise_r+0x5c>

00045abc <raise>:
   45abc:	00800134 	movhi	r2,4
   45ac0:	109f3004 	addi	r2,r2,31936
   45ac4:	200b883a 	mov	r5,r4
   45ac8:	11000017 	ldw	r4,0(r2)
   45acc:	00459f01 	jmpi	459f0 <_raise_r>

00045ad0 <_init_signal_r>:
   45ad0:	20800b17 	ldw	r2,44(r4)
   45ad4:	defffe04 	addi	sp,sp,-8
   45ad8:	dc000015 	stw	r16,0(sp)
   45adc:	dfc00115 	stw	ra,4(sp)
   45ae0:	2021883a 	mov	r16,r4
   45ae4:	10000526 	beq	r2,zero,45afc <_init_signal_r+0x2c>
   45ae8:	0005883a 	mov	r2,zero
   45aec:	dfc00117 	ldw	ra,4(sp)
   45af0:	dc000017 	ldw	r16,0(sp)
   45af4:	dec00204 	addi	sp,sp,8
   45af8:	f800283a 	ret
   45afc:	01402004 	movi	r5,128
   45b00:	00452200 	call	45220 <_malloc_r>
   45b04:	1009883a 	mov	r4,r2
   45b08:	80800b15 	stw	r2,44(r16)
   45b0c:	10000726 	beq	r2,zero,45b2c <_init_signal_r+0x5c>
   45b10:	0007883a 	mov	r3,zero
   45b14:	01402004 	movi	r5,128
   45b18:	20c5883a 	add	r2,r4,r3
   45b1c:	18c00104 	addi	r3,r3,4
   45b20:	10000015 	stw	zero,0(r2)
   45b24:	197ffc1e 	bne	r3,r5,45b18 <_init_signal_r+0x48>
   45b28:	003fef06 	br	45ae8 <_init_signal_r+0x18>
   45b2c:	00bfffc4 	movi	r2,-1
   45b30:	003fee06 	br	45aec <_init_signal_r+0x1c>

00045b34 <_init_signal>:
   45b34:	00800134 	movhi	r2,4
   45b38:	109f3004 	addi	r2,r2,31936
   45b3c:	11000017 	ldw	r4,0(r2)
   45b40:	0045ad01 	jmpi	45ad0 <_init_signal_r>

00045b44 <__sigtramp_r>:
   45b44:	defffd04 	addi	sp,sp,-12
   45b48:	008007c4 	movi	r2,31
   45b4c:	dc000115 	stw	r16,4(sp)
   45b50:	dfc00215 	stw	ra,8(sp)
   45b54:	2021883a 	mov	r16,r4
   45b58:	11401336 	bltu	r2,r5,45ba8 <__sigtramp_r+0x64>
   45b5c:	20c00b17 	ldw	r3,44(r4)
   45b60:	18001f26 	beq	r3,zero,45be0 <__sigtramp_r+0x9c>
   45b64:	2945883a 	add	r2,r5,r5
   45b68:	1085883a 	add	r2,r2,r2
   45b6c:	10c9883a 	add	r4,r2,r3
   45b70:	20c00017 	ldw	r3,0(r4)
   45b74:	18001626 	beq	r3,zero,45bd0 <__sigtramp_r+0x8c>
   45b78:	00bfffc4 	movi	r2,-1
   45b7c:	18801626 	beq	r3,r2,45bd8 <__sigtramp_r+0x94>
   45b80:	00800044 	movi	r2,1
   45b84:	18800d26 	beq	r3,r2,45bbc <__sigtramp_r+0x78>
   45b88:	20000015 	stw	zero,0(r4)
   45b8c:	2809883a 	mov	r4,r5
   45b90:	183ee83a 	callr	r3
   45b94:	0005883a 	mov	r2,zero
   45b98:	dfc00217 	ldw	ra,8(sp)
   45b9c:	dc000117 	ldw	r16,4(sp)
   45ba0:	dec00304 	addi	sp,sp,12
   45ba4:	f800283a 	ret
   45ba8:	00bfffc4 	movi	r2,-1
   45bac:	dfc00217 	ldw	ra,8(sp)
   45bb0:	dc000117 	ldw	r16,4(sp)
   45bb4:	dec00304 	addi	sp,sp,12
   45bb8:	f800283a 	ret
   45bbc:	008000c4 	movi	r2,3
   45bc0:	dfc00217 	ldw	ra,8(sp)
   45bc4:	dc000117 	ldw	r16,4(sp)
   45bc8:	dec00304 	addi	sp,sp,12
   45bcc:	f800283a 	ret
   45bd0:	00800044 	movi	r2,1
   45bd4:	003ff006 	br	45b98 <__sigtramp_r+0x54>
   45bd8:	00800084 	movi	r2,2
   45bdc:	003fee06 	br	45b98 <__sigtramp_r+0x54>
   45be0:	d9400015 	stw	r5,0(sp)
   45be4:	0045ad00 	call	45ad0 <_init_signal_r>
   45be8:	d9400017 	ldw	r5,0(sp)
   45bec:	103fee1e 	bne	r2,zero,45ba8 <__sigtramp_r+0x64>
   45bf0:	80c00b17 	ldw	r3,44(r16)
   45bf4:	003fdb06 	br	45b64 <__sigtramp_r+0x20>

00045bf8 <__sigtramp>:
   45bf8:	00800134 	movhi	r2,4
   45bfc:	109f3004 	addi	r2,r2,31936
   45c00:	200b883a 	mov	r5,r4
   45c04:	11000017 	ldw	r4,0(r2)
   45c08:	0045b441 	jmpi	45b44 <__sigtramp_r>

00045c0c <_signal_r>:
   45c0c:	defffc04 	addi	sp,sp,-16
   45c10:	008007c4 	movi	r2,31
   45c14:	dc800215 	stw	r18,8(sp)
   45c18:	dc400115 	stw	r17,4(sp)
   45c1c:	dc000015 	stw	r16,0(sp)
   45c20:	dfc00315 	stw	ra,12(sp)
   45c24:	2823883a 	mov	r17,r5
   45c28:	00ffffc4 	movi	r3,-1
   45c2c:	3025883a 	mov	r18,r6
   45c30:	2021883a 	mov	r16,r4
   45c34:	1140092e 	bgeu	r2,r5,45c5c <_signal_r+0x50>
   45c38:	00800584 	movi	r2,22
   45c3c:	20800015 	stw	r2,0(r4)
   45c40:	1805883a 	mov	r2,r3
   45c44:	dfc00317 	ldw	ra,12(sp)
   45c48:	dc800217 	ldw	r18,8(sp)
   45c4c:	dc400117 	ldw	r17,4(sp)
   45c50:	dc000017 	ldw	r16,0(sp)
   45c54:	dec00404 	addi	sp,sp,16
   45c58:	f800283a 	ret
   45c5c:	21400b17 	ldw	r5,44(r4)
   45c60:	28000c26 	beq	r5,zero,45c94 <_signal_r+0x88>
   45c64:	8c45883a 	add	r2,r17,r17
   45c68:	1085883a 	add	r2,r2,r2
   45c6c:	1145883a 	add	r2,r2,r5
   45c70:	10c00017 	ldw	r3,0(r2)
   45c74:	14800015 	stw	r18,0(r2)
   45c78:	1805883a 	mov	r2,r3
   45c7c:	dfc00317 	ldw	ra,12(sp)
   45c80:	dc800217 	ldw	r18,8(sp)
   45c84:	dc400117 	ldw	r17,4(sp)
   45c88:	dc000017 	ldw	r16,0(sp)
   45c8c:	dec00404 	addi	sp,sp,16
   45c90:	f800283a 	ret
   45c94:	0045ad00 	call	45ad0 <_init_signal_r>
   45c98:	1000021e 	bne	r2,zero,45ca4 <_signal_r+0x98>
   45c9c:	81400b17 	ldw	r5,44(r16)
   45ca0:	003ff006 	br	45c64 <_signal_r+0x58>
   45ca4:	00ffffc4 	movi	r3,-1
   45ca8:	003fe506 	br	45c40 <_signal_r+0x34>

00045cac <signal>:
   45cac:	01800134 	movhi	r6,4
   45cb0:	319f3004 	addi	r6,r6,31936
   45cb4:	2007883a 	mov	r3,r4
   45cb8:	31000017 	ldw	r4,0(r6)
   45cbc:	280d883a 	mov	r6,r5
   45cc0:	180b883a 	mov	r5,r3
   45cc4:	0045c0c1 	jmpi	45c0c <_signal_r>

00045cc8 <_getpid_r>:
   45cc8:	00462c01 	jmpi	462c0 <getpid>

00045ccc <_kill_r>:
   45ccc:	defffd04 	addi	sp,sp,-12
   45cd0:	dc000015 	stw	r16,0(sp)
   45cd4:	04000174 	movhi	r16,5
   45cd8:	84210004 	addi	r16,r16,-31744
   45cdc:	dc400115 	stw	r17,4(sp)
   45ce0:	80000015 	stw	zero,0(r16)
   45ce4:	2023883a 	mov	r17,r4
   45ce8:	2809883a 	mov	r4,r5
   45cec:	300b883a 	mov	r5,r6
   45cf0:	dfc00215 	stw	ra,8(sp)
   45cf4:	00462e00 	call	462e0 <kill>
   45cf8:	1007883a 	mov	r3,r2
   45cfc:	00bfffc4 	movi	r2,-1
   45d00:	18800626 	beq	r3,r2,45d1c <_kill_r+0x50>
   45d04:	1805883a 	mov	r2,r3
   45d08:	dfc00217 	ldw	ra,8(sp)
   45d0c:	dc400117 	ldw	r17,4(sp)
   45d10:	dc000017 	ldw	r16,0(sp)
   45d14:	dec00304 	addi	sp,sp,12
   45d18:	f800283a 	ret
   45d1c:	80800017 	ldw	r2,0(r16)
   45d20:	103ff826 	beq	r2,zero,45d04 <_kill_r+0x38>
   45d24:	88800015 	stw	r2,0(r17)
   45d28:	1805883a 	mov	r2,r3
   45d2c:	dfc00217 	ldw	ra,8(sp)
   45d30:	dc400117 	ldw	r17,4(sp)
   45d34:	dc000017 	ldw	r16,0(sp)
   45d38:	dec00304 	addi	sp,sp,12
   45d3c:	f800283a 	ret

00045d40 <strcat>:
   45d40:	20800007 	ldb	r2,0(r4)
   45d44:	10000b26 	beq	r2,zero,45d74 <strcat+0x34>
   45d48:	2007883a 	mov	r3,r4
   45d4c:	18c00044 	addi	r3,r3,1
   45d50:	18800007 	ldb	r2,0(r3)
   45d54:	103ffd1e 	bne	r2,zero,45d4c <strcat+0xc>
   45d58:	28800003 	ldbu	r2,0(r5)
   45d5c:	29400044 	addi	r5,r5,1
   45d60:	18800005 	stb	r2,0(r3)
   45d64:	18c00044 	addi	r3,r3,1
   45d68:	103ffb1e 	bne	r2,zero,45d58 <strcat+0x18>
   45d6c:	2005883a 	mov	r2,r4
   45d70:	f800283a 	ret
   45d74:	28800003 	ldbu	r2,0(r5)
   45d78:	2007883a 	mov	r3,r4
   45d7c:	29400044 	addi	r5,r5,1
   45d80:	18800005 	stb	r2,0(r3)
   45d84:	18c00044 	addi	r3,r3,1
   45d88:	103ff31e 	bne	r2,zero,45d58 <strcat+0x18>
   45d8c:	003ff706 	br	45d6c <strcat+0x2c>

00045d90 <strlen>:
   45d90:	20800007 	ldb	r2,0(r4)
   45d94:	10000526 	beq	r2,zero,45dac <strlen+0x1c>
   45d98:	2007883a 	mov	r3,r4
   45d9c:	18c00044 	addi	r3,r3,1
   45da0:	18800007 	ldb	r2,0(r3)
   45da4:	103ffd1e 	bne	r2,zero,45d9c <strlen+0xc>
   45da8:	1905c83a 	sub	r2,r3,r4
   45dac:	f800283a 	ret

00045db0 <_malloc_trim_r>:
   45db0:	defffb04 	addi	sp,sp,-20
   45db4:	dcc00315 	stw	r19,12(sp)
   45db8:	04c00134 	movhi	r19,4
   45dbc:	9cdd8304 	addi	r19,r19,30220
   45dc0:	dc800215 	stw	r18,8(sp)
   45dc4:	dc400115 	stw	r17,4(sp)
   45dc8:	dc000015 	stw	r16,0(sp)
   45dcc:	2823883a 	mov	r17,r5
   45dd0:	2025883a 	mov	r18,r4
   45dd4:	dfc00415 	stw	ra,16(sp)
   45dd8:	00465bc0 	call	465bc <__malloc_lock>
   45ddc:	98800217 	ldw	r2,8(r19)
   45de0:	9009883a 	mov	r4,r18
   45de4:	000b883a 	mov	r5,zero
   45de8:	10c00117 	ldw	r3,4(r2)
   45dec:	00bfff04 	movi	r2,-4
   45df0:	18a0703a 	and	r16,r3,r2
   45df4:	8463c83a 	sub	r17,r16,r17
   45df8:	8c401bc4 	addi	r17,r17,111
   45dfc:	8822d1fa 	srli	r17,r17,7
   45e00:	00801fc4 	movi	r2,127
   45e04:	8c7fffc4 	addi	r17,r17,-1
   45e08:	882291fa 	slli	r17,r17,7
   45e0c:	1440060e 	bge	r2,r17,45e28 <_malloc_trim_r+0x78>
   45e10:	00459800 	call	45980 <_sbrk_r>
   45e14:	98c00217 	ldw	r3,8(r19)
   45e18:	9009883a 	mov	r4,r18
   45e1c:	044bc83a 	sub	r5,zero,r17
   45e20:	80c7883a 	add	r3,r16,r3
   45e24:	10c00926 	beq	r2,r3,45e4c <_malloc_trim_r+0x9c>
   45e28:	00465dc0 	call	465dc <__malloc_unlock>
   45e2c:	0005883a 	mov	r2,zero
   45e30:	dfc00417 	ldw	ra,16(sp)
   45e34:	dcc00317 	ldw	r19,12(sp)
   45e38:	dc800217 	ldw	r18,8(sp)
   45e3c:	dc400117 	ldw	r17,4(sp)
   45e40:	dc000017 	ldw	r16,0(sp)
   45e44:	dec00504 	addi	sp,sp,20
   45e48:	f800283a 	ret
   45e4c:	9009883a 	mov	r4,r18
   45e50:	00459800 	call	45980 <_sbrk_r>
   45e54:	844dc83a 	sub	r6,r16,r17
   45e58:	00ffffc4 	movi	r3,-1
   45e5c:	9009883a 	mov	r4,r18
   45e60:	000b883a 	mov	r5,zero
   45e64:	01c00174 	movhi	r7,5
   45e68:	39e30b04 	addi	r7,r7,-29652
   45e6c:	31800054 	ori	r6,r6,1
   45e70:	10c00926 	beq	r2,r3,45e98 <_malloc_trim_r+0xe8>
   45e74:	38800017 	ldw	r2,0(r7)
   45e78:	98c00217 	ldw	r3,8(r19)
   45e7c:	9009883a 	mov	r4,r18
   45e80:	1445c83a 	sub	r2,r2,r17
   45e84:	38800015 	stw	r2,0(r7)
   45e88:	19800115 	stw	r6,4(r3)
   45e8c:	00465dc0 	call	465dc <__malloc_unlock>
   45e90:	00800044 	movi	r2,1
   45e94:	003fe606 	br	45e30 <_malloc_trim_r+0x80>
   45e98:	00459800 	call	45980 <_sbrk_r>
   45e9c:	99800217 	ldw	r6,8(r19)
   45ea0:	100f883a 	mov	r7,r2
   45ea4:	9009883a 	mov	r4,r18
   45ea8:	1187c83a 	sub	r3,r2,r6
   45eac:	008003c4 	movi	r2,15
   45eb0:	19400054 	ori	r5,r3,1
   45eb4:	10ffdc0e 	bge	r2,r3,45e28 <_malloc_trim_r+0x78>
   45eb8:	00800134 	movhi	r2,4
   45ebc:	109f2f04 	addi	r2,r2,31932
   45ec0:	10c00017 	ldw	r3,0(r2)
   45ec4:	00800174 	movhi	r2,5
   45ec8:	10a30b04 	addi	r2,r2,-29652
   45ecc:	31400115 	stw	r5,4(r6)
   45ed0:	38c7c83a 	sub	r3,r7,r3
   45ed4:	10c00015 	stw	r3,0(r2)
   45ed8:	003fd306 	br	45e28 <_malloc_trim_r+0x78>

00045edc <_free_r>:
   45edc:	defffd04 	addi	sp,sp,-12
   45ee0:	dc400115 	stw	r17,4(sp)
   45ee4:	dc000015 	stw	r16,0(sp)
   45ee8:	dfc00215 	stw	ra,8(sp)
   45eec:	2821883a 	mov	r16,r5
   45ef0:	2023883a 	mov	r17,r4
   45ef4:	28005a26 	beq	r5,zero,46060 <_free_r+0x184>
   45ef8:	00465bc0 	call	465bc <__malloc_lock>
   45efc:	823ffe04 	addi	r8,r16,-8
   45f00:	41400117 	ldw	r5,4(r8)
   45f04:	00bfff84 	movi	r2,-2
   45f08:	02800134 	movhi	r10,4
   45f0c:	529d8304 	addi	r10,r10,30220
   45f10:	288e703a 	and	r7,r5,r2
   45f14:	41cd883a 	add	r6,r8,r7
   45f18:	30c00117 	ldw	r3,4(r6)
   45f1c:	51000217 	ldw	r4,8(r10)
   45f20:	00bfff04 	movi	r2,-4
   45f24:	1892703a 	and	r9,r3,r2
   45f28:	5017883a 	mov	r11,r10
   45f2c:	31006726 	beq	r6,r4,460cc <_free_r+0x1f0>
   45f30:	2880004c 	andi	r2,r5,1
   45f34:	1005003a 	cmpeq	r2,r2,zero
   45f38:	32400115 	stw	r9,4(r6)
   45f3c:	10001a1e 	bne	r2,zero,45fa8 <_free_r+0xcc>
   45f40:	000b883a 	mov	r5,zero
   45f44:	3247883a 	add	r3,r6,r9
   45f48:	18800117 	ldw	r2,4(r3)
   45f4c:	1080004c 	andi	r2,r2,1
   45f50:	1000231e 	bne	r2,zero,45fe0 <_free_r+0x104>
   45f54:	280ac03a 	cmpne	r5,r5,zero
   45f58:	3a4f883a 	add	r7,r7,r9
   45f5c:	2800451e 	bne	r5,zero,46074 <_free_r+0x198>
   45f60:	31000217 	ldw	r4,8(r6)
   45f64:	00800134 	movhi	r2,4
   45f68:	109d8504 	addi	r2,r2,30228
   45f6c:	20807b26 	beq	r4,r2,4615c <_free_r+0x280>
   45f70:	30800317 	ldw	r2,12(r6)
   45f74:	3a07883a 	add	r3,r7,r8
   45f78:	19c00015 	stw	r7,0(r3)
   45f7c:	11000215 	stw	r4,8(r2)
   45f80:	20800315 	stw	r2,12(r4)
   45f84:	38800054 	ori	r2,r7,1
   45f88:	40800115 	stw	r2,4(r8)
   45f8c:	28001a26 	beq	r5,zero,45ff8 <_free_r+0x11c>
   45f90:	8809883a 	mov	r4,r17
   45f94:	dfc00217 	ldw	ra,8(sp)
   45f98:	dc400117 	ldw	r17,4(sp)
   45f9c:	dc000017 	ldw	r16,0(sp)
   45fa0:	dec00304 	addi	sp,sp,12
   45fa4:	00465dc1 	jmpi	465dc <__malloc_unlock>
   45fa8:	80bffe17 	ldw	r2,-8(r16)
   45fac:	50c00204 	addi	r3,r10,8
   45fb0:	4091c83a 	sub	r8,r8,r2
   45fb4:	41000217 	ldw	r4,8(r8)
   45fb8:	388f883a 	add	r7,r7,r2
   45fbc:	20c06126 	beq	r4,r3,46144 <_free_r+0x268>
   45fc0:	40800317 	ldw	r2,12(r8)
   45fc4:	3247883a 	add	r3,r6,r9
   45fc8:	000b883a 	mov	r5,zero
   45fcc:	11000215 	stw	r4,8(r2)
   45fd0:	20800315 	stw	r2,12(r4)
   45fd4:	18800117 	ldw	r2,4(r3)
   45fd8:	1080004c 	andi	r2,r2,1
   45fdc:	103fdd26 	beq	r2,zero,45f54 <_free_r+0x78>
   45fe0:	38800054 	ori	r2,r7,1
   45fe4:	3a07883a 	add	r3,r7,r8
   45fe8:	280ac03a 	cmpne	r5,r5,zero
   45fec:	40800115 	stw	r2,4(r8)
   45ff0:	19c00015 	stw	r7,0(r3)
   45ff4:	283fe61e 	bne	r5,zero,45f90 <_free_r+0xb4>
   45ff8:	00807fc4 	movi	r2,511
   45ffc:	11c01f2e 	bgeu	r2,r7,4607c <_free_r+0x1a0>
   46000:	3806d27a 	srli	r3,r7,9
   46004:	1800481e 	bne	r3,zero,46128 <_free_r+0x24c>
   46008:	3804d0fa 	srli	r2,r7,3
   4600c:	100690fa 	slli	r3,r2,3
   46010:	1acd883a 	add	r6,r3,r11
   46014:	31400217 	ldw	r5,8(r6)
   46018:	31405926 	beq	r6,r5,46180 <_free_r+0x2a4>
   4601c:	28800117 	ldw	r2,4(r5)
   46020:	00ffff04 	movi	r3,-4
   46024:	10c4703a 	and	r2,r2,r3
   46028:	3880022e 	bgeu	r7,r2,46034 <_free_r+0x158>
   4602c:	29400217 	ldw	r5,8(r5)
   46030:	317ffa1e 	bne	r6,r5,4601c <_free_r+0x140>
   46034:	29800317 	ldw	r6,12(r5)
   46038:	41800315 	stw	r6,12(r8)
   4603c:	41400215 	stw	r5,8(r8)
   46040:	8809883a 	mov	r4,r17
   46044:	2a000315 	stw	r8,12(r5)
   46048:	32000215 	stw	r8,8(r6)
   4604c:	dfc00217 	ldw	ra,8(sp)
   46050:	dc400117 	ldw	r17,4(sp)
   46054:	dc000017 	ldw	r16,0(sp)
   46058:	dec00304 	addi	sp,sp,12
   4605c:	00465dc1 	jmpi	465dc <__malloc_unlock>
   46060:	dfc00217 	ldw	ra,8(sp)
   46064:	dc400117 	ldw	r17,4(sp)
   46068:	dc000017 	ldw	r16,0(sp)
   4606c:	dec00304 	addi	sp,sp,12
   46070:	f800283a 	ret
   46074:	31000217 	ldw	r4,8(r6)
   46078:	003fbd06 	br	45f70 <_free_r+0x94>
   4607c:	3806d0fa 	srli	r3,r7,3
   46080:	00800044 	movi	r2,1
   46084:	51400117 	ldw	r5,4(r10)
   46088:	180890fa 	slli	r4,r3,3
   4608c:	1807d0ba 	srai	r3,r3,2
   46090:	22c9883a 	add	r4,r4,r11
   46094:	21800217 	ldw	r6,8(r4)
   46098:	10c4983a 	sll	r2,r2,r3
   4609c:	41000315 	stw	r4,12(r8)
   460a0:	41800215 	stw	r6,8(r8)
   460a4:	288ab03a 	or	r5,r5,r2
   460a8:	22000215 	stw	r8,8(r4)
   460ac:	8809883a 	mov	r4,r17
   460b0:	51400115 	stw	r5,4(r10)
   460b4:	32000315 	stw	r8,12(r6)
   460b8:	dfc00217 	ldw	ra,8(sp)
   460bc:	dc400117 	ldw	r17,4(sp)
   460c0:	dc000017 	ldw	r16,0(sp)
   460c4:	dec00304 	addi	sp,sp,12
   460c8:	00465dc1 	jmpi	465dc <__malloc_unlock>
   460cc:	2880004c 	andi	r2,r5,1
   460d0:	3a4d883a 	add	r6,r7,r9
   460d4:	1000071e 	bne	r2,zero,460f4 <_free_r+0x218>
   460d8:	80bffe17 	ldw	r2,-8(r16)
   460dc:	4091c83a 	sub	r8,r8,r2
   460e0:	41000317 	ldw	r4,12(r8)
   460e4:	40c00217 	ldw	r3,8(r8)
   460e8:	308d883a 	add	r6,r6,r2
   460ec:	20c00215 	stw	r3,8(r4)
   460f0:	19000315 	stw	r4,12(r3)
   460f4:	00800134 	movhi	r2,4
   460f8:	109f2e04 	addi	r2,r2,31928
   460fc:	11000017 	ldw	r4,0(r2)
   46100:	30c00054 	ori	r3,r6,1
   46104:	52000215 	stw	r8,8(r10)
   46108:	40c00115 	stw	r3,4(r8)
   4610c:	313fa036 	bltu	r6,r4,45f90 <_free_r+0xb4>
   46110:	00800174 	movhi	r2,5
   46114:	10a0fd04 	addi	r2,r2,-31756
   46118:	11400017 	ldw	r5,0(r2)
   4611c:	8809883a 	mov	r4,r17
   46120:	0045db00 	call	45db0 <_malloc_trim_r>
   46124:	003f9a06 	br	45f90 <_free_r+0xb4>
   46128:	00800104 	movi	r2,4
   4612c:	10c0072e 	bgeu	r2,r3,4614c <_free_r+0x270>
   46130:	00800504 	movi	r2,20
   46134:	10c01936 	bltu	r2,r3,4619c <_free_r+0x2c0>
   46138:	188016c4 	addi	r2,r3,91
   4613c:	100690fa 	slli	r3,r2,3
   46140:	003fb306 	br	46010 <_free_r+0x134>
   46144:	01400044 	movi	r5,1
   46148:	003f7e06 	br	45f44 <_free_r+0x68>
   4614c:	3804d1ba 	srli	r2,r7,6
   46150:	10800e04 	addi	r2,r2,56
   46154:	100690fa 	slli	r3,r2,3
   46158:	003fad06 	br	46010 <_free_r+0x134>
   4615c:	22000315 	stw	r8,12(r4)
   46160:	22000215 	stw	r8,8(r4)
   46164:	3a05883a 	add	r2,r7,r8
   46168:	38c00054 	ori	r3,r7,1
   4616c:	11c00015 	stw	r7,0(r2)
   46170:	41000215 	stw	r4,8(r8)
   46174:	40c00115 	stw	r3,4(r8)
   46178:	41000315 	stw	r4,12(r8)
   4617c:	003f8406 	br	45f90 <_free_r+0xb4>
   46180:	1005d0ba 	srai	r2,r2,2
   46184:	00c00044 	movi	r3,1
   46188:	51000117 	ldw	r4,4(r10)
   4618c:	1886983a 	sll	r3,r3,r2
   46190:	20c8b03a 	or	r4,r4,r3
   46194:	51000115 	stw	r4,4(r10)
   46198:	003fa706 	br	46038 <_free_r+0x15c>
   4619c:	00801504 	movi	r2,84
   461a0:	10c00436 	bltu	r2,r3,461b4 <_free_r+0x2d8>
   461a4:	3804d33a 	srli	r2,r7,12
   461a8:	10801b84 	addi	r2,r2,110
   461ac:	100690fa 	slli	r3,r2,3
   461b0:	003f9706 	br	46010 <_free_r+0x134>
   461b4:	00805504 	movi	r2,340
   461b8:	10c00436 	bltu	r2,r3,461cc <_free_r+0x2f0>
   461bc:	3804d3fa 	srli	r2,r7,15
   461c0:	10801dc4 	addi	r2,r2,119
   461c4:	100690fa 	slli	r3,r2,3
   461c8:	003f9106 	br	46010 <_free_r+0x134>
   461cc:	00815504 	movi	r2,1364
   461d0:	10c0032e 	bgeu	r2,r3,461e0 <_free_r+0x304>
   461d4:	00801f84 	movi	r2,126
   461d8:	00c0fc04 	movi	r3,1008
   461dc:	003f8c06 	br	46010 <_free_r+0x134>
   461e0:	3804d4ba 	srli	r2,r7,18
   461e4:	10801f04 	addi	r2,r2,124
   461e8:	100690fa 	slli	r3,r2,3
   461ec:	003f8806 	br	46010 <_free_r+0x134>

000461f0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   461f0:	defffd04 	addi	sp,sp,-12
   461f4:	df000215 	stw	fp,8(sp)
   461f8:	df000204 	addi	fp,sp,8
   461fc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   46200:	e0bfff17 	ldw	r2,-4(fp)
   46204:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   46208:	e0bffe17 	ldw	r2,-8(fp)
   4620c:	1005003a 	cmpeq	r2,r2,zero
   46210:	1000021e 	bne	r2,zero,4621c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   46214:	002af070 	cmpltui	zero,zero,43969
   46218:	00000106 	br	46220 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4621c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   46220:	e037883a 	mov	sp,fp
   46224:	df000017 	ldw	fp,0(sp)
   46228:	dec00104 	addi	sp,sp,4
   4622c:	f800283a 	ret

00046230 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   46230:	defffd04 	addi	sp,sp,-12
   46234:	dfc00215 	stw	ra,8(sp)
   46238:	df000115 	stw	fp,4(sp)
   4623c:	df000104 	addi	fp,sp,4
   46240:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   46244:	e13fff17 	ldw	r4,-4(fp)
   46248:	00461f00 	call	461f0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4624c:	003fff06 	br	4624c <_exit+0x1c>

00046250 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   46250:	defffc04 	addi	sp,sp,-16
   46254:	dfc00315 	stw	ra,12(sp)
   46258:	df000215 	stw	fp,8(sp)
   4625c:	df000204 	addi	fp,sp,8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   46260:	00800134 	movhi	r2,4
   46264:	109ec704 	addi	r2,r2,31516
   46268:	11c00217 	ldw	r7,8(r2)
   4626c:	01000134 	movhi	r4,4
   46270:	211f3304 	addi	r4,r4,31948
   46274:	e17ffe04 	addi	r5,fp,-8
   46278:	01800044 	movi	r6,1
   4627c:	00469f80 	call	469f8 <altera_avalon_jtag_uart_read>
   46280:	10800048 	cmpgei	r2,r2,1
   46284:	1000031e 	bne	r2,zero,46294 <alt_getchar+0x44>
        return -1;
   46288:	00bfffc4 	movi	r2,-1
   4628c:	e0bfff15 	stw	r2,-4(fp)
   46290:	00000506 	br	462a8 <alt_getchar+0x58>
    }
    return c;
   46294:	e0bffe03 	ldbu	r2,-8(fp)
   46298:	10803fcc 	andi	r2,r2,255
   4629c:	1080201c 	xori	r2,r2,128
   462a0:	10bfe004 	addi	r2,r2,-128
   462a4:	e0bfff15 	stw	r2,-4(fp)
   462a8:	e0bfff17 	ldw	r2,-4(fp)
#else
    return getchar();
#endif
}
   462ac:	e037883a 	mov	sp,fp
   462b0:	dfc00117 	ldw	ra,4(sp)
   462b4:	df000017 	ldw	fp,0(sp)
   462b8:	dec00204 	addi	sp,sp,8
   462bc:	f800283a 	ret

000462c0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   462c0:	deffff04 	addi	sp,sp,-4
   462c4:	df000015 	stw	fp,0(sp)
   462c8:	d839883a 	mov	fp,sp
  return 0;
   462cc:	0005883a 	mov	r2,zero
}
   462d0:	e037883a 	mov	sp,fp
   462d4:	df000017 	ldw	fp,0(sp)
   462d8:	dec00104 	addi	sp,sp,4
   462dc:	f800283a 	ret

000462e0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   462e0:	defffa04 	addi	sp,sp,-24
   462e4:	dfc00515 	stw	ra,20(sp)
   462e8:	df000415 	stw	fp,16(sp)
   462ec:	df000404 	addi	fp,sp,16
   462f0:	e13ffd15 	stw	r4,-12(fp)
   462f4:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   462f8:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   462fc:	e0bffd17 	ldw	r2,-12(fp)
   46300:	10800048 	cmpgei	r2,r2,1
   46304:	1000301e 	bne	r2,zero,463c8 <kill+0xe8>
  {
    switch (sig)
   46308:	e0bffe17 	ldw	r2,-8(fp)
   4630c:	10800828 	cmpgeui	r2,r2,32
   46310:	10002a1e 	bne	r2,zero,463bc <kill+0xdc>
   46314:	e0bffe17 	ldw	r2,-8(fp)
   46318:	1085883a 	add	r2,r2,r2
   4631c:	1087883a 	add	r3,r2,r2
   46320:	00800134 	movhi	r2,4
   46324:	1098cd04 	addi	r2,r2,25396
   46328:	1885883a 	add	r2,r3,r2
   4632c:	10800017 	ldw	r2,0(r2)
   46330:	1000683a 	jmp	r2
   46334:	000463dc 	xori	zero,zero,4495
   46338:	000463bc 	xorhi	zero,zero,4494
   4633c:	000463bc 	xorhi	zero,zero,4494
   46340:	000463b4 	movhi	zero,4494
   46344:	000463b4 	movhi	zero,4494
   46348:	000463b4 	movhi	zero,4494
   4634c:	000463b4 	movhi	zero,4494
   46350:	000463bc 	xorhi	zero,zero,4494
   46354:	000463b4 	movhi	zero,4494
   46358:	000463b4 	movhi	zero,4494
   4635c:	000463b4 	movhi	zero,4494
   46360:	000463b4 	movhi	zero,4494
   46364:	000463b4 	movhi	zero,4494
   46368:	000463b4 	movhi	zero,4494
   4636c:	000463b4 	movhi	zero,4494
   46370:	000463b4 	movhi	zero,4494
   46374:	000463dc 	xori	zero,zero,4495
   46378:	000463bc 	xorhi	zero,zero,4494
   4637c:	000463bc 	xorhi	zero,zero,4494
   46380:	000463bc 	xorhi	zero,zero,4494
   46384:	000463dc 	xori	zero,zero,4495
   46388:	000463bc 	xorhi	zero,zero,4494
   4638c:	000463bc 	xorhi	zero,zero,4494
   46390:	000463b4 	movhi	zero,4494
   46394:	000463b4 	movhi	zero,4494
   46398:	000463b4 	movhi	zero,4494
   4639c:	000463b4 	movhi	zero,4494
   463a0:	000463b4 	movhi	zero,4494
   463a4:	000463bc 	xorhi	zero,zero,4494
   463a8:	000463bc 	xorhi	zero,zero,4494
   463ac:	000463b4 	movhi	zero,4494
   463b0:	000463b4 	movhi	zero,4494
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   463b4:	0009883a 	mov	r4,zero
   463b8:	00462300 	call	46230 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   463bc:	00800584 	movi	r2,22
   463c0:	e0bffc15 	stw	r2,-16(fp)
   463c4:	00000506 	br	463dc <kill+0xfc>
    }
  }

  else if (pid > 0)
   463c8:	e0bffd17 	ldw	r2,-12(fp)
   463cc:	10800050 	cmplti	r2,r2,1
   463d0:	1000021e 	bne	r2,zero,463dc <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   463d4:	008000c4 	movi	r2,3
   463d8:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   463dc:	e0bffc17 	ldw	r2,-16(fp)
   463e0:	1005003a 	cmpeq	r2,r2,zero
   463e4:	1000071e 	bne	r2,zero,46404 <kill+0x124>
  {
    ALT_ERRNO = status;
   463e8:	00464200 	call	46420 <alt_get_errno>
   463ec:	1007883a 	mov	r3,r2
   463f0:	e0bffc17 	ldw	r2,-16(fp)
   463f4:	18800015 	stw	r2,0(r3)
    return -1;
   463f8:	00bfffc4 	movi	r2,-1
   463fc:	e0bfff15 	stw	r2,-4(fp)
   46400:	00000106 	br	46408 <kill+0x128>
  }

  return 0;
   46404:	e03fff15 	stw	zero,-4(fp)
   46408:	e0bfff17 	ldw	r2,-4(fp)
}
   4640c:	e037883a 	mov	sp,fp
   46410:	dfc00117 	ldw	ra,4(sp)
   46414:	df000017 	ldw	fp,0(sp)
   46418:	dec00204 	addi	sp,sp,8
   4641c:	f800283a 	ret

00046420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46420:	defffd04 	addi	sp,sp,-12
   46424:	dfc00215 	stw	ra,8(sp)
   46428:	df000115 	stw	fp,4(sp)
   4642c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   46430:	00800134 	movhi	r2,4
   46434:	109f3a04 	addi	r2,r2,31976
   46438:	10800017 	ldw	r2,0(r2)
   4643c:	1005003a 	cmpeq	r2,r2,zero
   46440:	1000061e 	bne	r2,zero,4645c <alt_get_errno+0x3c>
   46444:	00800134 	movhi	r2,4
   46448:	109f3a04 	addi	r2,r2,31976
   4644c:	10800017 	ldw	r2,0(r2)
   46450:	103ee83a 	callr	r2
   46454:	e0bfff15 	stw	r2,-4(fp)
   46458:	00000306 	br	46468 <alt_get_errno+0x48>
   4645c:	00800174 	movhi	r2,5
   46460:	10a10004 	addi	r2,r2,-31744
   46464:	e0bfff15 	stw	r2,-4(fp)
   46468:	e0bfff17 	ldw	r2,-4(fp)
}
   4646c:	e037883a 	mov	sp,fp
   46470:	dfc00117 	ldw	ra,4(sp)
   46474:	df000017 	ldw	fp,0(sp)
   46478:	dec00204 	addi	sp,sp,8
   4647c:	f800283a 	ret

00046480 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   46480:	defffe04 	addi	sp,sp,-8
   46484:	dfc00115 	stw	ra,4(sp)
   46488:	df000015 	stw	fp,0(sp)
   4648c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   46490:	01000134 	movhi	r4,4
   46494:	211f3b04 	addi	r4,r4,31980
   46498:	01400134 	movhi	r5,4
   4649c:	295d8304 	addi	r5,r5,30220
   464a0:	01800134 	movhi	r6,4
   464a4:	319f3b04 	addi	r6,r6,31980
   464a8:	00465000 	call	46500 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   464ac:	01000134 	movhi	r4,4
   464b0:	21000804 	addi	r4,r4,32
   464b4:	01400134 	movhi	r5,4
   464b8:	29400804 	addi	r5,r5,32
   464bc:	01800134 	movhi	r6,4
   464c0:	31800804 	addi	r6,r6,32
   464c4:	00465000 	call	46500 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   464c8:	01000134 	movhi	r4,4
   464cc:	211cb604 	addi	r4,r4,29400
   464d0:	01400134 	movhi	r5,4
   464d4:	295cb604 	addi	r5,r5,29400
   464d8:	01800134 	movhi	r6,4
   464dc:	319d8304 	addi	r6,r6,30220
   464e0:	00465000 	call	46500 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   464e4:	0046da40 	call	46da4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   464e8:	0046eb40 	call	46eb4 <alt_icache_flush_all>
}
   464ec:	e037883a 	mov	sp,fp
   464f0:	dfc00117 	ldw	ra,4(sp)
   464f4:	df000017 	ldw	fp,0(sp)
   464f8:	dec00204 	addi	sp,sp,8
   464fc:	f800283a 	ret

00046500 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   46500:	defffc04 	addi	sp,sp,-16
   46504:	df000315 	stw	fp,12(sp)
   46508:	df000304 	addi	fp,sp,12
   4650c:	e13ffd15 	stw	r4,-12(fp)
   46510:	e17ffe15 	stw	r5,-8(fp)
   46514:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   46518:	e0fffe17 	ldw	r3,-8(fp)
   4651c:	e0bffd17 	ldw	r2,-12(fp)
   46520:	18800e26 	beq	r3,r2,4655c <alt_load_section+0x5c>
  {
    while( to != end )
   46524:	00000a06 	br	46550 <alt_load_section+0x50>
    {
      *to++ = *from++;
   46528:	e0bffd17 	ldw	r2,-12(fp)
   4652c:	10c00017 	ldw	r3,0(r2)
   46530:	e0bffe17 	ldw	r2,-8(fp)
   46534:	10c00015 	stw	r3,0(r2)
   46538:	e0bffe17 	ldw	r2,-8(fp)
   4653c:	10800104 	addi	r2,r2,4
   46540:	e0bffe15 	stw	r2,-8(fp)
   46544:	e0bffd17 	ldw	r2,-12(fp)
   46548:	10800104 	addi	r2,r2,4
   4654c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   46550:	e0fffe17 	ldw	r3,-8(fp)
   46554:	e0bfff17 	ldw	r2,-4(fp)
   46558:	18bff31e 	bne	r3,r2,46528 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4655c:	e037883a 	mov	sp,fp
   46560:	df000017 	ldw	fp,0(sp)
   46564:	dec00104 	addi	sp,sp,4
   46568:	f800283a 	ret

0004656c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4656c:	defffd04 	addi	sp,sp,-12
   46570:	dfc00215 	stw	ra,8(sp)
   46574:	df000115 	stw	fp,4(sp)
   46578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4657c:	0009883a 	mov	r4,zero
   46580:	00469840 	call	46984 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   46584:	00469b80 	call	469b8 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   46588:	0046dec0 	call	46dec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4658c:	01000134 	movhi	r4,4
   46590:	211b9404 	addi	r4,r4,28240
   46594:	0046ef00 	call	46ef0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   46598:	d121da17 	ldw	r4,-30872(gp)
   4659c:	d161db17 	ldw	r5,-30868(gp)
   465a0:	d1a1dc17 	ldw	r6,-30864(gp)
   465a4:	0041ca00 	call	41ca0 <main>
   465a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   465ac:	01000044 	movi	r4,1
   465b0:	0046d080 	call	46d08 <close>
  exit (result);
   465b4:	e13fff17 	ldw	r4,-4(fp)
   465b8:	0046f040 	call	46f04 <exit>

000465bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   465bc:	defffe04 	addi	sp,sp,-8
   465c0:	df000115 	stw	fp,4(sp)
   465c4:	df000104 	addi	fp,sp,4
   465c8:	e13fff15 	stw	r4,-4(fp)
}
   465cc:	e037883a 	mov	sp,fp
   465d0:	df000017 	ldw	fp,0(sp)
   465d4:	dec00104 	addi	sp,sp,4
   465d8:	f800283a 	ret

000465dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   465dc:	defffe04 	addi	sp,sp,-8
   465e0:	df000115 	stw	fp,4(sp)
   465e4:	df000104 	addi	fp,sp,4
   465e8:	e13fff15 	stw	r4,-4(fp)
}
   465ec:	e037883a 	mov	sp,fp
   465f0:	df000017 	ldw	fp,0(sp)
   465f4:	dec00104 	addi	sp,sp,4
   465f8:	f800283a 	ret

000465fc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   465fc:	defff204 	addi	sp,sp,-56
   46600:	dfc00a15 	stw	ra,40(sp)
   46604:	df000915 	stw	fp,36(sp)
   46608:	df000904 	addi	fp,sp,36
   4660c:	e1400215 	stw	r5,8(fp)
   46610:	e1800315 	stw	r6,12(fp)
   46614:	e1c00415 	stw	r7,16(fp)
   46618:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   4661c:	e0800204 	addi	r2,fp,8
   46620:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   46624:	e0bfff17 	ldw	r2,-4(fp)
   46628:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   4662c:	00007806 	br	46810 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   46630:	e0bffc07 	ldb	r2,-16(fp)
   46634:	10800960 	cmpeqi	r2,r2,37
   46638:	1000031e 	bne	r2,zero,46648 <alt_printf+0x4c>
        {
            alt_putchar(c);
   4663c:	e13ffc07 	ldb	r4,-16(fp)
   46640:	00468540 	call	46854 <alt_putchar>
   46644:	00007206 	br	46810 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   46648:	e0bffd17 	ldw	r2,-12(fp)
   4664c:	10800003 	ldbu	r2,0(r2)
   46650:	e0bffc05 	stb	r2,-16(fp)
   46654:	e0bffc07 	ldb	r2,-16(fp)
   46658:	1004c03a 	cmpne	r2,r2,zero
   4665c:	1007883a 	mov	r3,r2
   46660:	e0bffd17 	ldw	r2,-12(fp)
   46664:	10800044 	addi	r2,r2,1
   46668:	e0bffd15 	stw	r2,-12(fp)
   4666c:	18803fcc 	andi	r2,r3,255
   46670:	1005003a 	cmpeq	r2,r2,zero
   46674:	1000721e 	bne	r2,zero,46840 <alt_printf+0x244>
            {
                if (c == '%')
   46678:	e0bffc07 	ldb	r2,-16(fp)
   4667c:	10800958 	cmpnei	r2,r2,37
   46680:	1000031e 	bne	r2,zero,46690 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   46684:	e13ffc07 	ldb	r4,-16(fp)
   46688:	00468540 	call	46854 <alt_putchar>
   4668c:	00006006 	br	46810 <alt_printf+0x214>
                } 
                else if (c == 'c')
   46690:	e0bffc07 	ldb	r2,-16(fp)
   46694:	108018d8 	cmpnei	r2,r2,99
   46698:	1000091e 	bne	r2,zero,466c0 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   4669c:	e0fffe17 	ldw	r3,-8(fp)
   466a0:	18800104 	addi	r2,r3,4
   466a4:	e0bffe15 	stw	r2,-8(fp)
   466a8:	1805883a 	mov	r2,r3
   466ac:	10800017 	ldw	r2,0(r2)
   466b0:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   466b4:	e13ffb17 	ldw	r4,-20(fp)
   466b8:	00468540 	call	46854 <alt_putchar>
   466bc:	00005406 	br	46810 <alt_printf+0x214>
                }
                else if (c == 'x')
   466c0:	e0bffc07 	ldb	r2,-16(fp)
   466c4:	10801e18 	cmpnei	r2,r2,120
   466c8:	1000371e 	bne	r2,zero,467a8 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   466cc:	e0fffe17 	ldw	r3,-8(fp)
   466d0:	18800104 	addi	r2,r3,4
   466d4:	e0bffe15 	stw	r2,-8(fp)
   466d8:	1805883a 	mov	r2,r3
   466dc:	10800017 	ldw	r2,0(r2)
   466e0:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   466e4:	e0bffa17 	ldw	r2,-24(fp)
   466e8:	1004c03a 	cmpne	r2,r2,zero
   466ec:	1000031e 	bne	r2,zero,466fc <alt_printf+0x100>
                    {
                        alt_putchar('0');
   466f0:	01000c04 	movi	r4,48
   466f4:	00468540 	call	46854 <alt_putchar>
                        continue;
   466f8:	00004506 	br	46810 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   466fc:	00800704 	movi	r2,28
   46700:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   46704:	00000306 	br	46714 <alt_printf+0x118>
                        digit_shift -= 4;
   46708:	e0bff817 	ldw	r2,-32(fp)
   4670c:	10bfff04 	addi	r2,r2,-4
   46710:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   46714:	00c003c4 	movi	r3,15
   46718:	e0bff817 	ldw	r2,-32(fp)
   4671c:	1884983a 	sll	r2,r3,r2
   46720:	1007883a 	mov	r3,r2
   46724:	e0bffa17 	ldw	r2,-24(fp)
   46728:	1884703a 	and	r2,r3,r2
   4672c:	1005003a 	cmpeq	r2,r2,zero
   46730:	103ff51e 	bne	r2,zero,46708 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   46734:	00001806 	br	46798 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   46738:	00c003c4 	movi	r3,15
   4673c:	e0bff817 	ldw	r2,-32(fp)
   46740:	1884983a 	sll	r2,r3,r2
   46744:	1007883a 	mov	r3,r2
   46748:	e0bffa17 	ldw	r2,-24(fp)
   4674c:	1886703a 	and	r3,r3,r2
   46750:	e0bff817 	ldw	r2,-32(fp)
   46754:	1884d83a 	srl	r2,r3,r2
   46758:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   4675c:	e0bff917 	ldw	r2,-28(fp)
   46760:	108002a8 	cmpgeui	r2,r2,10
   46764:	1000041e 	bne	r2,zero,46778 <alt_printf+0x17c>
                            c = '0' + digit;
   46768:	e0bff917 	ldw	r2,-28(fp)
   4676c:	10800c04 	addi	r2,r2,48
   46770:	e0bffc05 	stb	r2,-16(fp)
   46774:	00000306 	br	46784 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   46778:	e0bff917 	ldw	r2,-28(fp)
   4677c:	108015c4 	addi	r2,r2,87
   46780:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   46784:	e13ffc07 	ldb	r4,-16(fp)
   46788:	00468540 	call	46854 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4678c:	e0bff817 	ldw	r2,-32(fp)
   46790:	10bfff04 	addi	r2,r2,-4
   46794:	e0bff815 	stw	r2,-32(fp)
   46798:	e0bff817 	ldw	r2,-32(fp)
   4679c:	1004403a 	cmpge	r2,r2,zero
   467a0:	103fe51e 	bne	r2,zero,46738 <alt_printf+0x13c>
   467a4:	00001a06 	br	46810 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   467a8:	e0bffc07 	ldb	r2,-16(fp)
   467ac:	10801cd8 	cmpnei	r2,r2,115
   467b0:	1000171e 	bne	r2,zero,46810 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   467b4:	e0fffe17 	ldw	r3,-8(fp)
   467b8:	18800104 	addi	r2,r3,4
   467bc:	e0bffe15 	stw	r2,-8(fp)
   467c0:	1805883a 	mov	r2,r3
   467c4:	10800017 	ldw	r2,0(r2)
   467c8:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   467cc:	00000906 	br	467f4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
   467d0:	e0bff717 	ldw	r2,-36(fp)
   467d4:	10800003 	ldbu	r2,0(r2)
   467d8:	11003fcc 	andi	r4,r2,255
   467dc:	2100201c 	xori	r4,r4,128
   467e0:	213fe004 	addi	r4,r4,-128
   467e4:	e0bff717 	ldw	r2,-36(fp)
   467e8:	10800044 	addi	r2,r2,1
   467ec:	e0bff715 	stw	r2,-36(fp)
   467f0:	00468540 	call	46854 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   467f4:	e0bff717 	ldw	r2,-36(fp)
   467f8:	10800003 	ldbu	r2,0(r2)
   467fc:	10803fcc 	andi	r2,r2,255
   46800:	1080201c 	xori	r2,r2,128
   46804:	10bfe004 	addi	r2,r2,-128
   46808:	1004c03a 	cmpne	r2,r2,zero
   4680c:	103ff01e 	bne	r2,zero,467d0 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   46810:	e0bffd17 	ldw	r2,-12(fp)
   46814:	10800003 	ldbu	r2,0(r2)
   46818:	e0bffc05 	stb	r2,-16(fp)
   4681c:	e0bffc07 	ldb	r2,-16(fp)
   46820:	1004c03a 	cmpne	r2,r2,zero
   46824:	1007883a 	mov	r3,r2
   46828:	e0bffd17 	ldw	r2,-12(fp)
   4682c:	10800044 	addi	r2,r2,1
   46830:	e0bffd15 	stw	r2,-12(fp)
   46834:	18803fcc 	andi	r2,r3,255
   46838:	1004c03a 	cmpne	r2,r2,zero
   4683c:	103f7c1e 	bne	r2,zero,46630 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   46840:	e037883a 	mov	sp,fp
   46844:	dfc00117 	ldw	ra,4(sp)
   46848:	df000017 	ldw	fp,0(sp)
   4684c:	dec00504 	addi	sp,sp,20
   46850:	f800283a 	ret

00046854 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   46854:	defffb04 	addi	sp,sp,-20
   46858:	dfc00415 	stw	ra,16(sp)
   4685c:	df000315 	stw	fp,12(sp)
   46860:	df000304 	addi	fp,sp,12
   46864:	e13ffe15 	stw	r4,-8(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   46868:	e0bffe17 	ldw	r2,-8(fp)
   4686c:	1007883a 	mov	r3,r2
   46870:	00bfffc4 	movi	r2,-1
   46874:	1884703a 	and	r2,r3,r2
   46878:	e0bffd05 	stb	r2,-12(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   4687c:	01000134 	movhi	r4,4
   46880:	211f3304 	addi	r4,r4,31948
   46884:	e17ffd04 	addi	r5,fp,-12
   46888:	01800044 	movi	r6,1
   4688c:	000f883a 	mov	r7,zero
   46890:	0046afc0 	call	46afc <altera_avalon_jtag_uart_write>
   46894:	10bfffd8 	cmpnei	r2,r2,-1
   46898:	1000031e 	bne	r2,zero,468a8 <alt_putchar+0x54>
        return -1;
   4689c:	00bfffc4 	movi	r2,-1
   468a0:	e0bfff15 	stw	r2,-4(fp)
   468a4:	00000206 	br	468b0 <alt_putchar+0x5c>
    }
    return c;
   468a8:	e0bffe17 	ldw	r2,-8(fp)
   468ac:	e0bfff15 	stw	r2,-4(fp)
   468b0:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
}
   468b4:	e037883a 	mov	sp,fp
   468b8:	dfc00117 	ldw	ra,4(sp)
   468bc:	df000017 	ldw	fp,0(sp)
   468c0:	dec00204 	addi	sp,sp,8
   468c4:	f800283a 	ret

000468c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   468c8:	defff804 	addi	sp,sp,-32
   468cc:	df000715 	stw	fp,28(sp)
   468d0:	df000704 	addi	fp,sp,28
   468d4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   468d8:	0005303a 	rdctl	r2,status
   468dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   468e0:	e0fffb17 	ldw	r3,-20(fp)
   468e4:	00bfff84 	movi	r2,-2
   468e8:	1884703a 	and	r2,r3,r2
   468ec:	1001703a 	wrctl	status,r2
  
  return context;
   468f0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   468f4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   468f8:	d0a00b17 	ldw	r2,-32724(gp)
   468fc:	10c000c4 	addi	r3,r2,3
   46900:	00bfff04 	movi	r2,-4
   46904:	1884703a 	and	r2,r3,r2
   46908:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4690c:	d0e00b17 	ldw	r3,-32724(gp)
   46910:	e0bffe17 	ldw	r2,-8(fp)
   46914:	1887883a 	add	r3,r3,r2
   46918:	008001b4 	movhi	r2,6
   4691c:	10a1a804 	addi	r2,r2,-31072
   46920:	10c0072e 	bgeu	r2,r3,46940 <sbrk+0x78>
   46924:	e0bffd17 	ldw	r2,-12(fp)
   46928:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4692c:	e0bffa17 	ldw	r2,-24(fp)
   46930:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   46934:	00bfffc4 	movi	r2,-1
   46938:	e0bfff15 	stw	r2,-4(fp)
   4693c:	00000c06 	br	46970 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   46940:	d0a00b17 	ldw	r2,-32724(gp)
   46944:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   46948:	d0e00b17 	ldw	r3,-32724(gp)
   4694c:	e0bffe17 	ldw	r2,-8(fp)
   46950:	1885883a 	add	r2,r3,r2
   46954:	d0a00b15 	stw	r2,-32724(gp)
   46958:	e0bffd17 	ldw	r2,-12(fp)
   4695c:	e0bff915 	stw	r2,-28(fp)
   46960:	e0bff917 	ldw	r2,-28(fp)
   46964:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   46968:	e0bffc17 	ldw	r2,-16(fp)
   4696c:	e0bfff15 	stw	r2,-4(fp)
   46970:	e0bfff17 	ldw	r2,-4(fp)
} 
   46974:	e037883a 	mov	sp,fp
   46978:	df000017 	ldw	fp,0(sp)
   4697c:	dec00104 	addi	sp,sp,4
   46980:	f800283a 	ret

00046984 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   46984:	defffd04 	addi	sp,sp,-12
   46988:	dfc00215 	stw	ra,8(sp)
   4698c:	df000115 	stw	fp,4(sp)
   46990:	df000104 	addi	fp,sp,4
   46994:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   46998:	0046ed00 	call	46ed0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4699c:	00800044 	movi	r2,1
   469a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   469a4:	e037883a 	mov	sp,fp
   469a8:	dfc00117 	ldw	ra,4(sp)
   469ac:	df000017 	ldw	fp,0(sp)
   469b0:	dec00204 	addi	sp,sp,8
   469b4:	f800283a 	ret

000469b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   469b8:	deffff04 	addi	sp,sp,-4
   469bc:	df000015 	stw	fp,0(sp)
   469c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   469c4:	00c00174 	movhi	r3,5
   469c8:	18e10404 	addi	r3,r3,-31728
   469cc:	00842004 	movi	r2,4224
   469d0:	18800015 	stw	r2,0(r3)
   469d4:	00c00174 	movhi	r3,5
   469d8:	18e10504 	addi	r3,r3,-31724
   469dc:	0080bef4 	movhi	r2,763
   469e0:	10bc2004 	addi	r2,r2,-3968
   469e4:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    FIFOED_AVALON_UART_INIT ( ESP8266, esp8266);
}
   469e8:	e037883a 	mov	sp,fp
   469ec:	df000017 	ldw	fp,0(sp)
   469f0:	dec00104 	addi	sp,sp,4
   469f4:	f800283a 	ret

000469f8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   469f8:	defff604 	addi	sp,sp,-40
   469fc:	df000915 	stw	fp,36(sp)
   46a00:	df000904 	addi	fp,sp,36
   46a04:	e13ffb15 	stw	r4,-20(fp)
   46a08:	e17ffc15 	stw	r5,-16(fp)
   46a0c:	e1bffd15 	stw	r6,-12(fp)
   46a10:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   46a14:	e0bffb17 	ldw	r2,-20(fp)
   46a18:	10800017 	ldw	r2,0(r2)
   46a1c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   46a20:	e0bffc17 	ldw	r2,-16(fp)
   46a24:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   46a28:	e0bffd17 	ldw	r2,-12(fp)
   46a2c:	1007883a 	mov	r3,r2
   46a30:	e0bffc17 	ldw	r2,-16(fp)
   46a34:	10c5883a 	add	r2,r2,r3
   46a38:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   46a3c:	00001606 	br	46a98 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   46a40:	e0bffa17 	ldw	r2,-24(fp)
   46a44:	10800037 	ldwio	r2,0(r2)
   46a48:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   46a4c:	e0bff717 	ldw	r2,-36(fp)
   46a50:	10a0000c 	andi	r2,r2,32768
   46a54:	1005003a 	cmpeq	r2,r2,zero
   46a58:	1000081e 	bne	r2,zero,46a7c <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   46a5c:	e0bff717 	ldw	r2,-36(fp)
   46a60:	1007883a 	mov	r3,r2
   46a64:	e0bff917 	ldw	r2,-28(fp)
   46a68:	10c00005 	stb	r3,0(r2)
   46a6c:	e0bff917 	ldw	r2,-28(fp)
   46a70:	10800044 	addi	r2,r2,1
   46a74:	e0bff915 	stw	r2,-28(fp)
   46a78:	00000706 	br	46a98 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   46a7c:	e0fff917 	ldw	r3,-28(fp)
   46a80:	e0bffc17 	ldw	r2,-16(fp)
   46a84:	1880071e 	bne	r3,r2,46aa4 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   46a88:	e0bffe17 	ldw	r2,-8(fp)
   46a8c:	1090000c 	andi	r2,r2,16384
   46a90:	1004c03a 	cmpne	r2,r2,zero
   46a94:	1000031e 	bne	r2,zero,46aa4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   46a98:	e0fff917 	ldw	r3,-28(fp)
   46a9c:	e0bff817 	ldw	r2,-32(fp)
   46aa0:	18bfe736 	bltu	r3,r2,46a40 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   46aa4:	e0fff917 	ldw	r3,-28(fp)
   46aa8:	e0bffc17 	ldw	r2,-16(fp)
   46aac:	18800526 	beq	r3,r2,46ac4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   46ab0:	e0fff917 	ldw	r3,-28(fp)
   46ab4:	e0bffc17 	ldw	r2,-16(fp)
   46ab8:	1887c83a 	sub	r3,r3,r2
   46abc:	e0ffff15 	stw	r3,-4(fp)
   46ac0:	00000906 	br	46ae8 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   46ac4:	e0bffe17 	ldw	r2,-8(fp)
   46ac8:	1090000c 	andi	r2,r2,16384
   46acc:	1005003a 	cmpeq	r2,r2,zero
   46ad0:	1000031e 	bne	r2,zero,46ae0 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   46ad4:	00bffd44 	movi	r2,-11
   46ad8:	e0bfff15 	stw	r2,-4(fp)
   46adc:	00000206 	br	46ae8 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   46ae0:	00bffec4 	movi	r2,-5
   46ae4:	e0bfff15 	stw	r2,-4(fp)
   46ae8:	e0bfff17 	ldw	r2,-4(fp)
}
   46aec:	e037883a 	mov	sp,fp
   46af0:	df000017 	ldw	fp,0(sp)
   46af4:	dec00104 	addi	sp,sp,4
   46af8:	f800283a 	ret

00046afc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   46afc:	defff904 	addi	sp,sp,-28
   46b00:	df000615 	stw	fp,24(sp)
   46b04:	df000604 	addi	fp,sp,24
   46b08:	e13ffc15 	stw	r4,-16(fp)
   46b0c:	e17ffd15 	stw	r5,-12(fp)
   46b10:	e1bffe15 	stw	r6,-8(fp)
   46b14:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   46b18:	e0bffc17 	ldw	r2,-16(fp)
   46b1c:	10800017 	ldw	r2,0(r2)
   46b20:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   46b24:	e0bffe17 	ldw	r2,-8(fp)
   46b28:	1007883a 	mov	r3,r2
   46b2c:	e0bffd17 	ldw	r2,-12(fp)
   46b30:	10c5883a 	add	r2,r2,r3
   46b34:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   46b38:	00001106 	br	46b80 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   46b3c:	e0bffb17 	ldw	r2,-20(fp)
   46b40:	10800104 	addi	r2,r2,4
   46b44:	10800037 	ldwio	r2,0(r2)
   46b48:	10bfffec 	andhi	r2,r2,65535
   46b4c:	1005003a 	cmpeq	r2,r2,zero
   46b50:	10000b1e 	bne	r2,zero,46b80 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   46b54:	e13ffb17 	ldw	r4,-20(fp)
   46b58:	e0bffd17 	ldw	r2,-12(fp)
   46b5c:	10800003 	ldbu	r2,0(r2)
   46b60:	10c03fcc 	andi	r3,r2,255
   46b64:	18c0201c 	xori	r3,r3,128
   46b68:	18ffe004 	addi	r3,r3,-128
   46b6c:	e0bffd17 	ldw	r2,-12(fp)
   46b70:	10800044 	addi	r2,r2,1
   46b74:	e0bffd15 	stw	r2,-12(fp)
   46b78:	2005883a 	mov	r2,r4
   46b7c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   46b80:	e0fffd17 	ldw	r3,-12(fp)
   46b84:	e0bffa17 	ldw	r2,-24(fp)
   46b88:	18bfec36 	bltu	r3,r2,46b3c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   46b8c:	e0bffe17 	ldw	r2,-8(fp)
}
   46b90:	e037883a 	mov	sp,fp
   46b94:	df000017 	ldw	fp,0(sp)
   46b98:	dec00104 	addi	sp,sp,4
   46b9c:	f800283a 	ret

00046ba0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   46ba0:	defffd04 	addi	sp,sp,-12
   46ba4:	df000215 	stw	fp,8(sp)
   46ba8:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
   46bac:	00800174 	movhi	r2,5
   46bb0:	10a10404 	addi	r2,r2,-31728
   46bb4:	10800017 	ldw	r2,0(r2)
   46bb8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   46bbc:	00800174 	movhi	r2,5
   46bc0:	10a10504 	addi	r2,r2,-31724
   46bc4:	10800017 	ldw	r2,0(r2)
   46bc8:	1004c03a 	cmpne	r2,r2,zero
   46bcc:	1000031e 	bne	r2,zero,46bdc <alt_timestamp_start+0x3c>
  {
    return -1;
   46bd0:	00bfffc4 	movi	r2,-1
   46bd4:	e0bfff15 	stw	r2,-4(fp)
   46bd8:	00001506 	br	46c30 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   46bdc:	e0bffe17 	ldw	r2,-8(fp)
   46be0:	10800104 	addi	r2,r2,4
   46be4:	1007883a 	mov	r3,r2
   46be8:	00800204 	movi	r2,8
   46bec:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   46bf0:	e0bffe17 	ldw	r2,-8(fp)
   46bf4:	10800204 	addi	r2,r2,8
   46bf8:	1007883a 	mov	r3,r2
   46bfc:	00bfffd4 	movui	r2,65535
   46c00:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   46c04:	e0bffe17 	ldw	r2,-8(fp)
   46c08:	10800304 	addi	r2,r2,12
   46c0c:	1007883a 	mov	r3,r2
   46c10:	00bfffd4 	movui	r2,65535
   46c14:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   46c18:	e0bffe17 	ldw	r2,-8(fp)
   46c1c:	10800104 	addi	r2,r2,4
   46c20:	1007883a 	mov	r3,r2
   46c24:	00800104 	movi	r2,4
   46c28:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
   46c2c:	e03fff15 	stw	zero,-4(fp)
   46c30:	e0bfff17 	ldw	r2,-4(fp)
}
   46c34:	e037883a 	mov	sp,fp
   46c38:	df000017 	ldw	fp,0(sp)
   46c3c:	dec00104 	addi	sp,sp,4
   46c40:	f800283a 	ret

00046c44 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   46c44:	defffb04 	addi	sp,sp,-20
   46c48:	df000415 	stw	fp,16(sp)
   46c4c:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
   46c50:	00800174 	movhi	r2,5
   46c54:	10a10404 	addi	r2,r2,-31728
   46c58:	10800017 	ldw	r2,0(r2)
   46c5c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
   46c60:	00800174 	movhi	r2,5
   46c64:	10a10504 	addi	r2,r2,-31724
   46c68:	10800017 	ldw	r2,0(r2)
   46c6c:	1004c03a 	cmpne	r2,r2,zero
   46c70:	1000031e 	bne	r2,zero,46c80 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   46c74:	00bfffc4 	movi	r2,-1
   46c78:	e0bfff15 	stw	r2,-4(fp)
   46c7c:	00001306 	br	46ccc <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   46c80:	e0bffe17 	ldw	r2,-8(fp)
   46c84:	10800404 	addi	r2,r2,16
   46c88:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   46c8c:	e0bffe17 	ldw	r2,-8(fp)
   46c90:	10800404 	addi	r2,r2,16
   46c94:	10800037 	ldwio	r2,0(r2)
   46c98:	10bfffcc 	andi	r2,r2,65535
   46c9c:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   46ca0:	e0bffe17 	ldw	r2,-8(fp)
   46ca4:	10800504 	addi	r2,r2,20
   46ca8:	10800037 	ldwio	r2,0(r2)
   46cac:	10bfffcc 	andi	r2,r2,65535
   46cb0:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   46cb4:	e0bffc17 	ldw	r2,-16(fp)
   46cb8:	1006943a 	slli	r3,r2,16
   46cbc:	e0bffd17 	ldw	r2,-12(fp)
   46cc0:	1884b03a 	or	r2,r3,r2
   46cc4:	0084303a 	nor	r2,zero,r2
   46cc8:	e0bfff15 	stw	r2,-4(fp)
   46ccc:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
   46cd0:	e037883a 	mov	sp,fp
   46cd4:	df000017 	ldw	fp,0(sp)
   46cd8:	dec00104 	addi	sp,sp,4
   46cdc:	f800283a 	ret

00046ce0 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   46ce0:	deffff04 	addi	sp,sp,-4
   46ce4:	df000015 	stw	fp,0(sp)
   46ce8:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   46cec:	00800174 	movhi	r2,5
   46cf0:	10a10504 	addi	r2,r2,-31724
   46cf4:	10800017 	ldw	r2,0(r2)
}
   46cf8:	e037883a 	mov	sp,fp
   46cfc:	df000017 	ldw	fp,0(sp)
   46d00:	dec00104 	addi	sp,sp,4
   46d04:	f800283a 	ret

00046d08 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   46d08:	defffd04 	addi	sp,sp,-12
   46d0c:	dfc00215 	stw	ra,8(sp)
   46d10:	df000115 	stw	fp,4(sp)
   46d14:	df000104 	addi	fp,sp,4
   46d18:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   46d1c:	0046d440 	call	46d44 <alt_get_errno>
   46d20:	1007883a 	mov	r3,r2
   46d24:	00801604 	movi	r2,88
   46d28:	18800015 	stw	r2,0(r3)
  return -1;
   46d2c:	00bfffc4 	movi	r2,-1
}
   46d30:	e037883a 	mov	sp,fp
   46d34:	dfc00117 	ldw	ra,4(sp)
   46d38:	df000017 	ldw	fp,0(sp)
   46d3c:	dec00204 	addi	sp,sp,8
   46d40:	f800283a 	ret

00046d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   46d44:	defffd04 	addi	sp,sp,-12
   46d48:	dfc00215 	stw	ra,8(sp)
   46d4c:	df000115 	stw	fp,4(sp)
   46d50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   46d54:	00800134 	movhi	r2,4
   46d58:	109f3a04 	addi	r2,r2,31976
   46d5c:	10800017 	ldw	r2,0(r2)
   46d60:	1005003a 	cmpeq	r2,r2,zero
   46d64:	1000061e 	bne	r2,zero,46d80 <alt_get_errno+0x3c>
   46d68:	00800134 	movhi	r2,4
   46d6c:	109f3a04 	addi	r2,r2,31976
   46d70:	10800017 	ldw	r2,0(r2)
   46d74:	103ee83a 	callr	r2
   46d78:	e0bfff15 	stw	r2,-4(fp)
   46d7c:	00000306 	br	46d8c <alt_get_errno+0x48>
   46d80:	00800174 	movhi	r2,5
   46d84:	10a10004 	addi	r2,r2,-31744
   46d88:	e0bfff15 	stw	r2,-4(fp)
   46d8c:	e0bfff17 	ldw	r2,-4(fp)
}
   46d90:	e037883a 	mov	sp,fp
   46d94:	dfc00117 	ldw	ra,4(sp)
   46d98:	df000017 	ldw	fp,0(sp)
   46d9c:	dec00204 	addi	sp,sp,8
   46da0:	f800283a 	ret

00046da4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   46da4:	deffff04 	addi	sp,sp,-4
   46da8:	df000015 	stw	fp,0(sp)
   46dac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   46db0:	e037883a 	mov	sp,fp
   46db4:	df000017 	ldw	fp,0(sp)
   46db8:	dec00104 	addi	sp,sp,4
   46dbc:	f800283a 	ret

00046dc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   46dc0:	defffc04 	addi	sp,sp,-16
   46dc4:	df000315 	stw	fp,12(sp)
   46dc8:	df000304 	addi	fp,sp,12
   46dcc:	e13ffd15 	stw	r4,-12(fp)
   46dd0:	e17ffe15 	stw	r5,-8(fp)
   46dd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   46dd8:	e0bfff17 	ldw	r2,-4(fp)
}
   46ddc:	e037883a 	mov	sp,fp
   46de0:	df000017 	ldw	fp,0(sp)
   46de4:	dec00104 	addi	sp,sp,4
   46de8:	f800283a 	ret

00046dec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   46dec:	defffd04 	addi	sp,sp,-12
   46df0:	dfc00215 	stw	ra,8(sp)
   46df4:	df000115 	stw	fp,4(sp)
   46df8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   46dfc:	00bfff04 	movi	r2,-4
   46e00:	00c00134 	movhi	r3,4
   46e04:	18dcb604 	addi	r3,r3,29400
   46e08:	1885883a 	add	r2,r3,r2
   46e0c:	e0bfff15 	stw	r2,-4(fp)
   46e10:	00000606 	br	46e2c <_do_ctors+0x40>
        (*ctor) (); 
   46e14:	e0bfff17 	ldw	r2,-4(fp)
   46e18:	10800017 	ldw	r2,0(r2)
   46e1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   46e20:	e0bfff17 	ldw	r2,-4(fp)
   46e24:	10bfff04 	addi	r2,r2,-4
   46e28:	e0bfff15 	stw	r2,-4(fp)
   46e2c:	e0ffff17 	ldw	r3,-4(fp)
   46e30:	00800134 	movhi	r2,4
   46e34:	109cb404 	addi	r2,r2,29392
   46e38:	18bff62e 	bgeu	r3,r2,46e14 <_do_ctors+0x28>
        (*ctor) (); 
}
   46e3c:	e037883a 	mov	sp,fp
   46e40:	dfc00117 	ldw	ra,4(sp)
   46e44:	df000017 	ldw	fp,0(sp)
   46e48:	dec00204 	addi	sp,sp,8
   46e4c:	f800283a 	ret

00046e50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   46e50:	defffd04 	addi	sp,sp,-12
   46e54:	dfc00215 	stw	ra,8(sp)
   46e58:	df000115 	stw	fp,4(sp)
   46e5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   46e60:	00bfff04 	movi	r2,-4
   46e64:	00c00134 	movhi	r3,4
   46e68:	18dcb604 	addi	r3,r3,29400
   46e6c:	1885883a 	add	r2,r3,r2
   46e70:	e0bfff15 	stw	r2,-4(fp)
   46e74:	00000606 	br	46e90 <_do_dtors+0x40>
        (*dtor) (); 
   46e78:	e0bfff17 	ldw	r2,-4(fp)
   46e7c:	10800017 	ldw	r2,0(r2)
   46e80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   46e84:	e0bfff17 	ldw	r2,-4(fp)
   46e88:	10bfff04 	addi	r2,r2,-4
   46e8c:	e0bfff15 	stw	r2,-4(fp)
   46e90:	e0ffff17 	ldw	r3,-4(fp)
   46e94:	00800134 	movhi	r2,4
   46e98:	109cb604 	addi	r2,r2,29400
   46e9c:	18bff62e 	bgeu	r3,r2,46e78 <_do_dtors+0x28>
        (*dtor) (); 
}
   46ea0:	e037883a 	mov	sp,fp
   46ea4:	dfc00117 	ldw	ra,4(sp)
   46ea8:	df000017 	ldw	fp,0(sp)
   46eac:	dec00204 	addi	sp,sp,8
   46eb0:	f800283a 	ret

00046eb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   46eb4:	deffff04 	addi	sp,sp,-4
   46eb8:	df000015 	stw	fp,0(sp)
   46ebc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   46ec0:	e037883a 	mov	sp,fp
   46ec4:	df000017 	ldw	fp,0(sp)
   46ec8:	dec00104 	addi	sp,sp,4
   46ecc:	f800283a 	ret

00046ed0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   46ed0:	deffff04 	addi	sp,sp,-4
   46ed4:	df000015 	stw	fp,0(sp)
   46ed8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   46edc:	000170fa 	wrctl	ienable,zero
}
   46ee0:	e037883a 	mov	sp,fp
   46ee4:	df000017 	ldw	fp,0(sp)
   46ee8:	dec00104 	addi	sp,sp,4
   46eec:	f800283a 	ret

00046ef0 <atexit>:
   46ef0:	200b883a 	mov	r5,r4
   46ef4:	000d883a 	mov	r6,zero
   46ef8:	0009883a 	mov	r4,zero
   46efc:	000f883a 	mov	r7,zero
   46f00:	0046f241 	jmpi	46f24 <__register_exitproc>

00046f04 <exit>:
   46f04:	defffe04 	addi	sp,sp,-8
   46f08:	dc400015 	stw	r17,0(sp)
   46f0c:	000b883a 	mov	r5,zero
   46f10:	2023883a 	mov	r17,r4
   46f14:	dfc00115 	stw	ra,4(sp)
   46f18:	00470940 	call	47094 <__call_exitprocs>
   46f1c:	8809883a 	mov	r4,r17
   46f20:	00462300 	call	46230 <_exit>

00046f24 <__register_exitproc>:
   46f24:	defff904 	addi	sp,sp,-28
   46f28:	00800134 	movhi	r2,4
   46f2c:	109f3104 	addi	r2,r2,31940
   46f30:	dc400115 	stw	r17,4(sp)
   46f34:	14400017 	ldw	r17,0(r2)
   46f38:	dc000015 	stw	r16,0(sp)
   46f3c:	dd400515 	stw	r21,20(sp)
   46f40:	8c000c17 	ldw	r16,48(r17)
   46f44:	dd000415 	stw	r20,16(sp)
   46f48:	dcc00315 	stw	r19,12(sp)
   46f4c:	dc800215 	stw	r18,8(sp)
   46f50:	dfc00615 	stw	ra,24(sp)
   46f54:	2025883a 	mov	r18,r4
   46f58:	282b883a 	mov	r21,r5
   46f5c:	3029883a 	mov	r20,r6
   46f60:	3827883a 	mov	r19,r7
   46f64:	80002626 	beq	r16,zero,47000 <__register_exitproc+0xdc>
   46f68:	81400117 	ldw	r5,4(r16)
   46f6c:	008007c4 	movi	r2,31
   46f70:	11403716 	blt	r2,r5,47050 <__register_exitproc+0x12c>
   46f74:	90002026 	beq	r18,zero,46ff8 <__register_exitproc+0xd4>
   46f78:	81802217 	ldw	r6,136(r16)
   46f7c:	30002926 	beq	r6,zero,47024 <__register_exitproc+0x100>
   46f80:	81400117 	ldw	r5,4(r16)
   46f84:	00c00044 	movi	r3,1
   46f88:	31004017 	ldw	r4,256(r6)
   46f8c:	1946983a 	sll	r3,r3,r5
   46f90:	2945883a 	add	r2,r5,r5
   46f94:	1085883a 	add	r2,r2,r2
   46f98:	1185883a 	add	r2,r2,r6
   46f9c:	20c8b03a 	or	r4,r4,r3
   46fa0:	14c02015 	stw	r19,128(r2)
   46fa4:	15000015 	stw	r20,0(r2)
   46fa8:	00800084 	movi	r2,2
   46fac:	31004015 	stw	r4,256(r6)
   46fb0:	90801826 	beq	r18,r2,47014 <__register_exitproc+0xf0>
   46fb4:	2945883a 	add	r2,r5,r5
   46fb8:	1085883a 	add	r2,r2,r2
   46fbc:	1405883a 	add	r2,r2,r16
   46fc0:	28c00044 	addi	r3,r5,1
   46fc4:	0009883a 	mov	r4,zero
   46fc8:	15400215 	stw	r21,8(r2)
   46fcc:	80c00115 	stw	r3,4(r16)
   46fd0:	2005883a 	mov	r2,r4
   46fd4:	dfc00617 	ldw	ra,24(sp)
   46fd8:	dd400517 	ldw	r21,20(sp)
   46fdc:	dd000417 	ldw	r20,16(sp)
   46fe0:	dcc00317 	ldw	r19,12(sp)
   46fe4:	dc800217 	ldw	r18,8(sp)
   46fe8:	dc400117 	ldw	r17,4(sp)
   46fec:	dc000017 	ldw	r16,0(sp)
   46ff0:	dec00704 	addi	sp,sp,28
   46ff4:	f800283a 	ret
   46ff8:	81400117 	ldw	r5,4(r16)
   46ffc:	003fed06 	br	46fb4 <__register_exitproc+0x90>
   47000:	00800174 	movhi	r2,5
   47004:	10a31504 	addi	r2,r2,-29612
   47008:	1021883a 	mov	r16,r2
   4700c:	88800c15 	stw	r2,48(r17)
   47010:	003fd506 	br	46f68 <__register_exitproc+0x44>
   47014:	30804117 	ldw	r2,260(r6)
   47018:	10c4b03a 	or	r2,r2,r3
   4701c:	30804115 	stw	r2,260(r6)
   47020:	003fe406 	br	46fb4 <__register_exitproc+0x90>
   47024:	00800134 	movhi	r2,4
   47028:	10948304 	addi	r2,r2,21004
   4702c:	10000b26 	beq	r2,zero,4705c <__register_exitproc+0x138>
   47030:	01004204 	movi	r4,264
   47034:	103ee83a 	callr	r2
   47038:	10000826 	beq	r2,zero,4705c <__register_exitproc+0x138>
   4703c:	100d883a 	mov	r6,r2
   47040:	10004015 	stw	zero,256(r2)
   47044:	10004115 	stw	zero,260(r2)
   47048:	80802215 	stw	r2,136(r16)
   4704c:	003fcc06 	br	46f80 <__register_exitproc+0x5c>
   47050:	00800134 	movhi	r2,4
   47054:	10948304 	addi	r2,r2,21004
   47058:	1000021e 	bne	r2,zero,47064 <__register_exitproc+0x140>
   4705c:	013fffc4 	movi	r4,-1
   47060:	003fdb06 	br	46fd0 <__register_exitproc+0xac>
   47064:	01002304 	movi	r4,140
   47068:	103ee83a 	callr	r2
   4706c:	1007883a 	mov	r3,r2
   47070:	103ffa26 	beq	r2,zero,4705c <__register_exitproc+0x138>
   47074:	88800c17 	ldw	r2,48(r17)
   47078:	1821883a 	mov	r16,r3
   4707c:	18000115 	stw	zero,4(r3)
   47080:	18800015 	stw	r2,0(r3)
   47084:	88c00c15 	stw	r3,48(r17)
   47088:	903fdb26 	beq	r18,zero,46ff8 <__register_exitproc+0xd4>
   4708c:	003fba06 	br	46f78 <__register_exitproc+0x54>

00047090 <register_fini>:
   47090:	f800283a 	ret

00047094 <__call_exitprocs>:
   47094:	defff304 	addi	sp,sp,-52
   47098:	00800134 	movhi	r2,4
   4709c:	109f3104 	addi	r2,r2,31940
   470a0:	df000b15 	stw	fp,44(sp)
   470a4:	17000017 	ldw	fp,0(r2)
   470a8:	00800134 	movhi	r2,4
   470ac:	10947e04 	addi	r2,r2,20984
   470b0:	1005003a 	cmpeq	r2,r2,zero
   470b4:	d8800215 	stw	r2,8(sp)
   470b8:	e0800c04 	addi	r2,fp,48
   470bc:	dd800915 	stw	r22,36(sp)
   470c0:	dd400815 	stw	r21,32(sp)
   470c4:	dfc00c15 	stw	ra,48(sp)
   470c8:	ddc00a15 	stw	r23,40(sp)
   470cc:	dd000715 	stw	r20,28(sp)
   470d0:	dcc00615 	stw	r19,24(sp)
   470d4:	dc800515 	stw	r18,20(sp)
   470d8:	dc400415 	stw	r17,16(sp)
   470dc:	dc000315 	stw	r16,12(sp)
   470e0:	282d883a 	mov	r22,r5
   470e4:	d9000115 	stw	r4,4(sp)
   470e8:	d8800015 	stw	r2,0(sp)
   470ec:	282b003a 	cmpeq	r21,r5,zero
   470f0:	e4400c17 	ldw	r17,48(fp)
   470f4:	88001226 	beq	r17,zero,47140 <__call_exitprocs+0xac>
   470f8:	ddc00017 	ldw	r23,0(sp)
   470fc:	88800117 	ldw	r2,4(r17)
   47100:	8c802217 	ldw	r18,136(r17)
   47104:	143fffc4 	addi	r16,r2,-1
   47108:	80000b16 	blt	r16,zero,47138 <__call_exitprocs+0xa4>
   4710c:	9027003a 	cmpeq	r19,r18,zero
   47110:	a800171e 	bne	r21,zero,47170 <__call_exitprocs+0xdc>
   47114:	9800051e 	bne	r19,zero,4712c <__call_exitprocs+0x98>
   47118:	8409883a 	add	r4,r16,r16
   4711c:	2105883a 	add	r2,r4,r4
   47120:	1485883a 	add	r2,r2,r18
   47124:	10c02017 	ldw	r3,128(r2)
   47128:	b0c01226 	beq	r22,r3,47174 <__call_exitprocs+0xe0>
   4712c:	843fffc4 	addi	r16,r16,-1
   47130:	00bfffc4 	movi	r2,-1
   47134:	80bff61e 	bne	r16,r2,47110 <__call_exitprocs+0x7c>
   47138:	d8800217 	ldw	r2,8(sp)
   4713c:	10003226 	beq	r2,zero,47208 <__call_exitprocs+0x174>
   47140:	dfc00c17 	ldw	ra,48(sp)
   47144:	df000b17 	ldw	fp,44(sp)
   47148:	ddc00a17 	ldw	r23,40(sp)
   4714c:	dd800917 	ldw	r22,36(sp)
   47150:	dd400817 	ldw	r21,32(sp)
   47154:	dd000717 	ldw	r20,28(sp)
   47158:	dcc00617 	ldw	r19,24(sp)
   4715c:	dc800517 	ldw	r18,20(sp)
   47160:	dc400417 	ldw	r17,16(sp)
   47164:	dc000317 	ldw	r16,12(sp)
   47168:	dec00d04 	addi	sp,sp,52
   4716c:	f800283a 	ret
   47170:	8409883a 	add	r4,r16,r16
   47174:	88c00117 	ldw	r3,4(r17)
   47178:	2105883a 	add	r2,r4,r4
   4717c:	1445883a 	add	r2,r2,r17
   47180:	18ffffc4 	addi	r3,r3,-1
   47184:	11800217 	ldw	r6,8(r2)
   47188:	1c001826 	beq	r3,r16,471ec <__call_exitprocs+0x158>
   4718c:	10000215 	stw	zero,8(r2)
   47190:	303fe626 	beq	r6,zero,4712c <__call_exitprocs+0x98>
   47194:	8d000117 	ldw	r20,4(r17)
   47198:	9800121e 	bne	r19,zero,471e4 <__call_exitprocs+0x150>
   4719c:	00c00044 	movi	r3,1
   471a0:	1c06983a 	sll	r3,r3,r16
   471a4:	90804017 	ldw	r2,256(r18)
   471a8:	1884703a 	and	r2,r3,r2
   471ac:	10000d26 	beq	r2,zero,471e4 <__call_exitprocs+0x150>
   471b0:	90804117 	ldw	r2,260(r18)
   471b4:	1884703a 	and	r2,r3,r2
   471b8:	10000e1e 	bne	r2,zero,471f4 <__call_exitprocs+0x160>
   471bc:	2105883a 	add	r2,r4,r4
   471c0:	1485883a 	add	r2,r2,r18
   471c4:	11400017 	ldw	r5,0(r2)
   471c8:	d9000117 	ldw	r4,4(sp)
   471cc:	303ee83a 	callr	r6
   471d0:	88800117 	ldw	r2,4(r17)
   471d4:	a0bfc61e 	bne	r20,r2,470f0 <__call_exitprocs+0x5c>
   471d8:	b8800017 	ldw	r2,0(r23)
   471dc:	147fd326 	beq	r2,r17,4712c <__call_exitprocs+0x98>
   471e0:	003fc306 	br	470f0 <__call_exitprocs+0x5c>
   471e4:	303ee83a 	callr	r6
   471e8:	003ff906 	br	471d0 <__call_exitprocs+0x13c>
   471ec:	8c000115 	stw	r16,4(r17)
   471f0:	003fe706 	br	47190 <__call_exitprocs+0xfc>
   471f4:	2105883a 	add	r2,r4,r4
   471f8:	1485883a 	add	r2,r2,r18
   471fc:	11000017 	ldw	r4,0(r2)
   47200:	303ee83a 	callr	r6
   47204:	003ff206 	br	471d0 <__call_exitprocs+0x13c>
   47208:	88800117 	ldw	r2,4(r17)
   4720c:	10000b1e 	bne	r2,zero,4723c <__call_exitprocs+0x1a8>
   47210:	89000017 	ldw	r4,0(r17)
   47214:	20000a26 	beq	r4,zero,47240 <__call_exitprocs+0x1ac>
   47218:	b9000015 	stw	r4,0(r23)
   4721c:	90000226 	beq	r18,zero,47228 <__call_exitprocs+0x194>
   47220:	9009883a 	mov	r4,r18
   47224:	00451f80 	call	451f8 <free>
   47228:	8809883a 	mov	r4,r17
   4722c:	00451f80 	call	451f8 <free>
   47230:	bc400017 	ldw	r17,0(r23)
   47234:	883fb11e 	bne	r17,zero,470fc <__call_exitprocs+0x68>
   47238:	003fc106 	br	47140 <__call_exitprocs+0xac>
   4723c:	89000017 	ldw	r4,0(r17)
   47240:	882f883a 	mov	r23,r17
   47244:	2023883a 	mov	r17,r4
   47248:	883fac1e 	bne	r17,zero,470fc <__call_exitprocs+0x68>
   4724c:	003fbc06 	br	47140 <__call_exitprocs+0xac>
   47250:	0201ffff 	0x201ffff
   47254:	883a0000 	call	883a000 <__alt_data_end+0x87e1960>
   47258:	010d0bff 	0x10d0bff
   4725c:	7f010002 	0x7f010002
   47260:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   47264:	000473e4 	muli	zero,zero,4559
   47268:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   4726c:	010d0bff 	0x10d0bff
   47270:	01000004 	movi	r4,0
   47274:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   47278:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4727c:	010d0bff 	0x10d0bff
   47280:	01000004 	movi	r4,0
   47284:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   47288:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4728c:	010d0bff 	0x10d0bff
   47290:	01000004 	movi	r4,0
   47294:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   47298:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4729c:	010d0bff 	0x10d0bff
   472a0:	7f010002 	0x7f010002
   472a4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   472a8:	000473e4 	muli	zero,zero,4559
   472ac:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   472b0:	01090bff 	0x1090bff
   472b4:	7f010002 	0x7f010002
	...
   472c0:	01090bff 	0x1090bff
   472c4:	7f010002 	0x7f010002
	...
   472d0:	00040620 	cmpeqi	zero,zero,4120
   472d4:	00047090 	cmplti	zero,zero,4546
