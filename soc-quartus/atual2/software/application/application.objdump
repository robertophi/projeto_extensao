
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000067d0 memsz 0x000067d0 flags r-x
    LOAD off    0x000077f0 vaddr 0x000467f0 paddr 0x00046ed0 align 2**12
         filesz 0x000006e0 memsz 0x000006e0 flags rw-
    LOAD off    0x000085b0 vaddr 0x000475b0 paddr 0x000475b0 align 2**12
         filesz 0x00000000 memsz 0x00000914 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000064c8  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  000464e8  000464e8  000074e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000006e0  000467f0  00046ed0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000914  000475b0  000475b0  000085b0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00007ed0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000908  00000000  00000000  00007ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000182c  00000000  00000000  00008800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000166dc  00000000  00000000  0000a02c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006d2d  00000000  00000000  00020708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000de25  00000000  00000000  00027435  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000017f0  00000000  00000000  0003525c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002cd2  00000000  00000000  00036a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004f25  00000000  00000000  0003971e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0003e644  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d8  00000000  00000000  0003e658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000424c1  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000424c4  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000424c9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000424ca  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000424cb  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000424d6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  000424e1  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  000424ec  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000040  00000000  00000000  000424f7  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00039502  00000000  00000000  00042537  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .text	00000000 .text
000464e8 l    d  .rodata	00000000 .rodata
000467f0 l    d  .rwdata	00000000 .rwdata
000475b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 app.cpp
00040470 l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
00040410 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
000419d8 l     F .text	00000030 _Z12read_uleb128PKhPj
00041a08 l     F .text	00000054 _Z12read_sleb128PKhPi
00041a5c l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00041af8 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
00041ccc l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
00041d5c l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00041e5c l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
00041ee0 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
000475c4 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00047610 l     O .bss	00000800 emergency_buffer
000475d0 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
00042b74 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 fp-bit.c
00043194 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00043a18 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
000475d4 l     O .bss	00000004 fc_static
00043c5c l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00043d74 l     F .text	000000cc _Unwind_RaiseException_Phase2
00043e40 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00046bf8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00045568 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00045798 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00045878 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00046eac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_close.c
00045f54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00045fd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000462a0 l     F .text	00000004 register_fini
000410d8 g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
00042918 g     F .text	00000040 __cxa_free_exception
00043144 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
000426c8 g     F .text	00000018 _ZSt10unexpectedv
000458e4 g     F .text	00000050 alt_main
00041248 g     F .text	00000020 _ZN4WiFiD2Ev
00043c0c g     F .text	00000014 _Unwind_GetIPInfo
00046ed0 g       *ABS*	00000000 __flash_rwdata_start
00042a8c g     F .text	00000074 __cxa_rethrow
00043bac g     F .text	0000000c _Unwind_SjLj_Unregister
000425e8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00043bfc g     F .text	00000010 _Unwind_GetIP
00047ec4 g       *ABS*	00000000 __alt_heap_start
00045044 g     F .text	00000074 _kill_r
00042908 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00043040 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00044f84 g     F .text	000000a0 _signal_r
00043030 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00046670  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00045954 g     F .text	00000020 __malloc_unlock
00042bdc g     F .text	00000020 _ZSt18uncaught_exceptionv
0004362c g     F .text	00000174 __divsf3
000475f8 g     O .bss	00000004 altera_avalon_timer_ts_freq
00042854 g     F .text	00000010 _ZNSt9exceptionD2Ev
00041158 g     F .text	00000038 _ZN6MotorsC2Ev
00041190 g     F .text	00000038 _ZN6MotorsC1Ev
00041118 g     F .text	00000040 _ZN6Motors21write_to_next_collumnEv
00046560  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040d90 g     F .text	00000044 _ZN3FFTC2Ev
00043c3c g     F .text	00000008 _Unwind_GetRegionStart
00040020 g       *ABS*	00000000 __flash_exceptions_start
000412a8 g     F .text	00000020 _ZN4WiFiC1Ev
000426e0 g     F .text	00000100 _Znwm
000475e4 g     O .bss	00000004 errno
0004400c g     F .text	00000080 _Unwind_Backtrace
000475ec g     O .bss	00000004 alt_argv
0004ee80 g       *ABS*	00000000 _gp
00040fb4 g     F .text	00000050 _ZN6Motors11write_delayEjjj
00043378 g     F .text	00000070 __subsf3
00045638 g     F .text	00000020 getpid
000475b4 g     O .bss	00000004 _ZN3App3fftE
00041f64 g     F .text	00000180 __cxa_call_unexpected
00042bd4 g     F .text	00000008 __cxa_get_exception_ptr
00046d00 g     O .rwdata	00000180 alt_fd_list
00043fbc g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
00043bd0 g     F .text	00000014 _Unwind_GetCFA
000425d4 g     F .text	00000014 _ZSt13set_terminatePFvvE
0004133c g     F .text	00000190 _ZN4WiFi7receiveEPhPj
000464e8 g       *ABS*	00000000 __DTOR_END__
0004009c g     F .text	00000040 _ZN3AppC1Ev
00042e78 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000410a4 g     F .text	00000034 _ZN6Motors5writeEj
00045d70 g     F .text	00000104 altera_avalon_jtag_uart_read
00044584 g     F .text	00000014 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00043b54 g     F .text	00000008 __udivsi3
00044d68 g     F .text	000000cc _raise_r
00043908 g     F .text	00000078 __lesf2
000475d8 g     O .bss	00000004 __malloc_top_pad
00045040 g     F .text	00000004 _getpid_r
00042e98 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00044ebc g     F .text	000000b4 __sigtramp_r
00044cf8 g     F .text	00000070 _sbrk_r
00040e80 g     F .text	00000040 _ZN3FFT5writeEPh
000466a4  w    O .rodata	00000020 _ZTVSt9type_info
00042824 g     F .text	00000010 _ZNKSt9exception4whatEv
00046ec8 g     O .rwdata	00000004 alt_max_fd
00040cf4  w    F .text	00000028 _ZN3App6Buffer6lengthEv
000465dc  w    O .rodata	0000000c _ZTISt9bad_alloc
000475dc g     O .bss	00000004 __malloc_max_sbrked_mem
00046644  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00042ef8 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000419cc g     F .text	0000000c _ZdlPv
00046ea8 g     O .rwdata	00000004 _global_impure_ptr
00047ec4 g       *ABS*	00000000 __bss_end
000455c8 g     F .text	00000070 alt_getchar
00043b9c g     F .text	00000010 _Unwind_SjLj_Register
000405c4 g     F .text	0000012c _ZN3App12writeCompassEi
00044558 g     F .text	00000018 abort
000411f4 g     F .text	00000054 _ZN6Motors12getSingletonEv
00041288 g     F .text	00000020 _ZN4WiFiC2Ev
00042bfc g     F .text	000000a4 __cxa_end_catch
000428a8 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
000426a0 g     F .text	00000018 _ZSt9terminatev
00046cd8 g     O .rwdata	00000028 alt_dev_null
000443e8 g     F .text	000000c8 __unpack_f
00046614  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00041054 g     F .text	00000050 _ZN6Motors11write_powerEjjj
00045fb4 g     F .text	0000001c alt_dcache_flush_all
00046e80  w    O .rwdata	00000008 _ZTISt9exception
00046ed0 g       *ABS*	00000000 __ram_rwdata_end
00043174 g     F .text	00000010 _ZNSt9type_infoD1Ev
00046ec0 g     O .rwdata	00000008 alt_dev_list
000475cc g     O .bss	00000004 __new_handler
00043164 g     F .text	00000010 _ZNSt9type_infoD0Ev
000437a0 g     F .text	00000078 __gtsf2
000467f0 g       *ABS*	00000000 __ram_rodata_end
00046eb0 g     O .rwdata	00000004 jtag_uart_0
00040b8c g     F .text	00000034 _ZN3AppD2Ev
00045658 g     F .text	00000140 kill
000450b8 g     F .text	00000050 strcat
00043b5c g     F .text	00000008 __umodsi3
0004315c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000404a0 g     F .text	00000124 _ZN3App14writeGyroscopeEiii
00047ec4 g       *ABS*	00000000 end
00044288 g     F .text	00000160 __pack_f
00040e38 g     F .text	00000020 _ZN3FFTD1Ev
00043d5c g     F .text	00000018 _Unwind_DeleteException
000464e0 g       *ABS*	00000000 __CTOR_LIST__
000586a0 g       *ABS*	00000000 __alt_stack_pointer
00044208 g     F .text	00000080 __clzsi2
000400fc g     F .text	00000314 _ZN3App11defineIndexEi
00042db8 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00045e74 g     F .text	000000a4 altera_avalon_jtag_uart_write
00046588  w    O .rodata	00000012 _ZTSSt13bad_exception
00040e18 g     F .text	00000020 _ZN3FFTD2Ev
00045254 g     F .text	00000314 _free_r
00045974 g     F .text	00000258 alt_printf
000462a4 g     F .text	000001bc __call_exitprocs
00040f34 g     F .text	00000020 _ZN6MotorsD1Ev
00046ea0 g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000003c _start
000466c4  w    O .rodata	0000000d _ZTSSt9type_info
00040ec0 g     F .text	00000054 _ZN3FFT12getSingletonEv
000465b8  w    O .rodata	00000014 _ZTVSt9bad_alloc
00045024 g     F .text	0000001c signal
00045d30 g     F .text	00000040 alt_sys_init
00043980 g     F .text	00000098 __floatsisf
00046134 g     F .text	0000016c __register_exitproc
000465cc  w    O .rodata	0000000d _ZTSSt9bad_alloc
00040dd4 g     F .text	00000044 _ZN3FFTC1Ev
00043b64 g     F .text	00000038 __mulsi3
000467f0 g       *ABS*	00000000 __ram_rwdata_start
00043ec4 g     F .text	000000f8 _Unwind_SjLj_RaiseException
000464e8 g       *ABS*	00000000 __ram_rodata_start
00047e10 g     O .bss	00000028 __malloc_current_mallinfo
00043e68 g     F .text	0000005c _Unwind_SjLj_Resume
00043184 g     F .text	00000010 _ZNSt9type_infoD2Ev
00042f74 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000412c8 g     F .text	00000074 _ZN4WiFi5writeEPci
00047ec4 g       *ABS*	00000000 __alt_stack_base
000428c4 g     F .text	00000034 _ZNSt9bad_allocD0Ev
00043020 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0004408c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
000475b0 g     O .bss	00000004 _ZN3App6motorsE
0004313c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00041548 g     F .text	000000b0 _ZN4WiFi10stopServerEv
000467f0 g     O .rwdata	00000408 __malloc_av_
000466d4 g     O .rodata	00000010 __thenan_sf
00046574  w    O .rodata	00000014 _ZTVSt9exception
00042e24 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
00045934 g     F .text	00000020 __malloc_lock
00045c40 g     F .text	000000bc sbrk
000465e8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00042b00 g     F .text	00000074 __cxa_throw
00043c20 g     F .text	00000010 _Unwind_SetIP
000475b0 g       *ABS*	00000000 __bss_start
00044cd8 g     F .text	00000020 memset
00041854 g     F .text	000000d8 main
000475b8 g     O .bss	00000004 _ZN3FFT3fftE
000475f0 g     O .bss	00000004 alt_envp
000475e0 g     O .bss	00000004 __malloc_max_total_mem
000425c4 g     F .text	00000008 __cxa_get_globals_fast
00043890 g     F .text	00000078 __ltsf2
000586a0 g       *ABS*	00000000 __alt_heap_limit
00047e38 g     O .bss	0000008c _atexit0
00044598 g     F .text	00000740 _malloc_r
00046ecc g     O .rwdata	00000004 alt_errno
00044eac g     F .text	00000010 _init_signal
00046638  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00042898 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
00043a94 g     F .text	00000060 __divsi3
00045128 g     F .text	0000012c _malloc_trim_r
00040994 g     F .text	00000154 _ZN3App10writeAudioEPii
000464e8 g       *ABS*	00000000 __CTOR_END__
0004344c g     F .text	000001e0 __mulsf3
000464e8 g       *ABS*	00000000 __flash_rodata_start
000464e8 g       *ABS*	00000000 __DTOR_LIST__
00045cfc g     F .text	00000034 alt_irq_init
00040bc0  w    F .text	0000004c _ZN9run_param4initEv
000411c8 g     F .text	0000002c _ZN6Motors4readEv
00041268 g     F .text	00000020 _ZN4WiFiD1Ev
00042fec g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000466e4 g     O .rodata	00000100 __clz_tab
00046100 g     F .text	00000014 atexit
00043818 g     F .text	00000078 __gesf2
00043c54 g     F .text	00000008 _Unwind_GetTextRelBase
000427e0 g     F .text	00000044 __cxa_call_terminate
00040c0c  w    F .text	000000e8 _ZN3App6Buffer3popEv
00046ea4 g     O .rwdata	00000004 _impure_ptr
000475e8 g     O .bss	00000004 alt_argc
000475c0 g     O .bss	00000004 _ZN4WiFi4wifiE
000475f4 g     O .bss	00000004 altera_avalon_timer_ts_base
00046060 g     F .text	00000064 _do_dtors
000406f0 g     F .text	000002a4 _ZN3App3runEv
00040ae8 g     F .text	00000070 _ZN3App10fftHandlerEj
00043c44 g     F .text	00000008 _Unwind_FindEnclosingFunction
0004192c g     F .text	000000a0 _Znam
00046eb8 g     O .rwdata	00000008 alt_fs_list
00043c30 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00041004 g     F .text	00000050 _ZN6Motors15write_variationEjjj
00042ca0 g     F .text	00000118 __cxa_begin_catch
00042e88 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000426b8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040f54 g     F .text	00000060 _ZN6Motors5writeEjjjj
00042864 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00046e8c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000475bc g     O .bss	00000004 _ZN6Motors6motorsE
00042958 g     F .text	00000134 __cxa_allocate_exception
00046698  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
000428b8 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
00046ed0 g       *ABS*	00000000 _edata
00047ec4 g       *ABS*	00000000 _end
00046e88 g     O .rwdata	00000001 _ZSt7nothrow
00040b58 g     F .text	00000034 _ZN3AppD1Ev
000420e4 g     F .text	000004e0 __gxx_personality_sj0
00040020 g       *ABS*	00000000 __ram_exceptions_end
00042f28 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
000415f8 g     F .text	00000064 _ZN4WiFi11startServerEv
00042844 g     F .text	00000010 _ZNSt9exceptionD1Ev
000414cc g     F .text	0000007c _ZN4WiFi15sendInstructionEPc
00046e9c g     O .rwdata	00000004 __malloc_trim_threshold
000460e0 g     F .text	00000020 altera_nios2_qsys_irq_init
00046114 g     F .text	00000020 exit
00043be4 g     F .text	00000018 _Unwind_SetGR
00040d1c  w    F .text	00000074 _ZN3App6BufferC1Ev
000425fc g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
00041800 g     F .text	00000054 _ZN4WiFi12getSingletonEv
00040e58 g     F .text	00000028 _ZN3FFT4readEv
00043af4 g     F .text	00000060 __modsi3
000428f8 g     F .text	00000010 _ZNSt9bad_allocD1Ev
000475fc g     O .bss	00000014 _ZN3App6bufferE
000586a0 g       *ABS*	00000000 __alt_data_end
00043074 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0004659c  w    O .rodata	0000000c _ZTISt13bad_exception
0004005c g     F .text	00000040 _ZN3AppC2Ev
00046eb4 g     O .rwdata	00000004 esp8266
000444b0 g     F .text	000000a8 __fpcmp_parts_f
000455a8 g     F .text	00000020 _exit
000440e4 g     F .text	00000124 __muldi3
00043bb8 g     F .text	00000018 _Unwind_GetGR
000425cc g     F .text	00000008 __cxa_get_globals
00046e90 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00045108 g     F .text	00000020 strlen
00044e48 g     F .text	00000064 _init_signal_r
00046e94  w    O .rwdata	00000008 _ZTISt9type_info
00045bcc g     F .text	00000074 alt_putchar
000465a8  w    O .rodata	0000000d _ZTSSt9exception
00042834 g     F .text	00000010 _ZNSt9exceptionD0Ev
000460c4 g     F .text	0000001c alt_icache_flush_all
00043c4c g     F .text	00000008 _Unwind_GetDataRelBase
000400dc g     F .text	00000020 _ZN3App5setupEv
00045ffc g     F .text	00000064 _do_ctors
00044f70 g     F .text	00000014 __sigtramp
0004165c g     F .text	000001a4 _ZN4WiFi6configEPcS0_
00045f18 g     F .text	0000003c close
000433e8 g     F .text	00000064 __addsf3
000457f8 g     F .text	00000080 alt_load
0004314c g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00040f14 g     F .text	00000020 _ZN6MotorsD2Ev
00044e34 g     F .text	00000014 raise
00044570 g     F .text	00000014 free
00042e44 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08400814 	ori	at,at,32
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00040020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40020:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40024:	dee1a814 	ori	sp,sp,34464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   40028:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4002c:	d6bba014 	ori	gp,gp,61056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40030:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40034:	109d6c14 	ori	r2,r2,30128

    movhi r3, %hi(__bss_end)
   40038:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4003c:	18dfb114 	ori	r3,r3,32452

    beq r2, r3, 1f
   40040:	10c00326 	beq	r2,r3,40050 <_start+0x30>

0:
    stw zero, (r2)
   40044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4004c:	10fffd36 	bltu	r2,r3,40044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40050:	00457f80 	call	457f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40054:	00458e40 	call	458e4 <alt_main>

00040058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40058:	003fff06 	br	40058 <alt_after_alt_main>

0004005c <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   4005c:	defffd04 	addi	sp,sp,-12
   40060:	dfc00215 	stw	ra,8(sp)
   40064:	df000115 	stw	fp,4(sp)
   40068:	df000104 	addi	fp,sp,4
   4006c:	e13fff15 	stw	r4,-4(fp)
	//retirando wifi      wifi = WiFi::getSingleton();
	compass_vib_value = 255;
   40070:	e0ffff17 	ldw	r3,-4(fp)
   40074:	00803fc4 	movi	r2,255
   40078:	18800015 	stw	r2,0(r3)
	running.init();
   4007c:	e0bfff17 	ldw	r2,-4(fp)
   40080:	11000104 	addi	r4,r2,4
   40084:	0040bc00 	call	40bc0 <_ZN9run_param4initEv>
}
   40088:	e037883a 	mov	sp,fp
   4008c:	dfc00117 	ldw	ra,4(sp)
   40090:	df000017 	ldw	fp,0(sp)
   40094:	dec00204 	addi	sp,sp,8
   40098:	f800283a 	ret

0004009c <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   4009c:	defffd04 	addi	sp,sp,-12
   400a0:	dfc00215 	stw	ra,8(sp)
   400a4:	df000115 	stw	fp,4(sp)
   400a8:	df000104 	addi	fp,sp,4
   400ac:	e13fff15 	stw	r4,-4(fp)
	//retirando wifi      wifi = WiFi::getSingleton();
	compass_vib_value = 255;
   400b0:	e0ffff17 	ldw	r3,-4(fp)
   400b4:	00803fc4 	movi	r2,255
   400b8:	18800015 	stw	r2,0(r3)
	running.init();
   400bc:	e0bfff17 	ldw	r2,-4(fp)
   400c0:	11000104 	addi	r4,r2,4
   400c4:	0040bc00 	call	40bc0 <_ZN9run_param4initEv>
}
   400c8:	e037883a 	mov	sp,fp
   400cc:	dfc00117 	ldw	ra,4(sp)
   400d0:	df000017 	ldw	fp,0(sp)
   400d4:	dec00204 	addi	sp,sp,8
   400d8:	f800283a 	ret

000400dc <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
   400dc:	defffe04 	addi	sp,sp,-8
   400e0:	df000115 	stw	fp,4(sp)
   400e4:	df000104 	addi	fp,sp,4
   400e8:	e13fff15 	stw	r4,-4(fp)
	//retirando wifi   wifi->config(SSID, PASSWORD);
	//retirando wifi   wifi->startServer();
	//fft->setInterruptHandler(App::fftHandler);
}
   400ec:	e037883a 	mov	sp,fp
   400f0:	df000017 	ldw	fp,0(sp)
   400f4:	dec00104 	addi	sp,sp,4
   400f8:	f800283a 	ret

000400fc <_ZN3App11defineIndexEi>:
	zAngle = zAngle < 0 ? zAngle*-1 : zAngle;
	zAngle = zAngle + 10;
	motors->write((    0      | x | y |(zAngle > 240 ? 240 : zAngle)));               //ao invez de 255 : (zAngle > 100 ? 100 : zAngle)));
}

int App::defineIndex(int value) {
   400fc:	deffef04 	addi	sp,sp,-68
   40100:	dfc01015 	stw	ra,64(sp)
   40104:	df000f15 	stw	fp,60(sp)
   40108:	dc000e15 	stw	r16,56(sp)
   4010c:	df000e04 	addi	fp,sp,56
   40110:	e13ff915 	stw	r4,-28(fp)
   40114:	e17ffa15 	stw	r5,-24(fp)
	float line_int = 200/LINES-2;
   40118:	00909034 	movhi	r2,16960
   4011c:	e0bff815 	stw	r2,-32(fp)
	// each motor has an interval defined by this size
	int half_mot = (LINES - 1)%2 == 0 ? LINES/2 : ((int)(LINES - 1)/2) + 1;
   40120:	00800084 	movi	r2,2
   40124:	e0bff715 	stw	r2,-36(fp)
	// the motor in the middle of the line/column
	float half_int_end = line_int*(half_mot-1);
   40128:	e0bff717 	ldw	r2,-36(fp)
   4012c:	113fffc4 	addi	r4,r2,-1
   40130:	00439800 	call	43980 <__floatsisf>
   40134:	1009883a 	mov	r4,r2
   40138:	e17ff817 	ldw	r5,-32(fp)
   4013c:	004344c0 	call	4344c <__mulsf3>
   40140:	e0bff615 	stw	r2,-40(fp)
	// the point in the end of the middle motor interval
	if((-1)*half_int_end/2 < value && value < half_int_end/2) {
   40144:	e13ff617 	ldw	r4,-40(fp)
   40148:	01700034 	movhi	r5,49152
   4014c:	004362c0 	call	4362c <__divsf3>
   40150:	1021883a 	mov	r16,r2
   40154:	e13ffa17 	ldw	r4,-24(fp)
   40158:	00439800 	call	43980 <__floatsisf>
   4015c:	8009883a 	mov	r4,r16
   40160:	100b883a 	mov	r5,r2
   40164:	00438900 	call	43890 <__ltsf2>
   40168:	1004803a 	cmplt	r2,r2,zero
   4016c:	1000011e 	bne	r2,zero,40174 <_ZN3App11defineIndexEi+0x78>
   40170:	00000f06 	br	401b0 <_ZN3App11defineIndexEi+0xb4>
   40174:	e13ffa17 	ldw	r4,-24(fp)
   40178:	00439800 	call	43980 <__floatsisf>
   4017c:	1021883a 	mov	r16,r2
   40180:	e13ff617 	ldw	r4,-40(fp)
   40184:	01500034 	movhi	r5,16384
   40188:	004362c0 	call	4362c <__divsf3>
   4018c:	8009883a 	mov	r4,r16
   40190:	100b883a 	mov	r5,r2
   40194:	00438900 	call	43890 <__ltsf2>
   40198:	1004803a 	cmplt	r2,r2,zero
   4019c:	1000011e 	bne	r2,zero,401a4 <_ZN3App11defineIndexEi+0xa8>
   401a0:	00000306 	br	401b0 <_ZN3App11defineIndexEi+0xb4>
		return half_mot;
   401a4:	e0bff717 	ldw	r2,-36(fp)
   401a8:	e0bfff15 	stw	r2,-4(fp)
   401ac:	00009106 	br	403f4 <_ZN3App11defineIndexEi+0x2f8>
		// if the value is in the middle interval, return the middle identifier
	}
	float mot_int_b = half_int_end/2;
   401b0:	e13ff617 	ldw	r4,-40(fp)
   401b4:	01500034 	movhi	r5,16384
   401b8:	004362c0 	call	4362c <__divsf3>
   401bc:	e0bff515 	stw	r2,-44(fp)
	// the begin of the interval that will be tested
	int x = -1;
   401c0:	00bfffc4 	movi	r2,-1
   401c4:	e0bff415 	stw	r2,-48(fp)
	if(value >= 0) { // if is in the positive part
   401c8:	e0bffa17 	ldw	r2,-24(fp)
   401cc:	1004803a 	cmplt	r2,r2,zero
   401d0:	1000421e 	bne	r2,zero,402dc <_ZN3App11defineIndexEi+0x1e0>
		for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
   401d4:	00800044 	movi	r2,1
   401d8:	e0bff315 	stw	r2,-52(fp)
   401dc:	00003006 	br	402a0 <_ZN3App11defineIndexEi+0x1a4>
			// for each motor in the positive part but the last
			if(mot_int_b <= value && value < mot_int_b + line_int) {
   401e0:	e13ffa17 	ldw	r4,-24(fp)
   401e4:	00439800 	call	43980 <__floatsisf>
   401e8:	e03ffe05 	stb	zero,-8(fp)
   401ec:	1009883a 	mov	r4,r2
   401f0:	e17ff517 	ldw	r5,-44(fp)
   401f4:	00438180 	call	43818 <__gesf2>
   401f8:	1004403a 	cmpge	r2,r2,zero
   401fc:	1000011e 	bne	r2,zero,40204 <_ZN3App11defineIndexEi+0x108>
   40200:	00000206 	br	4020c <_ZN3App11defineIndexEi+0x110>
   40204:	00c00044 	movi	r3,1
   40208:	e0fffe05 	stb	r3,-8(fp)
   4020c:	e0fffe03 	ldbu	r3,-8(fp)
   40210:	1880005c 	xori	r2,r3,1
   40214:	10803fcc 	andi	r2,r2,255
   40218:	1004c03a 	cmpne	r2,r2,zero
   4021c:	1000191e 	bne	r2,zero,40284 <_ZN3App11defineIndexEi+0x188>
   40220:	e13ffa17 	ldw	r4,-24(fp)
   40224:	00439800 	call	43980 <__floatsisf>
   40228:	1021883a 	mov	r16,r2
   4022c:	e13ff517 	ldw	r4,-44(fp)
   40230:	e17ff817 	ldw	r5,-32(fp)
   40234:	00433e80 	call	433e8 <__addsf3>
   40238:	e03ffd05 	stb	zero,-12(fp)
   4023c:	8009883a 	mov	r4,r16
   40240:	100b883a 	mov	r5,r2
   40244:	00438900 	call	43890 <__ltsf2>
   40248:	1004803a 	cmplt	r2,r2,zero
   4024c:	1000011e 	bne	r2,zero,40254 <_ZN3App11defineIndexEi+0x158>
   40250:	00000206 	br	4025c <_ZN3App11defineIndexEi+0x160>
   40254:	00800044 	movi	r2,1
   40258:	e0bffd05 	stb	r2,-12(fp)
   4025c:	e0fffd03 	ldbu	r3,-12(fp)
   40260:	1880005c 	xori	r2,r3,1
   40264:	10803fcc 	andi	r2,r2,255
   40268:	1004c03a 	cmpne	r2,r2,zero
   4026c:	1000051e 	bne	r2,zero,40284 <_ZN3App11defineIndexEi+0x188>
				x = i + half_mot;
   40270:	e0bff317 	ldw	r2,-52(fp)
   40274:	e0fff717 	ldw	r3,-36(fp)
   40278:	10c5883a 	add	r2,r2,r3
   4027c:	e0bff415 	stw	r2,-48(fp)
	// the begin of the interval that will be tested
	int x = -1;
	if(value >= 0) { // if is in the positive part
		for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
			// for each motor in the positive part but the last
			if(mot_int_b <= value && value < mot_int_b + line_int) {
   40280:	00000406 	br	40294 <_ZN3App11defineIndexEi+0x198>
				x = i + half_mot;
				// if the value is in the interval of the motor being tested,
				// return it's identifier
			} else {
				mot_int_b += line_int; // else, just set to test the next motor
   40284:	e13ff517 	ldw	r4,-44(fp)
   40288:	e17ff817 	ldw	r5,-32(fp)
   4028c:	00433e80 	call	433e8 <__addsf3>
   40290:	e0bff515 	stw	r2,-44(fp)
	}
	float mot_int_b = half_int_end/2;
	// the begin of the interval that will be tested
	int x = -1;
	if(value >= 0) { // if is in the positive part
		for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
   40294:	e0bff317 	ldw	r2,-52(fp)
   40298:	10800044 	addi	r2,r2,1
   4029c:	e0bff315 	stw	r2,-52(fp)
   402a0:	e0bff317 	ldw	r2,-52(fp)
   402a4:	1085883a 	add	r2,r2,r2
   402a8:	10800088 	cmpgei	r2,r2,2
   402ac:	1000031e 	bne	r2,zero,402bc <_ZN3App11defineIndexEi+0x1c0>
   402b0:	e0bff417 	ldw	r2,-48(fp)
   402b4:	10bfffe0 	cmpeqi	r2,r2,-1
   402b8:	103fc91e 	bne	r2,zero,401e0 <_ZN3App11defineIndexEi+0xe4>
				// return it's identifier
			} else {
				mot_int_b += line_int; // else, just set to test the next motor
			}
		}
		if (x == -1) {
   402bc:	e0bff417 	ldw	r2,-48(fp)
   402c0:	10bfffd8 	cmpnei	r2,r2,-1
   402c4:	1000021e 	bne	r2,zero,402d0 <_ZN3App11defineIndexEi+0x1d4>
			x = LINES-1; // if it is in the positive part and the responsible
   402c8:	008000c4 	movi	r2,3
   402cc:	e0bff415 	stw	r2,-48(fp)
			// motor was not found, then the signal is bigger than 100
		}
		return x;
   402d0:	e0bff417 	ldw	r2,-48(fp)
   402d4:	e0bfff15 	stw	r2,-4(fp)
   402d8:	00004606 	br	403f4 <_ZN3App11defineIndexEi+0x2f8>
	}
	mot_int_b *= -1; // set to test in the negative part
   402dc:	e0bff517 	ldw	r2,-44(fp)
   402e0:	10a0003c 	xorhi	r2,r2,32768
   402e4:	e0bff515 	stw	r2,-44(fp)
	line_int *= -1;
   402e8:	e0bff817 	ldw	r2,-32(fp)
   402ec:	10a0003c 	xorhi	r2,r2,32768
   402f0:	e0bff815 	stw	r2,-32(fp)
	for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
   402f4:	00800044 	movi	r2,1
   402f8:	e0bff215 	stw	r2,-56(fp)
   402fc:	00003006 	br	403c0 <_ZN3App11defineIndexEi+0x2c4>
		//for each motor in the negative part
		if(mot_int_b >= value && value > mot_int_b + line_int) {
   40300:	e13ffa17 	ldw	r4,-24(fp)
   40304:	00439800 	call	43980 <__floatsisf>
   40308:	e03ffc05 	stb	zero,-16(fp)
   4030c:	1009883a 	mov	r4,r2
   40310:	e17ff517 	ldw	r5,-44(fp)
   40314:	00439080 	call	43908 <__lesf2>
   40318:	10800050 	cmplti	r2,r2,1
   4031c:	1000011e 	bne	r2,zero,40324 <_ZN3App11defineIndexEi+0x228>
   40320:	00000206 	br	4032c <_ZN3App11defineIndexEi+0x230>
   40324:	00c00044 	movi	r3,1
   40328:	e0fffc05 	stb	r3,-16(fp)
   4032c:	e0fffc03 	ldbu	r3,-16(fp)
   40330:	1880005c 	xori	r2,r3,1
   40334:	10803fcc 	andi	r2,r2,255
   40338:	1004c03a 	cmpne	r2,r2,zero
   4033c:	1000191e 	bne	r2,zero,403a4 <_ZN3App11defineIndexEi+0x2a8>
   40340:	e13ffa17 	ldw	r4,-24(fp)
   40344:	00439800 	call	43980 <__floatsisf>
   40348:	1021883a 	mov	r16,r2
   4034c:	e13ff517 	ldw	r4,-44(fp)
   40350:	e17ff817 	ldw	r5,-32(fp)
   40354:	00433e80 	call	433e8 <__addsf3>
   40358:	e03ffb05 	stb	zero,-20(fp)
   4035c:	8009883a 	mov	r4,r16
   40360:	100b883a 	mov	r5,r2
   40364:	00437a00 	call	437a0 <__gtsf2>
   40368:	10800048 	cmpgei	r2,r2,1
   4036c:	1000011e 	bne	r2,zero,40374 <_ZN3App11defineIndexEi+0x278>
   40370:	00000206 	br	4037c <_ZN3App11defineIndexEi+0x280>
   40374:	00800044 	movi	r2,1
   40378:	e0bffb05 	stb	r2,-20(fp)
   4037c:	e0fffb03 	ldbu	r3,-20(fp)
   40380:	1880005c 	xori	r2,r3,1
   40384:	10803fcc 	andi	r2,r2,255
   40388:	1004c03a 	cmpne	r2,r2,zero
   4038c:	1000051e 	bne	r2,zero,403a4 <_ZN3App11defineIndexEi+0x2a8>
			x = i + half_mot; // if the value is in the interval of the motor
   40390:	e0bff217 	ldw	r2,-56(fp)
   40394:	e0fff717 	ldw	r3,-36(fp)
   40398:	10c5883a 	add	r2,r2,r3
   4039c:	e0bff415 	stw	r2,-48(fp)
	}
	mot_int_b *= -1; // set to test in the negative part
	line_int *= -1;
	for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
		//for each motor in the negative part
		if(mot_int_b >= value && value > mot_int_b + line_int) {
   403a0:	00000406 	br	403b4 <_ZN3App11defineIndexEi+0x2b8>
			x = i + half_mot; // if the value is in the interval of the motor
			// being tested, return it's identifier
		} else {
			mot_int_b += line_int; // else, just set to test the next motor
   403a4:	e13ff517 	ldw	r4,-44(fp)
   403a8:	e17ff817 	ldw	r5,-32(fp)
   403ac:	00433e80 	call	433e8 <__addsf3>
   403b0:	e0bff515 	stw	r2,-44(fp)
		}
		return x;
	}
	mot_int_b *= -1; // set to test in the negative part
	line_int *= -1;
	for(int i = 1; 2*i < LINES-2 && x == -1; i++) {
   403b4:	e0bff217 	ldw	r2,-56(fp)
   403b8:	10800044 	addi	r2,r2,1
   403bc:	e0bff215 	stw	r2,-56(fp)
   403c0:	e0bff217 	ldw	r2,-56(fp)
   403c4:	1085883a 	add	r2,r2,r2
   403c8:	10800088 	cmpgei	r2,r2,2
   403cc:	1000031e 	bne	r2,zero,403dc <_ZN3App11defineIndexEi+0x2e0>
   403d0:	e0bff417 	ldw	r2,-48(fp)
   403d4:	10bfffe0 	cmpeqi	r2,r2,-1
   403d8:	103fc91e 	bne	r2,zero,40300 <_ZN3App11defineIndexEi+0x204>
			// being tested, return it's identifier
		} else {
			mot_int_b += line_int; // else, just set to test the next motor
		}
	}
	if (x == -1) {
   403dc:	e0bff417 	ldw	r2,-48(fp)
   403e0:	10bfffd8 	cmpnei	r2,r2,-1
   403e4:	1000011e 	bne	r2,zero,403ec <_ZN3App11defineIndexEi+0x2f0>
		x = 0; // if it is in the negative part and the responsible
   403e8:	e03ff415 	stw	zero,-48(fp)
		// motor was not found, then the signal is smaller than -100
	}
	return x;
   403ec:	e0bff417 	ldw	r2,-48(fp)
   403f0:	e0bfff15 	stw	r2,-4(fp)
   403f4:	e0bfff17 	ldw	r2,-4(fp)
}
   403f8:	e037883a 	mov	sp,fp
   403fc:	dfc00217 	ldw	ra,8(sp)
   40400:	df000117 	ldw	fp,4(sp)
   40404:	dc000017 	ldw	r16,0(sp)
   40408:	dec00304 	addi	sp,sp,12
   4040c:	f800283a 	ret

00040410 <_Z41__static_initialization_and_destruction_0ii>:
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   40410:	defffc04 	addi	sp,sp,-16
   40414:	dfc00315 	stw	ra,12(sp)
   40418:	df000215 	stw	fp,8(sp)
   4041c:	df000204 	addi	fp,sp,8
   40420:	e13ffe15 	stw	r4,-8(fp)
   40424:	e17fff15 	stw	r5,-4(fp)
   40428:	e0bffe17 	ldw	r2,-8(fp)
   4042c:	10800058 	cmpnei	r2,r2,1
   40430:	10000a1e 	bne	r2,zero,4045c <_Z41__static_initialization_and_destruction_0ii+0x4c>
   40434:	e0ffff17 	ldw	r3,-4(fp)
   40438:	00bfffd4 	movui	r2,65535
   4043c:	1880071e 	bne	r3,r2,4045c <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define COLUMNS 4
#define LINES 4
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
   40440:	00411f40 	call	411f4 <_ZN6Motors12getSingletonEv>
   40444:	d0a1cc15 	stw	r2,-30928(gp)
FFT	*App::fft = FFT::getSingleton();
   40448:	0040ec00 	call	40ec0 <_ZN3FFT12getSingletonEv>
   4044c:	d0a1cd15 	stw	r2,-30924(gp)
App::Buffer	App::buffer;
   40450:	01000134 	movhi	r4,4
   40454:	211d7f04 	addi	r4,r4,30204
   40458:	0040d1c0 	call	40d1c <_ZN3App6BufferC1Ev>
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   4045c:	e037883a 	mov	sp,fp
   40460:	dfc00117 	ldw	ra,4(sp)
   40464:	df000017 	ldw	fp,0(sp)
   40468:	dec00204 	addi	sp,sp,8
   4046c:	f800283a 	ret

00040470 <_GLOBAL__I__ZN3App6motorsE>:
   40470:	defffe04 	addi	sp,sp,-8
   40474:	dfc00115 	stw	ra,4(sp)
   40478:	df000015 	stw	fp,0(sp)
   4047c:	d839883a 	mov	fp,sp
   40480:	01000044 	movi	r4,1
   40484:	017fffd4 	movui	r5,65535
   40488:	00404100 	call	40410 <_Z41__static_initialization_and_destruction_0ii>
   4048c:	e037883a 	mov	sp,fp
   40490:	dfc00117 	ldw	ra,4(sp)
   40494:	df000017 	ldw	fp,0(sp)
   40498:	dec00204 	addi	sp,sp,8
   4049c:	f800283a 	ret

000404a0 <_ZN3App14writeGyroscopeEiii>:
	//alt_putstr("Valores gyroscope de column e neighbor:  ");
	//alt_putchar(column+48);
	//alt_putchar(neighbor+48);
}

void App::writeGyroscope(int xAngle, int yAngle, int zAngle) {
   404a0:	defff404 	addi	sp,sp,-48
   404a4:	dfc00b15 	stw	ra,44(sp)
   404a8:	df000a15 	stw	fp,40(sp)
   404ac:	df000a04 	addi	fp,sp,40
   404b0:	e13ff815 	stw	r4,-32(fp)
   404b4:	e17ff915 	stw	r5,-28(fp)
   404b8:	e1bffa15 	stw	r6,-24(fp)
   404bc:	e1fffb15 	stw	r7,-20(fp)
	int x = defineIndex(xAngle) << 16;
   404c0:	e13ff817 	ldw	r4,-32(fp)
   404c4:	e17ff917 	ldw	r5,-28(fp)
   404c8:	00400fc0 	call	400fc <_ZN3App11defineIndexEi>
   404cc:	1004943a 	slli	r2,r2,16
   404d0:	e0bff715 	stw	r2,-36(fp)
	int y = defineIndex(yAngle) <<  8;
   404d4:	e13ff817 	ldw	r4,-32(fp)
   404d8:	e17ffa17 	ldw	r5,-24(fp)
   404dc:	00400fc0 	call	400fc <_ZN3App11defineIndexEi>
   404e0:	1004923a 	slli	r2,r2,8
   404e4:	e0bff615 	stw	r2,-40(fp)
	motors->write(( (1 << 24) | x | y | 5 ));
   404e8:	d121cc17 	ldw	r4,-30928(gp)
   404ec:	e0fff717 	ldw	r3,-36(fp)
   404f0:	e0bff617 	ldw	r2,-40(fp)
   404f4:	1886b03a 	or	r3,r3,r2
   404f8:	00804034 	movhi	r2,256
   404fc:	10800144 	addi	r2,r2,5
   40500:	1884b03a 	or	r2,r3,r2
   40504:	100b883a 	mov	r5,r2
   40508:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	motors->write(( (2 << 24) | x | y | 5 ));
   4050c:	d121cc17 	ldw	r4,-30928(gp)
   40510:	e0fff717 	ldw	r3,-36(fp)
   40514:	e0bff617 	ldw	r2,-40(fp)
   40518:	1886b03a 	or	r3,r3,r2
   4051c:	00808034 	movhi	r2,512
   40520:	10800144 	addi	r2,r2,5
   40524:	1884b03a 	or	r2,r3,r2
   40528:	100b883a 	mov	r5,r2
   4052c:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	zAngle = zAngle < 0 ? zAngle*-1 : zAngle;
   40530:	e0bffb17 	ldw	r2,-20(fp)
   40534:	e0bfff15 	stw	r2,-4(fp)
   40538:	e0ffff17 	ldw	r3,-4(fp)
   4053c:	1804403a 	cmpge	r2,r3,zero
   40540:	1000031e 	bne	r2,zero,40550 <_ZN3App14writeGyroscopeEiii+0xb0>
   40544:	e13fff17 	ldw	r4,-4(fp)
   40548:	0109c83a 	sub	r4,zero,r4
   4054c:	e13fff15 	stw	r4,-4(fp)
   40550:	e0bfff17 	ldw	r2,-4(fp)
   40554:	e0bffb15 	stw	r2,-20(fp)
	zAngle = zAngle + 10;
   40558:	e0bffb17 	ldw	r2,-20(fp)
   4055c:	10800284 	addi	r2,r2,10
   40560:	e0bffb15 	stw	r2,-20(fp)
	motors->write((    0      | x | y |(zAngle > 240 ? 240 : zAngle)));               //ao invez de 255 : (zAngle > 100 ? 100 : zAngle)));
   40564:	d0e1cc17 	ldw	r3,-30928(gp)
   40568:	e0fffe15 	stw	r3,-8(fp)
   4056c:	e0fff717 	ldw	r3,-36(fp)
   40570:	e0bff617 	ldw	r2,-40(fp)
   40574:	1886b03a 	or	r3,r3,r2
   40578:	e0fffd15 	stw	r3,-12(fp)
   4057c:	e13ffb17 	ldw	r4,-20(fp)
   40580:	e13ffc15 	stw	r4,-16(fp)
   40584:	e0fffc17 	ldw	r3,-16(fp)
   40588:	18803c50 	cmplti	r2,r3,241
   4058c:	1000021e 	bne	r2,zero,40598 <_ZN3App14writeGyroscopeEiii+0xf8>
   40590:	01003c04 	movi	r4,240
   40594:	e13ffc15 	stw	r4,-16(fp)
   40598:	e0fffd17 	ldw	r3,-12(fp)
   4059c:	e13ffc17 	ldw	r4,-16(fp)
   405a0:	1904b03a 	or	r2,r3,r4
   405a4:	100b883a 	mov	r5,r2
   405a8:	e13ffe17 	ldw	r4,-8(fp)
   405ac:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
}
   405b0:	e037883a 	mov	sp,fp
   405b4:	dfc00117 	ldw	ra,4(sp)
   405b8:	df000017 	ldw	fp,0(sp)
   405bc:	dec00204 	addi	sp,sp,8
   405c0:	f800283a 	ret

000405c4 <_ZN3App12writeCompassEi>:
	if(buffer.length() > 0)
		fft->write(buffer.pop());
}

//If we have 5 motors in a column, each motor is responsible for 72� each; We receive a float in (-180�, 180�]. To simplify we add 180 to it.
void App::writeCompass(int direction) {
   405c4:	defff604 	addi	sp,sp,-40
   405c8:	dfc00915 	stw	ra,36(sp)
   405cc:	df000815 	stw	fp,32(sp)
   405d0:	df000804 	addi	fp,sp,32
   405d4:	e13ffd15 	stw	r4,-12(fp)
   405d8:	e17ffe15 	stw	r5,-8(fp)
	int responsible = 360/COLUMNS;
   405dc:	00801684 	movi	r2,90
   405e0:	e0bffc15 	stw	r2,-16(fp)
	direction += 180;
   405e4:	e0bffe17 	ldw	r2,-8(fp)
   405e8:	10802d04 	addi	r2,r2,180
   405ec:	e0bffe15 	stw	r2,-8(fp)
	int motor = (direction/responsible)%COLUMNS;
   405f0:	e13ffe17 	ldw	r4,-8(fp)
   405f4:	e17ffc17 	ldw	r5,-16(fp)
   405f8:	0043a940 	call	43a94 <__divsi3>
   405fc:	1007883a 	mov	r3,r2
   40600:	00a00034 	movhi	r2,32768
   40604:	108000c4 	addi	r2,r2,3
   40608:	1886703a 	and	r3,r3,r2
   4060c:	e0ffff15 	stw	r3,-4(fp)
   40610:	e0ffff17 	ldw	r3,-4(fp)
   40614:	1804403a 	cmpge	r2,r3,zero
   40618:	10000a1e 	bne	r2,zero,40644 <_ZN3App12writeCompassEi+0x80>
   4061c:	e0bfff17 	ldw	r2,-4(fp)
   40620:	10bfffc4 	addi	r2,r2,-1
   40624:	e0bfff15 	stw	r2,-4(fp)
   40628:	00bfff04 	movi	r2,-4
   4062c:	e0ffff17 	ldw	r3,-4(fp)
   40630:	1886b03a 	or	r3,r3,r2
   40634:	e0ffff15 	stw	r3,-4(fp)
   40638:	e0bfff17 	ldw	r2,-4(fp)
   4063c:	10800044 	addi	r2,r2,1
   40640:	e0bfff15 	stw	r2,-4(fp)
   40644:	e0ffff17 	ldw	r3,-4(fp)
   40648:	e0fffb15 	stw	r3,-20(fp)

	int cmd = 1 << 24;
   4064c:	00804034 	movhi	r2,256
   40650:	e0bffa15 	stw	r2,-24(fp)
	int line = (LINES-1) << 16;
   40654:	008000f4 	movhi	r2,3
   40658:	e0bff915 	stw	r2,-28(fp)
	int column = (motor) << 8;
   4065c:	e0bffb17 	ldw	r2,-20(fp)
   40660:	1004923a 	slli	r2,r2,8
   40664:	e0bff815 	stw	r2,-32(fp)

	motors->write((int)( cmd | line |  column	|  5 ));
   40668:	d121cc17 	ldw	r4,-30928(gp)
   4066c:	e0fffa17 	ldw	r3,-24(fp)
   40670:	e0bff917 	ldw	r2,-28(fp)
   40674:	1886b03a 	or	r3,r3,r2
   40678:	e0bff817 	ldw	r2,-32(fp)
   4067c:	1884b03a 	or	r2,r3,r2
   40680:	10800154 	ori	r2,r2,5
   40684:	100b883a 	mov	r5,r2
   40688:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	cmd = 2 << 24;
   4068c:	00808034 	movhi	r2,512
   40690:	e0bffa15 	stw	r2,-24(fp)
	motors->write((int)( cmd | line |  column	|  5 ));
   40694:	d121cc17 	ldw	r4,-30928(gp)
   40698:	e0fffa17 	ldw	r3,-24(fp)
   4069c:	e0bff917 	ldw	r2,-28(fp)
   406a0:	1886b03a 	or	r3,r3,r2
   406a4:	e0bff817 	ldw	r2,-32(fp)
   406a8:	1884b03a 	or	r2,r3,r2
   406ac:	10800154 	ori	r2,r2,5
   406b0:	100b883a 	mov	r5,r2
   406b4:	00410a40 	call	410a4 <_ZN6Motors5writeEj>

	motors->write((int)(  0  | line |  column	| compass_vib_value ));
   406b8:	d121cc17 	ldw	r4,-30928(gp)
   406bc:	e0fff917 	ldw	r3,-28(fp)
   406c0:	e0bff817 	ldw	r2,-32(fp)
   406c4:	1886b03a 	or	r3,r3,r2
   406c8:	e0bffd17 	ldw	r2,-12(fp)
   406cc:	10800017 	ldw	r2,0(r2)
   406d0:	1884b03a 	or	r2,r3,r2
   406d4:	100b883a 	mov	r5,r2
   406d8:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	//alt_putstr("Valores gyroscope de column e neighbor:  ");
	//alt_putchar(column+48);
	//alt_putchar(neighbor+48);
}
   406dc:	e037883a 	mov	sp,fp
   406e0:	dfc00117 	ldw	ra,4(sp)
   406e4:	df000017 	ldw	fp,0(sp)
   406e8:	dec00204 	addi	sp,sp,8
   406ec:	f800283a 	ret

000406f0 <_ZN3App3runEv>:
			summation = 0;
		}
	}
}

void App::run() {
   406f0:	defff204 	addi	sp,sp,-56
   406f4:	dfc00d15 	stw	ra,52(sp)
   406f8:	df000c15 	stw	fp,48(sp)
   406fc:	df000c04 	addi	fp,sp,48
   40700:	e13ffe15 	stw	r4,-8(fp)
	char type;
	char readTerminalEclipse;
	int n;

	//Shift amount de 10, Decaimento de 15 e potencia de 255 em cada motor, durante inicialização do programa.
	motors->write((1<<24)|(255<<16)|(255<<8)|(1));
   40704:	d121cc17 	ldw	r4,-30928(gp)
   40708:	01408034 	movhi	r5,512
   4070c:	297fc044 	addi	r5,r5,-255
   40710:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(1));
   40714:	d121cc17 	ldw	r4,-30928(gp)
   40718:	0140c034 	movhi	r5,768
   4071c:	297fc044 	addi	r5,r5,-255
   40720:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));
   40724:	d121cc17 	ldw	r4,-30928(gp)
   40728:	01404034 	movhi	r5,256
   4072c:	297fffc4 	addi	r5,r5,-1
   40730:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
   40734:	00000006 	br	40738 <_ZN3App3runEv+0x48>
		}
		if(running.current != type) {
			continue;
		}
		 	*/
		readTerminalEclipse = alt_getchar();
   40738:	00455c80 	call	455c8 <alt_getchar>
   4073c:	e0bffb05 	stb	r2,-20(fp)
		type = readTerminalEclipse;
   40740:	e0bffb03 	ldbu	r2,-20(fp)
   40744:	e0bffb45 	stb	r2,-19(fp)
		alt_putchar(readTerminalEclipse);
   40748:	e13ffb07 	ldb	r4,-20(fp)
   4074c:	0045bcc0 	call	45bcc <alt_putchar>

		while(1){
			readTerminalEclipse  = alt_getchar();
   40750:	00455c80 	call	455c8 <alt_getchar>
   40754:	e0bffb05 	stb	r2,-20(fp)
			alt_putchar(readTerminalEclipse);
   40758:	e13ffb07 	ldb	r4,-20(fp)
   4075c:	0045bcc0 	call	45bcc <alt_putchar>

			if(readTerminalEclipse == '0'){
   40760:	e0bffb07 	ldb	r2,-20(fp)
   40764:	10800c18 	cmpnei	r2,r2,48
   40768:	10002b1e 	bne	r2,zero,40818 <_ZN3App3runEv+0x128>
				n=0;
   4076c:	e03ffa15 	stw	zero,-24(fp)

		}



		switch (type) {
   40770:	e0bffb43 	ldbu	r2,-19(fp)
   40774:	10bfe7c4 	addi	r2,r2,-97
   40778:	e0bfff15 	stw	r2,-4(fp)
   4077c:	e0ffff17 	ldw	r3,-4(fp)
   40780:	18803fcc 	andi	r2,r3,255
   40784:	108006a8 	cmpgeui	r2,r2,26
   40788:	103feb1e 	bne	r2,zero,40738 <_ZN3App3runEv+0x48>
   4078c:	e0ffff17 	ldw	r3,-4(fp)
   40790:	18803fcc 	andi	r2,r3,255
   40794:	1085883a 	add	r2,r2,r2
   40798:	1087883a 	add	r3,r2,r2
   4079c:	00800134 	movhi	r2,4
   407a0:	1081ec04 	addi	r2,r2,1968
   407a4:	1885883a 	add	r2,r3,r2
   407a8:	10800017 	ldw	r2,0(r2)
   407ac:	1000683a 	jmp	r2
   407b0:	00040950 	cmplti	zero,zero,4133
   407b4:	00040738 	rdprs	zero,zero,4124
   407b8:	0004096c 	andhi	zero,zero,4133
   407bc:	00040738 	rdprs	zero,zero,4124
   407c0:	00040738 	rdprs	zero,zero,4124
   407c4:	00040738 	rdprs	zero,zero,4124
   407c8:	0004097c 	xorhi	zero,zero,4133
   407cc:	00040738 	rdprs	zero,zero,4124
   407d0:	00040738 	rdprs	zero,zero,4124
   407d4:	00040738 	rdprs	zero,zero,4124
   407d8:	00040738 	rdprs	zero,zero,4124
   407dc:	00040738 	rdprs	zero,zero,4124
   407e0:	000408c4 	movi	zero,4131
   407e4:	00040738 	rdprs	zero,zero,4124
   407e8:	00040738 	rdprs	zero,zero,4124
   407ec:	00040738 	rdprs	zero,zero,4124
   407f0:	00040738 	rdprs	zero,zero,4124
   407f4:	00040738 	rdprs	zero,zero,4124
   407f8:	00040738 	rdprs	zero,zero,4124
   407fc:	00040738 	rdprs	zero,zero,4124
   40800:	00040738 	rdprs	zero,zero,4124
   40804:	00040738 	rdprs	zero,zero,4124
   40808:	0004089c 	xori	zero,zero,4130
   4080c:	00040874 	movhi	zero,4129
   40810:	00040888 	cmpgei	zero,zero,4130
   40814:	00040840 	call	4084 <__alt_mem_onchip_memory2_0-0x3bf7c>

			if(readTerminalEclipse == '0'){
				n=0;
				break;
			}
			data[n]=readTerminalEclipse;
   40818:	e0bffa17 	ldw	r2,-24(fp)
   4081c:	1007883a 	mov	r3,r2
   40820:	e0bffd17 	ldw	r2,-12(fp)
   40824:	1887883a 	add	r3,r3,r2
   40828:	e0bffb03 	ldbu	r2,-20(fp)
   4082c:	18800005 	stb	r2,0(r3)
			n = n + 1;
   40830:	e0bffa17 	ldw	r2,-24(fp)
   40834:	10800044 	addi	r2,r2,1
   40838:	e0bffa15 	stw	r2,-24(fp)
		 	*/
		readTerminalEclipse = alt_getchar();
		type = readTerminalEclipse;
		alt_putchar(readTerminalEclipse);

		while(1){
   4083c:	003fc406 	br	40750 <_ZN3App3runEv+0x60>



		switch (type) {
		case 'z':{
			motors->write((1<<24)|(255<<16)|(255<<8)|(1));
   40840:	d121cc17 	ldw	r4,-30928(gp)
   40844:	01408034 	movhi	r5,512
   40848:	297fc044 	addi	r5,r5,-255
   4084c:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(255<<8)|(1));
   40850:	d121cc17 	ldw	r4,-30928(gp)
   40854:	0140c034 	movhi	r5,768
   40858:	297fc044 	addi	r5,r5,-255
   4085c:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(255<<8)|(255));		}
   40860:	d121cc17 	ldw	r4,-30928(gp)
   40864:	01404034 	movhi	r5,256
   40868:	297fffc4 	addi	r5,r5,-1
   4086c:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			break;
   40870:	003fb106 	br	40738 <_ZN3App3runEv+0x48>
		case 'x':{
			motors->write((3<<24)|(255<<16)|(255<<8)|(255));
   40874:	d121cc17 	ldw	r4,-30928(gp)
   40878:	01410034 	movhi	r5,1024
   4087c:	297fffc4 	addi	r5,r5,-1
   40880:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
				}
			break;
   40884:	003fac06 	br	40738 <_ZN3App3runEv+0x48>
		case 'y':{
			motors->write((4<<24)|(255<<16)|(255<<8)|(255));
   40888:	d121cc17 	ldw	r4,-30928(gp)
   4088c:	01414034 	movhi	r5,1280
   40890:	297fffc4 	addi	r5,r5,-1
   40894:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
				}
			break;
   40898:	003fa706 	br	40738 <_ZN3App3runEv+0x48>
		case 'w':{
			motors->write((1<<24)|(0<<16)|(0<<8)|(0));
   4089c:	d121cc17 	ldw	r4,-30928(gp)
   408a0:	01404034 	movhi	r5,256
   408a4:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(0<<16)|(0<<8)|(0));
   408a8:	d121cc17 	ldw	r4,-30928(gp)
   408ac:	01408034 	movhi	r5,512
   408b0:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(0<<16)|(0<<8)|(255));
   408b4:	d121cc17 	ldw	r4,-30928(gp)
   408b8:	01403fc4 	movi	r5,255
   408bc:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
				}
			break;
   408c0:	003f9d06 	br	40738 <_ZN3App3runEv+0x48>
		case 'm': { /* motors */
			int cmd = (int)(data[1]);
   408c4:	e0bffd17 	ldw	r2,-12(fp)
   408c8:	10800044 	addi	r2,r2,1
   408cc:	10800003 	ldbu	r2,0(r2)
   408d0:	10803fcc 	andi	r2,r2,255
   408d4:	e0bff915 	stw	r2,-28(fp)
			int linha = (int)(data[2]);
   408d8:	e0bffd17 	ldw	r2,-12(fp)
   408dc:	10800084 	addi	r2,r2,2
   408e0:	10800003 	ldbu	r2,0(r2)
   408e4:	10803fcc 	andi	r2,r2,255
   408e8:	e0bff815 	stw	r2,-32(fp)
			int coluna = (int)(data[3]);
   408ec:	e0bffd17 	ldw	r2,-12(fp)
   408f0:	108000c4 	addi	r2,r2,3
   408f4:	10800003 	ldbu	r2,0(r2)
   408f8:	10803fcc 	andi	r2,r2,255
   408fc:	e0bff715 	stw	r2,-36(fp)
			int valor = (int)(data[4]);
   40900:	e0bffd17 	ldw	r2,-12(fp)
   40904:	10800104 	addi	r2,r2,4
   40908:	10800003 	ldbu	r2,0(r2)
   4090c:	10803fcc 	andi	r2,r2,255
   40910:	e0bff615 	stw	r2,-40(fp)
//			alt_putstr("Motors received. Sending it to the motors...\n");
			int command = (  (cmd << 24) | (linha << 16) | (coluna << 8) | (valor) );
   40914:	e0bff917 	ldw	r2,-28(fp)
   40918:	1006963a 	slli	r3,r2,24
   4091c:	e0bff817 	ldw	r2,-32(fp)
   40920:	1004943a 	slli	r2,r2,16
   40924:	1886b03a 	or	r3,r3,r2
   40928:	e0bff717 	ldw	r2,-36(fp)
   4092c:	1004923a 	slli	r2,r2,8
   40930:	1886b03a 	or	r3,r3,r2
   40934:	e0bff617 	ldw	r2,-40(fp)
   40938:	1884b03a 	or	r2,r3,r2
   4093c:	e0bff515 	stw	r2,-44(fp)
//			alt_printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
			motors->write(command);
   40940:	d121cc17 	ldw	r4,-30928(gp)
   40944:	e17ff517 	ldw	r5,-44(fp)
   40948:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
		}
			break;
   4094c:	003f7a06 	br	40738 <_ZN3App3runEv+0x48>
		case 'a': { /*audio*/
//			alt_putstr("Audio received. Sending it to the FFT...\n");
//			alt_printf("%s\n", data);
			//buffer.push(data);
			motors->write(4, 255, 255, 0);
   40950:	d121cc17 	ldw	r4,-30928(gp)
   40954:	d8000015 	stw	zero,0(sp)
   40958:	01400104 	movi	r5,4
   4095c:	01803fc4 	movi	r6,255
   40960:	01c03fc4 	movi	r7,255
   40964:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
			//	fft->write(buffer.pop());
			//}


		}
			break;
   40968:	003f7306 	br	40738 <_ZN3App3runEv+0x48>
		case 'c': { /*compass*/
//			alt_putstr("Compass received. Sending to the motors...\n");
//			alt_printf("%s\n", data);

			writeCompass(179);
   4096c:	e13ffe17 	ldw	r4,-8(fp)
   40970:	01402cc4 	movi	r5,179
   40974:	00405c40 	call	405c4 <_ZN3App12writeCompassEi>


		}
			break;
   40978:	003f6f06 	br	40738 <_ZN3App3runEv+0x48>
		case 'g': { /*gyroscope*/
//			alt_putstr("Gyroscope received. Sending to the motors...\n");
//			alt_printf("%s\n", data);

			writeGyroscope(0,0,255);
   4097c:	e13ffe17 	ldw	r4,-8(fp)
   40980:	000b883a 	mov	r5,zero
   40984:	000d883a 	mov	r6,zero
   40988:	01c03fc4 	movi	r7,255
   4098c:	00404a00 	call	404a0 <_ZN3App14writeGyroscopeEiii>



	//alt_timestamp_start();

	while (1) {
   40990:	003f6906 	br	40738 <_ZN3App3runEv+0x48>

00040994 <_ZN3App10writeAudioEPii>:
		// motor was not found, then the signal is smaller than -100
	}
	return x;
}

void App::writeAudio(int* freq, int samples) {
   40994:	defff404 	addi	sp,sp,-48
   40998:	dfc00b15 	stw	ra,44(sp)
   4099c:	df000a15 	stw	fp,40(sp)
   409a0:	dc400915 	stw	r17,36(sp)
   409a4:	dc000815 	stw	r16,32(sp)
   409a8:	df000804 	addi	fp,sp,32
   409ac:	e13ffc15 	stw	r4,-16(fp)
   409b0:	e17ffd15 	stw	r5,-12(fp)
   409b4:	e1bffe15 	stw	r6,-8(fp)
	int commom = samples/COLUMNS;
   409b8:	e0bffe17 	ldw	r2,-8(fp)
   409bc:	e0bfff15 	stw	r2,-4(fp)
   409c0:	e0ffff17 	ldw	r3,-4(fp)
   409c4:	1804403a 	cmpge	r2,r3,zero
   409c8:	1000031e 	bne	r2,zero,409d8 <_ZN3App10writeAudioEPii+0x44>
   409cc:	e0bfff17 	ldw	r2,-4(fp)
   409d0:	108000c4 	addi	r2,r2,3
   409d4:	e0bfff15 	stw	r2,-4(fp)
   409d8:	e0ffff17 	ldw	r3,-4(fp)
   409dc:	1805d0ba 	srai	r2,r3,2
   409e0:	e0bffb15 	stw	r2,-20(fp)
	int summation = 0;
   409e4:	e03ffa15 	stw	zero,-24(fp)
	int pos = 0;
   409e8:	e03ff915 	stw	zero,-28(fp)
	motors->write_to_next_line();
   409ec:	d121cc17 	ldw	r4,-30928(gp)
   409f0:	00410d80 	call	410d8 <_ZN6Motors18write_to_next_lineEv>
	motors->write( 0 | 0 | 255 | 0 );
   409f4:	d121cc17 	ldw	r4,-30928(gp)
   409f8:	01403fc4 	movi	r5,255
   409fc:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	motors->write( 2 << 24 | 0 | 255 | 1 );
   40a00:	d121cc17 	ldw	r4,-30928(gp)
   40a04:	01408034 	movhi	r5,512
   40a08:	29403fc4 	addi	r5,r5,255
   40a0c:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
	for(int i = 0; i < samples; i++) {
   40a10:	e03ff815 	stw	zero,-32(fp)
   40a14:	00002a06 	br	40ac0 <_ZN3App10writeAudioEPii+0x12c>
		summation += freq[i];
   40a18:	e0bff817 	ldw	r2,-32(fp)
   40a1c:	1085883a 	add	r2,r2,r2
   40a20:	1085883a 	add	r2,r2,r2
   40a24:	1007883a 	mov	r3,r2
   40a28:	e0bffd17 	ldw	r2,-12(fp)
   40a2c:	1885883a 	add	r2,r3,r2
   40a30:	10c00017 	ldw	r3,0(r2)
   40a34:	e0bffa17 	ldw	r2,-24(fp)
   40a38:	10c5883a 	add	r2,r2,r3
   40a3c:	e0bffa15 	stw	r2,-24(fp)
		if(i%commom == commom - 1) {
   40a40:	e13ff817 	ldw	r4,-32(fp)
   40a44:	e17ffb17 	ldw	r5,-20(fp)
   40a48:	0043af40 	call	43af4 <__modsi3>
   40a4c:	1007883a 	mov	r3,r2
   40a50:	e0bffb17 	ldw	r2,-20(fp)
   40a54:	10bfffc4 	addi	r2,r2,-1
   40a58:	1880161e 	bne	r3,r2,40ab4 <_ZN3App10writeAudioEPii+0x120>
			motors->write((1<<24)| 0 | (pos << 8) |(5));
   40a5c:	d121cc17 	ldw	r4,-30928(gp)
   40a60:	e0bff917 	ldw	r2,-28(fp)
   40a64:	1006923a 	slli	r3,r2,8
   40a68:	00804034 	movhi	r2,256
   40a6c:	10800144 	addi	r2,r2,5
   40a70:	1884b03a 	or	r2,r3,r2
   40a74:	100b883a 	mov	r5,r2
   40a78:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
   40a7c:	d421cc17 	ldw	r16,-30928(gp)
   40a80:	e0bff917 	ldw	r2,-28(fp)
   40a84:	1022923a 	slli	r17,r2,8
   40a88:	e13ffa17 	ldw	r4,-24(fp)
   40a8c:	e17ffb17 	ldw	r5,-20(fp)
   40a90:	0043a940 	call	43a94 <__divsi3>
   40a94:	8884b03a 	or	r2,r17,r2
   40a98:	100b883a 	mov	r5,r2
   40a9c:	8009883a 	mov	r4,r16
   40aa0:	00410a40 	call	410a4 <_ZN6Motors5writeEj>
			pos++;
   40aa4:	e0bff917 	ldw	r2,-28(fp)
   40aa8:	10800044 	addi	r2,r2,1
   40aac:	e0bff915 	stw	r2,-28(fp)
			summation = 0;
   40ab0:	e03ffa15 	stw	zero,-24(fp)
	int summation = 0;
	int pos = 0;
	motors->write_to_next_line();
	motors->write( 0 | 0 | 255 | 0 );
	motors->write( 2 << 24 | 0 | 255 | 1 );
	for(int i = 0; i < samples; i++) {
   40ab4:	e0bff817 	ldw	r2,-32(fp)
   40ab8:	10800044 	addi	r2,r2,1
   40abc:	e0bff815 	stw	r2,-32(fp)
   40ac0:	e0fff817 	ldw	r3,-32(fp)
   40ac4:	e0bffe17 	ldw	r2,-8(fp)
   40ac8:	18bfd316 	blt	r3,r2,40a18 <_ZN3App10writeAudioEPii+0x84>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
			pos++;
			summation = 0;
		}
	}
}
   40acc:	e037883a 	mov	sp,fp
   40ad0:	dfc00317 	ldw	ra,12(sp)
   40ad4:	df000217 	ldw	fp,8(sp)
   40ad8:	dc400117 	ldw	r17,4(sp)
   40adc:	dc000017 	ldw	r16,0(sp)
   40ae0:	dec00404 	addi	sp,sp,16
   40ae4:	f800283a 	ret

00040ae8 <_ZN3App10fftHandlerEj>:
	//retirando wifi   wifi->config(SSID, PASSWORD);
	//retirando wifi   wifi->startServer();
	//fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
   40ae8:	defffc04 	addi	sp,sp,-16
   40aec:	dfc00315 	stw	ra,12(sp)
   40af0:	df000215 	stw	fp,8(sp)
   40af4:	dc000115 	stw	r16,4(sp)
   40af8:	df000104 	addi	fp,sp,4
   40afc:	e13fff15 	stw	r4,-4(fp)

	//	motors->write(output);
	fft->read();
   40b00:	d121cd17 	ldw	r4,-30924(gp)
   40b04:	0040e580 	call	40e58 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
   40b08:	01000134 	movhi	r4,4
   40b0c:	211d7f04 	addi	r4,r4,30204
   40b10:	0040cf40 	call	40cf4 <_ZN3App6Buffer6lengthEv>
   40b14:	10800048 	cmpgei	r2,r2,1
   40b18:	10803fcc 	andi	r2,r2,255
   40b1c:	1005003a 	cmpeq	r2,r2,zero
   40b20:	1000071e 	bne	r2,zero,40b40 <_ZN3App10fftHandlerEj+0x58>
		fft->write(buffer.pop());
   40b24:	d421cd17 	ldw	r16,-30924(gp)
   40b28:	01000134 	movhi	r4,4
   40b2c:	211d7f04 	addi	r4,r4,30204
   40b30:	0040c0c0 	call	40c0c <_ZN3App6Buffer3popEv>
   40b34:	100b883a 	mov	r5,r2
   40b38:	8009883a 	mov	r4,r16
   40b3c:	0040e800 	call	40e80 <_ZN3FFT5writeEPh>
}
   40b40:	e037883a 	mov	sp,fp
   40b44:	dfc00217 	ldw	ra,8(sp)
   40b48:	df000117 	ldw	fp,4(sp)
   40b4c:	dc000017 	ldw	r16,0(sp)
   40b50:	dec00304 	addi	sp,sp,12
   40b54:	f800283a 	ret

00040b58 <_ZN3AppD1Ev>:
	//retirando wifi      wifi = WiFi::getSingleton();
	compass_vib_value = 255;
	running.init();
}

App::~App() {
   40b58:	defffd04 	addi	sp,sp,-12
   40b5c:	dfc00215 	stw	ra,8(sp)
   40b60:	df000115 	stw	fp,4(sp)
   40b64:	df000104 	addi	fp,sp,4
   40b68:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   40b6c:	e0bfff17 	ldw	r2,-4(fp)
   40b70:	11000417 	ldw	r4,16(r2)
   40b74:	00415480 	call	41548 <_ZN4WiFi10stopServerEv>
}
   40b78:	e037883a 	mov	sp,fp
   40b7c:	dfc00117 	ldw	ra,4(sp)
   40b80:	df000017 	ldw	fp,0(sp)
   40b84:	dec00204 	addi	sp,sp,8
   40b88:	f800283a 	ret

00040b8c <_ZN3AppD2Ev>:
	//retirando wifi      wifi = WiFi::getSingleton();
	compass_vib_value = 255;
	running.init();
}

App::~App() {
   40b8c:	defffd04 	addi	sp,sp,-12
   40b90:	dfc00215 	stw	ra,8(sp)
   40b94:	df000115 	stw	fp,4(sp)
   40b98:	df000104 	addi	fp,sp,4
   40b9c:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   40ba0:	e0bfff17 	ldw	r2,-4(fp)
   40ba4:	11000417 	ldw	r4,16(r2)
   40ba8:	00415480 	call	41548 <_ZN4WiFi10stopServerEv>
}
   40bac:	e037883a 	mov	sp,fp
   40bb0:	dfc00117 	ldw	ra,4(sp)
   40bb4:	df000017 	ldw	fp,0(sp)
   40bb8:	dec00204 	addi	sp,sp,8
   40bbc:	f800283a 	ret

00040bc0 <_ZN9run_param4initEv>:
struct run_param {
	char* possible;
	char current;
	int iterator;

	void init() {
   40bc0:	defffe04 	addi	sp,sp,-8
   40bc4:	df000115 	stw	fp,4(sp)
   40bc8:	df000104 	addi	fp,sp,4
   40bcc:	e13fff15 	stw	r4,-4(fp)
		possible = "macg";
   40bd0:	e0ffff17 	ldw	r3,-4(fp)
   40bd4:	00800134 	movhi	r2,4
   40bd8:	10993a04 	addi	r2,r2,25832
   40bdc:	18800015 	stw	r2,0(r3)
		current = possible[0];
   40be0:	e0bfff17 	ldw	r2,-4(fp)
   40be4:	10800017 	ldw	r2,0(r2)
   40be8:	10c00003 	ldbu	r3,0(r2)
   40bec:	e0bfff17 	ldw	r2,-4(fp)
   40bf0:	10c00105 	stb	r3,4(r2)
		iterator = 0;
   40bf4:	e0bfff17 	ldw	r2,-4(fp)
   40bf8:	10000215 	stw	zero,8(r2)
	}
   40bfc:	e037883a 	mov	sp,fp
   40c00:	df000017 	ldw	fp,0(sp)
   40c04:	dec00104 	addi	sp,sp,4
   40c08:	f800283a 	ret

00040c0c <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
   40c0c:	defffd04 	addi	sp,sp,-12
   40c10:	df000215 	stw	fp,8(sp)
   40c14:	df000204 	addi	fp,sp,8
   40c18:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
   40c1c:	e0bffe17 	ldw	r2,-8(fp)
   40c20:	10800217 	ldw	r2,8(r2)
   40c24:	10bfffd8 	cmpnei	r2,r2,-1
   40c28:	1000021e 	bne	r2,zero,40c34 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
   40c2c:	e03fff15 	stw	zero,-4(fp)
   40c30:	00002b06 	br	40ce0 <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
   40c34:	e0bffe17 	ldw	r2,-8(fp)
   40c38:	10800217 	ldw	r2,8(r2)
   40c3c:	10c00044 	addi	r3,r2,1
   40c40:	e0bffe17 	ldw	r2,-8(fp)
   40c44:	10c00215 	stw	r3,8(r2)
   40c48:	e0bffe17 	ldw	r2,-8(fp)
   40c4c:	10800217 	ldw	r2,8(r2)
   40c50:	1007883a 	mov	r3,r2
   40c54:	e0bffe17 	ldw	r2,-8(fp)
   40c58:	10800017 	ldw	r2,0(r2)
   40c5c:	1884703a 	and	r2,r3,r2
   40c60:	1007883a 	mov	r3,r2
   40c64:	e0bffe17 	ldw	r2,-8(fp)
   40c68:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
   40c6c:	e0bffe17 	ldw	r2,-8(fp)
   40c70:	10c00217 	ldw	r3,8(r2)
   40c74:	e0bffe17 	ldw	r2,-8(fp)
   40c78:	10800317 	ldw	r2,12(r2)
   40c7c:	1880091e 	bne	r3,r2,40ca4 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
   40c80:	e0bffe17 	ldw	r2,-8(fp)
   40c84:	10000315 	stw	zero,12(r2)
					begin = -1;
   40c88:	e0fffe17 	ldw	r3,-8(fp)
   40c8c:	00bfffc4 	movi	r2,-1
   40c90:	18800215 	stw	r2,8(r3)
					len = 0;
   40c94:	e0bffe17 	ldw	r2,-8(fp)
   40c98:	10000115 	stw	zero,4(r2)
					return NULL;;
   40c9c:	e03fff15 	stw	zero,-4(fp)
   40ca0:	00000f06 	br	40ce0 <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
   40ca4:	e0bffe17 	ldw	r2,-8(fp)
   40ca8:	10800117 	ldw	r2,4(r2)
   40cac:	10ffffc4 	addi	r3,r2,-1
   40cb0:	e0bffe17 	ldw	r2,-8(fp)
   40cb4:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
   40cb8:	e0bffe17 	ldw	r2,-8(fp)
   40cbc:	10c00417 	ldw	r3,16(r2)
   40cc0:	e0bffe17 	ldw	r2,-8(fp)
   40cc4:	10800217 	ldw	r2,8(r2)
   40cc8:	1085883a 	add	r2,r2,r2
   40ccc:	1085883a 	add	r2,r2,r2
   40cd0:	1885883a 	add	r2,r3,r2
   40cd4:	10bfff04 	addi	r2,r2,-4
   40cd8:	10800017 	ldw	r2,0(r2)
   40cdc:	e0bfff15 	stw	r2,-4(fp)
   40ce0:	e0bfff17 	ldw	r2,-4(fp)
			}
   40ce4:	e037883a 	mov	sp,fp
   40ce8:	df000017 	ldw	fp,0(sp)
   40cec:	dec00104 	addi	sp,sp,4
   40cf0:	f800283a 	ret

00040cf4 <_ZN3App6Buffer6lengthEv>:

			int length() {
   40cf4:	defffe04 	addi	sp,sp,-8
   40cf8:	df000115 	stw	fp,4(sp)
   40cfc:	df000104 	addi	fp,sp,4
   40d00:	e13fff15 	stw	r4,-4(fp)
				return len;
   40d04:	e0bfff17 	ldw	r2,-4(fp)
   40d08:	10800117 	ldw	r2,4(r2)
			}
   40d0c:	e037883a 	mov	sp,fp
   40d10:	df000017 	ldw	fp,0(sp)
   40d14:	dec00104 	addi	sp,sp,4
   40d18:	f800283a 	ret

00040d1c <_ZN3App6BufferC1Ev>:

private:
	int compass_vib_value;
	class Buffer {
		public:
			Buffer(){
   40d1c:	defffd04 	addi	sp,sp,-12
   40d20:	dfc00215 	stw	ra,8(sp)
   40d24:	df000115 	stw	fp,4(sp)
   40d28:	df000104 	addi	fp,sp,4
   40d2c:	e13fff15 	stw	r4,-4(fp)
				size = 10;
   40d30:	e0ffff17 	ldw	r3,-4(fp)
   40d34:	00800284 	movi	r2,10
   40d38:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
   40d3c:	e0bfff17 	ldw	r2,-4(fp)
   40d40:	10800017 	ldw	r2,0(r2)
   40d44:	1085883a 	add	r2,r2,r2
   40d48:	1085883a 	add	r2,r2,r2
   40d4c:	1009883a 	mov	r4,r2
   40d50:	004192c0 	call	4192c <_Znam>
   40d54:	1007883a 	mov	r3,r2
   40d58:	e0bfff17 	ldw	r2,-4(fp)
   40d5c:	10c00415 	stw	r3,16(r2)
				begin = -1;
   40d60:	e0ffff17 	ldw	r3,-4(fp)
   40d64:	00bfffc4 	movi	r2,-1
   40d68:	18800215 	stw	r2,8(r3)
				end = 0;
   40d6c:	e0bfff17 	ldw	r2,-4(fp)
   40d70:	10000315 	stw	zero,12(r2)
				len = 0;
   40d74:	e0bfff17 	ldw	r2,-4(fp)
   40d78:	10000115 	stw	zero,4(r2)
			}
   40d7c:	e037883a 	mov	sp,fp
   40d80:	dfc00117 	ldw	ra,4(sp)
   40d84:	df000017 	ldw	fp,0(sp)
   40d88:	dec00204 	addi	sp,sp,8
   40d8c:	f800283a 	ret

00040d90 <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   40d90:	defffe04 	addi	sp,sp,-8
   40d94:	df000115 	stw	fp,4(sp)
   40d98:	df000104 	addi	fp,sp,4
   40d9c:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   40da0:	e0ffff17 	ldw	r3,-4(fp)
   40da4:	00a40a14 	movui	r2,36904
   40da8:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   40dac:	e0ffff17 	ldw	r3,-4(fp)
   40db0:	00a40e14 	movui	r2,36920
   40db4:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   40db8:	e0ffff17 	ldw	r3,-4(fp)
   40dbc:	00a41214 	movui	r2,36936
   40dc0:	18800215 	stw	r2,8(r3)
}
   40dc4:	e037883a 	mov	sp,fp
   40dc8:	df000017 	ldw	fp,0(sp)
   40dcc:	dec00104 	addi	sp,sp,4
   40dd0:	f800283a 	ret

00040dd4 <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   40dd4:	defffe04 	addi	sp,sp,-8
   40dd8:	df000115 	stw	fp,4(sp)
   40ddc:	df000104 	addi	fp,sp,4
   40de0:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   40de4:	e0ffff17 	ldw	r3,-4(fp)
   40de8:	00a40a14 	movui	r2,36904
   40dec:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   40df0:	e0ffff17 	ldw	r3,-4(fp)
   40df4:	00a40e14 	movui	r2,36920
   40df8:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   40dfc:	e0ffff17 	ldw	r3,-4(fp)
   40e00:	00a41214 	movui	r2,36936
   40e04:	18800215 	stw	r2,8(r3)
}
   40e08:	e037883a 	mov	sp,fp
   40e0c:	df000017 	ldw	fp,0(sp)
   40e10:	dec00104 	addi	sp,sp,4
   40e14:	f800283a 	ret

00040e18 <_ZN3FFTD2Ev>:

FFT::~FFT() {
   40e18:	defffe04 	addi	sp,sp,-8
   40e1c:	df000115 	stw	fp,4(sp)
   40e20:	df000104 	addi	fp,sp,4
   40e24:	e13fff15 	stw	r4,-4(fp)
}
   40e28:	e037883a 	mov	sp,fp
   40e2c:	df000017 	ldw	fp,0(sp)
   40e30:	dec00104 	addi	sp,sp,4
   40e34:	f800283a 	ret

00040e38 <_ZN3FFTD1Ev>:
	data = (volatile unsigned int*) matrixAddress;
	writeFFT =(volatile unsigned int*) fftAddress;
	readFFT = (volatile unsigned int*) fftAddress+4;
}

FFT::~FFT() {
   40e38:	defffe04 	addi	sp,sp,-8
   40e3c:	df000115 	stw	fp,4(sp)
   40e40:	df000104 	addi	fp,sp,4
   40e44:	e13fff15 	stw	r4,-4(fp)
}
   40e48:	e037883a 	mov	sp,fp
   40e4c:	df000017 	ldw	fp,0(sp)
   40e50:	dec00104 	addi	sp,sp,4
   40e54:	f800283a 	ret

00040e58 <_ZN3FFT4readEv>:
void FFT::write(unsigned char *input) {
	writeFFT = (unsigned int*)input;
	delete input;
}

int* FFT::read() {
   40e58:	defffe04 	addi	sp,sp,-8
   40e5c:	df000115 	stw	fp,4(sp)
   40e60:	df000104 	addi	fp,sp,4
   40e64:	e13fff15 	stw	r4,-4(fp)
	return (int*)readFFT;
   40e68:	e0bfff17 	ldw	r2,-4(fp)
   40e6c:	10800217 	ldw	r2,8(r2)
}
   40e70:	e037883a 	mov	sp,fp
   40e74:	df000017 	ldw	fp,0(sp)
   40e78:	dec00104 	addi	sp,sp,4
   40e7c:	f800283a 	ret

00040e80 <_ZN3FFT5writeEPh>:
	if (fft == 0)
		fft = new FFT();
	return fft;
}

void FFT::write(unsigned char *input) {
   40e80:	defffc04 	addi	sp,sp,-16
   40e84:	dfc00315 	stw	ra,12(sp)
   40e88:	df000215 	stw	fp,8(sp)
   40e8c:	df000204 	addi	fp,sp,8
   40e90:	e13ffe15 	stw	r4,-8(fp)
   40e94:	e17fff15 	stw	r5,-4(fp)
	writeFFT = (unsigned int*)input;
   40e98:	e0ffff17 	ldw	r3,-4(fp)
   40e9c:	e0bffe17 	ldw	r2,-8(fp)
   40ea0:	10c00115 	stw	r3,4(r2)
	delete input;
   40ea4:	e13fff17 	ldw	r4,-4(fp)
   40ea8:	00419cc0 	call	419cc <_ZdlPv>
}
   40eac:	e037883a 	mov	sp,fp
   40eb0:	dfc00117 	ldw	ra,4(sp)
   40eb4:	df000017 	ldw	fp,0(sp)
   40eb8:	dec00204 	addi	sp,sp,8
   40ebc:	f800283a 	ret

00040ec0 <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
   40ec0:	defffd04 	addi	sp,sp,-12
   40ec4:	dfc00215 	stw	ra,8(sp)
   40ec8:	df000115 	stw	fp,4(sp)
   40ecc:	dc000015 	stw	r16,0(sp)
   40ed0:	d839883a 	mov	fp,sp
	if (fft == 0)
   40ed4:	d0a1ce17 	ldw	r2,-30920(gp)
   40ed8:	1004c03a 	cmpne	r2,r2,zero
   40edc:	1000061e 	bne	r2,zero,40ef8 <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
   40ee0:	01000304 	movi	r4,12
   40ee4:	00426e00 	call	426e0 <_Znwm>
   40ee8:	1021883a 	mov	r16,r2
   40eec:	8009883a 	mov	r4,r16
   40ef0:	0040dd40 	call	40dd4 <_ZN3FFTC1Ev>
   40ef4:	d421ce15 	stw	r16,-30920(gp)
	return fft;
   40ef8:	d0a1ce17 	ldw	r2,-30920(gp)
}
   40efc:	e037883a 	mov	sp,fp
   40f00:	dfc00217 	ldw	ra,8(sp)
   40f04:	df000117 	ldw	fp,4(sp)
   40f08:	dc000017 	ldw	r16,0(sp)
   40f0c:	dec00304 	addi	sp,sp,12
   40f10:	f800283a 	ret

00040f14 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   40f14:	defffe04 	addi	sp,sp,-8
   40f18:	df000115 	stw	fp,4(sp)
   40f1c:	df000104 	addi	fp,sp,4
   40f20:	e13fff15 	stw	r4,-4(fp)
}
   40f24:	e037883a 	mov	sp,fp
   40f28:	df000017 	ldw	fp,0(sp)
   40f2c:	dec00104 	addi	sp,sp,4
   40f30:	f800283a 	ret

00040f34 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   40f34:	defffe04 	addi	sp,sp,-8
   40f38:	df000115 	stw	fp,4(sp)
   40f3c:	df000104 	addi	fp,sp,4
   40f40:	e13fff15 	stw	r4,-4(fp)
}
   40f44:	e037883a 	mov	sp,fp
   40f48:	df000017 	ldw	fp,0(sp)
   40f4c:	dec00104 	addi	sp,sp,4
   40f50:	f800283a 	ret

00040f54 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
   40f54:	defffb04 	addi	sp,sp,-20
   40f58:	df000415 	stw	fp,16(sp)
   40f5c:	df000404 	addi	fp,sp,16
   40f60:	e13ffc15 	stw	r4,-16(fp)
   40f64:	e17ffd15 	stw	r5,-12(fp)
   40f68:	e1bffe15 	stw	r6,-8(fp)
   40f6c:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
   40f70:	e0bffc17 	ldw	r2,-16(fp)
   40f74:	11000017 	ldw	r4,0(r2)
   40f78:	e0bffd17 	ldw	r2,-12(fp)
   40f7c:	1006963a 	slli	r3,r2,24
   40f80:	e0bffe17 	ldw	r2,-8(fp)
   40f84:	1004943a 	slli	r2,r2,16
   40f88:	1887883a 	add	r3,r3,r2
   40f8c:	e0bfff17 	ldw	r2,-4(fp)
   40f90:	1004923a 	slli	r2,r2,8
   40f94:	1887883a 	add	r3,r3,r2
   40f98:	e0800117 	ldw	r2,4(fp)
   40f9c:	1885883a 	add	r2,r3,r2
   40fa0:	20800015 	stw	r2,0(r4)
}
   40fa4:	e037883a 	mov	sp,fp
   40fa8:	df000017 	ldw	fp,0(sp)
   40fac:	dec00104 	addi	sp,sp,4
   40fb0:	f800283a 	ret

00040fb4 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
   40fb4:	defff904 	addi	sp,sp,-28
   40fb8:	dfc00615 	stw	ra,24(sp)
   40fbc:	df000515 	stw	fp,20(sp)
   40fc0:	df000504 	addi	fp,sp,20
   40fc4:	e13ffc15 	stw	r4,-16(fp)
   40fc8:	e17ffd15 	stw	r5,-12(fp)
   40fcc:	e1bffe15 	stw	r6,-8(fp)
   40fd0:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
   40fd4:	e0bfff17 	ldw	r2,-4(fp)
   40fd8:	d8800015 	stw	r2,0(sp)
   40fdc:	e13ffc17 	ldw	r4,-16(fp)
   40fe0:	01400084 	movi	r5,2
   40fe4:	e1bffd17 	ldw	r6,-12(fp)
   40fe8:	e1fffe17 	ldw	r7,-8(fp)
   40fec:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
}
   40ff0:	e037883a 	mov	sp,fp
   40ff4:	dfc00117 	ldw	ra,4(sp)
   40ff8:	df000017 	ldw	fp,0(sp)
   40ffc:	dec00204 	addi	sp,sp,8
   41000:	f800283a 	ret

00041004 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(0, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
   41004:	defff904 	addi	sp,sp,-28
   41008:	dfc00615 	stw	ra,24(sp)
   4100c:	df000515 	stw	fp,20(sp)
   41010:	df000504 	addi	fp,sp,20
   41014:	e13ffc15 	stw	r4,-16(fp)
   41018:	e17ffd15 	stw	r5,-12(fp)
   4101c:	e1bffe15 	stw	r6,-8(fp)
   41020:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
   41024:	e0bfff17 	ldw	r2,-4(fp)
   41028:	d8800015 	stw	r2,0(sp)
   4102c:	e13ffc17 	ldw	r4,-16(fp)
   41030:	01400044 	movi	r5,1
   41034:	e1bffd17 	ldw	r6,-12(fp)
   41038:	e1fffe17 	ldw	r7,-8(fp)
   4103c:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
}
   41040:	e037883a 	mov	sp,fp
   41044:	dfc00117 	ldw	ra,4(sp)
   41048:	df000017 	ldw	fp,0(sp)
   4104c:	dec00204 	addi	sp,sp,8
   41050:	f800283a 	ret

00041054 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
   41054:	defff904 	addi	sp,sp,-28
   41058:	dfc00615 	stw	ra,24(sp)
   4105c:	df000515 	stw	fp,20(sp)
   41060:	df000504 	addi	fp,sp,20
   41064:	e13ffc15 	stw	r4,-16(fp)
   41068:	e17ffd15 	stw	r5,-12(fp)
   4106c:	e1bffe15 	stw	r6,-8(fp)
   41070:	e1ffff15 	stw	r7,-4(fp)
	write(0, line, column, valor);
   41074:	e0bfff17 	ldw	r2,-4(fp)
   41078:	d8800015 	stw	r2,0(sp)
   4107c:	e13ffc17 	ldw	r4,-16(fp)
   41080:	000b883a 	mov	r5,zero
   41084:	e1bffd17 	ldw	r6,-12(fp)
   41088:	e1fffe17 	ldw	r7,-8(fp)
   4108c:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
}
   41090:	e037883a 	mov	sp,fp
   41094:	dfc00117 	ldw	ra,4(sp)
   41098:	df000017 	ldw	fp,0(sp)
   4109c:	dec00204 	addi	sp,sp,8
   410a0:	f800283a 	ret

000410a4 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
   410a4:	defffd04 	addi	sp,sp,-12
   410a8:	df000215 	stw	fp,8(sp)
   410ac:	df000204 	addi	fp,sp,8
   410b0:	e13ffe15 	stw	r4,-8(fp)
   410b4:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
   410b8:	e0bffe17 	ldw	r2,-8(fp)
   410bc:	10c00017 	ldw	r3,0(r2)
   410c0:	e0bfff17 	ldw	r2,-4(fp)
   410c4:	18800015 	stw	r2,0(r3)
}
   410c8:	e037883a 	mov	sp,fp
   410cc:	df000017 	ldw	fp,0(sp)
   410d0:	dec00104 	addi	sp,sp,4
   410d4:	f800283a 	ret

000410d8 <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
   410d8:	defffc04 	addi	sp,sp,-16
   410dc:	dfc00315 	stw	ra,12(sp)
   410e0:	df000215 	stw	fp,8(sp)
   410e4:	df000204 	addi	fp,sp,8
   410e8:	e13fff15 	stw	r4,-4(fp)
	write(3, 255, 255, 0);
   410ec:	d8000015 	stw	zero,0(sp)
   410f0:	e13fff17 	ldw	r4,-4(fp)
   410f4:	014000c4 	movi	r5,3
   410f8:	01803fc4 	movi	r6,255
   410fc:	01c03fc4 	movi	r7,255
   41100:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
}
   41104:	e037883a 	mov	sp,fp
   41108:	dfc00117 	ldw	ra,4(sp)
   4110c:	df000017 	ldw	fp,0(sp)
   41110:	dec00204 	addi	sp,sp,8
   41114:	f800283a 	ret

00041118 <_ZN6Motors21write_to_next_collumnEv>:

void Motors::write_to_next_collumn() {
   41118:	defffc04 	addi	sp,sp,-16
   4111c:	dfc00315 	stw	ra,12(sp)
   41120:	df000215 	stw	fp,8(sp)
   41124:	df000204 	addi	fp,sp,8
   41128:	e13fff15 	stw	r4,-4(fp)
	write(4, 255, 255, 0);
   4112c:	d8000015 	stw	zero,0(sp)
   41130:	e13fff17 	ldw	r4,-4(fp)
   41134:	01400104 	movi	r5,4
   41138:	01803fc4 	movi	r6,255
   4113c:	01c03fc4 	movi	r7,255
   41140:	0040f540 	call	40f54 <_ZN6Motors5writeEjjjj>
}
   41144:	e037883a 	mov	sp,fp
   41148:	dfc00117 	ldw	ra,4(sp)
   4114c:	df000017 	ldw	fp,0(sp)
   41150:	dec00204 	addi	sp,sp,8
   41154:	f800283a 	ret

00041158 <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
   41158:	defffe04 	addi	sp,sp,-8
   4115c:	df000115 	stw	fp,4(sp)
   41160:	df000104 	addi	fp,sp,4
   41164:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   41168:	e0ffff17 	ldw	r3,-4(fp)
   4116c:	00881a04 	movi	r2,8296
   41170:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   41174:	e0ffff17 	ldw	r3,-4(fp)
   41178:	00881b04 	movi	r2,8300
   4117c:	18800115 	stw	r2,4(r3)
}
   41180:	e037883a 	mov	sp,fp
   41184:	df000017 	ldw	fp,0(sp)
   41188:	dec00104 	addi	sp,sp,4
   4118c:	f800283a 	ret

00041190 <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumn() {
	write(4, 255, 255, 0);
}

/* private */
Motors::Motors() {
   41190:	defffe04 	addi	sp,sp,-8
   41194:	df000115 	stw	fp,4(sp)
   41198:	df000104 	addi	fp,sp,4
   4119c:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   411a0:	e0ffff17 	ldw	r3,-4(fp)
   411a4:	00881a04 	movi	r2,8296
   411a8:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   411ac:	e0ffff17 	ldw	r3,-4(fp)
   411b0:	00881b04 	movi	r2,8300
   411b4:	18800115 	stw	r2,4(r3)
}
   411b8:	e037883a 	mov	sp,fp
   411bc:	df000017 	ldw	fp,0(sp)
   411c0:	dec00104 	addi	sp,sp,4
   411c4:	f800283a 	ret

000411c8 <_ZN6Motors4readEv>:

unsigned int Motors::read() {
   411c8:	defffe04 	addi	sp,sp,-8
   411cc:	df000115 	stw	fp,4(sp)
   411d0:	df000104 	addi	fp,sp,4
   411d4:	e13fff15 	stw	r4,-4(fp)
	return *status;
   411d8:	e0bfff17 	ldw	r2,-4(fp)
   411dc:	10800117 	ldw	r2,4(r2)
   411e0:	10800017 	ldw	r2,0(r2)
}
   411e4:	e037883a 	mov	sp,fp
   411e8:	df000017 	ldw	fp,0(sp)
   411ec:	dec00104 	addi	sp,sp,4
   411f0:	f800283a 	ret

000411f4 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
   411f4:	defffd04 	addi	sp,sp,-12
   411f8:	dfc00215 	stw	ra,8(sp)
   411fc:	df000115 	stw	fp,4(sp)
   41200:	dc000015 	stw	r16,0(sp)
   41204:	d839883a 	mov	fp,sp
	if (motors == 0)
   41208:	d0a1cf17 	ldw	r2,-30916(gp)
   4120c:	1004c03a 	cmpne	r2,r2,zero
   41210:	1000061e 	bne	r2,zero,4122c <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
   41214:	01000204 	movi	r4,8
   41218:	00426e00 	call	426e0 <_Znwm>
   4121c:	1021883a 	mov	r16,r2
   41220:	8009883a 	mov	r4,r16
   41224:	00411900 	call	41190 <_ZN6MotorsC1Ev>
   41228:	d421cf15 	stw	r16,-30916(gp)
	return motors;
   4122c:	d0a1cf17 	ldw	r2,-30916(gp)
}
   41230:	e037883a 	mov	sp,fp
   41234:	dfc00217 	ldw	ra,8(sp)
   41238:	df000117 	ldw	fp,4(sp)
   4123c:	dc000017 	ldw	r16,0(sp)
   41240:	dec00304 	addi	sp,sp,12
   41244:	f800283a 	ret

00041248 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41248:	defffe04 	addi	sp,sp,-8
   4124c:	df000115 	stw	fp,4(sp)
   41250:	df000104 	addi	fp,sp,4
   41254:	e13fff15 	stw	r4,-4(fp)
}
   41258:	e037883a 	mov	sp,fp
   4125c:	df000017 	ldw	fp,0(sp)
   41260:	dec00104 	addi	sp,sp,4
   41264:	f800283a 	ret

00041268 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41268:	defffe04 	addi	sp,sp,-8
   4126c:	df000115 	stw	fp,4(sp)
   41270:	df000104 	addi	fp,sp,4
   41274:	e13fff15 	stw	r4,-4(fp)
}
   41278:	e037883a 	mov	sp,fp
   4127c:	df000017 	ldw	fp,0(sp)
   41280:	dec00104 	addi	sp,sp,4
   41284:	f800283a 	ret

00041288 <_ZN4WiFiC2Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
   41288:	defffe04 	addi	sp,sp,-8
   4128c:	df000115 	stw	fp,4(sp)
   41290:	df000104 	addi	fp,sp,4
   41294:	e13fff15 	stw	r4,-4(fp)
}
   41298:	e037883a 	mov	sp,fp
   4129c:	df000017 	ldw	fp,0(sp)
   412a0:	dec00104 	addi	sp,sp,4
   412a4:	f800283a 	ret

000412a8 <_ZN4WiFiC1Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
   412a8:	defffe04 	addi	sp,sp,-8
   412ac:	df000115 	stw	fp,4(sp)
   412b0:	df000104 	addi	fp,sp,4
   412b4:	e13fff15 	stw	r4,-4(fp)
}
   412b8:	e037883a 	mov	sp,fp
   412bc:	df000017 	ldw	fp,0(sp)
   412c0:	dec00104 	addi	sp,sp,4
   412c4:	f800283a 	ret

000412c8 <_ZN4WiFi5writeEPci>:
		k = alt_getchar();
		alt_printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
   412c8:	defffa04 	addi	sp,sp,-24
   412cc:	dfc00515 	stw	ra,20(sp)
   412d0:	df000415 	stw	fp,16(sp)
   412d4:	df000404 	addi	fp,sp,16
   412d8:	e13ffd15 	stw	r4,-12(fp)
   412dc:	e17ffe15 	stw	r5,-8(fp)
   412e0:	e1bfff15 	stw	r6,-4(fp)
	for (int i = 0; i < size; i++) {
   412e4:	e03ffc15 	stw	zero,-16(fp)
   412e8:	00000c06 	br	4131c <_ZN4WiFi5writeEPci+0x54>
		alt_putchar(msg[i]);
   412ec:	e0bffc17 	ldw	r2,-16(fp)
   412f0:	1007883a 	mov	r3,r2
   412f4:	e0bffe17 	ldw	r2,-8(fp)
   412f8:	1885883a 	add	r2,r3,r2
   412fc:	10800003 	ldbu	r2,0(r2)
   41300:	11003fcc 	andi	r4,r2,255
   41304:	2100201c 	xori	r4,r4,128
   41308:	213fe004 	addi	r4,r4,-128
   4130c:	0045bcc0 	call	45bcc <alt_putchar>
		alt_printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
	for (int i = 0; i < size; i++) {
   41310:	e0bffc17 	ldw	r2,-16(fp)
   41314:	10800044 	addi	r2,r2,1
   41318:	e0bffc15 	stw	r2,-16(fp)
   4131c:	e0fffc17 	ldw	r3,-16(fp)
   41320:	e0bfff17 	ldw	r2,-4(fp)
   41324:	18bff116 	blt	r3,r2,412ec <_ZN4WiFi5writeEPci+0x24>
		alt_putchar(msg[i]);
	}
}
   41328:	e037883a 	mov	sp,fp
   4132c:	dfc00117 	ldw	ra,4(sp)
   41330:	df000017 	ldw	fp,0(sp)
   41334:	dec00204 	addi	sp,sp,8
   41338:	f800283a 	ret

0004133c <_ZN4WiFi7receiveEPhPj>:
	char rst[] = "AT+RST";
	sendInstruction(stop);
	sendInstruction(rst);
}

void WiFi::receive(unsigned char* data, unsigned int *size) {
   4133c:	defff604 	addi	sp,sp,-40
   41340:	dfc00915 	stw	ra,36(sp)
   41344:	df000815 	stw	fp,32(sp)
   41348:	dc000715 	stw	r16,28(sp)
   4134c:	df000704 	addi	fp,sp,28
   41350:	e13ffd15 	stw	r4,-12(fp)
   41354:	e17ffe15 	stw	r5,-8(fp)
   41358:	e1bfff15 	stw	r6,-4(fp)
	char c;
	unsigned int i;
	i=0;
   4135c:	e03ffb15 	stw	zero,-20(fp)

	do {
		c = alt_getchar();
   41360:	00455c80 	call	455c8 <alt_getchar>
   41364:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   41368:	e0bffb17 	ldw	r2,-20(fp)
   4136c:	10800044 	addi	r2,r2,1
   41370:	e0bffb15 	stw	r2,-20(fp)
void WiFi::receive(unsigned char* data, unsigned int *size) {
	char c;
	unsigned int i;
	i=0;

	do {
   41374:	e0bffc07 	ldb	r2,-16(fp)
   41378:	10800ae0 	cmpeqi	r2,r2,43
   4137c:	1000031e 	bne	r2,zero,4138c <_ZN4WiFi7receiveEPhPj+0x50>
   41380:	e0bffb17 	ldw	r2,-20(fp)
   41384:	10810030 	cmpltui	r2,r2,1024
   41388:	103ff51e 	bne	r2,zero,41360 <_ZN4WiFi7receiveEPhPj+0x24>
		c = alt_getchar();
		i=i+1;
	} while (c != '+' and i<1024);
	do {
		c = alt_getchar();
   4138c:	00455c80 	call	455c8 <alt_getchar>
   41390:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   41394:	e0bffb17 	ldw	r2,-20(fp)
   41398:	10800044 	addi	r2,r2,1
   4139c:	e0bffb15 	stw	r2,-20(fp)

	do {
		c = alt_getchar();
		i=i+1;
	} while (c != '+' and i<1024);
	do {
   413a0:	e0bffc07 	ldb	r2,-16(fp)
   413a4:	10800b20 	cmpeqi	r2,r2,44
   413a8:	1000031e 	bne	r2,zero,413b8 <_ZN4WiFi7receiveEPhPj+0x7c>
   413ac:	e0bffb17 	ldw	r2,-20(fp)
   413b0:	10810030 	cmpltui	r2,r2,1024
   413b4:	103ff51e 	bne	r2,zero,4138c <_ZN4WiFi7receiveEPhPj+0x50>
		c = alt_getchar();
		i=i+1;
	} while (c != ',' and i<1024);

	do {
		c = alt_getchar();
   413b8:	00455c80 	call	455c8 <alt_getchar>
   413bc:	e0bffc05 	stb	r2,-16(fp)
		i=1+i;
   413c0:	e0bffb17 	ldw	r2,-20(fp)
   413c4:	10800044 	addi	r2,r2,1
   413c8:	e0bffb15 	stw	r2,-20(fp)
	do {
		c = alt_getchar();
		i=i+1;
	} while (c != ',' and i<1024);

	do {
   413cc:	e0bffc07 	ldb	r2,-16(fp)
   413d0:	10800b20 	cmpeqi	r2,r2,44
   413d4:	1000031e 	bne	r2,zero,413e4 <_ZN4WiFi7receiveEPhPj+0xa8>
   413d8:	e0bffb17 	ldw	r2,-20(fp)
   413dc:	10810030 	cmpltui	r2,r2,1024
   413e0:	103ff51e 	bne	r2,zero,413b8 <_ZN4WiFi7receiveEPhPj+0x7c>
		c = alt_getchar();
		i=1+i;
	} while (c != ',' and i<1024);

	*size = 0;
   413e4:	e0bfff17 	ldw	r2,-4(fp)
   413e8:	10000015 	stw	zero,0(r2)

	c = alt_getchar();
   413ec:	00455c80 	call	455c8 <alt_getchar>
   413f0:	e0bffc05 	stb	r2,-16(fp)

	while (c != ':' and i<1024) {
   413f4:	00000f06 	br	41434 <_ZN4WiFi7receiveEPhPj+0xf8>
		*size = *size * 10 + c - '0';
   413f8:	e0bfff17 	ldw	r2,-4(fp)
   413fc:	11000017 	ldw	r4,0(r2)
   41400:	01400284 	movi	r5,10
   41404:	0043b640 	call	43b64 <__mulsi3>
   41408:	1007883a 	mov	r3,r2
   4140c:	e0bffc07 	ldb	r2,-16(fp)
   41410:	1885883a 	add	r2,r3,r2
   41414:	10fff404 	addi	r3,r2,-48
   41418:	e0bfff17 	ldw	r2,-4(fp)
   4141c:	10c00015 	stw	r3,0(r2)
		c = alt_getchar();
   41420:	00455c80 	call	455c8 <alt_getchar>
   41424:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
   41428:	e0bffb17 	ldw	r2,-20(fp)
   4142c:	10800044 	addi	r2,r2,1
   41430:	e0bffb15 	stw	r2,-20(fp)

	*size = 0;

	c = alt_getchar();

	while (c != ':' and i<1024) {
   41434:	e0bffc07 	ldb	r2,-16(fp)
   41438:	10800ea0 	cmpeqi	r2,r2,58
   4143c:	1000031e 	bne	r2,zero,4144c <_ZN4WiFi7receiveEPhPj+0x110>
   41440:	e0bffb17 	ldw	r2,-20(fp)
   41444:	10810030 	cmpltui	r2,r2,1024
   41448:	103feb1e 	bne	r2,zero,413f8 <_ZN4WiFi7receiveEPhPj+0xbc>
		c = alt_getchar();
		i=i+1;
	}

	unsigned int j,max;
	j = 0;
   4144c:	e03ffa15 	stw	zero,-24(fp)
	max= *size;
   41450:	e0bfff17 	ldw	r2,-4(fp)
   41454:	10800017 	ldw	r2,0(r2)
   41458:	e0bff915 	stw	r2,-28(fp)
	if(max>2048){
   4145c:	e0bff917 	ldw	r2,-28(fp)
   41460:	10820070 	cmpltui	r2,r2,2049
   41464:	1000021e 	bne	r2,zero,41470 <_ZN4WiFi7receiveEPhPj+0x134>
		max = 2048;
   41468:	00820004 	movi	r2,2048
   4146c:	e0bff915 	stw	r2,-28(fp)
	}

	for(j=0;j < max;j+=1){
   41470:	e03ffa15 	stw	zero,-24(fp)
   41474:	00000806 	br	41498 <_ZN4WiFi7receiveEPhPj+0x15c>
		data[j] = alt_getchar();
   41478:	e0fffa17 	ldw	r3,-24(fp)
   4147c:	e0bffe17 	ldw	r2,-8(fp)
   41480:	18a1883a 	add	r16,r3,r2
   41484:	00455c80 	call	455c8 <alt_getchar>
   41488:	80800005 	stb	r2,0(r16)
	max= *size;
	if(max>2048){
		max = 2048;
	}

	for(j=0;j < max;j+=1){
   4148c:	e0bffa17 	ldw	r2,-24(fp)
   41490:	10800044 	addi	r2,r2,1
   41494:	e0bffa15 	stw	r2,-24(fp)
   41498:	e0fffa17 	ldw	r3,-24(fp)
   4149c:	e0bff917 	ldw	r2,-28(fp)
   414a0:	18bff536 	bltu	r3,r2,41478 <_ZN4WiFi7receiveEPhPj+0x13c>
	//Finalmente. Função getc(file) estava mudando o valor de *size durante o loop
	//Alocar as condições de laço para j,max antes de iniciar resolveu

	//Outro problema: transmissão do audio / imagem: As vezes o size explode por algum motivo
	//Então coloquei um valor máximo para max (2048 ok? )
	data[j] = '\0';
   414a4:	e0bffa17 	ldw	r2,-24(fp)
   414a8:	e0fffe17 	ldw	r3,-8(fp)
   414ac:	10c5883a 	add	r2,r2,r3
   414b0:	10000005 	stb	zero,0(r2)
}
   414b4:	e037883a 	mov	sp,fp
   414b8:	dfc00217 	ldw	ra,8(sp)
   414bc:	df000117 	ldw	fp,4(sp)
   414c0:	dc000017 	ldw	r16,0(sp)
   414c4:	dec00304 	addi	sp,sp,12
   414c8:	f800283a 	ret

000414cc <_ZN4WiFi15sendInstructionEPc>:

/* private */
WiFi::WiFi() {
}

void WiFi::sendInstruction(char * instruction) {
   414cc:	defffb04 	addi	sp,sp,-20
   414d0:	dfc00415 	stw	ra,16(sp)
   414d4:	df000315 	stw	fp,12(sp)
   414d8:	df000304 	addi	fp,sp,12
   414dc:	e13ffe15 	stw	r4,-8(fp)
   414e0:	e17fff15 	stw	r5,-4(fp)
	write(instruction, strlen(instruction));
   414e4:	e13fff17 	ldw	r4,-4(fp)
   414e8:	00451080 	call	45108 <strlen>
   414ec:	100d883a 	mov	r6,r2
   414f0:	e13ffe17 	ldw	r4,-8(fp)
   414f4:	e17fff17 	ldw	r5,-4(fp)
   414f8:	00412c80 	call	412c8 <_ZN4WiFi5writeEPci>
	write("\r\n", 2);
   414fc:	e13ffe17 	ldw	r4,-8(fp)
   41500:	01400134 	movhi	r5,4
   41504:	29593c04 	addi	r5,r5,25840
   41508:	01800084 	movi	r6,2
   4150c:	00412c80 	call	412c8 <_ZN4WiFi5writeEPci>

	char k;
	do {
		k = alt_getchar();
   41510:	00455c80 	call	455c8 <alt_getchar>
   41514:	e0bffd05 	stb	r2,-12(fp)
		alt_printf("%c",k);
   41518:	e17ffd07 	ldb	r5,-12(fp)
   4151c:	01000134 	movhi	r4,4
   41520:	21193d04 	addi	r4,r4,25844
   41524:	00459740 	call	45974 <alt_printf>
void WiFi::sendInstruction(char * instruction) {
	write(instruction, strlen(instruction));
	write("\r\n", 2);

	char k;
	do {
   41528:	e0bffd07 	ldb	r2,-12(fp)
   4152c:	108012d8 	cmpnei	r2,r2,75
   41530:	103ff71e 	bne	r2,zero,41510 <_ZN4WiFi15sendInstructionEPc+0x44>
		k = alt_getchar();
		alt_printf("%c",k);
	} while (k != 'K');
}
   41534:	e037883a 	mov	sp,fp
   41538:	dfc00117 	ldw	ra,4(sp)
   4153c:	df000017 	ldw	fp,0(sp)
   41540:	dec00204 	addi	sp,sp,8
   41544:	f800283a 	ret

00041548 <_ZN4WiFi10stopServerEv>:
void WiFi::startServer() {
	char server[] = "AT+CIPSERVER=1,80";
	sendInstruction(server);
}

void WiFi::stopServer() {
   41548:	defff704 	addi	sp,sp,-36
   4154c:	dfc00815 	stw	ra,32(sp)
   41550:	df000715 	stw	fp,28(sp)
   41554:	df000704 	addi	fp,sp,28
   41558:	e13fff15 	stw	r4,-4(fp)
	char stop[] = "AT+CIPSERVER=0";
   4155c:	00c00134 	movhi	r3,4
   41560:	18d93e04 	addi	r3,r3,25848
   41564:	18800017 	ldw	r2,0(r3)
   41568:	e0bff915 	stw	r2,-28(fp)
   4156c:	18800117 	ldw	r2,4(r3)
   41570:	e0bffa15 	stw	r2,-24(fp)
   41574:	18800217 	ldw	r2,8(r3)
   41578:	e0bffb15 	stw	r2,-20(fp)
   4157c:	1880030b 	ldhu	r2,12(r3)
   41580:	e0bffc0d 	sth	r2,-16(fp)
   41584:	18800383 	ldbu	r2,14(r3)
   41588:	e0bffc85 	stb	r2,-14(fp)
	char rst[] = "AT+RST";
   4158c:	00c00134 	movhi	r3,4
   41590:	18d94204 	addi	r3,r3,25864
   41594:	18800003 	ldbu	r2,0(r3)
   41598:	e0bffcc5 	stb	r2,-13(fp)
   4159c:	18800043 	ldbu	r2,1(r3)
   415a0:	e0bffd05 	stb	r2,-12(fp)
   415a4:	18800083 	ldbu	r2,2(r3)
   415a8:	e0bffd45 	stb	r2,-11(fp)
   415ac:	188000c3 	ldbu	r2,3(r3)
   415b0:	e0bffd85 	stb	r2,-10(fp)
   415b4:	18800103 	ldbu	r2,4(r3)
   415b8:	e0bffdc5 	stb	r2,-9(fp)
   415bc:	18800143 	ldbu	r2,5(r3)
   415c0:	e0bffe05 	stb	r2,-8(fp)
   415c4:	18800183 	ldbu	r2,6(r3)
   415c8:	e0bffe45 	stb	r2,-7(fp)
	sendInstruction(stop);
   415cc:	e13fff17 	ldw	r4,-4(fp)
   415d0:	e17ff904 	addi	r5,fp,-28
   415d4:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>
	sendInstruction(rst);
   415d8:	e17ffcc4 	addi	r5,fp,-13
   415dc:	e13fff17 	ldw	r4,-4(fp)
   415e0:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>
}
   415e4:	e037883a 	mov	sp,fp
   415e8:	dfc00117 	ldw	ra,4(sp)
   415ec:	df000017 	ldw	fp,0(sp)
   415f0:	dec00204 	addi	sp,sp,8
   415f4:	f800283a 	ret

000415f8 <_ZN4WiFi11startServerEv>:

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
	sendInstruction(ip);
}

void WiFi::startServer() {
   415f8:	defff804 	addi	sp,sp,-32
   415fc:	dfc00715 	stw	ra,28(sp)
   41600:	df000615 	stw	fp,24(sp)
   41604:	df000604 	addi	fp,sp,24
   41608:	e13fff15 	stw	r4,-4(fp)
	char server[] = "AT+CIPSERVER=1,80";
   4160c:	00c00134 	movhi	r3,4
   41610:	18d94404 	addi	r3,r3,25872
   41614:	18800017 	ldw	r2,0(r3)
   41618:	e0bffa15 	stw	r2,-24(fp)
   4161c:	18800117 	ldw	r2,4(r3)
   41620:	e0bffb15 	stw	r2,-20(fp)
   41624:	18800217 	ldw	r2,8(r3)
   41628:	e0bffc15 	stw	r2,-16(fp)
   4162c:	18800317 	ldw	r2,12(r3)
   41630:	e0bffd15 	stw	r2,-12(fp)
   41634:	1880040b 	ldhu	r2,16(r3)
   41638:	e0bffe0d 	sth	r2,-8(fp)
	sendInstruction(server);
   4163c:	e13fff17 	ldw	r4,-4(fp)
   41640:	e17ffa04 	addi	r5,fp,-24
   41644:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>
}
   41648:	e037883a 	mov	sp,fp
   4164c:	dfc00117 	ldw	ra,4(sp)
   41650:	df000017 	ldw	fp,0(sp)
   41654:	dec00204 	addi	sp,sp,8
   41658:	f800283a 	ret

0004165c <_ZN4WiFi6configEPcS0_>:
	if (wifi == 0)
		wifi = new WiFi();
	return wifi;
}

void WiFi::config(char* name, char* password) {
   4165c:	deffec04 	addi	sp,sp,-80
   41660:	dfc01315 	stw	ra,76(sp)
   41664:	df001215 	stw	fp,72(sp)
   41668:	dc001115 	stw	r16,68(sp)
   4166c:	df001104 	addi	fp,sp,68
   41670:	e13ffd15 	stw	r4,-12(fp)
   41674:	e17ffe15 	stw	r5,-8(fp)
   41678:	e1bfff15 	stw	r6,-4(fp)
	char modeConfig[] = "AT+CWMODE=2";
   4167c:	00c00134 	movhi	r3,4
   41680:	18d94c04 	addi	r3,r3,25904
   41684:	18800017 	ldw	r2,0(r3)
   41688:	e0bff115 	stw	r2,-60(fp)
   4168c:	18800117 	ldw	r2,4(r3)
   41690:	e0bff215 	stw	r2,-56(fp)
   41694:	18800217 	ldw	r2,8(r3)
   41698:	e0bff315 	stw	r2,-52(fp)
	sendInstruction(modeConfig);
   4169c:	e17ff104 	addi	r5,fp,-60
   416a0:	e13ffd17 	ldw	r4,-12(fp)
   416a4:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>

	char *apConfig;
	int apSize = 18 + strlen(name) + strlen(password);
   416a8:	e13ffe17 	ldw	r4,-8(fp)
   416ac:	00451080 	call	45108 <strlen>
   416b0:	1021883a 	mov	r16,r2
   416b4:	e13fff17 	ldw	r4,-4(fp)
   416b8:	00451080 	call	45108 <strlen>
   416bc:	8085883a 	add	r2,r16,r2
   416c0:	10800484 	addi	r2,r2,18
   416c4:	e0bfef15 	stw	r2,-68(fp)
	apConfig = new char[apSize];
   416c8:	e13fef17 	ldw	r4,-68(fp)
   416cc:	004192c0 	call	4192c <_Znam>
   416d0:	e0bff015 	stw	r2,-64(fp)
	strcpy(apConfig, "AT+CWSAP=\"");
   416d4:	e0fff017 	ldw	r3,-64(fp)
   416d8:	00801044 	movi	r2,65
   416dc:	18800005 	stb	r2,0(r3)
   416e0:	00801504 	movi	r2,84
   416e4:	18800045 	stb	r2,1(r3)
   416e8:	00800ac4 	movi	r2,43
   416ec:	18800085 	stb	r2,2(r3)
   416f0:	008010c4 	movi	r2,67
   416f4:	188000c5 	stb	r2,3(r3)
   416f8:	008015c4 	movi	r2,87
   416fc:	18800105 	stb	r2,4(r3)
   41700:	008014c4 	movi	r2,83
   41704:	18800145 	stb	r2,5(r3)
   41708:	00801044 	movi	r2,65
   4170c:	18800185 	stb	r2,6(r3)
   41710:	00801404 	movi	r2,80
   41714:	188001c5 	stb	r2,7(r3)
   41718:	00800f44 	movi	r2,61
   4171c:	18800205 	stb	r2,8(r3)
   41720:	00800884 	movi	r2,34
   41724:	18800245 	stb	r2,9(r3)
   41728:	18000285 	stb	zero,10(r3)
	strcat(apConfig, name);
   4172c:	e13ff017 	ldw	r4,-64(fp)
   41730:	e17ffe17 	ldw	r5,-8(fp)
   41734:	00450b80 	call	450b8 <strcat>
	strcat(apConfig, "\",\"");
   41738:	e13ff017 	ldw	r4,-64(fp)
   4173c:	01400134 	movhi	r5,4
   41740:	29594904 	addi	r5,r5,25892
   41744:	00450b80 	call	450b8 <strcat>
	strcat(apConfig, password);
   41748:	e13ff017 	ldw	r4,-64(fp)
   4174c:	e17fff17 	ldw	r5,-4(fp)
   41750:	00450b80 	call	450b8 <strcat>
	strcat(apConfig, "\",5,3");
   41754:	e13ff017 	ldw	r4,-64(fp)
   41758:	01400134 	movhi	r5,4
   4175c:	29594a04 	addi	r5,r5,25896
   41760:	00450b80 	call	450b8 <strcat>
	sendInstruction(apConfig);
   41764:	e13ffd17 	ldw	r4,-12(fp)
   41768:	e17ff017 	ldw	r5,-64(fp)
   4176c:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>

	char mux[] = "AT+CIPMUX=1";
   41770:	00c00134 	movhi	r3,4
   41774:	18d94f04 	addi	r3,r3,25916
   41778:	18800017 	ldw	r2,0(r3)
   4177c:	e0bff415 	stw	r2,-48(fp)
   41780:	18800117 	ldw	r2,4(r3)
   41784:	e0bff515 	stw	r2,-44(fp)
   41788:	18800217 	ldw	r2,8(r3)
   4178c:	e0bff615 	stw	r2,-40(fp)
	sendInstruction(mux);
   41790:	e17ff404 	addi	r5,fp,-48
   41794:	e13ffd17 	ldw	r4,-12(fp)
   41798:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
   4179c:	00c00134 	movhi	r3,4
   417a0:	18d95204 	addi	r3,r3,25928
   417a4:	18800017 	ldw	r2,0(r3)
   417a8:	e0bff715 	stw	r2,-36(fp)
   417ac:	18800117 	ldw	r2,4(r3)
   417b0:	e0bff815 	stw	r2,-32(fp)
   417b4:	18800217 	ldw	r2,8(r3)
   417b8:	e0bff915 	stw	r2,-28(fp)
   417bc:	18800317 	ldw	r2,12(r3)
   417c0:	e0bffa15 	stw	r2,-24(fp)
   417c4:	18800417 	ldw	r2,16(r3)
   417c8:	e0bffb15 	stw	r2,-20(fp)
   417cc:	1880050b 	ldhu	r2,20(r3)
   417d0:	e0bffc0d 	sth	r2,-16(fp)
   417d4:	18800583 	ldbu	r2,22(r3)
   417d8:	e0bffc85 	stb	r2,-14(fp)
	sendInstruction(ip);
   417dc:	e17ff704 	addi	r5,fp,-36
   417e0:	e13ffd17 	ldw	r4,-12(fp)
   417e4:	00414cc0 	call	414cc <_ZN4WiFi15sendInstructionEPc>
}
   417e8:	e037883a 	mov	sp,fp
   417ec:	dfc00217 	ldw	ra,8(sp)
   417f0:	df000117 	ldw	fp,4(sp)
   417f4:	dc000017 	ldw	r16,0(sp)
   417f8:	dec00304 	addi	sp,sp,12
   417fc:	f800283a 	ret

00041800 <_ZN4WiFi12getSingletonEv>:

/* public */
WiFi::~WiFi() {
}

WiFi *WiFi::getSingleton() {
   41800:	defffd04 	addi	sp,sp,-12
   41804:	dfc00215 	stw	ra,8(sp)
   41808:	df000115 	stw	fp,4(sp)
   4180c:	dc000015 	stw	r16,0(sp)
   41810:	d839883a 	mov	fp,sp
	if (wifi == 0)
   41814:	d0a1d017 	ldw	r2,-30912(gp)
   41818:	1004c03a 	cmpne	r2,r2,zero
   4181c:	1000061e 	bne	r2,zero,41838 <_ZN4WiFi12getSingletonEv+0x38>
		wifi = new WiFi();
   41820:	01000044 	movi	r4,1
   41824:	00426e00 	call	426e0 <_Znwm>
   41828:	1021883a 	mov	r16,r2
   4182c:	8009883a 	mov	r4,r16
   41830:	00412a80 	call	412a8 <_ZN4WiFiC1Ev>
   41834:	d421d015 	stw	r16,-30912(gp)
	return wifi;
   41838:	d0a1d017 	ldw	r2,-30912(gp)
}
   4183c:	e037883a 	mov	sp,fp
   41840:	dfc00217 	ldw	ra,8(sp)
   41844:	df000117 	ldw	fp,4(sp)
   41848:	dc000017 	ldw	r16,0(sp)
   4184c:	dec00304 	addi	sp,sp,12
   41850:	f800283a 	ret

00041854 <main>:
#include "system.h"
#include "app.h"

int main()
   41854:	deffe204 	addi	sp,sp,-120
   41858:	dfc01d15 	stw	ra,116(sp)
   4185c:	df001c15 	stw	fp,112(sp)
   41860:	ddc01b15 	stw	r23,108(sp)
   41864:	dd801a15 	stw	r22,104(sp)
   41868:	dd401915 	stw	r21,100(sp)
   4186c:	dd001815 	stw	r20,96(sp)
   41870:	dcc01715 	stw	r19,92(sp)
   41874:	dc801615 	stw	r18,88(sp)
   41878:	dc401515 	stw	r17,84(sp)
   4187c:	dc001415 	stw	r16,80(sp)
   41880:	df001404 	addi	fp,sp,80
   41884:	00800134 	movhi	r2,4
   41888:	10883904 	addi	r2,r2,8420
   4188c:	e0bff715 	stw	r2,-36(fp)
   41890:	00800134 	movhi	r2,4
   41894:	10991804 	addi	r2,r2,25696
   41898:	e0bff815 	stw	r2,-32(fp)
   4189c:	e0bff904 	addi	r2,fp,-28
   418a0:	e0ffec04 	addi	r3,fp,-80
   418a4:	10c00015 	stw	r3,0(r2)
   418a8:	00c00134 	movhi	r3,4
   418ac:	18c63d04 	addi	r3,r3,6388
   418b0:	10c00115 	stw	r3,4(r2)
   418b4:	16c00215 	stw	sp,8(r2)
   418b8:	e13ff104 	addi	r4,fp,-60
   418bc:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
{
	App app;
   418c0:	00bfffc4 	movi	r2,-1
   418c4:	e0bff215 	stw	r2,-56(fp)
   418c8:	e13fec04 	addi	r4,fp,-80
   418cc:	004009c0 	call	4009c <_ZN3AppC1Ev>

	app.setup();
   418d0:	00800044 	movi	r2,1
   418d4:	e0bff215 	stw	r2,-56(fp)
   418d8:	e13fec04 	addi	r4,fp,-80
   418dc:	00400dc0 	call	400dc <_ZN3App5setupEv>
	while(1){

		app.run();
   418e0:	00800044 	movi	r2,1
   418e4:	e0bff215 	stw	r2,-56(fp)
   418e8:	e13fec04 	addi	r4,fp,-80
   418ec:	00406f00 	call	406f0 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
   418f0:	003ffb06 	br	418e0 <main+0x8c>
   418f4:	e7001404 	addi	fp,fp,80
   418f8:	e0bff317 	ldw	r2,-52(fp)
   418fc:	e0bfff15 	stw	r2,-4(fp)
   41900:	e0ffff17 	ldw	r3,-4(fp)
   41904:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
   41908:	e03ff215 	stw	zero,-56(fp)
   4190c:	e13fec04 	addi	r4,fp,-80
   41910:	0040b580 	call	40b58 <_ZN3AppD1Ev>
   41914:	e0bffe17 	ldw	r2,-8(fp)
   41918:	e0bfff15 	stw	r2,-4(fp)
   4191c:	00bfffc4 	movi	r2,-1
   41920:	e0bff215 	stw	r2,-56(fp)
   41924:	e13fff17 	ldw	r4,-4(fp)
   41928:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>

0004192c <_Znam>:
   4192c:	deffee04 	addi	sp,sp,-72
   41930:	00800134 	movhi	r2,4
   41934:	10883904 	addi	r2,r2,8420
   41938:	d8800615 	stw	r2,24(sp)
   4193c:	00c00134 	movhi	r3,4
   41940:	18d91a04 	addi	r3,r3,25704
   41944:	00800134 	movhi	r2,4
   41948:	10866a04 	addi	r2,r2,6568
   4194c:	d9000e15 	stw	r4,56(sp)
   41950:	d809883a 	mov	r4,sp
   41954:	d8800915 	stw	r2,36(sp)
   41958:	dfc01115 	stw	ra,68(sp)
   4195c:	df001015 	stw	fp,64(sp)
   41960:	ddc00f15 	stw	r23,60(sp)
   41964:	d8c00715 	stw	r3,28(sp)
   41968:	dec00815 	stw	sp,32(sp)
   4196c:	dec00a15 	stw	sp,40(sp)
   41970:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   41974:	00800044 	movi	r2,1
   41978:	d8800115 	stw	r2,4(sp)
   4197c:	d9000e17 	ldw	r4,56(sp)
   41980:	00426e00 	call	426e0 <_Znwm>
   41984:	d809883a 	mov	r4,sp
   41988:	d8800d15 	stw	r2,52(sp)
   4198c:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   41990:	d8800d17 	ldw	r2,52(sp)
   41994:	dfc01117 	ldw	ra,68(sp)
   41998:	df001017 	ldw	fp,64(sp)
   4199c:	ddc00f17 	ldw	r23,60(sp)
   419a0:	dec01204 	addi	sp,sp,72
   419a4:	f800283a 	ret
   419a8:	d8800317 	ldw	r2,12(sp)
   419ac:	00ffffc4 	movi	r3,-1
   419b0:	d9000217 	ldw	r4,8(sp)
   419b4:	10c00226 	beq	r2,r3,419c0 <_Znam+0x94>
   419b8:	d8c00115 	stw	r3,4(sp)
   419bc:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   419c0:	00bfffc4 	movi	r2,-1
   419c4:	d8800115 	stw	r2,4(sp)
   419c8:	0041f640 	call	41f64 <__cxa_call_unexpected>

000419cc <_ZdlPv>:
   419cc:	20000126 	beq	r4,zero,419d4 <_ZdlPv+0x8>
   419d0:	00445701 	jmpi	44570 <free>
   419d4:	f800283a 	ret

000419d8 <_Z12read_uleb128PKhPj>:
   419d8:	000d883a 	mov	r6,zero
   419dc:	000f883a 	mov	r7,zero
   419e0:	20c00007 	ldb	r3,0(r4)
   419e4:	21000044 	addi	r4,r4,1
   419e8:	18801fcc 	andi	r2,r3,127
   419ec:	1184983a 	sll	r2,r2,r6
   419f0:	318001c4 	addi	r6,r6,7
   419f4:	388eb03a 	or	r7,r7,r2
   419f8:	183ff916 	blt	r3,zero,419e0 <_Z12read_uleb128PKhPj+0x8>
   419fc:	2005883a 	mov	r2,r4
   41a00:	29c00015 	stw	r7,0(r5)
   41a04:	f800283a 	ret

00041a08 <_Z12read_sleb128PKhPi>:
   41a08:	000f883a 	mov	r7,zero
   41a0c:	0011883a 	mov	r8,zero
   41a10:	20c00007 	ldb	r3,0(r4)
   41a14:	21000044 	addi	r4,r4,1
   41a18:	19803fcc 	andi	r6,r3,255
   41a1c:	30801fcc 	andi	r2,r6,127
   41a20:	11c4983a 	sll	r2,r2,r7
   41a24:	39c001c4 	addi	r7,r7,7
   41a28:	4090b03a 	or	r8,r8,r2
   41a2c:	183ff816 	blt	r3,zero,41a10 <_Z12read_sleb128PKhPi+0x8>
   41a30:	008007c4 	movi	r2,31
   41a34:	11c00636 	bltu	r2,r7,41a50 <_Z12read_sleb128PKhPi+0x48>
   41a38:	3080100c 	andi	r2,r6,64
   41a3c:	10000426 	beq	r2,zero,41a50 <_Z12read_sleb128PKhPi+0x48>
   41a40:	00800044 	movi	r2,1
   41a44:	11c4983a 	sll	r2,r2,r7
   41a48:	0085c83a 	sub	r2,zero,r2
   41a4c:	4090b03a 	or	r8,r8,r2
   41a50:	2005883a 	mov	r2,r4
   41a54:	2a000015 	stw	r8,0(r5)
   41a58:	f800283a 	ret

00041a5c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   41a5c:	28800017 	ldw	r2,0(r5)
   41a60:	defffb04 	addi	sp,sp,-20
   41a64:	30c00017 	ldw	r3,0(r6)
   41a68:	dc400215 	stw	r17,8(sp)
   41a6c:	2823883a 	mov	r17,r5
   41a70:	11400217 	ldw	r5,8(r2)
   41a74:	dc800315 	stw	r18,12(sp)
   41a78:	dc000115 	stw	r16,4(sp)
   41a7c:	dfc00415 	stw	ra,16(sp)
   41a80:	2021883a 	mov	r16,r4
   41a84:	d8c00015 	stw	r3,0(sp)
   41a88:	8809883a 	mov	r4,r17
   41a8c:	3025883a 	mov	r18,r6
   41a90:	283ee83a 	callr	r5
   41a94:	10803fcc 	andi	r2,r2,255
   41a98:	880b883a 	mov	r5,r17
   41a9c:	8009883a 	mov	r4,r16
   41aa0:	d80d883a 	mov	r6,sp
   41aa4:	01c00044 	movi	r7,1
   41aa8:	10000326 	beq	r2,zero,41ab8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
   41aac:	d8800017 	ldw	r2,0(sp)
   41ab0:	10c00017 	ldw	r3,0(r2)
   41ab4:	d8c00015 	stw	r3,0(sp)
   41ab8:	80800017 	ldw	r2,0(r16)
   41abc:	10c00417 	ldw	r3,16(r2)
   41ac0:	183ee83a 	callr	r3
   41ac4:	10803fcc 	andi	r2,r2,255
   41ac8:	0007883a 	mov	r3,zero
   41acc:	10000326 	beq	r2,zero,41adc <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
   41ad0:	d8800017 	ldw	r2,0(sp)
   41ad4:	00c00044 	movi	r3,1
   41ad8:	90800015 	stw	r2,0(r18)
   41adc:	1805883a 	mov	r2,r3
   41ae0:	dfc00417 	ldw	ra,16(sp)
   41ae4:	dc800317 	ldw	r18,12(sp)
   41ae8:	dc400217 	ldw	r17,8(sp)
   41aec:	dc000117 	ldw	r16,4(sp)
   41af0:	dec00504 	addi	sp,sp,20
   41af4:	f800283a 	ret

00041af8 <_Z28read_encoded_value_with_basehjPKhPj>:
   41af8:	defff904 	addi	sp,sp,-28
   41afc:	dc400215 	stw	r17,8(sp)
   41b00:	00801404 	movi	r2,80
   41b04:	24403fcc 	andi	r17,r4,255
   41b08:	dd000515 	stw	r20,20(sp)
   41b0c:	dcc00415 	stw	r19,16(sp)
   41b10:	dc800315 	stw	r18,12(sp)
   41b14:	dc000115 	stw	r16,4(sp)
   41b18:	dfc00615 	stw	ra,24(sp)
   41b1c:	2025883a 	mov	r18,r4
   41b20:	2829883a 	mov	r20,r5
   41b24:	3021883a 	mov	r16,r6
   41b28:	3827883a 	mov	r19,r7
   41b2c:	88801826 	beq	r17,r2,41b90 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
   41b30:	88c003cc 	andi	r3,r17,15
   41b34:	00800304 	movi	r2,12
   41b38:	10c0012e 	bgeu	r2,r3,41b40 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
   41b3c:	00445580 	call	44558 <abort>
   41b40:	18c5883a 	add	r2,r3,r3
   41b44:	1085883a 	add	r2,r2,r2
   41b48:	00c00134 	movhi	r3,4
   41b4c:	18c6d704 	addi	r3,r3,7004
   41b50:	10c5883a 	add	r2,r2,r3
   41b54:	11000017 	ldw	r4,0(r2)
   41b58:	2000683a 	jmp	r4
   41b5c:	00041bcc 	andi	zero,zero,4207
   41b60:	00041cb4 	movhi	zero,4210
   41b64:	00041c60 	cmpeqi	zero,zero,4209
   41b68:	00041bcc 	andi	zero,zero,4207
   41b6c:	00041c24 	muli	zero,zero,4208
   41b70:	00041b3c 	xorhi	zero,zero,4204
   41b74:	00041b3c 	xorhi	zero,zero,4204
   41b78:	00041b3c 	xorhi	zero,zero,4204
   41b7c:	00041b3c 	xorhi	zero,zero,4204
   41b80:	00041c9c 	xori	zero,zero,4210
   41b84:	00041c78 	rdprs	zero,zero,4209
   41b88:	00041bcc 	andi	zero,zero,4207
   41b8c:	00041c24 	muli	zero,zero,4208
   41b90:	308000c4 	addi	r2,r6,3
   41b94:	00ffff04 	movi	r3,-4
   41b98:	10c4703a 	and	r2,r2,r3
   41b9c:	11000017 	ldw	r4,0(r2)
   41ba0:	11400104 	addi	r5,r2,4
   41ba4:	2805883a 	mov	r2,r5
   41ba8:	99000015 	stw	r4,0(r19)
   41bac:	dfc00617 	ldw	ra,24(sp)
   41bb0:	dd000517 	ldw	r20,20(sp)
   41bb4:	dcc00417 	ldw	r19,16(sp)
   41bb8:	dc800317 	ldw	r18,12(sp)
   41bbc:	dc400217 	ldw	r17,8(sp)
   41bc0:	dc000117 	ldw	r16,4(sp)
   41bc4:	dec00704 	addi	sp,sp,28
   41bc8:	f800283a 	ret
   41bcc:	30800043 	ldbu	r2,1(r6)
   41bd0:	30c00083 	ldbu	r3,2(r6)
   41bd4:	310000c3 	ldbu	r4,3(r6)
   41bd8:	31400003 	ldbu	r5,0(r6)
   41bdc:	1004923a 	slli	r2,r2,8
   41be0:	1806943a 	slli	r3,r3,16
   41be4:	2008963a 	slli	r4,r4,24
   41be8:	1144b03a 	or	r2,r2,r5
   41bec:	1886b03a 	or	r3,r3,r2
   41bf0:	20c8b03a 	or	r4,r4,r3
   41bf4:	31400104 	addi	r5,r6,4
   41bf8:	203fea26 	beq	r4,zero,41ba4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   41bfc:	88c01c0c 	andi	r3,r17,112
   41c00:	00800404 	movi	r2,16
   41c04:	18801426 	beq	r3,r2,41c58 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
   41c08:	90803fcc 	andi	r2,r18,255
   41c0c:	1080201c 	xori	r2,r2,128
   41c10:	10bfe004 	addi	r2,r2,-128
   41c14:	2509883a 	add	r4,r4,r20
   41c18:	103fe20e 	bge	r2,zero,41ba4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   41c1c:	21000017 	ldw	r4,0(r4)
   41c20:	003fe006 	br	41ba4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   41c24:	30800043 	ldbu	r2,1(r6)
   41c28:	31800083 	ldbu	r6,2(r6)
   41c2c:	820000c3 	ldbu	r8,3(r16)
   41c30:	1004923a 	slli	r2,r2,8
   41c34:	82400003 	ldbu	r9,0(r16)
   41c38:	300c943a 	slli	r6,r6,16
   41c3c:	4010963a 	slli	r8,r8,24
   41c40:	1244b03a 	or	r2,r2,r9
   41c44:	308cb03a 	or	r6,r6,r2
   41c48:	4184b03a 	or	r2,r8,r6
   41c4c:	1009883a 	mov	r4,r2
   41c50:	81400204 	addi	r5,r16,8
   41c54:	003fe806 	br	41bf8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   41c58:	8029883a 	mov	r20,r16
   41c5c:	003fea06 	br	41c08 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
   41c60:	30800043 	ldbu	r2,1(r6)
   41c64:	30c00003 	ldbu	r3,0(r6)
   41c68:	31400084 	addi	r5,r6,2
   41c6c:	1004923a 	slli	r2,r2,8
   41c70:	10c8b03a 	or	r4,r2,r3
   41c74:	003fe006 	br	41bf8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   41c78:	30800043 	ldbu	r2,1(r6)
   41c7c:	30c00003 	ldbu	r3,0(r6)
   41c80:	31400084 	addi	r5,r6,2
   41c84:	1004923a 	slli	r2,r2,8
   41c88:	10c4b03a 	or	r2,r2,r3
   41c8c:	113fffcc 	andi	r4,r2,65535
   41c90:	2120001c 	xori	r4,r4,32768
   41c94:	21200004 	addi	r4,r4,-32768
   41c98:	003fd706 	br	41bf8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   41c9c:	3009883a 	mov	r4,r6
   41ca0:	d80b883a 	mov	r5,sp
   41ca4:	0041a080 	call	41a08 <_Z12read_sleb128PKhPi>
   41ca8:	d9000017 	ldw	r4,0(sp)
   41cac:	100b883a 	mov	r5,r2
   41cb0:	003fd106 	br	41bf8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   41cb4:	3009883a 	mov	r4,r6
   41cb8:	d80b883a 	mov	r5,sp
   41cbc:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   41cc0:	d9000017 	ldw	r4,0(sp)
   41cc4:	100b883a 	mov	r5,r2
   41cc8:	003fcb06 	br	41bf8 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

00041ccc <_Z21base_of_encoded_valuehP15_Unwind_Context>:
   41ccc:	deffff04 	addi	sp,sp,-4
   41cd0:	21003fcc 	andi	r4,r4,255
   41cd4:	00803fc4 	movi	r2,255
   41cd8:	dfc00015 	stw	ra,0(sp)
   41cdc:	20800c26 	beq	r4,r2,41d10 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   41ce0:	21001c0c 	andi	r4,r4,112
   41ce4:	00800804 	movi	r2,32
   41ce8:	20800d26 	beq	r4,r2,41d20 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
   41cec:	1100070e 	bge	r2,r4,41d0c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
   41cf0:	00801004 	movi	r2,64
   41cf4:	20801126 	beq	r4,r2,41d3c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
   41cf8:	00801404 	movi	r2,80
   41cfc:	20800426 	beq	r4,r2,41d10 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   41d00:	00800c04 	movi	r2,48
   41d04:	20801126 	beq	r4,r2,41d4c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
   41d08:	00445580 	call	44558 <abort>
   41d0c:	2000081e 	bne	r4,zero,41d30 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
   41d10:	0005883a 	mov	r2,zero
   41d14:	dfc00017 	ldw	ra,0(sp)
   41d18:	dec00104 	addi	sp,sp,4
   41d1c:	f800283a 	ret
   41d20:	2809883a 	mov	r4,r5
   41d24:	dfc00017 	ldw	ra,0(sp)
   41d28:	dec00104 	addi	sp,sp,4
   41d2c:	0043c541 	jmpi	43c54 <_Unwind_GetTextRelBase>
   41d30:	00800404 	movi	r2,16
   41d34:	20bff626 	beq	r4,r2,41d10 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   41d38:	00445580 	call	44558 <abort>
   41d3c:	2809883a 	mov	r4,r5
   41d40:	dfc00017 	ldw	ra,0(sp)
   41d44:	dec00104 	addi	sp,sp,4
   41d48:	0043c3c1 	jmpi	43c3c <_Unwind_GetRegionStart>
   41d4c:	2809883a 	mov	r4,r5
   41d50:	dfc00017 	ldw	ra,0(sp)
   41d54:	dec00104 	addi	sp,sp,4
   41d58:	0043c4c1 	jmpi	43c4c <_Unwind_GetDataRelBase>

00041d5c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   41d5c:	defffa04 	addi	sp,sp,-24
   41d60:	dc800415 	stw	r18,16(sp)
   41d64:	dc400315 	stw	r17,12(sp)
   41d68:	dc000215 	stw	r16,8(sp)
   41d6c:	dfc00515 	stw	ra,20(sp)
   41d70:	2021883a 	mov	r16,r4
   41d74:	000f883a 	mov	r7,zero
   41d78:	3023883a 	mov	r17,r6
   41d7c:	2825883a 	mov	r18,r5
   41d80:	20000226 	beq	r4,zero,41d8c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
   41d84:	0043c3c0 	call	43c3c <_Unwind_GetRegionStart>
   41d88:	100f883a 	mov	r7,r2
   41d8c:	89c00015 	stw	r7,0(r17)
   41d90:	90c00003 	ldbu	r3,0(r18)
   41d94:	800b883a 	mov	r5,r16
   41d98:	00803fc4 	movi	r2,255
   41d9c:	1c003fcc 	andi	r16,r3,255
   41da0:	91800044 	addi	r6,r18,1
   41da4:	8009883a 	mov	r4,r16
   41da8:	18802226 	beq	r3,r2,41e34 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
   41dac:	d9800115 	stw	r6,4(sp)
   41db0:	0041ccc0 	call	41ccc <_Z21base_of_encoded_valuehP15_Unwind_Context>
   41db4:	d9800117 	ldw	r6,4(sp)
   41db8:	8009883a 	mov	r4,r16
   41dbc:	100b883a 	mov	r5,r2
   41dc0:	89c00104 	addi	r7,r17,4
   41dc4:	0041af80 	call	41af8 <_Z28read_encoded_value_with_basehjPKhPj>
   41dc8:	100d883a 	mov	r6,r2
   41dcc:	30800003 	ldbu	r2,0(r6)
   41dd0:	31c00044 	addi	r7,r6,1
   41dd4:	00c03fc4 	movi	r3,255
   41dd8:	d80b883a 	mov	r5,sp
   41ddc:	3809883a 	mov	r4,r7
   41de0:	88800505 	stb	r2,20(r17)
   41de4:	10c01b26 	beq	r2,r3,41e54 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
   41de8:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   41dec:	100f883a 	mov	r7,r2
   41df0:	d8800017 	ldw	r2,0(sp)
   41df4:	3885883a 	add	r2,r7,r2
   41df8:	88800315 	stw	r2,12(r17)
   41dfc:	38800003 	ldbu	r2,0(r7)
   41e00:	39000044 	addi	r4,r7,1
   41e04:	d80b883a 	mov	r5,sp
   41e08:	88800545 	stb	r2,21(r17)
   41e0c:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   41e10:	d8c00017 	ldw	r3,0(sp)
   41e14:	10c9883a 	add	r4,r2,r3
   41e18:	89000415 	stw	r4,16(r17)
   41e1c:	dfc00517 	ldw	ra,20(sp)
   41e20:	dc800417 	ldw	r18,16(sp)
   41e24:	dc400317 	ldw	r17,12(sp)
   41e28:	dc000217 	ldw	r16,8(sp)
   41e2c:	dec00604 	addi	sp,sp,24
   41e30:	f800283a 	ret
   41e34:	89c00115 	stw	r7,4(r17)
   41e38:	30800003 	ldbu	r2,0(r6)
   41e3c:	31c00044 	addi	r7,r6,1
   41e40:	00c03fc4 	movi	r3,255
   41e44:	d80b883a 	mov	r5,sp
   41e48:	3809883a 	mov	r4,r7
   41e4c:	88800505 	stb	r2,20(r17)
   41e50:	10ffe51e 	bne	r2,r3,41de8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
   41e54:	88000315 	stw	zero,12(r17)
   41e58:	003fe806 	br	41dfc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

00041e5c <_Z15get_ttype_entryP16lsda_header_infoj>:
   41e5c:	defffe04 	addi	sp,sp,-8
   41e60:	dfc00115 	stw	ra,4(sp)
   41e64:	21c00503 	ldbu	r7,20(r4)
   41e68:	00803fc4 	movi	r2,255
   41e6c:	38801a26 	beq	r7,r2,41ed8 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
   41e70:	38c001cc 	andi	r3,r7,7
   41e74:	00800084 	movi	r2,2
   41e78:	18801326 	beq	r3,r2,41ec8 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
   41e7c:	10c0050e 	bge	r2,r3,41e94 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
   41e80:	008000c4 	movi	r2,3
   41e84:	18800426 	beq	r3,r2,41e98 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
   41e88:	00800104 	movi	r2,4
   41e8c:	18801026 	beq	r3,r2,41ed0 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
   41e90:	00445580 	call	44558 <abort>
   41e94:	183ffe1e 	bne	r3,zero,41e90 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
   41e98:	2945883a 	add	r2,r5,r5
   41e9c:	1085883a 	add	r2,r2,r2
   41ea0:	21800317 	ldw	r6,12(r4)
   41ea4:	21400217 	ldw	r5,8(r4)
   41ea8:	3809883a 	mov	r4,r7
   41eac:	308dc83a 	sub	r6,r6,r2
   41eb0:	d80f883a 	mov	r7,sp
   41eb4:	0041af80 	call	41af8 <_Z28read_encoded_value_with_basehjPKhPj>
   41eb8:	d8800017 	ldw	r2,0(sp)
   41ebc:	dfc00117 	ldw	ra,4(sp)
   41ec0:	dec00204 	addi	sp,sp,8
   41ec4:	f800283a 	ret
   41ec8:	2945883a 	add	r2,r5,r5
   41ecc:	003ff406 	br	41ea0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   41ed0:	280490fa 	slli	r2,r5,3
   41ed4:	003ff206 	br	41ea0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   41ed8:	0005883a 	mov	r2,zero
   41edc:	003ff006 	br	41ea0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

00041ee0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
   41ee0:	20800317 	ldw	r2,12(r4)
   41ee4:	defffa04 	addi	sp,sp,-24
   41ee8:	dc800415 	stw	r18,16(sp)
   41eec:	11c5c83a 	sub	r2,r2,r7
   41ef0:	dc400315 	stw	r17,12(sp)
   41ef4:	dc000215 	stw	r16,8(sp)
   41ef8:	dfc00515 	stw	ra,20(sp)
   41efc:	2023883a 	mov	r17,r4
   41f00:	d9800115 	stw	r6,4(sp)
   41f04:	2825883a 	mov	r18,r5
   41f08:	143fffc4 	addi	r16,r2,-1
   41f0c:	8009883a 	mov	r4,r16
   41f10:	d80b883a 	mov	r5,sp
   41f14:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   41f18:	1021883a 	mov	r16,r2
   41f1c:	d8800017 	ldw	r2,0(sp)
   41f20:	8809883a 	mov	r4,r17
   41f24:	100b883a 	mov	r5,r2
   41f28:	10000826 	beq	r2,zero,41f4c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
   41f2c:	0041e5c0 	call	41e5c <_Z15get_ttype_entryP16lsda_header_infoj>
   41f30:	1009883a 	mov	r4,r2
   41f34:	900b883a 	mov	r5,r18
   41f38:	d9800104 	addi	r6,sp,4
   41f3c:	0041a5c0 	call	41a5c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   41f40:	10803fcc 	andi	r2,r2,255
   41f44:	103ff126 	beq	r2,zero,41f0c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
   41f48:	00800044 	movi	r2,1
   41f4c:	dfc00517 	ldw	ra,20(sp)
   41f50:	dc800417 	ldw	r18,16(sp)
   41f54:	dc400317 	ldw	r17,12(sp)
   41f58:	dc000217 	ldw	r16,8(sp)
   41f5c:	dec00604 	addi	sp,sp,24
   41f60:	f800283a 	ret

00041f64 <__cxa_call_unexpected>:
   41f64:	deffe204 	addi	sp,sp,-120
   41f68:	00800134 	movhi	r2,4
   41f6c:	10883904 	addi	r2,r2,8420
   41f70:	00c00134 	movhi	r3,4
   41f74:	18d91f04 	addi	r3,r3,25724
   41f78:	d8800c15 	stw	r2,48(sp)
   41f7c:	d9001815 	stw	r4,96(sp)
   41f80:	00800134 	movhi	r2,4
   41f84:	1087fb04 	addi	r2,r2,8172
   41f88:	d9000604 	addi	r4,sp,24
   41f8c:	d8c00d15 	stw	r3,52(sp)
   41f90:	dfc01d15 	stw	ra,116(sp)
   41f94:	d8800f15 	stw	r2,60(sp)
   41f98:	df001c15 	stw	fp,112(sp)
   41f9c:	ddc01b15 	stw	r23,108(sp)
   41fa0:	dec00e15 	stw	sp,56(sp)
   41fa4:	dec01015 	stw	sp,64(sp)
   41fa8:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   41fac:	d9001817 	ldw	r4,96(sp)
   41fb0:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   41fb4:	d8801817 	ldw	r2,96(sp)
   41fb8:	10fff504 	addi	r3,r2,-44
   41fbc:	18800917 	ldw	r2,36(r3)
   41fc0:	19400617 	ldw	r5,24(r3)
   41fc4:	19000217 	ldw	r4,8(r3)
   41fc8:	d8800215 	stw	r2,8(sp)
   41fcc:	18800817 	ldw	r2,32(r3)
   41fd0:	18c00317 	ldw	r3,12(r3)
   41fd4:	d9401615 	stw	r5,88(sp)
   41fd8:	d8801715 	stw	r2,92(sp)
   41fdc:	00800084 	movi	r2,2
   41fe0:	d8c01515 	stw	r3,84(sp)
   41fe4:	d8800715 	stw	r2,28(sp)
   41fe8:	00426b80 	call	426b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   41fec:	d8800717 	ldw	r2,28(sp)
   41ff0:	d8c00817 	ldw	r3,32(sp)
   41ff4:	d8801a15 	stw	r2,104(sp)
   41ff8:	d9401a17 	ldw	r5,104(sp)
   41ffc:	00800044 	movi	r2,1
   42000:	d8c01915 	stw	r3,100(sp)
   42004:	28800826 	beq	r5,r2,42028 <__cxa_call_unexpected+0xc4>
   42008:	d8000715 	stw	zero,28(sp)
   4200c:	0042bfc0 	call	42bfc <__cxa_end_catch>
   42010:	d8000715 	stw	zero,28(sp)
   42014:	0042bfc0 	call	42bfc <__cxa_end_catch>
   42018:	d9001917 	ldw	r4,100(sp)
   4201c:	00bfffc4 	movi	r2,-1
   42020:	d8800715 	stw	r2,28(sp)
   42024:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   42028:	d9001917 	ldw	r4,100(sp)
   4202c:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   42030:	00425c40 	call	425c4 <__cxa_get_globals_fast>
   42034:	10800017 	ldw	r2,0(r2)
   42038:	d8c01a17 	ldw	r3,104(sp)
   4203c:	0009883a 	mov	r4,zero
   42040:	11401004 	addi	r5,r2,64
   42044:	d9401315 	stw	r5,76(sp)
   42048:	d8801415 	stw	r2,80(sp)
   4204c:	d8c00715 	stw	r3,28(sp)
   42050:	d9401717 	ldw	r5,92(sp)
   42054:	d80d883a 	mov	r6,sp
   42058:	0041d5c0 	call	41d5c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4205c:	d8801417 	ldw	r2,80(sp)
   42060:	d809883a 	mov	r4,sp
   42064:	d9801317 	ldw	r6,76(sp)
   42068:	11400017 	ldw	r5,0(r2)
   4206c:	d9c01617 	ldw	r7,88(sp)
   42070:	0041ee00 	call	41ee0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42074:	10803fcc 	andi	r2,r2,255
   42078:	1000151e 	bne	r2,zero,420d0 <__cxa_call_unexpected+0x16c>
   4207c:	d8c01a17 	ldw	r3,104(sp)
   42080:	d809883a 	mov	r4,sp
   42084:	01400134 	movhi	r5,4
   42088:	29596704 	addi	r5,r5,26012
   4208c:	d8c00715 	stw	r3,28(sp)
   42090:	000d883a 	mov	r6,zero
   42094:	d9c01617 	ldw	r7,88(sp)
   42098:	0041ee00 	call	41ee0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   4209c:	10803fcc 	andi	r2,r2,255
   420a0:	10000c26 	beq	r2,zero,420d4 <__cxa_call_unexpected+0x170>
   420a4:	01000104 	movi	r4,4
   420a8:	00429580 	call	42958 <__cxa_allocate_exception>
   420ac:	1009883a 	mov	r4,r2
   420b0:	00800134 	movhi	r2,4
   420b4:	10995a04 	addi	r2,r2,25960
   420b8:	20800015 	stw	r2,0(r4)
   420bc:	01400134 	movhi	r5,4
   420c0:	29596704 	addi	r5,r5,26012
   420c4:	01800134 	movhi	r6,4
   420c8:	318a2604 	addi	r6,r6,10392
   420cc:	0042b000 	call	42b00 <__cxa_throw>
   420d0:	0042a8c0 	call	42a8c <__cxa_rethrow>
   420d4:	d9401a17 	ldw	r5,104(sp)
   420d8:	d9001517 	ldw	r4,84(sp)
   420dc:	d9400715 	stw	r5,28(sp)
   420e0:	00425fc0 	call	425fc <_ZN10__cxxabiv111__terminateEPFvvE>

000420e4 <__gxx_personality_sj0>:
   420e4:	deffd304 	addi	sp,sp,-180
   420e8:	00800134 	movhi	r2,4
   420ec:	10896004 	addi	r2,r2,9600
   420f0:	00c00134 	movhi	r3,4
   420f4:	18d92304 	addi	r3,r3,25740
   420f8:	d8801315 	stw	r2,76(sp)
   420fc:	d9002315 	stw	r4,140(sp)
   42100:	00800134 	movhi	r2,4
   42104:	10883904 	addi	r2,r2,8420
   42108:	d9000a04 	addi	r4,sp,40
   4210c:	d8801015 	stw	r2,64(sp)
   42110:	d8c01115 	stw	r3,68(sp)
   42114:	dfc02c15 	stw	ra,176(sp)
   42118:	df002b15 	stw	fp,172(sp)
   4211c:	ddc02a15 	stw	r23,168(sp)
   42120:	dec01215 	stw	sp,72(sp)
   42124:	dec01415 	stw	sp,80(sp)
   42128:	d9802515 	stw	r6,148(sp)
   4212c:	d9402415 	stw	r5,144(sp)
   42130:	d9c02615 	stw	r7,152(sp)
   42134:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   42138:	d8c02317 	ldw	r3,140(sp)
   4213c:	00800044 	movi	r2,1
   42140:	18800a26 	beq	r3,r2,4216c <__gxx_personality_sj0+0x88>
   42144:	010000c4 	movi	r4,3
   42148:	d9002215 	stw	r4,136(sp)
   4214c:	d9000a04 	addi	r4,sp,40
   42150:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   42154:	d8802217 	ldw	r2,136(sp)
   42158:	dfc02c17 	ldw	ra,176(sp)
   4215c:	df002b17 	ldw	fp,172(sp)
   42160:	ddc02a17 	ldw	r23,168(sp)
   42164:	dec02d04 	addi	sp,sp,180
   42168:	f800283a 	ret
   4216c:	d9402d17 	ldw	r5,180(sp)
   42170:	d9002517 	ldw	r4,148(sp)
   42174:	0007883a 	mov	r3,zero
   42178:	28800504 	addi	r2,r5,20
   4217c:	d8800015 	stw	r2,0(sp)
   42180:	28bff504 	addi	r2,r5,-44
   42184:	d8801a15 	stw	r2,104(sp)
   42188:	0090caf4 	movhi	r2,17195
   4218c:	108ac004 	addi	r2,r2,11008
   42190:	2080ad26 	beq	r4,r2,42448 <__gxx_personality_sj0+0x364>
   42194:	d8c02105 	stb	r3,132(sp)
   42198:	d8c02417 	ldw	r3,144(sp)
   4219c:	00800184 	movi	r2,6
   421a0:	1880281e 	bne	r3,r2,42244 <__gxx_personality_sj0+0x160>
   421a4:	d8802103 	ldbu	r2,132(sp)
   421a8:	10002626 	beq	r2,zero,42244 <__gxx_personality_sj0+0x160>
   421ac:	d9001a17 	ldw	r4,104(sp)
   421b0:	d9401a17 	ldw	r5,104(sp)
   421b4:	d8801a17 	ldw	r2,104(sp)
   421b8:	21000917 	ldw	r4,36(r4)
   421bc:	29400617 	ldw	r5,24(r5)
   421c0:	10800817 	ldw	r2,32(r2)
   421c4:	d9001d15 	stw	r4,116(sp)
   421c8:	d9401b15 	stw	r5,108(sp)
   421cc:	d8802015 	stw	r2,128(sp)
   421d0:	2000ad1e 	bne	r4,zero,42488 <__gxx_personality_sj0+0x3a4>
   421d4:	01000044 	movi	r4,1
   421d8:	00800044 	movi	r2,1
   421dc:	2080e126 	beq	r4,r2,42564 <__gxx_personality_sj0+0x480>
   421e0:	d8801b17 	ldw	r2,108(sp)
   421e4:	1000d316 	blt	r2,zero,42534 <__gxx_personality_sj0+0x450>
   421e8:	d9802d17 	ldw	r6,180(sp)
   421ec:	d9002e17 	ldw	r4,184(sp)
   421f0:	00bfffc4 	movi	r2,-1
   421f4:	000b883a 	mov	r5,zero
   421f8:	d8800b15 	stw	r2,44(sp)
   421fc:	0043be40 	call	43be4 <_Unwind_SetGR>
   42200:	d9801b17 	ldw	r6,108(sp)
   42204:	d9002e17 	ldw	r4,184(sp)
   42208:	01400044 	movi	r5,1
   4220c:	0043be40 	call	43be4 <_Unwind_SetGR>
   42210:	d9002e17 	ldw	r4,184(sp)
   42214:	d9401d17 	ldw	r5,116(sp)
   42218:	0043c200 	call	43c20 <_Unwind_SetIP>
   4221c:	010001c4 	movi	r4,7
   42220:	d9002215 	stw	r4,136(sp)
   42224:	d9000a04 	addi	r4,sp,40
   42228:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   4222c:	d8802217 	ldw	r2,136(sp)
   42230:	dfc02c17 	ldw	ra,176(sp)
   42234:	df002b17 	ldw	fp,172(sp)
   42238:	ddc02a17 	ldw	r23,168(sp)
   4223c:	dec02d04 	addi	sp,sp,180
   42240:	f800283a 	ret
   42244:	d9002e17 	ldw	r4,184(sp)
   42248:	00ffffc4 	movi	r3,-1
   4224c:	d8c00b15 	stw	r3,44(sp)
   42250:	0043c300 	call	43c30 <_Unwind_GetLanguageSpecificData>
   42254:	10007226 	beq	r2,zero,42420 <__gxx_personality_sj0+0x33c>
   42258:	d9002e17 	ldw	r4,184(sp)
   4225c:	d9800404 	addi	r6,sp,16
   42260:	100b883a 	mov	r5,r2
   42264:	d8802015 	stw	r2,128(sp)
   42268:	0041d5c0 	call	41d5c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4226c:	d9000903 	ldbu	r4,36(sp)
   42270:	d9402e17 	ldw	r5,184(sp)
   42274:	d8801e15 	stw	r2,120(sp)
   42278:	0041ccc0 	call	41ccc <_Z21base_of_encoded_valuehP15_Unwind_Context>
   4227c:	d9002e17 	ldw	r4,184(sp)
   42280:	d8800615 	stw	r2,24(sp)
   42284:	0043bfc0 	call	43bfc <_Unwind_GetIP>
   42288:	10bfffc4 	addi	r2,r2,-1
   4228c:	d8801c15 	stw	r2,112(sp)
   42290:	10006316 	blt	r2,zero,42420 <__gxx_personality_sj0+0x33c>
   42294:	10001b1e 	bne	r2,zero,42304 <__gxx_personality_sj0+0x220>
   42298:	01000044 	movi	r4,1
   4229c:	d8001f15 	stw	zero,124(sp)
   422a0:	d8001d15 	stw	zero,116(sp)
   422a4:	d8001b15 	stw	zero,108(sp)
   422a8:	d9402417 	ldw	r5,144(sp)
   422ac:	00c00044 	movi	r3,1
   422b0:	28c4703a 	and	r2,r5,r3
   422b4:	1005003a 	cmpeq	r2,r2,zero
   422b8:	10006a1e 	bne	r2,zero,42464 <__gxx_personality_sj0+0x380>
   422bc:	00800084 	movi	r2,2
   422c0:	20805726 	beq	r4,r2,42420 <__gxx_personality_sj0+0x33c>
   422c4:	d8802103 	ldbu	r2,132(sp)
   422c8:	10008626 	beq	r2,zero,424e4 <__gxx_personality_sj0+0x400>
   422cc:	d9001a17 	ldw	r4,104(sp)
   422d0:	d9401d17 	ldw	r5,116(sp)
   422d4:	d8801b17 	ldw	r2,108(sp)
   422d8:	00c00184 	movi	r3,6
   422dc:	d8c02215 	stw	r3,136(sp)
   422e0:	21400915 	stw	r5,36(r4)
   422e4:	20800615 	stw	r2,24(r4)
   422e8:	d8c01f17 	ldw	r3,124(sp)
   422ec:	d9402017 	ldw	r5,128(sp)
   422f0:	d8800017 	ldw	r2,0(sp)
   422f4:	20c00715 	stw	r3,28(r4)
   422f8:	21400815 	stw	r5,32(r4)
   422fc:	20800a15 	stw	r2,40(r4)
   42300:	003f9206 	br	4214c <__gxx_personality_sj0+0x68>
   42304:	d9001e17 	ldw	r4,120(sp)
   42308:	d9400204 	addi	r5,sp,8
   4230c:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   42310:	d9401c17 	ldw	r5,112(sp)
   42314:	1009883a 	mov	r4,r2
   42318:	297fffc4 	addi	r5,r5,-1
   4231c:	d9401c15 	stw	r5,112(sp)
   42320:	d9400104 	addi	r5,sp,4
   42324:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   42328:	d8801e15 	stw	r2,120(sp)
   4232c:	d8801c17 	ldw	r2,112(sp)
   42330:	103ff41e 	bne	r2,zero,42304 <__gxx_personality_sj0+0x220>
   42334:	d8800217 	ldw	r2,8(sp)
   42338:	d8c00117 	ldw	r3,4(sp)
   4233c:	01000044 	movi	r4,1
   42340:	1105883a 	add	r2,r2,r4
   42344:	d8801d15 	stw	r2,116(sp)
   42348:	1800541e 	bne	r3,zero,4249c <__gxx_personality_sj0+0x3b8>
   4234c:	d8001f15 	stw	zero,124(sp)
   42350:	d8c01d17 	ldw	r3,116(sp)
   42354:	18003226 	beq	r3,zero,42420 <__gxx_personality_sj0+0x33c>
   42358:	d9001f17 	ldw	r4,124(sp)
   4235c:	20007226 	beq	r4,zero,42528 <__gxx_personality_sj0+0x444>
   42360:	d9402417 	ldw	r5,144(sp)
   42364:	2880020c 	andi	r2,r5,8
   42368:	10006a1e 	bne	r2,zero,42514 <__gxx_personality_sj0+0x430>
   4236c:	d8802103 	ldbu	r2,132(sp)
   42370:	10006826 	beq	r2,zero,42514 <__gxx_personality_sj0+0x430>
   42374:	d8801a17 	ldw	r2,104(sp)
   42378:	10800017 	ldw	r2,0(r2)
   4237c:	d8801915 	stw	r2,100(sp)
   42380:	d8c01917 	ldw	r3,100(sp)
   42384:	d8001805 	stb	zero,96(sp)
   42388:	1807003a 	cmpeq	r3,r3,zero
   4238c:	d8c02715 	stw	r3,156(sp)
   42390:	00000706 	br	423b0 <__gxx_personality_sj0+0x2cc>
   42394:	01000044 	movi	r4,1
   42398:	d9001805 	stb	r4,96(sp)
   4239c:	d8800217 	ldw	r2,8(sp)
   423a0:	10005e26 	beq	r2,zero,4251c <__gxx_personality_sj0+0x438>
   423a4:	d8c01717 	ldw	r3,92(sp)
   423a8:	1885883a 	add	r2,r3,r2
   423ac:	d8801f15 	stw	r2,124(sp)
   423b0:	d9001f17 	ldw	r4,124(sp)
   423b4:	d9400104 	addi	r5,sp,4
   423b8:	0041a080 	call	41a08 <_Z12read_sleb128PKhPi>
   423bc:	1009883a 	mov	r4,r2
   423c0:	d9400204 	addi	r5,sp,8
   423c4:	d8801715 	stw	r2,92(sp)
   423c8:	0041a080 	call	41a08 <_Z12read_sleb128PKhPi>
   423cc:	d8800117 	ldw	r2,4(sp)
   423d0:	103ff026 	beq	r2,zero,42394 <__gxx_personality_sj0+0x2b0>
   423d4:	0080360e 	bge	zero,r2,424b0 <__gxx_personality_sj0+0x3cc>
   423d8:	017fffc4 	movi	r5,-1
   423dc:	d9400b15 	stw	r5,44(sp)
   423e0:	d9000404 	addi	r4,sp,16
   423e4:	100b883a 	mov	r5,r2
   423e8:	0041e5c0 	call	41e5c <_Z15get_ttype_entryP16lsda_header_infoj>
   423ec:	10000826 	beq	r2,zero,42410 <__gxx_personality_sj0+0x32c>
   423f0:	d8c02717 	ldw	r3,156(sp)
   423f4:	183fe91e 	bne	r3,zero,4239c <__gxx_personality_sj0+0x2b8>
   423f8:	d9401917 	ldw	r5,100(sp)
   423fc:	1009883a 	mov	r4,r2
   42400:	d80d883a 	mov	r6,sp
   42404:	0041a5c0 	call	41a5c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   42408:	10803fcc 	andi	r2,r2,255
   4240c:	103fe326 	beq	r2,zero,4239c <__gxx_personality_sj0+0x2b8>
   42410:	d9000117 	ldw	r4,4(sp)
   42414:	d9001b15 	stw	r4,108(sp)
   42418:	010000c4 	movi	r4,3
   4241c:	003fa206 	br	422a8 <__gxx_personality_sj0+0x1c4>
   42420:	01400204 	movi	r5,8
   42424:	d9000a04 	addi	r4,sp,40
   42428:	d9402215 	stw	r5,136(sp)
   4242c:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   42430:	d8802217 	ldw	r2,136(sp)
   42434:	dfc02c17 	ldw	ra,176(sp)
   42438:	df002b17 	ldw	fp,172(sp)
   4243c:	ddc02a17 	ldw	r23,168(sp)
   42440:	dec02d04 	addi	sp,sp,180
   42444:	f800283a 	ret
   42448:	d9402617 	ldw	r5,152(sp)
   4244c:	0091d3b4 	movhi	r2,18254
   42450:	109550c4 	addi	r2,r2,21827
   42454:	28bf4f1e 	bne	r5,r2,42194 <__gxx_personality_sj0+0xb0>
   42458:	d8802317 	ldw	r2,140(sp)
   4245c:	1007883a 	mov	r3,r2
   42460:	003f4c06 	br	42194 <__gxx_personality_sj0+0xb0>
   42464:	d9402417 	ldw	r5,144(sp)
   42468:	2880020c 	andi	r2,r5,8
   4246c:	10000826 	beq	r2,zero,42490 <__gxx_personality_sj0+0x3ac>
   42470:	20c04026 	beq	r4,r3,42574 <__gxx_personality_sj0+0x490>
   42474:	d8801b17 	ldw	r2,108(sp)
   42478:	103f5b0e 	bge	r2,zero,421e8 <__gxx_personality_sj0+0x104>
   4247c:	00800084 	movi	r2,2
   42480:	d8800b15 	stw	r2,44(sp)
   42484:	00426c80 	call	426c8 <_ZSt10unexpectedv>
   42488:	010000c4 	movi	r4,3
   4248c:	003f5206 	br	421d8 <__gxx_personality_sj0+0xf4>
   42490:	d8802103 	ldbu	r2,132(sp)
   42494:	103f501e 	bne	r2,zero,421d8 <__gxx_personality_sj0+0xf4>
   42498:	003ff506 	br	42470 <__gxx_personality_sj0+0x38c>
   4249c:	d8800817 	ldw	r2,32(sp)
   424a0:	1885883a 	add	r2,r3,r2
   424a4:	1105c83a 	sub	r2,r2,r4
   424a8:	d8801f15 	stw	r2,124(sp)
   424ac:	003fa806 	br	42350 <__gxx_personality_sj0+0x26c>
   424b0:	d9002717 	ldw	r4,156(sp)
   424b4:	20000e1e 	bne	r4,zero,424f0 <__gxx_personality_sj0+0x40c>
   424b8:	017fffc4 	movi	r5,-1
   424bc:	d9400b15 	stw	r5,44(sp)
   424c0:	d9800017 	ldw	r6,0(sp)
   424c4:	d9401917 	ldw	r5,100(sp)
   424c8:	100f883a 	mov	r7,r2
   424cc:	d9000404 	addi	r4,sp,16
   424d0:	0041ee00 	call	41ee0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   424d4:	1080005c 	xori	r2,r2,1
   424d8:	10803fcc 	andi	r2,r2,255
   424dc:	103faf26 	beq	r2,zero,4239c <__gxx_personality_sj0+0x2b8>
   424e0:	003fcb06 	br	42410 <__gxx_personality_sj0+0x32c>
   424e4:	00800184 	movi	r2,6
   424e8:	d8802215 	stw	r2,136(sp)
   424ec:	003f1706 	br	4214c <__gxx_personality_sj0+0x68>
   424f0:	d9000717 	ldw	r4,28(sp)
   424f4:	d9400304 	addi	r5,sp,12
   424f8:	2089c83a 	sub	r4,r4,r2
   424fc:	213fffc4 	addi	r4,r4,-1
   42500:	00419d80 	call	419d8 <_Z12read_uleb128PKhPj>
   42504:	d8c00317 	ldw	r3,12(sp)
   42508:	1807003a 	cmpeq	r3,r3,zero
   4250c:	1805883a 	mov	r2,r3
   42510:	003ff106 	br	424d8 <__gxx_personality_sj0+0x3f4>
   42514:	d8001915 	stw	zero,100(sp)
   42518:	003f9906 	br	42380 <__gxx_personality_sj0+0x29c>
   4251c:	d8801803 	ldbu	r2,96(sp)
   42520:	1004c03a 	cmpne	r2,r2,zero
   42524:	103fbe26 	beq	r2,zero,42420 <__gxx_personality_sj0+0x33c>
   42528:	01000084 	movi	r4,2
   4252c:	d8001b15 	stw	zero,108(sp)
   42530:	003f5d06 	br	422a8 <__gxx_personality_sj0+0x1c4>
   42534:	d9402017 	ldw	r5,128(sp)
   42538:	d9002e17 	ldw	r4,184(sp)
   4253c:	00bfffc4 	movi	r2,-1
   42540:	d9800404 	addi	r6,sp,16
   42544:	d8800b15 	stw	r2,44(sp)
   42548:	0041d5c0 	call	41d5c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   4254c:	d9000903 	ldbu	r4,36(sp)
   42550:	d9402e17 	ldw	r5,184(sp)
   42554:	0041ccc0 	call	41ccc <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42558:	d8c01a17 	ldw	r3,104(sp)
   4255c:	18800915 	stw	r2,36(r3)
   42560:	003f2106 	br	421e8 <__gxx_personality_sj0+0x104>
   42564:	d9002d17 	ldw	r4,180(sp)
   42568:	00bfffc4 	movi	r2,-1
   4256c:	d8800b15 	stw	r2,44(sp)
   42570:	00427e00 	call	427e0 <__cxa_call_terminate>
   42574:	00bfffc4 	movi	r2,-1
   42578:	d8800b15 	stw	r2,44(sp)
   4257c:	00426a00 	call	426a0 <_ZSt9terminatev>
   42580:	d9000b17 	ldw	r4,44(sp)
   42584:	d9400c17 	ldw	r5,48(sp)
   42588:	00800044 	movi	r2,1
   4258c:	d9002915 	stw	r4,164(sp)
   42590:	d9402815 	stw	r5,160(sp)
   42594:	20800626 	beq	r4,r2,425b0 <__gxx_personality_sj0+0x4cc>
   42598:	d8000b15 	stw	zero,44(sp)
   4259c:	0042bfc0 	call	42bfc <__cxa_end_catch>
   425a0:	d9002817 	ldw	r4,160(sp)
   425a4:	00bfffc4 	movi	r2,-1
   425a8:	d8800b15 	stw	r2,44(sp)
   425ac:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   425b0:	d9002817 	ldw	r4,160(sp)
   425b4:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   425b8:	d8c02917 	ldw	r3,164(sp)
   425bc:	d8c00b15 	stw	r3,44(sp)
   425c0:	00426a00 	call	426a0 <_ZSt9terminatev>

000425c4 <__cxa_get_globals_fast>:
   425c4:	d0a1d104 	addi	r2,gp,-30908
   425c8:	f800283a 	ret

000425cc <__cxa_get_globals>:
   425cc:	d0a1d104 	addi	r2,gp,-30908
   425d0:	f800283a 	ret

000425d4 <_ZSt13set_terminatePFvvE>:
   425d4:	00c00134 	movhi	r3,4
   425d8:	18dba304 	addi	r3,r3,28300
   425dc:	18800017 	ldw	r2,0(r3)
   425e0:	19000015 	stw	r4,0(r3)
   425e4:	f800283a 	ret

000425e8 <_ZSt14set_unexpectedPFvvE>:
   425e8:	00c00134 	movhi	r3,4
   425ec:	18dba404 	addi	r3,r3,28304
   425f0:	18800017 	ldw	r2,0(r3)
   425f4:	19000015 	stw	r4,0(r3)
   425f8:	f800283a 	ret

000425fc <_ZN10__cxxabiv111__terminateEPFvvE>:
   425fc:	deffed04 	addi	sp,sp,-76
   42600:	00800134 	movhi	r2,4
   42604:	10883904 	addi	r2,r2,8420
   42608:	d8800615 	stw	r2,24(sp)
   4260c:	00c00134 	movhi	r3,4
   42610:	18d92704 	addi	r3,r3,25756
   42614:	00800134 	movhi	r2,4
   42618:	10899604 	addi	r2,r2,9816
   4261c:	d9000d15 	stw	r4,52(sp)
   42620:	d809883a 	mov	r4,sp
   42624:	d8800915 	stw	r2,36(sp)
   42628:	dfc01215 	stw	ra,72(sp)
   4262c:	df001115 	stw	fp,68(sp)
   42630:	ddc01015 	stw	r23,64(sp)
   42634:	d8c00715 	stw	r3,28(sp)
   42638:	dec00815 	stw	sp,32(sp)
   4263c:	dec00a15 	stw	sp,40(sp)
   42640:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   42644:	00800084 	movi	r2,2
   42648:	d8800115 	stw	r2,4(sp)
   4264c:	d8800d17 	ldw	r2,52(sp)
   42650:	103ee83a 	callr	r2
   42654:	00445580 	call	44558 <abort>
   42658:	d8800117 	ldw	r2,4(sp)
   4265c:	d8c00217 	ldw	r3,8(sp)
   42660:	d8800f15 	stw	r2,60(sp)
   42664:	d8c00e15 	stw	r3,56(sp)
   42668:	d8c00f17 	ldw	r3,60(sp)
   4266c:	00800044 	movi	r2,1
   42670:	18800626 	beq	r3,r2,4268c <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
   42674:	d8000115 	stw	zero,4(sp)
   42678:	0042bfc0 	call	42bfc <__cxa_end_catch>
   4267c:	d9000e17 	ldw	r4,56(sp)
   42680:	00bfffc4 	movi	r2,-1
   42684:	d8800115 	stw	r2,4(sp)
   42688:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   4268c:	d9000e17 	ldw	r4,56(sp)
   42690:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   42694:	d8c00f17 	ldw	r3,60(sp)
   42698:	d8c00115 	stw	r3,4(sp)
   4269c:	00445580 	call	44558 <abort>

000426a0 <_ZSt9terminatev>:
   426a0:	00800134 	movhi	r2,4
   426a4:	109ba304 	addi	r2,r2,28300
   426a8:	11000017 	ldw	r4,0(r2)
   426ac:	deffff04 	addi	sp,sp,-4
   426b0:	dfc00015 	stw	ra,0(sp)
   426b4:	00425fc0 	call	425fc <_ZN10__cxxabiv111__terminateEPFvvE>

000426b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   426b8:	deffff04 	addi	sp,sp,-4
   426bc:	dfc00015 	stw	ra,0(sp)
   426c0:	203ee83a 	callr	r4
   426c4:	00426a00 	call	426a0 <_ZSt9terminatev>

000426c8 <_ZSt10unexpectedv>:
   426c8:	00800134 	movhi	r2,4
   426cc:	109ba404 	addi	r2,r2,28304
   426d0:	11000017 	ldw	r4,0(r2)
   426d4:	deffff04 	addi	sp,sp,-4
   426d8:	dfc00015 	stw	ra,0(sp)
   426dc:	00426b80 	call	426b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000426e0 <_Znwm>:
   426e0:	deffee04 	addi	sp,sp,-72
   426e4:	00800134 	movhi	r2,4
   426e8:	10883904 	addi	r2,r2,8420
   426ec:	d8800615 	stw	r2,24(sp)
   426f0:	00c00134 	movhi	r3,4
   426f4:	18d92b04 	addi	r3,r3,25772
   426f8:	00800134 	movhi	r2,4
   426fc:	1089ef04 	addi	r2,r2,10172
   42700:	d9000e15 	stw	r4,56(sp)
   42704:	d809883a 	mov	r4,sp
   42708:	d8800915 	stw	r2,36(sp)
   4270c:	dfc01115 	stw	ra,68(sp)
   42710:	df001015 	stw	fp,64(sp)
   42714:	ddc00f15 	stw	r23,60(sp)
   42718:	d8c00715 	stw	r3,28(sp)
   4271c:	dec00815 	stw	sp,32(sp)
   42720:	dec00a15 	stw	sp,40(sp)
   42724:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   42728:	d8800e17 	ldw	r2,56(sp)
   4272c:	10000a1e 	bne	r2,zero,42758 <_Znwm+0x78>
   42730:	00800044 	movi	r2,1
   42734:	d8800e15 	stw	r2,56(sp)
   42738:	00000706 	br	42758 <_Znwm+0x78>
   4273c:	00800134 	movhi	r2,4
   42740:	109d7304 	addi	r2,r2,30156
   42744:	10c00017 	ldw	r3,0(r2)
   42748:	18000f26 	beq	r3,zero,42788 <_Znwm+0xa8>
   4274c:	00800044 	movi	r2,1
   42750:	d8800115 	stw	r2,4(sp)
   42754:	183ee83a 	callr	r3
   42758:	d9000e17 	ldw	r4,56(sp)
   4275c:	00445840 	call	44584 <malloc>
   42760:	d8800d15 	stw	r2,52(sp)
   42764:	103ff526 	beq	r2,zero,4273c <_Znwm+0x5c>
   42768:	d809883a 	mov	r4,sp
   4276c:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   42770:	d8800d17 	ldw	r2,52(sp)
   42774:	dfc01117 	ldw	ra,68(sp)
   42778:	df001017 	ldw	fp,64(sp)
   4277c:	ddc00f17 	ldw	r23,60(sp)
   42780:	dec01204 	addi	sp,sp,72
   42784:	f800283a 	ret
   42788:	01000104 	movi	r4,4
   4278c:	00429580 	call	42958 <__cxa_allocate_exception>
   42790:	1009883a 	mov	r4,r2
   42794:	00800134 	movhi	r2,4
   42798:	10997004 	addi	r2,r2,26048
   4279c:	20800015 	stw	r2,0(r4)
   427a0:	00c00044 	movi	r3,1
   427a4:	d8c00115 	stw	r3,4(sp)
   427a8:	01400134 	movhi	r5,4
   427ac:	29597704 	addi	r5,r5,26076
   427b0:	01800134 	movhi	r6,4
   427b4:	318a3e04 	addi	r6,r6,10488
   427b8:	0042b000 	call	42b00 <__cxa_throw>
   427bc:	d8800317 	ldw	r2,12(sp)
   427c0:	00ffffc4 	movi	r3,-1
   427c4:	d9000217 	ldw	r4,8(sp)
   427c8:	10c00226 	beq	r2,r3,427d4 <_Znwm+0xf4>
   427cc:	d8c00115 	stw	r3,4(sp)
   427d0:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   427d4:	00bfffc4 	movi	r2,-1
   427d8:	d8800115 	stw	r2,4(sp)
   427dc:	0041f640 	call	41f64 <__cxa_call_unexpected>

000427e0 <__cxa_call_terminate>:
   427e0:	defffe04 	addi	sp,sp,-8
   427e4:	dc000015 	stw	r16,0(sp)
   427e8:	dfc00115 	stw	ra,4(sp)
   427ec:	2021883a 	mov	r16,r4
   427f0:	20000626 	beq	r4,zero,4280c <__cxa_call_terminate+0x2c>
   427f4:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   427f8:	80c00017 	ldw	r3,0(r16)
   427fc:	0090caf4 	movhi	r2,17195
   42800:	108ac004 	addi	r2,r2,11008
   42804:	81000117 	ldw	r4,4(r16)
   42808:	18800126 	beq	r3,r2,42810 <__cxa_call_terminate+0x30>
   4280c:	00426a00 	call	426a0 <_ZSt9terminatev>
   42810:	0091d3b4 	movhi	r2,18254
   42814:	109550c4 	addi	r2,r2,21827
   42818:	20bffc1e 	bne	r4,r2,4280c <__cxa_call_terminate+0x2c>
   4281c:	813ff817 	ldw	r4,-32(r16)
   42820:	00425fc0 	call	425fc <_ZN10__cxxabiv111__terminateEPFvvE>

00042824 <_ZNKSt9exception4whatEv>:
   42824:	20800017 	ldw	r2,0(r4)
   42828:	10ffff17 	ldw	r3,-4(r2)
   4282c:	18800117 	ldw	r2,4(r3)
   42830:	f800283a 	ret

00042834 <_ZNSt9exceptionD0Ev>:
   42834:	00800134 	movhi	r2,4
   42838:	10995f04 	addi	r2,r2,25980
   4283c:	20800015 	stw	r2,0(r4)
   42840:	00419cc1 	jmpi	419cc <_ZdlPv>

00042844 <_ZNSt9exceptionD1Ev>:
   42844:	00800134 	movhi	r2,4
   42848:	10995f04 	addi	r2,r2,25980
   4284c:	20800015 	stw	r2,0(r4)
   42850:	f800283a 	ret

00042854 <_ZNSt9exceptionD2Ev>:
   42854:	00800134 	movhi	r2,4
   42858:	10995f04 	addi	r2,r2,25980
   4285c:	20800015 	stw	r2,0(r4)
   42860:	f800283a 	ret

00042864 <_ZNSt13bad_exceptionD0Ev>:
   42864:	defffe04 	addi	sp,sp,-8
   42868:	00800134 	movhi	r2,4
   4286c:	10995a04 	addi	r2,r2,25960
   42870:	dc400015 	stw	r17,0(sp)
   42874:	20800015 	stw	r2,0(r4)
   42878:	2023883a 	mov	r17,r4
   4287c:	dfc00115 	stw	ra,4(sp)
   42880:	00428540 	call	42854 <_ZNSt9exceptionD2Ev>
   42884:	8809883a 	mov	r4,r17
   42888:	dfc00117 	ldw	ra,4(sp)
   4288c:	dc400017 	ldw	r17,0(sp)
   42890:	dec00204 	addi	sp,sp,8
   42894:	00419cc1 	jmpi	419cc <_ZdlPv>

00042898 <_ZNSt13bad_exceptionD1Ev>:
   42898:	00800134 	movhi	r2,4
   4289c:	10995a04 	addi	r2,r2,25960
   428a0:	20800015 	stw	r2,0(r4)
   428a4:	00428541 	jmpi	42854 <_ZNSt9exceptionD2Ev>

000428a8 <_ZNSt13bad_exceptionD2Ev>:
   428a8:	00800134 	movhi	r2,4
   428ac:	10995a04 	addi	r2,r2,25960
   428b0:	20800015 	stw	r2,0(r4)
   428b4:	00428541 	jmpi	42854 <_ZNSt9exceptionD2Ev>

000428b8 <_ZSt15set_new_handlerPFvvE>:
   428b8:	d0a1d317 	ldw	r2,-30900(gp)
   428bc:	d121d315 	stw	r4,-30900(gp)
   428c0:	f800283a 	ret

000428c4 <_ZNSt9bad_allocD0Ev>:
   428c4:	defffe04 	addi	sp,sp,-8
   428c8:	00800134 	movhi	r2,4
   428cc:	10997004 	addi	r2,r2,26048
   428d0:	dc400015 	stw	r17,0(sp)
   428d4:	20800015 	stw	r2,0(r4)
   428d8:	2023883a 	mov	r17,r4
   428dc:	dfc00115 	stw	ra,4(sp)
   428e0:	00428540 	call	42854 <_ZNSt9exceptionD2Ev>
   428e4:	8809883a 	mov	r4,r17
   428e8:	dfc00117 	ldw	ra,4(sp)
   428ec:	dc400017 	ldw	r17,0(sp)
   428f0:	dec00204 	addi	sp,sp,8
   428f4:	00419cc1 	jmpi	419cc <_ZdlPv>

000428f8 <_ZNSt9bad_allocD1Ev>:
   428f8:	00800134 	movhi	r2,4
   428fc:	10997004 	addi	r2,r2,26048
   42900:	20800015 	stw	r2,0(r4)
   42904:	00428541 	jmpi	42854 <_ZNSt9exceptionD2Ev>

00042908 <_ZNSt9bad_allocD2Ev>:
   42908:	00800134 	movhi	r2,4
   4290c:	10997004 	addi	r2,r2,26048
   42910:	20800015 	stw	r2,0(r4)
   42914:	00428541 	jmpi	42854 <_ZNSt9exceptionD2Ev>

00042918 <__cxa_free_exception>:
   42918:	2007883a 	mov	r3,r4
   4291c:	00800134 	movhi	r2,4
   42920:	109d8404 	addi	r2,r2,30224
   42924:	213ff004 	addi	r4,r4,-64
   42928:	11420004 	addi	r5,r2,2048
   4292c:	18800336 	bltu	r3,r2,4293c <__cxa_free_exception+0x24>
   42930:	1885c83a 	sub	r2,r3,r2
   42934:	1004d27a 	srli	r2,r2,9
   42938:	19400136 	bltu	r3,r5,42940 <__cxa_free_exception+0x28>
   4293c:	00445701 	jmpi	44570 <free>
   42940:	00ffff84 	movi	r3,-2
   42944:	1886183a 	rol	r3,r3,r2
   42948:	d0a1d417 	ldw	r2,-30896(gp)
   4294c:	10c4703a 	and	r2,r2,r3
   42950:	d0a1d415 	stw	r2,-30896(gp)
   42954:	f800283a 	ret

00042958 <__cxa_allocate_exception>:
   42958:	deffed04 	addi	sp,sp,-76
   4295c:	00800134 	movhi	r2,4
   42960:	10883904 	addi	r2,r2,8420
   42964:	21001004 	addi	r4,r4,64
   42968:	00c00134 	movhi	r3,4
   4296c:	18d93004 	addi	r3,r3,25792
   42970:	d8800615 	stw	r2,24(sp)
   42974:	d9000d15 	stw	r4,52(sp)
   42978:	00800134 	movhi	r2,4
   4297c:	108a9a04 	addi	r2,r2,10856
   42980:	d809883a 	mov	r4,sp
   42984:	dfc01215 	stw	ra,72(sp)
   42988:	d8c00715 	stw	r3,28(sp)
   4298c:	d8800915 	stw	r2,36(sp)
   42990:	df001115 	stw	fp,68(sp)
   42994:	ddc01015 	stw	r23,64(sp)
   42998:	dec00815 	stw	sp,32(sp)
   4299c:	dec00a15 	stw	sp,40(sp)
   429a0:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   429a4:	d9000d17 	ldw	r4,52(sp)
   429a8:	00445840 	call	44584 <malloc>
   429ac:	d8800e15 	stw	r2,56(sp)
   429b0:	1000171e 	bne	r2,zero,42a10 <__cxa_allocate_exception+0xb8>
   429b4:	d8c00d17 	ldw	r3,52(sp)
   429b8:	00808004 	movi	r2,512
   429bc:	d1e1d417 	ldw	r7,-30896(gp)
   429c0:	10c02636 	bltu	r2,r3,42a5c <__cxa_allocate_exception+0x104>
   429c4:	3807883a 	mov	r3,r7
   429c8:	01400044 	movi	r5,1
   429cc:	1944703a 	and	r2,r3,r5
   429d0:	0009883a 	mov	r4,zero
   429d4:	01800104 	movi	r6,4
   429d8:	10000526 	beq	r2,zero,429f0 <__cxa_allocate_exception+0x98>
   429dc:	2149883a 	add	r4,r4,r5
   429e0:	21801e26 	beq	r4,r6,42a5c <__cxa_allocate_exception+0x104>
   429e4:	1806d07a 	srli	r3,r3,1
   429e8:	1944703a 	and	r2,r3,r5
   429ec:	103ffb1e 	bne	r2,zero,429dc <__cxa_allocate_exception+0x84>
   429f0:	2904983a 	sll	r2,r5,r4
   429f4:	2008927a 	slli	r4,r4,9
   429f8:	00c00134 	movhi	r3,4
   429fc:	18dd8404 	addi	r3,r3,30224
   42a00:	3884b03a 	or	r2,r7,r2
   42a04:	20c9883a 	add	r4,r4,r3
   42a08:	d9000e15 	stw	r4,56(sp)
   42a0c:	d0a1d415 	stw	r2,-30896(gp)
   42a10:	00425cc0 	call	425cc <__cxa_get_globals>
   42a14:	10c00117 	ldw	r3,4(r2)
   42a18:	d9000e17 	ldw	r4,56(sp)
   42a1c:	000b883a 	mov	r5,zero
   42a20:	18c00044 	addi	r3,r3,1
   42a24:	10c00115 	stw	r3,4(r2)
   42a28:	01801004 	movi	r6,64
   42a2c:	0044cd80 	call	44cd8 <memset>
   42a30:	d8800e17 	ldw	r2,56(sp)
   42a34:	d809883a 	mov	r4,sp
   42a38:	10801004 	addi	r2,r2,64
   42a3c:	d8800f15 	stw	r2,60(sp)
   42a40:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   42a44:	d8800f17 	ldw	r2,60(sp)
   42a48:	dfc01217 	ldw	ra,72(sp)
   42a4c:	df001117 	ldw	fp,68(sp)
   42a50:	ddc01017 	ldw	r23,64(sp)
   42a54:	dec01304 	addi	sp,sp,76
   42a58:	f800283a 	ret
   42a5c:	00800044 	movi	r2,1
   42a60:	d8800115 	stw	r2,4(sp)
   42a64:	00426a00 	call	426a0 <_ZSt9terminatev>
   42a68:	d8800317 	ldw	r2,12(sp)
   42a6c:	00ffffc4 	movi	r3,-1
   42a70:	d9000217 	ldw	r4,8(sp)
   42a74:	10c00226 	beq	r2,r3,42a80 <__cxa_allocate_exception+0x128>
   42a78:	d8c00115 	stw	r3,4(sp)
   42a7c:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   42a80:	00bfffc4 	movi	r2,-1
   42a84:	d8800115 	stw	r2,4(sp)
   42a88:	0041f640 	call	41f64 <__cxa_call_unexpected>

00042a8c <__cxa_rethrow>:
   42a8c:	defffe04 	addi	sp,sp,-8
   42a90:	dc400015 	stw	r17,0(sp)
   42a94:	dfc00115 	stw	ra,4(sp)
   42a98:	00425cc0 	call	425cc <__cxa_get_globals>
   42a9c:	100b883a 	mov	r5,r2
   42aa0:	10800117 	ldw	r2,4(r2)
   42aa4:	2c400017 	ldw	r17,0(r5)
   42aa8:	10800044 	addi	r2,r2,1
   42aac:	28800115 	stw	r2,4(r5)
   42ab0:	88000b26 	beq	r17,zero,42ae0 <__cxa_rethrow+0x54>
   42ab4:	88c00b17 	ldw	r3,44(r17)
   42ab8:	0090caf4 	movhi	r2,17195
   42abc:	108ac004 	addi	r2,r2,11008
   42ac0:	89000c17 	ldw	r4,48(r17)
   42ac4:	18800726 	beq	r3,r2,42ae4 <__cxa_rethrow+0x58>
   42ac8:	28000015 	stw	zero,0(r5)
   42acc:	8c400b04 	addi	r17,r17,44
   42ad0:	8809883a 	mov	r4,r17
   42ad4:	004408c0 	call	4408c <_Unwind_SjLj_Resume_or_Rethrow>
   42ad8:	8809883a 	mov	r4,r17
   42adc:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   42ae0:	00426a00 	call	426a0 <_ZSt9terminatev>
   42ae4:	0091d3b4 	movhi	r2,18254
   42ae8:	109550c4 	addi	r2,r2,21827
   42aec:	20bff61e 	bne	r4,r2,42ac8 <__cxa_rethrow+0x3c>
   42af0:	88800517 	ldw	r2,20(r17)
   42af4:	0085c83a 	sub	r2,zero,r2
   42af8:	88800515 	stw	r2,20(r17)
   42afc:	003ff306 	br	42acc <__cxa_rethrow+0x40>

00042b00 <__cxa_throw>:
   42b00:	00800134 	movhi	r2,4
   42b04:	109ba404 	addi	r2,r2,28304
   42b08:	00c00134 	movhi	r3,4
   42b0c:	18dba304 	addi	r3,r3,28300
   42b10:	12000017 	ldw	r8,0(r2)
   42b14:	19c00017 	ldw	r7,0(r3)
   42b18:	defffe04 	addi	sp,sp,-8
   42b1c:	213ff004 	addi	r4,r4,-64
   42b20:	dfc00115 	stw	ra,4(sp)
   42b24:	dc400015 	stw	r17,0(sp)
   42b28:	0090caf4 	movhi	r2,17195
   42b2c:	108ac004 	addi	r2,r2,11008
   42b30:	20800b15 	stw	r2,44(r4)
   42b34:	00d1d3b4 	movhi	r3,18254
   42b38:	18d550c4 	addi	r3,r3,21827
   42b3c:	24400b04 	addi	r17,r4,44
   42b40:	00800134 	movhi	r2,4
   42b44:	108add04 	addi	r2,r2,11124
   42b48:	21400015 	stw	r5,0(r4)
   42b4c:	21800115 	stw	r6,4(r4)
   42b50:	22000215 	stw	r8,8(r4)
   42b54:	21c00315 	stw	r7,12(r4)
   42b58:	20c00c15 	stw	r3,48(r4)
   42b5c:	20800d15 	stw	r2,52(r4)
   42b60:	8809883a 	mov	r4,r17
   42b64:	0043ec40 	call	43ec4 <_Unwind_SjLj_RaiseException>
   42b68:	8809883a 	mov	r4,r17
   42b6c:	0042ca00 	call	42ca0 <__cxa_begin_catch>
   42b70:	00426a00 	call	426a0 <_ZSt9terminatev>

00042b74 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   42b74:	defffe04 	addi	sp,sp,-8
   42b78:	00800044 	movi	r2,1
   42b7c:	dfc00115 	stw	ra,4(sp)
   42b80:	dc000015 	stw	r16,0(sp)
   42b84:	28fff504 	addi	r3,r5,-44
   42b88:	11001036 	bltu	r2,r4,42bcc <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
   42b8c:	18800117 	ldw	r2,4(r3)
   42b90:	10000826 	beq	r2,zero,42bb4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
   42b94:	2c000504 	addi	r16,r5,20
   42b98:	8009883a 	mov	r4,r16
   42b9c:	103ee83a 	callr	r2
   42ba0:	8009883a 	mov	r4,r16
   42ba4:	dfc00117 	ldw	ra,4(sp)
   42ba8:	dc000017 	ldw	r16,0(sp)
   42bac:	dec00204 	addi	sp,sp,8
   42bb0:	00429181 	jmpi	42918 <__cxa_free_exception>
   42bb4:	2c000504 	addi	r16,r5,20
   42bb8:	8009883a 	mov	r4,r16
   42bbc:	dfc00117 	ldw	ra,4(sp)
   42bc0:	dc000017 	ldw	r16,0(sp)
   42bc4:	dec00204 	addi	sp,sp,8
   42bc8:	00429181 	jmpi	42918 <__cxa_free_exception>
   42bcc:	19000317 	ldw	r4,12(r3)
   42bd0:	00425fc0 	call	425fc <_ZN10__cxxabiv111__terminateEPFvvE>

00042bd4 <__cxa_get_exception_ptr>:
   42bd4:	20bfff17 	ldw	r2,-4(r4)
   42bd8:	f800283a 	ret

00042bdc <_ZSt18uncaught_exceptionv>:
   42bdc:	deffff04 	addi	sp,sp,-4
   42be0:	dfc00015 	stw	ra,0(sp)
   42be4:	00425cc0 	call	425cc <__cxa_get_globals>
   42be8:	10800117 	ldw	r2,4(r2)
   42bec:	1004c03a 	cmpne	r2,r2,zero
   42bf0:	dfc00017 	ldw	ra,0(sp)
   42bf4:	dec00104 	addi	sp,sp,4
   42bf8:	f800283a 	ret

00042bfc <__cxa_end_catch>:
   42bfc:	deffff04 	addi	sp,sp,-4
   42c00:	dfc00015 	stw	ra,0(sp)
   42c04:	00425c40 	call	425c4 <__cxa_get_globals_fast>
   42c08:	11000017 	ldw	r4,0(r2)
   42c0c:	1007883a 	mov	r3,r2
   42c10:	20001326 	beq	r4,zero,42c60 <__cxa_end_catch+0x64>
   42c14:	21400b17 	ldw	r5,44(r4)
   42c18:	0090caf4 	movhi	r2,17195
   42c1c:	108ac004 	addi	r2,r2,11008
   42c20:	21800c17 	ldw	r6,48(r4)
   42c24:	28800526 	beq	r5,r2,42c3c <__cxa_end_catch+0x40>
   42c28:	21000b04 	addi	r4,r4,44
   42c2c:	18000015 	stw	zero,0(r3)
   42c30:	dfc00017 	ldw	ra,0(sp)
   42c34:	dec00104 	addi	sp,sp,4
   42c38:	0043d5c1 	jmpi	43d5c <_Unwind_DeleteException>
   42c3c:	0091d3b4 	movhi	r2,18254
   42c40:	109550c4 	addi	r2,r2,21827
   42c44:	30bff81e 	bne	r6,r2,42c28 <__cxa_end_catch+0x2c>
   42c48:	20800517 	ldw	r2,20(r4)
   42c4c:	10000e16 	blt	r2,zero,42c88 <__cxa_end_catch+0x8c>
   42c50:	117fffc4 	addi	r5,r2,-1
   42c54:	28000526 	beq	r5,zero,42c6c <__cxa_end_catch+0x70>
   42c58:	28000a16 	blt	r5,zero,42c84 <__cxa_end_catch+0x88>
   42c5c:	21400515 	stw	r5,20(r4)
   42c60:	dfc00017 	ldw	ra,0(sp)
   42c64:	dec00104 	addi	sp,sp,4
   42c68:	f800283a 	ret
   42c6c:	20800417 	ldw	r2,16(r4)
   42c70:	21000b04 	addi	r4,r4,44
   42c74:	18800015 	stw	r2,0(r3)
   42c78:	dfc00017 	ldw	ra,0(sp)
   42c7c:	dec00104 	addi	sp,sp,4
   42c80:	0043d5c1 	jmpi	43d5c <_Unwind_DeleteException>
   42c84:	00426a00 	call	426a0 <_ZSt9terminatev>
   42c88:	11400044 	addi	r5,r2,1
   42c8c:	283ff31e 	bne	r5,zero,42c5c <__cxa_end_catch+0x60>
   42c90:	20800417 	ldw	r2,16(r4)
   42c94:	21400515 	stw	r5,20(r4)
   42c98:	18800015 	stw	r2,0(r3)
   42c9c:	003ff006 	br	42c60 <__cxa_end_catch+0x64>

00042ca0 <__cxa_begin_catch>:
   42ca0:	deffee04 	addi	sp,sp,-72
   42ca4:	00800134 	movhi	r2,4
   42ca8:	10883904 	addi	r2,r2,8420
   42cac:	00c00134 	movhi	r3,4
   42cb0:	18d93404 	addi	r3,r3,25808
   42cb4:	d8800615 	stw	r2,24(sp)
   42cb8:	d9000e15 	stw	r4,56(sp)
   42cbc:	00800134 	movhi	r2,4
   42cc0:	108b6504 	addi	r2,r2,11668
   42cc4:	d809883a 	mov	r4,sp
   42cc8:	d8c00715 	stw	r3,28(sp)
   42ccc:	dfc01115 	stw	ra,68(sp)
   42cd0:	d8800915 	stw	r2,36(sp)
   42cd4:	df001015 	stw	fp,64(sp)
   42cd8:	ddc00f15 	stw	r23,60(sp)
   42cdc:	dec00815 	stw	sp,32(sp)
   42ce0:	dec00a15 	stw	sp,40(sp)
   42ce4:	0043b9c0 	call	43b9c <_Unwind_SjLj_Register>
   42ce8:	00425cc0 	call	425cc <__cxa_get_globals>
   42cec:	100d883a 	mov	r6,r2
   42cf0:	d8800e17 	ldw	r2,56(sp)
   42cf4:	31c00017 	ldw	r7,0(r6)
   42cf8:	117ff504 	addi	r5,r2,-44
   42cfc:	28c00b17 	ldw	r3,44(r5)
   42d00:	0090caf4 	movhi	r2,17195
   42d04:	108ac004 	addi	r2,r2,11008
   42d08:	29000c17 	ldw	r4,48(r5)
   42d0c:	18800b26 	beq	r3,r2,42d3c <__cxa_begin_catch+0x9c>
   42d10:	38001d1e 	bne	r7,zero,42d88 <__cxa_begin_catch+0xe8>
   42d14:	d8000d15 	stw	zero,52(sp)
   42d18:	31400015 	stw	r5,0(r6)
   42d1c:	d809883a 	mov	r4,sp
   42d20:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   42d24:	d8800d17 	ldw	r2,52(sp)
   42d28:	dfc01117 	ldw	ra,68(sp)
   42d2c:	df001017 	ldw	fp,64(sp)
   42d30:	ddc00f17 	ldw	r23,60(sp)
   42d34:	dec01204 	addi	sp,sp,72
   42d38:	f800283a 	ret
   42d3c:	0091d3b4 	movhi	r2,18254
   42d40:	109550c4 	addi	r2,r2,21827
   42d44:	20bff21e 	bne	r4,r2,42d10 <__cxa_begin_catch+0x70>
   42d48:	28c00517 	ldw	r3,20(r5)
   42d4c:	18000b16 	blt	r3,zero,42d7c <__cxa_begin_catch+0xdc>
   42d50:	18800044 	addi	r2,r3,1
   42d54:	28800515 	stw	r2,20(r5)
   42d58:	30800117 	ldw	r2,4(r6)
   42d5c:	10bfffc4 	addi	r2,r2,-1
   42d60:	30800115 	stw	r2,4(r6)
   42d64:	39400226 	beq	r7,r5,42d70 <__cxa_begin_catch+0xd0>
   42d68:	29c00415 	stw	r7,16(r5)
   42d6c:	31400015 	stw	r5,0(r6)
   42d70:	29400a17 	ldw	r5,40(r5)
   42d74:	d9400d15 	stw	r5,52(sp)
   42d78:	003fe806 	br	42d1c <__cxa_begin_catch+0x7c>
   42d7c:	00800044 	movi	r2,1
   42d80:	10c5c83a 	sub	r2,r2,r3
   42d84:	003ff306 	br	42d54 <__cxa_begin_catch+0xb4>
   42d88:	00800044 	movi	r2,1
   42d8c:	d8800115 	stw	r2,4(sp)
   42d90:	00426a00 	call	426a0 <_ZSt9terminatev>
   42d94:	d8800317 	ldw	r2,12(sp)
   42d98:	00ffffc4 	movi	r3,-1
   42d9c:	d9000217 	ldw	r4,8(sp)
   42da0:	10c00226 	beq	r2,r3,42dac <__cxa_begin_catch+0x10c>
   42da4:	d8c00115 	stw	r3,4(sp)
   42da8:	0043e680 	call	43e68 <_Unwind_SjLj_Resume>
   42dac:	00bfffc4 	movi	r2,-1
   42db0:	d8800115 	stw	r2,4(sp)
   42db4:	0041f640 	call	41f64 <__cxa_call_unexpected>

00042db8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   42db8:	20c00017 	ldw	r3,0(r4)
   42dbc:	defffa04 	addi	sp,sp,-24
   42dc0:	dc000415 	stw	r16,16(sp)
   42dc4:	1a000617 	ldw	r8,24(r3)
   42dc8:	3021883a 	mov	r16,r6
   42dcc:	31800017 	ldw	r6,0(r6)
   42dd0:	00800404 	movi	r2,16
   42dd4:	dfc00515 	stw	ra,20(sp)
   42dd8:	d8800215 	stw	r2,8(sp)
   42ddc:	d8000015 	stw	zero,0(sp)
   42de0:	d8000115 	stw	zero,4(sp)
   42de4:	d8000315 	stw	zero,12(sp)
   42de8:	d80f883a 	mov	r7,sp
   42dec:	403ee83a 	callr	r8
   42df0:	d8800117 	ldw	r2,4(sp)
   42df4:	00c00184 	movi	r3,6
   42df8:	0009883a 	mov	r4,zero
   42dfc:	1080018c 	andi	r2,r2,6
   42e00:	10c0031e 	bne	r2,r3,42e10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
   42e04:	d8800017 	ldw	r2,0(sp)
   42e08:	01000044 	movi	r4,1
   42e0c:	80800015 	stw	r2,0(r16)
   42e10:	2005883a 	mov	r2,r4
   42e14:	dfc00517 	ldw	ra,20(sp)
   42e18:	dc000417 	ldw	r16,16(sp)
   42e1c:	dec00604 	addi	sp,sp,24
   42e20:	f800283a 	ret

00042e24 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   42e24:	d8800017 	ldw	r2,0(sp)
   42e28:	00c00184 	movi	r3,6
   42e2c:	1180021e 	bne	r2,r6,42e38 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
   42e30:	1805883a 	mov	r2,r3
   42e34:	f800283a 	ret
   42e38:	00c00044 	movi	r3,1
   42e3c:	1805883a 	mov	r2,r3
   42e40:	f800283a 	ret

00042e44 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   42e44:	defffe04 	addi	sp,sp,-8
   42e48:	00800134 	movhi	r2,4
   42e4c:	10997c04 	addi	r2,r2,26096
   42e50:	dc400015 	stw	r17,0(sp)
   42e54:	20800015 	stw	r2,0(r4)
   42e58:	2023883a 	mov	r17,r4
   42e5c:	dfc00115 	stw	ra,4(sp)
   42e60:	00431840 	call	43184 <_ZNSt9type_infoD2Ev>
   42e64:	8809883a 	mov	r4,r17
   42e68:	dfc00117 	ldw	ra,4(sp)
   42e6c:	dc400017 	ldw	r17,0(sp)
   42e70:	dec00204 	addi	sp,sp,8
   42e74:	00419cc1 	jmpi	419cc <_ZdlPv>

00042e78 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   42e78:	00800134 	movhi	r2,4
   42e7c:	10997c04 	addi	r2,r2,26096
   42e80:	20800015 	stw	r2,0(r4)
   42e84:	00431841 	jmpi	43184 <_ZNSt9type_infoD2Ev>

00042e88 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   42e88:	00800134 	movhi	r2,4
   42e8c:	10997c04 	addi	r2,r2,26096
   42e90:	20800015 	stw	r2,0(r4)
   42e94:	00431841 	jmpi	43184 <_ZNSt9type_infoD2Ev>

00042e98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   42e98:	2811883a 	mov	r8,r5
   42e9c:	20c00117 	ldw	r3,4(r4)
   42ea0:	40800117 	ldw	r2,4(r8)
   42ea4:	deffff04 	addi	sp,sp,-4
   42ea8:	dfc00015 	stw	ra,0(sp)
   42eac:	200b883a 	mov	r5,r4
   42eb0:	02400044 	movi	r9,1
   42eb4:	18800426 	beq	r3,r2,42ec8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
   42eb8:	008000c4 	movi	r2,3
   42ebc:	4009883a 	mov	r4,r8
   42ec0:	0013883a 	mov	r9,zero
   42ec4:	11c0042e 	bgeu	r2,r7,42ed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
   42ec8:	4805883a 	mov	r2,r9
   42ecc:	dfc00017 	ldw	ra,0(sp)
   42ed0:	dec00104 	addi	sp,sp,4
   42ed4:	f800283a 	ret
   42ed8:	40800017 	ldw	r2,0(r8)
   42edc:	10c00517 	ldw	r3,20(r2)
   42ee0:	183ee83a 	callr	r3
   42ee4:	12403fcc 	andi	r9,r2,255
   42ee8:	4805883a 	mov	r2,r9
   42eec:	dfc00017 	ldw	ra,0(sp)
   42ef0:	dec00104 	addi	sp,sp,4
   42ef4:	f800283a 	ret

00042ef8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   42ef8:	20c00117 	ldw	r3,4(r4)
   42efc:	28800117 	ldw	r2,4(r5)
   42f00:	0009883a 	mov	r4,zero
   42f04:	1880061e 	bne	r3,r2,42f20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
   42f08:	00800184 	movi	r2,6
   42f0c:	38800115 	stw	r2,4(r7)
   42f10:	00800204 	movi	r2,8
   42f14:	39800015 	stw	r6,0(r7)
   42f18:	38800315 	stw	r2,12(r7)
   42f1c:	01000044 	movi	r4,1
   42f20:	2005883a 	mov	r2,r4
   42f24:	f800283a 	ret

00042f28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   42f28:	da000017 	ldw	r8,0(sp)
   42f2c:	d8800217 	ldw	r2,8(sp)
   42f30:	d9400317 	ldw	r5,12(sp)
   42f34:	40800926 	beq	r8,r2,42f5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
   42f38:	21000117 	ldw	r4,4(r4)
   42f3c:	38800117 	ldw	r2,4(r7)
   42f40:	2080041e 	bne	r4,r2,42f54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
   42f44:	00800044 	movi	r2,1
   42f48:	28800315 	stw	r2,12(r5)
   42f4c:	2a000015 	stw	r8,0(r5)
   42f50:	29800115 	stw	r6,4(r5)
   42f54:	0005883a 	mov	r2,zero
   42f58:	f800283a 	ret
   42f5c:	d8800117 	ldw	r2,4(sp)
   42f60:	21000117 	ldw	r4,4(r4)
   42f64:	10c00117 	ldw	r3,4(r2)
   42f68:	20fff41e 	bne	r4,r3,42f3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   42f6c:	29800215 	stw	r6,8(r5)
   42f70:	003ff806 	br	42f54 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

00042f74 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   42f74:	defffb04 	addi	sp,sp,-20
   42f78:	dd400315 	stw	r21,12(sp)
   42f7c:	dcc00215 	stw	r19,8(sp)
   42f80:	dc400115 	stw	r17,4(sp)
   42f84:	dc000015 	stw	r16,0(sp)
   42f88:	2823883a 	mov	r17,r5
   42f8c:	3027883a 	mov	r19,r6
   42f90:	382b883a 	mov	r21,r7
   42f94:	dfc00415 	stw	ra,16(sp)
   42f98:	2021883a 	mov	r16,r4
   42f9c:	0042ef80 	call	42ef8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   42fa0:	10803fcc 	andi	r2,r2,255
   42fa4:	880b883a 	mov	r5,r17
   42fa8:	980d883a 	mov	r6,r19
   42fac:	a80f883a 	mov	r7,r21
   42fb0:	00c00044 	movi	r3,1
   42fb4:	1000051e 	bne	r2,zero,42fcc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
   42fb8:	81000217 	ldw	r4,8(r16)
   42fbc:	20800017 	ldw	r2,0(r4)
   42fc0:	10c00617 	ldw	r3,24(r2)
   42fc4:	183ee83a 	callr	r3
   42fc8:	10c03fcc 	andi	r3,r2,255
   42fcc:	1805883a 	mov	r2,r3
   42fd0:	dfc00417 	ldw	ra,16(sp)
   42fd4:	dd400317 	ldw	r21,12(sp)
   42fd8:	dcc00217 	ldw	r19,8(sp)
   42fdc:	dc400117 	ldw	r17,4(sp)
   42fe0:	dc000017 	ldw	r16,0(sp)
   42fe4:	dec00504 	addi	sp,sp,20
   42fe8:	f800283a 	ret

00042fec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   42fec:	defffe04 	addi	sp,sp,-8
   42ff0:	00800134 	movhi	r2,4
   42ff4:	10999304 	addi	r2,r2,26188
   42ff8:	dc400015 	stw	r17,0(sp)
   42ffc:	20800015 	stw	r2,0(r4)
   43000:	2023883a 	mov	r17,r4
   43004:	dfc00115 	stw	ra,4(sp)
   43008:	0042e880 	call	42e88 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   4300c:	8809883a 	mov	r4,r17
   43010:	dfc00117 	ldw	ra,4(sp)
   43014:	dc400017 	ldw	r17,0(sp)
   43018:	dec00204 	addi	sp,sp,8
   4301c:	00419cc1 	jmpi	419cc <_ZdlPv>

00043020 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   43020:	00800134 	movhi	r2,4
   43024:	10999304 	addi	r2,r2,26188
   43028:	20800015 	stw	r2,0(r4)
   4302c:	0042e881 	jmpi	42e88 <_ZN10__cxxabiv117__class_type_infoD2Ev>

00043030 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   43030:	00800134 	movhi	r2,4
   43034:	10999304 	addi	r2,r2,26188
   43038:	20800015 	stw	r2,0(r4)
   4303c:	0042e881 	jmpi	42e88 <_ZN10__cxxabiv117__class_type_infoD2Ev>

00043040 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   43040:	da400017 	ldw	r9,0(sp)
   43044:	2011883a 	mov	r8,r4
   43048:	49800526 	beq	r9,r6,43060 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
   4304c:	41000217 	ldw	r4,8(r8)
   43050:	20800017 	ldw	r2,0(r4)
   43054:	da400015 	stw	r9,0(sp)
   43058:	10c00817 	ldw	r3,32(r2)
   4305c:	1800683a 	jmp	r3
   43060:	39000117 	ldw	r4,4(r7)
   43064:	40c00117 	ldw	r3,4(r8)
   43068:	00800184 	movi	r2,6
   4306c:	193ff71e 	bne	r3,r4,4304c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
   43070:	f800283a 	ret

00043074 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   43074:	20c00117 	ldw	r3,4(r4)
   43078:	38800117 	ldw	r2,4(r7)
   4307c:	defffb04 	addi	sp,sp,-20
   43080:	dfc00415 	stw	ra,16(sp)
   43084:	da000517 	ldw	r8,20(sp)
   43088:	dac00617 	ldw	r11,24(sp)
   4308c:	da400717 	ldw	r9,28(sp)
   43090:	da800817 	ldw	r10,32(sp)
   43094:	18800c1e 	bne	r3,r2,430c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   43098:	51800115 	stw	r6,4(r10)
   4309c:	52000015 	stw	r8,0(r10)
   430a0:	28001c16 	blt	r5,zero,43114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
   430a4:	4145883a 	add	r2,r8,r5
   430a8:	48801e26 	beq	r9,r2,43124 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
   430ac:	00800044 	movi	r2,1
   430b0:	0007883a 	mov	r3,zero
   430b4:	50800315 	stw	r2,12(r10)
   430b8:	1805883a 	mov	r2,r3
   430bc:	dfc00417 	ldw	ra,16(sp)
   430c0:	dec00504 	addi	sp,sp,20
   430c4:	f800283a 	ret
   430c8:	42400d26 	beq	r8,r9,43100 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
   430cc:	21000217 	ldw	r4,8(r4)
   430d0:	20800017 	ldw	r2,0(r4)
   430d4:	da000015 	stw	r8,0(sp)
   430d8:	dac00115 	stw	r11,4(sp)
   430dc:	da400215 	stw	r9,8(sp)
   430e0:	da800315 	stw	r10,12(sp)
   430e4:	10c00717 	ldw	r3,28(r2)
   430e8:	183ee83a 	callr	r3
   430ec:	10c03fcc 	andi	r3,r2,255
   430f0:	1805883a 	mov	r2,r3
   430f4:	dfc00417 	ldw	ra,16(sp)
   430f8:	dec00504 	addi	sp,sp,20
   430fc:	f800283a 	ret
   43100:	58800117 	ldw	r2,4(r11)
   43104:	18bff11e 	bne	r3,r2,430cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
   43108:	0007883a 	mov	r3,zero
   4310c:	51800215 	stw	r6,8(r10)
   43110:	003fe906 	br	430b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43114:	00bfff84 	movi	r2,-2
   43118:	28800426 	beq	r5,r2,4312c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
   4311c:	0007883a 	mov	r3,zero
   43120:	003fe506 	br	430b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43124:	00800184 	movi	r2,6
   43128:	003fe106 	br	430b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
   4312c:	00800044 	movi	r2,1
   43130:	0007883a 	mov	r3,zero
   43134:	50800315 	stw	r2,12(r10)
   43138:	003fdf06 	br	430b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0004313c <_ZNKSt9type_info14__is_pointer_pEv>:
   4313c:	0005883a 	mov	r2,zero
   43140:	f800283a 	ret

00043144 <_ZNKSt9type_info15__is_function_pEv>:
   43144:	0005883a 	mov	r2,zero
   43148:	f800283a 	ret

0004314c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   4314c:	20c00117 	ldw	r3,4(r4)
   43150:	28800117 	ldw	r2,4(r5)
   43154:	1885003a 	cmpeq	r2,r3,r2
   43158:	f800283a 	ret

0004315c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   4315c:	0005883a 	mov	r2,zero
   43160:	f800283a 	ret

00043164 <_ZNSt9type_infoD0Ev>:
   43164:	00800134 	movhi	r2,4
   43168:	1099ab04 	addi	r2,r2,26284
   4316c:	20800015 	stw	r2,0(r4)
   43170:	00419cc1 	jmpi	419cc <_ZdlPv>

00043174 <_ZNSt9type_infoD1Ev>:
   43174:	00800134 	movhi	r2,4
   43178:	1099ab04 	addi	r2,r2,26284
   4317c:	20800015 	stw	r2,0(r4)
   43180:	f800283a 	ret

00043184 <_ZNSt9type_infoD2Ev>:
   43184:	00800134 	movhi	r2,4
   43188:	1099ab04 	addi	r2,r2,26284
   4318c:	20800015 	stw	r2,0(r4)
   43190:	f800283a 	ret

00043194 <_fpadd_parts>:
   43194:	21c00017 	ldw	r7,0(r4)
   43198:	02000044 	movi	r8,1
   4319c:	41c0332e 	bgeu	r8,r7,4326c <_fpadd_parts+0xd8>
   431a0:	28800017 	ldw	r2,0(r5)
   431a4:	4080462e 	bgeu	r8,r2,432c0 <_fpadd_parts+0x12c>
   431a8:	00c00104 	movi	r3,4
   431ac:	38c06b26 	beq	r7,r3,4335c <_fpadd_parts+0x1c8>
   431b0:	10c04326 	beq	r2,r3,432c0 <_fpadd_parts+0x12c>
   431b4:	00c00084 	movi	r3,2
   431b8:	10c02e26 	beq	r2,r3,43274 <_fpadd_parts+0xe0>
   431bc:	38c04026 	beq	r7,r3,432c0 <_fpadd_parts+0x12c>
   431c0:	22800217 	ldw	r10,8(r4)
   431c4:	28c00217 	ldw	r3,8(r5)
   431c8:	23000317 	ldw	r12,12(r4)
   431cc:	2a400317 	ldw	r9,12(r5)
   431d0:	50cfc83a 	sub	r7,r10,r3
   431d4:	3817883a 	mov	r11,r7
   431d8:	38004f16 	blt	r7,zero,43318 <_fpadd_parts+0x184>
   431dc:	008007c4 	movi	r2,31
   431e0:	11c03316 	blt	r2,r7,432b0 <_fpadd_parts+0x11c>
   431e4:	02c0540e 	bge	zero,r11,43338 <_fpadd_parts+0x1a4>
   431e8:	41c4983a 	sll	r2,r8,r7
   431ec:	49c6d83a 	srl	r3,r9,r7
   431f0:	10bfffc4 	addi	r2,r2,-1
   431f4:	4884703a 	and	r2,r9,r2
   431f8:	1004c03a 	cmpne	r2,r2,zero
   431fc:	1892b03a 	or	r9,r3,r2
   43200:	20c00117 	ldw	r3,4(r4)
   43204:	28800117 	ldw	r2,4(r5)
   43208:	18803c26 	beq	r3,r2,432fc <_fpadd_parts+0x168>
   4320c:	18002f26 	beq	r3,zero,432cc <_fpadd_parts+0x138>
   43210:	4b05c83a 	sub	r2,r9,r12
   43214:	10004216 	blt	r2,zero,43320 <_fpadd_parts+0x18c>
   43218:	32800215 	stw	r10,8(r6)
   4321c:	30800315 	stw	r2,12(r6)
   43220:	30000115 	stw	zero,4(r6)
   43224:	31000317 	ldw	r4,12(r6)
   43228:	01d00034 	movhi	r7,16384
   4322c:	39ffff84 	addi	r7,r7,-2
   43230:	20bfffc4 	addi	r2,r4,-1
   43234:	2007883a 	mov	r3,r4
   43238:	38800836 	bltu	r7,r2,4325c <_fpadd_parts+0xc8>
   4323c:	31400217 	ldw	r5,8(r6)
   43240:	18c9883a 	add	r4,r3,r3
   43244:	20bfffc4 	addi	r2,r4,-1
   43248:	297fffc4 	addi	r5,r5,-1
   4324c:	2007883a 	mov	r3,r4
   43250:	38bffb2e 	bgeu	r7,r2,43240 <_fpadd_parts+0xac>
   43254:	31400215 	stw	r5,8(r6)
   43258:	31000315 	stw	r4,12(r6)
   4325c:	008000c4 	movi	r2,3
   43260:	30800015 	stw	r2,0(r6)
   43264:	20001b16 	blt	r4,zero,432d4 <_fpadd_parts+0x140>
   43268:	3009883a 	mov	r4,r6
   4326c:	2005883a 	mov	r2,r4
   43270:	f800283a 	ret
   43274:	38fffd1e 	bne	r7,r3,4326c <_fpadd_parts+0xd8>
   43278:	31c00015 	stw	r7,0(r6)
   4327c:	20800117 	ldw	r2,4(r4)
   43280:	30800115 	stw	r2,4(r6)
   43284:	20c00217 	ldw	r3,8(r4)
   43288:	30c00215 	stw	r3,8(r6)
   4328c:	20800317 	ldw	r2,12(r4)
   43290:	30800315 	stw	r2,12(r6)
   43294:	20c00117 	ldw	r3,4(r4)
   43298:	28800117 	ldw	r2,4(r5)
   4329c:	3009883a 	mov	r4,r6
   432a0:	1886703a 	and	r3,r3,r2
   432a4:	2005883a 	mov	r2,r4
   432a8:	30c00115 	stw	r3,4(r6)
   432ac:	f800283a 	ret
   432b0:	1a801716 	blt	r3,r10,43310 <_fpadd_parts+0x17c>
   432b4:	1815883a 	mov	r10,r3
   432b8:	0019883a 	mov	r12,zero
   432bc:	003fd006 	br	43200 <_fpadd_parts+0x6c>
   432c0:	2809883a 	mov	r4,r5
   432c4:	2005883a 	mov	r2,r4
   432c8:	f800283a 	ret
   432cc:	6245c83a 	sub	r2,r12,r9
   432d0:	003fd006 	br	43214 <_fpadd_parts+0x80>
   432d4:	30800217 	ldw	r2,8(r6)
   432d8:	2006d07a 	srli	r3,r4,1
   432dc:	2100004c 	andi	r4,r4,1
   432e0:	10800044 	addi	r2,r2,1
   432e4:	1906b03a 	or	r3,r3,r4
   432e8:	3009883a 	mov	r4,r6
   432ec:	30800215 	stw	r2,8(r6)
   432f0:	2005883a 	mov	r2,r4
   432f4:	30c00315 	stw	r3,12(r6)
   432f8:	f800283a 	ret
   432fc:	4b09883a 	add	r4,r9,r12
   43300:	30c00115 	stw	r3,4(r6)
   43304:	32800215 	stw	r10,8(r6)
   43308:	31000315 	stw	r4,12(r6)
   4330c:	003fd306 	br	4325c <_fpadd_parts+0xc8>
   43310:	0013883a 	mov	r9,zero
   43314:	003fba06 	br	43200 <_fpadd_parts+0x6c>
   43318:	01cfc83a 	sub	r7,zero,r7
   4331c:	003faf06 	br	431dc <_fpadd_parts+0x48>
   43320:	0089c83a 	sub	r4,zero,r2
   43324:	00800044 	movi	r2,1
   43328:	30800115 	stw	r2,4(r6)
   4332c:	32800215 	stw	r10,8(r6)
   43330:	31000315 	stw	r4,12(r6)
   43334:	003fbb06 	br	43224 <_fpadd_parts+0x90>
   43338:	583fb126 	beq	r11,zero,43200 <_fpadd_parts+0x6c>
   4333c:	41c4983a 	sll	r2,r8,r7
   43340:	61c6d83a 	srl	r3,r12,r7
   43344:	51d5883a 	add	r10,r10,r7
   43348:	10bfffc4 	addi	r2,r2,-1
   4334c:	6084703a 	and	r2,r12,r2
   43350:	1004c03a 	cmpne	r2,r2,zero
   43354:	1898b03a 	or	r12,r3,r2
   43358:	003fa906 	br	43200 <_fpadd_parts+0x6c>
   4335c:	11ffc31e 	bne	r2,r7,4326c <_fpadd_parts+0xd8>
   43360:	28c00117 	ldw	r3,4(r5)
   43364:	20800117 	ldw	r2,4(r4)
   43368:	10ffc026 	beq	r2,r3,4326c <_fpadd_parts+0xd8>
   4336c:	01000134 	movhi	r4,4
   43370:	2119b504 	addi	r4,r4,26324
   43374:	003fbd06 	br	4326c <_fpadd_parts+0xd8>

00043378 <__subsf3>:
   43378:	deffef04 	addi	sp,sp,-68
   4337c:	dcc00f15 	stw	r19,60(sp)
   43380:	dcc00204 	addi	r19,sp,8
   43384:	dc400e15 	stw	r17,56(sp)
   43388:	d9000015 	stw	r4,0(sp)
   4338c:	d9400115 	stw	r5,4(sp)
   43390:	d809883a 	mov	r4,sp
   43394:	980b883a 	mov	r5,r19
   43398:	dc400604 	addi	r17,sp,24
   4339c:	dfc01015 	stw	ra,64(sp)
   433a0:	00443e80 	call	443e8 <__unpack_f>
   433a4:	d9000104 	addi	r4,sp,4
   433a8:	880b883a 	mov	r5,r17
   433ac:	00443e80 	call	443e8 <__unpack_f>
   433b0:	d8800717 	ldw	r2,28(sp)
   433b4:	9809883a 	mov	r4,r19
   433b8:	880b883a 	mov	r5,r17
   433bc:	d9800a04 	addi	r6,sp,40
   433c0:	1080005c 	xori	r2,r2,1
   433c4:	d8800715 	stw	r2,28(sp)
   433c8:	00431940 	call	43194 <_fpadd_parts>
   433cc:	1009883a 	mov	r4,r2
   433d0:	00442880 	call	44288 <__pack_f>
   433d4:	dfc01017 	ldw	ra,64(sp)
   433d8:	dcc00f17 	ldw	r19,60(sp)
   433dc:	dc400e17 	ldw	r17,56(sp)
   433e0:	dec01104 	addi	sp,sp,68
   433e4:	f800283a 	ret

000433e8 <__addsf3>:
   433e8:	deffef04 	addi	sp,sp,-68
   433ec:	dcc00f15 	stw	r19,60(sp)
   433f0:	dcc00204 	addi	r19,sp,8
   433f4:	dc400e15 	stw	r17,56(sp)
   433f8:	d9000015 	stw	r4,0(sp)
   433fc:	d9400115 	stw	r5,4(sp)
   43400:	d809883a 	mov	r4,sp
   43404:	980b883a 	mov	r5,r19
   43408:	dc400604 	addi	r17,sp,24
   4340c:	dfc01015 	stw	ra,64(sp)
   43410:	00443e80 	call	443e8 <__unpack_f>
   43414:	d9000104 	addi	r4,sp,4
   43418:	880b883a 	mov	r5,r17
   4341c:	00443e80 	call	443e8 <__unpack_f>
   43420:	d9800a04 	addi	r6,sp,40
   43424:	9809883a 	mov	r4,r19
   43428:	880b883a 	mov	r5,r17
   4342c:	00431940 	call	43194 <_fpadd_parts>
   43430:	1009883a 	mov	r4,r2
   43434:	00442880 	call	44288 <__pack_f>
   43438:	dfc01017 	ldw	ra,64(sp)
   4343c:	dcc00f17 	ldw	r19,60(sp)
   43440:	dc400e17 	ldw	r17,56(sp)
   43444:	dec01104 	addi	sp,sp,68
   43448:	f800283a 	ret

0004344c <__mulsf3>:
   4344c:	deffef04 	addi	sp,sp,-68
   43450:	dc400f15 	stw	r17,60(sp)
   43454:	dc400204 	addi	r17,sp,8
   43458:	dc000e15 	stw	r16,56(sp)
   4345c:	d9000015 	stw	r4,0(sp)
   43460:	d9400115 	stw	r5,4(sp)
   43464:	d809883a 	mov	r4,sp
   43468:	880b883a 	mov	r5,r17
   4346c:	dc000604 	addi	r16,sp,24
   43470:	dfc01015 	stw	ra,64(sp)
   43474:	00443e80 	call	443e8 <__unpack_f>
   43478:	d9000104 	addi	r4,sp,4
   4347c:	800b883a 	mov	r5,r16
   43480:	00443e80 	call	443e8 <__unpack_f>
   43484:	d9000217 	ldw	r4,8(sp)
   43488:	00800044 	movi	r2,1
   4348c:	01400104 	movi	r5,4
   43490:	1100142e 	bgeu	r2,r4,434e4 <__mulsf3+0x98>
   43494:	d8c00617 	ldw	r3,24(sp)
   43498:	10c0052e 	bgeu	r2,r3,434b0 <__mulsf3+0x64>
   4349c:	21400f26 	beq	r4,r5,434dc <__mulsf3+0x90>
   434a0:	19405d26 	beq	r3,r5,43618 <__mulsf3+0x1cc>
   434a4:	00800084 	movi	r2,2
   434a8:	20800e26 	beq	r4,r2,434e4 <__mulsf3+0x98>
   434ac:	1880181e 	bne	r3,r2,43510 <__mulsf3+0xc4>
   434b0:	d8c00717 	ldw	r3,28(sp)
   434b4:	d8800317 	ldw	r2,12(sp)
   434b8:	8009883a 	mov	r4,r16
   434bc:	10c4c03a 	cmpne	r2,r2,r3
   434c0:	d8800715 	stw	r2,28(sp)
   434c4:	00442880 	call	44288 <__pack_f>
   434c8:	dfc01017 	ldw	ra,64(sp)
   434cc:	dc400f17 	ldw	r17,60(sp)
   434d0:	dc000e17 	ldw	r16,56(sp)
   434d4:	dec01104 	addi	sp,sp,68
   434d8:	f800283a 	ret
   434dc:	00800084 	movi	r2,2
   434e0:	18804f26 	beq	r3,r2,43620 <__mulsf3+0x1d4>
   434e4:	d8800317 	ldw	r2,12(sp)
   434e8:	d8c00717 	ldw	r3,28(sp)
   434ec:	8809883a 	mov	r4,r17
   434f0:	10c4c03a 	cmpne	r2,r2,r3
   434f4:	d8800315 	stw	r2,12(sp)
   434f8:	00442880 	call	44288 <__pack_f>
   434fc:	dfc01017 	ldw	ra,64(sp)
   43500:	dc400f17 	ldw	r17,60(sp)
   43504:	dc000e17 	ldw	r16,56(sp)
   43508:	dec01104 	addi	sp,sp,68
   4350c:	f800283a 	ret
   43510:	d8800517 	ldw	r2,20(sp)
   43514:	da000917 	ldw	r8,36(sp)
   43518:	0013883a 	mov	r9,zero
   4351c:	0007883a 	mov	r3,zero
   43520:	480f883a 	mov	r7,r9
   43524:	180b883a 	mov	r5,r3
   43528:	400d883a 	mov	r6,r8
   4352c:	1009883a 	mov	r4,r2
   43530:	00440e40 	call	440e4 <__muldi3>
   43534:	da800417 	ldw	r10,16(sp)
   43538:	d9800817 	ldw	r6,32(sp)
   4353c:	da400317 	ldw	r9,12(sp)
   43540:	52800084 	addi	r10,r10,2
   43544:	3295883a 	add	r10,r6,r10
   43548:	d9800717 	ldw	r6,28(sp)
   4354c:	180b883a 	mov	r5,r3
   43550:	180f883a 	mov	r7,r3
   43554:	4992c03a 	cmpne	r9,r9,r6
   43558:	da400b15 	stw	r9,44(sp)
   4355c:	1007883a 	mov	r3,r2
   43560:	da800c15 	stw	r10,48(sp)
   43564:	2800070e 	bge	r5,zero,43584 <__mulsf3+0x138>
   43568:	2880004c 	andi	r2,r5,1
   4356c:	1005003a 	cmpeq	r2,r2,zero
   43570:	500d883a 	mov	r6,r10
   43574:	10001e26 	beq	r2,zero,435f0 <__mulsf3+0x1a4>
   43578:	380ed07a 	srli	r7,r7,1
   4357c:	31800044 	addi	r6,r6,1
   43580:	d9800c15 	stw	r6,48(sp)
   43584:	01100034 	movhi	r4,16384
   43588:	213fffc4 	addi	r4,r4,-1
   4358c:	21c00b36 	bltu	r4,r7,435bc <__mulsf3+0x170>
   43590:	d8800c17 	ldw	r2,48(sp)
   43594:	00000206 	br	435a0 <__mulsf3+0x154>
   43598:	18c7883a 	add	r3,r3,r3
   4359c:	21c00636 	bltu	r4,r7,435b8 <__mulsf3+0x16c>
   435a0:	10bfffc4 	addi	r2,r2,-1
   435a4:	39cf883a 	add	r7,r7,r7
   435a8:	183ffb0e 	bge	r3,zero,43598 <__mulsf3+0x14c>
   435ac:	39c00054 	ori	r7,r7,1
   435b0:	18c7883a 	add	r3,r3,r3
   435b4:	21fffa2e 	bgeu	r4,r7,435a0 <__mulsf3+0x154>
   435b8:	d8800c15 	stw	r2,48(sp)
   435bc:	39001fcc 	andi	r4,r7,127
   435c0:	00801004 	movi	r2,64
   435c4:	20800d26 	beq	r4,r2,435fc <__mulsf3+0x1b0>
   435c8:	008000c4 	movi	r2,3
   435cc:	d9000a04 	addi	r4,sp,40
   435d0:	d9c00d15 	stw	r7,52(sp)
   435d4:	d8800a15 	stw	r2,40(sp)
   435d8:	00442880 	call	44288 <__pack_f>
   435dc:	dfc01017 	ldw	ra,64(sp)
   435e0:	dc400f17 	ldw	r17,60(sp)
   435e4:	dc000e17 	ldw	r16,56(sp)
   435e8:	dec01104 	addi	sp,sp,68
   435ec:	f800283a 	ret
   435f0:	1804d07a 	srli	r2,r3,1
   435f4:	10e00034 	orhi	r3,r2,32768
   435f8:	003fdf06 	br	43578 <__mulsf3+0x12c>
   435fc:	3880200c 	andi	r2,r7,128
   43600:	103ff11e 	bne	r2,zero,435c8 <__mulsf3+0x17c>
   43604:	183ff026 	beq	r3,zero,435c8 <__mulsf3+0x17c>
   43608:	3907883a 	add	r3,r7,r4
   4360c:	00bfe004 	movi	r2,-128
   43610:	188e703a 	and	r7,r3,r2
   43614:	003fec06 	br	435c8 <__mulsf3+0x17c>
   43618:	00800084 	movi	r2,2
   4361c:	20bfa41e 	bne	r4,r2,434b0 <__mulsf3+0x64>
   43620:	01000134 	movhi	r4,4
   43624:	2119b504 	addi	r4,r4,26324
   43628:	003fb306 	br	434f8 <__mulsf3+0xac>

0004362c <__divsf3>:
   4362c:	defff304 	addi	sp,sp,-52
   43630:	dc400b15 	stw	r17,44(sp)
   43634:	dc400204 	addi	r17,sp,8
   43638:	dc000a15 	stw	r16,40(sp)
   4363c:	d9000015 	stw	r4,0(sp)
   43640:	d9400115 	stw	r5,4(sp)
   43644:	d809883a 	mov	r4,sp
   43648:	880b883a 	mov	r5,r17
   4364c:	dc000604 	addi	r16,sp,24
   43650:	dfc00c15 	stw	ra,48(sp)
   43654:	00443e80 	call	443e8 <__unpack_f>
   43658:	d9000104 	addi	r4,sp,4
   4365c:	800b883a 	mov	r5,r16
   43660:	00443e80 	call	443e8 <__unpack_f>
   43664:	d9000217 	ldw	r4,8(sp)
   43668:	00800044 	movi	r2,1
   4366c:	01800104 	movi	r6,4
   43670:	11000a2e 	bgeu	r2,r4,4369c <__divsf3+0x70>
   43674:	d9400617 	ldw	r5,24(sp)
   43678:	1140432e 	bgeu	r2,r5,43788 <__divsf3+0x15c>
   4367c:	d8800317 	ldw	r2,12(sp)
   43680:	d8c00717 	ldw	r3,28(sp)
   43684:	10c4f03a 	xor	r2,r2,r3
   43688:	d8800315 	stw	r2,12(sp)
   4368c:	21800226 	beq	r4,r6,43698 <__divsf3+0x6c>
   43690:	00800084 	movi	r2,2
   43694:	2080101e 	bne	r4,r2,436d8 <__divsf3+0xac>
   43698:	29000726 	beq	r5,r4,436b8 <__divsf3+0x8c>
   4369c:	8809883a 	mov	r4,r17
   436a0:	00442880 	call	44288 <__pack_f>
   436a4:	dfc00c17 	ldw	ra,48(sp)
   436a8:	dc400b17 	ldw	r17,44(sp)
   436ac:	dc000a17 	ldw	r16,40(sp)
   436b0:	dec00d04 	addi	sp,sp,52
   436b4:	f800283a 	ret
   436b8:	01000134 	movhi	r4,4
   436bc:	2119b504 	addi	r4,r4,26324
   436c0:	00442880 	call	44288 <__pack_f>
   436c4:	dfc00c17 	ldw	ra,48(sp)
   436c8:	dc400b17 	ldw	r17,44(sp)
   436cc:	dc000a17 	ldw	r16,40(sp)
   436d0:	dec00d04 	addi	sp,sp,52
   436d4:	f800283a 	ret
   436d8:	29802d26 	beq	r5,r6,43790 <__divsf3+0x164>
   436dc:	28801a26 	beq	r5,r2,43748 <__divsf3+0x11c>
   436e0:	d8c00417 	ldw	r3,16(sp)
   436e4:	d8800817 	ldw	r2,32(sp)
   436e8:	d9000517 	ldw	r4,20(sp)
   436ec:	d9800917 	ldw	r6,36(sp)
   436f0:	1885c83a 	sub	r2,r3,r2
   436f4:	d8800415 	stw	r2,16(sp)
   436f8:	2180032e 	bgeu	r4,r6,43708 <__divsf3+0xdc>
   436fc:	10bfffc4 	addi	r2,r2,-1
   43700:	d8800415 	stw	r2,16(sp)
   43704:	2109883a 	add	r4,r4,r4
   43708:	01500034 	movhi	r5,16384
   4370c:	0007883a 	mov	r3,zero
   43710:	0005883a 	mov	r2,zero
   43714:	01c007c4 	movi	r7,31
   43718:	10800044 	addi	r2,r2,1
   4371c:	21800236 	bltu	r4,r6,43728 <__divsf3+0xfc>
   43720:	1946b03a 	or	r3,r3,r5
   43724:	2189c83a 	sub	r4,r4,r6
   43728:	280ad07a 	srli	r5,r5,1
   4372c:	2109883a 	add	r4,r4,r4
   43730:	11fff91e 	bne	r2,r7,43718 <__divsf3+0xec>
   43734:	19401fcc 	andi	r5,r3,127
   43738:	00801004 	movi	r2,64
   4373c:	28800a26 	beq	r5,r2,43768 <__divsf3+0x13c>
   43740:	d8c00515 	stw	r3,20(sp)
   43744:	003fd506 	br	4369c <__divsf3+0x70>
   43748:	8809883a 	mov	r4,r17
   4374c:	d9800215 	stw	r6,8(sp)
   43750:	00442880 	call	44288 <__pack_f>
   43754:	dfc00c17 	ldw	ra,48(sp)
   43758:	dc400b17 	ldw	r17,44(sp)
   4375c:	dc000a17 	ldw	r16,40(sp)
   43760:	dec00d04 	addi	sp,sp,52
   43764:	f800283a 	ret
   43768:	1880200c 	andi	r2,r3,128
   4376c:	103ff41e 	bne	r2,zero,43740 <__divsf3+0x114>
   43770:	203ff326 	beq	r4,zero,43740 <__divsf3+0x114>
   43774:	1947883a 	add	r3,r3,r5
   43778:	00bfe004 	movi	r2,-128
   4377c:	1886703a 	and	r3,r3,r2
   43780:	d8c00515 	stw	r3,20(sp)
   43784:	003fc506 	br	4369c <__divsf3+0x70>
   43788:	8009883a 	mov	r4,r16
   4378c:	003fc406 	br	436a0 <__divsf3+0x74>
   43790:	8809883a 	mov	r4,r17
   43794:	d8000515 	stw	zero,20(sp)
   43798:	d8000415 	stw	zero,16(sp)
   4379c:	003fc006 	br	436a0 <__divsf3+0x74>

000437a0 <__gtsf2>:
   437a0:	defff304 	addi	sp,sp,-52
   437a4:	dc400b15 	stw	r17,44(sp)
   437a8:	dc400204 	addi	r17,sp,8
   437ac:	dc000a15 	stw	r16,40(sp)
   437b0:	d9000015 	stw	r4,0(sp)
   437b4:	d9400115 	stw	r5,4(sp)
   437b8:	d809883a 	mov	r4,sp
   437bc:	880b883a 	mov	r5,r17
   437c0:	dc000604 	addi	r16,sp,24
   437c4:	dfc00c15 	stw	ra,48(sp)
   437c8:	00443e80 	call	443e8 <__unpack_f>
   437cc:	d9000104 	addi	r4,sp,4
   437d0:	800b883a 	mov	r5,r16
   437d4:	00443e80 	call	443e8 <__unpack_f>
   437d8:	d8800217 	ldw	r2,8(sp)
   437dc:	00c00044 	movi	r3,1
   437e0:	01bfffc4 	movi	r6,-1
   437e4:	1880062e 	bgeu	r3,r2,43800 <__gtsf2+0x60>
   437e8:	d8800617 	ldw	r2,24(sp)
   437ec:	8809883a 	mov	r4,r17
   437f0:	800b883a 	mov	r5,r16
   437f4:	1880022e 	bgeu	r3,r2,43800 <__gtsf2+0x60>
   437f8:	00444b00 	call	444b0 <__fpcmp_parts_f>
   437fc:	100d883a 	mov	r6,r2
   43800:	3005883a 	mov	r2,r6
   43804:	dfc00c17 	ldw	ra,48(sp)
   43808:	dc400b17 	ldw	r17,44(sp)
   4380c:	dc000a17 	ldw	r16,40(sp)
   43810:	dec00d04 	addi	sp,sp,52
   43814:	f800283a 	ret

00043818 <__gesf2>:
   43818:	defff304 	addi	sp,sp,-52
   4381c:	dc400b15 	stw	r17,44(sp)
   43820:	dc400204 	addi	r17,sp,8
   43824:	dc000a15 	stw	r16,40(sp)
   43828:	d9000015 	stw	r4,0(sp)
   4382c:	d9400115 	stw	r5,4(sp)
   43830:	d809883a 	mov	r4,sp
   43834:	880b883a 	mov	r5,r17
   43838:	dc000604 	addi	r16,sp,24
   4383c:	dfc00c15 	stw	ra,48(sp)
   43840:	00443e80 	call	443e8 <__unpack_f>
   43844:	d9000104 	addi	r4,sp,4
   43848:	800b883a 	mov	r5,r16
   4384c:	00443e80 	call	443e8 <__unpack_f>
   43850:	d8800217 	ldw	r2,8(sp)
   43854:	00c00044 	movi	r3,1
   43858:	01bfffc4 	movi	r6,-1
   4385c:	1880062e 	bgeu	r3,r2,43878 <__gesf2+0x60>
   43860:	d8800617 	ldw	r2,24(sp)
   43864:	8809883a 	mov	r4,r17
   43868:	800b883a 	mov	r5,r16
   4386c:	1880022e 	bgeu	r3,r2,43878 <__gesf2+0x60>
   43870:	00444b00 	call	444b0 <__fpcmp_parts_f>
   43874:	100d883a 	mov	r6,r2
   43878:	3005883a 	mov	r2,r6
   4387c:	dfc00c17 	ldw	ra,48(sp)
   43880:	dc400b17 	ldw	r17,44(sp)
   43884:	dc000a17 	ldw	r16,40(sp)
   43888:	dec00d04 	addi	sp,sp,52
   4388c:	f800283a 	ret

00043890 <__ltsf2>:
   43890:	defff304 	addi	sp,sp,-52
   43894:	dc400b15 	stw	r17,44(sp)
   43898:	dc400204 	addi	r17,sp,8
   4389c:	dc000a15 	stw	r16,40(sp)
   438a0:	d9000015 	stw	r4,0(sp)
   438a4:	d9400115 	stw	r5,4(sp)
   438a8:	d809883a 	mov	r4,sp
   438ac:	880b883a 	mov	r5,r17
   438b0:	dc000604 	addi	r16,sp,24
   438b4:	dfc00c15 	stw	ra,48(sp)
   438b8:	00443e80 	call	443e8 <__unpack_f>
   438bc:	d9000104 	addi	r4,sp,4
   438c0:	800b883a 	mov	r5,r16
   438c4:	00443e80 	call	443e8 <__unpack_f>
   438c8:	d8800217 	ldw	r2,8(sp)
   438cc:	00c00044 	movi	r3,1
   438d0:	180d883a 	mov	r6,r3
   438d4:	1880062e 	bgeu	r3,r2,438f0 <__ltsf2+0x60>
   438d8:	d8800617 	ldw	r2,24(sp)
   438dc:	8809883a 	mov	r4,r17
   438e0:	800b883a 	mov	r5,r16
   438e4:	1880022e 	bgeu	r3,r2,438f0 <__ltsf2+0x60>
   438e8:	00444b00 	call	444b0 <__fpcmp_parts_f>
   438ec:	100d883a 	mov	r6,r2
   438f0:	3005883a 	mov	r2,r6
   438f4:	dfc00c17 	ldw	ra,48(sp)
   438f8:	dc400b17 	ldw	r17,44(sp)
   438fc:	dc000a17 	ldw	r16,40(sp)
   43900:	dec00d04 	addi	sp,sp,52
   43904:	f800283a 	ret

00043908 <__lesf2>:
   43908:	defff304 	addi	sp,sp,-52
   4390c:	dc400b15 	stw	r17,44(sp)
   43910:	dc400204 	addi	r17,sp,8
   43914:	dc000a15 	stw	r16,40(sp)
   43918:	d9000015 	stw	r4,0(sp)
   4391c:	d9400115 	stw	r5,4(sp)
   43920:	d809883a 	mov	r4,sp
   43924:	880b883a 	mov	r5,r17
   43928:	dc000604 	addi	r16,sp,24
   4392c:	dfc00c15 	stw	ra,48(sp)
   43930:	00443e80 	call	443e8 <__unpack_f>
   43934:	d9000104 	addi	r4,sp,4
   43938:	800b883a 	mov	r5,r16
   4393c:	00443e80 	call	443e8 <__unpack_f>
   43940:	d8800217 	ldw	r2,8(sp)
   43944:	00c00044 	movi	r3,1
   43948:	180d883a 	mov	r6,r3
   4394c:	1880062e 	bgeu	r3,r2,43968 <__lesf2+0x60>
   43950:	d8800617 	ldw	r2,24(sp)
   43954:	8809883a 	mov	r4,r17
   43958:	800b883a 	mov	r5,r16
   4395c:	1880022e 	bgeu	r3,r2,43968 <__lesf2+0x60>
   43960:	00444b00 	call	444b0 <__fpcmp_parts_f>
   43964:	100d883a 	mov	r6,r2
   43968:	3005883a 	mov	r2,r6
   4396c:	dfc00c17 	ldw	ra,48(sp)
   43970:	dc400b17 	ldw	r17,44(sp)
   43974:	dc000a17 	ldw	r16,40(sp)
   43978:	dec00d04 	addi	sp,sp,52
   4397c:	f800283a 	ret

00043980 <__floatsisf>:
   43980:	2006d7fa 	srli	r3,r4,31
   43984:	defffa04 	addi	sp,sp,-24
   43988:	008000c4 	movi	r2,3
   4398c:	dfc00515 	stw	ra,20(sp)
   43990:	dc000415 	stw	r16,16(sp)
   43994:	d8800015 	stw	r2,0(sp)
   43998:	d8c00115 	stw	r3,4(sp)
   4399c:	2000081e 	bne	r4,zero,439c0 <__floatsisf+0x40>
   439a0:	00800084 	movi	r2,2
   439a4:	d8800015 	stw	r2,0(sp)
   439a8:	d809883a 	mov	r4,sp
   439ac:	00442880 	call	44288 <__pack_f>
   439b0:	dfc00517 	ldw	ra,20(sp)
   439b4:	dc000417 	ldw	r16,16(sp)
   439b8:	dec00604 	addi	sp,sp,24
   439bc:	f800283a 	ret
   439c0:	00800784 	movi	r2,30
   439c4:	1807003a 	cmpeq	r3,r3,zero
   439c8:	d8800215 	stw	r2,8(sp)
   439cc:	18000e1e 	bne	r3,zero,43a08 <__floatsisf+0x88>
   439d0:	00a00034 	movhi	r2,32768
   439d4:	20800e26 	beq	r4,r2,43a10 <__floatsisf+0x90>
   439d8:	0121c83a 	sub	r16,zero,r4
   439dc:	8009883a 	mov	r4,r16
   439e0:	dc000315 	stw	r16,12(sp)
   439e4:	00442080 	call	44208 <__clzsi2>
   439e8:	117fffc4 	addi	r5,r2,-1
   439ec:	017fee0e 	bge	zero,r5,439a8 <__floatsisf+0x28>
   439f0:	d8800217 	ldw	r2,8(sp)
   439f4:	8146983a 	sll	r3,r16,r5
   439f8:	1145c83a 	sub	r2,r2,r5
   439fc:	d8c00315 	stw	r3,12(sp)
   43a00:	d8800215 	stw	r2,8(sp)
   43a04:	003fe806 	br	439a8 <__floatsisf+0x28>
   43a08:	2021883a 	mov	r16,r4
   43a0c:	003ff306 	br	439dc <__floatsisf+0x5c>
   43a10:	00b3c034 	movhi	r2,52992
   43a14:	003fe606 	br	439b0 <__floatsisf+0x30>

00043a18 <udivmodsi4>:
   43a18:	29001b2e 	bgeu	r5,r4,43a88 <udivmodsi4+0x70>
   43a1c:	28001a16 	blt	r5,zero,43a88 <udivmodsi4+0x70>
   43a20:	00800044 	movi	r2,1
   43a24:	0007883a 	mov	r3,zero
   43a28:	01c007c4 	movi	r7,31
   43a2c:	00000306 	br	43a3c <udivmodsi4+0x24>
   43a30:	19c01326 	beq	r3,r7,43a80 <udivmodsi4+0x68>
   43a34:	18c00044 	addi	r3,r3,1
   43a38:	28000416 	blt	r5,zero,43a4c <udivmodsi4+0x34>
   43a3c:	294b883a 	add	r5,r5,r5
   43a40:	1085883a 	add	r2,r2,r2
   43a44:	293ffa36 	bltu	r5,r4,43a30 <udivmodsi4+0x18>
   43a48:	10000d26 	beq	r2,zero,43a80 <udivmodsi4+0x68>
   43a4c:	0007883a 	mov	r3,zero
   43a50:	21400236 	bltu	r4,r5,43a5c <udivmodsi4+0x44>
   43a54:	2149c83a 	sub	r4,r4,r5
   43a58:	1886b03a 	or	r3,r3,r2
   43a5c:	1004d07a 	srli	r2,r2,1
   43a60:	280ad07a 	srli	r5,r5,1
   43a64:	103ffa1e 	bne	r2,zero,43a50 <udivmodsi4+0x38>
   43a68:	30000226 	beq	r6,zero,43a74 <udivmodsi4+0x5c>
   43a6c:	2005883a 	mov	r2,r4
   43a70:	f800283a 	ret
   43a74:	1809883a 	mov	r4,r3
   43a78:	2005883a 	mov	r2,r4
   43a7c:	f800283a 	ret
   43a80:	0007883a 	mov	r3,zero
   43a84:	003ff806 	br	43a68 <udivmodsi4+0x50>
   43a88:	00800044 	movi	r2,1
   43a8c:	0007883a 	mov	r3,zero
   43a90:	003fef06 	br	43a50 <udivmodsi4+0x38>

00043a94 <__divsi3>:
   43a94:	defffe04 	addi	sp,sp,-8
   43a98:	dc000015 	stw	r16,0(sp)
   43a9c:	dfc00115 	stw	ra,4(sp)
   43aa0:	0021883a 	mov	r16,zero
   43aa4:	20000c16 	blt	r4,zero,43ad8 <__divsi3+0x44>
   43aa8:	000d883a 	mov	r6,zero
   43aac:	28000e16 	blt	r5,zero,43ae8 <__divsi3+0x54>
   43ab0:	0043a180 	call	43a18 <udivmodsi4>
   43ab4:	1007883a 	mov	r3,r2
   43ab8:	8005003a 	cmpeq	r2,r16,zero
   43abc:	1000011e 	bne	r2,zero,43ac4 <__divsi3+0x30>
   43ac0:	00c7c83a 	sub	r3,zero,r3
   43ac4:	1805883a 	mov	r2,r3
   43ac8:	dfc00117 	ldw	ra,4(sp)
   43acc:	dc000017 	ldw	r16,0(sp)
   43ad0:	dec00204 	addi	sp,sp,8
   43ad4:	f800283a 	ret
   43ad8:	0109c83a 	sub	r4,zero,r4
   43adc:	04000044 	movi	r16,1
   43ae0:	000d883a 	mov	r6,zero
   43ae4:	283ff20e 	bge	r5,zero,43ab0 <__divsi3+0x1c>
   43ae8:	014bc83a 	sub	r5,zero,r5
   43aec:	8021003a 	cmpeq	r16,r16,zero
   43af0:	003fef06 	br	43ab0 <__divsi3+0x1c>

00043af4 <__modsi3>:
   43af4:	deffff04 	addi	sp,sp,-4
   43af8:	dfc00015 	stw	ra,0(sp)
   43afc:	01800044 	movi	r6,1
   43b00:	2807883a 	mov	r3,r5
   43b04:	20000416 	blt	r4,zero,43b18 <__modsi3+0x24>
   43b08:	28000c16 	blt	r5,zero,43b3c <__modsi3+0x48>
   43b0c:	dfc00017 	ldw	ra,0(sp)
   43b10:	dec00104 	addi	sp,sp,4
   43b14:	0043a181 	jmpi	43a18 <udivmodsi4>
   43b18:	0109c83a 	sub	r4,zero,r4
   43b1c:	28000b16 	blt	r5,zero,43b4c <__modsi3+0x58>
   43b20:	180b883a 	mov	r5,r3
   43b24:	01800044 	movi	r6,1
   43b28:	0043a180 	call	43a18 <udivmodsi4>
   43b2c:	0085c83a 	sub	r2,zero,r2
   43b30:	dfc00017 	ldw	ra,0(sp)
   43b34:	dec00104 	addi	sp,sp,4
   43b38:	f800283a 	ret
   43b3c:	014bc83a 	sub	r5,zero,r5
   43b40:	dfc00017 	ldw	ra,0(sp)
   43b44:	dec00104 	addi	sp,sp,4
   43b48:	0043a181 	jmpi	43a18 <udivmodsi4>
   43b4c:	0147c83a 	sub	r3,zero,r5
   43b50:	003ff306 	br	43b20 <__modsi3+0x2c>

00043b54 <__udivsi3>:
   43b54:	000d883a 	mov	r6,zero
   43b58:	0043a181 	jmpi	43a18 <udivmodsi4>

00043b5c <__umodsi3>:
   43b5c:	01800044 	movi	r6,1
   43b60:	0043a181 	jmpi	43a18 <udivmodsi4>

00043b64 <__mulsi3>:
   43b64:	20000a26 	beq	r4,zero,43b90 <__mulsi3+0x2c>
   43b68:	0007883a 	mov	r3,zero
   43b6c:	2080004c 	andi	r2,r4,1
   43b70:	1005003a 	cmpeq	r2,r2,zero
   43b74:	2008d07a 	srli	r4,r4,1
   43b78:	1000011e 	bne	r2,zero,43b80 <__mulsi3+0x1c>
   43b7c:	1947883a 	add	r3,r3,r5
   43b80:	294b883a 	add	r5,r5,r5
   43b84:	203ff91e 	bne	r4,zero,43b6c <__mulsi3+0x8>
   43b88:	1805883a 	mov	r2,r3
   43b8c:	f800283a 	ret
   43b90:	0007883a 	mov	r3,zero
   43b94:	1805883a 	mov	r2,r3
   43b98:	f800283a 	ret

00043b9c <_Unwind_SjLj_Register>:
   43b9c:	d0a1d517 	ldw	r2,-30892(gp)
   43ba0:	20800015 	stw	r2,0(r4)
   43ba4:	d121d515 	stw	r4,-30892(gp)
   43ba8:	f800283a 	ret

00043bac <_Unwind_SjLj_Unregister>:
   43bac:	20800017 	ldw	r2,0(r4)
   43bb0:	d0a1d515 	stw	r2,-30892(gp)
   43bb4:	f800283a 	ret

00043bb8 <_Unwind_GetGR>:
   43bb8:	20800017 	ldw	r2,0(r4)
   43bbc:	294b883a 	add	r5,r5,r5
   43bc0:	294b883a 	add	r5,r5,r5
   43bc4:	288b883a 	add	r5,r5,r2
   43bc8:	28800217 	ldw	r2,8(r5)
   43bcc:	f800283a 	ret

00043bd0 <_Unwind_GetCFA>:
   43bd0:	21000017 	ldw	r4,0(r4)
   43bd4:	0005883a 	mov	r2,zero
   43bd8:	20000126 	beq	r4,zero,43be0 <_Unwind_GetCFA+0x10>
   43bdc:	20800a17 	ldw	r2,40(r4)
   43be0:	f800283a 	ret

00043be4 <_Unwind_SetGR>:
   43be4:	20800017 	ldw	r2,0(r4)
   43be8:	294b883a 	add	r5,r5,r5
   43bec:	294b883a 	add	r5,r5,r5
   43bf0:	288b883a 	add	r5,r5,r2
   43bf4:	29800215 	stw	r6,8(r5)
   43bf8:	f800283a 	ret

00043bfc <_Unwind_GetIP>:
   43bfc:	20c00017 	ldw	r3,0(r4)
   43c00:	18800117 	ldw	r2,4(r3)
   43c04:	10800044 	addi	r2,r2,1
   43c08:	f800283a 	ret

00043c0c <_Unwind_GetIPInfo>:
   43c0c:	20c00017 	ldw	r3,0(r4)
   43c10:	28000015 	stw	zero,0(r5)
   43c14:	18800117 	ldw	r2,4(r3)
   43c18:	10800044 	addi	r2,r2,1
   43c1c:	f800283a 	ret

00043c20 <_Unwind_SetIP>:
   43c20:	20800017 	ldw	r2,0(r4)
   43c24:	297fffc4 	addi	r5,r5,-1
   43c28:	11400115 	stw	r5,4(r2)
   43c2c:	f800283a 	ret

00043c30 <_Unwind_GetLanguageSpecificData>:
   43c30:	20c00017 	ldw	r3,0(r4)
   43c34:	18800717 	ldw	r2,28(r3)
   43c38:	f800283a 	ret

00043c3c <_Unwind_GetRegionStart>:
   43c3c:	0005883a 	mov	r2,zero
   43c40:	f800283a 	ret

00043c44 <_Unwind_FindEnclosingFunction>:
   43c44:	0005883a 	mov	r2,zero
   43c48:	f800283a 	ret

00043c4c <_Unwind_GetDataRelBase>:
   43c4c:	0005883a 	mov	r2,zero
   43c50:	f800283a 	ret

00043c54 <_Unwind_GetTextRelBase>:
   43c54:	0005883a 	mov	r2,zero
   43c58:	f800283a 	ret

00043c5c <_Unwind_ForcedUnwind_Phase2>:
   43c5c:	defff604 	addi	sp,sp,-40
   43c60:	dd400815 	stw	r21,32(sp)
   43c64:	dd000715 	stw	r20,28(sp)
   43c68:	25400317 	ldw	r21,12(r4)
   43c6c:	25000417 	ldw	r20,16(r4)
   43c70:	28800017 	ldw	r2,0(r5)
   43c74:	dc800515 	stw	r18,20(sp)
   43c78:	dc000315 	stw	r16,12(sp)
   43c7c:	2825883a 	mov	r18,r5
   43c80:	2021883a 	mov	r16,r4
   43c84:	dfc00915 	stw	ra,36(sp)
   43c88:	dcc00615 	stw	r19,24(sp)
   43c8c:	dc400415 	stw	r17,16(sp)
   43c90:	00001406 	br	43ce4 <_Unwind_ForcedUnwind_Phase2+0x88>
   43c94:	00800144 	movi	r2,5
   43c98:	88802626 	beq	r17,r2,43d34 <_Unwind_ForcedUnwind_Phase2+0xd8>
   43c9c:	98000c26 	beq	r19,zero,43cd0 <_Unwind_ForcedUnwind_Phase2+0x74>
   43ca0:	82000017 	ldw	r8,0(r16)
   43ca4:	dc000015 	stw	r16,0(sp)
   43ca8:	dc800115 	stw	r18,4(sp)
   43cac:	82400117 	ldw	r9,4(r16)
   43cb0:	400d883a 	mov	r6,r8
   43cb4:	480f883a 	mov	r7,r9
   43cb8:	983ee83a 	callr	r19
   43cbc:	1023883a 	mov	r17,r2
   43cc0:	008001c4 	movi	r2,7
   43cc4:	88801b26 	beq	r17,r2,43d34 <_Unwind_ForcedUnwind_Phase2+0xd8>
   43cc8:	00800204 	movi	r2,8
   43ccc:	8880181e 	bne	r17,r2,43d30 <_Unwind_ForcedUnwind_Phase2+0xd4>
   43cd0:	91000017 	ldw	r4,0(r18)
   43cd4:	0043bac0 	call	43bac <_Unwind_SjLj_Unregister>
   43cd8:	90800017 	ldw	r2,0(r18)
   43cdc:	10800017 	ldw	r2,0(r2)
   43ce0:	90800015 	stw	r2,0(r18)
   43ce4:	01400684 	movi	r5,26
   43ce8:	04400144 	movi	r17,5
   43cec:	0027883a 	mov	r19,zero
   43cf0:	10000326 	beq	r2,zero,43d00 <_Unwind_ForcedUnwind_Phase2+0xa4>
   43cf4:	14c00617 	ldw	r19,24(r2)
   43cf8:	0023883a 	mov	r17,zero
   43cfc:	01400284 	movi	r5,10
   43d00:	dc000015 	stw	r16,0(sp)
   43d04:	dc800115 	stw	r18,4(sp)
   43d08:	80800017 	ldw	r2,0(r16)
   43d0c:	dd000215 	stw	r20,8(sp)
   43d10:	80c00117 	ldw	r3,4(r16)
   43d14:	01000044 	movi	r4,1
   43d18:	100d883a 	mov	r6,r2
   43d1c:	180f883a 	mov	r7,r3
   43d20:	a83ee83a 	callr	r21
   43d24:	01400284 	movi	r5,10
   43d28:	01000044 	movi	r4,1
   43d2c:	103fd926 	beq	r2,zero,43c94 <_Unwind_ForcedUnwind_Phase2+0x38>
   43d30:	04400084 	movi	r17,2
   43d34:	8805883a 	mov	r2,r17
   43d38:	dfc00917 	ldw	ra,36(sp)
   43d3c:	dd400817 	ldw	r21,32(sp)
   43d40:	dd000717 	ldw	r20,28(sp)
   43d44:	dcc00617 	ldw	r19,24(sp)
   43d48:	dc800517 	ldw	r18,20(sp)
   43d4c:	dc400417 	ldw	r17,16(sp)
   43d50:	dc000317 	ldw	r16,12(sp)
   43d54:	dec00a04 	addi	sp,sp,40
   43d58:	f800283a 	ret

00043d5c <_Unwind_DeleteException>:
   43d5c:	20800217 	ldw	r2,8(r4)
   43d60:	200b883a 	mov	r5,r4
   43d64:	01000044 	movi	r4,1
   43d68:	10000126 	beq	r2,zero,43d70 <_Unwind_DeleteException+0x14>
   43d6c:	1000683a 	jmp	r2
   43d70:	f800283a 	ret

00043d74 <_Unwind_RaiseException_Phase2>:
   43d74:	defffa04 	addi	sp,sp,-24
   43d78:	dc800415 	stw	r18,16(sp)
   43d7c:	2825883a 	mov	r18,r5
   43d80:	29400017 	ldw	r5,0(r5)
   43d84:	dc400315 	stw	r17,12(sp)
   43d88:	dfc00515 	stw	ra,20(sp)
   43d8c:	dc000215 	stw	r16,8(sp)
   43d90:	2023883a 	mov	r17,r4
   43d94:	28001b26 	beq	r5,zero,43e04 <_Unwind_RaiseException_Phase2+0x90>
   43d98:	88800417 	ldw	r2,16(r17)
   43d9c:	0007883a 	mov	r3,zero
   43da0:	2a000617 	ldw	r8,24(r5)
   43da4:	28a1003a 	cmpeq	r16,r5,r2
   43da8:	802090ba 	slli	r16,r16,2
   43dac:	18001b1e 	bne	r3,zero,43e1c <_Unwind_RaiseException_Phase2+0xa8>
   43db0:	40000e26 	beq	r8,zero,43dec <_Unwind_RaiseException_Phase2+0x78>
   43db4:	88800017 	ldw	r2,0(r17)
   43db8:	dc400015 	stw	r17,0(sp)
   43dbc:	dc800115 	stw	r18,4(sp)
   43dc0:	88c00117 	ldw	r3,4(r17)
   43dc4:	01000044 	movi	r4,1
   43dc8:	81400094 	ori	r5,r16,2
   43dcc:	180f883a 	mov	r7,r3
   43dd0:	100d883a 	mov	r6,r2
   43dd4:	403ee83a 	callr	r8
   43dd8:	1007883a 	mov	r3,r2
   43ddc:	008001c4 	movi	r2,7
   43de0:	18800f26 	beq	r3,r2,43e20 <_Unwind_RaiseException_Phase2+0xac>
   43de4:	00800204 	movi	r2,8
   43de8:	18800c1e 	bne	r3,r2,43e1c <_Unwind_RaiseException_Phase2+0xa8>
   43dec:	8000131e 	bne	r16,zero,43e3c <_Unwind_RaiseException_Phase2+0xc8>
   43df0:	91400017 	ldw	r5,0(r18)
   43df4:	28800017 	ldw	r2,0(r5)
   43df8:	100b883a 	mov	r5,r2
   43dfc:	90800015 	stw	r2,0(r18)
   43e00:	283fe51e 	bne	r5,zero,43d98 <_Unwind_RaiseException_Phase2+0x24>
   43e04:	88800417 	ldw	r2,16(r17)
   43e08:	00c00144 	movi	r3,5
   43e0c:	0011883a 	mov	r8,zero
   43e10:	28a1003a 	cmpeq	r16,r5,r2
   43e14:	802090ba 	slli	r16,r16,2
   43e18:	183fe526 	beq	r3,zero,43db0 <_Unwind_RaiseException_Phase2+0x3c>
   43e1c:	00c00084 	movi	r3,2
   43e20:	1805883a 	mov	r2,r3
   43e24:	dfc00517 	ldw	ra,20(sp)
   43e28:	dc800417 	ldw	r18,16(sp)
   43e2c:	dc400317 	ldw	r17,12(sp)
   43e30:	dc000217 	ldw	r16,8(sp)
   43e34:	dec00604 	addi	sp,sp,24
   43e38:	f800283a 	ret
   43e3c:	00445580 	call	44558 <abort>

00043e40 <uw_install_context>:
   43e40:	28800017 	ldw	r2,0(r5)
   43e44:	deffff04 	addi	sp,sp,-4
   43e48:	df000015 	stw	fp,0(sp)
   43e4c:	10c00804 	addi	r3,r2,32
   43e50:	d839883a 	mov	fp,sp
   43e54:	d0a1d515 	stw	r2,-30892(gp)
   43e58:	19000117 	ldw	r4,4(r3)
   43e5c:	1f000017 	ldw	fp,0(r3)
   43e60:	1ec00217 	ldw	sp,8(r3)
   43e64:	2000683a 	jmp	r4

00043e68 <_Unwind_SjLj_Resume>:
   43e68:	d0e1d517 	ldw	r3,-30892(gp)
   43e6c:	20800317 	ldw	r2,12(r4)
   43e70:	defffc04 	addi	sp,sp,-16
   43e74:	dfc00315 	stw	ra,12(sp)
   43e78:	dc000215 	stw	r16,8(sp)
   43e7c:	d8c00015 	stw	r3,0(sp)
   43e80:	d8c00115 	stw	r3,4(sp)
   43e84:	1000071e 	bne	r2,zero,43ea4 <_Unwind_SjLj_Resume+0x3c>
   43e88:	dc000104 	addi	r16,sp,4
   43e8c:	800b883a 	mov	r5,r16
   43e90:	0043d740 	call	43d74 <_Unwind_RaiseException_Phase2>
   43e94:	1007883a 	mov	r3,r2
   43e98:	008001c4 	movi	r2,7
   43e9c:	18800626 	beq	r3,r2,43eb8 <_Unwind_SjLj_Resume+0x50>
   43ea0:	00445580 	call	44558 <abort>
   43ea4:	dc000104 	addi	r16,sp,4
   43ea8:	800b883a 	mov	r5,r16
   43eac:	0043c5c0 	call	43c5c <_Unwind_ForcedUnwind_Phase2>
   43eb0:	1007883a 	mov	r3,r2
   43eb4:	003ff806 	br	43e98 <_Unwind_SjLj_Resume+0x30>
   43eb8:	800b883a 	mov	r5,r16
   43ebc:	d809883a 	mov	r4,sp
   43ec0:	0043e400 	call	43e40 <uw_install_context>

00043ec4 <_Unwind_SjLj_RaiseException>:
   43ec4:	d0a1d517 	ldw	r2,-30892(gp)
   43ec8:	defff804 	addi	sp,sp,-32
   43ecc:	dc000415 	stw	r16,16(sp)
   43ed0:	dfc00715 	stw	ra,28(sp)
   43ed4:	dc800615 	stw	r18,24(sp)
   43ed8:	dc400515 	stw	r17,20(sp)
   43edc:	2021883a 	mov	r16,r4
   43ee0:	d8800215 	stw	r2,8(sp)
   43ee4:	d8800315 	stw	r2,12(sp)
   43ee8:	10001626 	beq	r2,zero,43f44 <_Unwind_SjLj_RaiseException+0x80>
   43eec:	dc400304 	addi	r17,sp,12
   43ef0:	04800184 	movi	r18,6
   43ef4:	00000106 	br	43efc <_Unwind_SjLj_RaiseException+0x38>
   43ef8:	d8800315 	stw	r2,12(sp)
   43efc:	12000617 	ldw	r8,24(r2)
   43f00:	40000d26 	beq	r8,zero,43f38 <_Unwind_SjLj_RaiseException+0x74>
   43f04:	80800017 	ldw	r2,0(r16)
   43f08:	dc000015 	stw	r16,0(sp)
   43f0c:	80c00117 	ldw	r3,4(r16)
   43f10:	01000044 	movi	r4,1
   43f14:	dc400115 	stw	r17,4(sp)
   43f18:	180f883a 	mov	r7,r3
   43f1c:	200b883a 	mov	r5,r4
   43f20:	100d883a 	mov	r6,r2
   43f24:	403ee83a 	callr	r8
   43f28:	1007883a 	mov	r3,r2
   43f2c:	14800d26 	beq	r2,r18,43f64 <_Unwind_SjLj_RaiseException+0xa0>
   43f30:	00800204 	movi	r2,8
   43f34:	1880191e 	bne	r3,r2,43f9c <_Unwind_SjLj_RaiseException+0xd8>
   43f38:	d8800317 	ldw	r2,12(sp)
   43f3c:	10800017 	ldw	r2,0(r2)
   43f40:	103fed1e 	bne	r2,zero,43ef8 <_Unwind_SjLj_RaiseException+0x34>
   43f44:	00c00144 	movi	r3,5
   43f48:	1805883a 	mov	r2,r3
   43f4c:	dfc00717 	ldw	ra,28(sp)
   43f50:	dc800617 	ldw	r18,24(sp)
   43f54:	dc400517 	ldw	r17,20(sp)
   43f58:	dc000417 	ldw	r16,16(sp)
   43f5c:	dec00804 	addi	sp,sp,32
   43f60:	f800283a 	ret
   43f64:	d8800317 	ldw	r2,12(sp)
   43f68:	80000315 	stw	zero,12(r16)
   43f6c:	8009883a 	mov	r4,r16
   43f70:	80800415 	stw	r2,16(r16)
   43f74:	d8800217 	ldw	r2,8(sp)
   43f78:	880b883a 	mov	r5,r17
   43f7c:	d8800315 	stw	r2,12(sp)
   43f80:	0043d740 	call	43d74 <_Unwind_RaiseException_Phase2>
   43f84:	1007883a 	mov	r3,r2
   43f88:	008001c4 	movi	r2,7
   43f8c:	18bfee1e 	bne	r3,r2,43f48 <_Unwind_SjLj_RaiseException+0x84>
   43f90:	880b883a 	mov	r5,r17
   43f94:	d9000204 	addi	r4,sp,8
   43f98:	0043e400 	call	43e40 <uw_install_context>
   43f9c:	00c000c4 	movi	r3,3
   43fa0:	1805883a 	mov	r2,r3
   43fa4:	dfc00717 	ldw	ra,28(sp)
   43fa8:	dc800617 	ldw	r18,24(sp)
   43fac:	dc400517 	ldw	r17,20(sp)
   43fb0:	dc000417 	ldw	r16,16(sp)
   43fb4:	dec00804 	addi	sp,sp,32
   43fb8:	f800283a 	ret

00043fbc <_Unwind_SjLj_ForcedUnwind>:
   43fbc:	defffc04 	addi	sp,sp,-16
   43fc0:	d0a1d517 	ldw	r2,-30892(gp)
   43fc4:	dc000215 	stw	r16,8(sp)
   43fc8:	dc000104 	addi	r16,sp,4
   43fcc:	21400315 	stw	r5,12(r4)
   43fd0:	21800415 	stw	r6,16(r4)
   43fd4:	800b883a 	mov	r5,r16
   43fd8:	dfc00315 	stw	ra,12(sp)
   43fdc:	d8800015 	stw	r2,0(sp)
   43fe0:	d8800115 	stw	r2,4(sp)
   43fe4:	0043c5c0 	call	43c5c <_Unwind_ForcedUnwind_Phase2>
   43fe8:	00c001c4 	movi	r3,7
   43fec:	10c00426 	beq	r2,r3,44000 <_Unwind_SjLj_ForcedUnwind+0x44>
   43ff0:	dfc00317 	ldw	ra,12(sp)
   43ff4:	dc000217 	ldw	r16,8(sp)
   43ff8:	dec00404 	addi	sp,sp,16
   43ffc:	f800283a 	ret
   44000:	800b883a 	mov	r5,r16
   44004:	d809883a 	mov	r4,sp
   44008:	0043e400 	call	43e40 <uw_install_context>

0004400c <_Unwind_Backtrace>:
   4400c:	d0a1d517 	ldw	r2,-30892(gp)
   44010:	defffa04 	addi	sp,sp,-24
   44014:	dcc00415 	stw	r19,16(sp)
   44018:	dc800315 	stw	r18,12(sp)
   4401c:	dc400215 	stw	r17,8(sp)
   44020:	2025883a 	mov	r18,r4
   44024:	2823883a 	mov	r17,r5
   44028:	04c00144 	movi	r19,5
   4402c:	dfc00515 	stw	ra,20(sp)
   44030:	dc000115 	stw	r16,4(sp)
   44034:	d8800015 	stw	r2,0(sp)
   44038:	00000406 	br	4404c <_Unwind_Backtrace+0x40>
   4403c:	84c00b26 	beq	r16,r19,4406c <_Unwind_Backtrace+0x60>
   44040:	d8800017 	ldw	r2,0(sp)
   44044:	10800017 	ldw	r2,0(r2)
   44048:	d8800015 	stw	r2,0(sp)
   4404c:	04000144 	movi	r16,5
   44050:	10000126 	beq	r2,zero,44058 <_Unwind_Backtrace+0x4c>
   44054:	0021883a 	mov	r16,zero
   44058:	d809883a 	mov	r4,sp
   4405c:	880b883a 	mov	r5,r17
   44060:	903ee83a 	callr	r18
   44064:	103ff526 	beq	r2,zero,4403c <_Unwind_Backtrace+0x30>
   44068:	040000c4 	movi	r16,3
   4406c:	8005883a 	mov	r2,r16
   44070:	dfc00517 	ldw	ra,20(sp)
   44074:	dcc00417 	ldw	r19,16(sp)
   44078:	dc800317 	ldw	r18,12(sp)
   4407c:	dc400217 	ldw	r17,8(sp)
   44080:	dc000117 	ldw	r16,4(sp)
   44084:	dec00604 	addi	sp,sp,24
   44088:	f800283a 	ret

0004408c <_Unwind_SjLj_Resume_or_Rethrow>:
   4408c:	20800317 	ldw	r2,12(r4)
   44090:	defffc04 	addi	sp,sp,-16
   44094:	dfc00315 	stw	ra,12(sp)
   44098:	dc000215 	stw	r16,8(sp)
   4409c:	10000926 	beq	r2,zero,440c4 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   440a0:	d0a1d517 	ldw	r2,-30892(gp)
   440a4:	dc000104 	addi	r16,sp,4
   440a8:	800b883a 	mov	r5,r16
   440ac:	d8800015 	stw	r2,0(sp)
   440b0:	d8800115 	stw	r2,4(sp)
   440b4:	0043c5c0 	call	43c5c <_Unwind_ForcedUnwind_Phase2>
   440b8:	00c001c4 	movi	r3,7
   440bc:	10c00626 	beq	r2,r3,440d8 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   440c0:	00445580 	call	44558 <abort>
   440c4:	0043ec40 	call	43ec4 <_Unwind_SjLj_RaiseException>
   440c8:	dfc00317 	ldw	ra,12(sp)
   440cc:	dc000217 	ldw	r16,8(sp)
   440d0:	dec00404 	addi	sp,sp,16
   440d4:	f800283a 	ret
   440d8:	800b883a 	mov	r5,r16
   440dc:	d809883a 	mov	r4,sp
   440e0:	0043e400 	call	43e40 <uw_install_context>

000440e4 <__muldi3>:
   440e4:	defff204 	addi	sp,sp,-56
   440e8:	df000c15 	stw	fp,48(sp)
   440ec:	3038d43a 	srli	fp,r6,16
   440f0:	dd000815 	stw	r20,32(sp)
   440f4:	dc400515 	stw	r17,20(sp)
   440f8:	2028d43a 	srli	r20,r4,16
   440fc:	247fffcc 	andi	r17,r4,65535
   44100:	dc000415 	stw	r16,16(sp)
   44104:	343fffcc 	andi	r16,r6,65535
   44108:	dcc00715 	stw	r19,28(sp)
   4410c:	d9000015 	stw	r4,0(sp)
   44110:	2827883a 	mov	r19,r5
   44114:	8809883a 	mov	r4,r17
   44118:	d9400115 	stw	r5,4(sp)
   4411c:	800b883a 	mov	r5,r16
   44120:	d9800215 	stw	r6,8(sp)
   44124:	dfc00d15 	stw	ra,52(sp)
   44128:	d9c00315 	stw	r7,12(sp)
   4412c:	dd800a15 	stw	r22,40(sp)
   44130:	dd400915 	stw	r21,36(sp)
   44134:	302d883a 	mov	r22,r6
   44138:	ddc00b15 	stw	r23,44(sp)
   4413c:	dc800615 	stw	r18,24(sp)
   44140:	0043b640 	call	43b64 <__mulsi3>
   44144:	8809883a 	mov	r4,r17
   44148:	e00b883a 	mov	r5,fp
   4414c:	102b883a 	mov	r21,r2
   44150:	0043b640 	call	43b64 <__mulsi3>
   44154:	800b883a 	mov	r5,r16
   44158:	a009883a 	mov	r4,r20
   4415c:	1023883a 	mov	r17,r2
   44160:	0043b640 	call	43b64 <__mulsi3>
   44164:	a009883a 	mov	r4,r20
   44168:	e00b883a 	mov	r5,fp
   4416c:	1021883a 	mov	r16,r2
   44170:	0043b640 	call	43b64 <__mulsi3>
   44174:	a8ffffcc 	andi	r3,r21,65535
   44178:	a82ad43a 	srli	r21,r21,16
   4417c:	8c23883a 	add	r17,r17,r16
   44180:	1011883a 	mov	r8,r2
   44184:	ac6b883a 	add	r21,r21,r17
   44188:	a804943a 	slli	r2,r21,16
   4418c:	b009883a 	mov	r4,r22
   44190:	980b883a 	mov	r5,r19
   44194:	10c7883a 	add	r3,r2,r3
   44198:	a812d43a 	srli	r9,r21,16
   4419c:	180d883a 	mov	r6,r3
   441a0:	ac00022e 	bgeu	r21,r16,441ac <__muldi3+0xc8>
   441a4:	00800074 	movhi	r2,1
   441a8:	4091883a 	add	r8,r8,r2
   441ac:	4267883a 	add	r19,r8,r9
   441b0:	302d883a 	mov	r22,r6
   441b4:	0043b640 	call	43b64 <__mulsi3>
   441b8:	d9400317 	ldw	r5,12(sp)
   441bc:	d9000017 	ldw	r4,0(sp)
   441c0:	1023883a 	mov	r17,r2
   441c4:	0043b640 	call	43b64 <__mulsi3>
   441c8:	14cb883a 	add	r5,r2,r19
   441cc:	894b883a 	add	r5,r17,r5
   441d0:	b005883a 	mov	r2,r22
   441d4:	2807883a 	mov	r3,r5
   441d8:	dfc00d17 	ldw	ra,52(sp)
   441dc:	df000c17 	ldw	fp,48(sp)
   441e0:	ddc00b17 	ldw	r23,44(sp)
   441e4:	dd800a17 	ldw	r22,40(sp)
   441e8:	dd400917 	ldw	r21,36(sp)
   441ec:	dd000817 	ldw	r20,32(sp)
   441f0:	dcc00717 	ldw	r19,28(sp)
   441f4:	dc800617 	ldw	r18,24(sp)
   441f8:	dc400517 	ldw	r17,20(sp)
   441fc:	dc000417 	ldw	r16,16(sp)
   44200:	dec00e04 	addi	sp,sp,56
   44204:	f800283a 	ret

00044208 <__clzsi2>:
   44208:	00bfffd4 	movui	r2,65535
   4420c:	11000e36 	bltu	r2,r4,44248 <__clzsi2+0x40>
   44210:	00803fc4 	movi	r2,255
   44214:	01400204 	movi	r5,8
   44218:	0007883a 	mov	r3,zero
   4421c:	11001036 	bltu	r2,r4,44260 <__clzsi2+0x58>
   44220:	000b883a 	mov	r5,zero
   44224:	20c6d83a 	srl	r3,r4,r3
   44228:	00800134 	movhi	r2,4
   4422c:	1099b904 	addi	r2,r2,26340
   44230:	1887883a 	add	r3,r3,r2
   44234:	18800003 	ldbu	r2,0(r3)
   44238:	00c00804 	movi	r3,32
   4423c:	2885883a 	add	r2,r5,r2
   44240:	1885c83a 	sub	r2,r3,r2
   44244:	f800283a 	ret
   44248:	01400404 	movi	r5,16
   4424c:	00804034 	movhi	r2,256
   44250:	10bfffc4 	addi	r2,r2,-1
   44254:	2807883a 	mov	r3,r5
   44258:	113ff22e 	bgeu	r2,r4,44224 <__clzsi2+0x1c>
   4425c:	01400604 	movi	r5,24
   44260:	2807883a 	mov	r3,r5
   44264:	20c6d83a 	srl	r3,r4,r3
   44268:	00800134 	movhi	r2,4
   4426c:	1099b904 	addi	r2,r2,26340
   44270:	1887883a 	add	r3,r3,r2
   44274:	18800003 	ldbu	r2,0(r3)
   44278:	00c00804 	movi	r3,32
   4427c:	2885883a 	add	r2,r5,r2
   44280:	1885c83a 	sub	r2,r3,r2
   44284:	f800283a 	ret

00044288 <__pack_f>:
   44288:	20c00017 	ldw	r3,0(r4)
   4428c:	01c00044 	movi	r7,1
   44290:	21800317 	ldw	r6,12(r4)
   44294:	21400117 	ldw	r5,4(r4)
   44298:	38c02d2e 	bgeu	r7,r3,44350 <__pack_f+0xc8>
   4429c:	00800104 	movi	r2,4
   442a0:	18802826 	beq	r3,r2,44344 <__pack_f+0xbc>
   442a4:	00800084 	movi	r2,2
   442a8:	18800126 	beq	r3,r2,442b0 <__pack_f+0x28>
   442ac:	3000101e 	bne	r6,zero,442f0 <__pack_f+0x68>
   442b0:	000d883a 	mov	r6,zero
   442b4:	0007883a 	mov	r3,zero
   442b8:	19003fcc 	andi	r4,r3,255
   442bc:	200895fa 	slli	r4,r4,23
   442c0:	00c02034 	movhi	r3,128
   442c4:	18ffffc4 	addi	r3,r3,-1
   442c8:	30c6703a 	and	r3,r6,r3
   442cc:	10a0002c 	andhi	r2,r2,32768
   442d0:	10c4b03a 	or	r2,r2,r3
   442d4:	280a97fa 	slli	r5,r5,31
   442d8:	1104b03a 	or	r2,r2,r4
   442dc:	00e00034 	movhi	r3,32768
   442e0:	18ffffc4 	addi	r3,r3,-1
   442e4:	10c4703a 	and	r2,r2,r3
   442e8:	1144b03a 	or	r2,r2,r5
   442ec:	f800283a 	ret
   442f0:	21000217 	ldw	r4,8(r4)
   442f4:	00bfe084 	movi	r2,-126
   442f8:	20801b16 	blt	r4,r2,44368 <__pack_f+0xe0>
   442fc:	00801fc4 	movi	r2,127
   44300:	11001016 	blt	r2,r4,44344 <__pack_f+0xbc>
   44304:	308e703a 	and	r7,r6,r2
   44308:	2087883a 	add	r3,r4,r2
   4430c:	00801004 	movi	r2,64
   44310:	38800526 	beq	r7,r2,44328 <__pack_f+0xa0>
   44314:	31800fc4 	addi	r6,r6,63
   44318:	30000716 	blt	r6,zero,44338 <__pack_f+0xb0>
   4431c:	300490ba 	slli	r2,r6,2
   44320:	100cd27a 	srli	r6,r2,9
   44324:	003fe406 	br	442b8 <__pack_f+0x30>
   44328:	3080200c 	andi	r2,r6,128
   4432c:	103ffa26 	beq	r2,zero,44318 <__pack_f+0x90>
   44330:	31cd883a 	add	r6,r6,r7
   44334:	003ff806 	br	44318 <__pack_f+0x90>
   44338:	300cd07a 	srli	r6,r6,1
   4433c:	18c00044 	addi	r3,r3,1
   44340:	003ff606 	br	4431c <__pack_f+0x94>
   44344:	000d883a 	mov	r6,zero
   44348:	00ffffc4 	movi	r3,-1
   4434c:	003fda06 	br	442b8 <__pack_f+0x30>
   44350:	31800434 	orhi	r6,r6,16
   44354:	00802034 	movhi	r2,128
   44358:	10bfffc4 	addi	r2,r2,-1
   4435c:	308c703a 	and	r6,r6,r2
   44360:	00ffffc4 	movi	r3,-1
   44364:	003fd406 	br	442b8 <__pack_f+0x30>
   44368:	1109c83a 	sub	r4,r2,r4
   4436c:	00800644 	movi	r2,25
   44370:	11001216 	blt	r2,r4,443bc <__pack_f+0x134>
   44374:	3904983a 	sll	r2,r7,r4
   44378:	3106d83a 	srl	r3,r6,r4
   4437c:	10bfffc4 	addi	r2,r2,-1
   44380:	3084703a 	and	r2,r6,r2
   44384:	1004c03a 	cmpne	r2,r2,zero
   44388:	1886b03a 	or	r3,r3,r2
   4438c:	19001fcc 	andi	r4,r3,127
   44390:	00801004 	movi	r2,64
   44394:	20800c26 	beq	r4,r2,443c8 <__pack_f+0x140>
   44398:	18c00fc4 	addi	r3,r3,63
   4439c:	00900034 	movhi	r2,16384
   443a0:	10bfffc4 	addi	r2,r2,-1
   443a4:	180cd1fa 	srli	r6,r3,7
   443a8:	10c7803a 	cmpltu	r3,r2,r3
   443ac:	00802034 	movhi	r2,128
   443b0:	10bfffc4 	addi	r2,r2,-1
   443b4:	308c703a 	and	r6,r6,r2
   443b8:	003fbf06 	br	442b8 <__pack_f+0x30>
   443bc:	0007883a 	mov	r3,zero
   443c0:	000d883a 	mov	r6,zero
   443c4:	003ff906 	br	443ac <__pack_f+0x124>
   443c8:	1880200c 	andi	r2,r3,128
   443cc:	10000126 	beq	r2,zero,443d4 <__pack_f+0x14c>
   443d0:	1907883a 	add	r3,r3,r4
   443d4:	180cd1fa 	srli	r6,r3,7
   443d8:	00900034 	movhi	r2,16384
   443dc:	10bfffc4 	addi	r2,r2,-1
   443e0:	10c7803a 	cmpltu	r3,r2,r3
   443e4:	003ff106 	br	443ac <__pack_f+0x124>

000443e8 <__unpack_f>:
   443e8:	21800017 	ldw	r6,0(r4)
   443ec:	00c02034 	movhi	r3,128
   443f0:	18ffffc4 	addi	r3,r3,-1
   443f4:	3004d5fa 	srli	r2,r6,23
   443f8:	3008d7fa 	srli	r4,r6,31
   443fc:	30ce703a 	and	r7,r6,r3
   44400:	10c03fcc 	andi	r3,r2,255
   44404:	29000115 	stw	r4,4(r5)
   44408:	1800131e 	bne	r3,zero,44458 <__unpack_f+0x70>
   4440c:	38000f26 	beq	r7,zero,4444c <__unpack_f+0x64>
   44410:	380691fa 	slli	r3,r7,7
   44414:	01bfe084 	movi	r6,-126
   44418:	008000c4 	movi	r2,3
   4441c:	01100034 	movhi	r4,16384
   44420:	213fffc4 	addi	r4,r4,-1
   44424:	28800015 	stw	r2,0(r5)
   44428:	29800215 	stw	r6,8(r5)
   4442c:	20c00536 	bltu	r4,r3,44444 <__unpack_f+0x5c>
   44430:	3005883a 	mov	r2,r6
   44434:	18c7883a 	add	r3,r3,r3
   44438:	10bfffc4 	addi	r2,r2,-1
   4443c:	20fffd2e 	bgeu	r4,r3,44434 <__unpack_f+0x4c>
   44440:	28800215 	stw	r2,8(r5)
   44444:	28c00315 	stw	r3,12(r5)
   44448:	f800283a 	ret
   4444c:	00800084 	movi	r2,2
   44450:	28800015 	stw	r2,0(r5)
   44454:	f800283a 	ret
   44458:	00803fc4 	movi	r2,255
   4445c:	18800826 	beq	r3,r2,44480 <__unpack_f+0x98>
   44460:	380491fa 	slli	r2,r7,7
   44464:	18ffe044 	addi	r3,r3,-127
   44468:	28c00215 	stw	r3,8(r5)
   4446c:	10900034 	orhi	r2,r2,16384
   44470:	28800315 	stw	r2,12(r5)
   44474:	008000c4 	movi	r2,3
   44478:	28800015 	stw	r2,0(r5)
   4447c:	f800283a 	ret
   44480:	3800031e 	bne	r7,zero,44490 <__unpack_f+0xa8>
   44484:	00800104 	movi	r2,4
   44488:	28800015 	stw	r2,0(r5)
   4448c:	f800283a 	ret
   44490:	3080042c 	andhi	r2,r6,16
   44494:	10000426 	beq	r2,zero,444a8 <__unpack_f+0xc0>
   44498:	00800044 	movi	r2,1
   4449c:	28800015 	stw	r2,0(r5)
   444a0:	29c00315 	stw	r7,12(r5)
   444a4:	f800283a 	ret
   444a8:	28000015 	stw	zero,0(r5)
   444ac:	003ffc06 	br	444a0 <__unpack_f+0xb8>

000444b0 <__fpcmp_parts_f>:
   444b0:	21800017 	ldw	r6,0(r4)
   444b4:	00c00044 	movi	r3,1
   444b8:	19800a2e 	bgeu	r3,r6,444e4 <__fpcmp_parts_f+0x34>
   444bc:	28800017 	ldw	r2,0(r5)
   444c0:	1880082e 	bgeu	r3,r2,444e4 <__fpcmp_parts_f+0x34>
   444c4:	00c00104 	movi	r3,4
   444c8:	30c01e26 	beq	r6,r3,44544 <__fpcmp_parts_f+0x94>
   444cc:	10c01a26 	beq	r2,r3,44538 <__fpcmp_parts_f+0x88>
   444d0:	00c00084 	movi	r3,2
   444d4:	30c00526 	beq	r6,r3,444ec <__fpcmp_parts_f+0x3c>
   444d8:	10c0071e 	bne	r2,r3,444f8 <__fpcmp_parts_f+0x48>
   444dc:	20800117 	ldw	r2,4(r4)
   444e0:	1000091e 	bne	r2,zero,44508 <__fpcmp_parts_f+0x58>
   444e4:	00800044 	movi	r2,1
   444e8:	f800283a 	ret
   444ec:	10c0121e 	bne	r2,r3,44538 <__fpcmp_parts_f+0x88>
   444f0:	0005883a 	mov	r2,zero
   444f4:	f800283a 	ret
   444f8:	20c00117 	ldw	r3,4(r4)
   444fc:	28800117 	ldw	r2,4(r5)
   44500:	18800326 	beq	r3,r2,44510 <__fpcmp_parts_f+0x60>
   44504:	183ff726 	beq	r3,zero,444e4 <__fpcmp_parts_f+0x34>
   44508:	00bfffc4 	movi	r2,-1
   4450c:	f800283a 	ret
   44510:	21800217 	ldw	r6,8(r4)
   44514:	28800217 	ldw	r2,8(r5)
   44518:	11bffa16 	blt	r2,r6,44504 <__fpcmp_parts_f+0x54>
   4451c:	30800416 	blt	r6,r2,44530 <__fpcmp_parts_f+0x80>
   44520:	21000317 	ldw	r4,12(r4)
   44524:	29400317 	ldw	r5,12(r5)
   44528:	293ff636 	bltu	r5,r4,44504 <__fpcmp_parts_f+0x54>
   4452c:	217ff02e 	bgeu	r4,r5,444f0 <__fpcmp_parts_f+0x40>
   44530:	183fec1e 	bne	r3,zero,444e4 <__fpcmp_parts_f+0x34>
   44534:	003ff406 	br	44508 <__fpcmp_parts_f+0x58>
   44538:	28800117 	ldw	r2,4(r5)
   4453c:	103fe91e 	bne	r2,zero,444e4 <__fpcmp_parts_f+0x34>
   44540:	003ff106 	br	44508 <__fpcmp_parts_f+0x58>
   44544:	11bfe51e 	bne	r2,r6,444dc <__fpcmp_parts_f+0x2c>
   44548:	28c00117 	ldw	r3,4(r5)
   4454c:	20800117 	ldw	r2,4(r4)
   44550:	1885c83a 	sub	r2,r3,r2
   44554:	f800283a 	ret

00044558 <abort>:
   44558:	deffff04 	addi	sp,sp,-4
   4455c:	01000184 	movi	r4,6
   44560:	dfc00015 	stw	ra,0(sp)
   44564:	0044e340 	call	44e34 <raise>
   44568:	01000044 	movi	r4,1
   4456c:	00455a80 	call	455a8 <_exit>

00044570 <free>:
   44570:	00800134 	movhi	r2,4
   44574:	109ba904 	addi	r2,r2,28324
   44578:	200b883a 	mov	r5,r4
   4457c:	11000017 	ldw	r4,0(r2)
   44580:	00452541 	jmpi	45254 <_free_r>

00044584 <malloc>:
   44584:	00800134 	movhi	r2,4
   44588:	109ba904 	addi	r2,r2,28324
   4458c:	200b883a 	mov	r5,r4
   44590:	11000017 	ldw	r4,0(r2)
   44594:	00445981 	jmpi	44598 <_malloc_r>

00044598 <_malloc_r>:
   44598:	defff604 	addi	sp,sp,-40
   4459c:	28c002c4 	addi	r3,r5,11
   445a0:	00800584 	movi	r2,22
   445a4:	dc800215 	stw	r18,8(sp)
   445a8:	dfc00915 	stw	ra,36(sp)
   445ac:	df000815 	stw	fp,32(sp)
   445b0:	ddc00715 	stw	r23,28(sp)
   445b4:	dd800615 	stw	r22,24(sp)
   445b8:	dd400515 	stw	r21,20(sp)
   445bc:	dd000415 	stw	r20,16(sp)
   445c0:	dcc00315 	stw	r19,12(sp)
   445c4:	dc400115 	stw	r17,4(sp)
   445c8:	dc000015 	stw	r16,0(sp)
   445cc:	2025883a 	mov	r18,r4
   445d0:	10c01236 	bltu	r2,r3,4461c <_malloc_r+0x84>
   445d4:	04400404 	movi	r17,16
   445d8:	8940142e 	bgeu	r17,r5,4462c <_malloc_r+0x94>
   445dc:	00800304 	movi	r2,12
   445e0:	0007883a 	mov	r3,zero
   445e4:	90800015 	stw	r2,0(r18)
   445e8:	1805883a 	mov	r2,r3
   445ec:	dfc00917 	ldw	ra,36(sp)
   445f0:	df000817 	ldw	fp,32(sp)
   445f4:	ddc00717 	ldw	r23,28(sp)
   445f8:	dd800617 	ldw	r22,24(sp)
   445fc:	dd400517 	ldw	r21,20(sp)
   44600:	dd000417 	ldw	r20,16(sp)
   44604:	dcc00317 	ldw	r19,12(sp)
   44608:	dc800217 	ldw	r18,8(sp)
   4460c:	dc400117 	ldw	r17,4(sp)
   44610:	dc000017 	ldw	r16,0(sp)
   44614:	dec00a04 	addi	sp,sp,40
   44618:	f800283a 	ret
   4461c:	00bffe04 	movi	r2,-8
   44620:	18a2703a 	and	r17,r3,r2
   44624:	883fed16 	blt	r17,zero,445dc <_malloc_r+0x44>
   44628:	897fec36 	bltu	r17,r5,445dc <_malloc_r+0x44>
   4462c:	9009883a 	mov	r4,r18
   44630:	00459340 	call	45934 <__malloc_lock>
   44634:	00807dc4 	movi	r2,503
   44638:	14402b2e 	bgeu	r2,r17,446e8 <_malloc_r+0x150>
   4463c:	8806d27a 	srli	r3,r17,9
   44640:	18003f1e 	bne	r3,zero,44740 <_malloc_r+0x1a8>
   44644:	880cd0fa 	srli	r6,r17,3
   44648:	300490fa 	slli	r2,r6,3
   4464c:	02c00134 	movhi	r11,4
   44650:	5ad9fc04 	addi	r11,r11,26608
   44654:	12cb883a 	add	r5,r2,r11
   44658:	2c000317 	ldw	r16,12(r5)
   4465c:	580f883a 	mov	r7,r11
   44660:	2c00041e 	bne	r5,r16,44674 <_malloc_r+0xdc>
   44664:	00000a06 	br	44690 <_malloc_r+0xf8>
   44668:	1800860e 	bge	r3,zero,44884 <_malloc_r+0x2ec>
   4466c:	84000317 	ldw	r16,12(r16)
   44670:	2c000726 	beq	r5,r16,44690 <_malloc_r+0xf8>
   44674:	80800117 	ldw	r2,4(r16)
   44678:	00ffff04 	movi	r3,-4
   4467c:	10c8703a 	and	r4,r2,r3
   44680:	2447c83a 	sub	r3,r4,r17
   44684:	008003c4 	movi	r2,15
   44688:	10fff70e 	bge	r2,r3,44668 <_malloc_r+0xd0>
   4468c:	31bfffc4 	addi	r6,r6,-1
   44690:	32400044 	addi	r9,r6,1
   44694:	02800134 	movhi	r10,4
   44698:	5299fe04 	addi	r10,r10,26616
   4469c:	54000217 	ldw	r16,8(r10)
   446a0:	8280a026 	beq	r16,r10,44924 <_malloc_r+0x38c>
   446a4:	80800117 	ldw	r2,4(r16)
   446a8:	00ffff04 	movi	r3,-4
   446ac:	10ca703a 	and	r5,r2,r3
   446b0:	2c4dc83a 	sub	r6,r5,r17
   446b4:	008003c4 	movi	r2,15
   446b8:	11808316 	blt	r2,r6,448c8 <_malloc_r+0x330>
   446bc:	52800315 	stw	r10,12(r10)
   446c0:	52800215 	stw	r10,8(r10)
   446c4:	30002916 	blt	r6,zero,4476c <_malloc_r+0x1d4>
   446c8:	8147883a 	add	r3,r16,r5
   446cc:	18800117 	ldw	r2,4(r3)
   446d0:	9009883a 	mov	r4,r18
   446d4:	10800054 	ori	r2,r2,1
   446d8:	18800115 	stw	r2,4(r3)
   446dc:	00459540 	call	45954 <__malloc_unlock>
   446e0:	80c00204 	addi	r3,r16,8
   446e4:	003fc006 	br	445e8 <_malloc_r+0x50>
   446e8:	02c00134 	movhi	r11,4
   446ec:	5ad9fc04 	addi	r11,r11,26608
   446f0:	8ac5883a 	add	r2,r17,r11
   446f4:	14000317 	ldw	r16,12(r2)
   446f8:	580f883a 	mov	r7,r11
   446fc:	8806d0fa 	srli	r3,r17,3
   44700:	14006c26 	beq	r2,r16,448b4 <_malloc_r+0x31c>
   44704:	80c00117 	ldw	r3,4(r16)
   44708:	00bfff04 	movi	r2,-4
   4470c:	81800317 	ldw	r6,12(r16)
   44710:	1886703a 	and	r3,r3,r2
   44714:	80c7883a 	add	r3,r16,r3
   44718:	18800117 	ldw	r2,4(r3)
   4471c:	81400217 	ldw	r5,8(r16)
   44720:	9009883a 	mov	r4,r18
   44724:	10800054 	ori	r2,r2,1
   44728:	18800115 	stw	r2,4(r3)
   4472c:	31400215 	stw	r5,8(r6)
   44730:	29800315 	stw	r6,12(r5)
   44734:	00459540 	call	45954 <__malloc_unlock>
   44738:	80c00204 	addi	r3,r16,8
   4473c:	003faa06 	br	445e8 <_malloc_r+0x50>
   44740:	00800104 	movi	r2,4
   44744:	10c0052e 	bgeu	r2,r3,4475c <_malloc_r+0x1c4>
   44748:	00800504 	movi	r2,20
   4474c:	10c07836 	bltu	r2,r3,44930 <_malloc_r+0x398>
   44750:	198016c4 	addi	r6,r3,91
   44754:	300490fa 	slli	r2,r6,3
   44758:	003fbc06 	br	4464c <_malloc_r+0xb4>
   4475c:	8804d1ba 	srli	r2,r17,6
   44760:	11800e04 	addi	r6,r2,56
   44764:	300490fa 	slli	r2,r6,3
   44768:	003fb806 	br	4464c <_malloc_r+0xb4>
   4476c:	00807fc4 	movi	r2,511
   44770:	1140bb36 	bltu	r2,r5,44a60 <_malloc_r+0x4c8>
   44774:	2806d0fa 	srli	r3,r5,3
   44778:	573ffe04 	addi	fp,r10,-8
   4477c:	00800044 	movi	r2,1
   44780:	180890fa 	slli	r4,r3,3
   44784:	1807d0ba 	srai	r3,r3,2
   44788:	e1c00117 	ldw	r7,4(fp)
   4478c:	5909883a 	add	r4,r11,r4
   44790:	21400217 	ldw	r5,8(r4)
   44794:	10c4983a 	sll	r2,r2,r3
   44798:	81000315 	stw	r4,12(r16)
   4479c:	81400215 	stw	r5,8(r16)
   447a0:	388eb03a 	or	r7,r7,r2
   447a4:	2c000315 	stw	r16,12(r5)
   447a8:	24000215 	stw	r16,8(r4)
   447ac:	e1c00115 	stw	r7,4(fp)
   447b0:	4807883a 	mov	r3,r9
   447b4:	4800cd16 	blt	r9,zero,44aec <_malloc_r+0x554>
   447b8:	1807d0ba 	srai	r3,r3,2
   447bc:	00800044 	movi	r2,1
   447c0:	10c8983a 	sll	r4,r2,r3
   447c4:	39004436 	bltu	r7,r4,448d8 <_malloc_r+0x340>
   447c8:	21c4703a 	and	r2,r4,r7
   447cc:	10000a1e 	bne	r2,zero,447f8 <_malloc_r+0x260>
   447d0:	2109883a 	add	r4,r4,r4
   447d4:	00bfff04 	movi	r2,-4
   447d8:	4884703a 	and	r2,r9,r2
   447dc:	3906703a 	and	r3,r7,r4
   447e0:	12400104 	addi	r9,r2,4
   447e4:	1800041e 	bne	r3,zero,447f8 <_malloc_r+0x260>
   447e8:	2109883a 	add	r4,r4,r4
   447ec:	3904703a 	and	r2,r7,r4
   447f0:	4a400104 	addi	r9,r9,4
   447f4:	103ffc26 	beq	r2,zero,447e8 <_malloc_r+0x250>
   447f8:	480490fa 	slli	r2,r9,3
   447fc:	4819883a 	mov	r12,r9
   44800:	023fff04 	movi	r8,-4
   44804:	589b883a 	add	r13,r11,r2
   44808:	6807883a 	mov	r3,r13
   4480c:	014003c4 	movi	r5,15
   44810:	1c000317 	ldw	r16,12(r3)
   44814:	1c00041e 	bne	r3,r16,44828 <_malloc_r+0x290>
   44818:	0000a706 	br	44ab8 <_malloc_r+0x520>
   4481c:	3000ab0e 	bge	r6,zero,44acc <_malloc_r+0x534>
   44820:	84000317 	ldw	r16,12(r16)
   44824:	1c00a426 	beq	r3,r16,44ab8 <_malloc_r+0x520>
   44828:	80800117 	ldw	r2,4(r16)
   4482c:	1204703a 	and	r2,r2,r8
   44830:	144dc83a 	sub	r6,r2,r17
   44834:	29bff90e 	bge	r5,r6,4481c <_malloc_r+0x284>
   44838:	81000317 	ldw	r4,12(r16)
   4483c:	80c00217 	ldw	r3,8(r16)
   44840:	89400054 	ori	r5,r17,1
   44844:	8445883a 	add	r2,r16,r17
   44848:	20c00215 	stw	r3,8(r4)
   4484c:	19000315 	stw	r4,12(r3)
   44850:	81400115 	stw	r5,4(r16)
   44854:	1187883a 	add	r3,r2,r6
   44858:	31000054 	ori	r4,r6,1
   4485c:	50800315 	stw	r2,12(r10)
   44860:	50800215 	stw	r2,8(r10)
   44864:	19800015 	stw	r6,0(r3)
   44868:	11000115 	stw	r4,4(r2)
   4486c:	12800215 	stw	r10,8(r2)
   44870:	12800315 	stw	r10,12(r2)
   44874:	9009883a 	mov	r4,r18
   44878:	00459540 	call	45954 <__malloc_unlock>
   4487c:	80c00204 	addi	r3,r16,8
   44880:	003f5906 	br	445e8 <_malloc_r+0x50>
   44884:	8109883a 	add	r4,r16,r4
   44888:	20800117 	ldw	r2,4(r4)
   4488c:	80c00217 	ldw	r3,8(r16)
   44890:	81400317 	ldw	r5,12(r16)
   44894:	10800054 	ori	r2,r2,1
   44898:	20800115 	stw	r2,4(r4)
   4489c:	28c00215 	stw	r3,8(r5)
   448a0:	19400315 	stw	r5,12(r3)
   448a4:	9009883a 	mov	r4,r18
   448a8:	00459540 	call	45954 <__malloc_unlock>
   448ac:	80c00204 	addi	r3,r16,8
   448b0:	003f4d06 	br	445e8 <_malloc_r+0x50>
   448b4:	80800204 	addi	r2,r16,8
   448b8:	14000317 	ldw	r16,12(r2)
   448bc:	143f911e 	bne	r2,r16,44704 <_malloc_r+0x16c>
   448c0:	1a400084 	addi	r9,r3,2
   448c4:	003f7306 	br	44694 <_malloc_r+0xfc>
   448c8:	88c00054 	ori	r3,r17,1
   448cc:	8445883a 	add	r2,r16,r17
   448d0:	80c00115 	stw	r3,4(r16)
   448d4:	003fdf06 	br	44854 <_malloc_r+0x2bc>
   448d8:	e4000217 	ldw	r16,8(fp)
   448dc:	00bfff04 	movi	r2,-4
   448e0:	80c00117 	ldw	r3,4(r16)
   448e4:	802d883a 	mov	r22,r16
   448e8:	18aa703a 	and	r21,r3,r2
   448ec:	ac401636 	bltu	r21,r17,44948 <_malloc_r+0x3b0>
   448f0:	ac49c83a 	sub	r4,r21,r17
   448f4:	008003c4 	movi	r2,15
   448f8:	1100130e 	bge	r2,r4,44948 <_malloc_r+0x3b0>
   448fc:	88800054 	ori	r2,r17,1
   44900:	8447883a 	add	r3,r16,r17
   44904:	80800115 	stw	r2,4(r16)
   44908:	20800054 	ori	r2,r4,1
   4490c:	18800115 	stw	r2,4(r3)
   44910:	e0c00215 	stw	r3,8(fp)
   44914:	9009883a 	mov	r4,r18
   44918:	00459540 	call	45954 <__malloc_unlock>
   4491c:	80c00204 	addi	r3,r16,8
   44920:	003f3106 	br	445e8 <_malloc_r+0x50>
   44924:	39c00117 	ldw	r7,4(r7)
   44928:	573ffe04 	addi	fp,r10,-8
   4492c:	003fa006 	br	447b0 <_malloc_r+0x218>
   44930:	00801504 	movi	r2,84
   44934:	10c06736 	bltu	r2,r3,44ad4 <_malloc_r+0x53c>
   44938:	8804d33a 	srli	r2,r17,12
   4493c:	11801b84 	addi	r6,r2,110
   44940:	300490fa 	slli	r2,r6,3
   44944:	003f4106 	br	4464c <_malloc_r+0xb4>
   44948:	d0a1d617 	ldw	r2,-30888(gp)
   4494c:	d0e00817 	ldw	r3,-32736(gp)
   44950:	053fffc4 	movi	r20,-1
   44954:	10800404 	addi	r2,r2,16
   44958:	88a7883a 	add	r19,r17,r2
   4495c:	1d000326 	beq	r3,r20,4496c <_malloc_r+0x3d4>
   44960:	98c01fc4 	addi	r3,r19,127
   44964:	00bfe004 	movi	r2,-128
   44968:	18a6703a 	and	r19,r3,r2
   4496c:	9009883a 	mov	r4,r18
   44970:	980b883a 	mov	r5,r19
   44974:	0044cf80 	call	44cf8 <_sbrk_r>
   44978:	1009883a 	mov	r4,r2
   4497c:	15000426 	beq	r2,r20,44990 <_malloc_r+0x3f8>
   44980:	854b883a 	add	r5,r16,r21
   44984:	1029883a 	mov	r20,r2
   44988:	11405a2e 	bgeu	r2,r5,44af4 <_malloc_r+0x55c>
   4498c:	87000c26 	beq	r16,fp,449c0 <_malloc_r+0x428>
   44990:	e4000217 	ldw	r16,8(fp)
   44994:	80c00117 	ldw	r3,4(r16)
   44998:	00bfff04 	movi	r2,-4
   4499c:	1884703a 	and	r2,r3,r2
   449a0:	14400336 	bltu	r2,r17,449b0 <_malloc_r+0x418>
   449a4:	1449c83a 	sub	r4,r2,r17
   449a8:	008003c4 	movi	r2,15
   449ac:	113fd316 	blt	r2,r4,448fc <_malloc_r+0x364>
   449b0:	9009883a 	mov	r4,r18
   449b4:	00459540 	call	45954 <__malloc_unlock>
   449b8:	0007883a 	mov	r3,zero
   449bc:	003f0a06 	br	445e8 <_malloc_r+0x50>
   449c0:	05c00134 	movhi	r23,4
   449c4:	bddf8404 	addi	r23,r23,32272
   449c8:	b8800017 	ldw	r2,0(r23)
   449cc:	988d883a 	add	r6,r19,r2
   449d0:	b9800015 	stw	r6,0(r23)
   449d4:	d0e00817 	ldw	r3,-32736(gp)
   449d8:	00bfffc4 	movi	r2,-1
   449dc:	18808e26 	beq	r3,r2,44c18 <_malloc_r+0x680>
   449e0:	2145c83a 	sub	r2,r4,r5
   449e4:	3085883a 	add	r2,r6,r2
   449e8:	b8800015 	stw	r2,0(r23)
   449ec:	20c001cc 	andi	r3,r4,7
   449f0:	18005f1e 	bne	r3,zero,44b70 <_malloc_r+0x5d8>
   449f4:	000b883a 	mov	r5,zero
   449f8:	a4c5883a 	add	r2,r20,r19
   449fc:	10801fcc 	andi	r2,r2,127
   44a00:	00c02004 	movi	r3,128
   44a04:	1887c83a 	sub	r3,r3,r2
   44a08:	28e7883a 	add	r19,r5,r3
   44a0c:	9009883a 	mov	r4,r18
   44a10:	980b883a 	mov	r5,r19
   44a14:	0044cf80 	call	44cf8 <_sbrk_r>
   44a18:	1007883a 	mov	r3,r2
   44a1c:	00bfffc4 	movi	r2,-1
   44a20:	18807a26 	beq	r3,r2,44c0c <_malloc_r+0x674>
   44a24:	1d05c83a 	sub	r2,r3,r20
   44a28:	9885883a 	add	r2,r19,r2
   44a2c:	10c00054 	ori	r3,r2,1
   44a30:	b8800017 	ldw	r2,0(r23)
   44a34:	a021883a 	mov	r16,r20
   44a38:	a0c00115 	stw	r3,4(r20)
   44a3c:	9885883a 	add	r2,r19,r2
   44a40:	b8800015 	stw	r2,0(r23)
   44a44:	e5000215 	stw	r20,8(fp)
   44a48:	b7003626 	beq	r22,fp,44b24 <_malloc_r+0x58c>
   44a4c:	018003c4 	movi	r6,15
   44a50:	35404b36 	bltu	r6,r21,44b80 <_malloc_r+0x5e8>
   44a54:	00800044 	movi	r2,1
   44a58:	a0800115 	stw	r2,4(r20)
   44a5c:	003fcd06 	br	44994 <_malloc_r+0x3fc>
   44a60:	2808d27a 	srli	r4,r5,9
   44a64:	2000371e 	bne	r4,zero,44b44 <_malloc_r+0x5ac>
   44a68:	2808d0fa 	srli	r4,r5,3
   44a6c:	200690fa 	slli	r3,r4,3
   44a70:	58d1883a 	add	r8,r11,r3
   44a74:	41800217 	ldw	r6,8(r8)
   44a78:	41805b26 	beq	r8,r6,44be8 <_malloc_r+0x650>
   44a7c:	30800117 	ldw	r2,4(r6)
   44a80:	00ffff04 	movi	r3,-4
   44a84:	10c4703a 	and	r2,r2,r3
   44a88:	2880022e 	bgeu	r5,r2,44a94 <_malloc_r+0x4fc>
   44a8c:	31800217 	ldw	r6,8(r6)
   44a90:	41bffa1e 	bne	r8,r6,44a7c <_malloc_r+0x4e4>
   44a94:	32000317 	ldw	r8,12(r6)
   44a98:	39c00117 	ldw	r7,4(r7)
   44a9c:	82000315 	stw	r8,12(r16)
   44aa0:	81800215 	stw	r6,8(r16)
   44aa4:	07000134 	movhi	fp,4
   44aa8:	e719fc04 	addi	fp,fp,26608
   44aac:	34000315 	stw	r16,12(r6)
   44ab0:	44000215 	stw	r16,8(r8)
   44ab4:	003f3e06 	br	447b0 <_malloc_r+0x218>
   44ab8:	63000044 	addi	r12,r12,1
   44abc:	608000cc 	andi	r2,r12,3
   44ac0:	10005d26 	beq	r2,zero,44c38 <_malloc_r+0x6a0>
   44ac4:	18c00204 	addi	r3,r3,8
   44ac8:	003f5106 	br	44810 <_malloc_r+0x278>
   44acc:	8089883a 	add	r4,r16,r2
   44ad0:	003f6d06 	br	44888 <_malloc_r+0x2f0>
   44ad4:	00805504 	movi	r2,340
   44ad8:	10c02036 	bltu	r2,r3,44b5c <_malloc_r+0x5c4>
   44adc:	8804d3fa 	srli	r2,r17,15
   44ae0:	11801dc4 	addi	r6,r2,119
   44ae4:	300490fa 	slli	r2,r6,3
   44ae8:	003ed806 	br	4464c <_malloc_r+0xb4>
   44aec:	48c000c4 	addi	r3,r9,3
   44af0:	003f3106 	br	447b8 <_malloc_r+0x220>
   44af4:	05c00134 	movhi	r23,4
   44af8:	bddf8404 	addi	r23,r23,32272
   44afc:	b8800017 	ldw	r2,0(r23)
   44b00:	988d883a 	add	r6,r19,r2
   44b04:	b9800015 	stw	r6,0(r23)
   44b08:	293fb21e 	bne	r5,r4,449d4 <_malloc_r+0x43c>
   44b0c:	20801fcc 	andi	r2,r4,127
   44b10:	103fb01e 	bne	r2,zero,449d4 <_malloc_r+0x43c>
   44b14:	e4000217 	ldw	r16,8(fp)
   44b18:	9d45883a 	add	r2,r19,r21
   44b1c:	10800054 	ori	r2,r2,1
   44b20:	80800115 	stw	r2,4(r16)
   44b24:	b8c00017 	ldw	r3,0(r23)
   44b28:	d0a1d717 	ldw	r2,-30884(gp)
   44b2c:	10c0012e 	bgeu	r2,r3,44b34 <_malloc_r+0x59c>
   44b30:	d0e1d715 	stw	r3,-30884(gp)
   44b34:	d0a1d817 	ldw	r2,-30880(gp)
   44b38:	10ff962e 	bgeu	r2,r3,44994 <_malloc_r+0x3fc>
   44b3c:	d0e1d815 	stw	r3,-30880(gp)
   44b40:	003f9406 	br	44994 <_malloc_r+0x3fc>
   44b44:	00800104 	movi	r2,4
   44b48:	11001e36 	bltu	r2,r4,44bc4 <_malloc_r+0x62c>
   44b4c:	2804d1ba 	srli	r2,r5,6
   44b50:	11000e04 	addi	r4,r2,56
   44b54:	200690fa 	slli	r3,r4,3
   44b58:	003fc506 	br	44a70 <_malloc_r+0x4d8>
   44b5c:	00815504 	movi	r2,1364
   44b60:	10c01d2e 	bgeu	r2,r3,44bd8 <_malloc_r+0x640>
   44b64:	01801f84 	movi	r6,126
   44b68:	0080fc04 	movi	r2,1008
   44b6c:	003eb706 	br	4464c <_malloc_r+0xb4>
   44b70:	00800204 	movi	r2,8
   44b74:	10cbc83a 	sub	r5,r2,r3
   44b78:	2169883a 	add	r20,r4,r5
   44b7c:	003f9e06 	br	449f8 <_malloc_r+0x460>
   44b80:	00bffe04 	movi	r2,-8
   44b84:	a93ffd04 	addi	r4,r21,-12
   44b88:	2088703a 	and	r4,r4,r2
   44b8c:	b10b883a 	add	r5,r22,r4
   44b90:	00c00144 	movi	r3,5
   44b94:	28c00215 	stw	r3,8(r5)
   44b98:	28c00115 	stw	r3,4(r5)
   44b9c:	b0800117 	ldw	r2,4(r22)
   44ba0:	1080004c 	andi	r2,r2,1
   44ba4:	2084b03a 	or	r2,r4,r2
   44ba8:	b0800115 	stw	r2,4(r22)
   44bac:	313fdd2e 	bgeu	r6,r4,44b24 <_malloc_r+0x58c>
   44bb0:	b1400204 	addi	r5,r22,8
   44bb4:	9009883a 	mov	r4,r18
   44bb8:	00452540 	call	45254 <_free_r>
   44bbc:	e4000217 	ldw	r16,8(fp)
   44bc0:	003fd806 	br	44b24 <_malloc_r+0x58c>
   44bc4:	00800504 	movi	r2,20
   44bc8:	11001536 	bltu	r2,r4,44c20 <_malloc_r+0x688>
   44bcc:	210016c4 	addi	r4,r4,91
   44bd0:	200690fa 	slli	r3,r4,3
   44bd4:	003fa606 	br	44a70 <_malloc_r+0x4d8>
   44bd8:	8804d4ba 	srli	r2,r17,18
   44bdc:	11801f04 	addi	r6,r2,124
   44be0:	300490fa 	slli	r2,r6,3
   44be4:	003e9906 	br	4464c <_malloc_r+0xb4>
   44be8:	2009d0ba 	srai	r4,r4,2
   44bec:	01400134 	movhi	r5,4
   44bf0:	2959fc04 	addi	r5,r5,26608
   44bf4:	00c00044 	movi	r3,1
   44bf8:	28800117 	ldw	r2,4(r5)
   44bfc:	1906983a 	sll	r3,r3,r4
   44c00:	10c4b03a 	or	r2,r2,r3
   44c04:	28800115 	stw	r2,4(r5)
   44c08:	003fa306 	br	44a98 <_malloc_r+0x500>
   44c0c:	0027883a 	mov	r19,zero
   44c10:	00c00044 	movi	r3,1
   44c14:	003f8606 	br	44a30 <_malloc_r+0x498>
   44c18:	d1200815 	stw	r4,-32736(gp)
   44c1c:	003f7306 	br	449ec <_malloc_r+0x454>
   44c20:	00801504 	movi	r2,84
   44c24:	11001936 	bltu	r2,r4,44c8c <_malloc_r+0x6f4>
   44c28:	2804d33a 	srli	r2,r5,12
   44c2c:	11001b84 	addi	r4,r2,110
   44c30:	200690fa 	slli	r3,r4,3
   44c34:	003f8e06 	br	44a70 <_malloc_r+0x4d8>
   44c38:	480b883a 	mov	r5,r9
   44c3c:	6807883a 	mov	r3,r13
   44c40:	288000cc 	andi	r2,r5,3
   44c44:	18fffe04 	addi	r3,r3,-8
   44c48:	297fffc4 	addi	r5,r5,-1
   44c4c:	10001526 	beq	r2,zero,44ca4 <_malloc_r+0x70c>
   44c50:	18800217 	ldw	r2,8(r3)
   44c54:	10fffa26 	beq	r2,r3,44c40 <_malloc_r+0x6a8>
   44c58:	2109883a 	add	r4,r4,r4
   44c5c:	393f1e36 	bltu	r7,r4,448d8 <_malloc_r+0x340>
   44c60:	203f1d26 	beq	r4,zero,448d8 <_malloc_r+0x340>
   44c64:	21c4703a 	and	r2,r4,r7
   44c68:	10000226 	beq	r2,zero,44c74 <_malloc_r+0x6dc>
   44c6c:	6013883a 	mov	r9,r12
   44c70:	003ee106 	br	447f8 <_malloc_r+0x260>
   44c74:	2109883a 	add	r4,r4,r4
   44c78:	3904703a 	and	r2,r7,r4
   44c7c:	63000104 	addi	r12,r12,4
   44c80:	103ffc26 	beq	r2,zero,44c74 <_malloc_r+0x6dc>
   44c84:	6013883a 	mov	r9,r12
   44c88:	003edb06 	br	447f8 <_malloc_r+0x260>
   44c8c:	00805504 	movi	r2,340
   44c90:	11000836 	bltu	r2,r4,44cb4 <_malloc_r+0x71c>
   44c94:	2804d3fa 	srli	r2,r5,15
   44c98:	11001dc4 	addi	r4,r2,119
   44c9c:	200690fa 	slli	r3,r4,3
   44ca0:	003f7306 	br	44a70 <_malloc_r+0x4d8>
   44ca4:	0104303a 	nor	r2,zero,r4
   44ca8:	388e703a 	and	r7,r7,r2
   44cac:	e1c00115 	stw	r7,4(fp)
   44cb0:	003fe906 	br	44c58 <_malloc_r+0x6c0>
   44cb4:	00815504 	movi	r2,1364
   44cb8:	1100032e 	bgeu	r2,r4,44cc8 <_malloc_r+0x730>
   44cbc:	01001f84 	movi	r4,126
   44cc0:	00c0fc04 	movi	r3,1008
   44cc4:	003f6a06 	br	44a70 <_malloc_r+0x4d8>
   44cc8:	2804d4ba 	srli	r2,r5,18
   44ccc:	11001f04 	addi	r4,r2,124
   44cd0:	200690fa 	slli	r3,r4,3
   44cd4:	003f6606 	br	44a70 <_malloc_r+0x4d8>

00044cd8 <memset>:
   44cd8:	30000526 	beq	r6,zero,44cf0 <memset+0x18>
   44cdc:	310d883a 	add	r6,r6,r4
   44ce0:	2005883a 	mov	r2,r4
   44ce4:	11400005 	stb	r5,0(r2)
   44ce8:	10800044 	addi	r2,r2,1
   44cec:	11bffd1e 	bne	r2,r6,44ce4 <memset+0xc>
   44cf0:	2005883a 	mov	r2,r4
   44cf4:	f800283a 	ret

00044cf8 <_sbrk_r>:
   44cf8:	defffd04 	addi	sp,sp,-12
   44cfc:	dc000015 	stw	r16,0(sp)
   44d00:	04000134 	movhi	r16,4
   44d04:	841d7904 	addi	r16,r16,30180
   44d08:	dc400115 	stw	r17,4(sp)
   44d0c:	80000015 	stw	zero,0(r16)
   44d10:	2023883a 	mov	r17,r4
   44d14:	2809883a 	mov	r4,r5
   44d18:	dfc00215 	stw	ra,8(sp)
   44d1c:	0045c400 	call	45c40 <sbrk>
   44d20:	1007883a 	mov	r3,r2
   44d24:	00bfffc4 	movi	r2,-1
   44d28:	18800626 	beq	r3,r2,44d44 <_sbrk_r+0x4c>
   44d2c:	1805883a 	mov	r2,r3
   44d30:	dfc00217 	ldw	ra,8(sp)
   44d34:	dc400117 	ldw	r17,4(sp)
   44d38:	dc000017 	ldw	r16,0(sp)
   44d3c:	dec00304 	addi	sp,sp,12
   44d40:	f800283a 	ret
   44d44:	80800017 	ldw	r2,0(r16)
   44d48:	103ff826 	beq	r2,zero,44d2c <_sbrk_r+0x34>
   44d4c:	88800015 	stw	r2,0(r17)
   44d50:	1805883a 	mov	r2,r3
   44d54:	dfc00217 	ldw	ra,8(sp)
   44d58:	dc400117 	ldw	r17,4(sp)
   44d5c:	dc000017 	ldw	r16,0(sp)
   44d60:	dec00304 	addi	sp,sp,12
   44d64:	f800283a 	ret

00044d68 <_raise_r>:
   44d68:	defffd04 	addi	sp,sp,-12
   44d6c:	008007c4 	movi	r2,31
   44d70:	dc400115 	stw	r17,4(sp)
   44d74:	dc000015 	stw	r16,0(sp)
   44d78:	dfc00215 	stw	ra,8(sp)
   44d7c:	2821883a 	mov	r16,r5
   44d80:	2023883a 	mov	r17,r4
   44d84:	11402736 	bltu	r2,r5,44e24 <_raise_r+0xbc>
   44d88:	20c00b17 	ldw	r3,44(r4)
   44d8c:	18001326 	beq	r3,zero,44ddc <_raise_r+0x74>
   44d90:	2945883a 	add	r2,r5,r5
   44d94:	1085883a 	add	r2,r2,r2
   44d98:	188b883a 	add	r5,r3,r2
   44d9c:	28c00017 	ldw	r3,0(r5)
   44da0:	18000e26 	beq	r3,zero,44ddc <_raise_r+0x74>
   44da4:	01000044 	movi	r4,1
   44da8:	19000526 	beq	r3,r4,44dc0 <_raise_r+0x58>
   44dac:	00bfffc4 	movi	r2,-1
   44db0:	18801326 	beq	r3,r2,44e00 <_raise_r+0x98>
   44db4:	28000015 	stw	zero,0(r5)
   44db8:	8009883a 	mov	r4,r16
   44dbc:	183ee83a 	callr	r3
   44dc0:	0007883a 	mov	r3,zero
   44dc4:	1805883a 	mov	r2,r3
   44dc8:	dfc00217 	ldw	ra,8(sp)
   44dcc:	dc400117 	ldw	r17,4(sp)
   44dd0:	dc000017 	ldw	r16,0(sp)
   44dd4:	dec00304 	addi	sp,sp,12
   44dd8:	f800283a 	ret
   44ddc:	00450400 	call	45040 <_getpid_r>
   44de0:	100b883a 	mov	r5,r2
   44de4:	8809883a 	mov	r4,r17
   44de8:	800d883a 	mov	r6,r16
   44dec:	dfc00217 	ldw	ra,8(sp)
   44df0:	dc400117 	ldw	r17,4(sp)
   44df4:	dc000017 	ldw	r16,0(sp)
   44df8:	dec00304 	addi	sp,sp,12
   44dfc:	00450441 	jmpi	45044 <_kill_r>
   44e00:	2007883a 	mov	r3,r4
   44e04:	00800584 	movi	r2,22
   44e08:	88800015 	stw	r2,0(r17)
   44e0c:	1805883a 	mov	r2,r3
   44e10:	dfc00217 	ldw	ra,8(sp)
   44e14:	dc400117 	ldw	r17,4(sp)
   44e18:	dc000017 	ldw	r16,0(sp)
   44e1c:	dec00304 	addi	sp,sp,12
   44e20:	f800283a 	ret
   44e24:	00800584 	movi	r2,22
   44e28:	00ffffc4 	movi	r3,-1
   44e2c:	20800015 	stw	r2,0(r4)
   44e30:	003fe406 	br	44dc4 <_raise_r+0x5c>

00044e34 <raise>:
   44e34:	00800134 	movhi	r2,4
   44e38:	109ba904 	addi	r2,r2,28324
   44e3c:	200b883a 	mov	r5,r4
   44e40:	11000017 	ldw	r4,0(r2)
   44e44:	0044d681 	jmpi	44d68 <_raise_r>

00044e48 <_init_signal_r>:
   44e48:	20800b17 	ldw	r2,44(r4)
   44e4c:	defffe04 	addi	sp,sp,-8
   44e50:	dc000015 	stw	r16,0(sp)
   44e54:	dfc00115 	stw	ra,4(sp)
   44e58:	2021883a 	mov	r16,r4
   44e5c:	10000526 	beq	r2,zero,44e74 <_init_signal_r+0x2c>
   44e60:	0005883a 	mov	r2,zero
   44e64:	dfc00117 	ldw	ra,4(sp)
   44e68:	dc000017 	ldw	r16,0(sp)
   44e6c:	dec00204 	addi	sp,sp,8
   44e70:	f800283a 	ret
   44e74:	01402004 	movi	r5,128
   44e78:	00445980 	call	44598 <_malloc_r>
   44e7c:	1009883a 	mov	r4,r2
   44e80:	80800b15 	stw	r2,44(r16)
   44e84:	10000726 	beq	r2,zero,44ea4 <_init_signal_r+0x5c>
   44e88:	0007883a 	mov	r3,zero
   44e8c:	01402004 	movi	r5,128
   44e90:	20c5883a 	add	r2,r4,r3
   44e94:	18c00104 	addi	r3,r3,4
   44e98:	10000015 	stw	zero,0(r2)
   44e9c:	197ffc1e 	bne	r3,r5,44e90 <_init_signal_r+0x48>
   44ea0:	003fef06 	br	44e60 <_init_signal_r+0x18>
   44ea4:	00bfffc4 	movi	r2,-1
   44ea8:	003fee06 	br	44e64 <_init_signal_r+0x1c>

00044eac <_init_signal>:
   44eac:	00800134 	movhi	r2,4
   44eb0:	109ba904 	addi	r2,r2,28324
   44eb4:	11000017 	ldw	r4,0(r2)
   44eb8:	0044e481 	jmpi	44e48 <_init_signal_r>

00044ebc <__sigtramp_r>:
   44ebc:	defffd04 	addi	sp,sp,-12
   44ec0:	008007c4 	movi	r2,31
   44ec4:	dc000115 	stw	r16,4(sp)
   44ec8:	dfc00215 	stw	ra,8(sp)
   44ecc:	2021883a 	mov	r16,r4
   44ed0:	11401336 	bltu	r2,r5,44f20 <__sigtramp_r+0x64>
   44ed4:	20c00b17 	ldw	r3,44(r4)
   44ed8:	18001f26 	beq	r3,zero,44f58 <__sigtramp_r+0x9c>
   44edc:	2945883a 	add	r2,r5,r5
   44ee0:	1085883a 	add	r2,r2,r2
   44ee4:	10c9883a 	add	r4,r2,r3
   44ee8:	20c00017 	ldw	r3,0(r4)
   44eec:	18001626 	beq	r3,zero,44f48 <__sigtramp_r+0x8c>
   44ef0:	00bfffc4 	movi	r2,-1
   44ef4:	18801626 	beq	r3,r2,44f50 <__sigtramp_r+0x94>
   44ef8:	00800044 	movi	r2,1
   44efc:	18800d26 	beq	r3,r2,44f34 <__sigtramp_r+0x78>
   44f00:	20000015 	stw	zero,0(r4)
   44f04:	2809883a 	mov	r4,r5
   44f08:	183ee83a 	callr	r3
   44f0c:	0005883a 	mov	r2,zero
   44f10:	dfc00217 	ldw	ra,8(sp)
   44f14:	dc000117 	ldw	r16,4(sp)
   44f18:	dec00304 	addi	sp,sp,12
   44f1c:	f800283a 	ret
   44f20:	00bfffc4 	movi	r2,-1
   44f24:	dfc00217 	ldw	ra,8(sp)
   44f28:	dc000117 	ldw	r16,4(sp)
   44f2c:	dec00304 	addi	sp,sp,12
   44f30:	f800283a 	ret
   44f34:	008000c4 	movi	r2,3
   44f38:	dfc00217 	ldw	ra,8(sp)
   44f3c:	dc000117 	ldw	r16,4(sp)
   44f40:	dec00304 	addi	sp,sp,12
   44f44:	f800283a 	ret
   44f48:	00800044 	movi	r2,1
   44f4c:	003ff006 	br	44f10 <__sigtramp_r+0x54>
   44f50:	00800084 	movi	r2,2
   44f54:	003fee06 	br	44f10 <__sigtramp_r+0x54>
   44f58:	d9400015 	stw	r5,0(sp)
   44f5c:	0044e480 	call	44e48 <_init_signal_r>
   44f60:	d9400017 	ldw	r5,0(sp)
   44f64:	103fee1e 	bne	r2,zero,44f20 <__sigtramp_r+0x64>
   44f68:	80c00b17 	ldw	r3,44(r16)
   44f6c:	003fdb06 	br	44edc <__sigtramp_r+0x20>

00044f70 <__sigtramp>:
   44f70:	00800134 	movhi	r2,4
   44f74:	109ba904 	addi	r2,r2,28324
   44f78:	200b883a 	mov	r5,r4
   44f7c:	11000017 	ldw	r4,0(r2)
   44f80:	0044ebc1 	jmpi	44ebc <__sigtramp_r>

00044f84 <_signal_r>:
   44f84:	defffc04 	addi	sp,sp,-16
   44f88:	008007c4 	movi	r2,31
   44f8c:	dc800215 	stw	r18,8(sp)
   44f90:	dc400115 	stw	r17,4(sp)
   44f94:	dc000015 	stw	r16,0(sp)
   44f98:	dfc00315 	stw	ra,12(sp)
   44f9c:	2823883a 	mov	r17,r5
   44fa0:	00ffffc4 	movi	r3,-1
   44fa4:	3025883a 	mov	r18,r6
   44fa8:	2021883a 	mov	r16,r4
   44fac:	1140092e 	bgeu	r2,r5,44fd4 <_signal_r+0x50>
   44fb0:	00800584 	movi	r2,22
   44fb4:	20800015 	stw	r2,0(r4)
   44fb8:	1805883a 	mov	r2,r3
   44fbc:	dfc00317 	ldw	ra,12(sp)
   44fc0:	dc800217 	ldw	r18,8(sp)
   44fc4:	dc400117 	ldw	r17,4(sp)
   44fc8:	dc000017 	ldw	r16,0(sp)
   44fcc:	dec00404 	addi	sp,sp,16
   44fd0:	f800283a 	ret
   44fd4:	21400b17 	ldw	r5,44(r4)
   44fd8:	28000c26 	beq	r5,zero,4500c <_signal_r+0x88>
   44fdc:	8c45883a 	add	r2,r17,r17
   44fe0:	1085883a 	add	r2,r2,r2
   44fe4:	1145883a 	add	r2,r2,r5
   44fe8:	10c00017 	ldw	r3,0(r2)
   44fec:	14800015 	stw	r18,0(r2)
   44ff0:	1805883a 	mov	r2,r3
   44ff4:	dfc00317 	ldw	ra,12(sp)
   44ff8:	dc800217 	ldw	r18,8(sp)
   44ffc:	dc400117 	ldw	r17,4(sp)
   45000:	dc000017 	ldw	r16,0(sp)
   45004:	dec00404 	addi	sp,sp,16
   45008:	f800283a 	ret
   4500c:	0044e480 	call	44e48 <_init_signal_r>
   45010:	1000021e 	bne	r2,zero,4501c <_signal_r+0x98>
   45014:	81400b17 	ldw	r5,44(r16)
   45018:	003ff006 	br	44fdc <_signal_r+0x58>
   4501c:	00ffffc4 	movi	r3,-1
   45020:	003fe506 	br	44fb8 <_signal_r+0x34>

00045024 <signal>:
   45024:	01800134 	movhi	r6,4
   45028:	319ba904 	addi	r6,r6,28324
   4502c:	2007883a 	mov	r3,r4
   45030:	31000017 	ldw	r4,0(r6)
   45034:	280d883a 	mov	r6,r5
   45038:	180b883a 	mov	r5,r3
   4503c:	0044f841 	jmpi	44f84 <_signal_r>

00045040 <_getpid_r>:
   45040:	00456381 	jmpi	45638 <getpid>

00045044 <_kill_r>:
   45044:	defffd04 	addi	sp,sp,-12
   45048:	dc000015 	stw	r16,0(sp)
   4504c:	04000134 	movhi	r16,4
   45050:	841d7904 	addi	r16,r16,30180
   45054:	dc400115 	stw	r17,4(sp)
   45058:	80000015 	stw	zero,0(r16)
   4505c:	2023883a 	mov	r17,r4
   45060:	2809883a 	mov	r4,r5
   45064:	300b883a 	mov	r5,r6
   45068:	dfc00215 	stw	ra,8(sp)
   4506c:	00456580 	call	45658 <kill>
   45070:	1007883a 	mov	r3,r2
   45074:	00bfffc4 	movi	r2,-1
   45078:	18800626 	beq	r3,r2,45094 <_kill_r+0x50>
   4507c:	1805883a 	mov	r2,r3
   45080:	dfc00217 	ldw	ra,8(sp)
   45084:	dc400117 	ldw	r17,4(sp)
   45088:	dc000017 	ldw	r16,0(sp)
   4508c:	dec00304 	addi	sp,sp,12
   45090:	f800283a 	ret
   45094:	80800017 	ldw	r2,0(r16)
   45098:	103ff826 	beq	r2,zero,4507c <_kill_r+0x38>
   4509c:	88800015 	stw	r2,0(r17)
   450a0:	1805883a 	mov	r2,r3
   450a4:	dfc00217 	ldw	ra,8(sp)
   450a8:	dc400117 	ldw	r17,4(sp)
   450ac:	dc000017 	ldw	r16,0(sp)
   450b0:	dec00304 	addi	sp,sp,12
   450b4:	f800283a 	ret

000450b8 <strcat>:
   450b8:	20800007 	ldb	r2,0(r4)
   450bc:	10000b26 	beq	r2,zero,450ec <strcat+0x34>
   450c0:	2007883a 	mov	r3,r4
   450c4:	18c00044 	addi	r3,r3,1
   450c8:	18800007 	ldb	r2,0(r3)
   450cc:	103ffd1e 	bne	r2,zero,450c4 <strcat+0xc>
   450d0:	28800003 	ldbu	r2,0(r5)
   450d4:	29400044 	addi	r5,r5,1
   450d8:	18800005 	stb	r2,0(r3)
   450dc:	18c00044 	addi	r3,r3,1
   450e0:	103ffb1e 	bne	r2,zero,450d0 <strcat+0x18>
   450e4:	2005883a 	mov	r2,r4
   450e8:	f800283a 	ret
   450ec:	28800003 	ldbu	r2,0(r5)
   450f0:	2007883a 	mov	r3,r4
   450f4:	29400044 	addi	r5,r5,1
   450f8:	18800005 	stb	r2,0(r3)
   450fc:	18c00044 	addi	r3,r3,1
   45100:	103ff31e 	bne	r2,zero,450d0 <strcat+0x18>
   45104:	003ff706 	br	450e4 <strcat+0x2c>

00045108 <strlen>:
   45108:	20800007 	ldb	r2,0(r4)
   4510c:	10000526 	beq	r2,zero,45124 <strlen+0x1c>
   45110:	2007883a 	mov	r3,r4
   45114:	18c00044 	addi	r3,r3,1
   45118:	18800007 	ldb	r2,0(r3)
   4511c:	103ffd1e 	bne	r2,zero,45114 <strlen+0xc>
   45120:	1905c83a 	sub	r2,r3,r4
   45124:	f800283a 	ret

00045128 <_malloc_trim_r>:
   45128:	defffb04 	addi	sp,sp,-20
   4512c:	dcc00315 	stw	r19,12(sp)
   45130:	04c00134 	movhi	r19,4
   45134:	9cd9fc04 	addi	r19,r19,26608
   45138:	dc800215 	stw	r18,8(sp)
   4513c:	dc400115 	stw	r17,4(sp)
   45140:	dc000015 	stw	r16,0(sp)
   45144:	2823883a 	mov	r17,r5
   45148:	2025883a 	mov	r18,r4
   4514c:	dfc00415 	stw	ra,16(sp)
   45150:	00459340 	call	45934 <__malloc_lock>
   45154:	98800217 	ldw	r2,8(r19)
   45158:	9009883a 	mov	r4,r18
   4515c:	000b883a 	mov	r5,zero
   45160:	10c00117 	ldw	r3,4(r2)
   45164:	00bfff04 	movi	r2,-4
   45168:	18a0703a 	and	r16,r3,r2
   4516c:	8463c83a 	sub	r17,r16,r17
   45170:	8c401bc4 	addi	r17,r17,111
   45174:	8822d1fa 	srli	r17,r17,7
   45178:	00801fc4 	movi	r2,127
   4517c:	8c7fffc4 	addi	r17,r17,-1
   45180:	882291fa 	slli	r17,r17,7
   45184:	1440060e 	bge	r2,r17,451a0 <_malloc_trim_r+0x78>
   45188:	0044cf80 	call	44cf8 <_sbrk_r>
   4518c:	98c00217 	ldw	r3,8(r19)
   45190:	9009883a 	mov	r4,r18
   45194:	044bc83a 	sub	r5,zero,r17
   45198:	80c7883a 	add	r3,r16,r3
   4519c:	10c00926 	beq	r2,r3,451c4 <_malloc_trim_r+0x9c>
   451a0:	00459540 	call	45954 <__malloc_unlock>
   451a4:	0005883a 	mov	r2,zero
   451a8:	dfc00417 	ldw	ra,16(sp)
   451ac:	dcc00317 	ldw	r19,12(sp)
   451b0:	dc800217 	ldw	r18,8(sp)
   451b4:	dc400117 	ldw	r17,4(sp)
   451b8:	dc000017 	ldw	r16,0(sp)
   451bc:	dec00504 	addi	sp,sp,20
   451c0:	f800283a 	ret
   451c4:	9009883a 	mov	r4,r18
   451c8:	0044cf80 	call	44cf8 <_sbrk_r>
   451cc:	844dc83a 	sub	r6,r16,r17
   451d0:	00ffffc4 	movi	r3,-1
   451d4:	9009883a 	mov	r4,r18
   451d8:	000b883a 	mov	r5,zero
   451dc:	01c00134 	movhi	r7,4
   451e0:	39df8404 	addi	r7,r7,32272
   451e4:	31800054 	ori	r6,r6,1
   451e8:	10c00926 	beq	r2,r3,45210 <_malloc_trim_r+0xe8>
   451ec:	38800017 	ldw	r2,0(r7)
   451f0:	98c00217 	ldw	r3,8(r19)
   451f4:	9009883a 	mov	r4,r18
   451f8:	1445c83a 	sub	r2,r2,r17
   451fc:	38800015 	stw	r2,0(r7)
   45200:	19800115 	stw	r6,4(r3)
   45204:	00459540 	call	45954 <__malloc_unlock>
   45208:	00800044 	movi	r2,1
   4520c:	003fe606 	br	451a8 <_malloc_trim_r+0x80>
   45210:	0044cf80 	call	44cf8 <_sbrk_r>
   45214:	99800217 	ldw	r6,8(r19)
   45218:	100f883a 	mov	r7,r2
   4521c:	9009883a 	mov	r4,r18
   45220:	1187c83a 	sub	r3,r2,r6
   45224:	008003c4 	movi	r2,15
   45228:	19400054 	ori	r5,r3,1
   4522c:	10ffdc0e 	bge	r2,r3,451a0 <_malloc_trim_r+0x78>
   45230:	00800134 	movhi	r2,4
   45234:	109ba804 	addi	r2,r2,28320
   45238:	10c00017 	ldw	r3,0(r2)
   4523c:	00800134 	movhi	r2,4
   45240:	109f8404 	addi	r2,r2,32272
   45244:	31400115 	stw	r5,4(r6)
   45248:	38c7c83a 	sub	r3,r7,r3
   4524c:	10c00015 	stw	r3,0(r2)
   45250:	003fd306 	br	451a0 <_malloc_trim_r+0x78>

00045254 <_free_r>:
   45254:	defffd04 	addi	sp,sp,-12
   45258:	dc400115 	stw	r17,4(sp)
   4525c:	dc000015 	stw	r16,0(sp)
   45260:	dfc00215 	stw	ra,8(sp)
   45264:	2821883a 	mov	r16,r5
   45268:	2023883a 	mov	r17,r4
   4526c:	28005a26 	beq	r5,zero,453d8 <_free_r+0x184>
   45270:	00459340 	call	45934 <__malloc_lock>
   45274:	823ffe04 	addi	r8,r16,-8
   45278:	41400117 	ldw	r5,4(r8)
   4527c:	00bfff84 	movi	r2,-2
   45280:	02800134 	movhi	r10,4
   45284:	5299fc04 	addi	r10,r10,26608
   45288:	288e703a 	and	r7,r5,r2
   4528c:	41cd883a 	add	r6,r8,r7
   45290:	30c00117 	ldw	r3,4(r6)
   45294:	51000217 	ldw	r4,8(r10)
   45298:	00bfff04 	movi	r2,-4
   4529c:	1892703a 	and	r9,r3,r2
   452a0:	5017883a 	mov	r11,r10
   452a4:	31006726 	beq	r6,r4,45444 <_free_r+0x1f0>
   452a8:	2880004c 	andi	r2,r5,1
   452ac:	1005003a 	cmpeq	r2,r2,zero
   452b0:	32400115 	stw	r9,4(r6)
   452b4:	10001a1e 	bne	r2,zero,45320 <_free_r+0xcc>
   452b8:	000b883a 	mov	r5,zero
   452bc:	3247883a 	add	r3,r6,r9
   452c0:	18800117 	ldw	r2,4(r3)
   452c4:	1080004c 	andi	r2,r2,1
   452c8:	1000231e 	bne	r2,zero,45358 <_free_r+0x104>
   452cc:	280ac03a 	cmpne	r5,r5,zero
   452d0:	3a4f883a 	add	r7,r7,r9
   452d4:	2800451e 	bne	r5,zero,453ec <_free_r+0x198>
   452d8:	31000217 	ldw	r4,8(r6)
   452dc:	00800134 	movhi	r2,4
   452e0:	1099fe04 	addi	r2,r2,26616
   452e4:	20807b26 	beq	r4,r2,454d4 <_free_r+0x280>
   452e8:	30800317 	ldw	r2,12(r6)
   452ec:	3a07883a 	add	r3,r7,r8
   452f0:	19c00015 	stw	r7,0(r3)
   452f4:	11000215 	stw	r4,8(r2)
   452f8:	20800315 	stw	r2,12(r4)
   452fc:	38800054 	ori	r2,r7,1
   45300:	40800115 	stw	r2,4(r8)
   45304:	28001a26 	beq	r5,zero,45370 <_free_r+0x11c>
   45308:	8809883a 	mov	r4,r17
   4530c:	dfc00217 	ldw	ra,8(sp)
   45310:	dc400117 	ldw	r17,4(sp)
   45314:	dc000017 	ldw	r16,0(sp)
   45318:	dec00304 	addi	sp,sp,12
   4531c:	00459541 	jmpi	45954 <__malloc_unlock>
   45320:	80bffe17 	ldw	r2,-8(r16)
   45324:	50c00204 	addi	r3,r10,8
   45328:	4091c83a 	sub	r8,r8,r2
   4532c:	41000217 	ldw	r4,8(r8)
   45330:	388f883a 	add	r7,r7,r2
   45334:	20c06126 	beq	r4,r3,454bc <_free_r+0x268>
   45338:	40800317 	ldw	r2,12(r8)
   4533c:	3247883a 	add	r3,r6,r9
   45340:	000b883a 	mov	r5,zero
   45344:	11000215 	stw	r4,8(r2)
   45348:	20800315 	stw	r2,12(r4)
   4534c:	18800117 	ldw	r2,4(r3)
   45350:	1080004c 	andi	r2,r2,1
   45354:	103fdd26 	beq	r2,zero,452cc <_free_r+0x78>
   45358:	38800054 	ori	r2,r7,1
   4535c:	3a07883a 	add	r3,r7,r8
   45360:	280ac03a 	cmpne	r5,r5,zero
   45364:	40800115 	stw	r2,4(r8)
   45368:	19c00015 	stw	r7,0(r3)
   4536c:	283fe61e 	bne	r5,zero,45308 <_free_r+0xb4>
   45370:	00807fc4 	movi	r2,511
   45374:	11c01f2e 	bgeu	r2,r7,453f4 <_free_r+0x1a0>
   45378:	3806d27a 	srli	r3,r7,9
   4537c:	1800481e 	bne	r3,zero,454a0 <_free_r+0x24c>
   45380:	3804d0fa 	srli	r2,r7,3
   45384:	100690fa 	slli	r3,r2,3
   45388:	1acd883a 	add	r6,r3,r11
   4538c:	31400217 	ldw	r5,8(r6)
   45390:	31405926 	beq	r6,r5,454f8 <_free_r+0x2a4>
   45394:	28800117 	ldw	r2,4(r5)
   45398:	00ffff04 	movi	r3,-4
   4539c:	10c4703a 	and	r2,r2,r3
   453a0:	3880022e 	bgeu	r7,r2,453ac <_free_r+0x158>
   453a4:	29400217 	ldw	r5,8(r5)
   453a8:	317ffa1e 	bne	r6,r5,45394 <_free_r+0x140>
   453ac:	29800317 	ldw	r6,12(r5)
   453b0:	41800315 	stw	r6,12(r8)
   453b4:	41400215 	stw	r5,8(r8)
   453b8:	8809883a 	mov	r4,r17
   453bc:	2a000315 	stw	r8,12(r5)
   453c0:	32000215 	stw	r8,8(r6)
   453c4:	dfc00217 	ldw	ra,8(sp)
   453c8:	dc400117 	ldw	r17,4(sp)
   453cc:	dc000017 	ldw	r16,0(sp)
   453d0:	dec00304 	addi	sp,sp,12
   453d4:	00459541 	jmpi	45954 <__malloc_unlock>
   453d8:	dfc00217 	ldw	ra,8(sp)
   453dc:	dc400117 	ldw	r17,4(sp)
   453e0:	dc000017 	ldw	r16,0(sp)
   453e4:	dec00304 	addi	sp,sp,12
   453e8:	f800283a 	ret
   453ec:	31000217 	ldw	r4,8(r6)
   453f0:	003fbd06 	br	452e8 <_free_r+0x94>
   453f4:	3806d0fa 	srli	r3,r7,3
   453f8:	00800044 	movi	r2,1
   453fc:	51400117 	ldw	r5,4(r10)
   45400:	180890fa 	slli	r4,r3,3
   45404:	1807d0ba 	srai	r3,r3,2
   45408:	22c9883a 	add	r4,r4,r11
   4540c:	21800217 	ldw	r6,8(r4)
   45410:	10c4983a 	sll	r2,r2,r3
   45414:	41000315 	stw	r4,12(r8)
   45418:	41800215 	stw	r6,8(r8)
   4541c:	288ab03a 	or	r5,r5,r2
   45420:	22000215 	stw	r8,8(r4)
   45424:	8809883a 	mov	r4,r17
   45428:	51400115 	stw	r5,4(r10)
   4542c:	32000315 	stw	r8,12(r6)
   45430:	dfc00217 	ldw	ra,8(sp)
   45434:	dc400117 	ldw	r17,4(sp)
   45438:	dc000017 	ldw	r16,0(sp)
   4543c:	dec00304 	addi	sp,sp,12
   45440:	00459541 	jmpi	45954 <__malloc_unlock>
   45444:	2880004c 	andi	r2,r5,1
   45448:	3a4d883a 	add	r6,r7,r9
   4544c:	1000071e 	bne	r2,zero,4546c <_free_r+0x218>
   45450:	80bffe17 	ldw	r2,-8(r16)
   45454:	4091c83a 	sub	r8,r8,r2
   45458:	41000317 	ldw	r4,12(r8)
   4545c:	40c00217 	ldw	r3,8(r8)
   45460:	308d883a 	add	r6,r6,r2
   45464:	20c00215 	stw	r3,8(r4)
   45468:	19000315 	stw	r4,12(r3)
   4546c:	00800134 	movhi	r2,4
   45470:	109ba704 	addi	r2,r2,28316
   45474:	11000017 	ldw	r4,0(r2)
   45478:	30c00054 	ori	r3,r6,1
   4547c:	52000215 	stw	r8,8(r10)
   45480:	40c00115 	stw	r3,4(r8)
   45484:	313fa036 	bltu	r6,r4,45308 <_free_r+0xb4>
   45488:	00800134 	movhi	r2,4
   4548c:	109d7604 	addi	r2,r2,30168
   45490:	11400017 	ldw	r5,0(r2)
   45494:	8809883a 	mov	r4,r17
   45498:	00451280 	call	45128 <_malloc_trim_r>
   4549c:	003f9a06 	br	45308 <_free_r+0xb4>
   454a0:	00800104 	movi	r2,4
   454a4:	10c0072e 	bgeu	r2,r3,454c4 <_free_r+0x270>
   454a8:	00800504 	movi	r2,20
   454ac:	10c01936 	bltu	r2,r3,45514 <_free_r+0x2c0>
   454b0:	188016c4 	addi	r2,r3,91
   454b4:	100690fa 	slli	r3,r2,3
   454b8:	003fb306 	br	45388 <_free_r+0x134>
   454bc:	01400044 	movi	r5,1
   454c0:	003f7e06 	br	452bc <_free_r+0x68>
   454c4:	3804d1ba 	srli	r2,r7,6
   454c8:	10800e04 	addi	r2,r2,56
   454cc:	100690fa 	slli	r3,r2,3
   454d0:	003fad06 	br	45388 <_free_r+0x134>
   454d4:	22000315 	stw	r8,12(r4)
   454d8:	22000215 	stw	r8,8(r4)
   454dc:	3a05883a 	add	r2,r7,r8
   454e0:	38c00054 	ori	r3,r7,1
   454e4:	11c00015 	stw	r7,0(r2)
   454e8:	41000215 	stw	r4,8(r8)
   454ec:	40c00115 	stw	r3,4(r8)
   454f0:	41000315 	stw	r4,12(r8)
   454f4:	003f8406 	br	45308 <_free_r+0xb4>
   454f8:	1005d0ba 	srai	r2,r2,2
   454fc:	00c00044 	movi	r3,1
   45500:	51000117 	ldw	r4,4(r10)
   45504:	1886983a 	sll	r3,r3,r2
   45508:	20c8b03a 	or	r4,r4,r3
   4550c:	51000115 	stw	r4,4(r10)
   45510:	003fa706 	br	453b0 <_free_r+0x15c>
   45514:	00801504 	movi	r2,84
   45518:	10c00436 	bltu	r2,r3,4552c <_free_r+0x2d8>
   4551c:	3804d33a 	srli	r2,r7,12
   45520:	10801b84 	addi	r2,r2,110
   45524:	100690fa 	slli	r3,r2,3
   45528:	003f9706 	br	45388 <_free_r+0x134>
   4552c:	00805504 	movi	r2,340
   45530:	10c00436 	bltu	r2,r3,45544 <_free_r+0x2f0>
   45534:	3804d3fa 	srli	r2,r7,15
   45538:	10801dc4 	addi	r2,r2,119
   4553c:	100690fa 	slli	r3,r2,3
   45540:	003f9106 	br	45388 <_free_r+0x134>
   45544:	00815504 	movi	r2,1364
   45548:	10c0032e 	bgeu	r2,r3,45558 <_free_r+0x304>
   4554c:	00801f84 	movi	r2,126
   45550:	00c0fc04 	movi	r3,1008
   45554:	003f8c06 	br	45388 <_free_r+0x134>
   45558:	3804d4ba 	srli	r2,r7,18
   4555c:	10801f04 	addi	r2,r2,124
   45560:	100690fa 	slli	r3,r2,3
   45564:	003f8806 	br	45388 <_free_r+0x134>

00045568 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   45568:	defffd04 	addi	sp,sp,-12
   4556c:	df000215 	stw	fp,8(sp)
   45570:	df000204 	addi	fp,sp,8
   45574:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   45578:	e0bfff17 	ldw	r2,-4(fp)
   4557c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45580:	e0bffe17 	ldw	r2,-8(fp)
   45584:	1005003a 	cmpeq	r2,r2,zero
   45588:	1000021e 	bne	r2,zero,45594 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4558c:	002af070 	cmpltui	zero,zero,43969
   45590:	00000106 	br	45598 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   45594:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   45598:	e037883a 	mov	sp,fp
   4559c:	df000017 	ldw	fp,0(sp)
   455a0:	dec00104 	addi	sp,sp,4
   455a4:	f800283a 	ret

000455a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   455a8:	defffd04 	addi	sp,sp,-12
   455ac:	dfc00215 	stw	ra,8(sp)
   455b0:	df000115 	stw	fp,4(sp)
   455b4:	df000104 	addi	fp,sp,4
   455b8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   455bc:	e13fff17 	ldw	r4,-4(fp)
   455c0:	00455680 	call	45568 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   455c4:	003fff06 	br	455c4 <_exit+0x1c>

000455c8 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   455c8:	defffc04 	addi	sp,sp,-16
   455cc:	dfc00315 	stw	ra,12(sp)
   455d0:	df000215 	stw	fp,8(sp)
   455d4:	df000204 	addi	fp,sp,8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   455d8:	00800134 	movhi	r2,4
   455dc:	109b4004 	addi	r2,r2,27904
   455e0:	11c00217 	ldw	r7,8(r2)
   455e4:	01000134 	movhi	r4,4
   455e8:	211bac04 	addi	r4,r4,28336
   455ec:	e17ffe04 	addi	r5,fp,-8
   455f0:	01800044 	movi	r6,1
   455f4:	0045d700 	call	45d70 <altera_avalon_jtag_uart_read>
   455f8:	10800048 	cmpgei	r2,r2,1
   455fc:	1000031e 	bne	r2,zero,4560c <alt_getchar+0x44>
        return -1;
   45600:	00bfffc4 	movi	r2,-1
   45604:	e0bfff15 	stw	r2,-4(fp)
   45608:	00000506 	br	45620 <alt_getchar+0x58>
    }
    return c;
   4560c:	e0bffe03 	ldbu	r2,-8(fp)
   45610:	10803fcc 	andi	r2,r2,255
   45614:	1080201c 	xori	r2,r2,128
   45618:	10bfe004 	addi	r2,r2,-128
   4561c:	e0bfff15 	stw	r2,-4(fp)
   45620:	e0bfff17 	ldw	r2,-4(fp)
#else
    return getchar();
#endif
}
   45624:	e037883a 	mov	sp,fp
   45628:	dfc00117 	ldw	ra,4(sp)
   4562c:	df000017 	ldw	fp,0(sp)
   45630:	dec00204 	addi	sp,sp,8
   45634:	f800283a 	ret

00045638 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   45638:	deffff04 	addi	sp,sp,-4
   4563c:	df000015 	stw	fp,0(sp)
   45640:	d839883a 	mov	fp,sp
  return 0;
   45644:	0005883a 	mov	r2,zero
}
   45648:	e037883a 	mov	sp,fp
   4564c:	df000017 	ldw	fp,0(sp)
   45650:	dec00104 	addi	sp,sp,4
   45654:	f800283a 	ret

00045658 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   45658:	defffa04 	addi	sp,sp,-24
   4565c:	dfc00515 	stw	ra,20(sp)
   45660:	df000415 	stw	fp,16(sp)
   45664:	df000404 	addi	fp,sp,16
   45668:	e13ffd15 	stw	r4,-12(fp)
   4566c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   45670:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   45674:	e0bffd17 	ldw	r2,-12(fp)
   45678:	10800048 	cmpgei	r2,r2,1
   4567c:	1000301e 	bne	r2,zero,45740 <kill+0xe8>
  {
    switch (sig)
   45680:	e0bffe17 	ldw	r2,-8(fp)
   45684:	10800828 	cmpgeui	r2,r2,32
   45688:	10002a1e 	bne	r2,zero,45734 <kill+0xdc>
   4568c:	e0bffe17 	ldw	r2,-8(fp)
   45690:	1085883a 	add	r2,r2,r2
   45694:	1087883a 	add	r3,r2,r2
   45698:	00800134 	movhi	r2,4
   4569c:	1095ab04 	addi	r2,r2,22188
   456a0:	1885883a 	add	r2,r3,r2
   456a4:	10800017 	ldw	r2,0(r2)
   456a8:	1000683a 	jmp	r2
   456ac:	00045754 	movui	zero,4445
   456b0:	00045734 	movhi	zero,4444
   456b4:	00045734 	movhi	zero,4444
   456b8:	0004572c 	andhi	zero,zero,4444
   456bc:	0004572c 	andhi	zero,zero,4444
   456c0:	0004572c 	andhi	zero,zero,4444
   456c4:	0004572c 	andhi	zero,zero,4444
   456c8:	00045734 	movhi	zero,4444
   456cc:	0004572c 	andhi	zero,zero,4444
   456d0:	0004572c 	andhi	zero,zero,4444
   456d4:	0004572c 	andhi	zero,zero,4444
   456d8:	0004572c 	andhi	zero,zero,4444
   456dc:	0004572c 	andhi	zero,zero,4444
   456e0:	0004572c 	andhi	zero,zero,4444
   456e4:	0004572c 	andhi	zero,zero,4444
   456e8:	0004572c 	andhi	zero,zero,4444
   456ec:	00045754 	movui	zero,4445
   456f0:	00045734 	movhi	zero,4444
   456f4:	00045734 	movhi	zero,4444
   456f8:	00045734 	movhi	zero,4444
   456fc:	00045754 	movui	zero,4445
   45700:	00045734 	movhi	zero,4444
   45704:	00045734 	movhi	zero,4444
   45708:	0004572c 	andhi	zero,zero,4444
   4570c:	0004572c 	andhi	zero,zero,4444
   45710:	0004572c 	andhi	zero,zero,4444
   45714:	0004572c 	andhi	zero,zero,4444
   45718:	0004572c 	andhi	zero,zero,4444
   4571c:	00045734 	movhi	zero,4444
   45720:	00045734 	movhi	zero,4444
   45724:	0004572c 	andhi	zero,zero,4444
   45728:	0004572c 	andhi	zero,zero,4444
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   4572c:	0009883a 	mov	r4,zero
   45730:	00455a80 	call	455a8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   45734:	00800584 	movi	r2,22
   45738:	e0bffc15 	stw	r2,-16(fp)
   4573c:	00000506 	br	45754 <kill+0xfc>
    }
  }

  else if (pid > 0)
   45740:	e0bffd17 	ldw	r2,-12(fp)
   45744:	10800050 	cmplti	r2,r2,1
   45748:	1000021e 	bne	r2,zero,45754 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   4574c:	008000c4 	movi	r2,3
   45750:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   45754:	e0bffc17 	ldw	r2,-16(fp)
   45758:	1005003a 	cmpeq	r2,r2,zero
   4575c:	1000071e 	bne	r2,zero,4577c <kill+0x124>
  {
    ALT_ERRNO = status;
   45760:	00457980 	call	45798 <alt_get_errno>
   45764:	1007883a 	mov	r3,r2
   45768:	e0bffc17 	ldw	r2,-16(fp)
   4576c:	18800015 	stw	r2,0(r3)
    return -1;
   45770:	00bfffc4 	movi	r2,-1
   45774:	e0bfff15 	stw	r2,-4(fp)
   45778:	00000106 	br	45780 <kill+0x128>
  }

  return 0;
   4577c:	e03fff15 	stw	zero,-4(fp)
   45780:	e0bfff17 	ldw	r2,-4(fp)
}
   45784:	e037883a 	mov	sp,fp
   45788:	dfc00117 	ldw	ra,4(sp)
   4578c:	df000017 	ldw	fp,0(sp)
   45790:	dec00204 	addi	sp,sp,8
   45794:	f800283a 	ret

00045798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45798:	defffd04 	addi	sp,sp,-12
   4579c:	dfc00215 	stw	ra,8(sp)
   457a0:	df000115 	stw	fp,4(sp)
   457a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   457a8:	00800134 	movhi	r2,4
   457ac:	109bb304 	addi	r2,r2,28364
   457b0:	10800017 	ldw	r2,0(r2)
   457b4:	1005003a 	cmpeq	r2,r2,zero
   457b8:	1000061e 	bne	r2,zero,457d4 <alt_get_errno+0x3c>
   457bc:	00800134 	movhi	r2,4
   457c0:	109bb304 	addi	r2,r2,28364
   457c4:	10800017 	ldw	r2,0(r2)
   457c8:	103ee83a 	callr	r2
   457cc:	e0bfff15 	stw	r2,-4(fp)
   457d0:	00000306 	br	457e0 <alt_get_errno+0x48>
   457d4:	00800134 	movhi	r2,4
   457d8:	109d7904 	addi	r2,r2,30180
   457dc:	e0bfff15 	stw	r2,-4(fp)
   457e0:	e0bfff17 	ldw	r2,-4(fp)
}
   457e4:	e037883a 	mov	sp,fp
   457e8:	dfc00117 	ldw	ra,4(sp)
   457ec:	df000017 	ldw	fp,0(sp)
   457f0:	dec00204 	addi	sp,sp,8
   457f4:	f800283a 	ret

000457f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   457f8:	defffe04 	addi	sp,sp,-8
   457fc:	dfc00115 	stw	ra,4(sp)
   45800:	df000015 	stw	fp,0(sp)
   45804:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   45808:	01000134 	movhi	r4,4
   4580c:	211bb404 	addi	r4,r4,28368
   45810:	01400134 	movhi	r5,4
   45814:	2959fc04 	addi	r5,r5,26608
   45818:	01800134 	movhi	r6,4
   4581c:	319bb404 	addi	r6,r6,28368
   45820:	00458780 	call	45878 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   45824:	01000134 	movhi	r4,4
   45828:	21000804 	addi	r4,r4,32
   4582c:	01400134 	movhi	r5,4
   45830:	29400804 	addi	r5,r5,32
   45834:	01800134 	movhi	r6,4
   45838:	31800804 	addi	r6,r6,32
   4583c:	00458780 	call	45878 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   45840:	01000134 	movhi	r4,4
   45844:	21193a04 	addi	r4,r4,25832
   45848:	01400134 	movhi	r5,4
   4584c:	29593a04 	addi	r5,r5,25832
   45850:	01800134 	movhi	r6,4
   45854:	3199fc04 	addi	r6,r6,26608
   45858:	00458780 	call	45878 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4585c:	0045fb40 	call	45fb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   45860:	00460c40 	call	460c4 <alt_icache_flush_all>
}
   45864:	e037883a 	mov	sp,fp
   45868:	dfc00117 	ldw	ra,4(sp)
   4586c:	df000017 	ldw	fp,0(sp)
   45870:	dec00204 	addi	sp,sp,8
   45874:	f800283a 	ret

00045878 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   45878:	defffc04 	addi	sp,sp,-16
   4587c:	df000315 	stw	fp,12(sp)
   45880:	df000304 	addi	fp,sp,12
   45884:	e13ffd15 	stw	r4,-12(fp)
   45888:	e17ffe15 	stw	r5,-8(fp)
   4588c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   45890:	e0fffe17 	ldw	r3,-8(fp)
   45894:	e0bffd17 	ldw	r2,-12(fp)
   45898:	18800e26 	beq	r3,r2,458d4 <alt_load_section+0x5c>
  {
    while( to != end )
   4589c:	00000a06 	br	458c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   458a0:	e0bffd17 	ldw	r2,-12(fp)
   458a4:	10c00017 	ldw	r3,0(r2)
   458a8:	e0bffe17 	ldw	r2,-8(fp)
   458ac:	10c00015 	stw	r3,0(r2)
   458b0:	e0bffe17 	ldw	r2,-8(fp)
   458b4:	10800104 	addi	r2,r2,4
   458b8:	e0bffe15 	stw	r2,-8(fp)
   458bc:	e0bffd17 	ldw	r2,-12(fp)
   458c0:	10800104 	addi	r2,r2,4
   458c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   458c8:	e0fffe17 	ldw	r3,-8(fp)
   458cc:	e0bfff17 	ldw	r2,-4(fp)
   458d0:	18bff31e 	bne	r3,r2,458a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   458d4:	e037883a 	mov	sp,fp
   458d8:	df000017 	ldw	fp,0(sp)
   458dc:	dec00104 	addi	sp,sp,4
   458e0:	f800283a 	ret

000458e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   458e4:	defffd04 	addi	sp,sp,-12
   458e8:	dfc00215 	stw	ra,8(sp)
   458ec:	df000115 	stw	fp,4(sp)
   458f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   458f4:	0009883a 	mov	r4,zero
   458f8:	0045cfc0 	call	45cfc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   458fc:	0045d300 	call	45d30 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   45900:	0045ffc0 	call	45ffc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   45904:	01000134 	movhi	r4,4
   45908:	21181804 	addi	r4,r4,24672
   4590c:	00461000 	call	46100 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   45910:	d121da17 	ldw	r4,-30872(gp)
   45914:	d161db17 	ldw	r5,-30868(gp)
   45918:	d1a1dc17 	ldw	r6,-30864(gp)
   4591c:	00418540 	call	41854 <main>
   45920:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   45924:	01000044 	movi	r4,1
   45928:	0045f180 	call	45f18 <close>
  exit (result);
   4592c:	e13fff17 	ldw	r4,-4(fp)
   45930:	00461140 	call	46114 <exit>

00045934 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   45934:	defffe04 	addi	sp,sp,-8
   45938:	df000115 	stw	fp,4(sp)
   4593c:	df000104 	addi	fp,sp,4
   45940:	e13fff15 	stw	r4,-4(fp)
}
   45944:	e037883a 	mov	sp,fp
   45948:	df000017 	ldw	fp,0(sp)
   4594c:	dec00104 	addi	sp,sp,4
   45950:	f800283a 	ret

00045954 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   45954:	defffe04 	addi	sp,sp,-8
   45958:	df000115 	stw	fp,4(sp)
   4595c:	df000104 	addi	fp,sp,4
   45960:	e13fff15 	stw	r4,-4(fp)
}
   45964:	e037883a 	mov	sp,fp
   45968:	df000017 	ldw	fp,0(sp)
   4596c:	dec00104 	addi	sp,sp,4
   45970:	f800283a 	ret

00045974 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   45974:	defff204 	addi	sp,sp,-56
   45978:	dfc00a15 	stw	ra,40(sp)
   4597c:	df000915 	stw	fp,36(sp)
   45980:	df000904 	addi	fp,sp,36
   45984:	e1400215 	stw	r5,8(fp)
   45988:	e1800315 	stw	r6,12(fp)
   4598c:	e1c00415 	stw	r7,16(fp)
   45990:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   45994:	e0800204 	addi	r2,fp,8
   45998:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   4599c:	e0bfff17 	ldw	r2,-4(fp)
   459a0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   459a4:	00007806 	br	45b88 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   459a8:	e0bffc07 	ldb	r2,-16(fp)
   459ac:	10800960 	cmpeqi	r2,r2,37
   459b0:	1000031e 	bne	r2,zero,459c0 <alt_printf+0x4c>
        {
            alt_putchar(c);
   459b4:	e13ffc07 	ldb	r4,-16(fp)
   459b8:	0045bcc0 	call	45bcc <alt_putchar>
   459bc:	00007206 	br	45b88 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   459c0:	e0bffd17 	ldw	r2,-12(fp)
   459c4:	10800003 	ldbu	r2,0(r2)
   459c8:	e0bffc05 	stb	r2,-16(fp)
   459cc:	e0bffc07 	ldb	r2,-16(fp)
   459d0:	1004c03a 	cmpne	r2,r2,zero
   459d4:	1007883a 	mov	r3,r2
   459d8:	e0bffd17 	ldw	r2,-12(fp)
   459dc:	10800044 	addi	r2,r2,1
   459e0:	e0bffd15 	stw	r2,-12(fp)
   459e4:	18803fcc 	andi	r2,r3,255
   459e8:	1005003a 	cmpeq	r2,r2,zero
   459ec:	1000721e 	bne	r2,zero,45bb8 <alt_printf+0x244>
            {
                if (c == '%')
   459f0:	e0bffc07 	ldb	r2,-16(fp)
   459f4:	10800958 	cmpnei	r2,r2,37
   459f8:	1000031e 	bne	r2,zero,45a08 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   459fc:	e13ffc07 	ldb	r4,-16(fp)
   45a00:	0045bcc0 	call	45bcc <alt_putchar>
   45a04:	00006006 	br	45b88 <alt_printf+0x214>
                } 
                else if (c == 'c')
   45a08:	e0bffc07 	ldb	r2,-16(fp)
   45a0c:	108018d8 	cmpnei	r2,r2,99
   45a10:	1000091e 	bne	r2,zero,45a38 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   45a14:	e0fffe17 	ldw	r3,-8(fp)
   45a18:	18800104 	addi	r2,r3,4
   45a1c:	e0bffe15 	stw	r2,-8(fp)
   45a20:	1805883a 	mov	r2,r3
   45a24:	10800017 	ldw	r2,0(r2)
   45a28:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   45a2c:	e13ffb17 	ldw	r4,-20(fp)
   45a30:	0045bcc0 	call	45bcc <alt_putchar>
   45a34:	00005406 	br	45b88 <alt_printf+0x214>
                }
                else if (c == 'x')
   45a38:	e0bffc07 	ldb	r2,-16(fp)
   45a3c:	10801e18 	cmpnei	r2,r2,120
   45a40:	1000371e 	bne	r2,zero,45b20 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   45a44:	e0fffe17 	ldw	r3,-8(fp)
   45a48:	18800104 	addi	r2,r3,4
   45a4c:	e0bffe15 	stw	r2,-8(fp)
   45a50:	1805883a 	mov	r2,r3
   45a54:	10800017 	ldw	r2,0(r2)
   45a58:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   45a5c:	e0bffa17 	ldw	r2,-24(fp)
   45a60:	1004c03a 	cmpne	r2,r2,zero
   45a64:	1000031e 	bne	r2,zero,45a74 <alt_printf+0x100>
                    {
                        alt_putchar('0');
   45a68:	01000c04 	movi	r4,48
   45a6c:	0045bcc0 	call	45bcc <alt_putchar>
                        continue;
   45a70:	00004506 	br	45b88 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   45a74:	00800704 	movi	r2,28
   45a78:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   45a7c:	00000306 	br	45a8c <alt_printf+0x118>
                        digit_shift -= 4;
   45a80:	e0bff817 	ldw	r2,-32(fp)
   45a84:	10bfff04 	addi	r2,r2,-4
   45a88:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   45a8c:	00c003c4 	movi	r3,15
   45a90:	e0bff817 	ldw	r2,-32(fp)
   45a94:	1884983a 	sll	r2,r3,r2
   45a98:	1007883a 	mov	r3,r2
   45a9c:	e0bffa17 	ldw	r2,-24(fp)
   45aa0:	1884703a 	and	r2,r3,r2
   45aa4:	1005003a 	cmpeq	r2,r2,zero
   45aa8:	103ff51e 	bne	r2,zero,45a80 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   45aac:	00001806 	br	45b10 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   45ab0:	00c003c4 	movi	r3,15
   45ab4:	e0bff817 	ldw	r2,-32(fp)
   45ab8:	1884983a 	sll	r2,r3,r2
   45abc:	1007883a 	mov	r3,r2
   45ac0:	e0bffa17 	ldw	r2,-24(fp)
   45ac4:	1886703a 	and	r3,r3,r2
   45ac8:	e0bff817 	ldw	r2,-32(fp)
   45acc:	1884d83a 	srl	r2,r3,r2
   45ad0:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   45ad4:	e0bff917 	ldw	r2,-28(fp)
   45ad8:	108002a8 	cmpgeui	r2,r2,10
   45adc:	1000041e 	bne	r2,zero,45af0 <alt_printf+0x17c>
                            c = '0' + digit;
   45ae0:	e0bff917 	ldw	r2,-28(fp)
   45ae4:	10800c04 	addi	r2,r2,48
   45ae8:	e0bffc05 	stb	r2,-16(fp)
   45aec:	00000306 	br	45afc <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   45af0:	e0bff917 	ldw	r2,-28(fp)
   45af4:	108015c4 	addi	r2,r2,87
   45af8:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   45afc:	e13ffc07 	ldb	r4,-16(fp)
   45b00:	0045bcc0 	call	45bcc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   45b04:	e0bff817 	ldw	r2,-32(fp)
   45b08:	10bfff04 	addi	r2,r2,-4
   45b0c:	e0bff815 	stw	r2,-32(fp)
   45b10:	e0bff817 	ldw	r2,-32(fp)
   45b14:	1004403a 	cmpge	r2,r2,zero
   45b18:	103fe51e 	bne	r2,zero,45ab0 <alt_printf+0x13c>
   45b1c:	00001a06 	br	45b88 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   45b20:	e0bffc07 	ldb	r2,-16(fp)
   45b24:	10801cd8 	cmpnei	r2,r2,115
   45b28:	1000171e 	bne	r2,zero,45b88 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   45b2c:	e0fffe17 	ldw	r3,-8(fp)
   45b30:	18800104 	addi	r2,r3,4
   45b34:	e0bffe15 	stw	r2,-8(fp)
   45b38:	1805883a 	mov	r2,r3
   45b3c:	10800017 	ldw	r2,0(r2)
   45b40:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   45b44:	00000906 	br	45b6c <alt_printf+0x1f8>
                      alt_putchar(*s++);
   45b48:	e0bff717 	ldw	r2,-36(fp)
   45b4c:	10800003 	ldbu	r2,0(r2)
   45b50:	11003fcc 	andi	r4,r2,255
   45b54:	2100201c 	xori	r4,r4,128
   45b58:	213fe004 	addi	r4,r4,-128
   45b5c:	e0bff717 	ldw	r2,-36(fp)
   45b60:	10800044 	addi	r2,r2,1
   45b64:	e0bff715 	stw	r2,-36(fp)
   45b68:	0045bcc0 	call	45bcc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   45b6c:	e0bff717 	ldw	r2,-36(fp)
   45b70:	10800003 	ldbu	r2,0(r2)
   45b74:	10803fcc 	andi	r2,r2,255
   45b78:	1080201c 	xori	r2,r2,128
   45b7c:	10bfe004 	addi	r2,r2,-128
   45b80:	1004c03a 	cmpne	r2,r2,zero
   45b84:	103ff01e 	bne	r2,zero,45b48 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   45b88:	e0bffd17 	ldw	r2,-12(fp)
   45b8c:	10800003 	ldbu	r2,0(r2)
   45b90:	e0bffc05 	stb	r2,-16(fp)
   45b94:	e0bffc07 	ldb	r2,-16(fp)
   45b98:	1004c03a 	cmpne	r2,r2,zero
   45b9c:	1007883a 	mov	r3,r2
   45ba0:	e0bffd17 	ldw	r2,-12(fp)
   45ba4:	10800044 	addi	r2,r2,1
   45ba8:	e0bffd15 	stw	r2,-12(fp)
   45bac:	18803fcc 	andi	r2,r3,255
   45bb0:	1004c03a 	cmpne	r2,r2,zero
   45bb4:	103f7c1e 	bne	r2,zero,459a8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   45bb8:	e037883a 	mov	sp,fp
   45bbc:	dfc00117 	ldw	ra,4(sp)
   45bc0:	df000017 	ldw	fp,0(sp)
   45bc4:	dec00504 	addi	sp,sp,20
   45bc8:	f800283a 	ret

00045bcc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   45bcc:	defffb04 	addi	sp,sp,-20
   45bd0:	dfc00415 	stw	ra,16(sp)
   45bd4:	df000315 	stw	fp,12(sp)
   45bd8:	df000304 	addi	fp,sp,12
   45bdc:	e13ffe15 	stw	r4,-8(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   45be0:	e0bffe17 	ldw	r2,-8(fp)
   45be4:	1007883a 	mov	r3,r2
   45be8:	00bfffc4 	movi	r2,-1
   45bec:	1884703a 	and	r2,r3,r2
   45bf0:	e0bffd05 	stb	r2,-12(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   45bf4:	01000134 	movhi	r4,4
   45bf8:	211bac04 	addi	r4,r4,28336
   45bfc:	e17ffd04 	addi	r5,fp,-12
   45c00:	01800044 	movi	r6,1
   45c04:	000f883a 	mov	r7,zero
   45c08:	0045e740 	call	45e74 <altera_avalon_jtag_uart_write>
   45c0c:	10bfffd8 	cmpnei	r2,r2,-1
   45c10:	1000031e 	bne	r2,zero,45c20 <alt_putchar+0x54>
        return -1;
   45c14:	00bfffc4 	movi	r2,-1
   45c18:	e0bfff15 	stw	r2,-4(fp)
   45c1c:	00000206 	br	45c28 <alt_putchar+0x5c>
    }
    return c;
   45c20:	e0bffe17 	ldw	r2,-8(fp)
   45c24:	e0bfff15 	stw	r2,-4(fp)
   45c28:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
}
   45c2c:	e037883a 	mov	sp,fp
   45c30:	dfc00117 	ldw	ra,4(sp)
   45c34:	df000017 	ldw	fp,0(sp)
   45c38:	dec00204 	addi	sp,sp,8
   45c3c:	f800283a 	ret

00045c40 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   45c40:	defff804 	addi	sp,sp,-32
   45c44:	df000715 	stw	fp,28(sp)
   45c48:	df000704 	addi	fp,sp,28
   45c4c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45c50:	0005303a 	rdctl	r2,status
   45c54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45c58:	e0fffb17 	ldw	r3,-20(fp)
   45c5c:	00bfff84 	movi	r2,-2
   45c60:	1884703a 	and	r2,r3,r2
   45c64:	1001703a 	wrctl	status,r2
  
  return context;
   45c68:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   45c6c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   45c70:	d0a00b17 	ldw	r2,-32724(gp)
   45c74:	10c000c4 	addi	r3,r2,3
   45c78:	00bfff04 	movi	r2,-4
   45c7c:	1884703a 	and	r2,r3,r2
   45c80:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   45c84:	d0e00b17 	ldw	r3,-32724(gp)
   45c88:	e0bffe17 	ldw	r2,-8(fp)
   45c8c:	1887883a 	add	r3,r3,r2
   45c90:	008001b4 	movhi	r2,6
   45c94:	10a1a804 	addi	r2,r2,-31072
   45c98:	10c0072e 	bgeu	r2,r3,45cb8 <sbrk+0x78>
   45c9c:	e0bffd17 	ldw	r2,-12(fp)
   45ca0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45ca4:	e0bffa17 	ldw	r2,-24(fp)
   45ca8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   45cac:	00bfffc4 	movi	r2,-1
   45cb0:	e0bfff15 	stw	r2,-4(fp)
   45cb4:	00000c06 	br	45ce8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   45cb8:	d0a00b17 	ldw	r2,-32724(gp)
   45cbc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   45cc0:	d0e00b17 	ldw	r3,-32724(gp)
   45cc4:	e0bffe17 	ldw	r2,-8(fp)
   45cc8:	1885883a 	add	r2,r3,r2
   45ccc:	d0a00b15 	stw	r2,-32724(gp)
   45cd0:	e0bffd17 	ldw	r2,-12(fp)
   45cd4:	e0bff915 	stw	r2,-28(fp)
   45cd8:	e0bff917 	ldw	r2,-28(fp)
   45cdc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   45ce0:	e0bffc17 	ldw	r2,-16(fp)
   45ce4:	e0bfff15 	stw	r2,-4(fp)
   45ce8:	e0bfff17 	ldw	r2,-4(fp)
} 
   45cec:	e037883a 	mov	sp,fp
   45cf0:	df000017 	ldw	fp,0(sp)
   45cf4:	dec00104 	addi	sp,sp,4
   45cf8:	f800283a 	ret

00045cfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   45cfc:	defffd04 	addi	sp,sp,-12
   45d00:	dfc00215 	stw	ra,8(sp)
   45d04:	df000115 	stw	fp,4(sp)
   45d08:	df000104 	addi	fp,sp,4
   45d0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   45d10:	00460e00 	call	460e0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   45d14:	00800044 	movi	r2,1
   45d18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   45d1c:	e037883a 	mov	sp,fp
   45d20:	dfc00117 	ldw	ra,4(sp)
   45d24:	df000017 	ldw	fp,0(sp)
   45d28:	dec00204 	addi	sp,sp,8
   45d2c:	f800283a 	ret

00045d30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   45d30:	deffff04 	addi	sp,sp,-4
   45d34:	df000015 	stw	fp,0(sp)
   45d38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   45d3c:	00c00134 	movhi	r3,4
   45d40:	18dd7d04 	addi	r3,r3,30196
   45d44:	00842004 	movi	r2,4224
   45d48:	18800015 	stw	r2,0(r3)
   45d4c:	00c00134 	movhi	r3,4
   45d50:	18dd7e04 	addi	r3,r3,30200
   45d54:	0080bef4 	movhi	r2,763
   45d58:	10bc2004 	addi	r2,r2,-3968
   45d5c:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    FIFOED_AVALON_UART_INIT ( ESP8266, esp8266);
}
   45d60:	e037883a 	mov	sp,fp
   45d64:	df000017 	ldw	fp,0(sp)
   45d68:	dec00104 	addi	sp,sp,4
   45d6c:	f800283a 	ret

00045d70 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   45d70:	defff604 	addi	sp,sp,-40
   45d74:	df000915 	stw	fp,36(sp)
   45d78:	df000904 	addi	fp,sp,36
   45d7c:	e13ffb15 	stw	r4,-20(fp)
   45d80:	e17ffc15 	stw	r5,-16(fp)
   45d84:	e1bffd15 	stw	r6,-12(fp)
   45d88:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   45d8c:	e0bffb17 	ldw	r2,-20(fp)
   45d90:	10800017 	ldw	r2,0(r2)
   45d94:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   45d98:	e0bffc17 	ldw	r2,-16(fp)
   45d9c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   45da0:	e0bffd17 	ldw	r2,-12(fp)
   45da4:	1007883a 	mov	r3,r2
   45da8:	e0bffc17 	ldw	r2,-16(fp)
   45dac:	10c5883a 	add	r2,r2,r3
   45db0:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   45db4:	00001606 	br	45e10 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   45db8:	e0bffa17 	ldw	r2,-24(fp)
   45dbc:	10800037 	ldwio	r2,0(r2)
   45dc0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   45dc4:	e0bff717 	ldw	r2,-36(fp)
   45dc8:	10a0000c 	andi	r2,r2,32768
   45dcc:	1005003a 	cmpeq	r2,r2,zero
   45dd0:	1000081e 	bne	r2,zero,45df4 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   45dd4:	e0bff717 	ldw	r2,-36(fp)
   45dd8:	1007883a 	mov	r3,r2
   45ddc:	e0bff917 	ldw	r2,-28(fp)
   45de0:	10c00005 	stb	r3,0(r2)
   45de4:	e0bff917 	ldw	r2,-28(fp)
   45de8:	10800044 	addi	r2,r2,1
   45dec:	e0bff915 	stw	r2,-28(fp)
   45df0:	00000706 	br	45e10 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   45df4:	e0fff917 	ldw	r3,-28(fp)
   45df8:	e0bffc17 	ldw	r2,-16(fp)
   45dfc:	1880071e 	bne	r3,r2,45e1c <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   45e00:	e0bffe17 	ldw	r2,-8(fp)
   45e04:	1090000c 	andi	r2,r2,16384
   45e08:	1004c03a 	cmpne	r2,r2,zero
   45e0c:	1000031e 	bne	r2,zero,45e1c <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   45e10:	e0fff917 	ldw	r3,-28(fp)
   45e14:	e0bff817 	ldw	r2,-32(fp)
   45e18:	18bfe736 	bltu	r3,r2,45db8 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   45e1c:	e0fff917 	ldw	r3,-28(fp)
   45e20:	e0bffc17 	ldw	r2,-16(fp)
   45e24:	18800526 	beq	r3,r2,45e3c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   45e28:	e0fff917 	ldw	r3,-28(fp)
   45e2c:	e0bffc17 	ldw	r2,-16(fp)
   45e30:	1887c83a 	sub	r3,r3,r2
   45e34:	e0ffff15 	stw	r3,-4(fp)
   45e38:	00000906 	br	45e60 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   45e3c:	e0bffe17 	ldw	r2,-8(fp)
   45e40:	1090000c 	andi	r2,r2,16384
   45e44:	1005003a 	cmpeq	r2,r2,zero
   45e48:	1000031e 	bne	r2,zero,45e58 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   45e4c:	00bffd44 	movi	r2,-11
   45e50:	e0bfff15 	stw	r2,-4(fp)
   45e54:	00000206 	br	45e60 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   45e58:	00bffec4 	movi	r2,-5
   45e5c:	e0bfff15 	stw	r2,-4(fp)
   45e60:	e0bfff17 	ldw	r2,-4(fp)
}
   45e64:	e037883a 	mov	sp,fp
   45e68:	df000017 	ldw	fp,0(sp)
   45e6c:	dec00104 	addi	sp,sp,4
   45e70:	f800283a 	ret

00045e74 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   45e74:	defff904 	addi	sp,sp,-28
   45e78:	df000615 	stw	fp,24(sp)
   45e7c:	df000604 	addi	fp,sp,24
   45e80:	e13ffc15 	stw	r4,-16(fp)
   45e84:	e17ffd15 	stw	r5,-12(fp)
   45e88:	e1bffe15 	stw	r6,-8(fp)
   45e8c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   45e90:	e0bffc17 	ldw	r2,-16(fp)
   45e94:	10800017 	ldw	r2,0(r2)
   45e98:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   45e9c:	e0bffe17 	ldw	r2,-8(fp)
   45ea0:	1007883a 	mov	r3,r2
   45ea4:	e0bffd17 	ldw	r2,-12(fp)
   45ea8:	10c5883a 	add	r2,r2,r3
   45eac:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   45eb0:	00001106 	br	45ef8 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   45eb4:	e0bffb17 	ldw	r2,-20(fp)
   45eb8:	10800104 	addi	r2,r2,4
   45ebc:	10800037 	ldwio	r2,0(r2)
   45ec0:	10bfffec 	andhi	r2,r2,65535
   45ec4:	1005003a 	cmpeq	r2,r2,zero
   45ec8:	10000b1e 	bne	r2,zero,45ef8 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   45ecc:	e13ffb17 	ldw	r4,-20(fp)
   45ed0:	e0bffd17 	ldw	r2,-12(fp)
   45ed4:	10800003 	ldbu	r2,0(r2)
   45ed8:	10c03fcc 	andi	r3,r2,255
   45edc:	18c0201c 	xori	r3,r3,128
   45ee0:	18ffe004 	addi	r3,r3,-128
   45ee4:	e0bffd17 	ldw	r2,-12(fp)
   45ee8:	10800044 	addi	r2,r2,1
   45eec:	e0bffd15 	stw	r2,-12(fp)
   45ef0:	2005883a 	mov	r2,r4
   45ef4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   45ef8:	e0fffd17 	ldw	r3,-12(fp)
   45efc:	e0bffa17 	ldw	r2,-24(fp)
   45f00:	18bfec36 	bltu	r3,r2,45eb4 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   45f04:	e0bffe17 	ldw	r2,-8(fp)
}
   45f08:	e037883a 	mov	sp,fp
   45f0c:	df000017 	ldw	fp,0(sp)
   45f10:	dec00104 	addi	sp,sp,4
   45f14:	f800283a 	ret

00045f18 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   45f18:	defffd04 	addi	sp,sp,-12
   45f1c:	dfc00215 	stw	ra,8(sp)
   45f20:	df000115 	stw	fp,4(sp)
   45f24:	df000104 	addi	fp,sp,4
   45f28:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   45f2c:	0045f540 	call	45f54 <alt_get_errno>
   45f30:	1007883a 	mov	r3,r2
   45f34:	00801604 	movi	r2,88
   45f38:	18800015 	stw	r2,0(r3)
  return -1;
   45f3c:	00bfffc4 	movi	r2,-1
}
   45f40:	e037883a 	mov	sp,fp
   45f44:	dfc00117 	ldw	ra,4(sp)
   45f48:	df000017 	ldw	fp,0(sp)
   45f4c:	dec00204 	addi	sp,sp,8
   45f50:	f800283a 	ret

00045f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45f54:	defffd04 	addi	sp,sp,-12
   45f58:	dfc00215 	stw	ra,8(sp)
   45f5c:	df000115 	stw	fp,4(sp)
   45f60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   45f64:	00800134 	movhi	r2,4
   45f68:	109bb304 	addi	r2,r2,28364
   45f6c:	10800017 	ldw	r2,0(r2)
   45f70:	1005003a 	cmpeq	r2,r2,zero
   45f74:	1000061e 	bne	r2,zero,45f90 <alt_get_errno+0x3c>
   45f78:	00800134 	movhi	r2,4
   45f7c:	109bb304 	addi	r2,r2,28364
   45f80:	10800017 	ldw	r2,0(r2)
   45f84:	103ee83a 	callr	r2
   45f88:	e0bfff15 	stw	r2,-4(fp)
   45f8c:	00000306 	br	45f9c <alt_get_errno+0x48>
   45f90:	00800134 	movhi	r2,4
   45f94:	109d7904 	addi	r2,r2,30180
   45f98:	e0bfff15 	stw	r2,-4(fp)
   45f9c:	e0bfff17 	ldw	r2,-4(fp)
}
   45fa0:	e037883a 	mov	sp,fp
   45fa4:	dfc00117 	ldw	ra,4(sp)
   45fa8:	df000017 	ldw	fp,0(sp)
   45fac:	dec00204 	addi	sp,sp,8
   45fb0:	f800283a 	ret

00045fb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   45fb4:	deffff04 	addi	sp,sp,-4
   45fb8:	df000015 	stw	fp,0(sp)
   45fbc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45fc0:	e037883a 	mov	sp,fp
   45fc4:	df000017 	ldw	fp,0(sp)
   45fc8:	dec00104 	addi	sp,sp,4
   45fcc:	f800283a 	ret

00045fd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   45fd0:	defffc04 	addi	sp,sp,-16
   45fd4:	df000315 	stw	fp,12(sp)
   45fd8:	df000304 	addi	fp,sp,12
   45fdc:	e13ffd15 	stw	r4,-12(fp)
   45fe0:	e17ffe15 	stw	r5,-8(fp)
   45fe4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   45fe8:	e0bfff17 	ldw	r2,-4(fp)
}
   45fec:	e037883a 	mov	sp,fp
   45ff0:	df000017 	ldw	fp,0(sp)
   45ff4:	dec00104 	addi	sp,sp,4
   45ff8:	f800283a 	ret

00045ffc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45ffc:	defffd04 	addi	sp,sp,-12
   46000:	dfc00215 	stw	ra,8(sp)
   46004:	df000115 	stw	fp,4(sp)
   46008:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4600c:	00bfff04 	movi	r2,-4
   46010:	00c00134 	movhi	r3,4
   46014:	18d93a04 	addi	r3,r3,25832
   46018:	1885883a 	add	r2,r3,r2
   4601c:	e0bfff15 	stw	r2,-4(fp)
   46020:	00000606 	br	4603c <_do_ctors+0x40>
        (*ctor) (); 
   46024:	e0bfff17 	ldw	r2,-4(fp)
   46028:	10800017 	ldw	r2,0(r2)
   4602c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   46030:	e0bfff17 	ldw	r2,-4(fp)
   46034:	10bfff04 	addi	r2,r2,-4
   46038:	e0bfff15 	stw	r2,-4(fp)
   4603c:	e0ffff17 	ldw	r3,-4(fp)
   46040:	00800134 	movhi	r2,4
   46044:	10993804 	addi	r2,r2,25824
   46048:	18bff62e 	bgeu	r3,r2,46024 <_do_ctors+0x28>
        (*ctor) (); 
}
   4604c:	e037883a 	mov	sp,fp
   46050:	dfc00117 	ldw	ra,4(sp)
   46054:	df000017 	ldw	fp,0(sp)
   46058:	dec00204 	addi	sp,sp,8
   4605c:	f800283a 	ret

00046060 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   46060:	defffd04 	addi	sp,sp,-12
   46064:	dfc00215 	stw	ra,8(sp)
   46068:	df000115 	stw	fp,4(sp)
   4606c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   46070:	00bfff04 	movi	r2,-4
   46074:	00c00134 	movhi	r3,4
   46078:	18d93a04 	addi	r3,r3,25832
   4607c:	1885883a 	add	r2,r3,r2
   46080:	e0bfff15 	stw	r2,-4(fp)
   46084:	00000606 	br	460a0 <_do_dtors+0x40>
        (*dtor) (); 
   46088:	e0bfff17 	ldw	r2,-4(fp)
   4608c:	10800017 	ldw	r2,0(r2)
   46090:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   46094:	e0bfff17 	ldw	r2,-4(fp)
   46098:	10bfff04 	addi	r2,r2,-4
   4609c:	e0bfff15 	stw	r2,-4(fp)
   460a0:	e0ffff17 	ldw	r3,-4(fp)
   460a4:	00800134 	movhi	r2,4
   460a8:	10993a04 	addi	r2,r2,25832
   460ac:	18bff62e 	bgeu	r3,r2,46088 <_do_dtors+0x28>
        (*dtor) (); 
}
   460b0:	e037883a 	mov	sp,fp
   460b4:	dfc00117 	ldw	ra,4(sp)
   460b8:	df000017 	ldw	fp,0(sp)
   460bc:	dec00204 	addi	sp,sp,8
   460c0:	f800283a 	ret

000460c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   460c4:	deffff04 	addi	sp,sp,-4
   460c8:	df000015 	stw	fp,0(sp)
   460cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   460d0:	e037883a 	mov	sp,fp
   460d4:	df000017 	ldw	fp,0(sp)
   460d8:	dec00104 	addi	sp,sp,4
   460dc:	f800283a 	ret

000460e0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   460e0:	deffff04 	addi	sp,sp,-4
   460e4:	df000015 	stw	fp,0(sp)
   460e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   460ec:	000170fa 	wrctl	ienable,zero
}
   460f0:	e037883a 	mov	sp,fp
   460f4:	df000017 	ldw	fp,0(sp)
   460f8:	dec00104 	addi	sp,sp,4
   460fc:	f800283a 	ret

00046100 <atexit>:
   46100:	200b883a 	mov	r5,r4
   46104:	000d883a 	mov	r6,zero
   46108:	0009883a 	mov	r4,zero
   4610c:	000f883a 	mov	r7,zero
   46110:	00461341 	jmpi	46134 <__register_exitproc>

00046114 <exit>:
   46114:	defffe04 	addi	sp,sp,-8
   46118:	dc400015 	stw	r17,0(sp)
   4611c:	000b883a 	mov	r5,zero
   46120:	2023883a 	mov	r17,r4
   46124:	dfc00115 	stw	ra,4(sp)
   46128:	00462a40 	call	462a4 <__call_exitprocs>
   4612c:	8809883a 	mov	r4,r17
   46130:	00455a80 	call	455a8 <_exit>

00046134 <__register_exitproc>:
   46134:	defff904 	addi	sp,sp,-28
   46138:	00800134 	movhi	r2,4
   4613c:	109baa04 	addi	r2,r2,28328
   46140:	dc400115 	stw	r17,4(sp)
   46144:	14400017 	ldw	r17,0(r2)
   46148:	dc000015 	stw	r16,0(sp)
   4614c:	dd400515 	stw	r21,20(sp)
   46150:	8c000c17 	ldw	r16,48(r17)
   46154:	dd000415 	stw	r20,16(sp)
   46158:	dcc00315 	stw	r19,12(sp)
   4615c:	dc800215 	stw	r18,8(sp)
   46160:	dfc00615 	stw	ra,24(sp)
   46164:	2025883a 	mov	r18,r4
   46168:	282b883a 	mov	r21,r5
   4616c:	3029883a 	mov	r20,r6
   46170:	3827883a 	mov	r19,r7
   46174:	80002626 	beq	r16,zero,46210 <__register_exitproc+0xdc>
   46178:	81400117 	ldw	r5,4(r16)
   4617c:	008007c4 	movi	r2,31
   46180:	11403716 	blt	r2,r5,46260 <__register_exitproc+0x12c>
   46184:	90002026 	beq	r18,zero,46208 <__register_exitproc+0xd4>
   46188:	81802217 	ldw	r6,136(r16)
   4618c:	30002926 	beq	r6,zero,46234 <__register_exitproc+0x100>
   46190:	81400117 	ldw	r5,4(r16)
   46194:	00c00044 	movi	r3,1
   46198:	31004017 	ldw	r4,256(r6)
   4619c:	1946983a 	sll	r3,r3,r5
   461a0:	2945883a 	add	r2,r5,r5
   461a4:	1085883a 	add	r2,r2,r2
   461a8:	1185883a 	add	r2,r2,r6
   461ac:	20c8b03a 	or	r4,r4,r3
   461b0:	14c02015 	stw	r19,128(r2)
   461b4:	15000015 	stw	r20,0(r2)
   461b8:	00800084 	movi	r2,2
   461bc:	31004015 	stw	r4,256(r6)
   461c0:	90801826 	beq	r18,r2,46224 <__register_exitproc+0xf0>
   461c4:	2945883a 	add	r2,r5,r5
   461c8:	1085883a 	add	r2,r2,r2
   461cc:	1405883a 	add	r2,r2,r16
   461d0:	28c00044 	addi	r3,r5,1
   461d4:	0009883a 	mov	r4,zero
   461d8:	15400215 	stw	r21,8(r2)
   461dc:	80c00115 	stw	r3,4(r16)
   461e0:	2005883a 	mov	r2,r4
   461e4:	dfc00617 	ldw	ra,24(sp)
   461e8:	dd400517 	ldw	r21,20(sp)
   461ec:	dd000417 	ldw	r20,16(sp)
   461f0:	dcc00317 	ldw	r19,12(sp)
   461f4:	dc800217 	ldw	r18,8(sp)
   461f8:	dc400117 	ldw	r17,4(sp)
   461fc:	dc000017 	ldw	r16,0(sp)
   46200:	dec00704 	addi	sp,sp,28
   46204:	f800283a 	ret
   46208:	81400117 	ldw	r5,4(r16)
   4620c:	003fed06 	br	461c4 <__register_exitproc+0x90>
   46210:	00800134 	movhi	r2,4
   46214:	109f8e04 	addi	r2,r2,32312
   46218:	1021883a 	mov	r16,r2
   4621c:	88800c15 	stw	r2,48(r17)
   46220:	003fd506 	br	46178 <__register_exitproc+0x44>
   46224:	30804117 	ldw	r2,260(r6)
   46228:	10c4b03a 	or	r2,r2,r3
   4622c:	30804115 	stw	r2,260(r6)
   46230:	003fe406 	br	461c4 <__register_exitproc+0x90>
   46234:	00800134 	movhi	r2,4
   46238:	10916104 	addi	r2,r2,17796
   4623c:	10000b26 	beq	r2,zero,4626c <__register_exitproc+0x138>
   46240:	01004204 	movi	r4,264
   46244:	103ee83a 	callr	r2
   46248:	10000826 	beq	r2,zero,4626c <__register_exitproc+0x138>
   4624c:	100d883a 	mov	r6,r2
   46250:	10004015 	stw	zero,256(r2)
   46254:	10004115 	stw	zero,260(r2)
   46258:	80802215 	stw	r2,136(r16)
   4625c:	003fcc06 	br	46190 <__register_exitproc+0x5c>
   46260:	00800134 	movhi	r2,4
   46264:	10916104 	addi	r2,r2,17796
   46268:	1000021e 	bne	r2,zero,46274 <__register_exitproc+0x140>
   4626c:	013fffc4 	movi	r4,-1
   46270:	003fdb06 	br	461e0 <__register_exitproc+0xac>
   46274:	01002304 	movi	r4,140
   46278:	103ee83a 	callr	r2
   4627c:	1007883a 	mov	r3,r2
   46280:	103ffa26 	beq	r2,zero,4626c <__register_exitproc+0x138>
   46284:	88800c17 	ldw	r2,48(r17)
   46288:	1821883a 	mov	r16,r3
   4628c:	18000115 	stw	zero,4(r3)
   46290:	18800015 	stw	r2,0(r3)
   46294:	88c00c15 	stw	r3,48(r17)
   46298:	903fdb26 	beq	r18,zero,46208 <__register_exitproc+0xd4>
   4629c:	003fba06 	br	46188 <__register_exitproc+0x54>

000462a0 <register_fini>:
   462a0:	f800283a 	ret

000462a4 <__call_exitprocs>:
   462a4:	defff304 	addi	sp,sp,-52
   462a8:	00800134 	movhi	r2,4
   462ac:	109baa04 	addi	r2,r2,28328
   462b0:	df000b15 	stw	fp,44(sp)
   462b4:	17000017 	ldw	fp,0(r2)
   462b8:	00800134 	movhi	r2,4
   462bc:	10915c04 	addi	r2,r2,17776
   462c0:	1005003a 	cmpeq	r2,r2,zero
   462c4:	d8800215 	stw	r2,8(sp)
   462c8:	e0800c04 	addi	r2,fp,48
   462cc:	dd800915 	stw	r22,36(sp)
   462d0:	dd400815 	stw	r21,32(sp)
   462d4:	dfc00c15 	stw	ra,48(sp)
   462d8:	ddc00a15 	stw	r23,40(sp)
   462dc:	dd000715 	stw	r20,28(sp)
   462e0:	dcc00615 	stw	r19,24(sp)
   462e4:	dc800515 	stw	r18,20(sp)
   462e8:	dc400415 	stw	r17,16(sp)
   462ec:	dc000315 	stw	r16,12(sp)
   462f0:	282d883a 	mov	r22,r5
   462f4:	d9000115 	stw	r4,4(sp)
   462f8:	d8800015 	stw	r2,0(sp)
   462fc:	282b003a 	cmpeq	r21,r5,zero
   46300:	e4400c17 	ldw	r17,48(fp)
   46304:	88001226 	beq	r17,zero,46350 <__call_exitprocs+0xac>
   46308:	ddc00017 	ldw	r23,0(sp)
   4630c:	88800117 	ldw	r2,4(r17)
   46310:	8c802217 	ldw	r18,136(r17)
   46314:	143fffc4 	addi	r16,r2,-1
   46318:	80000b16 	blt	r16,zero,46348 <__call_exitprocs+0xa4>
   4631c:	9027003a 	cmpeq	r19,r18,zero
   46320:	a800171e 	bne	r21,zero,46380 <__call_exitprocs+0xdc>
   46324:	9800051e 	bne	r19,zero,4633c <__call_exitprocs+0x98>
   46328:	8409883a 	add	r4,r16,r16
   4632c:	2105883a 	add	r2,r4,r4
   46330:	1485883a 	add	r2,r2,r18
   46334:	10c02017 	ldw	r3,128(r2)
   46338:	b0c01226 	beq	r22,r3,46384 <__call_exitprocs+0xe0>
   4633c:	843fffc4 	addi	r16,r16,-1
   46340:	00bfffc4 	movi	r2,-1
   46344:	80bff61e 	bne	r16,r2,46320 <__call_exitprocs+0x7c>
   46348:	d8800217 	ldw	r2,8(sp)
   4634c:	10003226 	beq	r2,zero,46418 <__call_exitprocs+0x174>
   46350:	dfc00c17 	ldw	ra,48(sp)
   46354:	df000b17 	ldw	fp,44(sp)
   46358:	ddc00a17 	ldw	r23,40(sp)
   4635c:	dd800917 	ldw	r22,36(sp)
   46360:	dd400817 	ldw	r21,32(sp)
   46364:	dd000717 	ldw	r20,28(sp)
   46368:	dcc00617 	ldw	r19,24(sp)
   4636c:	dc800517 	ldw	r18,20(sp)
   46370:	dc400417 	ldw	r17,16(sp)
   46374:	dc000317 	ldw	r16,12(sp)
   46378:	dec00d04 	addi	sp,sp,52
   4637c:	f800283a 	ret
   46380:	8409883a 	add	r4,r16,r16
   46384:	88c00117 	ldw	r3,4(r17)
   46388:	2105883a 	add	r2,r4,r4
   4638c:	1445883a 	add	r2,r2,r17
   46390:	18ffffc4 	addi	r3,r3,-1
   46394:	11800217 	ldw	r6,8(r2)
   46398:	1c001826 	beq	r3,r16,463fc <__call_exitprocs+0x158>
   4639c:	10000215 	stw	zero,8(r2)
   463a0:	303fe626 	beq	r6,zero,4633c <__call_exitprocs+0x98>
   463a4:	8d000117 	ldw	r20,4(r17)
   463a8:	9800121e 	bne	r19,zero,463f4 <__call_exitprocs+0x150>
   463ac:	00c00044 	movi	r3,1
   463b0:	1c06983a 	sll	r3,r3,r16
   463b4:	90804017 	ldw	r2,256(r18)
   463b8:	1884703a 	and	r2,r3,r2
   463bc:	10000d26 	beq	r2,zero,463f4 <__call_exitprocs+0x150>
   463c0:	90804117 	ldw	r2,260(r18)
   463c4:	1884703a 	and	r2,r3,r2
   463c8:	10000e1e 	bne	r2,zero,46404 <__call_exitprocs+0x160>
   463cc:	2105883a 	add	r2,r4,r4
   463d0:	1485883a 	add	r2,r2,r18
   463d4:	11400017 	ldw	r5,0(r2)
   463d8:	d9000117 	ldw	r4,4(sp)
   463dc:	303ee83a 	callr	r6
   463e0:	88800117 	ldw	r2,4(r17)
   463e4:	a0bfc61e 	bne	r20,r2,46300 <__call_exitprocs+0x5c>
   463e8:	b8800017 	ldw	r2,0(r23)
   463ec:	147fd326 	beq	r2,r17,4633c <__call_exitprocs+0x98>
   463f0:	003fc306 	br	46300 <__call_exitprocs+0x5c>
   463f4:	303ee83a 	callr	r6
   463f8:	003ff906 	br	463e0 <__call_exitprocs+0x13c>
   463fc:	8c000115 	stw	r16,4(r17)
   46400:	003fe706 	br	463a0 <__call_exitprocs+0xfc>
   46404:	2105883a 	add	r2,r4,r4
   46408:	1485883a 	add	r2,r2,r18
   4640c:	11000017 	ldw	r4,0(r2)
   46410:	303ee83a 	callr	r6
   46414:	003ff206 	br	463e0 <__call_exitprocs+0x13c>
   46418:	88800117 	ldw	r2,4(r17)
   4641c:	10000b1e 	bne	r2,zero,4644c <__call_exitprocs+0x1a8>
   46420:	89000017 	ldw	r4,0(r17)
   46424:	20000a26 	beq	r4,zero,46450 <__call_exitprocs+0x1ac>
   46428:	b9000015 	stw	r4,0(r23)
   4642c:	90000226 	beq	r18,zero,46438 <__call_exitprocs+0x194>
   46430:	9009883a 	mov	r4,r18
   46434:	00445700 	call	44570 <free>
   46438:	8809883a 	mov	r4,r17
   4643c:	00445700 	call	44570 <free>
   46440:	bc400017 	ldw	r17,0(r23)
   46444:	883fb11e 	bne	r17,zero,4630c <__call_exitprocs+0x68>
   46448:	003fc106 	br	46350 <__call_exitprocs+0xac>
   4644c:	89000017 	ldw	r4,0(r17)
   46450:	882f883a 	mov	r23,r17
   46454:	2023883a 	mov	r17,r4
   46458:	883fac1e 	bne	r17,zero,4630c <__call_exitprocs+0x68>
   4645c:	003fbc06 	br	46350 <__call_exitprocs+0xac>
   46460:	0201ffff 	0x201ffff
   46464:	883a0000 	call	883a000 <__alt_data_end+0x87e1960>
   46468:	010d0bff 	0x10d0bff
   4646c:	7f010002 	0x7f010002
   46470:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   46474:	000465dc 	xori	zero,zero,4503
   46478:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   4647c:	010d0bff 	0x10d0bff
   46480:	01000004 	movi	r4,0
   46484:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   46488:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4648c:	010d0bff 	0x10d0bff
   46490:	01000004 	movi	r4,0
   46494:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   46498:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4649c:	010d0bff 	0x10d0bff
   464a0:	01000004 	movi	r4,0
   464a4:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   464a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   464ac:	010d0bff 	0x10d0bff
   464b0:	7f010002 	0x7f010002
   464b4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   464b8:	000465dc 	xori	zero,zero,4503
   464bc:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   464c0:	01090bff 	0x1090bff
   464c4:	7f010002 	0x7f010002
	...
   464d0:	01090bff 	0x1090bff
   464d4:	7f010002 	0x7f010002
	...
   464e0:	00040470 	cmpltui	zero,zero,4113
   464e4:	000462a0 	cmpeqi	zero,zero,4490
