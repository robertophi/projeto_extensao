
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000607c memsz 0x0000607c flags r-x
    LOAD off    0x0000709c vaddr 0x0004609c paddr 0x000465c0 align 2**12
         filesz 0x00000524 memsz 0x00000524 flags rw-
    LOAD off    0x00007ae4 vaddr 0x00046ae4 paddr 0x00046ae4 align 2**12
         filesz 0x00000000 memsz 0x00000914 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00005e54  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  00045e74  00045e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000524  0004609c  000465c0  0000709c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000914  00046ae4  00046ae4  00007ae4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e8  00000000  00000000  000075e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000015ab  00000000  00000000  00007cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00013591  00000000  00000000  0000927b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000056cb  00000000  00000000  0001c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c132  00000000  00000000  00021ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000155c  00000000  00000000  0002e00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029c9  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004635  00000000  00000000  00031f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00036568  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  000365a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00039e6b  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00039e6e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00039e73  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00039e74  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00039e75  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00039e8b  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00039e96  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000031  00000000  00000000  00039ea1  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00039956  00000000  00000000  00039ed2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .text	00000000 .text
00045e74 l    d  .rodata	00000000 .rodata
0004609c l    d  .rwdata	00000000 .rwdata
00046ae4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 app.cpp
000400bc l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
0004005c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00042338 l     F .text	00000030 _Z12read_uleb128PKhPj
00042368 l     F .text	00000054 _Z12read_sleb128PKhPi
000423bc l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00042458 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0004262c l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
000426bc l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
000427bc l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
00042840 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
00046af8 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00046b44 l     O .bss	00000800 emergency_buffer
00046b04 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
000434d4 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00043af4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00046b08 l     O .bss	00000004 fc_static
00043d38 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00043e50 l     F .text	000000cc _Unwind_RaiseException_Phase2
00043f1c l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
000464a4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00045160 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00045320 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00045400 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000465b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0004590c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00045c2c l     F .text	00000004 register_fini
00041b04 g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
00043278 g     F .text	00000040 __cxa_free_exception
00043aa4 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00043028 g     F .text	00000018 _ZSt10unexpectedv
0004546c g     F .text	00000050 alt_main
00041c74 g     F .text	00000020 _ZN4WiFiD2Ev
00043ce8 g     F .text	00000014 _Unwind_GetIPInfo
000465c0 g       *ABS*	00000000 __flash_rwdata_start
000433ec g     F .text	00000074 __cxa_rethrow
00043c88 g     F .text	0000000c _Unwind_SjLj_Unregister
00042f48 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00043cd8 g     F .text	00000010 _Unwind_GetIP
000473f8 g       *ABS*	00000000 __alt_heap_start
00044cac g     F .text	00000074 _kill_r
00043268 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00041f74 g     F .text	000000a8 _ZN4WiFi9readUART2Ev
000439a0 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00044bec g     F .text	000000a0 _signal_r
000465b8 g     O .rwdata	00000004 uart_wifi
00043990 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00046038  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000454dc g     F .text	00000020 __malloc_unlock
000405f8 g     F .text	000001ec _ZN3App8compass8Ei
0004353c g     F .text	00000020 _ZSt18uncaught_exceptionv
00046b2c g     O .bss	00000004 altera_avalon_timer_ts_freq
000431b4 g     F .text	00000010 _ZNSt9exceptionD2Ev
00041b84 g     F .text	00000038 _ZN6MotorsC2Ev
00041bbc g     F .text	00000038 _ZN6MotorsC1Ev
00041b44 g     F .text	00000040 _ZN6Motors21write_to_next_collumnEv
00045f28  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
000417bc g     F .text	00000044 _ZN3FFTC2Ev
00043d18 g     F .text	00000008 _Unwind_GetRegionStart
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041d64 g     F .text	00000020 _ZN4WiFiC1Ev
00043040 g     F .text	00000100 _Znwm
00046b18 g     O .bss	00000004 errno
000440e8 g     F .text	00000080 _Unwind_Backtrace
00046b20 g     O .bss	00000004 alt_argv
0004e584 g       *ABS*	00000000 _gp
0004562c g     F .text	00000030 usleep
000419e0 g     F .text	00000050 _ZN6Motors11write_delayEjjj
000451c0 g     F .text	00000020 getpid
00046ae8 g     O .bss	00000004 _ZN3App3fftE
000428c4 g     F .text	00000180 __cxa_call_unexpected
00043534 g     F .text	00000008 __cxa_get_exception_ptr
0004041c g     F .text	00000180 _ZN3App6find_xEi
00044098 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
00043cac g     F .text	00000014 _Unwind_GetCFA
00042f34 g     F .text	00000014 _ZSt13set_terminatePFvvE
00045e74 g       *ABS*	00000000 __DTOR_END__
00041534 g     F .text	0000005c _ZN3AppC1Ev
000437d8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00041ad0 g     F .text	00000034 _ZN6Motors5writeEj
000441ec g     F .text	00000014 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00043c30 g     F .text	00000008 __udivsi3
000449d0 g     F .text	000000cc _raise_r
00046b0c g     O .bss	00000004 __malloc_top_pad
00044ca8 g     F .text	00000004 _getpid_r
000437f8 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00044b24 g     F .text	000000b4 __sigtramp_r
00044960 g     F .text	00000070 _sbrk_r
000418ac g     F .text	00000040 _ZN3FFT5writeEPh
0004606c  w    O .rodata	00000020 _ZTVSt9type_info
00043184 g     F .text	00000010 _ZNKSt9exception4whatEv
00041720  w    F .text	00000028 _ZN3App6Buffer6lengthEv
00045fa4  w    O .rodata	0000000c _ZTISt9bad_alloc
00046b10 g     O .bss	00000004 __malloc_max_sbrked_mem
0004600c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00043858 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0004232c g     F .text	0000000c _ZdlPv
000465ac g     O .rwdata	00000004 _global_impure_ptr
000473f8 g       *ABS*	00000000 __bss_end
00043c78 g     F .text	00000010 _Unwind_SjLj_Register
00040960 g     F .text	00000048 _ZN3App12writeCompassEi
000441c0 g     F .text	00000018 abort
00041c20 g     F .text	00000054 _ZN6Motors12getSingletonEv
00041d44 g     F .text	00000020 _ZN4WiFiC2Ev
0004355c g     F .text	000000a4 __cxa_end_catch
00043208 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00043000 g     F .text	00000018 _ZSt9terminatev
00045fdc  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00041a80 g     F .text	00000050 _ZN6Motors11write_powerEjjj
0004596c g     F .text	0000001c alt_dcache_flush_all
00046584  w    O .rwdata	00000008 _ZTISt9exception
000465c0 g       *ABS*	00000000 __ram_rwdata_end
00043ad4 g     F .text	00000010 _ZNSt9type_infoD1Ev
00046b00 g     O .bss	00000004 __new_handler
00043ac4 g     F .text	00000010 _ZNSt9type_infoD0Ev
0004609c g       *ABS*	00000000 __ram_rodata_end
000465b4 g     O .rwdata	00000004 jtag_uart_0
00041500 g     F .text	00000034 _ZN3AppD2Ev
000451e0 g     F .text	00000140 kill
00043c38 g     F .text	00000008 __umodsi3
00043abc g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000400ec g     F .text	00000330 _ZN3App6find_yEi
00041d84 g     F .text	00000050 _ZN4WiFi18waitForStatusReadyEj
0004059c g     F .text	0000005c _ZN3App14writeGyroscopeEiii
000473f8 g       *ABS*	00000000 end
00041864 g     F .text	00000020 _ZN3FFTD1Ev
00041dd4 g     F .text	000000dc _ZN4WiFi8readUARTEPcPi
00043e38 g     F .text	00000018 _Unwind_DeleteException
00045e6c g       *ABS*	00000000 __CTOR_LIST__
000586a0 g       *ABS*	00000000 __alt_stack_pointer
00043718 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000456d0 g     F .text	000000a4 altera_avalon_jtag_uart_write
00045f50  w    O .rodata	00000012 _ZTSSt13bad_exception
00041844 g     F .text	00000020 _ZN3FFTD2Ev
00044e4c g     F .text	00000314 _free_r
00045c30 g     F .text	000001bc __call_exitprocs
00041eb0 g     F .text	000000c4 _ZN4WiFi12writeCommandEPc
00041960 g     F .text	00000020 _ZN6MotorsD1Ev
000465a4 g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000003c _start
0004608c  w    O .rodata	0000000d _ZTSSt9type_info
000418ec g     F .text	00000054 _ZN3FFT12getSingletonEv
00045f80  w    O .rodata	00000014 _ZTVSt9bad_alloc
00044c8c g     F .text	0000001c signal
00045690 g     F .text	00000040 alt_sys_init
00045ac0 g     F .text	0000016c __register_exitproc
00045f94  w    O .rodata	0000000d _ZTSSt9bad_alloc
00041800 g     F .text	00000044 _ZN3FFTC1Ev
00043c40 g     F .text	00000038 __mulsi3
0004609c g       *ABS*	00000000 __ram_rwdata_start
00043fa0 g     F .text	000000f8 _Unwind_SjLj_RaiseException
00045e74 g       *ABS*	00000000 __ram_rodata_start
00047344 g     O .bss	00000028 __malloc_current_mallinfo
00043f44 g     F .text	0000005c _Unwind_SjLj_Resume
00043ae4 g     F .text	00000010 _ZNSt9type_infoD2Ev
000438d4 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00045774 g     F .text	0000015c alt_busy_sleep
000473f8 g       *ABS*	00000000 __alt_stack_base
00043224 g     F .text	00000034 _ZNSt9bad_allocD0Ev
00043980 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00044168 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
00046ae4 g     O .bss	00000004 _ZN3App6motorsE
00043a9c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00041cb4 g     F .text	00000090 _ZN4WiFi10stopServerEv
0004609c g     O .rwdata	00000408 __malloc_av_
00045f3c  w    O .rodata	00000014 _ZTVSt9exception
00043784 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
000454bc g     F .text	00000020 __malloc_lock
00045570 g     F .text	000000bc sbrk
00045fb0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00043460 g     F .text	00000074 __cxa_throw
00043cfc g     F .text	00000010 _Unwind_SetIP
00046ae4 g       *ABS*	00000000 __bss_start
00044940 g     F .text	00000020 memset
000421b4 g     F .text	000000d8 main
00046aec g     O .bss	00000004 _ZN3FFT3fftE
00046b24 g     O .bss	00000004 alt_envp
00046b14 g     O .bss	00000004 __malloc_max_total_mem
00042f24 g     F .text	00000008 __cxa_get_globals_fast
000586a0 g       *ABS*	00000000 __alt_heap_limit
0004736c g     O .bss	0000008c _atexit0
00044200 g     F .text	00000740 _malloc_r
000465bc g     O .rwdata	00000004 alt_errno
00044b14 g     F .text	00000010 _init_signal
00046000  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000431f8 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
00043b70 g     F .text	00000060 __divsi3
00044d20 g     F .text	0000012c _malloc_trim_r
000412c4 g     F .text	00000154 _ZN3App10writeAudioEPii
00045e74 g       *ABS*	00000000 __CTOR_END__
00045e74 g       *ABS*	00000000 __flash_rodata_start
00045e74 g       *ABS*	00000000 __DTOR_LIST__
0004565c g     F .text	00000034 alt_irq_init
000415ec  w    F .text	0000004c _ZN9run_param4initEv
00041bf4 g     F .text	0000002c _ZN6Motors4readEv
00041c94 g     F .text	00000020 _ZN4WiFiD1Ev
0004394c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00045a8c g     F .text	00000014 atexit
00043d30 g     F .text	00000008 _Unwind_GetTextRelBase
00043140 g     F .text	00000044 __cxa_call_terminate
00041638  w    F .text	000000e8 _ZN3App6Buffer3popEv
000465a8 g     O .rwdata	00000004 _impure_ptr
00046b1c g     O .bss	00000004 alt_argc
00046af4 g     O .bss	00000004 _ZN4WiFi4wifiE
00046b28 g     O .bss	00000004 altera_avalon_timer_ts_base
000459ec g     F .text	00000064 _do_dtors
000409a8 g     F .text	0000091c _ZN3App3runEv
00041418 g     F .text	00000070 _ZN3App10fftHandlerEj
00043d20 g     F .text	00000008 _Unwind_FindEnclosingFunction
0004228c g     F .text	000000a0 _Znam
00043d0c g     F .text	0000000c _Unwind_GetLanguageSpecificData
00041a30 g     F .text	00000050 _ZN6Motors15write_variationEjjj
00043600 g     F .text	00000118 __cxa_begin_catch
000437e8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00043018 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00040020 g       *ABS*	00000000 __ram_exceptions_start
00041980 g     F .text	00000060 _ZN6Motors5writeEjjjj
000431c4 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00046590 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00046af0 g     O .bss	00000004 _ZN6Motors6motorsE
000432b8 g     F .text	00000134 __cxa_allocate_exception
00046060  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00043218 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
000465c0 g       *ABS*	00000000 _edata
000473f8 g       *ABS*	00000000 _end
0004658c g     O .rwdata	00000001 _ZSt7nothrow
000414cc g     F .text	00000034 _ZN3AppD1Ev
00042a44 g     F .text	000004e0 __gxx_personality_sj0
00040020 g       *ABS*	00000000 __ram_exceptions_end
00043888 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
000431a4 g     F .text	00000010 _ZNSt9exceptionD1Ev
000465a0 g     O .rwdata	00000004 __malloc_trim_threshold
00045a6c g     F .text	00000020 altera_nios2_qsys_irq_init
00045aa0 g     F .text	00000020 exit
00043cc0 g     F .text	00000018 _Unwind_SetGR
00041748  w    F .text	00000074 _ZN3App6BufferC1Ev
00042f5c g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
00042160 g     F .text	00000054 _ZN4WiFi12getSingletonEv
00041884 g     F .text	00000028 _ZN3FFT4readEv
00043bd0 g     F .text	00000060 __modsi3
00043258 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00046b30 g     O .bss	00000014 _ZN3App6bufferE
000586a0 g       *ABS*	00000000 __alt_data_end
000439d4 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00045f64  w    O .rodata	0000000c _ZTISt13bad_exception
00041590 g     F .text	0000005c _ZN3AppC2Ev
000451a0 g     F .text	00000020 _exit
00043c94 g     F .text	00000018 _Unwind_GetGR
00042f2c g     F .text	00000008 __cxa_get_globals
00046594 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00044ab0 g     F .text	00000064 _init_signal_r
00046598  w    O .rwdata	00000008 _ZTISt9type_info
000454fc g     F .text	00000074 alt_putchar
00045f70  w    O .rodata	0000000d _ZTSSt9exception
00043194 g     F .text	00000010 _ZNSt9exceptionD0Ev
00045a50 g     F .text	0000001c alt_icache_flush_all
00043d28 g     F .text	00000008 _Unwind_GetDataRelBase
00041488 g     F .text	00000044 _ZN3App5setupEv
00045988 g     F .text	00000064 _do_ctors
00044bd8 g     F .text	00000014 __sigtramp
0004201c g     F .text	00000144 _ZN4WiFi6configEPcS0_
000458d0 g     F .text	0000003c close
00045380 g     F .text	00000080 alt_load
000407e4 g     F .text	0000017c _ZN3App8compass4Ei
00043aac g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00041940 g     F .text	00000020 _ZN6MotorsD2Ev
00044a9c g     F .text	00000014 raise
000441d8 g     F .text	00000014 free
000437a4 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08400814 	ori	at,at,32
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00040020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40020:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40024:	dee1a814 	ori	sp,sp,34464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   40028:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4002c:	d6b96114 	ori	gp,gp,58756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40030:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40034:	109ab914 	ori	r2,r2,27364

    movhi r3, %hi(__bss_end)
   40038:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4003c:	18dcfe14 	ori	r3,r3,29688

    beq r2, r3, 1f
   40040:	10c00326 	beq	r2,r3,40050 <_start+0x30>

0:
    stw zero, (r2)
   40044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4004c:	10fffd36 	bltu	r2,r3,40044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40050:	00453800 	call	45380 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40054:	004546c0 	call	4546c <alt_main>

00040058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40058:	003fff06 	br	40058 <alt_after_alt_main>

0004005c <_Z41__static_initialization_and_destruction_0ii>:
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   4005c:	defffc04 	addi	sp,sp,-16
   40060:	dfc00315 	stw	ra,12(sp)
   40064:	df000215 	stw	fp,8(sp)
   40068:	df000204 	addi	fp,sp,8
   4006c:	e13ffe15 	stw	r4,-8(fp)
   40070:	e17fff15 	stw	r5,-4(fp)
   40074:	e0bffe17 	ldw	r2,-8(fp)
   40078:	10800058 	cmpnei	r2,r2,1
   4007c:	10000a1e 	bne	r2,zero,400a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
   40080:	e0ffff17 	ldw	r3,-4(fp)
   40084:	00bfffd4 	movui	r2,65535
   40088:	1880071e 	bne	r3,r2,400a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define COLUMNS 8
#define LINES 4
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
   4008c:	0041c200 	call	41c20 <_ZN6Motors12getSingletonEv>
   40090:	d0a15815 	stw	r2,-31392(gp)
FFT	*App::fft = FFT::getSingleton();
   40094:	00418ec0 	call	418ec <_ZN3FFT12getSingletonEv>
   40098:	d0a15915 	stw	r2,-31388(gp)
App::Buffer	App::buffer;
   4009c:	01000134 	movhi	r4,4
   400a0:	211acc04 	addi	r4,r4,27440
   400a4:	00417480 	call	41748 <_ZN3App6BufferC1Ev>
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   400a8:	e037883a 	mov	sp,fp
   400ac:	dfc00117 	ldw	ra,4(sp)
   400b0:	df000017 	ldw	fp,0(sp)
   400b4:	dec00204 	addi	sp,sp,8
   400b8:	f800283a 	ret

000400bc <_GLOBAL__I__ZN3App6motorsE>:
   400bc:	defffe04 	addi	sp,sp,-8
   400c0:	dfc00115 	stw	ra,4(sp)
   400c4:	df000015 	stw	fp,0(sp)
   400c8:	d839883a 	mov	fp,sp
   400cc:	01000044 	movi	r4,1
   400d0:	017fffd4 	movui	r5,65535
   400d4:	004005c0 	call	4005c <_Z41__static_initialization_and_destruction_0ii>
   400d8:	e037883a 	mov	sp,fp
   400dc:	dfc00117 	ldw	ra,4(sp)
   400e0:	df000017 	ldw	fp,0(sp)
   400e4:	dec00204 	addi	sp,sp,8
   400e8:	f800283a 	ret

000400ec <_ZN3App6find_yEi>:
			motors->write( 0 | 3 << 16 | x << 8 | gyroscope_vib_value); //Ligar a coluna inteira
		}
	}
}

void App::find_y(int yAngle){
   400ec:	defff304 	addi	sp,sp,-52
   400f0:	dfc00c15 	stw	ra,48(sp)
   400f4:	df000b15 	stw	fp,44(sp)
   400f8:	df000b04 	addi	fp,sp,44
   400fc:	e13ffa15 	stw	r4,-24(fp)
   40100:	e17ffb15 	stw	r5,-20(fp)
	int maxAngle = 100;
   40104:	00801904 	movi	r2,100
   40108:	e0bff915 	stw	r2,-28(fp)
	int div;
	int y;
	int big, small;
	div = yAngle / (maxAngle/5);
   4010c:	e13ff917 	ldw	r4,-28(fp)
   40110:	01400144 	movi	r5,5
   40114:	0043b700 	call	43b70 <__divsi3>
   40118:	100b883a 	mov	r5,r2
   4011c:	e13ffb17 	ldw	r4,-20(fp)
   40120:	0043b700 	call	43b70 <__divsi3>
   40124:	e0bff815 	stw	r2,-32(fp)
	div = div >= 0 ? div : (-1)*div;
   40128:	e0bff817 	ldw	r2,-32(fp)
   4012c:	e0bffe15 	stw	r2,-8(fp)
   40130:	e0fffe17 	ldw	r3,-8(fp)
   40134:	1804403a 	cmpge	r2,r3,zero
   40138:	1000031e 	bne	r2,zero,40148 <_ZN3App6find_yEi+0x5c>
   4013c:	e0bffe17 	ldw	r2,-8(fp)
   40140:	0085c83a 	sub	r2,zero,r2
   40144:	e0bffe15 	stw	r2,-8(fp)
   40148:	e0fffe17 	ldw	r3,-8(fp)
   4014c:	e0fff815 	stw	r3,-32(fp)
	div = div >= 5 ? 4 : div;
   40150:	e0bff817 	ldw	r2,-32(fp)
   40154:	e0bfff15 	stw	r2,-4(fp)
   40158:	e0ffff17 	ldw	r3,-4(fp)
   4015c:	18800150 	cmplti	r2,r3,5
   40160:	1000021e 	bne	r2,zero,4016c <_ZN3App6find_yEi+0x80>
   40164:	00800104 	movi	r2,4
   40168:	e0bfff15 	stw	r2,-4(fp)
   4016c:	e0ffff17 	ldw	r3,-4(fp)
   40170:	e0fff815 	stw	r3,-32(fp)
	div = 4-div;
   40174:	00c00104 	movi	r3,4
   40178:	e0bff817 	ldw	r2,-32(fp)
   4017c:	1885c83a 	sub	r2,r3,r2
   40180:	e0bff815 	stw	r2,-32(fp)


	big  =  yAngle >= 0 ? 0 : LINES-1; //Determina qual é a linha de maior/menor valor (linhas 0 e 1, ou linhas 3 e 2,
   40184:	e0bffb17 	ldw	r2,-20(fp)
   40188:	1004803a 	cmplt	r2,r2,zero
   4018c:	1000021e 	bne	r2,zero,40198 <_ZN3App6find_yEi+0xac>
   40190:	e03ffd15 	stw	zero,-12(fp)
   40194:	00000206 	br	401a0 <_ZN3App6find_yEi+0xb4>
   40198:	008000c4 	movi	r2,3
   4019c:	e0bffd15 	stw	r2,-12(fp)
   401a0:	e0fffd17 	ldw	r3,-12(fp)
   401a4:	e0fff615 	stw	r3,-40(fp)
	small = yAngle >= 0 ? 1 : LINES-2; //para os casos onde o angulo é positivo ou negativo
   401a8:	e0bffb17 	ldw	r2,-20(fp)
   401ac:	1004803a 	cmplt	r2,r2,zero
   401b0:	1000031e 	bne	r2,zero,401c0 <_ZN3App6find_yEi+0xd4>
   401b4:	00800044 	movi	r2,1
   401b8:	e0bffc15 	stw	r2,-16(fp)
   401bc:	00000206 	br	401c8 <_ZN3App6find_yEi+0xdc>
   401c0:	00c00084 	movi	r3,2
   401c4:	e0fffc15 	stw	r3,-16(fp)
   401c8:	e0bffc17 	ldw	r2,-16(fp)
   401cc:	e0bff515 	stw	r2,-44(fp)
	if(div <= 1){
   401d0:	e0bff817 	ldw	r2,-32(fp)
   401d4:	10800088 	cmpgei	r2,r2,2
   401d8:	1000121e 	bne	r2,zero,40224 <_ZN3App6find_yEi+0x138>
	    motors->write( 0 | big << 16 | 3 << 8 | gyroscope_vib_value);
   401dc:	d1215817 	ldw	r4,-31392(gp)
   401e0:	e0bff617 	ldw	r2,-40(fp)
   401e4:	1006943a 	slli	r3,r2,16
   401e8:	e0bffa17 	ldw	r2,-24(fp)
   401ec:	10800117 	ldw	r2,4(r2)
   401f0:	1884b03a 	or	r2,r3,r2
   401f4:	1080c014 	ori	r2,r2,768
   401f8:	100b883a 	mov	r5,r2
   401fc:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	    motors->write( 0 | big << 16 | 4 << 8 | gyroscope_vib_value);
   40200:	d1215817 	ldw	r4,-31392(gp)
   40204:	e0bff617 	ldw	r2,-40(fp)
   40208:	1006943a 	slli	r3,r2,16
   4020c:	e0bffa17 	ldw	r2,-24(fp)
   40210:	10800117 	ldw	r2,4(r2)
   40214:	1884b03a 	or	r2,r3,r2
   40218:	10810014 	ori	r2,r2,1024
   4021c:	100b883a 	mov	r5,r2
   40220:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	}
	if(div == 0){
   40224:	e0bff817 	ldw	r2,-32(fp)
   40228:	1004c03a 	cmpne	r2,r2,zero
   4022c:	10002c1e 	bne	r2,zero,402e0 <_ZN3App6find_yEi+0x1f4>
		motors->write( 0 | big << 16 | 5 << 8 | gyroscope_vib_value);
   40230:	d1215817 	ldw	r4,-31392(gp)
   40234:	e0bff617 	ldw	r2,-40(fp)
   40238:	1006943a 	slli	r3,r2,16
   4023c:	e0bffa17 	ldw	r2,-24(fp)
   40240:	10800117 	ldw	r2,4(r2)
   40244:	1884b03a 	or	r2,r3,r2
   40248:	10814014 	ori	r2,r2,1280
   4024c:	100b883a 	mov	r5,r2
   40250:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | big << 16 | 2 << 8 | gyroscope_vib_value);
   40254:	d1215817 	ldw	r4,-31392(gp)
   40258:	e0bff617 	ldw	r2,-40(fp)
   4025c:	1006943a 	slli	r3,r2,16
   40260:	e0bffa17 	ldw	r2,-24(fp)
   40264:	10800117 	ldw	r2,4(r2)
   40268:	1884b03a 	or	r2,r3,r2
   4026c:	10808014 	ori	r2,r2,512
   40270:	100b883a 	mov	r5,r2
   40274:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | small << 16 | 3 << 8 | gyroscope_vib_value/2);
   40278:	d1a15817 	ldw	r6,-31392(gp)
   4027c:	e0bff517 	ldw	r2,-44(fp)
   40280:	1008943a 	slli	r4,r2,16
   40284:	e0bffa17 	ldw	r2,-24(fp)
   40288:	10c00117 	ldw	r3,4(r2)
   4028c:	1804d7fa 	srli	r2,r3,31
   40290:	10c5883a 	add	r2,r2,r3
   40294:	1005d07a 	srai	r2,r2,1
   40298:	2084b03a 	or	r2,r4,r2
   4029c:	1080c014 	ori	r2,r2,768
   402a0:	100b883a 	mov	r5,r2
   402a4:	3009883a 	mov	r4,r6
   402a8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | small << 16 | 4 << 8 | gyroscope_vib_value/2);
   402ac:	d1a15817 	ldw	r6,-31392(gp)
   402b0:	e0bff517 	ldw	r2,-44(fp)
   402b4:	1008943a 	slli	r4,r2,16
   402b8:	e0bffa17 	ldw	r2,-24(fp)
   402bc:	10c00117 	ldw	r3,4(r2)
   402c0:	1804d7fa 	srli	r2,r3,31
   402c4:	10c5883a 	add	r2,r2,r3
   402c8:	1005d07a 	srai	r2,r2,1
   402cc:	2084b03a 	or	r2,r4,r2
   402d0:	10810014 	ori	r2,r2,1024
   402d4:	100b883a 	mov	r5,r2
   402d8:	3009883a 	mov	r4,r6
   402dc:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	}
	if(div == 1){
   402e0:	e0bff817 	ldw	r2,-32(fp)
   402e4:	10800058 	cmpnei	r2,r2,1
   402e8:	10001a1e 	bne	r2,zero,40354 <_ZN3App6find_yEi+0x268>
		motors->write( 0 | small << 16 | 3 << 8 | gyroscope_vib_value/2);
   402ec:	d1a15817 	ldw	r6,-31392(gp)
   402f0:	e0bff517 	ldw	r2,-44(fp)
   402f4:	1008943a 	slli	r4,r2,16
   402f8:	e0bffa17 	ldw	r2,-24(fp)
   402fc:	10c00117 	ldw	r3,4(r2)
   40300:	1804d7fa 	srli	r2,r3,31
   40304:	10c5883a 	add	r2,r2,r3
   40308:	1005d07a 	srai	r2,r2,1
   4030c:	2084b03a 	or	r2,r4,r2
   40310:	1080c014 	ori	r2,r2,768
   40314:	100b883a 	mov	r5,r2
   40318:	3009883a 	mov	r4,r6
   4031c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | small << 16 | 4 << 8 | gyroscope_vib_value/2);
   40320:	d1a15817 	ldw	r6,-31392(gp)
   40324:	e0bff517 	ldw	r2,-44(fp)
   40328:	1008943a 	slli	r4,r2,16
   4032c:	e0bffa17 	ldw	r2,-24(fp)
   40330:	10c00117 	ldw	r3,4(r2)
   40334:	1804d7fa 	srli	r2,r3,31
   40338:	10c5883a 	add	r2,r2,r3
   4033c:	1005d07a 	srai	r2,r2,1
   40340:	2084b03a 	or	r2,r4,r2
   40344:	10810014 	ori	r2,r2,1024
   40348:	100b883a 	mov	r5,r2
   4034c:	3009883a 	mov	r4,r6
   40350:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	}
	if(div == 2 || div == 3){
   40354:	e0bff817 	ldw	r2,-32(fp)
   40358:	108000a0 	cmpeqi	r2,r2,2
   4035c:	1000031e 	bne	r2,zero,4036c <_ZN3App6find_yEi+0x280>
   40360:	e0bff817 	ldw	r2,-32(fp)
   40364:	108000d8 	cmpnei	r2,r2,3
   40368:	1000121e 	bne	r2,zero,403b4 <_ZN3App6find_yEi+0x2c8>
		motors->write( 0 | small << 16 | 3 << 8 | gyroscope_vib_value);
   4036c:	d1215817 	ldw	r4,-31392(gp)
   40370:	e0bff517 	ldw	r2,-44(fp)
   40374:	1006943a 	slli	r3,r2,16
   40378:	e0bffa17 	ldw	r2,-24(fp)
   4037c:	10800117 	ldw	r2,4(r2)
   40380:	1884b03a 	or	r2,r3,r2
   40384:	1080c014 	ori	r2,r2,768
   40388:	100b883a 	mov	r5,r2
   4038c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | small << 16 | 4 << 8 | gyroscope_vib_value);
   40390:	d1215817 	ldw	r4,-31392(gp)
   40394:	e0bff517 	ldw	r2,-44(fp)
   40398:	1006943a 	slli	r3,r2,16
   4039c:	e0bffa17 	ldw	r2,-24(fp)
   403a0:	10800117 	ldw	r2,4(r2)
   403a4:	1884b03a 	or	r2,r3,r2
   403a8:	10810014 	ori	r2,r2,1024
   403ac:	100b883a 	mov	r5,r2
   403b0:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	}
	if(div == 2){
   403b4:	e0bff817 	ldw	r2,-32(fp)
   403b8:	10800098 	cmpnei	r2,r2,2
   403bc:	1000121e 	bne	r2,zero,40408 <_ZN3App6find_yEi+0x31c>
		motors->write( 0 | small << 16 | 2 << 8 | gyroscope_vib_value);
   403c0:	d1215817 	ldw	r4,-31392(gp)
   403c4:	e0bff517 	ldw	r2,-44(fp)
   403c8:	1006943a 	slli	r3,r2,16
   403cc:	e0bffa17 	ldw	r2,-24(fp)
   403d0:	10800117 	ldw	r2,4(r2)
   403d4:	1884b03a 	or	r2,r3,r2
   403d8:	10808014 	ori	r2,r2,512
   403dc:	100b883a 	mov	r5,r2
   403e0:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | small << 16 | 5 << 8 | gyroscope_vib_value);
   403e4:	d1215817 	ldw	r4,-31392(gp)
   403e8:	e0bff517 	ldw	r2,-44(fp)
   403ec:	1006943a 	slli	r3,r2,16
   403f0:	e0bffa17 	ldw	r2,-24(fp)
   403f4:	10800117 	ldw	r2,4(r2)
   403f8:	1884b03a 	or	r2,r3,r2
   403fc:	10814014 	ori	r2,r2,1280
   40400:	100b883a 	mov	r5,r2
   40404:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>

	}

}
   40408:	e037883a 	mov	sp,fp
   4040c:	dfc00117 	ldw	ra,4(sp)
   40410:	df000017 	ldw	fp,0(sp)
   40414:	dec00204 	addi	sp,sp,8
   40418:	f800283a 	ret

0004041c <_ZN3App6find_xEi>:
		find_y(yAngle);


    }

void App::find_x(int xAngle){
   4041c:	defff604 	addi	sp,sp,-40
   40420:	dfc00915 	stw	ra,36(sp)
   40424:	df000815 	stw	fp,32(sp)
   40428:	df000804 	addi	fp,sp,32
   4042c:	e13ffb15 	stw	r4,-20(fp)
   40430:	e17ffc15 	stw	r5,-16(fp)
	int maxAngle = 100;
   40434:	00801904 	movi	r2,100
   40438:	e0bffa15 	stw	r2,-24(fp)
	int div;
	int x;
	div = xAngle / (maxAngle/5); //Determina a dimensão do xAngle, em proporção à 20% de maxAngle
   4043c:	e13ffa17 	ldw	r4,-24(fp)
   40440:	01400144 	movi	r5,5
   40444:	0043b700 	call	43b70 <__divsi3>
   40448:	100b883a 	mov	r5,r2
   4044c:	e13ffc17 	ldw	r4,-16(fp)
   40450:	0043b700 	call	43b70 <__divsi3>
   40454:	e0bff915 	stw	r2,-28(fp)
	div = div >= 0 ? div : (-1)*div; //Caso seja negativo
   40458:	e0bff917 	ldw	r2,-28(fp)
   4045c:	e0bffe15 	stw	r2,-8(fp)
   40460:	e0fffe17 	ldw	r3,-8(fp)
   40464:	1804403a 	cmpge	r2,r3,zero
   40468:	1000031e 	bne	r2,zero,40478 <_ZN3App6find_xEi+0x5c>
   4046c:	e0bffe17 	ldw	r2,-8(fp)
   40470:	0085c83a 	sub	r2,zero,r2
   40474:	e0bffe15 	stw	r2,-8(fp)
   40478:	e0fffe17 	ldw	r3,-8(fp)
   4047c:	e0fff915 	stw	r3,-28(fp)
	div = div >= 5 ? 4 : div;  //Caso seja maior que 4
   40480:	e0bff917 	ldw	r2,-28(fp)
   40484:	e0bfff15 	stw	r2,-4(fp)
   40488:	e0ffff17 	ldw	r3,-4(fp)
   4048c:	18800150 	cmplti	r2,r3,5
   40490:	1000021e 	bne	r2,zero,4049c <_ZN3App6find_xEi+0x80>
   40494:	00800104 	movi	r2,4
   40498:	e0bfff15 	stw	r2,-4(fp)
   4049c:	e0ffff17 	ldw	r3,-4(fp)
   404a0:	e0fff915 	stw	r3,-28(fp)
	div = 4-div;  //Neste caso o maior valor deve ficar nas extremidades
   404a4:	00c00104 	movi	r3,4
   404a8:	e0bff917 	ldw	r2,-28(fp)
   404ac:	1885c83a 	sub	r2,r3,r2
   404b0:	e0bff915 	stw	r2,-28(fp)

	x = xAngle >= 0 ? COLUMNS-1 - div  : div; //Lidar com os angulos negativos
   404b4:	e0bffc17 	ldw	r2,-16(fp)
   404b8:	1004803a 	cmplt	r2,r2,zero
   404bc:	1000051e 	bne	r2,zero,404d4 <_ZN3App6find_xEi+0xb8>
   404c0:	00c001c4 	movi	r3,7
   404c4:	e0bff917 	ldw	r2,-28(fp)
   404c8:	1887c83a 	sub	r3,r3,r2
   404cc:	e0fffd15 	stw	r3,-12(fp)
   404d0:	00000206 	br	404dc <_ZN3App6find_xEi+0xc0>
   404d4:	e0bff917 	ldw	r2,-28(fp)
   404d8:	e0bffd15 	stw	r2,-12(fp)
   404dc:	e0fffd17 	ldw	r3,-12(fp)
   404e0:	e0fff815 	stw	r3,-32(fp)
	if(div < 4){
   404e4:	e0bff917 	ldw	r2,-28(fp)
   404e8:	10800108 	cmpgei	r2,r2,4
   404ec:	1000261e 	bne	r2,zero,40588 <_ZN3App6find_xEi+0x16c>
		motors->write( 0 | 1 << 16 | x << 8 | gyroscope_vib_value); //Liga as colunas determinadas
   404f0:	d1215817 	ldw	r4,-31392(gp)
   404f4:	e0bff817 	ldw	r2,-32(fp)
   404f8:	1006923a 	slli	r3,r2,8
   404fc:	e0bffb17 	ldw	r2,-20(fp)
   40500:	10800117 	ldw	r2,4(r2)
   40504:	1884b03a 	or	r2,r3,r2
   40508:	10800074 	orhi	r2,r2,1
   4050c:	100b883a 	mov	r5,r2
   40510:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		motors->write( 0 | 2 << 16 | x << 8 | gyroscope_vib_value); //nas duas linhas do meio
   40514:	d1215817 	ldw	r4,-31392(gp)
   40518:	e0bff817 	ldw	r2,-32(fp)
   4051c:	1006923a 	slli	r3,r2,8
   40520:	e0bffb17 	ldw	r2,-20(fp)
   40524:	10800117 	ldw	r2,4(r2)
   40528:	1884b03a 	or	r2,r3,r2
   4052c:	108000b4 	orhi	r2,r2,2
   40530:	100b883a 	mov	r5,r2
   40534:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		if(div == 0){
   40538:	e0bff917 	ldw	r2,-28(fp)
   4053c:	1004c03a 	cmpne	r2,r2,zero
   40540:	1000111e 	bne	r2,zero,40588 <_ZN3App6find_xEi+0x16c>
			motors->write( 0 | 0 << 16 | x << 8 | gyroscope_vib_value); //Caso o valor seja grande,
   40544:	d1215817 	ldw	r4,-31392(gp)
   40548:	e0bff817 	ldw	r2,-32(fp)
   4054c:	1006923a 	slli	r3,r2,8
   40550:	e0bffb17 	ldw	r2,-20(fp)
   40554:	10800117 	ldw	r2,4(r2)
   40558:	1884b03a 	or	r2,r3,r2
   4055c:	100b883a 	mov	r5,r2
   40560:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write( 0 | 3 << 16 | x << 8 | gyroscope_vib_value); //Ligar a coluna inteira
   40564:	d1215817 	ldw	r4,-31392(gp)
   40568:	e0bff817 	ldw	r2,-32(fp)
   4056c:	1006923a 	slli	r3,r2,8
   40570:	e0bffb17 	ldw	r2,-20(fp)
   40574:	10800117 	ldw	r2,4(r2)
   40578:	1884b03a 	or	r2,r3,r2
   4057c:	108000f4 	orhi	r2,r2,3
   40580:	100b883a 	mov	r5,r2
   40584:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		}
	}
}
   40588:	e037883a 	mov	sp,fp
   4058c:	dfc00117 	ldw	ra,4(sp)
   40590:	df000017 	ldw	fp,0(sp)
   40594:	dec00204 	addi	sp,sp,8
   40598:	f800283a 	ret

0004059c <_ZN3App14writeGyroscopeEiii>:
    }
    motors->write( 0 | (LINES-1)<<16 | motor<<8 | compass_vib_value );
}


void App::writeGyroscope(int xAngle, int yAngle, int zAngle) {
   4059c:	defffa04 	addi	sp,sp,-24
   405a0:	dfc00515 	stw	ra,20(sp)
   405a4:	df000415 	stw	fp,16(sp)
   405a8:	df000404 	addi	fp,sp,16
   405ac:	e13ffc15 	stw	r4,-16(fp)
   405b0:	e17ffd15 	stw	r5,-12(fp)
   405b4:	e1bffe15 	stw	r6,-8(fp)
   405b8:	e1ffff15 	stw	r7,-4(fp)

		motors->write( 0 | 255<<16 | 255<<8 | 0 );
   405bc:	d1215817 	ldw	r4,-31392(gp)
   405c0:	01404034 	movhi	r5,256
   405c4:	297fc004 	addi	r5,r5,-256
   405c8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		find_x(xAngle);
   405cc:	e13ffc17 	ldw	r4,-16(fp)
   405d0:	e17ffd17 	ldw	r5,-12(fp)
   405d4:	004041c0 	call	4041c <_ZN3App6find_xEi>
		find_y(yAngle);
   405d8:	e13ffc17 	ldw	r4,-16(fp)
   405dc:	e17ffe17 	ldw	r5,-8(fp)
   405e0:	00400ec0 	call	400ec <_ZN3App6find_yEi>


    }
   405e4:	e037883a 	mov	sp,fp
   405e8:	dfc00117 	ldw	ra,4(sp)
   405ec:	df000017 	ldw	fp,0(sp)
   405f0:	dec00204 	addi	sp,sp,8
   405f4:	f800283a 	ret

000405f8 <_ZN3App8compass8Ei>:
    }
    //int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 << 16 | motor << 8 | compass_vib_value );
}

void App::compass8(int direction) {
   405f8:	defff704 	addi	sp,sp,-36
   405fc:	dfc00815 	stw	ra,32(sp)
   40600:	df000715 	stw	fp,28(sp)
   40604:	df000704 	addi	fp,sp,28
   40608:	e13ffa15 	stw	r4,-24(fp)
   4060c:	e17ffb15 	stw	r5,-20(fp)
    if(direction < 5 || direction > 355) {
   40610:	e0bffb17 	ldw	r2,-20(fp)
   40614:	10800150 	cmplti	r2,r2,5
   40618:	1000031e 	bne	r2,zero,40628 <_ZN3App8compass8Ei+0x30>
   4061c:	e0bffb17 	ldw	r2,-20(fp)
   40620:	10805910 	cmplti	r2,r2,356
   40624:	10002e1e 	bne	r2,zero,406e0 <_ZN3App8compass8Ei+0xe8>
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2)<<8 | compass_vib_value );
   40628:	d1215817 	ldw	r4,-31392(gp)
   4062c:	e0bffa17 	ldw	r2,-24(fp)
   40630:	10c00017 	ldw	r3,0(r2)
   40634:	008000b4 	movhi	r2,2
   40638:	1080c004 	addi	r2,r2,768
   4063c:	1884b03a 	or	r2,r3,r2
   40640:	100b883a 	mov	r5,r2
   40644:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
        if(direction < 5 && direction != 0)
   40648:	e0bffb17 	ldw	r2,-20(fp)
   4064c:	10800148 	cmpgei	r2,r2,5
   40650:	1000101e 	bne	r2,zero,40694 <_ZN3App8compass8Ei+0x9c>
   40654:	e0bffb17 	ldw	r2,-20(fp)
   40658:	1005003a 	cmpeq	r2,r2,zero
   4065c:	10000d1e 	bne	r2,zero,40694 <_ZN3App8compass8Ei+0x9c>
            motors->write( 0 | (LINES-1)<<16 | 3<<8 | compass_vib_value/2 );
   40660:	d1215817 	ldw	r4,-31392(gp)
   40664:	e0bffa17 	ldw	r2,-24(fp)
   40668:	10c00017 	ldw	r3,0(r2)
   4066c:	1804d7fa 	srli	r2,r3,31
   40670:	10c5883a 	add	r2,r2,r3
   40674:	1005d07a 	srai	r2,r2,1
   40678:	1007883a 	mov	r3,r2
   4067c:	008000f4 	movhi	r2,3
   40680:	1080c004 	addi	r2,r2,768
   40684:	1884b03a 	or	r2,r3,r2
   40688:	100b883a 	mov	r5,r2
   4068c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
}

void App::compass8(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2)<<8 | compass_vib_value );
        if(direction < 5 && direction != 0)
   40690:	00004f06 	br	407d0 <_ZN3App8compass8Ei+0x1d8>
            motors->write( 0 | (LINES-1)<<16 | 3<<8 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
   40694:	e0bffb17 	ldw	r2,-20(fp)
   40698:	10805910 	cmplti	r2,r2,356
   4069c:	10004c1e 	bne	r2,zero,407d0 <_ZN3App8compass8Ei+0x1d8>
   406a0:	e0bffb17 	ldw	r2,-20(fp)
   406a4:	10805a20 	cmpeqi	r2,r2,360
   406a8:	1000491e 	bne	r2,zero,407d0 <_ZN3App8compass8Ei+0x1d8>
            motors->write( 0 | (LINES-1)<<16 | (COLUMNS-4)<<8 | compass_vib_value/2 );
   406ac:	d1215817 	ldw	r4,-31392(gp)
   406b0:	e0bffa17 	ldw	r2,-24(fp)
   406b4:	10c00017 	ldw	r3,0(r2)
   406b8:	1804d7fa 	srli	r2,r3,31
   406bc:	10c5883a 	add	r2,r2,r3
   406c0:	1005d07a 	srai	r2,r2,1
   406c4:	1007883a 	mov	r3,r2
   406c8:	008000f4 	movhi	r2,3
   406cc:	10810004 	addi	r2,r2,1024
   406d0:	1884b03a 	or	r2,r3,r2
   406d4:	100b883a 	mov	r5,r2
   406d8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
        return;
   406dc:	00003c06 	br	407d0 <_ZN3App8compass8Ei+0x1d8>
    }
    int motor;
    if(direction <= 180) {
   406e0:	e0bffb17 	ldw	r2,-20(fp)
   406e4:	10802d48 	cmpgei	r2,r2,181
   406e8:	1000181e 	bne	r2,zero,4074c <_ZN3App8compass8Ei+0x154>
        if(direction <= 90) {
   406ec:	e0bffb17 	ldw	r2,-20(fp)
   406f0:	108016c8 	cmpgei	r2,r2,91
   406f4:	10000b1e 	bne	r2,zero,40724 <_ZN3App8compass8Ei+0x12c>
            motor = direction <= 45 ? 3 : 2;
   406f8:	e0bffb17 	ldw	r2,-20(fp)
   406fc:	10800b88 	cmpgei	r2,r2,46
   40700:	1000031e 	bne	r2,zero,40710 <_ZN3App8compass8Ei+0x118>
   40704:	008000c4 	movi	r2,3
   40708:	e0bfff15 	stw	r2,-4(fp)
   4070c:	00000206 	br	40718 <_ZN3App8compass8Ei+0x120>
   40710:	00800084 	movi	r2,2
   40714:	e0bfff15 	stw	r2,-4(fp)
   40718:	e0bfff17 	ldw	r2,-4(fp)
   4071c:	e0bff915 	stw	r2,-28(fp)
   40720:	00002206 	br	407ac <_ZN3App8compass8Ei+0x1b4>
        } else {
            motor = direction <= 135 ? 1 : 0;
   40724:	e0bffb17 	ldw	r2,-20(fp)
   40728:	10802208 	cmpgei	r2,r2,136
   4072c:	1000031e 	bne	r2,zero,4073c <_ZN3App8compass8Ei+0x144>
   40730:	00800044 	movi	r2,1
   40734:	e0bffe15 	stw	r2,-8(fp)
   40738:	00000106 	br	40740 <_ZN3App8compass8Ei+0x148>
   4073c:	e03ffe15 	stw	zero,-8(fp)
   40740:	e0bffe17 	ldw	r2,-8(fp)
   40744:	e0bff915 	stw	r2,-28(fp)
   40748:	00001806 	br	407ac <_ZN3App8compass8Ei+0x1b4>
        }
    } else {
        if(direction < 270) {
   4074c:	e0bffb17 	ldw	r2,-20(fp)
   40750:	10804388 	cmpgei	r2,r2,270
   40754:	10000b1e 	bne	r2,zero,40784 <_ZN3App8compass8Ei+0x18c>
            motor = direction < 225 ? COLUMNS-1 : COLUMNS-2;
   40758:	e0bffb17 	ldw	r2,-20(fp)
   4075c:	10803848 	cmpgei	r2,r2,225
   40760:	1000031e 	bne	r2,zero,40770 <_ZN3App8compass8Ei+0x178>
   40764:	008001c4 	movi	r2,7
   40768:	e0bffd15 	stw	r2,-12(fp)
   4076c:	00000206 	br	40778 <_ZN3App8compass8Ei+0x180>
   40770:	00800184 	movi	r2,6
   40774:	e0bffd15 	stw	r2,-12(fp)
   40778:	e0bffd17 	ldw	r2,-12(fp)
   4077c:	e0bff915 	stw	r2,-28(fp)
   40780:	00000a06 	br	407ac <_ZN3App8compass8Ei+0x1b4>
        } else {
            motor = direction < 315 ? COLUMNS-3 : COLUMNS-4;
   40784:	e0bffb17 	ldw	r2,-20(fp)
   40788:	10804ec8 	cmpgei	r2,r2,315
   4078c:	1000031e 	bne	r2,zero,4079c <_ZN3App8compass8Ei+0x1a4>
   40790:	00800144 	movi	r2,5
   40794:	e0bffc15 	stw	r2,-16(fp)
   40798:	00000206 	br	407a4 <_ZN3App8compass8Ei+0x1ac>
   4079c:	00800104 	movi	r2,4
   407a0:	e0bffc15 	stw	r2,-16(fp)
   407a4:	e0bffc17 	ldw	r2,-16(fp)
   407a8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    motors->write( 0 | (LINES-1)<<16 | motor<<8 | compass_vib_value );
   407ac:	d1215817 	ldw	r4,-31392(gp)
   407b0:	e0bff917 	ldw	r2,-28(fp)
   407b4:	1006923a 	slli	r3,r2,8
   407b8:	e0bffa17 	ldw	r2,-24(fp)
   407bc:	10800017 	ldw	r2,0(r2)
   407c0:	1884b03a 	or	r2,r3,r2
   407c4:	108000f4 	orhi	r2,r2,3
   407c8:	100b883a 	mov	r5,r2
   407cc:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
}
   407d0:	e037883a 	mov	sp,fp
   407d4:	dfc00117 	ldw	ra,4(sp)
   407d8:	df000017 	ldw	fp,0(sp)
   407dc:	dec00204 	addi	sp,sp,8
   407e0:	f800283a 	ret

000407e4 <_ZN3App8compass4Ei>:
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}

void App::compass4(int direction) {
   407e4:	defff904 	addi	sp,sp,-28
   407e8:	dfc00615 	stw	ra,24(sp)
   407ec:	df000515 	stw	fp,20(sp)
   407f0:	df000504 	addi	fp,sp,20
   407f4:	e13ffc15 	stw	r4,-16(fp)
   407f8:	e17ffd15 	stw	r5,-12(fp)
    if(direction < 5 || direction > 355) {
   407fc:	e0bffd17 	ldw	r2,-12(fp)
   40800:	10800150 	cmplti	r2,r2,5
   40804:	1000031e 	bne	r2,zero,40814 <_ZN3App8compass4Ei+0x30>
   40808:	e0bffd17 	ldw	r2,-12(fp)
   4080c:	10805910 	cmplti	r2,r2,356
   40810:	10002e1e 	bne	r2,zero,408cc <_ZN3App8compass4Ei+0xe8>
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2) <<8 | compass_vib_value );
   40814:	d1215817 	ldw	r4,-31392(gp)
   40818:	e0bffc17 	ldw	r2,-16(fp)
   4081c:	10c00017 	ldw	r3,0(r2)
   40820:	008000b4 	movhi	r2,2
   40824:	1080c004 	addi	r2,r2,768
   40828:	1884b03a 	or	r2,r3,r2
   4082c:	100b883a 	mov	r5,r2
   40830:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
        if(direction < 5 && direction != 0)
   40834:	e0bffd17 	ldw	r2,-12(fp)
   40838:	10800148 	cmpgei	r2,r2,5
   4083c:	1000101e 	bne	r2,zero,40880 <_ZN3App8compass4Ei+0x9c>
   40840:	e0bffd17 	ldw	r2,-12(fp)
   40844:	1005003a 	cmpeq	r2,r2,zero
   40848:	10000d1e 	bne	r2,zero,40880 <_ZN3App8compass4Ei+0x9c>
            motors->write( 0 | (LINES-1) <<16| 1<<8 | compass_vib_value/2 );
   4084c:	d1215817 	ldw	r4,-31392(gp)
   40850:	e0bffc17 	ldw	r2,-16(fp)
   40854:	10c00017 	ldw	r3,0(r2)
   40858:	1804d7fa 	srli	r2,r3,31
   4085c:	10c5883a 	add	r2,r2,r3
   40860:	1005d07a 	srai	r2,r2,1
   40864:	1007883a 	mov	r3,r2
   40868:	008000f4 	movhi	r2,3
   4086c:	10804004 	addi	r2,r2,256
   40870:	1884b03a 	or	r2,r3,r2
   40874:	100b883a 	mov	r5,r2
   40878:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
}

void App::compass4(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2) <<8 | compass_vib_value );
        if(direction < 5 && direction != 0)
   4087c:	00003306 	br	4094c <_ZN3App8compass4Ei+0x168>
            motors->write( 0 | (LINES-1) <<16| 1<<8 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
   40880:	e0bffd17 	ldw	r2,-12(fp)
   40884:	10805910 	cmplti	r2,r2,356
   40888:	1000301e 	bne	r2,zero,4094c <_ZN3App8compass4Ei+0x168>
   4088c:	e0bffd17 	ldw	r2,-12(fp)
   40890:	10805a20 	cmpeqi	r2,r2,360
   40894:	10002d1e 	bne	r2,zero,4094c <_ZN3App8compass4Ei+0x168>
            motors->write( 0 | (LINES-1) <<16 | (COLUMNS-2) << 8 | compass_vib_value/2 );
   40898:	d1215817 	ldw	r4,-31392(gp)
   4089c:	e0bffc17 	ldw	r2,-16(fp)
   408a0:	10c00017 	ldw	r3,0(r2)
   408a4:	1804d7fa 	srli	r2,r3,31
   408a8:	10c5883a 	add	r2,r2,r3
   408ac:	1005d07a 	srai	r2,r2,1
   408b0:	1007883a 	mov	r3,r2
   408b4:	008000f4 	movhi	r2,3
   408b8:	10818004 	addi	r2,r2,1536
   408bc:	1884b03a 	or	r2,r3,r2
   408c0:	100b883a 	mov	r5,r2
   408c4:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
        return;
   408c8:	00002006 	br	4094c <_ZN3App8compass4Ei+0x168>
    }
    int motor;
    if(direction < 180){
   408cc:	e0bffd17 	ldw	r2,-12(fp)
   408d0:	10802d08 	cmpgei	r2,r2,180
   408d4:	10000a1e 	bne	r2,zero,40900 <_ZN3App8compass4Ei+0x11c>
    	motor = direction < 90 ? 1:0;
   408d8:	e0bffd17 	ldw	r2,-12(fp)
   408dc:	10801688 	cmpgei	r2,r2,90
   408e0:	1000031e 	bne	r2,zero,408f0 <_ZN3App8compass4Ei+0x10c>
   408e4:	00800044 	movi	r2,1
   408e8:	e0bfff15 	stw	r2,-4(fp)
   408ec:	00000106 	br	408f4 <_ZN3App8compass4Ei+0x110>
   408f0:	e03fff15 	stw	zero,-4(fp)
   408f4:	e0bfff17 	ldw	r2,-4(fp)
   408f8:	e0bffb15 	stw	r2,-20(fp)
   408fc:	00000a06 	br	40928 <_ZN3App8compass4Ei+0x144>
    	}
    else{
    	motor = direction < 270 ? COLUMNS-1 : COLUMNS-2;
   40900:	e0bffd17 	ldw	r2,-12(fp)
   40904:	10804388 	cmpgei	r2,r2,270
   40908:	1000031e 	bne	r2,zero,40918 <_ZN3App8compass4Ei+0x134>
   4090c:	008001c4 	movi	r2,7
   40910:	e0bffe15 	stw	r2,-8(fp)
   40914:	00000206 	br	40920 <_ZN3App8compass4Ei+0x13c>
   40918:	00800184 	movi	r2,6
   4091c:	e0bffe15 	stw	r2,-8(fp)
   40920:	e0bffe17 	ldw	r2,-8(fp)
   40924:	e0bffb15 	stw	r2,-20(fp)
    }
    //int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 << 16 | motor << 8 | compass_vib_value );
   40928:	d1215817 	ldw	r4,-31392(gp)
   4092c:	e0bffb17 	ldw	r2,-20(fp)
   40930:	1006923a 	slli	r3,r2,8
   40934:	e0bffc17 	ldw	r2,-16(fp)
   40938:	10800017 	ldw	r2,0(r2)
   4093c:	1884b03a 	or	r2,r3,r2
   40940:	108000f4 	orhi	r2,r2,3
   40944:	100b883a 	mov	r5,r2
   40948:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
}
   4094c:	e037883a 	mov	sp,fp
   40950:	dfc00117 	ldw	ra,4(sp)
   40954:	df000017 	ldw	fp,0(sp)
   40958:	dec00204 	addi	sp,sp,8
   4095c:	f800283a 	ret

00040960 <_ZN3App12writeCompassEi>:
	if(buffer.length() > 0)
		fft->write(buffer.pop());
}


void App::writeCompass(int direction) {
   40960:	defffc04 	addi	sp,sp,-16
   40964:	dfc00315 	stw	ra,12(sp)
   40968:	df000215 	stw	fp,8(sp)
   4096c:	df000204 	addi	fp,sp,8
   40970:	e13ffe15 	stw	r4,-8(fp)
   40974:	e17fff15 	stw	r5,-4(fp)
	motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40978:	d1215817 	ldw	r4,-31392(gp)
   4097c:	01404034 	movhi	r5,256
   40980:	297fc004 	addi	r5,r5,-256
   40984:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	if(COLUMNS >= 8) {
        return compass8(direction);
   40988:	e13ffe17 	ldw	r4,-8(fp)
   4098c:	e17fff17 	ldw	r5,-4(fp)
   40990:	00405f80 	call	405f8 <_ZN3App8compass8Ei>
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}
   40994:	e037883a 	mov	sp,fp
   40998:	dfc00117 	ldw	ra,4(sp)
   4099c:	df000017 	ldw	fp,0(sp)
   409a0:	dec00204 	addi	sp,sp,8
   409a4:	f800283a 	ret

000409a8 <_ZN3App3runEv>:
			summation = 0;
		}
	}
}

void App::run() {
   409a8:	deffa704 	addi	sp,sp,-356
   409ac:	dfc05815 	stw	ra,352(sp)
   409b0:	df005715 	stw	fp,348(sp)
   409b4:	df005704 	addi	fp,sp,348
   409b8:	e13ffe15 	stw	r4,-8(fp)
	char data[256];
	int size=0,i=0;
   409bc:	e03fbd15 	stw	zero,-268(fp)
   409c0:	e03fbc15 	stw	zero,-272(fp)
	char *dataPtr;
	int *sizePtr;
		dataPtr = &data[0];
   409c4:	e0bfbe04 	addi	r2,fp,-264
   409c8:	e0bfbb15 	stw	r2,-276(fp)
		sizePtr = &size;
   409cc:	e0bfbd04 	addi	r2,fp,-268
   409d0:	e0bfba15 	stw	r2,-280(fp)
	char type;
	char readTerminalEclipse;
	int n;
	int lastColuna=0, lastLinha=0, lastPotencia=0;
   409d4:	e03fb715 	stw	zero,-292(fp)
   409d8:	e03fb615 	stw	zero,-296(fp)
   409dc:	e03fb515 	stw	zero,-300(fp)

	motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   409e0:	d1215817 	ldw	r4,-31392(gp)
   409e4:	01408034 	movhi	r5,512
   409e8:	297fc004 	addi	r5,r5,-256
   409ec:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   409f0:	d1215817 	ldw	r4,-31392(gp)
   409f4:	0140c034 	movhi	r5,768
   409f8:	297fc004 	addi	r5,r5,-256
   409fc:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40a00:	d1215817 	ldw	r4,-31392(gp)
   40a04:	01404034 	movhi	r5,256
   40a08:	297fc004 	addi	r5,r5,-256
   40a0c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
   40a10:	00000006 	br	40a14 <_ZN3App3runEv+0x6c>




	while (1) {
		type = 0;
   40a14:	e03fb945 	stb	zero,-283(fp)
		wifi->readUART(dataPtr,sizePtr);
   40a18:	e0bffe17 	ldw	r2,-8(fp)
   40a1c:	11000517 	ldw	r4,20(r2)
   40a20:	e17fbb17 	ldw	r5,-276(fp)
   40a24:	e1bfba17 	ldw	r6,-280(fp)
   40a28:	0041dd40 	call	41dd4 <_ZN4WiFi8readUARTEPcPi>
		if(size != 0 ){
   40a2c:	e0bfbd17 	ldw	r2,-268(fp)
   40a30:	1005003a 	cmpeq	r2,r2,zero
   40a34:	1000151e 	bne	r2,zero,40a8c <_ZN3App3runEv+0xe4>
			for(i=0;i<*sizePtr;i++){
   40a38:	e03fbc15 	stw	zero,-272(fp)
   40a3c:	00000b06 	br	40a6c <_ZN3App3runEv+0xc4>
				alt_putchar(data[i]);
   40a40:	e0ffbc17 	ldw	r3,-272(fp)
   40a44:	e0bfbe04 	addi	r2,fp,-264
   40a48:	10c5883a 	add	r2,r2,r3
   40a4c:	10800003 	ldbu	r2,0(r2)
   40a50:	11003fcc 	andi	r4,r2,255
   40a54:	2100201c 	xori	r4,r4,128
   40a58:	213fe004 	addi	r4,r4,-128
   40a5c:	00454fc0 	call	454fc <alt_putchar>

	while (1) {
		type = 0;
		wifi->readUART(dataPtr,sizePtr);
		if(size != 0 ){
			for(i=0;i<*sizePtr;i++){
   40a60:	e0bfbc17 	ldw	r2,-272(fp)
   40a64:	10800044 	addi	r2,r2,1
   40a68:	e0bfbc15 	stw	r2,-272(fp)
   40a6c:	e0bfba17 	ldw	r2,-280(fp)
   40a70:	10c00017 	ldw	r3,0(r2)
   40a74:	e0bfbc17 	ldw	r2,-272(fp)
   40a78:	10fff116 	blt	r2,r3,40a40 <_ZN3App3runEv+0x98>
				alt_putchar(data[i]);
			}
			alt_putchar('\n');
   40a7c:	01000284 	movi	r4,10
   40a80:	00454fc0 	call	454fc <alt_putchar>
			type = data[0];
   40a84:	e0bfbe03 	ldbu	r2,-264(fp)
   40a88:	e0bfb945 	stb	r2,-283(fp)

		}

		switch (type) {
   40a8c:	e0bfb943 	ldbu	r2,-283(fp)
   40a90:	10bff404 	addi	r2,r2,-48
   40a94:	e0bfff15 	stw	r2,-4(fp)
   40a98:	e0ffff17 	ldw	r3,-4(fp)
   40a9c:	18803fcc 	andi	r2,r3,255
   40aa0:	108012a8 	cmpgeui	r2,r2,74
   40aa4:	103fdb1e 	bne	r2,zero,40a14 <_ZN3App3runEv+0x6c>
   40aa8:	e0ffff17 	ldw	r3,-4(fp)
   40aac:	18803fcc 	andi	r2,r3,255
   40ab0:	1085883a 	add	r2,r2,r2
   40ab4:	1087883a 	add	r3,r2,r2
   40ab8:	00800134 	movhi	r2,4
   40abc:	1082b304 	addi	r2,r2,2764
   40ac0:	1885883a 	add	r2,r3,r2
   40ac4:	10800017 	ldw	r2,0(r2)
   40ac8:	1000683a 	jmp	r2
   40acc:	00040bf4 	movhi	zero,4143
   40ad0:	000411ec 	andhi	zero,zero,4167
   40ad4:	00041204 	movi	zero,4168
   40ad8:	0004121c 	xori	zero,zero,4168
   40adc:	00041234 	movhi	zero,4168
   40ae0:	0004124c 	andi	zero,zero,4169
   40ae4:	00041264 	muli	zero,zero,4169
   40ae8:	0004127c 	xorhi	zero,zero,4169
   40aec:	00041294 	movui	zero,4170
   40af0:	000412ac 	andhi	zero,zero,4170
   40af4:	00040a14 	movui	zero,4136
   40af8:	00040a14 	movui	zero,4136
   40afc:	00040a14 	movui	zero,4136
   40b00:	00040a14 	movui	zero,4136
   40b04:	00040a14 	movui	zero,4136
   40b08:	00040a14 	movui	zero,4136
   40b0c:	00040a14 	movui	zero,4136
   40b10:	00040a14 	movui	zero,4136
   40b14:	00040a14 	movui	zero,4136
   40b18:	00040a14 	movui	zero,4136
   40b1c:	00040a14 	movui	zero,4136
   40b20:	00040a14 	movui	zero,4136
   40b24:	00040a14 	movui	zero,4136
   40b28:	00040a14 	movui	zero,4136
   40b2c:	00040a14 	movui	zero,4136
   40b30:	00040a14 	movui	zero,4136
   40b34:	00040a14 	movui	zero,4136
   40b38:	00040a14 	movui	zero,4136
   40b3c:	00040a14 	movui	zero,4136
   40b40:	00040a14 	movui	zero,4136
   40b44:	00040a14 	movui	zero,4136
   40b48:	00040a14 	movui	zero,4136
   40b4c:	00040a14 	movui	zero,4136
   40b50:	00040a14 	movui	zero,4136
   40b54:	00040a14 	movui	zero,4136
   40b58:	00040a14 	movui	zero,4136
   40b5c:	00040a14 	movui	zero,4136
   40b60:	00040a14 	movui	zero,4136
   40b64:	00040a14 	movui	zero,4136
   40b68:	00040a14 	movui	zero,4136
   40b6c:	00040a14 	movui	zero,4136
   40b70:	00040a14 	movui	zero,4136
   40b74:	00040a14 	movui	zero,4136
   40b78:	00040a14 	movui	zero,4136
   40b7c:	00040a14 	movui	zero,4136
   40b80:	00040a14 	movui	zero,4136
   40b84:	00040a14 	movui	zero,4136
   40b88:	00040a14 	movui	zero,4136
   40b8c:	00040a14 	movui	zero,4136
   40b90:	0004113c 	xorhi	zero,zero,4164
   40b94:	00040a14 	movui	zero,4136
   40b98:	00041158 	cmpnei	zero,zero,4165
   40b9c:	00040a14 	movui	zero,4136
   40ba0:	00040f78 	rdprs	zero,zero,4157
   40ba4:	00040a14 	movui	zero,4136
   40ba8:	000411d4 	movui	zero,4167
   40bac:	00040a14 	movui	zero,4136
   40bb0:	000411a4 	muli	zero,zero,4166
   40bb4:	000410e8 	cmpgeui	zero,zero,4163
   40bb8:	00040c5c 	xori	zero,zero,4145
   40bbc:	00040a14 	movui	zero,4136
   40bc0:	00041050 	cmplti	zero,zero,4161
   40bc4:	00040fc0 	call	40fc <__alt_mem_onchip_memory2_0-0x3bf04>
   40bc8:	000411b4 	movhi	zero,4166
   40bcc:	000411c4 	movi	zero,4167
   40bd0:	00040f34 	movhi	zero,4156
   40bd4:	00040f9c 	xori	zero,zero,4158
   40bd8:	00040c28 	cmpgeui	zero,zero,4144
   40bdc:	00041174 	movhi	zero,4165
   40be0:	00041194 	movui	zero,4166
   40be4:	00040a14 	movui	zero,4136
   40be8:	00040f54 	movui	zero,4157
   40bec:	00040a14 	movui	zero,4136
   40bf0:	00041184 	movi	zero,4166
		 	 	 exemplo: zm13z liga o motor [1,3]
		 	 	 	 	  zkz liga o padrão de teste
		 */

		case '0':{
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   40bf4:	d1215817 	ldw	r4,-31392(gp)
   40bf8:	01408034 	movhi	r5,512
   40bfc:	297fc004 	addi	r5,r5,-256
   40c00:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   40c04:	d1215817 	ldw	r4,-31392(gp)
   40c08:	0140c034 	movhi	r5,768
   40c0c:	297fc004 	addi	r5,r5,-256
   40c10:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40c14:	d1215817 	ldw	r4,-31392(gp)
   40c18:	01404034 	movhi	r5,256
   40c1c:	297fc004 	addi	r5,r5,-256
   40c20:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		}
		break;
   40c24:	003f7b06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 's':{
			motors->write((1<<24)|(255<<16)|(0<<8)|(1));
   40c28:	d1215817 	ldw	r4,-31392(gp)
   40c2c:	01407ff4 	movhi	r5,511
   40c30:	29400044 	addi	r5,r5,1
   40c34:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(0<<8)|(1));
   40c38:	d1215817 	ldw	r4,-31392(gp)
   40c3c:	0140bff4 	movhi	r5,767
   40c40:	29400044 	addi	r5,r5,1
   40c44:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(0<<8)|(255));
   40c48:	d1215817 	ldw	r4,-31392(gp)
   40c4c:	01403ff4 	movhi	r5,255
   40c50:	29403fc4 	addi	r5,r5,255
   40c54:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		}
		break;
   40c58:	003f6e06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'k':{
			int i,j,k;
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   40c5c:	d1215817 	ldw	r4,-31392(gp)
   40c60:	01408034 	movhi	r5,512
   40c64:	297fc004 	addi	r5,r5,-256
   40c68:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   40c6c:	d1215817 	ldw	r4,-31392(gp)
   40c70:	0140c034 	movhi	r5,768
   40c74:	297fc004 	addi	r5,r5,-256
   40c78:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>

			for(i=0;i<8;i++){
   40c7c:	e03fb415 	stw	zero,-304(fp)
   40c80:	00004706 	br	40da0 <_ZN3App3runEv+0x3f8>
				k=i;
   40c84:	e0bfb417 	ldw	r2,-304(fp)
   40c88:	e0bfb215 	stw	r2,-312(fp)
				j=i;
   40c8c:	e0bfb417 	ldw	r2,-304(fp)
   40c90:	e0bfb315 	stw	r2,-308(fp)
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40c94:	d1215817 	ldw	r4,-31392(gp)
   40c98:	01404034 	movhi	r5,256
   40c9c:	297fc004 	addi	r5,r5,-256
   40ca0:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(i<<16)|(i<<8)|(255));
   40ca4:	d1215817 	ldw	r4,-31392(gp)
   40ca8:	e0bfb417 	ldw	r2,-304(fp)
   40cac:	1006943a 	slli	r3,r2,16
   40cb0:	e0bfb417 	ldw	r2,-304(fp)
   40cb4:	1004923a 	slli	r2,r2,8
   40cb8:	1884b03a 	or	r2,r3,r2
   40cbc:	10803fd4 	ori	r2,r2,255
   40cc0:	100b883a 	mov	r5,r2
   40cc4:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				while(k>=0 && j < 8){
   40cc8:	00000f06 	br	40d08 <_ZN3App3runEv+0x360>
					k=k-1;
   40ccc:	e0bfb217 	ldw	r2,-312(fp)
   40cd0:	10bfffc4 	addi	r2,r2,-1
   40cd4:	e0bfb215 	stw	r2,-312(fp)
					j=j+1;
   40cd8:	e0bfb317 	ldw	r2,-308(fp)
   40cdc:	10800044 	addi	r2,r2,1
   40ce0:	e0bfb315 	stw	r2,-308(fp)
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
   40ce4:	d1215817 	ldw	r4,-31392(gp)
   40ce8:	e0bfb317 	ldw	r2,-308(fp)
   40cec:	1006943a 	slli	r3,r2,16
   40cf0:	e0bfb217 	ldw	r2,-312(fp)
   40cf4:	1004923a 	slli	r2,r2,8
   40cf8:	1884b03a 	or	r2,r3,r2
   40cfc:	10803fd4 	ori	r2,r2,255
   40d00:	100b883a 	mov	r5,r2
   40d04:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			for(i=0;i<8;i++){
				k=i;
				j=i;
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(i<<8)|(255));
				while(k>=0 && j < 8){
   40d08:	e0bfb217 	ldw	r2,-312(fp)
   40d0c:	1004803a 	cmplt	r2,r2,zero
   40d10:	1000031e 	bne	r2,zero,40d20 <_ZN3App3runEv+0x378>
   40d14:	e0bfb317 	ldw	r2,-308(fp)
   40d18:	10800210 	cmplti	r2,r2,8
   40d1c:	103feb1e 	bne	r2,zero,40ccc <_ZN3App3runEv+0x324>
					k=k-1;
					j=j+1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				k=i;
   40d20:	e0bfb417 	ldw	r2,-304(fp)
   40d24:	e0bfb215 	stw	r2,-312(fp)
				j=i;
   40d28:	e0bfb417 	ldw	r2,-304(fp)
   40d2c:	e0bfb315 	stw	r2,-308(fp)
				while(k<8 && j >=0){
   40d30:	00000f06 	br	40d70 <_ZN3App3runEv+0x3c8>
					k=k+1;
   40d34:	e0bfb217 	ldw	r2,-312(fp)
   40d38:	10800044 	addi	r2,r2,1
   40d3c:	e0bfb215 	stw	r2,-312(fp)
					j=j-1;
   40d40:	e0bfb317 	ldw	r2,-308(fp)
   40d44:	10bfffc4 	addi	r2,r2,-1
   40d48:	e0bfb315 	stw	r2,-308(fp)
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
   40d4c:	d1215817 	ldw	r4,-31392(gp)
   40d50:	e0bfb317 	ldw	r2,-308(fp)
   40d54:	1006943a 	slli	r3,r2,16
   40d58:	e0bfb217 	ldw	r2,-312(fp)
   40d5c:	1004923a 	slli	r2,r2,8
   40d60:	1884b03a 	or	r2,r3,r2
   40d64:	10803fd4 	ori	r2,r2,255
   40d68:	100b883a 	mov	r5,r2
   40d6c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
					j=j+1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				k=i;
				j=i;
				while(k<8 && j >=0){
   40d70:	e0bfb217 	ldw	r2,-312(fp)
   40d74:	10800208 	cmpgei	r2,r2,8
   40d78:	1000031e 	bne	r2,zero,40d88 <_ZN3App3runEv+0x3e0>
   40d7c:	e0bfb317 	ldw	r2,-308(fp)
   40d80:	1004403a 	cmpge	r2,r2,zero
   40d84:	103feb1e 	bne	r2,zero,40d34 <_ZN3App3runEv+0x38c>
					k=k+1;
					j=j-1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
   40d88:	010000f4 	movhi	r4,3
   40d8c:	21035004 	addi	r4,r4,3392
   40d90:	004562c0 	call	4562c <usleep>
		case 'k':{
			int i,j,k;
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));

			for(i=0;i<8;i++){
   40d94:	e0bfb417 	ldw	r2,-304(fp)
   40d98:	10800044 	addi	r2,r2,1
   40d9c:	e0bfb415 	stw	r2,-304(fp)
   40da0:	e0bfb417 	ldw	r2,-304(fp)
   40da4:	10800210 	cmplti	r2,r2,8
   40da8:	103fb61e 	bne	r2,zero,40c84 <_ZN3App3runEv+0x2dc>
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
   40dac:	e03fb415 	stw	zero,-304(fp)
   40db0:	00001b06 	br	40e20 <_ZN3App3runEv+0x478>
				for(j=0;j<8;j++){
   40db4:	e03fb315 	stw	zero,-308(fp)
   40db8:	00001306 	br	40e08 <_ZN3App3runEv+0x460>
					motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40dbc:	d1215817 	ldw	r4,-31392(gp)
   40dc0:	01404034 	movhi	r5,256
   40dc4:	297fc004 	addi	r5,r5,-256
   40dc8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
					motors->write((0<<24)|(i<<16)|(j<<8)|(255));
   40dcc:	d1215817 	ldw	r4,-31392(gp)
   40dd0:	e0bfb417 	ldw	r2,-304(fp)
   40dd4:	1006943a 	slli	r3,r2,16
   40dd8:	e0bfb317 	ldw	r2,-308(fp)
   40ddc:	1004923a 	slli	r2,r2,8
   40de0:	1884b03a 	or	r2,r3,r2
   40de4:	10803fd4 	ori	r2,r2,255
   40de8:	100b883a 	mov	r5,r2
   40dec:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
					usleep(150000);
   40df0:	010000b4 	movhi	r4,2
   40df4:	21127c04 	addi	r4,r4,18928
   40df8:	004562c0 	call	4562c <usleep>
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
				for(j=0;j<8;j++){
   40dfc:	e0bfb317 	ldw	r2,-308(fp)
   40e00:	10800044 	addi	r2,r2,1
   40e04:	e0bfb315 	stw	r2,-308(fp)
   40e08:	e0bfb317 	ldw	r2,-308(fp)
   40e0c:	10800210 	cmplti	r2,r2,8
   40e10:	103fea1e 	bne	r2,zero,40dbc <_ZN3App3runEv+0x414>
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
   40e14:	e0bfb417 	ldw	r2,-304(fp)
   40e18:	10800044 	addi	r2,r2,1
   40e1c:	e0bfb415 	stw	r2,-304(fp)
   40e20:	e0bfb417 	ldw	r2,-304(fp)
   40e24:	10800110 	cmplti	r2,r2,4
   40e28:	103fe21e 	bne	r2,zero,40db4 <_ZN3App3runEv+0x40c>
					usleep(150000);
				}
			}


			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40e2c:	d1215817 	ldw	r4,-31392(gp)
   40e30:	01404034 	movhi	r5,256
   40e34:	297fc004 	addi	r5,r5,-256
   40e38:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			usleep(500000);
   40e3c:	01000234 	movhi	r4,8
   40e40:	21284804 	addi	r4,r4,-24288
   40e44:	004562c0 	call	4562c <usleep>

			for(i=0;i<4;i++){
   40e48:	e03fb415 	stw	zero,-304(fp)
   40e4c:	00001006 	br	40e90 <_ZN3App3runEv+0x4e8>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40e50:	d1215817 	ldw	r4,-31392(gp)
   40e54:	01404034 	movhi	r5,256
   40e58:	297fc004 	addi	r5,r5,-256
   40e5c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(i<<16)|(255<<8)|(255));
   40e60:	d1215817 	ldw	r4,-31392(gp)
   40e64:	e0bfb417 	ldw	r2,-304(fp)
   40e68:	1004943a 	slli	r2,r2,16
   40e6c:	10bfffd4 	ori	r2,r2,65535
   40e70:	100b883a 	mov	r5,r2
   40e74:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				usleep(450000);
   40e78:	010001f4 	movhi	r4,7
   40e7c:	21377404 	addi	r4,r4,-8752
   40e80:	004562c0 	call	4562c <usleep>


			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(i=0;i<4;i++){
   40e84:	e0bfb417 	ldw	r2,-304(fp)
   40e88:	10800044 	addi	r2,r2,1
   40e8c:	e0bfb415 	stw	r2,-304(fp)
   40e90:	e0bfb417 	ldw	r2,-304(fp)
   40e94:	10800110 	cmplti	r2,r2,4
   40e98:	103fed1e 	bne	r2,zero,40e50 <_ZN3App3runEv+0x4a8>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(255<<8)|(255));
				usleep(450000);
			}

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40e9c:	d1215817 	ldw	r4,-31392(gp)
   40ea0:	01404034 	movhi	r5,256
   40ea4:	297fc004 	addi	r5,r5,-256
   40ea8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			usleep(500000);
   40eac:	01000234 	movhi	r4,8
   40eb0:	21284804 	addi	r4,r4,-24288
   40eb4:	004562c0 	call	4562c <usleep>

			for(j=0;j<8;j++){
   40eb8:	e03fb315 	stw	zero,-308(fp)
   40ebc:	00001206 	br	40f08 <_ZN3App3runEv+0x560>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40ec0:	d1215817 	ldw	r4,-31392(gp)
   40ec4:	01404034 	movhi	r5,256
   40ec8:	297fc004 	addi	r5,r5,-256
   40ecc:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(255<<16)|(j<<8)|(255));
   40ed0:	d1215817 	ldw	r4,-31392(gp)
   40ed4:	e0bfb317 	ldw	r2,-308(fp)
   40ed8:	1006923a 	slli	r3,r2,8
   40edc:	00803ff4 	movhi	r2,255
   40ee0:	10803fc4 	addi	r2,r2,255
   40ee4:	1884b03a 	or	r2,r3,r2
   40ee8:	100b883a 	mov	r5,r2
   40eec:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				usleep(300000);
   40ef0:	01000174 	movhi	r4,5
   40ef4:	2124f804 	addi	r4,r4,-27680
   40ef8:	004562c0 	call	4562c <usleep>
			}

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(j=0;j<8;j++){
   40efc:	e0bfb317 	ldw	r2,-308(fp)
   40f00:	10800044 	addi	r2,r2,1
   40f04:	e0bfb315 	stw	r2,-308(fp)
   40f08:	e0bfb317 	ldw	r2,-308(fp)
   40f0c:	10800210 	cmplti	r2,r2,8
   40f10:	103feb1e 	bne	r2,zero,40ec0 <_ZN3App3runEv+0x518>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(255<<16)|(j<<8)|(255));
				usleep(300000);
			}
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f14:	d1215817 	ldw	r4,-31392(gp)
   40f18:	01404034 	movhi	r5,256
   40f1c:	297fc004 	addi	r5,r5,-256
   40f20:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			usleep(500000);
   40f24:	01000234 	movhi	r4,8
   40f28:	21284804 	addi	r4,r4,-24288
   40f2c:	004562c0 	call	4562c <usleep>



		}
			break;
   40f30:	003eb806 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'q':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f34:	d1215817 	ldw	r4,-31392(gp)
   40f38:	01404034 	movhi	r5,256
   40f3c:	297fc004 	addi	r5,r5,-256
   40f40:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(0<<16)|(255<<8)|(255));
   40f44:	d1215817 	ldw	r4,-31392(gp)
   40f48:	017fffd4 	movui	r5,65535
   40f4c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>

		}
			break;
   40f50:	003eb006 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'w':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f54:	d1215817 	ldw	r4,-31392(gp)
   40f58:	01404034 	movhi	r5,256
   40f5c:	297fc004 	addi	r5,r5,-256
   40f60:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(1<<16)|(255<<8)|(255));
   40f64:	d1215817 	ldw	r4,-31392(gp)
   40f68:	014000b4 	movhi	r5,2
   40f6c:	297fffc4 	addi	r5,r5,-1
   40f70:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				}
			break;
   40f74:	003ea706 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'e':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f78:	d1215817 	ldw	r4,-31392(gp)
   40f7c:	01404034 	movhi	r5,256
   40f80:	297fc004 	addi	r5,r5,-256
   40f84:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(2<<16)|(255<<8)|(255));				}
   40f88:	d1215817 	ldw	r4,-31392(gp)
   40f8c:	014000f4 	movhi	r5,3
   40f90:	297fffc4 	addi	r5,r5,-1
   40f94:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			break;
   40f98:	003e9e06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'r':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f9c:	d1215817 	ldw	r4,-31392(gp)
   40fa0:	01404034 	movhi	r5,256
   40fa4:	297fc004 	addi	r5,r5,-256
   40fa8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(3<<16)|(255<<8)|(255));
   40fac:	d1215817 	ldw	r4,-31392(gp)
   40fb0:	01400134 	movhi	r5,4
   40fb4:	297fffc4 	addi	r5,r5,-1
   40fb8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				}
			break;
   40fbc:	003e9506 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'n': { /* motors */
			int linha = (int)(data[1]);
   40fc0:	e0bfbe43 	ldbu	r2,-263(fp)
   40fc4:	10803fcc 	andi	r2,r2,255
   40fc8:	1080201c 	xori	r2,r2,128
   40fcc:	10bfe004 	addi	r2,r2,-128
   40fd0:	e0bfb115 	stw	r2,-316(fp)
			int coluna = (int)(data[2]);
   40fd4:	e0bfbe83 	ldbu	r2,-262(fp)
   40fd8:	10803fcc 	andi	r2,r2,255
   40fdc:	1080201c 	xori	r2,r2,128
   40fe0:	10bfe004 	addi	r2,r2,-128
   40fe4:	e0bfb015 	stw	r2,-320(fp)
			lastLinha = linha;
   40fe8:	e0bfb117 	ldw	r2,-316(fp)
   40fec:	e0bfb615 	stw	r2,-296(fp)
			lastColuna = coluna;
   40ff0:	e0bfb017 	ldw	r2,-320(fp)
   40ff4:	e0bfb715 	stw	r2,-292(fp)
			lastPotencia = 0;
   40ff8:	e03fb515 	stw	zero,-300(fp)
			alt_putchar('\n');
   40ffc:	01000284 	movi	r4,10
   41000:	00454fc0 	call	454fc <alt_putchar>
			alt_putchar(linha);
   41004:	e13fb117 	ldw	r4,-316(fp)
   41008:	00454fc0 	call	454fc <alt_putchar>
			alt_putchar(coluna);
   4100c:	e13fb017 	ldw	r4,-320(fp)
   41010:	00454fc0 	call	454fc <alt_putchar>
			alt_putchar('\n');
   41014:	01000284 	movi	r4,10
   41018:	00454fc0 	call	454fc <alt_putchar>
//			alt_putstr("Motors received. Sending it to the motors...\n");
			int command = (  (0 << 24) | ((linha-48) << 16) | ((coluna-48) << 8) | (255) );
   4101c:	e0bfb117 	ldw	r2,-316(fp)
   41020:	10bff404 	addi	r2,r2,-48
   41024:	1006943a 	slli	r3,r2,16
   41028:	e0bfb017 	ldw	r2,-320(fp)
   4102c:	10bff404 	addi	r2,r2,-48
   41030:	1004923a 	slli	r2,r2,8
   41034:	1884b03a 	or	r2,r3,r2
   41038:	10803fd4 	ori	r2,r2,255
   4103c:	e0bfaf15 	stw	r2,-324(fp)
//			alt_printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
			motors->write(command);
   41040:	d1215817 	ldw	r4,-31392(gp)
   41044:	e17faf17 	ldw	r5,-324(fp)
   41048:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
		}
		break;
   4104c:	003e7106 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'm': { /* motors */
					int linha = (int)(data[1]);
   41050:	e0bfbe43 	ldbu	r2,-263(fp)
   41054:	10803fcc 	andi	r2,r2,255
   41058:	1080201c 	xori	r2,r2,128
   4105c:	10bfe004 	addi	r2,r2,-128
   41060:	e0bfae15 	stw	r2,-328(fp)
					int coluna = (int)(data[2]);
   41064:	e0bfbe83 	ldbu	r2,-262(fp)
   41068:	10803fcc 	andi	r2,r2,255
   4106c:	1080201c 	xori	r2,r2,128
   41070:	10bfe004 	addi	r2,r2,-128
   41074:	e0bfad15 	stw	r2,-332(fp)
					int potencia = (int)(data[3]);
   41078:	e0bfbec3 	ldbu	r2,-261(fp)
   4107c:	10803fcc 	andi	r2,r2,255
   41080:	1080201c 	xori	r2,r2,128
   41084:	10bfe004 	addi	r2,r2,-128
   41088:	e0bfac15 	stw	r2,-336(fp)
					alt_putchar('\n');
   4108c:	01000284 	movi	r4,10
   41090:	00454fc0 	call	454fc <alt_putchar>
					alt_putchar(linha+48);
   41094:	e0bfae17 	ldw	r2,-328(fp)
   41098:	11000c04 	addi	r4,r2,48
   4109c:	00454fc0 	call	454fc <alt_putchar>
					alt_putchar(coluna+48);
   410a0:	e0bfad17 	ldw	r2,-332(fp)
   410a4:	11000c04 	addi	r4,r2,48
   410a8:	00454fc0 	call	454fc <alt_putchar>
					alt_putchar('\n');
   410ac:	01000284 	movi	r4,10
   410b0:	00454fc0 	call	454fc <alt_putchar>
					int command = (  (0 << 24) | ((linha) << 16) | ((coluna) << 8) | (potencia*(5/2)) );
   410b4:	e0bfae17 	ldw	r2,-328(fp)
   410b8:	1006943a 	slli	r3,r2,16
   410bc:	e0bfad17 	ldw	r2,-332(fp)
   410c0:	1004923a 	slli	r2,r2,8
   410c4:	1886b03a 	or	r3,r3,r2
   410c8:	e0bfac17 	ldw	r2,-336(fp)
   410cc:	1085883a 	add	r2,r2,r2
   410d0:	1884b03a 	or	r2,r3,r2
   410d4:	e0bfab15 	stw	r2,-340(fp)
					motors->write(command);
   410d8:	d1215817 	ldw	r4,-31392(gp)
   410dc:	e17fab17 	ldw	r5,-340(fp)
   410e0:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
				}
		break;
   410e4:	003e4b06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'j':{
			int command = (  (0 << 24) | ((lastLinha-48) << 16) | ((lastColuna-48) << 8) | (lastPotencia) );
   410e8:	e0bfb617 	ldw	r2,-296(fp)
   410ec:	10bff404 	addi	r2,r2,-48
   410f0:	1006943a 	slli	r3,r2,16
   410f4:	e0bfb717 	ldw	r2,-292(fp)
   410f8:	10bff404 	addi	r2,r2,-48
   410fc:	1004923a 	slli	r2,r2,8
   41100:	1886b03a 	or	r3,r3,r2
   41104:	e0bfb517 	ldw	r2,-300(fp)
   41108:	1884b03a 	or	r2,r3,r2
   4110c:	e0bfaa15 	stw	r2,-344(fp)
			motors->write(command);
   41110:	d1215817 	ldw	r4,-31392(gp)
   41114:	e17faa17 	ldw	r5,-344(fp)
   41118:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			lastPotencia += 10;
   4111c:	e0bfb517 	ldw	r2,-300(fp)
   41120:	10800284 	addi	r2,r2,10
   41124:	e0bfb515 	stw	r2,-300(fp)
			if(lastPotencia > 255) lastPotencia =0;
   41128:	e0bfb517 	ldw	r2,-300(fp)
   4112c:	10804010 	cmplti	r2,r2,256
   41130:	103e381e 	bne	r2,zero,40a14 <_ZN3App3runEv+0x6c>
   41134:	e03fb515 	stw	zero,-300(fp)

		}
		break;
   41138:	003e3606 	br	40a14 <_ZN3App3runEv+0x6c>

		case 'a': { /*audio*/
//			alt_putstr("Audio received. Sending it to the FFT...\n");
//			alt_printf("%s\n", data);
			//buffer.push(data);
			motors->write(4, 255, 255, 0);
   4113c:	d1215817 	ldw	r4,-31392(gp)
   41140:	d8000015 	stw	zero,0(sp)
   41144:	01400104 	movi	r5,4
   41148:	01803fc4 	movi	r6,255
   4114c:	01c03fc4 	movi	r7,255
   41150:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
			//	fft->write(buffer.pop());
			//}


		}
			break;
   41154:	003e2f06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'c': { /*compass*/
//			alt_putstr("Compass received. Sending to the motors...\n");
//			alt_printf("%s\n", data);
			writeCompass(data[1]);
   41158:	e0bfbe43 	ldbu	r2,-263(fp)
   4115c:	11403fcc 	andi	r5,r2,255
   41160:	2940201c 	xori	r5,r5,128
   41164:	297fe004 	addi	r5,r5,-128
   41168:	e13ffe17 	ldw	r4,-8(fp)
   4116c:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   41170:	003e2806 	br	40a14 <_ZN3App3runEv+0x6c>
		case 't': {
		    writeCompass(0);
   41174:	e13ffe17 	ldw	r4,-8(fp)
   41178:	000b883a 	mov	r5,zero
   4117c:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   41180:	003e2406 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'y': {
		    writeCompass(60);
   41184:	e13ffe17 	ldw	r4,-8(fp)
   41188:	01400f04 	movi	r5,60
   4118c:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   41190:	003e2006 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'u': {
			writeCompass(100);
   41194:	e13ffe17 	ldw	r4,-8(fp)
   41198:	01401904 	movi	r5,100
   4119c:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   411a0:	003e1c06 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'i': {
			writeCompass(180);
   411a4:	e13ffe17 	ldw	r4,-8(fp)
   411a8:	01402d04 	movi	r5,180
   411ac:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   411b0:	003e1806 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'o': {
		    writeCompass(240);
   411b4:	e13ffe17 	ldw	r4,-8(fp)
   411b8:	01403c04 	movi	r5,240
   411bc:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   411c0:	003e1406 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'p': {
			writeCompass(359);
   411c4:	e13ffe17 	ldw	r4,-8(fp)
   411c8:	014059c4 	movi	r5,359
   411cc:	00409600 	call	40960 <_ZN3App12writeCompassEi>
		}
			break;
   411d0:	003e1006 	br	40a14 <_ZN3App3runEv+0x6c>
		case 'g': { /*gyroscope*/
//			alt_putstr("Gyroscope received. Sending to the motors...\n");
//			alt_printf("%s\n", data);
			writeGyroscope(0,0,255);
   411d4:	e13ffe17 	ldw	r4,-8(fp)
   411d8:	000b883a 	mov	r5,zero
   411dc:	000d883a 	mov	r6,zero
   411e0:	01c03fc4 	movi	r7,255
   411e4:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
			//writeGyroscope(int(data[1]), int(data[2]), int(data[3]));
		}
			break;
   411e8:	003e0a06 	br	40a14 <_ZN3App3runEv+0x6c>
		case '1': {
			writeGyroscope(-99,-100,240);
   411ec:	e13ffe17 	ldw	r4,-8(fp)
   411f0:	017fe744 	movi	r5,-99
   411f4:	01bfe704 	movi	r6,-100
   411f8:	01c03c04 	movi	r7,240
   411fc:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
		}
			break;
   41200:	003e0406 	br	40a14 <_ZN3App3runEv+0x6c>
		case '2': {
			writeGyroscope(-75,-75,240);
   41204:	e13ffe17 	ldw	r4,-8(fp)
   41208:	017fed44 	movi	r5,-75
   4120c:	01bfed44 	movi	r6,-75
   41210:	01c03c04 	movi	r7,240
   41214:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
		}
			break;
   41218:	003dfe06 	br	40a14 <_ZN3App3runEv+0x6c>
		case '3': {
			writeGyroscope(-41,-45,240);
   4121c:	e13ffe17 	ldw	r4,-8(fp)
   41220:	017ff5c4 	movi	r5,-41
   41224:	01bff4c4 	movi	r6,-45
   41228:	01c03c04 	movi	r7,240
   4122c:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
		}
			break;
   41230:	003df806 	br	40a14 <_ZN3App3runEv+0x6c>
		case '4': {
			writeGyroscope(-21,-23,240);
   41234:	e13ffe17 	ldw	r4,-8(fp)
   41238:	017ffac4 	movi	r5,-21
   4123c:	01bffa44 	movi	r6,-23
   41240:	01c03c04 	movi	r7,240
   41244:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
		}
			break;
   41248:	003df206 	br	40a14 <_ZN3App3runEv+0x6c>
		case '5': {
			writeGyroscope(3,-2,240);
   4124c:	e13ffe17 	ldw	r4,-8(fp)
   41250:	014000c4 	movi	r5,3
   41254:	01bfff84 	movi	r6,-2
   41258:	01c03c04 	movi	r7,240
   4125c:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
			}
			break;
   41260:	003dec06 	br	40a14 <_ZN3App3runEv+0x6c>
		case '6': {
			writeGyroscope(25,31,240);
   41264:	e13ffe17 	ldw	r4,-8(fp)
   41268:	01400644 	movi	r5,25
   4126c:	018007c4 	movi	r6,31
   41270:	01c03c04 	movi	r7,240
   41274:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
			}
			break;
   41278:	003de606 	br	40a14 <_ZN3App3runEv+0x6c>
		case '7': {
			writeGyroscope(48,51,240);
   4127c:	e13ffe17 	ldw	r4,-8(fp)
   41280:	01400c04 	movi	r5,48
   41284:	01800cc4 	movi	r6,51
   41288:	01c03c04 	movi	r7,240
   4128c:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
			}
			break;
   41290:	003de006 	br	40a14 <_ZN3App3runEv+0x6c>
		case '8': {
			writeGyroscope(67,71,240);
   41294:	e13ffe17 	ldw	r4,-8(fp)
   41298:	014010c4 	movi	r5,67
   4129c:	018011c4 	movi	r6,71
   412a0:	01c03c04 	movi	r7,240
   412a4:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>
			}
			break;
   412a8:	003dda06 	br	40a14 <_ZN3App3runEv+0x6c>
		case '9': {
			writeGyroscope(87,95,240);
   412ac:	e13ffe17 	ldw	r4,-8(fp)
   412b0:	014015c4 	movi	r5,87
   412b4:	018017c4 	movi	r6,95
   412b8:	01c03c04 	movi	r7,240
   412bc:	004059c0 	call	4059c <_ZN3App14writeGyroscopeEiii>





	while (1) {
   412c0:	003dd406 	br	40a14 <_ZN3App3runEv+0x6c>

000412c4 <_ZN3App10writeAudioEPii>:

	}

}

void App::writeAudio(int* freq, int samples) {
   412c4:	defff404 	addi	sp,sp,-48
   412c8:	dfc00b15 	stw	ra,44(sp)
   412cc:	df000a15 	stw	fp,40(sp)
   412d0:	dc400915 	stw	r17,36(sp)
   412d4:	dc000815 	stw	r16,32(sp)
   412d8:	df000804 	addi	fp,sp,32
   412dc:	e13ffc15 	stw	r4,-16(fp)
   412e0:	e17ffd15 	stw	r5,-12(fp)
   412e4:	e1bffe15 	stw	r6,-8(fp)
	int commom = samples/COLUMNS;
   412e8:	e0bffe17 	ldw	r2,-8(fp)
   412ec:	e0bfff15 	stw	r2,-4(fp)
   412f0:	e0ffff17 	ldw	r3,-4(fp)
   412f4:	1804403a 	cmpge	r2,r3,zero
   412f8:	1000031e 	bne	r2,zero,41308 <_ZN3App10writeAudioEPii+0x44>
   412fc:	e0bfff17 	ldw	r2,-4(fp)
   41300:	108001c4 	addi	r2,r2,7
   41304:	e0bfff15 	stw	r2,-4(fp)
   41308:	e0ffff17 	ldw	r3,-4(fp)
   4130c:	1805d0fa 	srai	r2,r3,3
   41310:	e0bffb15 	stw	r2,-20(fp)
	int summation = 0;
   41314:	e03ffa15 	stw	zero,-24(fp)
	int pos = 0;
   41318:	e03ff915 	stw	zero,-28(fp)
	motors->write_to_next_line();
   4131c:	d1215817 	ldw	r4,-31392(gp)
   41320:	0041b040 	call	41b04 <_ZN6Motors18write_to_next_lineEv>
	motors->write( 0 | 0 | 255 | 0 );
   41324:	d1215817 	ldw	r4,-31392(gp)
   41328:	01403fc4 	movi	r5,255
   4132c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	motors->write( 2 << 24 | 0 | 255 | 1 );
   41330:	d1215817 	ldw	r4,-31392(gp)
   41334:	01408034 	movhi	r5,512
   41338:	29403fc4 	addi	r5,r5,255
   4133c:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
	for(int i = 0; i < samples; i++) {
   41340:	e03ff815 	stw	zero,-32(fp)
   41344:	00002a06 	br	413f0 <_ZN3App10writeAudioEPii+0x12c>
		summation += freq[i];
   41348:	e0bff817 	ldw	r2,-32(fp)
   4134c:	1085883a 	add	r2,r2,r2
   41350:	1085883a 	add	r2,r2,r2
   41354:	1007883a 	mov	r3,r2
   41358:	e0bffd17 	ldw	r2,-12(fp)
   4135c:	1885883a 	add	r2,r3,r2
   41360:	10c00017 	ldw	r3,0(r2)
   41364:	e0bffa17 	ldw	r2,-24(fp)
   41368:	10c5883a 	add	r2,r2,r3
   4136c:	e0bffa15 	stw	r2,-24(fp)
		if(i%commom == commom - 1) {
   41370:	e13ff817 	ldw	r4,-32(fp)
   41374:	e17ffb17 	ldw	r5,-20(fp)
   41378:	0043bd00 	call	43bd0 <__modsi3>
   4137c:	1007883a 	mov	r3,r2
   41380:	e0bffb17 	ldw	r2,-20(fp)
   41384:	10bfffc4 	addi	r2,r2,-1
   41388:	1880161e 	bne	r3,r2,413e4 <_ZN3App10writeAudioEPii+0x120>
			motors->write((1<<24)| 0 | (pos << 8) |(5));
   4138c:	d1215817 	ldw	r4,-31392(gp)
   41390:	e0bff917 	ldw	r2,-28(fp)
   41394:	1006923a 	slli	r3,r2,8
   41398:	00804034 	movhi	r2,256
   4139c:	10800144 	addi	r2,r2,5
   413a0:	1884b03a 	or	r2,r3,r2
   413a4:	100b883a 	mov	r5,r2
   413a8:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
   413ac:	d4215817 	ldw	r16,-31392(gp)
   413b0:	e0bff917 	ldw	r2,-28(fp)
   413b4:	1022923a 	slli	r17,r2,8
   413b8:	e13ffa17 	ldw	r4,-24(fp)
   413bc:	e17ffb17 	ldw	r5,-20(fp)
   413c0:	0043b700 	call	43b70 <__divsi3>
   413c4:	8884b03a 	or	r2,r17,r2
   413c8:	100b883a 	mov	r5,r2
   413cc:	8009883a 	mov	r4,r16
   413d0:	0041ad00 	call	41ad0 <_ZN6Motors5writeEj>
			pos++;
   413d4:	e0bff917 	ldw	r2,-28(fp)
   413d8:	10800044 	addi	r2,r2,1
   413dc:	e0bff915 	stw	r2,-28(fp)
			summation = 0;
   413e0:	e03ffa15 	stw	zero,-24(fp)
	int summation = 0;
	int pos = 0;
	motors->write_to_next_line();
	motors->write( 0 | 0 | 255 | 0 );
	motors->write( 2 << 24 | 0 | 255 | 1 );
	for(int i = 0; i < samples; i++) {
   413e4:	e0bff817 	ldw	r2,-32(fp)
   413e8:	10800044 	addi	r2,r2,1
   413ec:	e0bff815 	stw	r2,-32(fp)
   413f0:	e0fff817 	ldw	r3,-32(fp)
   413f4:	e0bffe17 	ldw	r2,-8(fp)
   413f8:	18bfd316 	blt	r3,r2,41348 <_ZN3App10writeAudioEPii+0x84>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
			pos++;
			summation = 0;
		}
	}
}
   413fc:	e037883a 	mov	sp,fp
   41400:	dfc00317 	ldw	ra,12(sp)
   41404:	df000217 	ldw	fp,8(sp)
   41408:	dc400117 	ldw	r17,4(sp)
   4140c:	dc000017 	ldw	r16,0(sp)
   41410:	dec00404 	addi	sp,sp,16
   41414:	f800283a 	ret

00041418 <_ZN3App10fftHandlerEj>:
void App::setup() {
	wifi->config(SSID, PASSWORD);
	//retirando fft    fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
   41418:	defffc04 	addi	sp,sp,-16
   4141c:	dfc00315 	stw	ra,12(sp)
   41420:	df000215 	stw	fp,8(sp)
   41424:	dc000115 	stw	r16,4(sp)
   41428:	df000104 	addi	fp,sp,4
   4142c:	e13fff15 	stw	r4,-4(fp)

	//	motors->write(output);
	fft->read();
   41430:	d1215917 	ldw	r4,-31388(gp)
   41434:	00418840 	call	41884 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
   41438:	01000134 	movhi	r4,4
   4143c:	211acc04 	addi	r4,r4,27440
   41440:	00417200 	call	41720 <_ZN3App6Buffer6lengthEv>
   41444:	10800048 	cmpgei	r2,r2,1
   41448:	10803fcc 	andi	r2,r2,255
   4144c:	1005003a 	cmpeq	r2,r2,zero
   41450:	1000071e 	bne	r2,zero,41470 <_ZN3App10fftHandlerEj+0x58>
		fft->write(buffer.pop());
   41454:	d4215917 	ldw	r16,-31388(gp)
   41458:	01000134 	movhi	r4,4
   4145c:	211acc04 	addi	r4,r4,27440
   41460:	00416380 	call	41638 <_ZN3App6Buffer3popEv>
   41464:	100b883a 	mov	r5,r2
   41468:	8009883a 	mov	r4,r16
   4146c:	00418ac0 	call	418ac <_ZN3FFT5writeEPh>
}
   41470:	e037883a 	mov	sp,fp
   41474:	dfc00217 	ldw	ra,8(sp)
   41478:	df000117 	ldw	fp,4(sp)
   4147c:	dc000017 	ldw	r16,0(sp)
   41480:	dec00304 	addi	sp,sp,12
   41484:	f800283a 	ret

00041488 <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
   41488:	defffd04 	addi	sp,sp,-12
   4148c:	dfc00215 	stw	ra,8(sp)
   41490:	df000115 	stw	fp,4(sp)
   41494:	df000104 	addi	fp,sp,4
   41498:	e13fff15 	stw	r4,-4(fp)
	wifi->config(SSID, PASSWORD);
   4149c:	e0bfff17 	ldw	r2,-4(fp)
   414a0:	11000517 	ldw	r4,20(r2)
   414a4:	01400134 	movhi	r5,4
   414a8:	29579f04 	addi	r5,r5,24188
   414ac:	01800134 	movhi	r6,4
   414b0:	3197a204 	addi	r6,r6,24200
   414b4:	004201c0 	call	4201c <_ZN4WiFi6configEPcS0_>
	//retirando fft    fft->setInterruptHandler(App::fftHandler);
}
   414b8:	e037883a 	mov	sp,fp
   414bc:	dfc00117 	ldw	ra,4(sp)
   414c0:	df000017 	ldw	fp,0(sp)
   414c4:	dec00204 	addi	sp,sp,8
   414c8:	f800283a 	ret

000414cc <_ZN3AppD1Ev>:
	compass_vib_value = 255;
	gyroscope_vib_value = 255;
	running.init();
}

App::~App() {
   414cc:	defffd04 	addi	sp,sp,-12
   414d0:	dfc00215 	stw	ra,8(sp)
   414d4:	df000115 	stw	fp,4(sp)
   414d8:	df000104 	addi	fp,sp,4
   414dc:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   414e0:	e0bfff17 	ldw	r2,-4(fp)
   414e4:	11000517 	ldw	r4,20(r2)
   414e8:	0041cb40 	call	41cb4 <_ZN4WiFi10stopServerEv>
}
   414ec:	e037883a 	mov	sp,fp
   414f0:	dfc00117 	ldw	ra,4(sp)
   414f4:	df000017 	ldw	fp,0(sp)
   414f8:	dec00204 	addi	sp,sp,8
   414fc:	f800283a 	ret

00041500 <_ZN3AppD2Ev>:
	compass_vib_value = 255;
	gyroscope_vib_value = 255;
	running.init();
}

App::~App() {
   41500:	defffd04 	addi	sp,sp,-12
   41504:	dfc00215 	stw	ra,8(sp)
   41508:	df000115 	stw	fp,4(sp)
   4150c:	df000104 	addi	fp,sp,4
   41510:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   41514:	e0bfff17 	ldw	r2,-4(fp)
   41518:	11000517 	ldw	r4,20(r2)
   4151c:	0041cb40 	call	41cb4 <_ZN4WiFi10stopServerEv>
}
   41520:	e037883a 	mov	sp,fp
   41524:	dfc00117 	ldw	ra,4(sp)
   41528:	df000017 	ldw	fp,0(sp)
   4152c:	dec00204 	addi	sp,sp,8
   41530:	f800283a 	ret

00041534 <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   41534:	defffd04 	addi	sp,sp,-12
   41538:	dfc00215 	stw	ra,8(sp)
   4153c:	df000115 	stw	fp,4(sp)
   41540:	df000104 	addi	fp,sp,4
   41544:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   41548:	00421600 	call	42160 <_ZN4WiFi12getSingletonEv>
   4154c:	1007883a 	mov	r3,r2
   41550:	e0bfff17 	ldw	r2,-4(fp)
   41554:	10c00515 	stw	r3,20(r2)
	compass_vib_value = 255;
   41558:	e0ffff17 	ldw	r3,-4(fp)
   4155c:	00803fc4 	movi	r2,255
   41560:	18800015 	stw	r2,0(r3)
	gyroscope_vib_value = 255;
   41564:	e0ffff17 	ldw	r3,-4(fp)
   41568:	00803fc4 	movi	r2,255
   4156c:	18800115 	stw	r2,4(r3)
	running.init();
   41570:	e0bfff17 	ldw	r2,-4(fp)
   41574:	11000204 	addi	r4,r2,8
   41578:	00415ec0 	call	415ec <_ZN9run_param4initEv>
}
   4157c:	e037883a 	mov	sp,fp
   41580:	dfc00117 	ldw	ra,4(sp)
   41584:	df000017 	ldw	fp,0(sp)
   41588:	dec00204 	addi	sp,sp,8
   4158c:	f800283a 	ret

00041590 <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   41590:	defffd04 	addi	sp,sp,-12
   41594:	dfc00215 	stw	ra,8(sp)
   41598:	df000115 	stw	fp,4(sp)
   4159c:	df000104 	addi	fp,sp,4
   415a0:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   415a4:	00421600 	call	42160 <_ZN4WiFi12getSingletonEv>
   415a8:	1007883a 	mov	r3,r2
   415ac:	e0bfff17 	ldw	r2,-4(fp)
   415b0:	10c00515 	stw	r3,20(r2)
	compass_vib_value = 255;
   415b4:	e0ffff17 	ldw	r3,-4(fp)
   415b8:	00803fc4 	movi	r2,255
   415bc:	18800015 	stw	r2,0(r3)
	gyroscope_vib_value = 255;
   415c0:	e0ffff17 	ldw	r3,-4(fp)
   415c4:	00803fc4 	movi	r2,255
   415c8:	18800115 	stw	r2,4(r3)
	running.init();
   415cc:	e0bfff17 	ldw	r2,-4(fp)
   415d0:	11000204 	addi	r4,r2,8
   415d4:	00415ec0 	call	415ec <_ZN9run_param4initEv>
}
   415d8:	e037883a 	mov	sp,fp
   415dc:	dfc00117 	ldw	ra,4(sp)
   415e0:	df000017 	ldw	fp,0(sp)
   415e4:	dec00204 	addi	sp,sp,8
   415e8:	f800283a 	ret

000415ec <_ZN9run_param4initEv>:
struct run_param {
	char* possible;
	char current;
	int iterator;

	void init() {
   415ec:	defffe04 	addi	sp,sp,-8
   415f0:	df000115 	stw	fp,4(sp)
   415f4:	df000104 	addi	fp,sp,4
   415f8:	e13fff15 	stw	r4,-4(fp)
		possible = "macg";
   415fc:	e0ffff17 	ldw	r3,-4(fp)
   41600:	00800134 	movhi	r2,4
   41604:	10979d04 	addi	r2,r2,24180
   41608:	18800015 	stw	r2,0(r3)
		current = possible[0];
   4160c:	e0bfff17 	ldw	r2,-4(fp)
   41610:	10800017 	ldw	r2,0(r2)
   41614:	10c00003 	ldbu	r3,0(r2)
   41618:	e0bfff17 	ldw	r2,-4(fp)
   4161c:	10c00105 	stb	r3,4(r2)
		iterator = 0;
   41620:	e0bfff17 	ldw	r2,-4(fp)
   41624:	10000215 	stw	zero,8(r2)
	}
   41628:	e037883a 	mov	sp,fp
   4162c:	df000017 	ldw	fp,0(sp)
   41630:	dec00104 	addi	sp,sp,4
   41634:	f800283a 	ret

00041638 <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
   41638:	defffd04 	addi	sp,sp,-12
   4163c:	df000215 	stw	fp,8(sp)
   41640:	df000204 	addi	fp,sp,8
   41644:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
   41648:	e0bffe17 	ldw	r2,-8(fp)
   4164c:	10800217 	ldw	r2,8(r2)
   41650:	10bfffd8 	cmpnei	r2,r2,-1
   41654:	1000021e 	bne	r2,zero,41660 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
   41658:	e03fff15 	stw	zero,-4(fp)
   4165c:	00002b06 	br	4170c <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
   41660:	e0bffe17 	ldw	r2,-8(fp)
   41664:	10800217 	ldw	r2,8(r2)
   41668:	10c00044 	addi	r3,r2,1
   4166c:	e0bffe17 	ldw	r2,-8(fp)
   41670:	10c00215 	stw	r3,8(r2)
   41674:	e0bffe17 	ldw	r2,-8(fp)
   41678:	10800217 	ldw	r2,8(r2)
   4167c:	1007883a 	mov	r3,r2
   41680:	e0bffe17 	ldw	r2,-8(fp)
   41684:	10800017 	ldw	r2,0(r2)
   41688:	1884703a 	and	r2,r3,r2
   4168c:	1007883a 	mov	r3,r2
   41690:	e0bffe17 	ldw	r2,-8(fp)
   41694:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
   41698:	e0bffe17 	ldw	r2,-8(fp)
   4169c:	10c00217 	ldw	r3,8(r2)
   416a0:	e0bffe17 	ldw	r2,-8(fp)
   416a4:	10800317 	ldw	r2,12(r2)
   416a8:	1880091e 	bne	r3,r2,416d0 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
   416ac:	e0bffe17 	ldw	r2,-8(fp)
   416b0:	10000315 	stw	zero,12(r2)
					begin = -1;
   416b4:	e0fffe17 	ldw	r3,-8(fp)
   416b8:	00bfffc4 	movi	r2,-1
   416bc:	18800215 	stw	r2,8(r3)
					len = 0;
   416c0:	e0bffe17 	ldw	r2,-8(fp)
   416c4:	10000115 	stw	zero,4(r2)
					return NULL;;
   416c8:	e03fff15 	stw	zero,-4(fp)
   416cc:	00000f06 	br	4170c <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
   416d0:	e0bffe17 	ldw	r2,-8(fp)
   416d4:	10800117 	ldw	r2,4(r2)
   416d8:	10ffffc4 	addi	r3,r2,-1
   416dc:	e0bffe17 	ldw	r2,-8(fp)
   416e0:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
   416e4:	e0bffe17 	ldw	r2,-8(fp)
   416e8:	10c00417 	ldw	r3,16(r2)
   416ec:	e0bffe17 	ldw	r2,-8(fp)
   416f0:	10800217 	ldw	r2,8(r2)
   416f4:	1085883a 	add	r2,r2,r2
   416f8:	1085883a 	add	r2,r2,r2
   416fc:	1885883a 	add	r2,r3,r2
   41700:	10bfff04 	addi	r2,r2,-4
   41704:	10800017 	ldw	r2,0(r2)
   41708:	e0bfff15 	stw	r2,-4(fp)
   4170c:	e0bfff17 	ldw	r2,-4(fp)
			}
   41710:	e037883a 	mov	sp,fp
   41714:	df000017 	ldw	fp,0(sp)
   41718:	dec00104 	addi	sp,sp,4
   4171c:	f800283a 	ret

00041720 <_ZN3App6Buffer6lengthEv>:

			int length() {
   41720:	defffe04 	addi	sp,sp,-8
   41724:	df000115 	stw	fp,4(sp)
   41728:	df000104 	addi	fp,sp,4
   4172c:	e13fff15 	stw	r4,-4(fp)
				return len;
   41730:	e0bfff17 	ldw	r2,-4(fp)
   41734:	10800117 	ldw	r2,4(r2)
			}
   41738:	e037883a 	mov	sp,fp
   4173c:	df000017 	ldw	fp,0(sp)
   41740:	dec00104 	addi	sp,sp,4
   41744:	f800283a 	ret

00041748 <_ZN3App6BufferC1Ev>:
private:
	int compass_vib_value;
	int gyroscope_vib_value;
	class Buffer {
		public:
			Buffer(){
   41748:	defffd04 	addi	sp,sp,-12
   4174c:	dfc00215 	stw	ra,8(sp)
   41750:	df000115 	stw	fp,4(sp)
   41754:	df000104 	addi	fp,sp,4
   41758:	e13fff15 	stw	r4,-4(fp)
				size = 10;
   4175c:	e0ffff17 	ldw	r3,-4(fp)
   41760:	00800284 	movi	r2,10
   41764:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
   41768:	e0bfff17 	ldw	r2,-4(fp)
   4176c:	10800017 	ldw	r2,0(r2)
   41770:	1085883a 	add	r2,r2,r2
   41774:	1085883a 	add	r2,r2,r2
   41778:	1009883a 	mov	r4,r2
   4177c:	004228c0 	call	4228c <_Znam>
   41780:	1007883a 	mov	r3,r2
   41784:	e0bfff17 	ldw	r2,-4(fp)
   41788:	10c00415 	stw	r3,16(r2)
				begin = -1;
   4178c:	e0ffff17 	ldw	r3,-4(fp)
   41790:	00bfffc4 	movi	r2,-1
   41794:	18800215 	stw	r2,8(r3)
				end = 0;
   41798:	e0bfff17 	ldw	r2,-4(fp)
   4179c:	10000315 	stw	zero,12(r2)
				len = 0;
   417a0:	e0bfff17 	ldw	r2,-4(fp)
   417a4:	10000115 	stw	zero,4(r2)
			}
   417a8:	e037883a 	mov	sp,fp
   417ac:	dfc00117 	ldw	ra,4(sp)
   417b0:	df000017 	ldw	fp,0(sp)
   417b4:	dec00204 	addi	sp,sp,8
   417b8:	f800283a 	ret

000417bc <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   417bc:	defffe04 	addi	sp,sp,-8
   417c0:	df000115 	stw	fp,4(sp)
   417c4:	df000104 	addi	fp,sp,4
   417c8:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   417cc:	e0ffff17 	ldw	r3,-4(fp)
   417d0:	00a40a14 	movui	r2,36904
   417d4:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   417d8:	e0ffff17 	ldw	r3,-4(fp)
   417dc:	00a40e14 	movui	r2,36920
   417e0:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   417e4:	e0ffff17 	ldw	r3,-4(fp)
   417e8:	00a41214 	movui	r2,36936
   417ec:	18800215 	stw	r2,8(r3)
}
   417f0:	e037883a 	mov	sp,fp
   417f4:	df000017 	ldw	fp,0(sp)
   417f8:	dec00104 	addi	sp,sp,4
   417fc:	f800283a 	ret

00041800 <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   41800:	defffe04 	addi	sp,sp,-8
   41804:	df000115 	stw	fp,4(sp)
   41808:	df000104 	addi	fp,sp,4
   4180c:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   41810:	e0ffff17 	ldw	r3,-4(fp)
   41814:	00a40a14 	movui	r2,36904
   41818:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   4181c:	e0ffff17 	ldw	r3,-4(fp)
   41820:	00a40e14 	movui	r2,36920
   41824:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   41828:	e0ffff17 	ldw	r3,-4(fp)
   4182c:	00a41214 	movui	r2,36936
   41830:	18800215 	stw	r2,8(r3)
}
   41834:	e037883a 	mov	sp,fp
   41838:	df000017 	ldw	fp,0(sp)
   4183c:	dec00104 	addi	sp,sp,4
   41840:	f800283a 	ret

00041844 <_ZN3FFTD2Ev>:

FFT::~FFT() {
   41844:	defffe04 	addi	sp,sp,-8
   41848:	df000115 	stw	fp,4(sp)
   4184c:	df000104 	addi	fp,sp,4
   41850:	e13fff15 	stw	r4,-4(fp)
}
   41854:	e037883a 	mov	sp,fp
   41858:	df000017 	ldw	fp,0(sp)
   4185c:	dec00104 	addi	sp,sp,4
   41860:	f800283a 	ret

00041864 <_ZN3FFTD1Ev>:
	data = (volatile unsigned int*) matrixAddress;
	writeFFT =(volatile unsigned int*) fftAddress;
	readFFT = (volatile unsigned int*) fftAddress+4;
}

FFT::~FFT() {
   41864:	defffe04 	addi	sp,sp,-8
   41868:	df000115 	stw	fp,4(sp)
   4186c:	df000104 	addi	fp,sp,4
   41870:	e13fff15 	stw	r4,-4(fp)
}
   41874:	e037883a 	mov	sp,fp
   41878:	df000017 	ldw	fp,0(sp)
   4187c:	dec00104 	addi	sp,sp,4
   41880:	f800283a 	ret

00041884 <_ZN3FFT4readEv>:
void FFT::write(unsigned char *input) {
	writeFFT = (unsigned int*)input;
	delete input;
}

int* FFT::read() {
   41884:	defffe04 	addi	sp,sp,-8
   41888:	df000115 	stw	fp,4(sp)
   4188c:	df000104 	addi	fp,sp,4
   41890:	e13fff15 	stw	r4,-4(fp)
	return (int*)readFFT;
   41894:	e0bfff17 	ldw	r2,-4(fp)
   41898:	10800217 	ldw	r2,8(r2)
}
   4189c:	e037883a 	mov	sp,fp
   418a0:	df000017 	ldw	fp,0(sp)
   418a4:	dec00104 	addi	sp,sp,4
   418a8:	f800283a 	ret

000418ac <_ZN3FFT5writeEPh>:
	if (fft == 0)
		fft = new FFT();
	return fft;
}

void FFT::write(unsigned char *input) {
   418ac:	defffc04 	addi	sp,sp,-16
   418b0:	dfc00315 	stw	ra,12(sp)
   418b4:	df000215 	stw	fp,8(sp)
   418b8:	df000204 	addi	fp,sp,8
   418bc:	e13ffe15 	stw	r4,-8(fp)
   418c0:	e17fff15 	stw	r5,-4(fp)
	writeFFT = (unsigned int*)input;
   418c4:	e0ffff17 	ldw	r3,-4(fp)
   418c8:	e0bffe17 	ldw	r2,-8(fp)
   418cc:	10c00115 	stw	r3,4(r2)
	delete input;
   418d0:	e13fff17 	ldw	r4,-4(fp)
   418d4:	004232c0 	call	4232c <_ZdlPv>
}
   418d8:	e037883a 	mov	sp,fp
   418dc:	dfc00117 	ldw	ra,4(sp)
   418e0:	df000017 	ldw	fp,0(sp)
   418e4:	dec00204 	addi	sp,sp,8
   418e8:	f800283a 	ret

000418ec <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
   418ec:	defffd04 	addi	sp,sp,-12
   418f0:	dfc00215 	stw	ra,8(sp)
   418f4:	df000115 	stw	fp,4(sp)
   418f8:	dc000015 	stw	r16,0(sp)
   418fc:	d839883a 	mov	fp,sp
	if (fft == 0)
   41900:	d0a15a17 	ldw	r2,-31384(gp)
   41904:	1004c03a 	cmpne	r2,r2,zero
   41908:	1000061e 	bne	r2,zero,41924 <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
   4190c:	01000304 	movi	r4,12
   41910:	00430400 	call	43040 <_Znwm>
   41914:	1021883a 	mov	r16,r2
   41918:	8009883a 	mov	r4,r16
   4191c:	00418000 	call	41800 <_ZN3FFTC1Ev>
   41920:	d4215a15 	stw	r16,-31384(gp)
	return fft;
   41924:	d0a15a17 	ldw	r2,-31384(gp)
}
   41928:	e037883a 	mov	sp,fp
   4192c:	dfc00217 	ldw	ra,8(sp)
   41930:	df000117 	ldw	fp,4(sp)
   41934:	dc000017 	ldw	r16,0(sp)
   41938:	dec00304 	addi	sp,sp,12
   4193c:	f800283a 	ret

00041940 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41940:	defffe04 	addi	sp,sp,-8
   41944:	df000115 	stw	fp,4(sp)
   41948:	df000104 	addi	fp,sp,4
   4194c:	e13fff15 	stw	r4,-4(fp)
}
   41950:	e037883a 	mov	sp,fp
   41954:	df000017 	ldw	fp,0(sp)
   41958:	dec00104 	addi	sp,sp,4
   4195c:	f800283a 	ret

00041960 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41960:	defffe04 	addi	sp,sp,-8
   41964:	df000115 	stw	fp,4(sp)
   41968:	df000104 	addi	fp,sp,4
   4196c:	e13fff15 	stw	r4,-4(fp)
}
   41970:	e037883a 	mov	sp,fp
   41974:	df000017 	ldw	fp,0(sp)
   41978:	dec00104 	addi	sp,sp,4
   4197c:	f800283a 	ret

00041980 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
   41980:	defffb04 	addi	sp,sp,-20
   41984:	df000415 	stw	fp,16(sp)
   41988:	df000404 	addi	fp,sp,16
   4198c:	e13ffc15 	stw	r4,-16(fp)
   41990:	e17ffd15 	stw	r5,-12(fp)
   41994:	e1bffe15 	stw	r6,-8(fp)
   41998:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
   4199c:	e0bffc17 	ldw	r2,-16(fp)
   419a0:	11000017 	ldw	r4,0(r2)
   419a4:	e0bffd17 	ldw	r2,-12(fp)
   419a8:	1006963a 	slli	r3,r2,24
   419ac:	e0bffe17 	ldw	r2,-8(fp)
   419b0:	1004943a 	slli	r2,r2,16
   419b4:	1887883a 	add	r3,r3,r2
   419b8:	e0bfff17 	ldw	r2,-4(fp)
   419bc:	1004923a 	slli	r2,r2,8
   419c0:	1887883a 	add	r3,r3,r2
   419c4:	e0800117 	ldw	r2,4(fp)
   419c8:	1885883a 	add	r2,r3,r2
   419cc:	20800015 	stw	r2,0(r4)
}
   419d0:	e037883a 	mov	sp,fp
   419d4:	df000017 	ldw	fp,0(sp)
   419d8:	dec00104 	addi	sp,sp,4
   419dc:	f800283a 	ret

000419e0 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
   419e0:	defff904 	addi	sp,sp,-28
   419e4:	dfc00615 	stw	ra,24(sp)
   419e8:	df000515 	stw	fp,20(sp)
   419ec:	df000504 	addi	fp,sp,20
   419f0:	e13ffc15 	stw	r4,-16(fp)
   419f4:	e17ffd15 	stw	r5,-12(fp)
   419f8:	e1bffe15 	stw	r6,-8(fp)
   419fc:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
   41a00:	e0bfff17 	ldw	r2,-4(fp)
   41a04:	d8800015 	stw	r2,0(sp)
   41a08:	e13ffc17 	ldw	r4,-16(fp)
   41a0c:	01400084 	movi	r5,2
   41a10:	e1bffd17 	ldw	r6,-12(fp)
   41a14:	e1fffe17 	ldw	r7,-8(fp)
   41a18:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
}
   41a1c:	e037883a 	mov	sp,fp
   41a20:	dfc00117 	ldw	ra,4(sp)
   41a24:	df000017 	ldw	fp,0(sp)
   41a28:	dec00204 	addi	sp,sp,8
   41a2c:	f800283a 	ret

00041a30 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(0, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
   41a30:	defff904 	addi	sp,sp,-28
   41a34:	dfc00615 	stw	ra,24(sp)
   41a38:	df000515 	stw	fp,20(sp)
   41a3c:	df000504 	addi	fp,sp,20
   41a40:	e13ffc15 	stw	r4,-16(fp)
   41a44:	e17ffd15 	stw	r5,-12(fp)
   41a48:	e1bffe15 	stw	r6,-8(fp)
   41a4c:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
   41a50:	e0bfff17 	ldw	r2,-4(fp)
   41a54:	d8800015 	stw	r2,0(sp)
   41a58:	e13ffc17 	ldw	r4,-16(fp)
   41a5c:	01400044 	movi	r5,1
   41a60:	e1bffd17 	ldw	r6,-12(fp)
   41a64:	e1fffe17 	ldw	r7,-8(fp)
   41a68:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
}
   41a6c:	e037883a 	mov	sp,fp
   41a70:	dfc00117 	ldw	ra,4(sp)
   41a74:	df000017 	ldw	fp,0(sp)
   41a78:	dec00204 	addi	sp,sp,8
   41a7c:	f800283a 	ret

00041a80 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
   41a80:	defff904 	addi	sp,sp,-28
   41a84:	dfc00615 	stw	ra,24(sp)
   41a88:	df000515 	stw	fp,20(sp)
   41a8c:	df000504 	addi	fp,sp,20
   41a90:	e13ffc15 	stw	r4,-16(fp)
   41a94:	e17ffd15 	stw	r5,-12(fp)
   41a98:	e1bffe15 	stw	r6,-8(fp)
   41a9c:	e1ffff15 	stw	r7,-4(fp)
	write(0, line, column, valor);
   41aa0:	e0bfff17 	ldw	r2,-4(fp)
   41aa4:	d8800015 	stw	r2,0(sp)
   41aa8:	e13ffc17 	ldw	r4,-16(fp)
   41aac:	000b883a 	mov	r5,zero
   41ab0:	e1bffd17 	ldw	r6,-12(fp)
   41ab4:	e1fffe17 	ldw	r7,-8(fp)
   41ab8:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
}
   41abc:	e037883a 	mov	sp,fp
   41ac0:	dfc00117 	ldw	ra,4(sp)
   41ac4:	df000017 	ldw	fp,0(sp)
   41ac8:	dec00204 	addi	sp,sp,8
   41acc:	f800283a 	ret

00041ad0 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
   41ad0:	defffd04 	addi	sp,sp,-12
   41ad4:	df000215 	stw	fp,8(sp)
   41ad8:	df000204 	addi	fp,sp,8
   41adc:	e13ffe15 	stw	r4,-8(fp)
   41ae0:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
   41ae4:	e0bffe17 	ldw	r2,-8(fp)
   41ae8:	10c00017 	ldw	r3,0(r2)
   41aec:	e0bfff17 	ldw	r2,-4(fp)
   41af0:	18800015 	stw	r2,0(r3)
}
   41af4:	e037883a 	mov	sp,fp
   41af8:	df000017 	ldw	fp,0(sp)
   41afc:	dec00104 	addi	sp,sp,4
   41b00:	f800283a 	ret

00041b04 <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
   41b04:	defffc04 	addi	sp,sp,-16
   41b08:	dfc00315 	stw	ra,12(sp)
   41b0c:	df000215 	stw	fp,8(sp)
   41b10:	df000204 	addi	fp,sp,8
   41b14:	e13fff15 	stw	r4,-4(fp)
	write(3, 255, 255, 0);
   41b18:	d8000015 	stw	zero,0(sp)
   41b1c:	e13fff17 	ldw	r4,-4(fp)
   41b20:	014000c4 	movi	r5,3
   41b24:	01803fc4 	movi	r6,255
   41b28:	01c03fc4 	movi	r7,255
   41b2c:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
}
   41b30:	e037883a 	mov	sp,fp
   41b34:	dfc00117 	ldw	ra,4(sp)
   41b38:	df000017 	ldw	fp,0(sp)
   41b3c:	dec00204 	addi	sp,sp,8
   41b40:	f800283a 	ret

00041b44 <_ZN6Motors21write_to_next_collumnEv>:

void Motors::write_to_next_collumn() {
   41b44:	defffc04 	addi	sp,sp,-16
   41b48:	dfc00315 	stw	ra,12(sp)
   41b4c:	df000215 	stw	fp,8(sp)
   41b50:	df000204 	addi	fp,sp,8
   41b54:	e13fff15 	stw	r4,-4(fp)
	write(4, 255, 255, 0);
   41b58:	d8000015 	stw	zero,0(sp)
   41b5c:	e13fff17 	ldw	r4,-4(fp)
   41b60:	01400104 	movi	r5,4
   41b64:	01803fc4 	movi	r6,255
   41b68:	01c03fc4 	movi	r7,255
   41b6c:	00419800 	call	41980 <_ZN6Motors5writeEjjjj>
}
   41b70:	e037883a 	mov	sp,fp
   41b74:	dfc00117 	ldw	ra,4(sp)
   41b78:	df000017 	ldw	fp,0(sp)
   41b7c:	dec00204 	addi	sp,sp,8
   41b80:	f800283a 	ret

00041b84 <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
   41b84:	defffe04 	addi	sp,sp,-8
   41b88:	df000115 	stw	fp,4(sp)
   41b8c:	df000104 	addi	fp,sp,4
   41b90:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   41b94:	e0ffff17 	ldw	r3,-4(fp)
   41b98:	00881a04 	movi	r2,8296
   41b9c:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   41ba0:	e0ffff17 	ldw	r3,-4(fp)
   41ba4:	00881b04 	movi	r2,8300
   41ba8:	18800115 	stw	r2,4(r3)
}
   41bac:	e037883a 	mov	sp,fp
   41bb0:	df000017 	ldw	fp,0(sp)
   41bb4:	dec00104 	addi	sp,sp,4
   41bb8:	f800283a 	ret

00041bbc <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumn() {
	write(4, 255, 255, 0);
}

/* private */
Motors::Motors() {
   41bbc:	defffe04 	addi	sp,sp,-8
   41bc0:	df000115 	stw	fp,4(sp)
   41bc4:	df000104 	addi	fp,sp,4
   41bc8:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   41bcc:	e0ffff17 	ldw	r3,-4(fp)
   41bd0:	00881a04 	movi	r2,8296
   41bd4:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   41bd8:	e0ffff17 	ldw	r3,-4(fp)
   41bdc:	00881b04 	movi	r2,8300
   41be0:	18800115 	stw	r2,4(r3)
}
   41be4:	e037883a 	mov	sp,fp
   41be8:	df000017 	ldw	fp,0(sp)
   41bec:	dec00104 	addi	sp,sp,4
   41bf0:	f800283a 	ret

00041bf4 <_ZN6Motors4readEv>:

unsigned int Motors::read() {
   41bf4:	defffe04 	addi	sp,sp,-8
   41bf8:	df000115 	stw	fp,4(sp)
   41bfc:	df000104 	addi	fp,sp,4
   41c00:	e13fff15 	stw	r4,-4(fp)
	return *status;
   41c04:	e0bfff17 	ldw	r2,-4(fp)
   41c08:	10800117 	ldw	r2,4(r2)
   41c0c:	10800017 	ldw	r2,0(r2)
}
   41c10:	e037883a 	mov	sp,fp
   41c14:	df000017 	ldw	fp,0(sp)
   41c18:	dec00104 	addi	sp,sp,4
   41c1c:	f800283a 	ret

00041c20 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
   41c20:	defffd04 	addi	sp,sp,-12
   41c24:	dfc00215 	stw	ra,8(sp)
   41c28:	df000115 	stw	fp,4(sp)
   41c2c:	dc000015 	stw	r16,0(sp)
   41c30:	d839883a 	mov	fp,sp
	if (motors == 0)
   41c34:	d0a15b17 	ldw	r2,-31380(gp)
   41c38:	1004c03a 	cmpne	r2,r2,zero
   41c3c:	1000061e 	bne	r2,zero,41c58 <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
   41c40:	01000204 	movi	r4,8
   41c44:	00430400 	call	43040 <_Znwm>
   41c48:	1021883a 	mov	r16,r2
   41c4c:	8009883a 	mov	r4,r16
   41c50:	0041bbc0 	call	41bbc <_ZN6MotorsC1Ev>
   41c54:	d4215b15 	stw	r16,-31380(gp)
	return motors;
   41c58:	d0a15b17 	ldw	r2,-31380(gp)
}
   41c5c:	e037883a 	mov	sp,fp
   41c60:	dfc00217 	ldw	ra,8(sp)
   41c64:	df000117 	ldw	fp,4(sp)
   41c68:	dc000017 	ldw	r16,0(sp)
   41c6c:	dec00304 	addi	sp,sp,12
   41c70:	f800283a 	ret

00041c74 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41c74:	defffe04 	addi	sp,sp,-8
   41c78:	df000115 	stw	fp,4(sp)
   41c7c:	df000104 	addi	fp,sp,4
   41c80:	e13fff15 	stw	r4,-4(fp)
}
   41c84:	e037883a 	mov	sp,fp
   41c88:	df000017 	ldw	fp,0(sp)
   41c8c:	dec00104 	addi	sp,sp,4
   41c90:	f800283a 	ret

00041c94 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41c94:	defffe04 	addi	sp,sp,-8
   41c98:	df000115 	stw	fp,4(sp)
   41c9c:	df000104 	addi	fp,sp,4
   41ca0:	e13fff15 	stw	r4,-4(fp)
}
   41ca4:	e037883a 	mov	sp,fp
   41ca8:	df000017 	ldw	fp,0(sp)
   41cac:	dec00104 	addi	sp,sp,4
   41cb0:	f800283a 	ret

00041cb4 <_ZN4WiFi10stopServerEv>:
}




void WiFi::stopServer() {
   41cb4:	defff804 	addi	sp,sp,-32
   41cb8:	df000715 	stw	fp,28(sp)
   41cbc:	df000704 	addi	fp,sp,28
   41cc0:	e13fff15 	stw	r4,-4(fp)
	char stop[] = "AT+CIPSERVER=0";
   41cc4:	00c00134 	movhi	r3,4
   41cc8:	18d7a504 	addi	r3,r3,24212
   41ccc:	18800017 	ldw	r2,0(r3)
   41cd0:	e0bff915 	stw	r2,-28(fp)
   41cd4:	18800117 	ldw	r2,4(r3)
   41cd8:	e0bffa15 	stw	r2,-24(fp)
   41cdc:	18800217 	ldw	r2,8(r3)
   41ce0:	e0bffb15 	stw	r2,-20(fp)
   41ce4:	1880030b 	ldhu	r2,12(r3)
   41ce8:	e0bffc0d 	sth	r2,-16(fp)
   41cec:	18800383 	ldbu	r2,14(r3)
   41cf0:	e0bffc85 	stb	r2,-14(fp)
	char rst[] = "AT+RST";
   41cf4:	00c00134 	movhi	r3,4
   41cf8:	18d7a904 	addi	r3,r3,24228
   41cfc:	18800003 	ldbu	r2,0(r3)
   41d00:	e0bffcc5 	stb	r2,-13(fp)
   41d04:	18800043 	ldbu	r2,1(r3)
   41d08:	e0bffd05 	stb	r2,-12(fp)
   41d0c:	18800083 	ldbu	r2,2(r3)
   41d10:	e0bffd45 	stb	r2,-11(fp)
   41d14:	188000c3 	ldbu	r2,3(r3)
   41d18:	e0bffd85 	stb	r2,-10(fp)
   41d1c:	18800103 	ldbu	r2,4(r3)
   41d20:	e0bffdc5 	stb	r2,-9(fp)
   41d24:	18800143 	ldbu	r2,5(r3)
   41d28:	e0bffe05 	stb	r2,-8(fp)
   41d2c:	18800183 	ldbu	r2,6(r3)
   41d30:	e0bffe45 	stb	r2,-7(fp)
	//to do
}
   41d34:	e037883a 	mov	sp,fp
   41d38:	df000017 	ldw	fp,0(sp)
   41d3c:	dec00104 	addi	sp,sp,4
   41d40:	f800283a 	ret

00041d44 <_ZN4WiFiC2Ev>:

	}
}

/* private */
WiFi::WiFi() {
   41d44:	defffe04 	addi	sp,sp,-8
   41d48:	df000115 	stw	fp,4(sp)
   41d4c:	df000104 	addi	fp,sp,4
   41d50:	e13fff15 	stw	r4,-4(fp)
}
   41d54:	e037883a 	mov	sp,fp
   41d58:	df000017 	ldw	fp,0(sp)
   41d5c:	dec00104 	addi	sp,sp,4
   41d60:	f800283a 	ret

00041d64 <_ZN4WiFiC1Ev>:

	}
}

/* private */
WiFi::WiFi() {
   41d64:	defffe04 	addi	sp,sp,-8
   41d68:	df000115 	stw	fp,4(sp)
   41d6c:	df000104 	addi	fp,sp,4
   41d70:	e13fff15 	stw	r4,-4(fp)
}
   41d74:	e037883a 	mov	sp,fp
   41d78:	df000017 	ldw	fp,0(sp)
   41d7c:	dec00104 	addi	sp,sp,4
   41d80:	f800283a 	ret

00041d84 <_ZN4WiFi18waitForStatusReadyEj>:
	//re-enable interrupts
	//IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));

}

void WiFi::waitForStatusReady(unsigned int mask){
   41d84:	defffc04 	addi	sp,sp,-16
   41d88:	df000315 	stw	fp,12(sp)
   41d8c:	df000304 	addi	fp,sp,12
   41d90:	e13ffe15 	stw	r4,-8(fp)
   41d94:	e17fff15 	stw	r5,-4(fp)
	char status;
	do{
		status = IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE);
   41d98:	00841204 	movi	r2,4168
   41d9c:	10800037 	ldwio	r2,0(r2)
   41da0:	e0bffd05 	stb	r2,-12(fp)
		status = status & mask;
   41da4:	e0bfff17 	ldw	r2,-4(fp)
   41da8:	1007883a 	mov	r3,r2
   41dac:	e0bffd03 	ldbu	r2,-12(fp)
   41db0:	1884703a 	and	r2,r3,r2
   41db4:	e0bffd05 	stb	r2,-12(fp)

}

void WiFi::waitForStatusReady(unsigned int mask){
	char status;
	do{
   41db8:	e0bffd07 	ldb	r2,-12(fp)
   41dbc:	1005003a 	cmpeq	r2,r2,zero
   41dc0:	103ff51e 	bne	r2,zero,41d98 <_ZN4WiFi18waitForStatusReadyEj+0x14>
		status = IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE);
		status = status & mask;
	}while(status==0x00);

}
   41dc4:	e037883a 	mov	sp,fp
   41dc8:	df000017 	ldw	fp,0(sp)
   41dcc:	dec00104 	addi	sp,sp,4
   41dd0:	f800283a 	ret

00041dd4 <_ZN4WiFi8readUARTEPcPi>:
	char rst[] = "AT+RST";
	//to do
}

//Função chamada para ler a uart
void WiFi::readUART(char *data, int *size){
   41dd4:	defff904 	addi	sp,sp,-28
   41dd8:	dfc00615 	stw	ra,24(sp)
   41ddc:	df000515 	stw	fp,20(sp)
   41de0:	df000504 	addi	fp,sp,20
   41de4:	e13ffd15 	stw	r4,-12(fp)
   41de8:	e17ffe15 	stw	r5,-8(fp)
   41dec:	e1bfff15 	stw	r6,-4(fp)
	char ch;
	int i = 0;
   41df0:	e03ffb15 	stw	zero,-20(fp)
	do{
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41df4:	e13ffd17 	ldw	r4,-12(fp)
   41df8:	01402004 	movi	r5,128
   41dfc:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41e00:	00841004 	movi	r2,4160
   41e04:	10800037 	ldwio	r2,0(r2)
   41e08:	e0bffc05 	stb	r2,-16(fp)

//Função chamada para ler a uart
void WiFi::readUART(char *data, int *size){
	char ch;
	int i = 0;
	do{
   41e0c:	e0bffc07 	ldb	r2,-16(fp)
   41e10:	108002a0 	cmpeqi	r2,r2,10
   41e14:	1000031e 	bne	r2,zero,41e24 <_ZN4WiFi8readUARTEPcPi+0x50>
   41e18:	e0bffc07 	ldb	r2,-16(fp)
   41e1c:	10800e98 	cmpnei	r2,r2,58
   41e20:	103ff41e 	bne	r2,zero,41df4 <_ZN4WiFi8readUARTEPcPi+0x20>
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
   41e24:	e0bffc07 	ldb	r2,-16(fp)
   41e28:	10800e98 	cmpnei	r2,r2,58
   41e2c:	1000171e 	bne	r2,zero,41e8c <_ZN4WiFi8readUARTEPcPi+0xb8>
		do{
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41e30:	e13ffd17 	ldw	r4,-12(fp)
   41e34:	01402004 	movi	r5,128
   41e38:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41e3c:	00841004 	movi	r2,4160
   41e40:	10800037 	ldwio	r2,0(r2)
   41e44:	e0bffc05 	stb	r2,-16(fp)
			*data=ch;
   41e48:	e0fffe17 	ldw	r3,-8(fp)
   41e4c:	e0bffc03 	ldbu	r2,-16(fp)
   41e50:	18800005 	stb	r2,0(r3)
			data++;
   41e54:	e0bffe17 	ldw	r2,-8(fp)
   41e58:	10800044 	addi	r2,r2,1
   41e5c:	e0bffe15 	stw	r2,-8(fp)
			i++;
   41e60:	e0bffb17 	ldw	r2,-20(fp)
   41e64:	10800044 	addi	r2,r2,1
   41e68:	e0bffb15 	stw	r2,-20(fp)
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
		do{
   41e6c:	e0bffc07 	ldb	r2,-16(fp)
   41e70:	10800298 	cmpnei	r2,r2,10
   41e74:	103fee1e 	bne	r2,zero,41e30 <_ZN4WiFi8readUARTEPcPi+0x5c>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
			*data=ch;
			data++;
			i++;
		}while(ch != '\n');
		*size = i-2;
   41e78:	e0bffb17 	ldw	r2,-20(fp)
   41e7c:	10ffff84 	addi	r3,r2,-2
   41e80:	e0bfff17 	ldw	r2,-4(fp)
   41e84:	10c00015 	stw	r3,0(r2)
   41e88:	00000406 	br	41e9c <_ZN4WiFi8readUARTEPcPi+0xc8>
	}
	else{
		*data = 0;
   41e8c:	e0bffe17 	ldw	r2,-8(fp)
   41e90:	10000005 	stb	zero,0(r2)
		*size = 0;
   41e94:	e0bfff17 	ldw	r2,-4(fp)
   41e98:	10000015 	stw	zero,0(r2)
	}
}
   41e9c:	e037883a 	mov	sp,fp
   41ea0:	dfc00117 	ldw	ra,4(sp)
   41ea4:	df000017 	ldw	fp,0(sp)
   41ea8:	dec00204 	addi	sp,sp,8
   41eac:	f800283a 	ret

00041eb0 <_ZN4WiFi12writeCommandEPc>:
/* private */
WiFi::WiFi() {
}
//Função usada para enviar os comandos para o módulo
//Envia os caractéres de final de comando (\r e \n) automaticamente
volatile void WiFi::writeCommand(char message[]){
   41eb0:	defffa04 	addi	sp,sp,-24
   41eb4:	dfc00515 	stw	ra,20(sp)
   41eb8:	df000415 	stw	fp,16(sp)
   41ebc:	df000404 	addi	fp,sp,16
   41ec0:	e13ffe15 	stw	r4,-8(fp)
   41ec4:	e17fff15 	stw	r5,-4(fp)
	int i=0;
   41ec8:	e03ffd15 	stw	zero,-12(fp)
	char M=message[i];
   41ecc:	e0bffd17 	ldw	r2,-12(fp)
   41ed0:	1007883a 	mov	r3,r2
   41ed4:	e0bfff17 	ldw	r2,-4(fp)
   41ed8:	1885883a 	add	r2,r3,r2
   41edc:	10800003 	ldbu	r2,0(r2)
   41ee0:	e0bffc05 	stb	r2,-16(fp)
	//disable interrupts
	//IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   41ee4:	00000f06 	br	41f24 <_ZN4WiFi12writeCommandEPc+0x74>
		//Envia todos os caractéres do comando, até encontrar '\0'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41ee8:	e13ffe17 	ldw	r4,-8(fp)
   41eec:	01401004 	movi	r5,64
   41ef0:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,M);
   41ef4:	e0fffc07 	ldb	r3,-16(fp)
   41ef8:	00841104 	movi	r2,4164
   41efc:	10c00035 	stwio	r3,0(r2)
		i=i+1;
   41f00:	e0bffd17 	ldw	r2,-12(fp)
   41f04:	10800044 	addi	r2,r2,1
   41f08:	e0bffd15 	stw	r2,-12(fp)
		M=message[i];
   41f0c:	e0bffd17 	ldw	r2,-12(fp)
   41f10:	1007883a 	mov	r3,r2
   41f14:	e0bfff17 	ldw	r2,-4(fp)
   41f18:	1885883a 	add	r2,r3,r2
   41f1c:	10800003 	ldbu	r2,0(r2)
   41f20:	e0bffc05 	stb	r2,-16(fp)
	char M=message[i];
	//disable interrupts
	//IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   41f24:	e0bffc07 	ldb	r2,-16(fp)
   41f28:	1004c03a 	cmpne	r2,r2,zero
   41f2c:	103fee1e 	bne	r2,zero,41ee8 <_ZN4WiFi12writeCommandEPc+0x38>
	}

	//Send end of package characters
	//Padrão do esp8266
		//Send '\r'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41f30:	e13ffe17 	ldw	r4,-8(fp)
   41f34:	01401004 	movi	r5,64
   41f38:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\r');
   41f3c:	00c41104 	movi	r3,4164
   41f40:	00800344 	movi	r2,13
   41f44:	18800035 	stwio	r2,0(r3)
		//Send '\n'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41f48:	e13ffe17 	ldw	r4,-8(fp)
   41f4c:	01401004 	movi	r5,64
   41f50:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\n');
   41f54:	00c41104 	movi	r3,4164
   41f58:	00800284 	movi	r2,10
   41f5c:	18800035 	stwio	r2,0(r3)

	//re-enable interrupts
	//IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));

}
   41f60:	e037883a 	mov	sp,fp
   41f64:	dfc00117 	ldw	ra,4(sp)
   41f68:	df000017 	ldw	fp,0(sp)
   41f6c:	dec00204 	addi	sp,sp,8
   41f70:	f800283a 	ret

00041f74 <_ZN4WiFi9readUART2Ev>:
	}
}


//Funcao chamada para verificar resposta do módulo aos comandos
void WiFi::readUART2(){
   41f74:	defffc04 	addi	sp,sp,-16
   41f78:	dfc00315 	stw	ra,12(sp)
   41f7c:	df000215 	stw	fp,8(sp)
   41f80:	df000204 	addi	fp,sp,8
   41f84:	e13fff15 	stw	r4,-4(fp)
	char ch;
	do{
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41f88:	e13fff17 	ldw	r4,-4(fp)
   41f8c:	01402004 	movi	r5,128
   41f90:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41f94:	00841004 	movi	r2,4160
   41f98:	10800037 	ldwio	r2,0(r2)
   41f9c:	e0bffe05 	stb	r2,-8(fp)
		alt_putchar(ch);
   41fa0:	e13ffe07 	ldb	r4,-8(fp)
   41fa4:	00454fc0 	call	454fc <alt_putchar>


//Funcao chamada para verificar resposta do módulo aos comandos
void WiFi::readUART2(){
	char ch;
	do{
   41fa8:	e0bffe07 	ldb	r2,-8(fp)
   41fac:	108002a0 	cmpeqi	r2,r2,10
   41fb0:	1000031e 	bne	r2,zero,41fc0 <_ZN4WiFi9readUART2Ev+0x4c>
   41fb4:	e0bffe07 	ldb	r2,-8(fp)
   41fb8:	10800e98 	cmpnei	r2,r2,58
   41fbc:	103ff21e 	bne	r2,zero,41f88 <_ZN4WiFi9readUART2Ev+0x14>
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
		alt_putchar(ch);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
   41fc0:	e0bffe07 	ldb	r2,-8(fp)
   41fc4:	10800e98 	cmpnei	r2,r2,58
   41fc8:	10000f1e 	bne	r2,zero,42008 <_ZN4WiFi9readUART2Ev+0x94>
		alt_putchar('\n');
   41fcc:	01000284 	movi	r4,10
   41fd0:	00454fc0 	call	454fc <alt_putchar>
		do{
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41fd4:	e13fff17 	ldw	r4,-4(fp)
   41fd8:	01402004 	movi	r5,128
   41fdc:	0041d840 	call	41d84 <_ZN4WiFi18waitForStatusReadyEj>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41fe0:	00841004 	movi	r2,4160
   41fe4:	10800037 	ldwio	r2,0(r2)
   41fe8:	e0bffe05 	stb	r2,-8(fp)
			alt_putchar(ch);
   41fec:	e13ffe07 	ldb	r4,-8(fp)
   41ff0:	00454fc0 	call	454fc <alt_putchar>
		alt_putchar(ch);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
		alt_putchar('\n');
		do{
   41ff4:	e0bffe07 	ldb	r2,-8(fp)
   41ff8:	10800298 	cmpnei	r2,r2,10
   41ffc:	103ff51e 	bne	r2,zero,41fd4 <_ZN4WiFi9readUART2Ev+0x60>
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
			alt_putchar(ch);

		}while(ch != '\n');
		alt_putchar('\n');
   42000:	01000284 	movi	r4,10
   42004:	00454fc0 	call	454fc <alt_putchar>

	}
}
   42008:	e037883a 	mov	sp,fp
   4200c:	dfc00117 	ldw	ra,4(sp)
   42010:	df000017 	ldw	fp,0(sp)
   42014:	dec00204 	addi	sp,sp,8
   42018:	f800283a 	ret

0004201c <_ZN4WiFi6configEPcS0_>:
	if (wifi == 0)
		wifi = new WiFi();
	return wifi;
}

void WiFi::config(char* name, char* password) {
   4201c:	defffb04 	addi	sp,sp,-20
   42020:	dfc00415 	stw	ra,16(sp)
   42024:	df000315 	stw	fp,12(sp)
   42028:	df000304 	addi	fp,sp,12
   4202c:	e13ffd15 	stw	r4,-12(fp)
   42030:	e17ffe15 	stw	r5,-8(fp)
   42034:	e1bfff15 	stw	r6,-4(fp)
	usleep(1000000);
   42038:	010003f4 	movhi	r4,15
   4203c:	21109004 	addi	r4,r4,16960
   42040:	004562c0 	call	4562c <usleep>

	//Wifi mode - mode 2 = AP mode (host)
	writeCommand("AT+CWMODE=2");
   42044:	e13ffd17 	ldw	r4,-12(fp)
   42048:	01400134 	movhi	r5,4
   4204c:	2957ab04 	addi	r5,r5,24236
   42050:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   42054:	e13ffd17 	ldw	r4,-12(fp)
   42058:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('0');
   4205c:	01000c04 	movi	r4,48
   42060:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   42064:	010003f4 	movhi	r4,15
   42068:	21109004 	addi	r4,r4,16960
   4206c:	004562c0 	call	4562c <usleep>

	//Set multiple connection or not - mode 1 = multiple conn. enable
	writeCommand("AT+CIPMUX=1");
   42070:	e13ffd17 	ldw	r4,-12(fp)
   42074:	01400134 	movhi	r5,4
   42078:	2957ae04 	addi	r5,r5,24248
   4207c:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   42080:	e13ffd17 	ldw	r4,-12(fp)
   42084:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('1');
   42088:	01000c44 	movi	r4,49
   4208c:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   42090:	010003f4 	movhi	r4,15
   42094:	21109004 	addi	r4,r4,16960
   42098:	004562c0 	call	4562c <usleep>
	//Set IP address of ESP8266 softAP
	writeCommand("AT+CIPAP=\"192.168.4.1\"");
   4209c:	e13ffd17 	ldw	r4,-12(fp)
   420a0:	01400134 	movhi	r5,4
   420a4:	2957b104 	addi	r5,r5,24260
   420a8:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   420ac:	e13ffd17 	ldw	r4,-12(fp)
   420b0:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('2');
   420b4:	01000c84 	movi	r4,50
   420b8:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   420bc:	010003f4 	movhi	r4,15
   420c0:	21109004 	addi	r4,r4,16960
   420c4:	004562c0 	call	4562c <usleep>
	//Generic configuration - ssid, pwd, ch, ecn
	writeCommand("AT+CWSAP=\"ColeteWifi\",\"123456789\",5,3");
   420c8:	e13ffd17 	ldw	r4,-12(fp)
   420cc:	01400134 	movhi	r5,4
   420d0:	2957b704 	addi	r5,r5,24284
   420d4:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   420d8:	e13ffd17 	ldw	r4,-12(fp)
   420dc:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('3');
   420e0:	01000cc4 	movi	r4,51
   420e4:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   420e8:	010003f4 	movhi	r4,15
   420ec:	21109004 	addi	r4,r4,16960
   420f0:	004562c0 	call	4562c <usleep>
	//Configure as a server - mode 1 = create server
	//						- port 80 (default 333)
	writeCommand("AT+CIPSERVER=1,80");
   420f4:	e13ffd17 	ldw	r4,-12(fp)
   420f8:	01400134 	movhi	r5,4
   420fc:	2957c104 	addi	r5,r5,24324
   42100:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   42104:	e13ffd17 	ldw	r4,-12(fp)
   42108:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('4');
   4210c:	01000d04 	movi	r4,52
   42110:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   42114:	010003f4 	movhi	r4,15
   42118:	21109004 	addi	r4,r4,16960
   4211c:	004562c0 	call	4562c <usleep>


	//Server timeout, max7200 segundos
	writeCommand("AT+CIPSTO=600");
   42120:	e13ffd17 	ldw	r4,-12(fp)
   42124:	01400134 	movhi	r5,4
   42128:	2957c604 	addi	r5,r5,24344
   4212c:	0041eb00 	call	41eb0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   42130:	e13ffd17 	ldw	r4,-12(fp)
   42134:	0041f740 	call	41f74 <_ZN4WiFi9readUART2Ev>
	alt_putchar('5');
   42138:	01000d44 	movi	r4,53
   4213c:	00454fc0 	call	454fc <alt_putchar>
	usleep(1000000);
   42140:	010003f4 	movhi	r4,15
   42144:	21109004 	addi	r4,r4,16960
   42148:	004562c0 	call	4562c <usleep>


	//----------
	//telnet 192.168.4.1 80
	//para mandar dados para o wifi
}
   4214c:	e037883a 	mov	sp,fp
   42150:	dfc00117 	ldw	ra,4(sp)
   42154:	df000017 	ldw	fp,0(sp)
   42158:	dec00204 	addi	sp,sp,8
   4215c:	f800283a 	ret

00042160 <_ZN4WiFi12getSingletonEv>:

/* public */
WiFi::~WiFi() {
}

WiFi *WiFi::getSingleton() {
   42160:	defffd04 	addi	sp,sp,-12
   42164:	dfc00215 	stw	ra,8(sp)
   42168:	df000115 	stw	fp,4(sp)
   4216c:	dc000015 	stw	r16,0(sp)
   42170:	d839883a 	mov	fp,sp
	if (wifi == 0)
   42174:	d0a15c17 	ldw	r2,-31376(gp)
   42178:	1004c03a 	cmpne	r2,r2,zero
   4217c:	1000061e 	bne	r2,zero,42198 <_ZN4WiFi12getSingletonEv+0x38>
		wifi = new WiFi();
   42180:	01000044 	movi	r4,1
   42184:	00430400 	call	43040 <_Znwm>
   42188:	1021883a 	mov	r16,r2
   4218c:	8009883a 	mov	r4,r16
   42190:	0041d640 	call	41d64 <_ZN4WiFiC1Ev>
   42194:	d4215c15 	stw	r16,-31376(gp)
	return wifi;
   42198:	d0a15c17 	ldw	r2,-31376(gp)
}
   4219c:	e037883a 	mov	sp,fp
   421a0:	dfc00217 	ldw	ra,8(sp)
   421a4:	df000117 	ldw	fp,4(sp)
   421a8:	dc000017 	ldw	r16,0(sp)
   421ac:	dec00304 	addi	sp,sp,12
   421b0:	f800283a 	ret

000421b4 <main>:
#include "system.h"
#include "app.h"

int main()
   421b4:	deffe104 	addi	sp,sp,-124
   421b8:	dfc01e15 	stw	ra,120(sp)
   421bc:	df001d15 	stw	fp,116(sp)
   421c0:	ddc01c15 	stw	r23,112(sp)
   421c4:	dd801b15 	stw	r22,108(sp)
   421c8:	dd401a15 	stw	r21,104(sp)
   421cc:	dd001915 	stw	r20,100(sp)
   421d0:	dcc01815 	stw	r19,96(sp)
   421d4:	dc801715 	stw	r18,92(sp)
   421d8:	dc401615 	stw	r17,88(sp)
   421dc:	dc001515 	stw	r16,84(sp)
   421e0:	df001504 	addi	fp,sp,84
   421e4:	00800134 	movhi	r2,4
   421e8:	108a9104 	addi	r2,r2,10820
   421ec:	e0bff715 	stw	r2,-36(fp)
   421f0:	00800134 	movhi	r2,4
   421f4:	10977b04 	addi	r2,r2,24044
   421f8:	e0bff815 	stw	r2,-32(fp)
   421fc:	e0bff904 	addi	r2,fp,-28
   42200:	e0ffeb04 	addi	r3,fp,-84
   42204:	10c00015 	stw	r3,0(r2)
   42208:	00c00134 	movhi	r3,4
   4220c:	18c89504 	addi	r3,r3,8788
   42210:	10c00115 	stw	r3,4(r2)
   42214:	16c00215 	stw	sp,8(r2)
   42218:	e13ff104 	addi	r4,fp,-60
   4221c:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
{
	App app;
   42220:	00bfffc4 	movi	r2,-1
   42224:	e0bff215 	stw	r2,-56(fp)
   42228:	e13feb04 	addi	r4,fp,-84
   4222c:	00415340 	call	41534 <_ZN3AppC1Ev>

	app.setup();
   42230:	00800044 	movi	r2,1
   42234:	e0bff215 	stw	r2,-56(fp)
   42238:	e13feb04 	addi	r4,fp,-84
   4223c:	00414880 	call	41488 <_ZN3App5setupEv>
	while(1){

		app.run();
   42240:	00800044 	movi	r2,1
   42244:	e0bff215 	stw	r2,-56(fp)
   42248:	e13feb04 	addi	r4,fp,-84
   4224c:	00409a80 	call	409a8 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
   42250:	003ffb06 	br	42240 <main+0x8c>
   42254:	e7001504 	addi	fp,fp,84
   42258:	e0bff317 	ldw	r2,-52(fp)
   4225c:	e0bfff15 	stw	r2,-4(fp)
   42260:	e0ffff17 	ldw	r3,-4(fp)
   42264:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
   42268:	e03ff215 	stw	zero,-56(fp)
   4226c:	e13feb04 	addi	r4,fp,-84
   42270:	00414cc0 	call	414cc <_ZN3AppD1Ev>
   42274:	e0bffe17 	ldw	r2,-8(fp)
   42278:	e0bfff15 	stw	r2,-4(fp)
   4227c:	00bfffc4 	movi	r2,-1
   42280:	e0bff215 	stw	r2,-56(fp)
   42284:	e13fff17 	ldw	r4,-4(fp)
   42288:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>

0004228c <_Znam>:
   4228c:	deffee04 	addi	sp,sp,-72
   42290:	00800134 	movhi	r2,4
   42294:	108a9104 	addi	r2,r2,10820
   42298:	d8800615 	stw	r2,24(sp)
   4229c:	00c00134 	movhi	r3,4
   422a0:	18d77d04 	addi	r3,r3,24052
   422a4:	00800134 	movhi	r2,4
   422a8:	1088c204 	addi	r2,r2,8968
   422ac:	d9000e15 	stw	r4,56(sp)
   422b0:	d809883a 	mov	r4,sp
   422b4:	d8800915 	stw	r2,36(sp)
   422b8:	dfc01115 	stw	ra,68(sp)
   422bc:	df001015 	stw	fp,64(sp)
   422c0:	ddc00f15 	stw	r23,60(sp)
   422c4:	d8c00715 	stw	r3,28(sp)
   422c8:	dec00815 	stw	sp,32(sp)
   422cc:	dec00a15 	stw	sp,40(sp)
   422d0:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   422d4:	00800044 	movi	r2,1
   422d8:	d8800115 	stw	r2,4(sp)
   422dc:	d9000e17 	ldw	r4,56(sp)
   422e0:	00430400 	call	43040 <_Znwm>
   422e4:	d809883a 	mov	r4,sp
   422e8:	d8800d15 	stw	r2,52(sp)
   422ec:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   422f0:	d8800d17 	ldw	r2,52(sp)
   422f4:	dfc01117 	ldw	ra,68(sp)
   422f8:	df001017 	ldw	fp,64(sp)
   422fc:	ddc00f17 	ldw	r23,60(sp)
   42300:	dec01204 	addi	sp,sp,72
   42304:	f800283a 	ret
   42308:	d8800317 	ldw	r2,12(sp)
   4230c:	00ffffc4 	movi	r3,-1
   42310:	d9000217 	ldw	r4,8(sp)
   42314:	10c00226 	beq	r2,r3,42320 <_Znam+0x94>
   42318:	d8c00115 	stw	r3,4(sp)
   4231c:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   42320:	00bfffc4 	movi	r2,-1
   42324:	d8800115 	stw	r2,4(sp)
   42328:	00428c40 	call	428c4 <__cxa_call_unexpected>

0004232c <_ZdlPv>:
   4232c:	20000126 	beq	r4,zero,42334 <_ZdlPv+0x8>
   42330:	00441d81 	jmpi	441d8 <free>
   42334:	f800283a 	ret

00042338 <_Z12read_uleb128PKhPj>:
   42338:	000d883a 	mov	r6,zero
   4233c:	000f883a 	mov	r7,zero
   42340:	20c00007 	ldb	r3,0(r4)
   42344:	21000044 	addi	r4,r4,1
   42348:	18801fcc 	andi	r2,r3,127
   4234c:	1184983a 	sll	r2,r2,r6
   42350:	318001c4 	addi	r6,r6,7
   42354:	388eb03a 	or	r7,r7,r2
   42358:	183ff916 	blt	r3,zero,42340 <_Z12read_uleb128PKhPj+0x8>
   4235c:	2005883a 	mov	r2,r4
   42360:	29c00015 	stw	r7,0(r5)
   42364:	f800283a 	ret

00042368 <_Z12read_sleb128PKhPi>:
   42368:	000f883a 	mov	r7,zero
   4236c:	0011883a 	mov	r8,zero
   42370:	20c00007 	ldb	r3,0(r4)
   42374:	21000044 	addi	r4,r4,1
   42378:	19803fcc 	andi	r6,r3,255
   4237c:	30801fcc 	andi	r2,r6,127
   42380:	11c4983a 	sll	r2,r2,r7
   42384:	39c001c4 	addi	r7,r7,7
   42388:	4090b03a 	or	r8,r8,r2
   4238c:	183ff816 	blt	r3,zero,42370 <_Z12read_sleb128PKhPi+0x8>
   42390:	008007c4 	movi	r2,31
   42394:	11c00636 	bltu	r2,r7,423b0 <_Z12read_sleb128PKhPi+0x48>
   42398:	3080100c 	andi	r2,r6,64
   4239c:	10000426 	beq	r2,zero,423b0 <_Z12read_sleb128PKhPi+0x48>
   423a0:	00800044 	movi	r2,1
   423a4:	11c4983a 	sll	r2,r2,r7
   423a8:	0085c83a 	sub	r2,zero,r2
   423ac:	4090b03a 	or	r8,r8,r2
   423b0:	2005883a 	mov	r2,r4
   423b4:	2a000015 	stw	r8,0(r5)
   423b8:	f800283a 	ret

000423bc <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   423bc:	28800017 	ldw	r2,0(r5)
   423c0:	defffb04 	addi	sp,sp,-20
   423c4:	30c00017 	ldw	r3,0(r6)
   423c8:	dc400215 	stw	r17,8(sp)
   423cc:	2823883a 	mov	r17,r5
   423d0:	11400217 	ldw	r5,8(r2)
   423d4:	dc800315 	stw	r18,12(sp)
   423d8:	dc000115 	stw	r16,4(sp)
   423dc:	dfc00415 	stw	ra,16(sp)
   423e0:	2021883a 	mov	r16,r4
   423e4:	d8c00015 	stw	r3,0(sp)
   423e8:	8809883a 	mov	r4,r17
   423ec:	3025883a 	mov	r18,r6
   423f0:	283ee83a 	callr	r5
   423f4:	10803fcc 	andi	r2,r2,255
   423f8:	880b883a 	mov	r5,r17
   423fc:	8009883a 	mov	r4,r16
   42400:	d80d883a 	mov	r6,sp
   42404:	01c00044 	movi	r7,1
   42408:	10000326 	beq	r2,zero,42418 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
   4240c:	d8800017 	ldw	r2,0(sp)
   42410:	10c00017 	ldw	r3,0(r2)
   42414:	d8c00015 	stw	r3,0(sp)
   42418:	80800017 	ldw	r2,0(r16)
   4241c:	10c00417 	ldw	r3,16(r2)
   42420:	183ee83a 	callr	r3
   42424:	10803fcc 	andi	r2,r2,255
   42428:	0007883a 	mov	r3,zero
   4242c:	10000326 	beq	r2,zero,4243c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
   42430:	d8800017 	ldw	r2,0(sp)
   42434:	00c00044 	movi	r3,1
   42438:	90800015 	stw	r2,0(r18)
   4243c:	1805883a 	mov	r2,r3
   42440:	dfc00417 	ldw	ra,16(sp)
   42444:	dc800317 	ldw	r18,12(sp)
   42448:	dc400217 	ldw	r17,8(sp)
   4244c:	dc000117 	ldw	r16,4(sp)
   42450:	dec00504 	addi	sp,sp,20
   42454:	f800283a 	ret

00042458 <_Z28read_encoded_value_with_basehjPKhPj>:
   42458:	defff904 	addi	sp,sp,-28
   4245c:	dc400215 	stw	r17,8(sp)
   42460:	00801404 	movi	r2,80
   42464:	24403fcc 	andi	r17,r4,255
   42468:	dd000515 	stw	r20,20(sp)
   4246c:	dcc00415 	stw	r19,16(sp)
   42470:	dc800315 	stw	r18,12(sp)
   42474:	dc000115 	stw	r16,4(sp)
   42478:	dfc00615 	stw	ra,24(sp)
   4247c:	2025883a 	mov	r18,r4
   42480:	2829883a 	mov	r20,r5
   42484:	3021883a 	mov	r16,r6
   42488:	3827883a 	mov	r19,r7
   4248c:	88801826 	beq	r17,r2,424f0 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
   42490:	88c003cc 	andi	r3,r17,15
   42494:	00800304 	movi	r2,12
   42498:	10c0012e 	bgeu	r2,r3,424a0 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
   4249c:	00441c00 	call	441c0 <abort>
   424a0:	18c5883a 	add	r2,r3,r3
   424a4:	1085883a 	add	r2,r2,r2
   424a8:	00c00134 	movhi	r3,4
   424ac:	18c92f04 	addi	r3,r3,9404
   424b0:	10c5883a 	add	r2,r2,r3
   424b4:	11000017 	ldw	r4,0(r2)
   424b8:	2000683a 	jmp	r4
   424bc:	0004252c 	andhi	zero,zero,4244
   424c0:	00042614 	movui	zero,4248
   424c4:	000425c0 	call	425c <__alt_mem_onchip_memory2_0-0x3bda4>
   424c8:	0004252c 	andhi	zero,zero,4244
   424cc:	00042584 	movi	zero,4246
   424d0:	0004249c 	xori	zero,zero,4242
   424d4:	0004249c 	xori	zero,zero,4242
   424d8:	0004249c 	xori	zero,zero,4242
   424dc:	0004249c 	xori	zero,zero,4242
   424e0:	000425fc 	xorhi	zero,zero,4247
   424e4:	000425d8 	cmpnei	zero,zero,4247
   424e8:	0004252c 	andhi	zero,zero,4244
   424ec:	00042584 	movi	zero,4246
   424f0:	308000c4 	addi	r2,r6,3
   424f4:	00ffff04 	movi	r3,-4
   424f8:	10c4703a 	and	r2,r2,r3
   424fc:	11000017 	ldw	r4,0(r2)
   42500:	11400104 	addi	r5,r2,4
   42504:	2805883a 	mov	r2,r5
   42508:	99000015 	stw	r4,0(r19)
   4250c:	dfc00617 	ldw	ra,24(sp)
   42510:	dd000517 	ldw	r20,20(sp)
   42514:	dcc00417 	ldw	r19,16(sp)
   42518:	dc800317 	ldw	r18,12(sp)
   4251c:	dc400217 	ldw	r17,8(sp)
   42520:	dc000117 	ldw	r16,4(sp)
   42524:	dec00704 	addi	sp,sp,28
   42528:	f800283a 	ret
   4252c:	30800043 	ldbu	r2,1(r6)
   42530:	30c00083 	ldbu	r3,2(r6)
   42534:	310000c3 	ldbu	r4,3(r6)
   42538:	31400003 	ldbu	r5,0(r6)
   4253c:	1004923a 	slli	r2,r2,8
   42540:	1806943a 	slli	r3,r3,16
   42544:	2008963a 	slli	r4,r4,24
   42548:	1144b03a 	or	r2,r2,r5
   4254c:	1886b03a 	or	r3,r3,r2
   42550:	20c8b03a 	or	r4,r4,r3
   42554:	31400104 	addi	r5,r6,4
   42558:	203fea26 	beq	r4,zero,42504 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   4255c:	88c01c0c 	andi	r3,r17,112
   42560:	00800404 	movi	r2,16
   42564:	18801426 	beq	r3,r2,425b8 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
   42568:	90803fcc 	andi	r2,r18,255
   4256c:	1080201c 	xori	r2,r2,128
   42570:	10bfe004 	addi	r2,r2,-128
   42574:	2509883a 	add	r4,r4,r20
   42578:	103fe20e 	bge	r2,zero,42504 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   4257c:	21000017 	ldw	r4,0(r4)
   42580:	003fe006 	br	42504 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   42584:	30800043 	ldbu	r2,1(r6)
   42588:	31800083 	ldbu	r6,2(r6)
   4258c:	820000c3 	ldbu	r8,3(r16)
   42590:	1004923a 	slli	r2,r2,8
   42594:	82400003 	ldbu	r9,0(r16)
   42598:	300c943a 	slli	r6,r6,16
   4259c:	4010963a 	slli	r8,r8,24
   425a0:	1244b03a 	or	r2,r2,r9
   425a4:	308cb03a 	or	r6,r6,r2
   425a8:	4184b03a 	or	r2,r8,r6
   425ac:	1009883a 	mov	r4,r2
   425b0:	81400204 	addi	r5,r16,8
   425b4:	003fe806 	br	42558 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   425b8:	8029883a 	mov	r20,r16
   425bc:	003fea06 	br	42568 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
   425c0:	30800043 	ldbu	r2,1(r6)
   425c4:	30c00003 	ldbu	r3,0(r6)
   425c8:	31400084 	addi	r5,r6,2
   425cc:	1004923a 	slli	r2,r2,8
   425d0:	10c8b03a 	or	r4,r2,r3
   425d4:	003fe006 	br	42558 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   425d8:	30800043 	ldbu	r2,1(r6)
   425dc:	30c00003 	ldbu	r3,0(r6)
   425e0:	31400084 	addi	r5,r6,2
   425e4:	1004923a 	slli	r2,r2,8
   425e8:	10c4b03a 	or	r2,r2,r3
   425ec:	113fffcc 	andi	r4,r2,65535
   425f0:	2120001c 	xori	r4,r4,32768
   425f4:	21200004 	addi	r4,r4,-32768
   425f8:	003fd706 	br	42558 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   425fc:	3009883a 	mov	r4,r6
   42600:	d80b883a 	mov	r5,sp
   42604:	00423680 	call	42368 <_Z12read_sleb128PKhPi>
   42608:	d9000017 	ldw	r4,0(sp)
   4260c:	100b883a 	mov	r5,r2
   42610:	003fd106 	br	42558 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   42614:	3009883a 	mov	r4,r6
   42618:	d80b883a 	mov	r5,sp
   4261c:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42620:	d9000017 	ldw	r4,0(sp)
   42624:	100b883a 	mov	r5,r2
   42628:	003fcb06 	br	42558 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0004262c <_Z21base_of_encoded_valuehP15_Unwind_Context>:
   4262c:	deffff04 	addi	sp,sp,-4
   42630:	21003fcc 	andi	r4,r4,255
   42634:	00803fc4 	movi	r2,255
   42638:	dfc00015 	stw	ra,0(sp)
   4263c:	20800c26 	beq	r4,r2,42670 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   42640:	21001c0c 	andi	r4,r4,112
   42644:	00800804 	movi	r2,32
   42648:	20800d26 	beq	r4,r2,42680 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
   4264c:	1100070e 	bge	r2,r4,4266c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
   42650:	00801004 	movi	r2,64
   42654:	20801126 	beq	r4,r2,4269c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
   42658:	00801404 	movi	r2,80
   4265c:	20800426 	beq	r4,r2,42670 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   42660:	00800c04 	movi	r2,48
   42664:	20801126 	beq	r4,r2,426ac <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
   42668:	00441c00 	call	441c0 <abort>
   4266c:	2000081e 	bne	r4,zero,42690 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
   42670:	0005883a 	mov	r2,zero
   42674:	dfc00017 	ldw	ra,0(sp)
   42678:	dec00104 	addi	sp,sp,4
   4267c:	f800283a 	ret
   42680:	2809883a 	mov	r4,r5
   42684:	dfc00017 	ldw	ra,0(sp)
   42688:	dec00104 	addi	sp,sp,4
   4268c:	0043d301 	jmpi	43d30 <_Unwind_GetTextRelBase>
   42690:	00800404 	movi	r2,16
   42694:	20bff626 	beq	r4,r2,42670 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   42698:	00441c00 	call	441c0 <abort>
   4269c:	2809883a 	mov	r4,r5
   426a0:	dfc00017 	ldw	ra,0(sp)
   426a4:	dec00104 	addi	sp,sp,4
   426a8:	0043d181 	jmpi	43d18 <_Unwind_GetRegionStart>
   426ac:	2809883a 	mov	r4,r5
   426b0:	dfc00017 	ldw	ra,0(sp)
   426b4:	dec00104 	addi	sp,sp,4
   426b8:	0043d281 	jmpi	43d28 <_Unwind_GetDataRelBase>

000426bc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   426bc:	defffa04 	addi	sp,sp,-24
   426c0:	dc800415 	stw	r18,16(sp)
   426c4:	dc400315 	stw	r17,12(sp)
   426c8:	dc000215 	stw	r16,8(sp)
   426cc:	dfc00515 	stw	ra,20(sp)
   426d0:	2021883a 	mov	r16,r4
   426d4:	000f883a 	mov	r7,zero
   426d8:	3023883a 	mov	r17,r6
   426dc:	2825883a 	mov	r18,r5
   426e0:	20000226 	beq	r4,zero,426ec <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
   426e4:	0043d180 	call	43d18 <_Unwind_GetRegionStart>
   426e8:	100f883a 	mov	r7,r2
   426ec:	89c00015 	stw	r7,0(r17)
   426f0:	90c00003 	ldbu	r3,0(r18)
   426f4:	800b883a 	mov	r5,r16
   426f8:	00803fc4 	movi	r2,255
   426fc:	1c003fcc 	andi	r16,r3,255
   42700:	91800044 	addi	r6,r18,1
   42704:	8009883a 	mov	r4,r16
   42708:	18802226 	beq	r3,r2,42794 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
   4270c:	d9800115 	stw	r6,4(sp)
   42710:	004262c0 	call	4262c <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42714:	d9800117 	ldw	r6,4(sp)
   42718:	8009883a 	mov	r4,r16
   4271c:	100b883a 	mov	r5,r2
   42720:	89c00104 	addi	r7,r17,4
   42724:	00424580 	call	42458 <_Z28read_encoded_value_with_basehjPKhPj>
   42728:	100d883a 	mov	r6,r2
   4272c:	30800003 	ldbu	r2,0(r6)
   42730:	31c00044 	addi	r7,r6,1
   42734:	00c03fc4 	movi	r3,255
   42738:	d80b883a 	mov	r5,sp
   4273c:	3809883a 	mov	r4,r7
   42740:	88800505 	stb	r2,20(r17)
   42744:	10c01b26 	beq	r2,r3,427b4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
   42748:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   4274c:	100f883a 	mov	r7,r2
   42750:	d8800017 	ldw	r2,0(sp)
   42754:	3885883a 	add	r2,r7,r2
   42758:	88800315 	stw	r2,12(r17)
   4275c:	38800003 	ldbu	r2,0(r7)
   42760:	39000044 	addi	r4,r7,1
   42764:	d80b883a 	mov	r5,sp
   42768:	88800545 	stb	r2,21(r17)
   4276c:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42770:	d8c00017 	ldw	r3,0(sp)
   42774:	10c9883a 	add	r4,r2,r3
   42778:	89000415 	stw	r4,16(r17)
   4277c:	dfc00517 	ldw	ra,20(sp)
   42780:	dc800417 	ldw	r18,16(sp)
   42784:	dc400317 	ldw	r17,12(sp)
   42788:	dc000217 	ldw	r16,8(sp)
   4278c:	dec00604 	addi	sp,sp,24
   42790:	f800283a 	ret
   42794:	89c00115 	stw	r7,4(r17)
   42798:	30800003 	ldbu	r2,0(r6)
   4279c:	31c00044 	addi	r7,r6,1
   427a0:	00c03fc4 	movi	r3,255
   427a4:	d80b883a 	mov	r5,sp
   427a8:	3809883a 	mov	r4,r7
   427ac:	88800505 	stb	r2,20(r17)
   427b0:	10ffe51e 	bne	r2,r3,42748 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
   427b4:	88000315 	stw	zero,12(r17)
   427b8:	003fe806 	br	4275c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

000427bc <_Z15get_ttype_entryP16lsda_header_infoj>:
   427bc:	defffe04 	addi	sp,sp,-8
   427c0:	dfc00115 	stw	ra,4(sp)
   427c4:	21c00503 	ldbu	r7,20(r4)
   427c8:	00803fc4 	movi	r2,255
   427cc:	38801a26 	beq	r7,r2,42838 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
   427d0:	38c001cc 	andi	r3,r7,7
   427d4:	00800084 	movi	r2,2
   427d8:	18801326 	beq	r3,r2,42828 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
   427dc:	10c0050e 	bge	r2,r3,427f4 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
   427e0:	008000c4 	movi	r2,3
   427e4:	18800426 	beq	r3,r2,427f8 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
   427e8:	00800104 	movi	r2,4
   427ec:	18801026 	beq	r3,r2,42830 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
   427f0:	00441c00 	call	441c0 <abort>
   427f4:	183ffe1e 	bne	r3,zero,427f0 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
   427f8:	2945883a 	add	r2,r5,r5
   427fc:	1085883a 	add	r2,r2,r2
   42800:	21800317 	ldw	r6,12(r4)
   42804:	21400217 	ldw	r5,8(r4)
   42808:	3809883a 	mov	r4,r7
   4280c:	308dc83a 	sub	r6,r6,r2
   42810:	d80f883a 	mov	r7,sp
   42814:	00424580 	call	42458 <_Z28read_encoded_value_with_basehjPKhPj>
   42818:	d8800017 	ldw	r2,0(sp)
   4281c:	dfc00117 	ldw	ra,4(sp)
   42820:	dec00204 	addi	sp,sp,8
   42824:	f800283a 	ret
   42828:	2945883a 	add	r2,r5,r5
   4282c:	003ff406 	br	42800 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   42830:	280490fa 	slli	r2,r5,3
   42834:	003ff206 	br	42800 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   42838:	0005883a 	mov	r2,zero
   4283c:	003ff006 	br	42800 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

00042840 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
   42840:	20800317 	ldw	r2,12(r4)
   42844:	defffa04 	addi	sp,sp,-24
   42848:	dc800415 	stw	r18,16(sp)
   4284c:	11c5c83a 	sub	r2,r2,r7
   42850:	dc400315 	stw	r17,12(sp)
   42854:	dc000215 	stw	r16,8(sp)
   42858:	dfc00515 	stw	ra,20(sp)
   4285c:	2023883a 	mov	r17,r4
   42860:	d9800115 	stw	r6,4(sp)
   42864:	2825883a 	mov	r18,r5
   42868:	143fffc4 	addi	r16,r2,-1
   4286c:	8009883a 	mov	r4,r16
   42870:	d80b883a 	mov	r5,sp
   42874:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42878:	1021883a 	mov	r16,r2
   4287c:	d8800017 	ldw	r2,0(sp)
   42880:	8809883a 	mov	r4,r17
   42884:	100b883a 	mov	r5,r2
   42888:	10000826 	beq	r2,zero,428ac <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
   4288c:	00427bc0 	call	427bc <_Z15get_ttype_entryP16lsda_header_infoj>
   42890:	1009883a 	mov	r4,r2
   42894:	900b883a 	mov	r5,r18
   42898:	d9800104 	addi	r6,sp,4
   4289c:	00423bc0 	call	423bc <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   428a0:	10803fcc 	andi	r2,r2,255
   428a4:	103ff126 	beq	r2,zero,4286c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
   428a8:	00800044 	movi	r2,1
   428ac:	dfc00517 	ldw	ra,20(sp)
   428b0:	dc800417 	ldw	r18,16(sp)
   428b4:	dc400317 	ldw	r17,12(sp)
   428b8:	dc000217 	ldw	r16,8(sp)
   428bc:	dec00604 	addi	sp,sp,24
   428c0:	f800283a 	ret

000428c4 <__cxa_call_unexpected>:
   428c4:	deffe204 	addi	sp,sp,-120
   428c8:	00800134 	movhi	r2,4
   428cc:	108a9104 	addi	r2,r2,10820
   428d0:	00c00134 	movhi	r3,4
   428d4:	18d78204 	addi	r3,r3,24072
   428d8:	d8800c15 	stw	r2,48(sp)
   428dc:	d9001815 	stw	r4,96(sp)
   428e0:	00800134 	movhi	r2,4
   428e4:	108a5304 	addi	r2,r2,10572
   428e8:	d9000604 	addi	r4,sp,24
   428ec:	d8c00d15 	stw	r3,52(sp)
   428f0:	dfc01d15 	stw	ra,116(sp)
   428f4:	d8800f15 	stw	r2,60(sp)
   428f8:	df001c15 	stw	fp,112(sp)
   428fc:	ddc01b15 	stw	r23,108(sp)
   42900:	dec00e15 	stw	sp,56(sp)
   42904:	dec01015 	stw	sp,64(sp)
   42908:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   4290c:	d9001817 	ldw	r4,96(sp)
   42910:	00436000 	call	43600 <__cxa_begin_catch>
   42914:	d8801817 	ldw	r2,96(sp)
   42918:	10fff504 	addi	r3,r2,-44
   4291c:	18800917 	ldw	r2,36(r3)
   42920:	19400617 	ldw	r5,24(r3)
   42924:	19000217 	ldw	r4,8(r3)
   42928:	d8800215 	stw	r2,8(sp)
   4292c:	18800817 	ldw	r2,32(r3)
   42930:	18c00317 	ldw	r3,12(r3)
   42934:	d9401615 	stw	r5,88(sp)
   42938:	d8801715 	stw	r2,92(sp)
   4293c:	00800084 	movi	r2,2
   42940:	d8c01515 	stw	r3,84(sp)
   42944:	d8800715 	stw	r2,28(sp)
   42948:	00430180 	call	43018 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   4294c:	d8800717 	ldw	r2,28(sp)
   42950:	d8c00817 	ldw	r3,32(sp)
   42954:	d8801a15 	stw	r2,104(sp)
   42958:	d9401a17 	ldw	r5,104(sp)
   4295c:	00800044 	movi	r2,1
   42960:	d8c01915 	stw	r3,100(sp)
   42964:	28800826 	beq	r5,r2,42988 <__cxa_call_unexpected+0xc4>
   42968:	d8000715 	stw	zero,28(sp)
   4296c:	004355c0 	call	4355c <__cxa_end_catch>
   42970:	d8000715 	stw	zero,28(sp)
   42974:	004355c0 	call	4355c <__cxa_end_catch>
   42978:	d9001917 	ldw	r4,100(sp)
   4297c:	00bfffc4 	movi	r2,-1
   42980:	d8800715 	stw	r2,28(sp)
   42984:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   42988:	d9001917 	ldw	r4,100(sp)
   4298c:	00436000 	call	43600 <__cxa_begin_catch>
   42990:	0042f240 	call	42f24 <__cxa_get_globals_fast>
   42994:	10800017 	ldw	r2,0(r2)
   42998:	d8c01a17 	ldw	r3,104(sp)
   4299c:	0009883a 	mov	r4,zero
   429a0:	11401004 	addi	r5,r2,64
   429a4:	d9401315 	stw	r5,76(sp)
   429a8:	d8801415 	stw	r2,80(sp)
   429ac:	d8c00715 	stw	r3,28(sp)
   429b0:	d9401717 	ldw	r5,92(sp)
   429b4:	d80d883a 	mov	r6,sp
   429b8:	00426bc0 	call	426bc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   429bc:	d8801417 	ldw	r2,80(sp)
   429c0:	d809883a 	mov	r4,sp
   429c4:	d9801317 	ldw	r6,76(sp)
   429c8:	11400017 	ldw	r5,0(r2)
   429cc:	d9c01617 	ldw	r7,88(sp)
   429d0:	00428400 	call	42840 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   429d4:	10803fcc 	andi	r2,r2,255
   429d8:	1000151e 	bne	r2,zero,42a30 <__cxa_call_unexpected+0x16c>
   429dc:	d8c01a17 	ldw	r3,104(sp)
   429e0:	d809883a 	mov	r4,sp
   429e4:	01400134 	movhi	r5,4
   429e8:	2957d904 	addi	r5,r5,24420
   429ec:	d8c00715 	stw	r3,28(sp)
   429f0:	000d883a 	mov	r6,zero
   429f4:	d9c01617 	ldw	r7,88(sp)
   429f8:	00428400 	call	42840 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   429fc:	10803fcc 	andi	r2,r2,255
   42a00:	10000c26 	beq	r2,zero,42a34 <__cxa_call_unexpected+0x170>
   42a04:	01000104 	movi	r4,4
   42a08:	00432b80 	call	432b8 <__cxa_allocate_exception>
   42a0c:	1009883a 	mov	r4,r2
   42a10:	00800134 	movhi	r2,4
   42a14:	1097cc04 	addi	r2,r2,24368
   42a18:	20800015 	stw	r2,0(r4)
   42a1c:	01400134 	movhi	r5,4
   42a20:	2957d904 	addi	r5,r5,24420
   42a24:	01800134 	movhi	r6,4
   42a28:	318c7e04 	addi	r6,r6,12792
   42a2c:	00434600 	call	43460 <__cxa_throw>
   42a30:	00433ec0 	call	433ec <__cxa_rethrow>
   42a34:	d9401a17 	ldw	r5,104(sp)
   42a38:	d9001517 	ldw	r4,84(sp)
   42a3c:	d9400715 	stw	r5,28(sp)
   42a40:	0042f5c0 	call	42f5c <_ZN10__cxxabiv111__terminateEPFvvE>

00042a44 <__gxx_personality_sj0>:
   42a44:	deffd304 	addi	sp,sp,-180
   42a48:	00800134 	movhi	r2,4
   42a4c:	108bb804 	addi	r2,r2,12000
   42a50:	00c00134 	movhi	r3,4
   42a54:	18d78604 	addi	r3,r3,24088
   42a58:	d8801315 	stw	r2,76(sp)
   42a5c:	d9002315 	stw	r4,140(sp)
   42a60:	00800134 	movhi	r2,4
   42a64:	108a9104 	addi	r2,r2,10820
   42a68:	d9000a04 	addi	r4,sp,40
   42a6c:	d8801015 	stw	r2,64(sp)
   42a70:	d8c01115 	stw	r3,68(sp)
   42a74:	dfc02c15 	stw	ra,176(sp)
   42a78:	df002b15 	stw	fp,172(sp)
   42a7c:	ddc02a15 	stw	r23,168(sp)
   42a80:	dec01215 	stw	sp,72(sp)
   42a84:	dec01415 	stw	sp,80(sp)
   42a88:	d9802515 	stw	r6,148(sp)
   42a8c:	d9402415 	stw	r5,144(sp)
   42a90:	d9c02615 	stw	r7,152(sp)
   42a94:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   42a98:	d8c02317 	ldw	r3,140(sp)
   42a9c:	00800044 	movi	r2,1
   42aa0:	18800a26 	beq	r3,r2,42acc <__gxx_personality_sj0+0x88>
   42aa4:	010000c4 	movi	r4,3
   42aa8:	d9002215 	stw	r4,136(sp)
   42aac:	d9000a04 	addi	r4,sp,40
   42ab0:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   42ab4:	d8802217 	ldw	r2,136(sp)
   42ab8:	dfc02c17 	ldw	ra,176(sp)
   42abc:	df002b17 	ldw	fp,172(sp)
   42ac0:	ddc02a17 	ldw	r23,168(sp)
   42ac4:	dec02d04 	addi	sp,sp,180
   42ac8:	f800283a 	ret
   42acc:	d9402d17 	ldw	r5,180(sp)
   42ad0:	d9002517 	ldw	r4,148(sp)
   42ad4:	0007883a 	mov	r3,zero
   42ad8:	28800504 	addi	r2,r5,20
   42adc:	d8800015 	stw	r2,0(sp)
   42ae0:	28bff504 	addi	r2,r5,-44
   42ae4:	d8801a15 	stw	r2,104(sp)
   42ae8:	0090caf4 	movhi	r2,17195
   42aec:	108ac004 	addi	r2,r2,11008
   42af0:	2080ad26 	beq	r4,r2,42da8 <__gxx_personality_sj0+0x364>
   42af4:	d8c02105 	stb	r3,132(sp)
   42af8:	d8c02417 	ldw	r3,144(sp)
   42afc:	00800184 	movi	r2,6
   42b00:	1880281e 	bne	r3,r2,42ba4 <__gxx_personality_sj0+0x160>
   42b04:	d8802103 	ldbu	r2,132(sp)
   42b08:	10002626 	beq	r2,zero,42ba4 <__gxx_personality_sj0+0x160>
   42b0c:	d9001a17 	ldw	r4,104(sp)
   42b10:	d9401a17 	ldw	r5,104(sp)
   42b14:	d8801a17 	ldw	r2,104(sp)
   42b18:	21000917 	ldw	r4,36(r4)
   42b1c:	29400617 	ldw	r5,24(r5)
   42b20:	10800817 	ldw	r2,32(r2)
   42b24:	d9001d15 	stw	r4,116(sp)
   42b28:	d9401b15 	stw	r5,108(sp)
   42b2c:	d8802015 	stw	r2,128(sp)
   42b30:	2000ad1e 	bne	r4,zero,42de8 <__gxx_personality_sj0+0x3a4>
   42b34:	01000044 	movi	r4,1
   42b38:	00800044 	movi	r2,1
   42b3c:	2080e126 	beq	r4,r2,42ec4 <__gxx_personality_sj0+0x480>
   42b40:	d8801b17 	ldw	r2,108(sp)
   42b44:	1000d316 	blt	r2,zero,42e94 <__gxx_personality_sj0+0x450>
   42b48:	d9802d17 	ldw	r6,180(sp)
   42b4c:	d9002e17 	ldw	r4,184(sp)
   42b50:	00bfffc4 	movi	r2,-1
   42b54:	000b883a 	mov	r5,zero
   42b58:	d8800b15 	stw	r2,44(sp)
   42b5c:	0043cc00 	call	43cc0 <_Unwind_SetGR>
   42b60:	d9801b17 	ldw	r6,108(sp)
   42b64:	d9002e17 	ldw	r4,184(sp)
   42b68:	01400044 	movi	r5,1
   42b6c:	0043cc00 	call	43cc0 <_Unwind_SetGR>
   42b70:	d9002e17 	ldw	r4,184(sp)
   42b74:	d9401d17 	ldw	r5,116(sp)
   42b78:	0043cfc0 	call	43cfc <_Unwind_SetIP>
   42b7c:	010001c4 	movi	r4,7
   42b80:	d9002215 	stw	r4,136(sp)
   42b84:	d9000a04 	addi	r4,sp,40
   42b88:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   42b8c:	d8802217 	ldw	r2,136(sp)
   42b90:	dfc02c17 	ldw	ra,176(sp)
   42b94:	df002b17 	ldw	fp,172(sp)
   42b98:	ddc02a17 	ldw	r23,168(sp)
   42b9c:	dec02d04 	addi	sp,sp,180
   42ba0:	f800283a 	ret
   42ba4:	d9002e17 	ldw	r4,184(sp)
   42ba8:	00ffffc4 	movi	r3,-1
   42bac:	d8c00b15 	stw	r3,44(sp)
   42bb0:	0043d0c0 	call	43d0c <_Unwind_GetLanguageSpecificData>
   42bb4:	10007226 	beq	r2,zero,42d80 <__gxx_personality_sj0+0x33c>
   42bb8:	d9002e17 	ldw	r4,184(sp)
   42bbc:	d9800404 	addi	r6,sp,16
   42bc0:	100b883a 	mov	r5,r2
   42bc4:	d8802015 	stw	r2,128(sp)
   42bc8:	00426bc0 	call	426bc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   42bcc:	d9000903 	ldbu	r4,36(sp)
   42bd0:	d9402e17 	ldw	r5,184(sp)
   42bd4:	d8801e15 	stw	r2,120(sp)
   42bd8:	004262c0 	call	4262c <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42bdc:	d9002e17 	ldw	r4,184(sp)
   42be0:	d8800615 	stw	r2,24(sp)
   42be4:	0043cd80 	call	43cd8 <_Unwind_GetIP>
   42be8:	10bfffc4 	addi	r2,r2,-1
   42bec:	d8801c15 	stw	r2,112(sp)
   42bf0:	10006316 	blt	r2,zero,42d80 <__gxx_personality_sj0+0x33c>
   42bf4:	10001b1e 	bne	r2,zero,42c64 <__gxx_personality_sj0+0x220>
   42bf8:	01000044 	movi	r4,1
   42bfc:	d8001f15 	stw	zero,124(sp)
   42c00:	d8001d15 	stw	zero,116(sp)
   42c04:	d8001b15 	stw	zero,108(sp)
   42c08:	d9402417 	ldw	r5,144(sp)
   42c0c:	00c00044 	movi	r3,1
   42c10:	28c4703a 	and	r2,r5,r3
   42c14:	1005003a 	cmpeq	r2,r2,zero
   42c18:	10006a1e 	bne	r2,zero,42dc4 <__gxx_personality_sj0+0x380>
   42c1c:	00800084 	movi	r2,2
   42c20:	20805726 	beq	r4,r2,42d80 <__gxx_personality_sj0+0x33c>
   42c24:	d8802103 	ldbu	r2,132(sp)
   42c28:	10008626 	beq	r2,zero,42e44 <__gxx_personality_sj0+0x400>
   42c2c:	d9001a17 	ldw	r4,104(sp)
   42c30:	d9401d17 	ldw	r5,116(sp)
   42c34:	d8801b17 	ldw	r2,108(sp)
   42c38:	00c00184 	movi	r3,6
   42c3c:	d8c02215 	stw	r3,136(sp)
   42c40:	21400915 	stw	r5,36(r4)
   42c44:	20800615 	stw	r2,24(r4)
   42c48:	d8c01f17 	ldw	r3,124(sp)
   42c4c:	d9402017 	ldw	r5,128(sp)
   42c50:	d8800017 	ldw	r2,0(sp)
   42c54:	20c00715 	stw	r3,28(r4)
   42c58:	21400815 	stw	r5,32(r4)
   42c5c:	20800a15 	stw	r2,40(r4)
   42c60:	003f9206 	br	42aac <__gxx_personality_sj0+0x68>
   42c64:	d9001e17 	ldw	r4,120(sp)
   42c68:	d9400204 	addi	r5,sp,8
   42c6c:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42c70:	d9401c17 	ldw	r5,112(sp)
   42c74:	1009883a 	mov	r4,r2
   42c78:	297fffc4 	addi	r5,r5,-1
   42c7c:	d9401c15 	stw	r5,112(sp)
   42c80:	d9400104 	addi	r5,sp,4
   42c84:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42c88:	d8801e15 	stw	r2,120(sp)
   42c8c:	d8801c17 	ldw	r2,112(sp)
   42c90:	103ff41e 	bne	r2,zero,42c64 <__gxx_personality_sj0+0x220>
   42c94:	d8800217 	ldw	r2,8(sp)
   42c98:	d8c00117 	ldw	r3,4(sp)
   42c9c:	01000044 	movi	r4,1
   42ca0:	1105883a 	add	r2,r2,r4
   42ca4:	d8801d15 	stw	r2,116(sp)
   42ca8:	1800541e 	bne	r3,zero,42dfc <__gxx_personality_sj0+0x3b8>
   42cac:	d8001f15 	stw	zero,124(sp)
   42cb0:	d8c01d17 	ldw	r3,116(sp)
   42cb4:	18003226 	beq	r3,zero,42d80 <__gxx_personality_sj0+0x33c>
   42cb8:	d9001f17 	ldw	r4,124(sp)
   42cbc:	20007226 	beq	r4,zero,42e88 <__gxx_personality_sj0+0x444>
   42cc0:	d9402417 	ldw	r5,144(sp)
   42cc4:	2880020c 	andi	r2,r5,8
   42cc8:	10006a1e 	bne	r2,zero,42e74 <__gxx_personality_sj0+0x430>
   42ccc:	d8802103 	ldbu	r2,132(sp)
   42cd0:	10006826 	beq	r2,zero,42e74 <__gxx_personality_sj0+0x430>
   42cd4:	d8801a17 	ldw	r2,104(sp)
   42cd8:	10800017 	ldw	r2,0(r2)
   42cdc:	d8801915 	stw	r2,100(sp)
   42ce0:	d8c01917 	ldw	r3,100(sp)
   42ce4:	d8001805 	stb	zero,96(sp)
   42ce8:	1807003a 	cmpeq	r3,r3,zero
   42cec:	d8c02715 	stw	r3,156(sp)
   42cf0:	00000706 	br	42d10 <__gxx_personality_sj0+0x2cc>
   42cf4:	01000044 	movi	r4,1
   42cf8:	d9001805 	stb	r4,96(sp)
   42cfc:	d8800217 	ldw	r2,8(sp)
   42d00:	10005e26 	beq	r2,zero,42e7c <__gxx_personality_sj0+0x438>
   42d04:	d8c01717 	ldw	r3,92(sp)
   42d08:	1885883a 	add	r2,r3,r2
   42d0c:	d8801f15 	stw	r2,124(sp)
   42d10:	d9001f17 	ldw	r4,124(sp)
   42d14:	d9400104 	addi	r5,sp,4
   42d18:	00423680 	call	42368 <_Z12read_sleb128PKhPi>
   42d1c:	1009883a 	mov	r4,r2
   42d20:	d9400204 	addi	r5,sp,8
   42d24:	d8801715 	stw	r2,92(sp)
   42d28:	00423680 	call	42368 <_Z12read_sleb128PKhPi>
   42d2c:	d8800117 	ldw	r2,4(sp)
   42d30:	103ff026 	beq	r2,zero,42cf4 <__gxx_personality_sj0+0x2b0>
   42d34:	0080360e 	bge	zero,r2,42e10 <__gxx_personality_sj0+0x3cc>
   42d38:	017fffc4 	movi	r5,-1
   42d3c:	d9400b15 	stw	r5,44(sp)
   42d40:	d9000404 	addi	r4,sp,16
   42d44:	100b883a 	mov	r5,r2
   42d48:	00427bc0 	call	427bc <_Z15get_ttype_entryP16lsda_header_infoj>
   42d4c:	10000826 	beq	r2,zero,42d70 <__gxx_personality_sj0+0x32c>
   42d50:	d8c02717 	ldw	r3,156(sp)
   42d54:	183fe91e 	bne	r3,zero,42cfc <__gxx_personality_sj0+0x2b8>
   42d58:	d9401917 	ldw	r5,100(sp)
   42d5c:	1009883a 	mov	r4,r2
   42d60:	d80d883a 	mov	r6,sp
   42d64:	00423bc0 	call	423bc <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   42d68:	10803fcc 	andi	r2,r2,255
   42d6c:	103fe326 	beq	r2,zero,42cfc <__gxx_personality_sj0+0x2b8>
   42d70:	d9000117 	ldw	r4,4(sp)
   42d74:	d9001b15 	stw	r4,108(sp)
   42d78:	010000c4 	movi	r4,3
   42d7c:	003fa206 	br	42c08 <__gxx_personality_sj0+0x1c4>
   42d80:	01400204 	movi	r5,8
   42d84:	d9000a04 	addi	r4,sp,40
   42d88:	d9402215 	stw	r5,136(sp)
   42d8c:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   42d90:	d8802217 	ldw	r2,136(sp)
   42d94:	dfc02c17 	ldw	ra,176(sp)
   42d98:	df002b17 	ldw	fp,172(sp)
   42d9c:	ddc02a17 	ldw	r23,168(sp)
   42da0:	dec02d04 	addi	sp,sp,180
   42da4:	f800283a 	ret
   42da8:	d9402617 	ldw	r5,152(sp)
   42dac:	0091d3b4 	movhi	r2,18254
   42db0:	109550c4 	addi	r2,r2,21827
   42db4:	28bf4f1e 	bne	r5,r2,42af4 <__gxx_personality_sj0+0xb0>
   42db8:	d8802317 	ldw	r2,140(sp)
   42dbc:	1007883a 	mov	r3,r2
   42dc0:	003f4c06 	br	42af4 <__gxx_personality_sj0+0xb0>
   42dc4:	d9402417 	ldw	r5,144(sp)
   42dc8:	2880020c 	andi	r2,r5,8
   42dcc:	10000826 	beq	r2,zero,42df0 <__gxx_personality_sj0+0x3ac>
   42dd0:	20c04026 	beq	r4,r3,42ed4 <__gxx_personality_sj0+0x490>
   42dd4:	d8801b17 	ldw	r2,108(sp)
   42dd8:	103f5b0e 	bge	r2,zero,42b48 <__gxx_personality_sj0+0x104>
   42ddc:	00800084 	movi	r2,2
   42de0:	d8800b15 	stw	r2,44(sp)
   42de4:	00430280 	call	43028 <_ZSt10unexpectedv>
   42de8:	010000c4 	movi	r4,3
   42dec:	003f5206 	br	42b38 <__gxx_personality_sj0+0xf4>
   42df0:	d8802103 	ldbu	r2,132(sp)
   42df4:	103f501e 	bne	r2,zero,42b38 <__gxx_personality_sj0+0xf4>
   42df8:	003ff506 	br	42dd0 <__gxx_personality_sj0+0x38c>
   42dfc:	d8800817 	ldw	r2,32(sp)
   42e00:	1885883a 	add	r2,r3,r2
   42e04:	1105c83a 	sub	r2,r2,r4
   42e08:	d8801f15 	stw	r2,124(sp)
   42e0c:	003fa806 	br	42cb0 <__gxx_personality_sj0+0x26c>
   42e10:	d9002717 	ldw	r4,156(sp)
   42e14:	20000e1e 	bne	r4,zero,42e50 <__gxx_personality_sj0+0x40c>
   42e18:	017fffc4 	movi	r5,-1
   42e1c:	d9400b15 	stw	r5,44(sp)
   42e20:	d9800017 	ldw	r6,0(sp)
   42e24:	d9401917 	ldw	r5,100(sp)
   42e28:	100f883a 	mov	r7,r2
   42e2c:	d9000404 	addi	r4,sp,16
   42e30:	00428400 	call	42840 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42e34:	1080005c 	xori	r2,r2,1
   42e38:	10803fcc 	andi	r2,r2,255
   42e3c:	103faf26 	beq	r2,zero,42cfc <__gxx_personality_sj0+0x2b8>
   42e40:	003fcb06 	br	42d70 <__gxx_personality_sj0+0x32c>
   42e44:	00800184 	movi	r2,6
   42e48:	d8802215 	stw	r2,136(sp)
   42e4c:	003f1706 	br	42aac <__gxx_personality_sj0+0x68>
   42e50:	d9000717 	ldw	r4,28(sp)
   42e54:	d9400304 	addi	r5,sp,12
   42e58:	2089c83a 	sub	r4,r4,r2
   42e5c:	213fffc4 	addi	r4,r4,-1
   42e60:	00423380 	call	42338 <_Z12read_uleb128PKhPj>
   42e64:	d8c00317 	ldw	r3,12(sp)
   42e68:	1807003a 	cmpeq	r3,r3,zero
   42e6c:	1805883a 	mov	r2,r3
   42e70:	003ff106 	br	42e38 <__gxx_personality_sj0+0x3f4>
   42e74:	d8001915 	stw	zero,100(sp)
   42e78:	003f9906 	br	42ce0 <__gxx_personality_sj0+0x29c>
   42e7c:	d8801803 	ldbu	r2,96(sp)
   42e80:	1004c03a 	cmpne	r2,r2,zero
   42e84:	103fbe26 	beq	r2,zero,42d80 <__gxx_personality_sj0+0x33c>
   42e88:	01000084 	movi	r4,2
   42e8c:	d8001b15 	stw	zero,108(sp)
   42e90:	003f5d06 	br	42c08 <__gxx_personality_sj0+0x1c4>
   42e94:	d9402017 	ldw	r5,128(sp)
   42e98:	d9002e17 	ldw	r4,184(sp)
   42e9c:	00bfffc4 	movi	r2,-1
   42ea0:	d9800404 	addi	r6,sp,16
   42ea4:	d8800b15 	stw	r2,44(sp)
   42ea8:	00426bc0 	call	426bc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   42eac:	d9000903 	ldbu	r4,36(sp)
   42eb0:	d9402e17 	ldw	r5,184(sp)
   42eb4:	004262c0 	call	4262c <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42eb8:	d8c01a17 	ldw	r3,104(sp)
   42ebc:	18800915 	stw	r2,36(r3)
   42ec0:	003f2106 	br	42b48 <__gxx_personality_sj0+0x104>
   42ec4:	d9002d17 	ldw	r4,180(sp)
   42ec8:	00bfffc4 	movi	r2,-1
   42ecc:	d8800b15 	stw	r2,44(sp)
   42ed0:	00431400 	call	43140 <__cxa_call_terminate>
   42ed4:	00bfffc4 	movi	r2,-1
   42ed8:	d8800b15 	stw	r2,44(sp)
   42edc:	00430000 	call	43000 <_ZSt9terminatev>
   42ee0:	d9000b17 	ldw	r4,44(sp)
   42ee4:	d9400c17 	ldw	r5,48(sp)
   42ee8:	00800044 	movi	r2,1
   42eec:	d9002915 	stw	r4,164(sp)
   42ef0:	d9402815 	stw	r5,160(sp)
   42ef4:	20800626 	beq	r4,r2,42f10 <__gxx_personality_sj0+0x4cc>
   42ef8:	d8000b15 	stw	zero,44(sp)
   42efc:	004355c0 	call	4355c <__cxa_end_catch>
   42f00:	d9002817 	ldw	r4,160(sp)
   42f04:	00bfffc4 	movi	r2,-1
   42f08:	d8800b15 	stw	r2,44(sp)
   42f0c:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   42f10:	d9002817 	ldw	r4,160(sp)
   42f14:	00436000 	call	43600 <__cxa_begin_catch>
   42f18:	d8c02917 	ldw	r3,164(sp)
   42f1c:	d8c00b15 	stw	r3,44(sp)
   42f20:	00430000 	call	43000 <_ZSt9terminatev>

00042f24 <__cxa_get_globals_fast>:
   42f24:	d0a15d04 	addi	r2,gp,-31372
   42f28:	f800283a 	ret

00042f2c <__cxa_get_globals>:
   42f2c:	d0a15d04 	addi	r2,gp,-31372
   42f30:	f800283a 	ret

00042f34 <_ZSt13set_terminatePFvvE>:
   42f34:	00c00134 	movhi	r3,4
   42f38:	18d96404 	addi	r3,r3,26000
   42f3c:	18800017 	ldw	r2,0(r3)
   42f40:	19000015 	stw	r4,0(r3)
   42f44:	f800283a 	ret

00042f48 <_ZSt14set_unexpectedPFvvE>:
   42f48:	00c00134 	movhi	r3,4
   42f4c:	18d96504 	addi	r3,r3,26004
   42f50:	18800017 	ldw	r2,0(r3)
   42f54:	19000015 	stw	r4,0(r3)
   42f58:	f800283a 	ret

00042f5c <_ZN10__cxxabiv111__terminateEPFvvE>:
   42f5c:	deffed04 	addi	sp,sp,-76
   42f60:	00800134 	movhi	r2,4
   42f64:	108a9104 	addi	r2,r2,10820
   42f68:	d8800615 	stw	r2,24(sp)
   42f6c:	00c00134 	movhi	r3,4
   42f70:	18d78a04 	addi	r3,r3,24104
   42f74:	00800134 	movhi	r2,4
   42f78:	108bee04 	addi	r2,r2,12216
   42f7c:	d9000d15 	stw	r4,52(sp)
   42f80:	d809883a 	mov	r4,sp
   42f84:	d8800915 	stw	r2,36(sp)
   42f88:	dfc01215 	stw	ra,72(sp)
   42f8c:	df001115 	stw	fp,68(sp)
   42f90:	ddc01015 	stw	r23,64(sp)
   42f94:	d8c00715 	stw	r3,28(sp)
   42f98:	dec00815 	stw	sp,32(sp)
   42f9c:	dec00a15 	stw	sp,40(sp)
   42fa0:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   42fa4:	00800084 	movi	r2,2
   42fa8:	d8800115 	stw	r2,4(sp)
   42fac:	d8800d17 	ldw	r2,52(sp)
   42fb0:	103ee83a 	callr	r2
   42fb4:	00441c00 	call	441c0 <abort>
   42fb8:	d8800117 	ldw	r2,4(sp)
   42fbc:	d8c00217 	ldw	r3,8(sp)
   42fc0:	d8800f15 	stw	r2,60(sp)
   42fc4:	d8c00e15 	stw	r3,56(sp)
   42fc8:	d8c00f17 	ldw	r3,60(sp)
   42fcc:	00800044 	movi	r2,1
   42fd0:	18800626 	beq	r3,r2,42fec <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
   42fd4:	d8000115 	stw	zero,4(sp)
   42fd8:	004355c0 	call	4355c <__cxa_end_catch>
   42fdc:	d9000e17 	ldw	r4,56(sp)
   42fe0:	00bfffc4 	movi	r2,-1
   42fe4:	d8800115 	stw	r2,4(sp)
   42fe8:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   42fec:	d9000e17 	ldw	r4,56(sp)
   42ff0:	00436000 	call	43600 <__cxa_begin_catch>
   42ff4:	d8c00f17 	ldw	r3,60(sp)
   42ff8:	d8c00115 	stw	r3,4(sp)
   42ffc:	00441c00 	call	441c0 <abort>

00043000 <_ZSt9terminatev>:
   43000:	00800134 	movhi	r2,4
   43004:	10996404 	addi	r2,r2,26000
   43008:	11000017 	ldw	r4,0(r2)
   4300c:	deffff04 	addi	sp,sp,-4
   43010:	dfc00015 	stw	ra,0(sp)
   43014:	0042f5c0 	call	42f5c <_ZN10__cxxabiv111__terminateEPFvvE>

00043018 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   43018:	deffff04 	addi	sp,sp,-4
   4301c:	dfc00015 	stw	ra,0(sp)
   43020:	203ee83a 	callr	r4
   43024:	00430000 	call	43000 <_ZSt9terminatev>

00043028 <_ZSt10unexpectedv>:
   43028:	00800134 	movhi	r2,4
   4302c:	10996504 	addi	r2,r2,26004
   43030:	11000017 	ldw	r4,0(r2)
   43034:	deffff04 	addi	sp,sp,-4
   43038:	dfc00015 	stw	ra,0(sp)
   4303c:	00430180 	call	43018 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00043040 <_Znwm>:
   43040:	deffee04 	addi	sp,sp,-72
   43044:	00800134 	movhi	r2,4
   43048:	108a9104 	addi	r2,r2,10820
   4304c:	d8800615 	stw	r2,24(sp)
   43050:	00c00134 	movhi	r3,4
   43054:	18d78e04 	addi	r3,r3,24120
   43058:	00800134 	movhi	r2,4
   4305c:	108c4704 	addi	r2,r2,12572
   43060:	d9000e15 	stw	r4,56(sp)
   43064:	d809883a 	mov	r4,sp
   43068:	d8800915 	stw	r2,36(sp)
   4306c:	dfc01115 	stw	ra,68(sp)
   43070:	df001015 	stw	fp,64(sp)
   43074:	ddc00f15 	stw	r23,60(sp)
   43078:	d8c00715 	stw	r3,28(sp)
   4307c:	dec00815 	stw	sp,32(sp)
   43080:	dec00a15 	stw	sp,40(sp)
   43084:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   43088:	d8800e17 	ldw	r2,56(sp)
   4308c:	10000a1e 	bne	r2,zero,430b8 <_Znwm+0x78>
   43090:	00800044 	movi	r2,1
   43094:	d8800e15 	stw	r2,56(sp)
   43098:	00000706 	br	430b8 <_Znwm+0x78>
   4309c:	00800134 	movhi	r2,4
   430a0:	109ac004 	addi	r2,r2,27392
   430a4:	10c00017 	ldw	r3,0(r2)
   430a8:	18000f26 	beq	r3,zero,430e8 <_Znwm+0xa8>
   430ac:	00800044 	movi	r2,1
   430b0:	d8800115 	stw	r2,4(sp)
   430b4:	183ee83a 	callr	r3
   430b8:	d9000e17 	ldw	r4,56(sp)
   430bc:	00441ec0 	call	441ec <malloc>
   430c0:	d8800d15 	stw	r2,52(sp)
   430c4:	103ff526 	beq	r2,zero,4309c <_Znwm+0x5c>
   430c8:	d809883a 	mov	r4,sp
   430cc:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   430d0:	d8800d17 	ldw	r2,52(sp)
   430d4:	dfc01117 	ldw	ra,68(sp)
   430d8:	df001017 	ldw	fp,64(sp)
   430dc:	ddc00f17 	ldw	r23,60(sp)
   430e0:	dec01204 	addi	sp,sp,72
   430e4:	f800283a 	ret
   430e8:	01000104 	movi	r4,4
   430ec:	00432b80 	call	432b8 <__cxa_allocate_exception>
   430f0:	1009883a 	mov	r4,r2
   430f4:	00800134 	movhi	r2,4
   430f8:	1097e204 	addi	r2,r2,24456
   430fc:	20800015 	stw	r2,0(r4)
   43100:	00c00044 	movi	r3,1
   43104:	d8c00115 	stw	r3,4(sp)
   43108:	01400134 	movhi	r5,4
   4310c:	2957e904 	addi	r5,r5,24484
   43110:	01800134 	movhi	r6,4
   43114:	318c9604 	addi	r6,r6,12888
   43118:	00434600 	call	43460 <__cxa_throw>
   4311c:	d8800317 	ldw	r2,12(sp)
   43120:	00ffffc4 	movi	r3,-1
   43124:	d9000217 	ldw	r4,8(sp)
   43128:	10c00226 	beq	r2,r3,43134 <_Znwm+0xf4>
   4312c:	d8c00115 	stw	r3,4(sp)
   43130:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   43134:	00bfffc4 	movi	r2,-1
   43138:	d8800115 	stw	r2,4(sp)
   4313c:	00428c40 	call	428c4 <__cxa_call_unexpected>

00043140 <__cxa_call_terminate>:
   43140:	defffe04 	addi	sp,sp,-8
   43144:	dc000015 	stw	r16,0(sp)
   43148:	dfc00115 	stw	ra,4(sp)
   4314c:	2021883a 	mov	r16,r4
   43150:	20000626 	beq	r4,zero,4316c <__cxa_call_terminate+0x2c>
   43154:	00436000 	call	43600 <__cxa_begin_catch>
   43158:	80c00017 	ldw	r3,0(r16)
   4315c:	0090caf4 	movhi	r2,17195
   43160:	108ac004 	addi	r2,r2,11008
   43164:	81000117 	ldw	r4,4(r16)
   43168:	18800126 	beq	r3,r2,43170 <__cxa_call_terminate+0x30>
   4316c:	00430000 	call	43000 <_ZSt9terminatev>
   43170:	0091d3b4 	movhi	r2,18254
   43174:	109550c4 	addi	r2,r2,21827
   43178:	20bffc1e 	bne	r4,r2,4316c <__cxa_call_terminate+0x2c>
   4317c:	813ff817 	ldw	r4,-32(r16)
   43180:	0042f5c0 	call	42f5c <_ZN10__cxxabiv111__terminateEPFvvE>

00043184 <_ZNKSt9exception4whatEv>:
   43184:	20800017 	ldw	r2,0(r4)
   43188:	10ffff17 	ldw	r3,-4(r2)
   4318c:	18800117 	ldw	r2,4(r3)
   43190:	f800283a 	ret

00043194 <_ZNSt9exceptionD0Ev>:
   43194:	00800134 	movhi	r2,4
   43198:	1097d104 	addi	r2,r2,24388
   4319c:	20800015 	stw	r2,0(r4)
   431a0:	004232c1 	jmpi	4232c <_ZdlPv>

000431a4 <_ZNSt9exceptionD1Ev>:
   431a4:	00800134 	movhi	r2,4
   431a8:	1097d104 	addi	r2,r2,24388
   431ac:	20800015 	stw	r2,0(r4)
   431b0:	f800283a 	ret

000431b4 <_ZNSt9exceptionD2Ev>:
   431b4:	00800134 	movhi	r2,4
   431b8:	1097d104 	addi	r2,r2,24388
   431bc:	20800015 	stw	r2,0(r4)
   431c0:	f800283a 	ret

000431c4 <_ZNSt13bad_exceptionD0Ev>:
   431c4:	defffe04 	addi	sp,sp,-8
   431c8:	00800134 	movhi	r2,4
   431cc:	1097cc04 	addi	r2,r2,24368
   431d0:	dc400015 	stw	r17,0(sp)
   431d4:	20800015 	stw	r2,0(r4)
   431d8:	2023883a 	mov	r17,r4
   431dc:	dfc00115 	stw	ra,4(sp)
   431e0:	00431b40 	call	431b4 <_ZNSt9exceptionD2Ev>
   431e4:	8809883a 	mov	r4,r17
   431e8:	dfc00117 	ldw	ra,4(sp)
   431ec:	dc400017 	ldw	r17,0(sp)
   431f0:	dec00204 	addi	sp,sp,8
   431f4:	004232c1 	jmpi	4232c <_ZdlPv>

000431f8 <_ZNSt13bad_exceptionD1Ev>:
   431f8:	00800134 	movhi	r2,4
   431fc:	1097cc04 	addi	r2,r2,24368
   43200:	20800015 	stw	r2,0(r4)
   43204:	00431b41 	jmpi	431b4 <_ZNSt9exceptionD2Ev>

00043208 <_ZNSt13bad_exceptionD2Ev>:
   43208:	00800134 	movhi	r2,4
   4320c:	1097cc04 	addi	r2,r2,24368
   43210:	20800015 	stw	r2,0(r4)
   43214:	00431b41 	jmpi	431b4 <_ZNSt9exceptionD2Ev>

00043218 <_ZSt15set_new_handlerPFvvE>:
   43218:	d0a15f17 	ldw	r2,-31364(gp)
   4321c:	d1215f15 	stw	r4,-31364(gp)
   43220:	f800283a 	ret

00043224 <_ZNSt9bad_allocD0Ev>:
   43224:	defffe04 	addi	sp,sp,-8
   43228:	00800134 	movhi	r2,4
   4322c:	1097e204 	addi	r2,r2,24456
   43230:	dc400015 	stw	r17,0(sp)
   43234:	20800015 	stw	r2,0(r4)
   43238:	2023883a 	mov	r17,r4
   4323c:	dfc00115 	stw	ra,4(sp)
   43240:	00431b40 	call	431b4 <_ZNSt9exceptionD2Ev>
   43244:	8809883a 	mov	r4,r17
   43248:	dfc00117 	ldw	ra,4(sp)
   4324c:	dc400017 	ldw	r17,0(sp)
   43250:	dec00204 	addi	sp,sp,8
   43254:	004232c1 	jmpi	4232c <_ZdlPv>

00043258 <_ZNSt9bad_allocD1Ev>:
   43258:	00800134 	movhi	r2,4
   4325c:	1097e204 	addi	r2,r2,24456
   43260:	20800015 	stw	r2,0(r4)
   43264:	00431b41 	jmpi	431b4 <_ZNSt9exceptionD2Ev>

00043268 <_ZNSt9bad_allocD2Ev>:
   43268:	00800134 	movhi	r2,4
   4326c:	1097e204 	addi	r2,r2,24456
   43270:	20800015 	stw	r2,0(r4)
   43274:	00431b41 	jmpi	431b4 <_ZNSt9exceptionD2Ev>

00043278 <__cxa_free_exception>:
   43278:	2007883a 	mov	r3,r4
   4327c:	00800134 	movhi	r2,4
   43280:	109ad104 	addi	r2,r2,27460
   43284:	213ff004 	addi	r4,r4,-64
   43288:	11420004 	addi	r5,r2,2048
   4328c:	18800336 	bltu	r3,r2,4329c <__cxa_free_exception+0x24>
   43290:	1885c83a 	sub	r2,r3,r2
   43294:	1004d27a 	srli	r2,r2,9
   43298:	19400136 	bltu	r3,r5,432a0 <__cxa_free_exception+0x28>
   4329c:	00441d81 	jmpi	441d8 <free>
   432a0:	00ffff84 	movi	r3,-2
   432a4:	1886183a 	rol	r3,r3,r2
   432a8:	d0a16017 	ldw	r2,-31360(gp)
   432ac:	10c4703a 	and	r2,r2,r3
   432b0:	d0a16015 	stw	r2,-31360(gp)
   432b4:	f800283a 	ret

000432b8 <__cxa_allocate_exception>:
   432b8:	deffed04 	addi	sp,sp,-76
   432bc:	00800134 	movhi	r2,4
   432c0:	108a9104 	addi	r2,r2,10820
   432c4:	21001004 	addi	r4,r4,64
   432c8:	00c00134 	movhi	r3,4
   432cc:	18d79304 	addi	r3,r3,24140
   432d0:	d8800615 	stw	r2,24(sp)
   432d4:	d9000d15 	stw	r4,52(sp)
   432d8:	00800134 	movhi	r2,4
   432dc:	108cf204 	addi	r2,r2,13256
   432e0:	d809883a 	mov	r4,sp
   432e4:	dfc01215 	stw	ra,72(sp)
   432e8:	d8c00715 	stw	r3,28(sp)
   432ec:	d8800915 	stw	r2,36(sp)
   432f0:	df001115 	stw	fp,68(sp)
   432f4:	ddc01015 	stw	r23,64(sp)
   432f8:	dec00815 	stw	sp,32(sp)
   432fc:	dec00a15 	stw	sp,40(sp)
   43300:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   43304:	d9000d17 	ldw	r4,52(sp)
   43308:	00441ec0 	call	441ec <malloc>
   4330c:	d8800e15 	stw	r2,56(sp)
   43310:	1000171e 	bne	r2,zero,43370 <__cxa_allocate_exception+0xb8>
   43314:	d8c00d17 	ldw	r3,52(sp)
   43318:	00808004 	movi	r2,512
   4331c:	d1e16017 	ldw	r7,-31360(gp)
   43320:	10c02636 	bltu	r2,r3,433bc <__cxa_allocate_exception+0x104>
   43324:	3807883a 	mov	r3,r7
   43328:	01400044 	movi	r5,1
   4332c:	1944703a 	and	r2,r3,r5
   43330:	0009883a 	mov	r4,zero
   43334:	01800104 	movi	r6,4
   43338:	10000526 	beq	r2,zero,43350 <__cxa_allocate_exception+0x98>
   4333c:	2149883a 	add	r4,r4,r5
   43340:	21801e26 	beq	r4,r6,433bc <__cxa_allocate_exception+0x104>
   43344:	1806d07a 	srli	r3,r3,1
   43348:	1944703a 	and	r2,r3,r5
   4334c:	103ffb1e 	bne	r2,zero,4333c <__cxa_allocate_exception+0x84>
   43350:	2904983a 	sll	r2,r5,r4
   43354:	2008927a 	slli	r4,r4,9
   43358:	00c00134 	movhi	r3,4
   4335c:	18dad104 	addi	r3,r3,27460
   43360:	3884b03a 	or	r2,r7,r2
   43364:	20c9883a 	add	r4,r4,r3
   43368:	d9000e15 	stw	r4,56(sp)
   4336c:	d0a16015 	stw	r2,-31360(gp)
   43370:	0042f2c0 	call	42f2c <__cxa_get_globals>
   43374:	10c00117 	ldw	r3,4(r2)
   43378:	d9000e17 	ldw	r4,56(sp)
   4337c:	000b883a 	mov	r5,zero
   43380:	18c00044 	addi	r3,r3,1
   43384:	10c00115 	stw	r3,4(r2)
   43388:	01801004 	movi	r6,64
   4338c:	00449400 	call	44940 <memset>
   43390:	d8800e17 	ldw	r2,56(sp)
   43394:	d809883a 	mov	r4,sp
   43398:	10801004 	addi	r2,r2,64
   4339c:	d8800f15 	stw	r2,60(sp)
   433a0:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   433a4:	d8800f17 	ldw	r2,60(sp)
   433a8:	dfc01217 	ldw	ra,72(sp)
   433ac:	df001117 	ldw	fp,68(sp)
   433b0:	ddc01017 	ldw	r23,64(sp)
   433b4:	dec01304 	addi	sp,sp,76
   433b8:	f800283a 	ret
   433bc:	00800044 	movi	r2,1
   433c0:	d8800115 	stw	r2,4(sp)
   433c4:	00430000 	call	43000 <_ZSt9terminatev>
   433c8:	d8800317 	ldw	r2,12(sp)
   433cc:	00ffffc4 	movi	r3,-1
   433d0:	d9000217 	ldw	r4,8(sp)
   433d4:	10c00226 	beq	r2,r3,433e0 <__cxa_allocate_exception+0x128>
   433d8:	d8c00115 	stw	r3,4(sp)
   433dc:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   433e0:	00bfffc4 	movi	r2,-1
   433e4:	d8800115 	stw	r2,4(sp)
   433e8:	00428c40 	call	428c4 <__cxa_call_unexpected>

000433ec <__cxa_rethrow>:
   433ec:	defffe04 	addi	sp,sp,-8
   433f0:	dc400015 	stw	r17,0(sp)
   433f4:	dfc00115 	stw	ra,4(sp)
   433f8:	0042f2c0 	call	42f2c <__cxa_get_globals>
   433fc:	100b883a 	mov	r5,r2
   43400:	10800117 	ldw	r2,4(r2)
   43404:	2c400017 	ldw	r17,0(r5)
   43408:	10800044 	addi	r2,r2,1
   4340c:	28800115 	stw	r2,4(r5)
   43410:	88000b26 	beq	r17,zero,43440 <__cxa_rethrow+0x54>
   43414:	88c00b17 	ldw	r3,44(r17)
   43418:	0090caf4 	movhi	r2,17195
   4341c:	108ac004 	addi	r2,r2,11008
   43420:	89000c17 	ldw	r4,48(r17)
   43424:	18800726 	beq	r3,r2,43444 <__cxa_rethrow+0x58>
   43428:	28000015 	stw	zero,0(r5)
   4342c:	8c400b04 	addi	r17,r17,44
   43430:	8809883a 	mov	r4,r17
   43434:	00441680 	call	44168 <_Unwind_SjLj_Resume_or_Rethrow>
   43438:	8809883a 	mov	r4,r17
   4343c:	00436000 	call	43600 <__cxa_begin_catch>
   43440:	00430000 	call	43000 <_ZSt9terminatev>
   43444:	0091d3b4 	movhi	r2,18254
   43448:	109550c4 	addi	r2,r2,21827
   4344c:	20bff61e 	bne	r4,r2,43428 <__cxa_rethrow+0x3c>
   43450:	88800517 	ldw	r2,20(r17)
   43454:	0085c83a 	sub	r2,zero,r2
   43458:	88800515 	stw	r2,20(r17)
   4345c:	003ff306 	br	4342c <__cxa_rethrow+0x40>

00043460 <__cxa_throw>:
   43460:	00800134 	movhi	r2,4
   43464:	10996504 	addi	r2,r2,26004
   43468:	00c00134 	movhi	r3,4
   4346c:	18d96404 	addi	r3,r3,26000
   43470:	12000017 	ldw	r8,0(r2)
   43474:	19c00017 	ldw	r7,0(r3)
   43478:	defffe04 	addi	sp,sp,-8
   4347c:	213ff004 	addi	r4,r4,-64
   43480:	dfc00115 	stw	ra,4(sp)
   43484:	dc400015 	stw	r17,0(sp)
   43488:	0090caf4 	movhi	r2,17195
   4348c:	108ac004 	addi	r2,r2,11008
   43490:	20800b15 	stw	r2,44(r4)
   43494:	00d1d3b4 	movhi	r3,18254
   43498:	18d550c4 	addi	r3,r3,21827
   4349c:	24400b04 	addi	r17,r4,44
   434a0:	00800134 	movhi	r2,4
   434a4:	108d3504 	addi	r2,r2,13524
   434a8:	21400015 	stw	r5,0(r4)
   434ac:	21800115 	stw	r6,4(r4)
   434b0:	22000215 	stw	r8,8(r4)
   434b4:	21c00315 	stw	r7,12(r4)
   434b8:	20c00c15 	stw	r3,48(r4)
   434bc:	20800d15 	stw	r2,52(r4)
   434c0:	8809883a 	mov	r4,r17
   434c4:	0043fa00 	call	43fa0 <_Unwind_SjLj_RaiseException>
   434c8:	8809883a 	mov	r4,r17
   434cc:	00436000 	call	43600 <__cxa_begin_catch>
   434d0:	00430000 	call	43000 <_ZSt9terminatev>

000434d4 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   434d4:	defffe04 	addi	sp,sp,-8
   434d8:	00800044 	movi	r2,1
   434dc:	dfc00115 	stw	ra,4(sp)
   434e0:	dc000015 	stw	r16,0(sp)
   434e4:	28fff504 	addi	r3,r5,-44
   434e8:	11001036 	bltu	r2,r4,4352c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
   434ec:	18800117 	ldw	r2,4(r3)
   434f0:	10000826 	beq	r2,zero,43514 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
   434f4:	2c000504 	addi	r16,r5,20
   434f8:	8009883a 	mov	r4,r16
   434fc:	103ee83a 	callr	r2
   43500:	8009883a 	mov	r4,r16
   43504:	dfc00117 	ldw	ra,4(sp)
   43508:	dc000017 	ldw	r16,0(sp)
   4350c:	dec00204 	addi	sp,sp,8
   43510:	00432781 	jmpi	43278 <__cxa_free_exception>
   43514:	2c000504 	addi	r16,r5,20
   43518:	8009883a 	mov	r4,r16
   4351c:	dfc00117 	ldw	ra,4(sp)
   43520:	dc000017 	ldw	r16,0(sp)
   43524:	dec00204 	addi	sp,sp,8
   43528:	00432781 	jmpi	43278 <__cxa_free_exception>
   4352c:	19000317 	ldw	r4,12(r3)
   43530:	0042f5c0 	call	42f5c <_ZN10__cxxabiv111__terminateEPFvvE>

00043534 <__cxa_get_exception_ptr>:
   43534:	20bfff17 	ldw	r2,-4(r4)
   43538:	f800283a 	ret

0004353c <_ZSt18uncaught_exceptionv>:
   4353c:	deffff04 	addi	sp,sp,-4
   43540:	dfc00015 	stw	ra,0(sp)
   43544:	0042f2c0 	call	42f2c <__cxa_get_globals>
   43548:	10800117 	ldw	r2,4(r2)
   4354c:	1004c03a 	cmpne	r2,r2,zero
   43550:	dfc00017 	ldw	ra,0(sp)
   43554:	dec00104 	addi	sp,sp,4
   43558:	f800283a 	ret

0004355c <__cxa_end_catch>:
   4355c:	deffff04 	addi	sp,sp,-4
   43560:	dfc00015 	stw	ra,0(sp)
   43564:	0042f240 	call	42f24 <__cxa_get_globals_fast>
   43568:	11000017 	ldw	r4,0(r2)
   4356c:	1007883a 	mov	r3,r2
   43570:	20001326 	beq	r4,zero,435c0 <__cxa_end_catch+0x64>
   43574:	21400b17 	ldw	r5,44(r4)
   43578:	0090caf4 	movhi	r2,17195
   4357c:	108ac004 	addi	r2,r2,11008
   43580:	21800c17 	ldw	r6,48(r4)
   43584:	28800526 	beq	r5,r2,4359c <__cxa_end_catch+0x40>
   43588:	21000b04 	addi	r4,r4,44
   4358c:	18000015 	stw	zero,0(r3)
   43590:	dfc00017 	ldw	ra,0(sp)
   43594:	dec00104 	addi	sp,sp,4
   43598:	0043e381 	jmpi	43e38 <_Unwind_DeleteException>
   4359c:	0091d3b4 	movhi	r2,18254
   435a0:	109550c4 	addi	r2,r2,21827
   435a4:	30bff81e 	bne	r6,r2,43588 <__cxa_end_catch+0x2c>
   435a8:	20800517 	ldw	r2,20(r4)
   435ac:	10000e16 	blt	r2,zero,435e8 <__cxa_end_catch+0x8c>
   435b0:	117fffc4 	addi	r5,r2,-1
   435b4:	28000526 	beq	r5,zero,435cc <__cxa_end_catch+0x70>
   435b8:	28000a16 	blt	r5,zero,435e4 <__cxa_end_catch+0x88>
   435bc:	21400515 	stw	r5,20(r4)
   435c0:	dfc00017 	ldw	ra,0(sp)
   435c4:	dec00104 	addi	sp,sp,4
   435c8:	f800283a 	ret
   435cc:	20800417 	ldw	r2,16(r4)
   435d0:	21000b04 	addi	r4,r4,44
   435d4:	18800015 	stw	r2,0(r3)
   435d8:	dfc00017 	ldw	ra,0(sp)
   435dc:	dec00104 	addi	sp,sp,4
   435e0:	0043e381 	jmpi	43e38 <_Unwind_DeleteException>
   435e4:	00430000 	call	43000 <_ZSt9terminatev>
   435e8:	11400044 	addi	r5,r2,1
   435ec:	283ff31e 	bne	r5,zero,435bc <__cxa_end_catch+0x60>
   435f0:	20800417 	ldw	r2,16(r4)
   435f4:	21400515 	stw	r5,20(r4)
   435f8:	18800015 	stw	r2,0(r3)
   435fc:	003ff006 	br	435c0 <__cxa_end_catch+0x64>

00043600 <__cxa_begin_catch>:
   43600:	deffee04 	addi	sp,sp,-72
   43604:	00800134 	movhi	r2,4
   43608:	108a9104 	addi	r2,r2,10820
   4360c:	00c00134 	movhi	r3,4
   43610:	18d79704 	addi	r3,r3,24156
   43614:	d8800615 	stw	r2,24(sp)
   43618:	d9000e15 	stw	r4,56(sp)
   4361c:	00800134 	movhi	r2,4
   43620:	108dbd04 	addi	r2,r2,14068
   43624:	d809883a 	mov	r4,sp
   43628:	d8c00715 	stw	r3,28(sp)
   4362c:	dfc01115 	stw	ra,68(sp)
   43630:	d8800915 	stw	r2,36(sp)
   43634:	df001015 	stw	fp,64(sp)
   43638:	ddc00f15 	stw	r23,60(sp)
   4363c:	dec00815 	stw	sp,32(sp)
   43640:	dec00a15 	stw	sp,40(sp)
   43644:	0043c780 	call	43c78 <_Unwind_SjLj_Register>
   43648:	0042f2c0 	call	42f2c <__cxa_get_globals>
   4364c:	100d883a 	mov	r6,r2
   43650:	d8800e17 	ldw	r2,56(sp)
   43654:	31c00017 	ldw	r7,0(r6)
   43658:	117ff504 	addi	r5,r2,-44
   4365c:	28c00b17 	ldw	r3,44(r5)
   43660:	0090caf4 	movhi	r2,17195
   43664:	108ac004 	addi	r2,r2,11008
   43668:	29000c17 	ldw	r4,48(r5)
   4366c:	18800b26 	beq	r3,r2,4369c <__cxa_begin_catch+0x9c>
   43670:	38001d1e 	bne	r7,zero,436e8 <__cxa_begin_catch+0xe8>
   43674:	d8000d15 	stw	zero,52(sp)
   43678:	31400015 	stw	r5,0(r6)
   4367c:	d809883a 	mov	r4,sp
   43680:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   43684:	d8800d17 	ldw	r2,52(sp)
   43688:	dfc01117 	ldw	ra,68(sp)
   4368c:	df001017 	ldw	fp,64(sp)
   43690:	ddc00f17 	ldw	r23,60(sp)
   43694:	dec01204 	addi	sp,sp,72
   43698:	f800283a 	ret
   4369c:	0091d3b4 	movhi	r2,18254
   436a0:	109550c4 	addi	r2,r2,21827
   436a4:	20bff21e 	bne	r4,r2,43670 <__cxa_begin_catch+0x70>
   436a8:	28c00517 	ldw	r3,20(r5)
   436ac:	18000b16 	blt	r3,zero,436dc <__cxa_begin_catch+0xdc>
   436b0:	18800044 	addi	r2,r3,1
   436b4:	28800515 	stw	r2,20(r5)
   436b8:	30800117 	ldw	r2,4(r6)
   436bc:	10bfffc4 	addi	r2,r2,-1
   436c0:	30800115 	stw	r2,4(r6)
   436c4:	39400226 	beq	r7,r5,436d0 <__cxa_begin_catch+0xd0>
   436c8:	29c00415 	stw	r7,16(r5)
   436cc:	31400015 	stw	r5,0(r6)
   436d0:	29400a17 	ldw	r5,40(r5)
   436d4:	d9400d15 	stw	r5,52(sp)
   436d8:	003fe806 	br	4367c <__cxa_begin_catch+0x7c>
   436dc:	00800044 	movi	r2,1
   436e0:	10c5c83a 	sub	r2,r2,r3
   436e4:	003ff306 	br	436b4 <__cxa_begin_catch+0xb4>
   436e8:	00800044 	movi	r2,1
   436ec:	d8800115 	stw	r2,4(sp)
   436f0:	00430000 	call	43000 <_ZSt9terminatev>
   436f4:	d8800317 	ldw	r2,12(sp)
   436f8:	00ffffc4 	movi	r3,-1
   436fc:	d9000217 	ldw	r4,8(sp)
   43700:	10c00226 	beq	r2,r3,4370c <__cxa_begin_catch+0x10c>
   43704:	d8c00115 	stw	r3,4(sp)
   43708:	0043f440 	call	43f44 <_Unwind_SjLj_Resume>
   4370c:	00bfffc4 	movi	r2,-1
   43710:	d8800115 	stw	r2,4(sp)
   43714:	00428c40 	call	428c4 <__cxa_call_unexpected>

00043718 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   43718:	20c00017 	ldw	r3,0(r4)
   4371c:	defffa04 	addi	sp,sp,-24
   43720:	dc000415 	stw	r16,16(sp)
   43724:	1a000617 	ldw	r8,24(r3)
   43728:	3021883a 	mov	r16,r6
   4372c:	31800017 	ldw	r6,0(r6)
   43730:	00800404 	movi	r2,16
   43734:	dfc00515 	stw	ra,20(sp)
   43738:	d8800215 	stw	r2,8(sp)
   4373c:	d8000015 	stw	zero,0(sp)
   43740:	d8000115 	stw	zero,4(sp)
   43744:	d8000315 	stw	zero,12(sp)
   43748:	d80f883a 	mov	r7,sp
   4374c:	403ee83a 	callr	r8
   43750:	d8800117 	ldw	r2,4(sp)
   43754:	00c00184 	movi	r3,6
   43758:	0009883a 	mov	r4,zero
   4375c:	1080018c 	andi	r2,r2,6
   43760:	10c0031e 	bne	r2,r3,43770 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
   43764:	d8800017 	ldw	r2,0(sp)
   43768:	01000044 	movi	r4,1
   4376c:	80800015 	stw	r2,0(r16)
   43770:	2005883a 	mov	r2,r4
   43774:	dfc00517 	ldw	ra,20(sp)
   43778:	dc000417 	ldw	r16,16(sp)
   4377c:	dec00604 	addi	sp,sp,24
   43780:	f800283a 	ret

00043784 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   43784:	d8800017 	ldw	r2,0(sp)
   43788:	00c00184 	movi	r3,6
   4378c:	1180021e 	bne	r2,r6,43798 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
   43790:	1805883a 	mov	r2,r3
   43794:	f800283a 	ret
   43798:	00c00044 	movi	r3,1
   4379c:	1805883a 	mov	r2,r3
   437a0:	f800283a 	ret

000437a4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   437a4:	defffe04 	addi	sp,sp,-8
   437a8:	00800134 	movhi	r2,4
   437ac:	1097ee04 	addi	r2,r2,24504
   437b0:	dc400015 	stw	r17,0(sp)
   437b4:	20800015 	stw	r2,0(r4)
   437b8:	2023883a 	mov	r17,r4
   437bc:	dfc00115 	stw	ra,4(sp)
   437c0:	0043ae40 	call	43ae4 <_ZNSt9type_infoD2Ev>
   437c4:	8809883a 	mov	r4,r17
   437c8:	dfc00117 	ldw	ra,4(sp)
   437cc:	dc400017 	ldw	r17,0(sp)
   437d0:	dec00204 	addi	sp,sp,8
   437d4:	004232c1 	jmpi	4232c <_ZdlPv>

000437d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   437d8:	00800134 	movhi	r2,4
   437dc:	1097ee04 	addi	r2,r2,24504
   437e0:	20800015 	stw	r2,0(r4)
   437e4:	0043ae41 	jmpi	43ae4 <_ZNSt9type_infoD2Ev>

000437e8 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   437e8:	00800134 	movhi	r2,4
   437ec:	1097ee04 	addi	r2,r2,24504
   437f0:	20800015 	stw	r2,0(r4)
   437f4:	0043ae41 	jmpi	43ae4 <_ZNSt9type_infoD2Ev>

000437f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   437f8:	2811883a 	mov	r8,r5
   437fc:	20c00117 	ldw	r3,4(r4)
   43800:	40800117 	ldw	r2,4(r8)
   43804:	deffff04 	addi	sp,sp,-4
   43808:	dfc00015 	stw	ra,0(sp)
   4380c:	200b883a 	mov	r5,r4
   43810:	02400044 	movi	r9,1
   43814:	18800426 	beq	r3,r2,43828 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
   43818:	008000c4 	movi	r2,3
   4381c:	4009883a 	mov	r4,r8
   43820:	0013883a 	mov	r9,zero
   43824:	11c0042e 	bgeu	r2,r7,43838 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
   43828:	4805883a 	mov	r2,r9
   4382c:	dfc00017 	ldw	ra,0(sp)
   43830:	dec00104 	addi	sp,sp,4
   43834:	f800283a 	ret
   43838:	40800017 	ldw	r2,0(r8)
   4383c:	10c00517 	ldw	r3,20(r2)
   43840:	183ee83a 	callr	r3
   43844:	12403fcc 	andi	r9,r2,255
   43848:	4805883a 	mov	r2,r9
   4384c:	dfc00017 	ldw	ra,0(sp)
   43850:	dec00104 	addi	sp,sp,4
   43854:	f800283a 	ret

00043858 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   43858:	20c00117 	ldw	r3,4(r4)
   4385c:	28800117 	ldw	r2,4(r5)
   43860:	0009883a 	mov	r4,zero
   43864:	1880061e 	bne	r3,r2,43880 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
   43868:	00800184 	movi	r2,6
   4386c:	38800115 	stw	r2,4(r7)
   43870:	00800204 	movi	r2,8
   43874:	39800015 	stw	r6,0(r7)
   43878:	38800315 	stw	r2,12(r7)
   4387c:	01000044 	movi	r4,1
   43880:	2005883a 	mov	r2,r4
   43884:	f800283a 	ret

00043888 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   43888:	da000017 	ldw	r8,0(sp)
   4388c:	d8800217 	ldw	r2,8(sp)
   43890:	d9400317 	ldw	r5,12(sp)
   43894:	40800926 	beq	r8,r2,438bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
   43898:	21000117 	ldw	r4,4(r4)
   4389c:	38800117 	ldw	r2,4(r7)
   438a0:	2080041e 	bne	r4,r2,438b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
   438a4:	00800044 	movi	r2,1
   438a8:	28800315 	stw	r2,12(r5)
   438ac:	2a000015 	stw	r8,0(r5)
   438b0:	29800115 	stw	r6,4(r5)
   438b4:	0005883a 	mov	r2,zero
   438b8:	f800283a 	ret
   438bc:	d8800117 	ldw	r2,4(sp)
   438c0:	21000117 	ldw	r4,4(r4)
   438c4:	10c00117 	ldw	r3,4(r2)
   438c8:	20fff41e 	bne	r4,r3,4389c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   438cc:	29800215 	stw	r6,8(r5)
   438d0:	003ff806 	br	438b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

000438d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   438d4:	defffb04 	addi	sp,sp,-20
   438d8:	dd400315 	stw	r21,12(sp)
   438dc:	dcc00215 	stw	r19,8(sp)
   438e0:	dc400115 	stw	r17,4(sp)
   438e4:	dc000015 	stw	r16,0(sp)
   438e8:	2823883a 	mov	r17,r5
   438ec:	3027883a 	mov	r19,r6
   438f0:	382b883a 	mov	r21,r7
   438f4:	dfc00415 	stw	ra,16(sp)
   438f8:	2021883a 	mov	r16,r4
   438fc:	00438580 	call	43858 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   43900:	10803fcc 	andi	r2,r2,255
   43904:	880b883a 	mov	r5,r17
   43908:	980d883a 	mov	r6,r19
   4390c:	a80f883a 	mov	r7,r21
   43910:	00c00044 	movi	r3,1
   43914:	1000051e 	bne	r2,zero,4392c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
   43918:	81000217 	ldw	r4,8(r16)
   4391c:	20800017 	ldw	r2,0(r4)
   43920:	10c00617 	ldw	r3,24(r2)
   43924:	183ee83a 	callr	r3
   43928:	10c03fcc 	andi	r3,r2,255
   4392c:	1805883a 	mov	r2,r3
   43930:	dfc00417 	ldw	ra,16(sp)
   43934:	dd400317 	ldw	r21,12(sp)
   43938:	dcc00217 	ldw	r19,8(sp)
   4393c:	dc400117 	ldw	r17,4(sp)
   43940:	dc000017 	ldw	r16,0(sp)
   43944:	dec00504 	addi	sp,sp,20
   43948:	f800283a 	ret

0004394c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   4394c:	defffe04 	addi	sp,sp,-8
   43950:	00800134 	movhi	r2,4
   43954:	10980504 	addi	r2,r2,24596
   43958:	dc400015 	stw	r17,0(sp)
   4395c:	20800015 	stw	r2,0(r4)
   43960:	2023883a 	mov	r17,r4
   43964:	dfc00115 	stw	ra,4(sp)
   43968:	00437e80 	call	437e8 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   4396c:	8809883a 	mov	r4,r17
   43970:	dfc00117 	ldw	ra,4(sp)
   43974:	dc400017 	ldw	r17,0(sp)
   43978:	dec00204 	addi	sp,sp,8
   4397c:	004232c1 	jmpi	4232c <_ZdlPv>

00043980 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   43980:	00800134 	movhi	r2,4
   43984:	10980504 	addi	r2,r2,24596
   43988:	20800015 	stw	r2,0(r4)
   4398c:	00437e81 	jmpi	437e8 <_ZN10__cxxabiv117__class_type_infoD2Ev>

00043990 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   43990:	00800134 	movhi	r2,4
   43994:	10980504 	addi	r2,r2,24596
   43998:	20800015 	stw	r2,0(r4)
   4399c:	00437e81 	jmpi	437e8 <_ZN10__cxxabiv117__class_type_infoD2Ev>

000439a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   439a0:	da400017 	ldw	r9,0(sp)
   439a4:	2011883a 	mov	r8,r4
   439a8:	49800526 	beq	r9,r6,439c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
   439ac:	41000217 	ldw	r4,8(r8)
   439b0:	20800017 	ldw	r2,0(r4)
   439b4:	da400015 	stw	r9,0(sp)
   439b8:	10c00817 	ldw	r3,32(r2)
   439bc:	1800683a 	jmp	r3
   439c0:	39000117 	ldw	r4,4(r7)
   439c4:	40c00117 	ldw	r3,4(r8)
   439c8:	00800184 	movi	r2,6
   439cc:	193ff71e 	bne	r3,r4,439ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
   439d0:	f800283a 	ret

000439d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   439d4:	20c00117 	ldw	r3,4(r4)
   439d8:	38800117 	ldw	r2,4(r7)
   439dc:	defffb04 	addi	sp,sp,-20
   439e0:	dfc00415 	stw	ra,16(sp)
   439e4:	da000517 	ldw	r8,20(sp)
   439e8:	dac00617 	ldw	r11,24(sp)
   439ec:	da400717 	ldw	r9,28(sp)
   439f0:	da800817 	ldw	r10,32(sp)
   439f4:	18800c1e 	bne	r3,r2,43a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   439f8:	51800115 	stw	r6,4(r10)
   439fc:	52000015 	stw	r8,0(r10)
   43a00:	28001c16 	blt	r5,zero,43a74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
   43a04:	4145883a 	add	r2,r8,r5
   43a08:	48801e26 	beq	r9,r2,43a84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
   43a0c:	00800044 	movi	r2,1
   43a10:	0007883a 	mov	r3,zero
   43a14:	50800315 	stw	r2,12(r10)
   43a18:	1805883a 	mov	r2,r3
   43a1c:	dfc00417 	ldw	ra,16(sp)
   43a20:	dec00504 	addi	sp,sp,20
   43a24:	f800283a 	ret
   43a28:	42400d26 	beq	r8,r9,43a60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
   43a2c:	21000217 	ldw	r4,8(r4)
   43a30:	20800017 	ldw	r2,0(r4)
   43a34:	da000015 	stw	r8,0(sp)
   43a38:	dac00115 	stw	r11,4(sp)
   43a3c:	da400215 	stw	r9,8(sp)
   43a40:	da800315 	stw	r10,12(sp)
   43a44:	10c00717 	ldw	r3,28(r2)
   43a48:	183ee83a 	callr	r3
   43a4c:	10c03fcc 	andi	r3,r2,255
   43a50:	1805883a 	mov	r2,r3
   43a54:	dfc00417 	ldw	ra,16(sp)
   43a58:	dec00504 	addi	sp,sp,20
   43a5c:	f800283a 	ret
   43a60:	58800117 	ldw	r2,4(r11)
   43a64:	18bff11e 	bne	r3,r2,43a2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
   43a68:	0007883a 	mov	r3,zero
   43a6c:	51800215 	stw	r6,8(r10)
   43a70:	003fe906 	br	43a18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43a74:	00bfff84 	movi	r2,-2
   43a78:	28800426 	beq	r5,r2,43a8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
   43a7c:	0007883a 	mov	r3,zero
   43a80:	003fe506 	br	43a18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   43a84:	00800184 	movi	r2,6
   43a88:	003fe106 	br	43a10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
   43a8c:	00800044 	movi	r2,1
   43a90:	0007883a 	mov	r3,zero
   43a94:	50800315 	stw	r2,12(r10)
   43a98:	003fdf06 	br	43a18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

00043a9c <_ZNKSt9type_info14__is_pointer_pEv>:
   43a9c:	0005883a 	mov	r2,zero
   43aa0:	f800283a 	ret

00043aa4 <_ZNKSt9type_info15__is_function_pEv>:
   43aa4:	0005883a 	mov	r2,zero
   43aa8:	f800283a 	ret

00043aac <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   43aac:	20c00117 	ldw	r3,4(r4)
   43ab0:	28800117 	ldw	r2,4(r5)
   43ab4:	1885003a 	cmpeq	r2,r3,r2
   43ab8:	f800283a 	ret

00043abc <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   43abc:	0005883a 	mov	r2,zero
   43ac0:	f800283a 	ret

00043ac4 <_ZNSt9type_infoD0Ev>:
   43ac4:	00800134 	movhi	r2,4
   43ac8:	10981d04 	addi	r2,r2,24692
   43acc:	20800015 	stw	r2,0(r4)
   43ad0:	004232c1 	jmpi	4232c <_ZdlPv>

00043ad4 <_ZNSt9type_infoD1Ev>:
   43ad4:	00800134 	movhi	r2,4
   43ad8:	10981d04 	addi	r2,r2,24692
   43adc:	20800015 	stw	r2,0(r4)
   43ae0:	f800283a 	ret

00043ae4 <_ZNSt9type_infoD2Ev>:
   43ae4:	00800134 	movhi	r2,4
   43ae8:	10981d04 	addi	r2,r2,24692
   43aec:	20800015 	stw	r2,0(r4)
   43af0:	f800283a 	ret

00043af4 <udivmodsi4>:
   43af4:	29001b2e 	bgeu	r5,r4,43b64 <udivmodsi4+0x70>
   43af8:	28001a16 	blt	r5,zero,43b64 <udivmodsi4+0x70>
   43afc:	00800044 	movi	r2,1
   43b00:	0007883a 	mov	r3,zero
   43b04:	01c007c4 	movi	r7,31
   43b08:	00000306 	br	43b18 <udivmodsi4+0x24>
   43b0c:	19c01326 	beq	r3,r7,43b5c <udivmodsi4+0x68>
   43b10:	18c00044 	addi	r3,r3,1
   43b14:	28000416 	blt	r5,zero,43b28 <udivmodsi4+0x34>
   43b18:	294b883a 	add	r5,r5,r5
   43b1c:	1085883a 	add	r2,r2,r2
   43b20:	293ffa36 	bltu	r5,r4,43b0c <udivmodsi4+0x18>
   43b24:	10000d26 	beq	r2,zero,43b5c <udivmodsi4+0x68>
   43b28:	0007883a 	mov	r3,zero
   43b2c:	21400236 	bltu	r4,r5,43b38 <udivmodsi4+0x44>
   43b30:	2149c83a 	sub	r4,r4,r5
   43b34:	1886b03a 	or	r3,r3,r2
   43b38:	1004d07a 	srli	r2,r2,1
   43b3c:	280ad07a 	srli	r5,r5,1
   43b40:	103ffa1e 	bne	r2,zero,43b2c <udivmodsi4+0x38>
   43b44:	30000226 	beq	r6,zero,43b50 <udivmodsi4+0x5c>
   43b48:	2005883a 	mov	r2,r4
   43b4c:	f800283a 	ret
   43b50:	1809883a 	mov	r4,r3
   43b54:	2005883a 	mov	r2,r4
   43b58:	f800283a 	ret
   43b5c:	0007883a 	mov	r3,zero
   43b60:	003ff806 	br	43b44 <udivmodsi4+0x50>
   43b64:	00800044 	movi	r2,1
   43b68:	0007883a 	mov	r3,zero
   43b6c:	003fef06 	br	43b2c <udivmodsi4+0x38>

00043b70 <__divsi3>:
   43b70:	defffe04 	addi	sp,sp,-8
   43b74:	dc000015 	stw	r16,0(sp)
   43b78:	dfc00115 	stw	ra,4(sp)
   43b7c:	0021883a 	mov	r16,zero
   43b80:	20000c16 	blt	r4,zero,43bb4 <__divsi3+0x44>
   43b84:	000d883a 	mov	r6,zero
   43b88:	28000e16 	blt	r5,zero,43bc4 <__divsi3+0x54>
   43b8c:	0043af40 	call	43af4 <udivmodsi4>
   43b90:	1007883a 	mov	r3,r2
   43b94:	8005003a 	cmpeq	r2,r16,zero
   43b98:	1000011e 	bne	r2,zero,43ba0 <__divsi3+0x30>
   43b9c:	00c7c83a 	sub	r3,zero,r3
   43ba0:	1805883a 	mov	r2,r3
   43ba4:	dfc00117 	ldw	ra,4(sp)
   43ba8:	dc000017 	ldw	r16,0(sp)
   43bac:	dec00204 	addi	sp,sp,8
   43bb0:	f800283a 	ret
   43bb4:	0109c83a 	sub	r4,zero,r4
   43bb8:	04000044 	movi	r16,1
   43bbc:	000d883a 	mov	r6,zero
   43bc0:	283ff20e 	bge	r5,zero,43b8c <__divsi3+0x1c>
   43bc4:	014bc83a 	sub	r5,zero,r5
   43bc8:	8021003a 	cmpeq	r16,r16,zero
   43bcc:	003fef06 	br	43b8c <__divsi3+0x1c>

00043bd0 <__modsi3>:
   43bd0:	deffff04 	addi	sp,sp,-4
   43bd4:	dfc00015 	stw	ra,0(sp)
   43bd8:	01800044 	movi	r6,1
   43bdc:	2807883a 	mov	r3,r5
   43be0:	20000416 	blt	r4,zero,43bf4 <__modsi3+0x24>
   43be4:	28000c16 	blt	r5,zero,43c18 <__modsi3+0x48>
   43be8:	dfc00017 	ldw	ra,0(sp)
   43bec:	dec00104 	addi	sp,sp,4
   43bf0:	0043af41 	jmpi	43af4 <udivmodsi4>
   43bf4:	0109c83a 	sub	r4,zero,r4
   43bf8:	28000b16 	blt	r5,zero,43c28 <__modsi3+0x58>
   43bfc:	180b883a 	mov	r5,r3
   43c00:	01800044 	movi	r6,1
   43c04:	0043af40 	call	43af4 <udivmodsi4>
   43c08:	0085c83a 	sub	r2,zero,r2
   43c0c:	dfc00017 	ldw	ra,0(sp)
   43c10:	dec00104 	addi	sp,sp,4
   43c14:	f800283a 	ret
   43c18:	014bc83a 	sub	r5,zero,r5
   43c1c:	dfc00017 	ldw	ra,0(sp)
   43c20:	dec00104 	addi	sp,sp,4
   43c24:	0043af41 	jmpi	43af4 <udivmodsi4>
   43c28:	0147c83a 	sub	r3,zero,r5
   43c2c:	003ff306 	br	43bfc <__modsi3+0x2c>

00043c30 <__udivsi3>:
   43c30:	000d883a 	mov	r6,zero
   43c34:	0043af41 	jmpi	43af4 <udivmodsi4>

00043c38 <__umodsi3>:
   43c38:	01800044 	movi	r6,1
   43c3c:	0043af41 	jmpi	43af4 <udivmodsi4>

00043c40 <__mulsi3>:
   43c40:	20000a26 	beq	r4,zero,43c6c <__mulsi3+0x2c>
   43c44:	0007883a 	mov	r3,zero
   43c48:	2080004c 	andi	r2,r4,1
   43c4c:	1005003a 	cmpeq	r2,r2,zero
   43c50:	2008d07a 	srli	r4,r4,1
   43c54:	1000011e 	bne	r2,zero,43c5c <__mulsi3+0x1c>
   43c58:	1947883a 	add	r3,r3,r5
   43c5c:	294b883a 	add	r5,r5,r5
   43c60:	203ff91e 	bne	r4,zero,43c48 <__mulsi3+0x8>
   43c64:	1805883a 	mov	r2,r3
   43c68:	f800283a 	ret
   43c6c:	0007883a 	mov	r3,zero
   43c70:	1805883a 	mov	r2,r3
   43c74:	f800283a 	ret

00043c78 <_Unwind_SjLj_Register>:
   43c78:	d0a16117 	ldw	r2,-31356(gp)
   43c7c:	20800015 	stw	r2,0(r4)
   43c80:	d1216115 	stw	r4,-31356(gp)
   43c84:	f800283a 	ret

00043c88 <_Unwind_SjLj_Unregister>:
   43c88:	20800017 	ldw	r2,0(r4)
   43c8c:	d0a16115 	stw	r2,-31356(gp)
   43c90:	f800283a 	ret

00043c94 <_Unwind_GetGR>:
   43c94:	20800017 	ldw	r2,0(r4)
   43c98:	294b883a 	add	r5,r5,r5
   43c9c:	294b883a 	add	r5,r5,r5
   43ca0:	288b883a 	add	r5,r5,r2
   43ca4:	28800217 	ldw	r2,8(r5)
   43ca8:	f800283a 	ret

00043cac <_Unwind_GetCFA>:
   43cac:	21000017 	ldw	r4,0(r4)
   43cb0:	0005883a 	mov	r2,zero
   43cb4:	20000126 	beq	r4,zero,43cbc <_Unwind_GetCFA+0x10>
   43cb8:	20800a17 	ldw	r2,40(r4)
   43cbc:	f800283a 	ret

00043cc0 <_Unwind_SetGR>:
   43cc0:	20800017 	ldw	r2,0(r4)
   43cc4:	294b883a 	add	r5,r5,r5
   43cc8:	294b883a 	add	r5,r5,r5
   43ccc:	288b883a 	add	r5,r5,r2
   43cd0:	29800215 	stw	r6,8(r5)
   43cd4:	f800283a 	ret

00043cd8 <_Unwind_GetIP>:
   43cd8:	20c00017 	ldw	r3,0(r4)
   43cdc:	18800117 	ldw	r2,4(r3)
   43ce0:	10800044 	addi	r2,r2,1
   43ce4:	f800283a 	ret

00043ce8 <_Unwind_GetIPInfo>:
   43ce8:	20c00017 	ldw	r3,0(r4)
   43cec:	28000015 	stw	zero,0(r5)
   43cf0:	18800117 	ldw	r2,4(r3)
   43cf4:	10800044 	addi	r2,r2,1
   43cf8:	f800283a 	ret

00043cfc <_Unwind_SetIP>:
   43cfc:	20800017 	ldw	r2,0(r4)
   43d00:	297fffc4 	addi	r5,r5,-1
   43d04:	11400115 	stw	r5,4(r2)
   43d08:	f800283a 	ret

00043d0c <_Unwind_GetLanguageSpecificData>:
   43d0c:	20c00017 	ldw	r3,0(r4)
   43d10:	18800717 	ldw	r2,28(r3)
   43d14:	f800283a 	ret

00043d18 <_Unwind_GetRegionStart>:
   43d18:	0005883a 	mov	r2,zero
   43d1c:	f800283a 	ret

00043d20 <_Unwind_FindEnclosingFunction>:
   43d20:	0005883a 	mov	r2,zero
   43d24:	f800283a 	ret

00043d28 <_Unwind_GetDataRelBase>:
   43d28:	0005883a 	mov	r2,zero
   43d2c:	f800283a 	ret

00043d30 <_Unwind_GetTextRelBase>:
   43d30:	0005883a 	mov	r2,zero
   43d34:	f800283a 	ret

00043d38 <_Unwind_ForcedUnwind_Phase2>:
   43d38:	defff604 	addi	sp,sp,-40
   43d3c:	dd400815 	stw	r21,32(sp)
   43d40:	dd000715 	stw	r20,28(sp)
   43d44:	25400317 	ldw	r21,12(r4)
   43d48:	25000417 	ldw	r20,16(r4)
   43d4c:	28800017 	ldw	r2,0(r5)
   43d50:	dc800515 	stw	r18,20(sp)
   43d54:	dc000315 	stw	r16,12(sp)
   43d58:	2825883a 	mov	r18,r5
   43d5c:	2021883a 	mov	r16,r4
   43d60:	dfc00915 	stw	ra,36(sp)
   43d64:	dcc00615 	stw	r19,24(sp)
   43d68:	dc400415 	stw	r17,16(sp)
   43d6c:	00001406 	br	43dc0 <_Unwind_ForcedUnwind_Phase2+0x88>
   43d70:	00800144 	movi	r2,5
   43d74:	88802626 	beq	r17,r2,43e10 <_Unwind_ForcedUnwind_Phase2+0xd8>
   43d78:	98000c26 	beq	r19,zero,43dac <_Unwind_ForcedUnwind_Phase2+0x74>
   43d7c:	82000017 	ldw	r8,0(r16)
   43d80:	dc000015 	stw	r16,0(sp)
   43d84:	dc800115 	stw	r18,4(sp)
   43d88:	82400117 	ldw	r9,4(r16)
   43d8c:	400d883a 	mov	r6,r8
   43d90:	480f883a 	mov	r7,r9
   43d94:	983ee83a 	callr	r19
   43d98:	1023883a 	mov	r17,r2
   43d9c:	008001c4 	movi	r2,7
   43da0:	88801b26 	beq	r17,r2,43e10 <_Unwind_ForcedUnwind_Phase2+0xd8>
   43da4:	00800204 	movi	r2,8
   43da8:	8880181e 	bne	r17,r2,43e0c <_Unwind_ForcedUnwind_Phase2+0xd4>
   43dac:	91000017 	ldw	r4,0(r18)
   43db0:	0043c880 	call	43c88 <_Unwind_SjLj_Unregister>
   43db4:	90800017 	ldw	r2,0(r18)
   43db8:	10800017 	ldw	r2,0(r2)
   43dbc:	90800015 	stw	r2,0(r18)
   43dc0:	01400684 	movi	r5,26
   43dc4:	04400144 	movi	r17,5
   43dc8:	0027883a 	mov	r19,zero
   43dcc:	10000326 	beq	r2,zero,43ddc <_Unwind_ForcedUnwind_Phase2+0xa4>
   43dd0:	14c00617 	ldw	r19,24(r2)
   43dd4:	0023883a 	mov	r17,zero
   43dd8:	01400284 	movi	r5,10
   43ddc:	dc000015 	stw	r16,0(sp)
   43de0:	dc800115 	stw	r18,4(sp)
   43de4:	80800017 	ldw	r2,0(r16)
   43de8:	dd000215 	stw	r20,8(sp)
   43dec:	80c00117 	ldw	r3,4(r16)
   43df0:	01000044 	movi	r4,1
   43df4:	100d883a 	mov	r6,r2
   43df8:	180f883a 	mov	r7,r3
   43dfc:	a83ee83a 	callr	r21
   43e00:	01400284 	movi	r5,10
   43e04:	01000044 	movi	r4,1
   43e08:	103fd926 	beq	r2,zero,43d70 <_Unwind_ForcedUnwind_Phase2+0x38>
   43e0c:	04400084 	movi	r17,2
   43e10:	8805883a 	mov	r2,r17
   43e14:	dfc00917 	ldw	ra,36(sp)
   43e18:	dd400817 	ldw	r21,32(sp)
   43e1c:	dd000717 	ldw	r20,28(sp)
   43e20:	dcc00617 	ldw	r19,24(sp)
   43e24:	dc800517 	ldw	r18,20(sp)
   43e28:	dc400417 	ldw	r17,16(sp)
   43e2c:	dc000317 	ldw	r16,12(sp)
   43e30:	dec00a04 	addi	sp,sp,40
   43e34:	f800283a 	ret

00043e38 <_Unwind_DeleteException>:
   43e38:	20800217 	ldw	r2,8(r4)
   43e3c:	200b883a 	mov	r5,r4
   43e40:	01000044 	movi	r4,1
   43e44:	10000126 	beq	r2,zero,43e4c <_Unwind_DeleteException+0x14>
   43e48:	1000683a 	jmp	r2
   43e4c:	f800283a 	ret

00043e50 <_Unwind_RaiseException_Phase2>:
   43e50:	defffa04 	addi	sp,sp,-24
   43e54:	dc800415 	stw	r18,16(sp)
   43e58:	2825883a 	mov	r18,r5
   43e5c:	29400017 	ldw	r5,0(r5)
   43e60:	dc400315 	stw	r17,12(sp)
   43e64:	dfc00515 	stw	ra,20(sp)
   43e68:	dc000215 	stw	r16,8(sp)
   43e6c:	2023883a 	mov	r17,r4
   43e70:	28001b26 	beq	r5,zero,43ee0 <_Unwind_RaiseException_Phase2+0x90>
   43e74:	88800417 	ldw	r2,16(r17)
   43e78:	0007883a 	mov	r3,zero
   43e7c:	2a000617 	ldw	r8,24(r5)
   43e80:	28a1003a 	cmpeq	r16,r5,r2
   43e84:	802090ba 	slli	r16,r16,2
   43e88:	18001b1e 	bne	r3,zero,43ef8 <_Unwind_RaiseException_Phase2+0xa8>
   43e8c:	40000e26 	beq	r8,zero,43ec8 <_Unwind_RaiseException_Phase2+0x78>
   43e90:	88800017 	ldw	r2,0(r17)
   43e94:	dc400015 	stw	r17,0(sp)
   43e98:	dc800115 	stw	r18,4(sp)
   43e9c:	88c00117 	ldw	r3,4(r17)
   43ea0:	01000044 	movi	r4,1
   43ea4:	81400094 	ori	r5,r16,2
   43ea8:	180f883a 	mov	r7,r3
   43eac:	100d883a 	mov	r6,r2
   43eb0:	403ee83a 	callr	r8
   43eb4:	1007883a 	mov	r3,r2
   43eb8:	008001c4 	movi	r2,7
   43ebc:	18800f26 	beq	r3,r2,43efc <_Unwind_RaiseException_Phase2+0xac>
   43ec0:	00800204 	movi	r2,8
   43ec4:	18800c1e 	bne	r3,r2,43ef8 <_Unwind_RaiseException_Phase2+0xa8>
   43ec8:	8000131e 	bne	r16,zero,43f18 <_Unwind_RaiseException_Phase2+0xc8>
   43ecc:	91400017 	ldw	r5,0(r18)
   43ed0:	28800017 	ldw	r2,0(r5)
   43ed4:	100b883a 	mov	r5,r2
   43ed8:	90800015 	stw	r2,0(r18)
   43edc:	283fe51e 	bne	r5,zero,43e74 <_Unwind_RaiseException_Phase2+0x24>
   43ee0:	88800417 	ldw	r2,16(r17)
   43ee4:	00c00144 	movi	r3,5
   43ee8:	0011883a 	mov	r8,zero
   43eec:	28a1003a 	cmpeq	r16,r5,r2
   43ef0:	802090ba 	slli	r16,r16,2
   43ef4:	183fe526 	beq	r3,zero,43e8c <_Unwind_RaiseException_Phase2+0x3c>
   43ef8:	00c00084 	movi	r3,2
   43efc:	1805883a 	mov	r2,r3
   43f00:	dfc00517 	ldw	ra,20(sp)
   43f04:	dc800417 	ldw	r18,16(sp)
   43f08:	dc400317 	ldw	r17,12(sp)
   43f0c:	dc000217 	ldw	r16,8(sp)
   43f10:	dec00604 	addi	sp,sp,24
   43f14:	f800283a 	ret
   43f18:	00441c00 	call	441c0 <abort>

00043f1c <uw_install_context>:
   43f1c:	28800017 	ldw	r2,0(r5)
   43f20:	deffff04 	addi	sp,sp,-4
   43f24:	df000015 	stw	fp,0(sp)
   43f28:	10c00804 	addi	r3,r2,32
   43f2c:	d839883a 	mov	fp,sp
   43f30:	d0a16115 	stw	r2,-31356(gp)
   43f34:	19000117 	ldw	r4,4(r3)
   43f38:	1f000017 	ldw	fp,0(r3)
   43f3c:	1ec00217 	ldw	sp,8(r3)
   43f40:	2000683a 	jmp	r4

00043f44 <_Unwind_SjLj_Resume>:
   43f44:	d0e16117 	ldw	r3,-31356(gp)
   43f48:	20800317 	ldw	r2,12(r4)
   43f4c:	defffc04 	addi	sp,sp,-16
   43f50:	dfc00315 	stw	ra,12(sp)
   43f54:	dc000215 	stw	r16,8(sp)
   43f58:	d8c00015 	stw	r3,0(sp)
   43f5c:	d8c00115 	stw	r3,4(sp)
   43f60:	1000071e 	bne	r2,zero,43f80 <_Unwind_SjLj_Resume+0x3c>
   43f64:	dc000104 	addi	r16,sp,4
   43f68:	800b883a 	mov	r5,r16
   43f6c:	0043e500 	call	43e50 <_Unwind_RaiseException_Phase2>
   43f70:	1007883a 	mov	r3,r2
   43f74:	008001c4 	movi	r2,7
   43f78:	18800626 	beq	r3,r2,43f94 <_Unwind_SjLj_Resume+0x50>
   43f7c:	00441c00 	call	441c0 <abort>
   43f80:	dc000104 	addi	r16,sp,4
   43f84:	800b883a 	mov	r5,r16
   43f88:	0043d380 	call	43d38 <_Unwind_ForcedUnwind_Phase2>
   43f8c:	1007883a 	mov	r3,r2
   43f90:	003ff806 	br	43f74 <_Unwind_SjLj_Resume+0x30>
   43f94:	800b883a 	mov	r5,r16
   43f98:	d809883a 	mov	r4,sp
   43f9c:	0043f1c0 	call	43f1c <uw_install_context>

00043fa0 <_Unwind_SjLj_RaiseException>:
   43fa0:	d0a16117 	ldw	r2,-31356(gp)
   43fa4:	defff804 	addi	sp,sp,-32
   43fa8:	dc000415 	stw	r16,16(sp)
   43fac:	dfc00715 	stw	ra,28(sp)
   43fb0:	dc800615 	stw	r18,24(sp)
   43fb4:	dc400515 	stw	r17,20(sp)
   43fb8:	2021883a 	mov	r16,r4
   43fbc:	d8800215 	stw	r2,8(sp)
   43fc0:	d8800315 	stw	r2,12(sp)
   43fc4:	10001626 	beq	r2,zero,44020 <_Unwind_SjLj_RaiseException+0x80>
   43fc8:	dc400304 	addi	r17,sp,12
   43fcc:	04800184 	movi	r18,6
   43fd0:	00000106 	br	43fd8 <_Unwind_SjLj_RaiseException+0x38>
   43fd4:	d8800315 	stw	r2,12(sp)
   43fd8:	12000617 	ldw	r8,24(r2)
   43fdc:	40000d26 	beq	r8,zero,44014 <_Unwind_SjLj_RaiseException+0x74>
   43fe0:	80800017 	ldw	r2,0(r16)
   43fe4:	dc000015 	stw	r16,0(sp)
   43fe8:	80c00117 	ldw	r3,4(r16)
   43fec:	01000044 	movi	r4,1
   43ff0:	dc400115 	stw	r17,4(sp)
   43ff4:	180f883a 	mov	r7,r3
   43ff8:	200b883a 	mov	r5,r4
   43ffc:	100d883a 	mov	r6,r2
   44000:	403ee83a 	callr	r8
   44004:	1007883a 	mov	r3,r2
   44008:	14800d26 	beq	r2,r18,44040 <_Unwind_SjLj_RaiseException+0xa0>
   4400c:	00800204 	movi	r2,8
   44010:	1880191e 	bne	r3,r2,44078 <_Unwind_SjLj_RaiseException+0xd8>
   44014:	d8800317 	ldw	r2,12(sp)
   44018:	10800017 	ldw	r2,0(r2)
   4401c:	103fed1e 	bne	r2,zero,43fd4 <_Unwind_SjLj_RaiseException+0x34>
   44020:	00c00144 	movi	r3,5
   44024:	1805883a 	mov	r2,r3
   44028:	dfc00717 	ldw	ra,28(sp)
   4402c:	dc800617 	ldw	r18,24(sp)
   44030:	dc400517 	ldw	r17,20(sp)
   44034:	dc000417 	ldw	r16,16(sp)
   44038:	dec00804 	addi	sp,sp,32
   4403c:	f800283a 	ret
   44040:	d8800317 	ldw	r2,12(sp)
   44044:	80000315 	stw	zero,12(r16)
   44048:	8009883a 	mov	r4,r16
   4404c:	80800415 	stw	r2,16(r16)
   44050:	d8800217 	ldw	r2,8(sp)
   44054:	880b883a 	mov	r5,r17
   44058:	d8800315 	stw	r2,12(sp)
   4405c:	0043e500 	call	43e50 <_Unwind_RaiseException_Phase2>
   44060:	1007883a 	mov	r3,r2
   44064:	008001c4 	movi	r2,7
   44068:	18bfee1e 	bne	r3,r2,44024 <_Unwind_SjLj_RaiseException+0x84>
   4406c:	880b883a 	mov	r5,r17
   44070:	d9000204 	addi	r4,sp,8
   44074:	0043f1c0 	call	43f1c <uw_install_context>
   44078:	00c000c4 	movi	r3,3
   4407c:	1805883a 	mov	r2,r3
   44080:	dfc00717 	ldw	ra,28(sp)
   44084:	dc800617 	ldw	r18,24(sp)
   44088:	dc400517 	ldw	r17,20(sp)
   4408c:	dc000417 	ldw	r16,16(sp)
   44090:	dec00804 	addi	sp,sp,32
   44094:	f800283a 	ret

00044098 <_Unwind_SjLj_ForcedUnwind>:
   44098:	defffc04 	addi	sp,sp,-16
   4409c:	d0a16117 	ldw	r2,-31356(gp)
   440a0:	dc000215 	stw	r16,8(sp)
   440a4:	dc000104 	addi	r16,sp,4
   440a8:	21400315 	stw	r5,12(r4)
   440ac:	21800415 	stw	r6,16(r4)
   440b0:	800b883a 	mov	r5,r16
   440b4:	dfc00315 	stw	ra,12(sp)
   440b8:	d8800015 	stw	r2,0(sp)
   440bc:	d8800115 	stw	r2,4(sp)
   440c0:	0043d380 	call	43d38 <_Unwind_ForcedUnwind_Phase2>
   440c4:	00c001c4 	movi	r3,7
   440c8:	10c00426 	beq	r2,r3,440dc <_Unwind_SjLj_ForcedUnwind+0x44>
   440cc:	dfc00317 	ldw	ra,12(sp)
   440d0:	dc000217 	ldw	r16,8(sp)
   440d4:	dec00404 	addi	sp,sp,16
   440d8:	f800283a 	ret
   440dc:	800b883a 	mov	r5,r16
   440e0:	d809883a 	mov	r4,sp
   440e4:	0043f1c0 	call	43f1c <uw_install_context>

000440e8 <_Unwind_Backtrace>:
   440e8:	d0a16117 	ldw	r2,-31356(gp)
   440ec:	defffa04 	addi	sp,sp,-24
   440f0:	dcc00415 	stw	r19,16(sp)
   440f4:	dc800315 	stw	r18,12(sp)
   440f8:	dc400215 	stw	r17,8(sp)
   440fc:	2025883a 	mov	r18,r4
   44100:	2823883a 	mov	r17,r5
   44104:	04c00144 	movi	r19,5
   44108:	dfc00515 	stw	ra,20(sp)
   4410c:	dc000115 	stw	r16,4(sp)
   44110:	d8800015 	stw	r2,0(sp)
   44114:	00000406 	br	44128 <_Unwind_Backtrace+0x40>
   44118:	84c00b26 	beq	r16,r19,44148 <_Unwind_Backtrace+0x60>
   4411c:	d8800017 	ldw	r2,0(sp)
   44120:	10800017 	ldw	r2,0(r2)
   44124:	d8800015 	stw	r2,0(sp)
   44128:	04000144 	movi	r16,5
   4412c:	10000126 	beq	r2,zero,44134 <_Unwind_Backtrace+0x4c>
   44130:	0021883a 	mov	r16,zero
   44134:	d809883a 	mov	r4,sp
   44138:	880b883a 	mov	r5,r17
   4413c:	903ee83a 	callr	r18
   44140:	103ff526 	beq	r2,zero,44118 <_Unwind_Backtrace+0x30>
   44144:	040000c4 	movi	r16,3
   44148:	8005883a 	mov	r2,r16
   4414c:	dfc00517 	ldw	ra,20(sp)
   44150:	dcc00417 	ldw	r19,16(sp)
   44154:	dc800317 	ldw	r18,12(sp)
   44158:	dc400217 	ldw	r17,8(sp)
   4415c:	dc000117 	ldw	r16,4(sp)
   44160:	dec00604 	addi	sp,sp,24
   44164:	f800283a 	ret

00044168 <_Unwind_SjLj_Resume_or_Rethrow>:
   44168:	20800317 	ldw	r2,12(r4)
   4416c:	defffc04 	addi	sp,sp,-16
   44170:	dfc00315 	stw	ra,12(sp)
   44174:	dc000215 	stw	r16,8(sp)
   44178:	10000926 	beq	r2,zero,441a0 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   4417c:	d0a16117 	ldw	r2,-31356(gp)
   44180:	dc000104 	addi	r16,sp,4
   44184:	800b883a 	mov	r5,r16
   44188:	d8800015 	stw	r2,0(sp)
   4418c:	d8800115 	stw	r2,4(sp)
   44190:	0043d380 	call	43d38 <_Unwind_ForcedUnwind_Phase2>
   44194:	00c001c4 	movi	r3,7
   44198:	10c00626 	beq	r2,r3,441b4 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   4419c:	00441c00 	call	441c0 <abort>
   441a0:	0043fa00 	call	43fa0 <_Unwind_SjLj_RaiseException>
   441a4:	dfc00317 	ldw	ra,12(sp)
   441a8:	dc000217 	ldw	r16,8(sp)
   441ac:	dec00404 	addi	sp,sp,16
   441b0:	f800283a 	ret
   441b4:	800b883a 	mov	r5,r16
   441b8:	d809883a 	mov	r4,sp
   441bc:	0043f1c0 	call	43f1c <uw_install_context>

000441c0 <abort>:
   441c0:	deffff04 	addi	sp,sp,-4
   441c4:	01000184 	movi	r4,6
   441c8:	dfc00015 	stw	ra,0(sp)
   441cc:	0044a9c0 	call	44a9c <raise>
   441d0:	01000044 	movi	r4,1
   441d4:	00451a00 	call	451a0 <_exit>

000441d8 <free>:
   441d8:	00800134 	movhi	r2,4
   441dc:	10996a04 	addi	r2,r2,26024
   441e0:	200b883a 	mov	r5,r4
   441e4:	11000017 	ldw	r4,0(r2)
   441e8:	0044e4c1 	jmpi	44e4c <_free_r>

000441ec <malloc>:
   441ec:	00800134 	movhi	r2,4
   441f0:	10996a04 	addi	r2,r2,26024
   441f4:	200b883a 	mov	r5,r4
   441f8:	11000017 	ldw	r4,0(r2)
   441fc:	00442001 	jmpi	44200 <_malloc_r>

00044200 <_malloc_r>:
   44200:	defff604 	addi	sp,sp,-40
   44204:	28c002c4 	addi	r3,r5,11
   44208:	00800584 	movi	r2,22
   4420c:	dc800215 	stw	r18,8(sp)
   44210:	dfc00915 	stw	ra,36(sp)
   44214:	df000815 	stw	fp,32(sp)
   44218:	ddc00715 	stw	r23,28(sp)
   4421c:	dd800615 	stw	r22,24(sp)
   44220:	dd400515 	stw	r21,20(sp)
   44224:	dd000415 	stw	r20,16(sp)
   44228:	dcc00315 	stw	r19,12(sp)
   4422c:	dc400115 	stw	r17,4(sp)
   44230:	dc000015 	stw	r16,0(sp)
   44234:	2025883a 	mov	r18,r4
   44238:	10c01236 	bltu	r2,r3,44284 <_malloc_r+0x84>
   4423c:	04400404 	movi	r17,16
   44240:	8940142e 	bgeu	r17,r5,44294 <_malloc_r+0x94>
   44244:	00800304 	movi	r2,12
   44248:	0007883a 	mov	r3,zero
   4424c:	90800015 	stw	r2,0(r18)
   44250:	1805883a 	mov	r2,r3
   44254:	dfc00917 	ldw	ra,36(sp)
   44258:	df000817 	ldw	fp,32(sp)
   4425c:	ddc00717 	ldw	r23,28(sp)
   44260:	dd800617 	ldw	r22,24(sp)
   44264:	dd400517 	ldw	r21,20(sp)
   44268:	dd000417 	ldw	r20,16(sp)
   4426c:	dcc00317 	ldw	r19,12(sp)
   44270:	dc800217 	ldw	r18,8(sp)
   44274:	dc400117 	ldw	r17,4(sp)
   44278:	dc000017 	ldw	r16,0(sp)
   4427c:	dec00a04 	addi	sp,sp,40
   44280:	f800283a 	ret
   44284:	00bffe04 	movi	r2,-8
   44288:	18a2703a 	and	r17,r3,r2
   4428c:	883fed16 	blt	r17,zero,44244 <_malloc_r+0x44>
   44290:	897fec36 	bltu	r17,r5,44244 <_malloc_r+0x44>
   44294:	9009883a 	mov	r4,r18
   44298:	00454bc0 	call	454bc <__malloc_lock>
   4429c:	00807dc4 	movi	r2,503
   442a0:	14402b2e 	bgeu	r2,r17,44350 <_malloc_r+0x150>
   442a4:	8806d27a 	srli	r3,r17,9
   442a8:	18003f1e 	bne	r3,zero,443a8 <_malloc_r+0x1a8>
   442ac:	880cd0fa 	srli	r6,r17,3
   442b0:	300490fa 	slli	r2,r6,3
   442b4:	02c00134 	movhi	r11,4
   442b8:	5ad82704 	addi	r11,r11,24732
   442bc:	12cb883a 	add	r5,r2,r11
   442c0:	2c000317 	ldw	r16,12(r5)
   442c4:	580f883a 	mov	r7,r11
   442c8:	2c00041e 	bne	r5,r16,442dc <_malloc_r+0xdc>
   442cc:	00000a06 	br	442f8 <_malloc_r+0xf8>
   442d0:	1800860e 	bge	r3,zero,444ec <_malloc_r+0x2ec>
   442d4:	84000317 	ldw	r16,12(r16)
   442d8:	2c000726 	beq	r5,r16,442f8 <_malloc_r+0xf8>
   442dc:	80800117 	ldw	r2,4(r16)
   442e0:	00ffff04 	movi	r3,-4
   442e4:	10c8703a 	and	r4,r2,r3
   442e8:	2447c83a 	sub	r3,r4,r17
   442ec:	008003c4 	movi	r2,15
   442f0:	10fff70e 	bge	r2,r3,442d0 <_malloc_r+0xd0>
   442f4:	31bfffc4 	addi	r6,r6,-1
   442f8:	32400044 	addi	r9,r6,1
   442fc:	02800134 	movhi	r10,4
   44300:	52982904 	addi	r10,r10,24740
   44304:	54000217 	ldw	r16,8(r10)
   44308:	8280a026 	beq	r16,r10,4458c <_malloc_r+0x38c>
   4430c:	80800117 	ldw	r2,4(r16)
   44310:	00ffff04 	movi	r3,-4
   44314:	10ca703a 	and	r5,r2,r3
   44318:	2c4dc83a 	sub	r6,r5,r17
   4431c:	008003c4 	movi	r2,15
   44320:	11808316 	blt	r2,r6,44530 <_malloc_r+0x330>
   44324:	52800315 	stw	r10,12(r10)
   44328:	52800215 	stw	r10,8(r10)
   4432c:	30002916 	blt	r6,zero,443d4 <_malloc_r+0x1d4>
   44330:	8147883a 	add	r3,r16,r5
   44334:	18800117 	ldw	r2,4(r3)
   44338:	9009883a 	mov	r4,r18
   4433c:	10800054 	ori	r2,r2,1
   44340:	18800115 	stw	r2,4(r3)
   44344:	00454dc0 	call	454dc <__malloc_unlock>
   44348:	80c00204 	addi	r3,r16,8
   4434c:	003fc006 	br	44250 <_malloc_r+0x50>
   44350:	02c00134 	movhi	r11,4
   44354:	5ad82704 	addi	r11,r11,24732
   44358:	8ac5883a 	add	r2,r17,r11
   4435c:	14000317 	ldw	r16,12(r2)
   44360:	580f883a 	mov	r7,r11
   44364:	8806d0fa 	srli	r3,r17,3
   44368:	14006c26 	beq	r2,r16,4451c <_malloc_r+0x31c>
   4436c:	80c00117 	ldw	r3,4(r16)
   44370:	00bfff04 	movi	r2,-4
   44374:	81800317 	ldw	r6,12(r16)
   44378:	1886703a 	and	r3,r3,r2
   4437c:	80c7883a 	add	r3,r16,r3
   44380:	18800117 	ldw	r2,4(r3)
   44384:	81400217 	ldw	r5,8(r16)
   44388:	9009883a 	mov	r4,r18
   4438c:	10800054 	ori	r2,r2,1
   44390:	18800115 	stw	r2,4(r3)
   44394:	31400215 	stw	r5,8(r6)
   44398:	29800315 	stw	r6,12(r5)
   4439c:	00454dc0 	call	454dc <__malloc_unlock>
   443a0:	80c00204 	addi	r3,r16,8
   443a4:	003faa06 	br	44250 <_malloc_r+0x50>
   443a8:	00800104 	movi	r2,4
   443ac:	10c0052e 	bgeu	r2,r3,443c4 <_malloc_r+0x1c4>
   443b0:	00800504 	movi	r2,20
   443b4:	10c07836 	bltu	r2,r3,44598 <_malloc_r+0x398>
   443b8:	198016c4 	addi	r6,r3,91
   443bc:	300490fa 	slli	r2,r6,3
   443c0:	003fbc06 	br	442b4 <_malloc_r+0xb4>
   443c4:	8804d1ba 	srli	r2,r17,6
   443c8:	11800e04 	addi	r6,r2,56
   443cc:	300490fa 	slli	r2,r6,3
   443d0:	003fb806 	br	442b4 <_malloc_r+0xb4>
   443d4:	00807fc4 	movi	r2,511
   443d8:	1140bb36 	bltu	r2,r5,446c8 <_malloc_r+0x4c8>
   443dc:	2806d0fa 	srli	r3,r5,3
   443e0:	573ffe04 	addi	fp,r10,-8
   443e4:	00800044 	movi	r2,1
   443e8:	180890fa 	slli	r4,r3,3
   443ec:	1807d0ba 	srai	r3,r3,2
   443f0:	e1c00117 	ldw	r7,4(fp)
   443f4:	5909883a 	add	r4,r11,r4
   443f8:	21400217 	ldw	r5,8(r4)
   443fc:	10c4983a 	sll	r2,r2,r3
   44400:	81000315 	stw	r4,12(r16)
   44404:	81400215 	stw	r5,8(r16)
   44408:	388eb03a 	or	r7,r7,r2
   4440c:	2c000315 	stw	r16,12(r5)
   44410:	24000215 	stw	r16,8(r4)
   44414:	e1c00115 	stw	r7,4(fp)
   44418:	4807883a 	mov	r3,r9
   4441c:	4800cd16 	blt	r9,zero,44754 <_malloc_r+0x554>
   44420:	1807d0ba 	srai	r3,r3,2
   44424:	00800044 	movi	r2,1
   44428:	10c8983a 	sll	r4,r2,r3
   4442c:	39004436 	bltu	r7,r4,44540 <_malloc_r+0x340>
   44430:	21c4703a 	and	r2,r4,r7
   44434:	10000a1e 	bne	r2,zero,44460 <_malloc_r+0x260>
   44438:	2109883a 	add	r4,r4,r4
   4443c:	00bfff04 	movi	r2,-4
   44440:	4884703a 	and	r2,r9,r2
   44444:	3906703a 	and	r3,r7,r4
   44448:	12400104 	addi	r9,r2,4
   4444c:	1800041e 	bne	r3,zero,44460 <_malloc_r+0x260>
   44450:	2109883a 	add	r4,r4,r4
   44454:	3904703a 	and	r2,r7,r4
   44458:	4a400104 	addi	r9,r9,4
   4445c:	103ffc26 	beq	r2,zero,44450 <_malloc_r+0x250>
   44460:	480490fa 	slli	r2,r9,3
   44464:	4819883a 	mov	r12,r9
   44468:	023fff04 	movi	r8,-4
   4446c:	589b883a 	add	r13,r11,r2
   44470:	6807883a 	mov	r3,r13
   44474:	014003c4 	movi	r5,15
   44478:	1c000317 	ldw	r16,12(r3)
   4447c:	1c00041e 	bne	r3,r16,44490 <_malloc_r+0x290>
   44480:	0000a706 	br	44720 <_malloc_r+0x520>
   44484:	3000ab0e 	bge	r6,zero,44734 <_malloc_r+0x534>
   44488:	84000317 	ldw	r16,12(r16)
   4448c:	1c00a426 	beq	r3,r16,44720 <_malloc_r+0x520>
   44490:	80800117 	ldw	r2,4(r16)
   44494:	1204703a 	and	r2,r2,r8
   44498:	144dc83a 	sub	r6,r2,r17
   4449c:	29bff90e 	bge	r5,r6,44484 <_malloc_r+0x284>
   444a0:	81000317 	ldw	r4,12(r16)
   444a4:	80c00217 	ldw	r3,8(r16)
   444a8:	89400054 	ori	r5,r17,1
   444ac:	8445883a 	add	r2,r16,r17
   444b0:	20c00215 	stw	r3,8(r4)
   444b4:	19000315 	stw	r4,12(r3)
   444b8:	81400115 	stw	r5,4(r16)
   444bc:	1187883a 	add	r3,r2,r6
   444c0:	31000054 	ori	r4,r6,1
   444c4:	50800315 	stw	r2,12(r10)
   444c8:	50800215 	stw	r2,8(r10)
   444cc:	19800015 	stw	r6,0(r3)
   444d0:	11000115 	stw	r4,4(r2)
   444d4:	12800215 	stw	r10,8(r2)
   444d8:	12800315 	stw	r10,12(r2)
   444dc:	9009883a 	mov	r4,r18
   444e0:	00454dc0 	call	454dc <__malloc_unlock>
   444e4:	80c00204 	addi	r3,r16,8
   444e8:	003f5906 	br	44250 <_malloc_r+0x50>
   444ec:	8109883a 	add	r4,r16,r4
   444f0:	20800117 	ldw	r2,4(r4)
   444f4:	80c00217 	ldw	r3,8(r16)
   444f8:	81400317 	ldw	r5,12(r16)
   444fc:	10800054 	ori	r2,r2,1
   44500:	20800115 	stw	r2,4(r4)
   44504:	28c00215 	stw	r3,8(r5)
   44508:	19400315 	stw	r5,12(r3)
   4450c:	9009883a 	mov	r4,r18
   44510:	00454dc0 	call	454dc <__malloc_unlock>
   44514:	80c00204 	addi	r3,r16,8
   44518:	003f4d06 	br	44250 <_malloc_r+0x50>
   4451c:	80800204 	addi	r2,r16,8
   44520:	14000317 	ldw	r16,12(r2)
   44524:	143f911e 	bne	r2,r16,4436c <_malloc_r+0x16c>
   44528:	1a400084 	addi	r9,r3,2
   4452c:	003f7306 	br	442fc <_malloc_r+0xfc>
   44530:	88c00054 	ori	r3,r17,1
   44534:	8445883a 	add	r2,r16,r17
   44538:	80c00115 	stw	r3,4(r16)
   4453c:	003fdf06 	br	444bc <_malloc_r+0x2bc>
   44540:	e4000217 	ldw	r16,8(fp)
   44544:	00bfff04 	movi	r2,-4
   44548:	80c00117 	ldw	r3,4(r16)
   4454c:	802d883a 	mov	r22,r16
   44550:	18aa703a 	and	r21,r3,r2
   44554:	ac401636 	bltu	r21,r17,445b0 <_malloc_r+0x3b0>
   44558:	ac49c83a 	sub	r4,r21,r17
   4455c:	008003c4 	movi	r2,15
   44560:	1100130e 	bge	r2,r4,445b0 <_malloc_r+0x3b0>
   44564:	88800054 	ori	r2,r17,1
   44568:	8447883a 	add	r3,r16,r17
   4456c:	80800115 	stw	r2,4(r16)
   44570:	20800054 	ori	r2,r4,1
   44574:	18800115 	stw	r2,4(r3)
   44578:	e0c00215 	stw	r3,8(fp)
   4457c:	9009883a 	mov	r4,r18
   44580:	00454dc0 	call	454dc <__malloc_unlock>
   44584:	80c00204 	addi	r3,r16,8
   44588:	003f3106 	br	44250 <_malloc_r+0x50>
   4458c:	39c00117 	ldw	r7,4(r7)
   44590:	573ffe04 	addi	fp,r10,-8
   44594:	003fa006 	br	44418 <_malloc_r+0x218>
   44598:	00801504 	movi	r2,84
   4459c:	10c06736 	bltu	r2,r3,4473c <_malloc_r+0x53c>
   445a0:	8804d33a 	srli	r2,r17,12
   445a4:	11801b84 	addi	r6,r2,110
   445a8:	300490fa 	slli	r2,r6,3
   445ac:	003f4106 	br	442b4 <_malloc_r+0xb4>
   445b0:	d0a16217 	ldw	r2,-31352(gp)
   445b4:	d0e00817 	ldw	r3,-32736(gp)
   445b8:	053fffc4 	movi	r20,-1
   445bc:	10800404 	addi	r2,r2,16
   445c0:	88a7883a 	add	r19,r17,r2
   445c4:	1d000326 	beq	r3,r20,445d4 <_malloc_r+0x3d4>
   445c8:	98c01fc4 	addi	r3,r19,127
   445cc:	00bfe004 	movi	r2,-128
   445d0:	18a6703a 	and	r19,r3,r2
   445d4:	9009883a 	mov	r4,r18
   445d8:	980b883a 	mov	r5,r19
   445dc:	00449600 	call	44960 <_sbrk_r>
   445e0:	1009883a 	mov	r4,r2
   445e4:	15000426 	beq	r2,r20,445f8 <_malloc_r+0x3f8>
   445e8:	854b883a 	add	r5,r16,r21
   445ec:	1029883a 	mov	r20,r2
   445f0:	11405a2e 	bgeu	r2,r5,4475c <_malloc_r+0x55c>
   445f4:	87000c26 	beq	r16,fp,44628 <_malloc_r+0x428>
   445f8:	e4000217 	ldw	r16,8(fp)
   445fc:	80c00117 	ldw	r3,4(r16)
   44600:	00bfff04 	movi	r2,-4
   44604:	1884703a 	and	r2,r3,r2
   44608:	14400336 	bltu	r2,r17,44618 <_malloc_r+0x418>
   4460c:	1449c83a 	sub	r4,r2,r17
   44610:	008003c4 	movi	r2,15
   44614:	113fd316 	blt	r2,r4,44564 <_malloc_r+0x364>
   44618:	9009883a 	mov	r4,r18
   4461c:	00454dc0 	call	454dc <__malloc_unlock>
   44620:	0007883a 	mov	r3,zero
   44624:	003f0a06 	br	44250 <_malloc_r+0x50>
   44628:	05c00134 	movhi	r23,4
   4462c:	bddcd104 	addi	r23,r23,29508
   44630:	b8800017 	ldw	r2,0(r23)
   44634:	988d883a 	add	r6,r19,r2
   44638:	b9800015 	stw	r6,0(r23)
   4463c:	d0e00817 	ldw	r3,-32736(gp)
   44640:	00bfffc4 	movi	r2,-1
   44644:	18808e26 	beq	r3,r2,44880 <_malloc_r+0x680>
   44648:	2145c83a 	sub	r2,r4,r5
   4464c:	3085883a 	add	r2,r6,r2
   44650:	b8800015 	stw	r2,0(r23)
   44654:	20c001cc 	andi	r3,r4,7
   44658:	18005f1e 	bne	r3,zero,447d8 <_malloc_r+0x5d8>
   4465c:	000b883a 	mov	r5,zero
   44660:	a4c5883a 	add	r2,r20,r19
   44664:	10801fcc 	andi	r2,r2,127
   44668:	00c02004 	movi	r3,128
   4466c:	1887c83a 	sub	r3,r3,r2
   44670:	28e7883a 	add	r19,r5,r3
   44674:	9009883a 	mov	r4,r18
   44678:	980b883a 	mov	r5,r19
   4467c:	00449600 	call	44960 <_sbrk_r>
   44680:	1007883a 	mov	r3,r2
   44684:	00bfffc4 	movi	r2,-1
   44688:	18807a26 	beq	r3,r2,44874 <_malloc_r+0x674>
   4468c:	1d05c83a 	sub	r2,r3,r20
   44690:	9885883a 	add	r2,r19,r2
   44694:	10c00054 	ori	r3,r2,1
   44698:	b8800017 	ldw	r2,0(r23)
   4469c:	a021883a 	mov	r16,r20
   446a0:	a0c00115 	stw	r3,4(r20)
   446a4:	9885883a 	add	r2,r19,r2
   446a8:	b8800015 	stw	r2,0(r23)
   446ac:	e5000215 	stw	r20,8(fp)
   446b0:	b7003626 	beq	r22,fp,4478c <_malloc_r+0x58c>
   446b4:	018003c4 	movi	r6,15
   446b8:	35404b36 	bltu	r6,r21,447e8 <_malloc_r+0x5e8>
   446bc:	00800044 	movi	r2,1
   446c0:	a0800115 	stw	r2,4(r20)
   446c4:	003fcd06 	br	445fc <_malloc_r+0x3fc>
   446c8:	2808d27a 	srli	r4,r5,9
   446cc:	2000371e 	bne	r4,zero,447ac <_malloc_r+0x5ac>
   446d0:	2808d0fa 	srli	r4,r5,3
   446d4:	200690fa 	slli	r3,r4,3
   446d8:	58d1883a 	add	r8,r11,r3
   446dc:	41800217 	ldw	r6,8(r8)
   446e0:	41805b26 	beq	r8,r6,44850 <_malloc_r+0x650>
   446e4:	30800117 	ldw	r2,4(r6)
   446e8:	00ffff04 	movi	r3,-4
   446ec:	10c4703a 	and	r2,r2,r3
   446f0:	2880022e 	bgeu	r5,r2,446fc <_malloc_r+0x4fc>
   446f4:	31800217 	ldw	r6,8(r6)
   446f8:	41bffa1e 	bne	r8,r6,446e4 <_malloc_r+0x4e4>
   446fc:	32000317 	ldw	r8,12(r6)
   44700:	39c00117 	ldw	r7,4(r7)
   44704:	82000315 	stw	r8,12(r16)
   44708:	81800215 	stw	r6,8(r16)
   4470c:	07000134 	movhi	fp,4
   44710:	e7182704 	addi	fp,fp,24732
   44714:	34000315 	stw	r16,12(r6)
   44718:	44000215 	stw	r16,8(r8)
   4471c:	003f3e06 	br	44418 <_malloc_r+0x218>
   44720:	63000044 	addi	r12,r12,1
   44724:	608000cc 	andi	r2,r12,3
   44728:	10005d26 	beq	r2,zero,448a0 <_malloc_r+0x6a0>
   4472c:	18c00204 	addi	r3,r3,8
   44730:	003f5106 	br	44478 <_malloc_r+0x278>
   44734:	8089883a 	add	r4,r16,r2
   44738:	003f6d06 	br	444f0 <_malloc_r+0x2f0>
   4473c:	00805504 	movi	r2,340
   44740:	10c02036 	bltu	r2,r3,447c4 <_malloc_r+0x5c4>
   44744:	8804d3fa 	srli	r2,r17,15
   44748:	11801dc4 	addi	r6,r2,119
   4474c:	300490fa 	slli	r2,r6,3
   44750:	003ed806 	br	442b4 <_malloc_r+0xb4>
   44754:	48c000c4 	addi	r3,r9,3
   44758:	003f3106 	br	44420 <_malloc_r+0x220>
   4475c:	05c00134 	movhi	r23,4
   44760:	bddcd104 	addi	r23,r23,29508
   44764:	b8800017 	ldw	r2,0(r23)
   44768:	988d883a 	add	r6,r19,r2
   4476c:	b9800015 	stw	r6,0(r23)
   44770:	293fb21e 	bne	r5,r4,4463c <_malloc_r+0x43c>
   44774:	20801fcc 	andi	r2,r4,127
   44778:	103fb01e 	bne	r2,zero,4463c <_malloc_r+0x43c>
   4477c:	e4000217 	ldw	r16,8(fp)
   44780:	9d45883a 	add	r2,r19,r21
   44784:	10800054 	ori	r2,r2,1
   44788:	80800115 	stw	r2,4(r16)
   4478c:	b8c00017 	ldw	r3,0(r23)
   44790:	d0a16317 	ldw	r2,-31348(gp)
   44794:	10c0012e 	bgeu	r2,r3,4479c <_malloc_r+0x59c>
   44798:	d0e16315 	stw	r3,-31348(gp)
   4479c:	d0a16417 	ldw	r2,-31344(gp)
   447a0:	10ff962e 	bgeu	r2,r3,445fc <_malloc_r+0x3fc>
   447a4:	d0e16415 	stw	r3,-31344(gp)
   447a8:	003f9406 	br	445fc <_malloc_r+0x3fc>
   447ac:	00800104 	movi	r2,4
   447b0:	11001e36 	bltu	r2,r4,4482c <_malloc_r+0x62c>
   447b4:	2804d1ba 	srli	r2,r5,6
   447b8:	11000e04 	addi	r4,r2,56
   447bc:	200690fa 	slli	r3,r4,3
   447c0:	003fc506 	br	446d8 <_malloc_r+0x4d8>
   447c4:	00815504 	movi	r2,1364
   447c8:	10c01d2e 	bgeu	r2,r3,44840 <_malloc_r+0x640>
   447cc:	01801f84 	movi	r6,126
   447d0:	0080fc04 	movi	r2,1008
   447d4:	003eb706 	br	442b4 <_malloc_r+0xb4>
   447d8:	00800204 	movi	r2,8
   447dc:	10cbc83a 	sub	r5,r2,r3
   447e0:	2169883a 	add	r20,r4,r5
   447e4:	003f9e06 	br	44660 <_malloc_r+0x460>
   447e8:	00bffe04 	movi	r2,-8
   447ec:	a93ffd04 	addi	r4,r21,-12
   447f0:	2088703a 	and	r4,r4,r2
   447f4:	b10b883a 	add	r5,r22,r4
   447f8:	00c00144 	movi	r3,5
   447fc:	28c00215 	stw	r3,8(r5)
   44800:	28c00115 	stw	r3,4(r5)
   44804:	b0800117 	ldw	r2,4(r22)
   44808:	1080004c 	andi	r2,r2,1
   4480c:	2084b03a 	or	r2,r4,r2
   44810:	b0800115 	stw	r2,4(r22)
   44814:	313fdd2e 	bgeu	r6,r4,4478c <_malloc_r+0x58c>
   44818:	b1400204 	addi	r5,r22,8
   4481c:	9009883a 	mov	r4,r18
   44820:	0044e4c0 	call	44e4c <_free_r>
   44824:	e4000217 	ldw	r16,8(fp)
   44828:	003fd806 	br	4478c <_malloc_r+0x58c>
   4482c:	00800504 	movi	r2,20
   44830:	11001536 	bltu	r2,r4,44888 <_malloc_r+0x688>
   44834:	210016c4 	addi	r4,r4,91
   44838:	200690fa 	slli	r3,r4,3
   4483c:	003fa606 	br	446d8 <_malloc_r+0x4d8>
   44840:	8804d4ba 	srli	r2,r17,18
   44844:	11801f04 	addi	r6,r2,124
   44848:	300490fa 	slli	r2,r6,3
   4484c:	003e9906 	br	442b4 <_malloc_r+0xb4>
   44850:	2009d0ba 	srai	r4,r4,2
   44854:	01400134 	movhi	r5,4
   44858:	29582704 	addi	r5,r5,24732
   4485c:	00c00044 	movi	r3,1
   44860:	28800117 	ldw	r2,4(r5)
   44864:	1906983a 	sll	r3,r3,r4
   44868:	10c4b03a 	or	r2,r2,r3
   4486c:	28800115 	stw	r2,4(r5)
   44870:	003fa306 	br	44700 <_malloc_r+0x500>
   44874:	0027883a 	mov	r19,zero
   44878:	00c00044 	movi	r3,1
   4487c:	003f8606 	br	44698 <_malloc_r+0x498>
   44880:	d1200815 	stw	r4,-32736(gp)
   44884:	003f7306 	br	44654 <_malloc_r+0x454>
   44888:	00801504 	movi	r2,84
   4488c:	11001936 	bltu	r2,r4,448f4 <_malloc_r+0x6f4>
   44890:	2804d33a 	srli	r2,r5,12
   44894:	11001b84 	addi	r4,r2,110
   44898:	200690fa 	slli	r3,r4,3
   4489c:	003f8e06 	br	446d8 <_malloc_r+0x4d8>
   448a0:	480b883a 	mov	r5,r9
   448a4:	6807883a 	mov	r3,r13
   448a8:	288000cc 	andi	r2,r5,3
   448ac:	18fffe04 	addi	r3,r3,-8
   448b0:	297fffc4 	addi	r5,r5,-1
   448b4:	10001526 	beq	r2,zero,4490c <_malloc_r+0x70c>
   448b8:	18800217 	ldw	r2,8(r3)
   448bc:	10fffa26 	beq	r2,r3,448a8 <_malloc_r+0x6a8>
   448c0:	2109883a 	add	r4,r4,r4
   448c4:	393f1e36 	bltu	r7,r4,44540 <_malloc_r+0x340>
   448c8:	203f1d26 	beq	r4,zero,44540 <_malloc_r+0x340>
   448cc:	21c4703a 	and	r2,r4,r7
   448d0:	10000226 	beq	r2,zero,448dc <_malloc_r+0x6dc>
   448d4:	6013883a 	mov	r9,r12
   448d8:	003ee106 	br	44460 <_malloc_r+0x260>
   448dc:	2109883a 	add	r4,r4,r4
   448e0:	3904703a 	and	r2,r7,r4
   448e4:	63000104 	addi	r12,r12,4
   448e8:	103ffc26 	beq	r2,zero,448dc <_malloc_r+0x6dc>
   448ec:	6013883a 	mov	r9,r12
   448f0:	003edb06 	br	44460 <_malloc_r+0x260>
   448f4:	00805504 	movi	r2,340
   448f8:	11000836 	bltu	r2,r4,4491c <_malloc_r+0x71c>
   448fc:	2804d3fa 	srli	r2,r5,15
   44900:	11001dc4 	addi	r4,r2,119
   44904:	200690fa 	slli	r3,r4,3
   44908:	003f7306 	br	446d8 <_malloc_r+0x4d8>
   4490c:	0104303a 	nor	r2,zero,r4
   44910:	388e703a 	and	r7,r7,r2
   44914:	e1c00115 	stw	r7,4(fp)
   44918:	003fe906 	br	448c0 <_malloc_r+0x6c0>
   4491c:	00815504 	movi	r2,1364
   44920:	1100032e 	bgeu	r2,r4,44930 <_malloc_r+0x730>
   44924:	01001f84 	movi	r4,126
   44928:	00c0fc04 	movi	r3,1008
   4492c:	003f6a06 	br	446d8 <_malloc_r+0x4d8>
   44930:	2804d4ba 	srli	r2,r5,18
   44934:	11001f04 	addi	r4,r2,124
   44938:	200690fa 	slli	r3,r4,3
   4493c:	003f6606 	br	446d8 <_malloc_r+0x4d8>

00044940 <memset>:
   44940:	30000526 	beq	r6,zero,44958 <memset+0x18>
   44944:	310d883a 	add	r6,r6,r4
   44948:	2005883a 	mov	r2,r4
   4494c:	11400005 	stb	r5,0(r2)
   44950:	10800044 	addi	r2,r2,1
   44954:	11bffd1e 	bne	r2,r6,4494c <memset+0xc>
   44958:	2005883a 	mov	r2,r4
   4495c:	f800283a 	ret

00044960 <_sbrk_r>:
   44960:	defffd04 	addi	sp,sp,-12
   44964:	dc000015 	stw	r16,0(sp)
   44968:	04000134 	movhi	r16,4
   4496c:	841ac604 	addi	r16,r16,27416
   44970:	dc400115 	stw	r17,4(sp)
   44974:	80000015 	stw	zero,0(r16)
   44978:	2023883a 	mov	r17,r4
   4497c:	2809883a 	mov	r4,r5
   44980:	dfc00215 	stw	ra,8(sp)
   44984:	00455700 	call	45570 <sbrk>
   44988:	1007883a 	mov	r3,r2
   4498c:	00bfffc4 	movi	r2,-1
   44990:	18800626 	beq	r3,r2,449ac <_sbrk_r+0x4c>
   44994:	1805883a 	mov	r2,r3
   44998:	dfc00217 	ldw	ra,8(sp)
   4499c:	dc400117 	ldw	r17,4(sp)
   449a0:	dc000017 	ldw	r16,0(sp)
   449a4:	dec00304 	addi	sp,sp,12
   449a8:	f800283a 	ret
   449ac:	80800017 	ldw	r2,0(r16)
   449b0:	103ff826 	beq	r2,zero,44994 <_sbrk_r+0x34>
   449b4:	88800015 	stw	r2,0(r17)
   449b8:	1805883a 	mov	r2,r3
   449bc:	dfc00217 	ldw	ra,8(sp)
   449c0:	dc400117 	ldw	r17,4(sp)
   449c4:	dc000017 	ldw	r16,0(sp)
   449c8:	dec00304 	addi	sp,sp,12
   449cc:	f800283a 	ret

000449d0 <_raise_r>:
   449d0:	defffd04 	addi	sp,sp,-12
   449d4:	008007c4 	movi	r2,31
   449d8:	dc400115 	stw	r17,4(sp)
   449dc:	dc000015 	stw	r16,0(sp)
   449e0:	dfc00215 	stw	ra,8(sp)
   449e4:	2821883a 	mov	r16,r5
   449e8:	2023883a 	mov	r17,r4
   449ec:	11402736 	bltu	r2,r5,44a8c <_raise_r+0xbc>
   449f0:	20c00b17 	ldw	r3,44(r4)
   449f4:	18001326 	beq	r3,zero,44a44 <_raise_r+0x74>
   449f8:	2945883a 	add	r2,r5,r5
   449fc:	1085883a 	add	r2,r2,r2
   44a00:	188b883a 	add	r5,r3,r2
   44a04:	28c00017 	ldw	r3,0(r5)
   44a08:	18000e26 	beq	r3,zero,44a44 <_raise_r+0x74>
   44a0c:	01000044 	movi	r4,1
   44a10:	19000526 	beq	r3,r4,44a28 <_raise_r+0x58>
   44a14:	00bfffc4 	movi	r2,-1
   44a18:	18801326 	beq	r3,r2,44a68 <_raise_r+0x98>
   44a1c:	28000015 	stw	zero,0(r5)
   44a20:	8009883a 	mov	r4,r16
   44a24:	183ee83a 	callr	r3
   44a28:	0007883a 	mov	r3,zero
   44a2c:	1805883a 	mov	r2,r3
   44a30:	dfc00217 	ldw	ra,8(sp)
   44a34:	dc400117 	ldw	r17,4(sp)
   44a38:	dc000017 	ldw	r16,0(sp)
   44a3c:	dec00304 	addi	sp,sp,12
   44a40:	f800283a 	ret
   44a44:	0044ca80 	call	44ca8 <_getpid_r>
   44a48:	100b883a 	mov	r5,r2
   44a4c:	8809883a 	mov	r4,r17
   44a50:	800d883a 	mov	r6,r16
   44a54:	dfc00217 	ldw	ra,8(sp)
   44a58:	dc400117 	ldw	r17,4(sp)
   44a5c:	dc000017 	ldw	r16,0(sp)
   44a60:	dec00304 	addi	sp,sp,12
   44a64:	0044cac1 	jmpi	44cac <_kill_r>
   44a68:	2007883a 	mov	r3,r4
   44a6c:	00800584 	movi	r2,22
   44a70:	88800015 	stw	r2,0(r17)
   44a74:	1805883a 	mov	r2,r3
   44a78:	dfc00217 	ldw	ra,8(sp)
   44a7c:	dc400117 	ldw	r17,4(sp)
   44a80:	dc000017 	ldw	r16,0(sp)
   44a84:	dec00304 	addi	sp,sp,12
   44a88:	f800283a 	ret
   44a8c:	00800584 	movi	r2,22
   44a90:	00ffffc4 	movi	r3,-1
   44a94:	20800015 	stw	r2,0(r4)
   44a98:	003fe406 	br	44a2c <_raise_r+0x5c>

00044a9c <raise>:
   44a9c:	00800134 	movhi	r2,4
   44aa0:	10996a04 	addi	r2,r2,26024
   44aa4:	200b883a 	mov	r5,r4
   44aa8:	11000017 	ldw	r4,0(r2)
   44aac:	00449d01 	jmpi	449d0 <_raise_r>

00044ab0 <_init_signal_r>:
   44ab0:	20800b17 	ldw	r2,44(r4)
   44ab4:	defffe04 	addi	sp,sp,-8
   44ab8:	dc000015 	stw	r16,0(sp)
   44abc:	dfc00115 	stw	ra,4(sp)
   44ac0:	2021883a 	mov	r16,r4
   44ac4:	10000526 	beq	r2,zero,44adc <_init_signal_r+0x2c>
   44ac8:	0005883a 	mov	r2,zero
   44acc:	dfc00117 	ldw	ra,4(sp)
   44ad0:	dc000017 	ldw	r16,0(sp)
   44ad4:	dec00204 	addi	sp,sp,8
   44ad8:	f800283a 	ret
   44adc:	01402004 	movi	r5,128
   44ae0:	00442000 	call	44200 <_malloc_r>
   44ae4:	1009883a 	mov	r4,r2
   44ae8:	80800b15 	stw	r2,44(r16)
   44aec:	10000726 	beq	r2,zero,44b0c <_init_signal_r+0x5c>
   44af0:	0007883a 	mov	r3,zero
   44af4:	01402004 	movi	r5,128
   44af8:	20c5883a 	add	r2,r4,r3
   44afc:	18c00104 	addi	r3,r3,4
   44b00:	10000015 	stw	zero,0(r2)
   44b04:	197ffc1e 	bne	r3,r5,44af8 <_init_signal_r+0x48>
   44b08:	003fef06 	br	44ac8 <_init_signal_r+0x18>
   44b0c:	00bfffc4 	movi	r2,-1
   44b10:	003fee06 	br	44acc <_init_signal_r+0x1c>

00044b14 <_init_signal>:
   44b14:	00800134 	movhi	r2,4
   44b18:	10996a04 	addi	r2,r2,26024
   44b1c:	11000017 	ldw	r4,0(r2)
   44b20:	0044ab01 	jmpi	44ab0 <_init_signal_r>

00044b24 <__sigtramp_r>:
   44b24:	defffd04 	addi	sp,sp,-12
   44b28:	008007c4 	movi	r2,31
   44b2c:	dc000115 	stw	r16,4(sp)
   44b30:	dfc00215 	stw	ra,8(sp)
   44b34:	2021883a 	mov	r16,r4
   44b38:	11401336 	bltu	r2,r5,44b88 <__sigtramp_r+0x64>
   44b3c:	20c00b17 	ldw	r3,44(r4)
   44b40:	18001f26 	beq	r3,zero,44bc0 <__sigtramp_r+0x9c>
   44b44:	2945883a 	add	r2,r5,r5
   44b48:	1085883a 	add	r2,r2,r2
   44b4c:	10c9883a 	add	r4,r2,r3
   44b50:	20c00017 	ldw	r3,0(r4)
   44b54:	18001626 	beq	r3,zero,44bb0 <__sigtramp_r+0x8c>
   44b58:	00bfffc4 	movi	r2,-1
   44b5c:	18801626 	beq	r3,r2,44bb8 <__sigtramp_r+0x94>
   44b60:	00800044 	movi	r2,1
   44b64:	18800d26 	beq	r3,r2,44b9c <__sigtramp_r+0x78>
   44b68:	20000015 	stw	zero,0(r4)
   44b6c:	2809883a 	mov	r4,r5
   44b70:	183ee83a 	callr	r3
   44b74:	0005883a 	mov	r2,zero
   44b78:	dfc00217 	ldw	ra,8(sp)
   44b7c:	dc000117 	ldw	r16,4(sp)
   44b80:	dec00304 	addi	sp,sp,12
   44b84:	f800283a 	ret
   44b88:	00bfffc4 	movi	r2,-1
   44b8c:	dfc00217 	ldw	ra,8(sp)
   44b90:	dc000117 	ldw	r16,4(sp)
   44b94:	dec00304 	addi	sp,sp,12
   44b98:	f800283a 	ret
   44b9c:	008000c4 	movi	r2,3
   44ba0:	dfc00217 	ldw	ra,8(sp)
   44ba4:	dc000117 	ldw	r16,4(sp)
   44ba8:	dec00304 	addi	sp,sp,12
   44bac:	f800283a 	ret
   44bb0:	00800044 	movi	r2,1
   44bb4:	003ff006 	br	44b78 <__sigtramp_r+0x54>
   44bb8:	00800084 	movi	r2,2
   44bbc:	003fee06 	br	44b78 <__sigtramp_r+0x54>
   44bc0:	d9400015 	stw	r5,0(sp)
   44bc4:	0044ab00 	call	44ab0 <_init_signal_r>
   44bc8:	d9400017 	ldw	r5,0(sp)
   44bcc:	103fee1e 	bne	r2,zero,44b88 <__sigtramp_r+0x64>
   44bd0:	80c00b17 	ldw	r3,44(r16)
   44bd4:	003fdb06 	br	44b44 <__sigtramp_r+0x20>

00044bd8 <__sigtramp>:
   44bd8:	00800134 	movhi	r2,4
   44bdc:	10996a04 	addi	r2,r2,26024
   44be0:	200b883a 	mov	r5,r4
   44be4:	11000017 	ldw	r4,0(r2)
   44be8:	0044b241 	jmpi	44b24 <__sigtramp_r>

00044bec <_signal_r>:
   44bec:	defffc04 	addi	sp,sp,-16
   44bf0:	008007c4 	movi	r2,31
   44bf4:	dc800215 	stw	r18,8(sp)
   44bf8:	dc400115 	stw	r17,4(sp)
   44bfc:	dc000015 	stw	r16,0(sp)
   44c00:	dfc00315 	stw	ra,12(sp)
   44c04:	2823883a 	mov	r17,r5
   44c08:	00ffffc4 	movi	r3,-1
   44c0c:	3025883a 	mov	r18,r6
   44c10:	2021883a 	mov	r16,r4
   44c14:	1140092e 	bgeu	r2,r5,44c3c <_signal_r+0x50>
   44c18:	00800584 	movi	r2,22
   44c1c:	20800015 	stw	r2,0(r4)
   44c20:	1805883a 	mov	r2,r3
   44c24:	dfc00317 	ldw	ra,12(sp)
   44c28:	dc800217 	ldw	r18,8(sp)
   44c2c:	dc400117 	ldw	r17,4(sp)
   44c30:	dc000017 	ldw	r16,0(sp)
   44c34:	dec00404 	addi	sp,sp,16
   44c38:	f800283a 	ret
   44c3c:	21400b17 	ldw	r5,44(r4)
   44c40:	28000c26 	beq	r5,zero,44c74 <_signal_r+0x88>
   44c44:	8c45883a 	add	r2,r17,r17
   44c48:	1085883a 	add	r2,r2,r2
   44c4c:	1145883a 	add	r2,r2,r5
   44c50:	10c00017 	ldw	r3,0(r2)
   44c54:	14800015 	stw	r18,0(r2)
   44c58:	1805883a 	mov	r2,r3
   44c5c:	dfc00317 	ldw	ra,12(sp)
   44c60:	dc800217 	ldw	r18,8(sp)
   44c64:	dc400117 	ldw	r17,4(sp)
   44c68:	dc000017 	ldw	r16,0(sp)
   44c6c:	dec00404 	addi	sp,sp,16
   44c70:	f800283a 	ret
   44c74:	0044ab00 	call	44ab0 <_init_signal_r>
   44c78:	1000021e 	bne	r2,zero,44c84 <_signal_r+0x98>
   44c7c:	81400b17 	ldw	r5,44(r16)
   44c80:	003ff006 	br	44c44 <_signal_r+0x58>
   44c84:	00ffffc4 	movi	r3,-1
   44c88:	003fe506 	br	44c20 <_signal_r+0x34>

00044c8c <signal>:
   44c8c:	01800134 	movhi	r6,4
   44c90:	31996a04 	addi	r6,r6,26024
   44c94:	2007883a 	mov	r3,r4
   44c98:	31000017 	ldw	r4,0(r6)
   44c9c:	280d883a 	mov	r6,r5
   44ca0:	180b883a 	mov	r5,r3
   44ca4:	0044bec1 	jmpi	44bec <_signal_r>

00044ca8 <_getpid_r>:
   44ca8:	00451c01 	jmpi	451c0 <getpid>

00044cac <_kill_r>:
   44cac:	defffd04 	addi	sp,sp,-12
   44cb0:	dc000015 	stw	r16,0(sp)
   44cb4:	04000134 	movhi	r16,4
   44cb8:	841ac604 	addi	r16,r16,27416
   44cbc:	dc400115 	stw	r17,4(sp)
   44cc0:	80000015 	stw	zero,0(r16)
   44cc4:	2023883a 	mov	r17,r4
   44cc8:	2809883a 	mov	r4,r5
   44ccc:	300b883a 	mov	r5,r6
   44cd0:	dfc00215 	stw	ra,8(sp)
   44cd4:	00451e00 	call	451e0 <kill>
   44cd8:	1007883a 	mov	r3,r2
   44cdc:	00bfffc4 	movi	r2,-1
   44ce0:	18800626 	beq	r3,r2,44cfc <_kill_r+0x50>
   44ce4:	1805883a 	mov	r2,r3
   44ce8:	dfc00217 	ldw	ra,8(sp)
   44cec:	dc400117 	ldw	r17,4(sp)
   44cf0:	dc000017 	ldw	r16,0(sp)
   44cf4:	dec00304 	addi	sp,sp,12
   44cf8:	f800283a 	ret
   44cfc:	80800017 	ldw	r2,0(r16)
   44d00:	103ff826 	beq	r2,zero,44ce4 <_kill_r+0x38>
   44d04:	88800015 	stw	r2,0(r17)
   44d08:	1805883a 	mov	r2,r3
   44d0c:	dfc00217 	ldw	ra,8(sp)
   44d10:	dc400117 	ldw	r17,4(sp)
   44d14:	dc000017 	ldw	r16,0(sp)
   44d18:	dec00304 	addi	sp,sp,12
   44d1c:	f800283a 	ret

00044d20 <_malloc_trim_r>:
   44d20:	defffb04 	addi	sp,sp,-20
   44d24:	dcc00315 	stw	r19,12(sp)
   44d28:	04c00134 	movhi	r19,4
   44d2c:	9cd82704 	addi	r19,r19,24732
   44d30:	dc800215 	stw	r18,8(sp)
   44d34:	dc400115 	stw	r17,4(sp)
   44d38:	dc000015 	stw	r16,0(sp)
   44d3c:	2823883a 	mov	r17,r5
   44d40:	2025883a 	mov	r18,r4
   44d44:	dfc00415 	stw	ra,16(sp)
   44d48:	00454bc0 	call	454bc <__malloc_lock>
   44d4c:	98800217 	ldw	r2,8(r19)
   44d50:	9009883a 	mov	r4,r18
   44d54:	000b883a 	mov	r5,zero
   44d58:	10c00117 	ldw	r3,4(r2)
   44d5c:	00bfff04 	movi	r2,-4
   44d60:	18a0703a 	and	r16,r3,r2
   44d64:	8463c83a 	sub	r17,r16,r17
   44d68:	8c401bc4 	addi	r17,r17,111
   44d6c:	8822d1fa 	srli	r17,r17,7
   44d70:	00801fc4 	movi	r2,127
   44d74:	8c7fffc4 	addi	r17,r17,-1
   44d78:	882291fa 	slli	r17,r17,7
   44d7c:	1440060e 	bge	r2,r17,44d98 <_malloc_trim_r+0x78>
   44d80:	00449600 	call	44960 <_sbrk_r>
   44d84:	98c00217 	ldw	r3,8(r19)
   44d88:	9009883a 	mov	r4,r18
   44d8c:	044bc83a 	sub	r5,zero,r17
   44d90:	80c7883a 	add	r3,r16,r3
   44d94:	10c00926 	beq	r2,r3,44dbc <_malloc_trim_r+0x9c>
   44d98:	00454dc0 	call	454dc <__malloc_unlock>
   44d9c:	0005883a 	mov	r2,zero
   44da0:	dfc00417 	ldw	ra,16(sp)
   44da4:	dcc00317 	ldw	r19,12(sp)
   44da8:	dc800217 	ldw	r18,8(sp)
   44dac:	dc400117 	ldw	r17,4(sp)
   44db0:	dc000017 	ldw	r16,0(sp)
   44db4:	dec00504 	addi	sp,sp,20
   44db8:	f800283a 	ret
   44dbc:	9009883a 	mov	r4,r18
   44dc0:	00449600 	call	44960 <_sbrk_r>
   44dc4:	844dc83a 	sub	r6,r16,r17
   44dc8:	00ffffc4 	movi	r3,-1
   44dcc:	9009883a 	mov	r4,r18
   44dd0:	000b883a 	mov	r5,zero
   44dd4:	01c00134 	movhi	r7,4
   44dd8:	39dcd104 	addi	r7,r7,29508
   44ddc:	31800054 	ori	r6,r6,1
   44de0:	10c00926 	beq	r2,r3,44e08 <_malloc_trim_r+0xe8>
   44de4:	38800017 	ldw	r2,0(r7)
   44de8:	98c00217 	ldw	r3,8(r19)
   44dec:	9009883a 	mov	r4,r18
   44df0:	1445c83a 	sub	r2,r2,r17
   44df4:	38800015 	stw	r2,0(r7)
   44df8:	19800115 	stw	r6,4(r3)
   44dfc:	00454dc0 	call	454dc <__malloc_unlock>
   44e00:	00800044 	movi	r2,1
   44e04:	003fe606 	br	44da0 <_malloc_trim_r+0x80>
   44e08:	00449600 	call	44960 <_sbrk_r>
   44e0c:	99800217 	ldw	r6,8(r19)
   44e10:	100f883a 	mov	r7,r2
   44e14:	9009883a 	mov	r4,r18
   44e18:	1187c83a 	sub	r3,r2,r6
   44e1c:	008003c4 	movi	r2,15
   44e20:	19400054 	ori	r5,r3,1
   44e24:	10ffdc0e 	bge	r2,r3,44d98 <_malloc_trim_r+0x78>
   44e28:	00800134 	movhi	r2,4
   44e2c:	10996904 	addi	r2,r2,26020
   44e30:	10c00017 	ldw	r3,0(r2)
   44e34:	00800134 	movhi	r2,4
   44e38:	109cd104 	addi	r2,r2,29508
   44e3c:	31400115 	stw	r5,4(r6)
   44e40:	38c7c83a 	sub	r3,r7,r3
   44e44:	10c00015 	stw	r3,0(r2)
   44e48:	003fd306 	br	44d98 <_malloc_trim_r+0x78>

00044e4c <_free_r>:
   44e4c:	defffd04 	addi	sp,sp,-12
   44e50:	dc400115 	stw	r17,4(sp)
   44e54:	dc000015 	stw	r16,0(sp)
   44e58:	dfc00215 	stw	ra,8(sp)
   44e5c:	2821883a 	mov	r16,r5
   44e60:	2023883a 	mov	r17,r4
   44e64:	28005a26 	beq	r5,zero,44fd0 <_free_r+0x184>
   44e68:	00454bc0 	call	454bc <__malloc_lock>
   44e6c:	823ffe04 	addi	r8,r16,-8
   44e70:	41400117 	ldw	r5,4(r8)
   44e74:	00bfff84 	movi	r2,-2
   44e78:	02800134 	movhi	r10,4
   44e7c:	52982704 	addi	r10,r10,24732
   44e80:	288e703a 	and	r7,r5,r2
   44e84:	41cd883a 	add	r6,r8,r7
   44e88:	30c00117 	ldw	r3,4(r6)
   44e8c:	51000217 	ldw	r4,8(r10)
   44e90:	00bfff04 	movi	r2,-4
   44e94:	1892703a 	and	r9,r3,r2
   44e98:	5017883a 	mov	r11,r10
   44e9c:	31006726 	beq	r6,r4,4503c <_free_r+0x1f0>
   44ea0:	2880004c 	andi	r2,r5,1
   44ea4:	1005003a 	cmpeq	r2,r2,zero
   44ea8:	32400115 	stw	r9,4(r6)
   44eac:	10001a1e 	bne	r2,zero,44f18 <_free_r+0xcc>
   44eb0:	000b883a 	mov	r5,zero
   44eb4:	3247883a 	add	r3,r6,r9
   44eb8:	18800117 	ldw	r2,4(r3)
   44ebc:	1080004c 	andi	r2,r2,1
   44ec0:	1000231e 	bne	r2,zero,44f50 <_free_r+0x104>
   44ec4:	280ac03a 	cmpne	r5,r5,zero
   44ec8:	3a4f883a 	add	r7,r7,r9
   44ecc:	2800451e 	bne	r5,zero,44fe4 <_free_r+0x198>
   44ed0:	31000217 	ldw	r4,8(r6)
   44ed4:	00800134 	movhi	r2,4
   44ed8:	10982904 	addi	r2,r2,24740
   44edc:	20807b26 	beq	r4,r2,450cc <_free_r+0x280>
   44ee0:	30800317 	ldw	r2,12(r6)
   44ee4:	3a07883a 	add	r3,r7,r8
   44ee8:	19c00015 	stw	r7,0(r3)
   44eec:	11000215 	stw	r4,8(r2)
   44ef0:	20800315 	stw	r2,12(r4)
   44ef4:	38800054 	ori	r2,r7,1
   44ef8:	40800115 	stw	r2,4(r8)
   44efc:	28001a26 	beq	r5,zero,44f68 <_free_r+0x11c>
   44f00:	8809883a 	mov	r4,r17
   44f04:	dfc00217 	ldw	ra,8(sp)
   44f08:	dc400117 	ldw	r17,4(sp)
   44f0c:	dc000017 	ldw	r16,0(sp)
   44f10:	dec00304 	addi	sp,sp,12
   44f14:	00454dc1 	jmpi	454dc <__malloc_unlock>
   44f18:	80bffe17 	ldw	r2,-8(r16)
   44f1c:	50c00204 	addi	r3,r10,8
   44f20:	4091c83a 	sub	r8,r8,r2
   44f24:	41000217 	ldw	r4,8(r8)
   44f28:	388f883a 	add	r7,r7,r2
   44f2c:	20c06126 	beq	r4,r3,450b4 <_free_r+0x268>
   44f30:	40800317 	ldw	r2,12(r8)
   44f34:	3247883a 	add	r3,r6,r9
   44f38:	000b883a 	mov	r5,zero
   44f3c:	11000215 	stw	r4,8(r2)
   44f40:	20800315 	stw	r2,12(r4)
   44f44:	18800117 	ldw	r2,4(r3)
   44f48:	1080004c 	andi	r2,r2,1
   44f4c:	103fdd26 	beq	r2,zero,44ec4 <_free_r+0x78>
   44f50:	38800054 	ori	r2,r7,1
   44f54:	3a07883a 	add	r3,r7,r8
   44f58:	280ac03a 	cmpne	r5,r5,zero
   44f5c:	40800115 	stw	r2,4(r8)
   44f60:	19c00015 	stw	r7,0(r3)
   44f64:	283fe61e 	bne	r5,zero,44f00 <_free_r+0xb4>
   44f68:	00807fc4 	movi	r2,511
   44f6c:	11c01f2e 	bgeu	r2,r7,44fec <_free_r+0x1a0>
   44f70:	3806d27a 	srli	r3,r7,9
   44f74:	1800481e 	bne	r3,zero,45098 <_free_r+0x24c>
   44f78:	3804d0fa 	srli	r2,r7,3
   44f7c:	100690fa 	slli	r3,r2,3
   44f80:	1acd883a 	add	r6,r3,r11
   44f84:	31400217 	ldw	r5,8(r6)
   44f88:	31405926 	beq	r6,r5,450f0 <_free_r+0x2a4>
   44f8c:	28800117 	ldw	r2,4(r5)
   44f90:	00ffff04 	movi	r3,-4
   44f94:	10c4703a 	and	r2,r2,r3
   44f98:	3880022e 	bgeu	r7,r2,44fa4 <_free_r+0x158>
   44f9c:	29400217 	ldw	r5,8(r5)
   44fa0:	317ffa1e 	bne	r6,r5,44f8c <_free_r+0x140>
   44fa4:	29800317 	ldw	r6,12(r5)
   44fa8:	41800315 	stw	r6,12(r8)
   44fac:	41400215 	stw	r5,8(r8)
   44fb0:	8809883a 	mov	r4,r17
   44fb4:	2a000315 	stw	r8,12(r5)
   44fb8:	32000215 	stw	r8,8(r6)
   44fbc:	dfc00217 	ldw	ra,8(sp)
   44fc0:	dc400117 	ldw	r17,4(sp)
   44fc4:	dc000017 	ldw	r16,0(sp)
   44fc8:	dec00304 	addi	sp,sp,12
   44fcc:	00454dc1 	jmpi	454dc <__malloc_unlock>
   44fd0:	dfc00217 	ldw	ra,8(sp)
   44fd4:	dc400117 	ldw	r17,4(sp)
   44fd8:	dc000017 	ldw	r16,0(sp)
   44fdc:	dec00304 	addi	sp,sp,12
   44fe0:	f800283a 	ret
   44fe4:	31000217 	ldw	r4,8(r6)
   44fe8:	003fbd06 	br	44ee0 <_free_r+0x94>
   44fec:	3806d0fa 	srli	r3,r7,3
   44ff0:	00800044 	movi	r2,1
   44ff4:	51400117 	ldw	r5,4(r10)
   44ff8:	180890fa 	slli	r4,r3,3
   44ffc:	1807d0ba 	srai	r3,r3,2
   45000:	22c9883a 	add	r4,r4,r11
   45004:	21800217 	ldw	r6,8(r4)
   45008:	10c4983a 	sll	r2,r2,r3
   4500c:	41000315 	stw	r4,12(r8)
   45010:	41800215 	stw	r6,8(r8)
   45014:	288ab03a 	or	r5,r5,r2
   45018:	22000215 	stw	r8,8(r4)
   4501c:	8809883a 	mov	r4,r17
   45020:	51400115 	stw	r5,4(r10)
   45024:	32000315 	stw	r8,12(r6)
   45028:	dfc00217 	ldw	ra,8(sp)
   4502c:	dc400117 	ldw	r17,4(sp)
   45030:	dc000017 	ldw	r16,0(sp)
   45034:	dec00304 	addi	sp,sp,12
   45038:	00454dc1 	jmpi	454dc <__malloc_unlock>
   4503c:	2880004c 	andi	r2,r5,1
   45040:	3a4d883a 	add	r6,r7,r9
   45044:	1000071e 	bne	r2,zero,45064 <_free_r+0x218>
   45048:	80bffe17 	ldw	r2,-8(r16)
   4504c:	4091c83a 	sub	r8,r8,r2
   45050:	41000317 	ldw	r4,12(r8)
   45054:	40c00217 	ldw	r3,8(r8)
   45058:	308d883a 	add	r6,r6,r2
   4505c:	20c00215 	stw	r3,8(r4)
   45060:	19000315 	stw	r4,12(r3)
   45064:	00800134 	movhi	r2,4
   45068:	10996804 	addi	r2,r2,26016
   4506c:	11000017 	ldw	r4,0(r2)
   45070:	30c00054 	ori	r3,r6,1
   45074:	52000215 	stw	r8,8(r10)
   45078:	40c00115 	stw	r3,4(r8)
   4507c:	313fa036 	bltu	r6,r4,44f00 <_free_r+0xb4>
   45080:	00800134 	movhi	r2,4
   45084:	109ac304 	addi	r2,r2,27404
   45088:	11400017 	ldw	r5,0(r2)
   4508c:	8809883a 	mov	r4,r17
   45090:	0044d200 	call	44d20 <_malloc_trim_r>
   45094:	003f9a06 	br	44f00 <_free_r+0xb4>
   45098:	00800104 	movi	r2,4
   4509c:	10c0072e 	bgeu	r2,r3,450bc <_free_r+0x270>
   450a0:	00800504 	movi	r2,20
   450a4:	10c01936 	bltu	r2,r3,4510c <_free_r+0x2c0>
   450a8:	188016c4 	addi	r2,r3,91
   450ac:	100690fa 	slli	r3,r2,3
   450b0:	003fb306 	br	44f80 <_free_r+0x134>
   450b4:	01400044 	movi	r5,1
   450b8:	003f7e06 	br	44eb4 <_free_r+0x68>
   450bc:	3804d1ba 	srli	r2,r7,6
   450c0:	10800e04 	addi	r2,r2,56
   450c4:	100690fa 	slli	r3,r2,3
   450c8:	003fad06 	br	44f80 <_free_r+0x134>
   450cc:	22000315 	stw	r8,12(r4)
   450d0:	22000215 	stw	r8,8(r4)
   450d4:	3a05883a 	add	r2,r7,r8
   450d8:	38c00054 	ori	r3,r7,1
   450dc:	11c00015 	stw	r7,0(r2)
   450e0:	41000215 	stw	r4,8(r8)
   450e4:	40c00115 	stw	r3,4(r8)
   450e8:	41000315 	stw	r4,12(r8)
   450ec:	003f8406 	br	44f00 <_free_r+0xb4>
   450f0:	1005d0ba 	srai	r2,r2,2
   450f4:	00c00044 	movi	r3,1
   450f8:	51000117 	ldw	r4,4(r10)
   450fc:	1886983a 	sll	r3,r3,r2
   45100:	20c8b03a 	or	r4,r4,r3
   45104:	51000115 	stw	r4,4(r10)
   45108:	003fa706 	br	44fa8 <_free_r+0x15c>
   4510c:	00801504 	movi	r2,84
   45110:	10c00436 	bltu	r2,r3,45124 <_free_r+0x2d8>
   45114:	3804d33a 	srli	r2,r7,12
   45118:	10801b84 	addi	r2,r2,110
   4511c:	100690fa 	slli	r3,r2,3
   45120:	003f9706 	br	44f80 <_free_r+0x134>
   45124:	00805504 	movi	r2,340
   45128:	10c00436 	bltu	r2,r3,4513c <_free_r+0x2f0>
   4512c:	3804d3fa 	srli	r2,r7,15
   45130:	10801dc4 	addi	r2,r2,119
   45134:	100690fa 	slli	r3,r2,3
   45138:	003f9106 	br	44f80 <_free_r+0x134>
   4513c:	00815504 	movi	r2,1364
   45140:	10c0032e 	bgeu	r2,r3,45150 <_free_r+0x304>
   45144:	00801f84 	movi	r2,126
   45148:	00c0fc04 	movi	r3,1008
   4514c:	003f8c06 	br	44f80 <_free_r+0x134>
   45150:	3804d4ba 	srli	r2,r7,18
   45154:	10801f04 	addi	r2,r2,124
   45158:	100690fa 	slli	r3,r2,3
   4515c:	003f8806 	br	44f80 <_free_r+0x134>

00045160 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   45160:	defffd04 	addi	sp,sp,-12
   45164:	df000215 	stw	fp,8(sp)
   45168:	df000204 	addi	fp,sp,8
   4516c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   45170:	e0bfff17 	ldw	r2,-4(fp)
   45174:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45178:	e0bffe17 	ldw	r2,-8(fp)
   4517c:	1005003a 	cmpeq	r2,r2,zero
   45180:	1000021e 	bne	r2,zero,4518c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   45184:	002af070 	cmpltui	zero,zero,43969
   45188:	00000106 	br	45190 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4518c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   45190:	e037883a 	mov	sp,fp
   45194:	df000017 	ldw	fp,0(sp)
   45198:	dec00104 	addi	sp,sp,4
   4519c:	f800283a 	ret

000451a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   451a0:	defffd04 	addi	sp,sp,-12
   451a4:	dfc00215 	stw	ra,8(sp)
   451a8:	df000115 	stw	fp,4(sp)
   451ac:	df000104 	addi	fp,sp,4
   451b0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   451b4:	e13fff17 	ldw	r4,-4(fp)
   451b8:	00451600 	call	45160 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   451bc:	003fff06 	br	451bc <_exit+0x1c>

000451c0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   451c0:	deffff04 	addi	sp,sp,-4
   451c4:	df000015 	stw	fp,0(sp)
   451c8:	d839883a 	mov	fp,sp
  return 0;
   451cc:	0005883a 	mov	r2,zero
}
   451d0:	e037883a 	mov	sp,fp
   451d4:	df000017 	ldw	fp,0(sp)
   451d8:	dec00104 	addi	sp,sp,4
   451dc:	f800283a 	ret

000451e0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   451e0:	defffa04 	addi	sp,sp,-24
   451e4:	dfc00515 	stw	ra,20(sp)
   451e8:	df000415 	stw	fp,16(sp)
   451ec:	df000404 	addi	fp,sp,16
   451f0:	e13ffd15 	stw	r4,-12(fp)
   451f4:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   451f8:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   451fc:	e0bffd17 	ldw	r2,-12(fp)
   45200:	10800048 	cmpgei	r2,r2,1
   45204:	1000301e 	bne	r2,zero,452c8 <kill+0xe8>
  {
    switch (sig)
   45208:	e0bffe17 	ldw	r2,-8(fp)
   4520c:	10800828 	cmpgeui	r2,r2,32
   45210:	10002a1e 	bne	r2,zero,452bc <kill+0xdc>
   45214:	e0bffe17 	ldw	r2,-8(fp)
   45218:	1085883a 	add	r2,r2,r2
   4521c:	1087883a 	add	r3,r2,r2
   45220:	00800134 	movhi	r2,4
   45224:	10948d04 	addi	r2,r2,21044
   45228:	1885883a 	add	r2,r3,r2
   4522c:	10800017 	ldw	r2,0(r2)
   45230:	1000683a 	jmp	r2
   45234:	000452dc 	xori	zero,zero,4427
   45238:	000452bc 	xorhi	zero,zero,4426
   4523c:	000452bc 	xorhi	zero,zero,4426
   45240:	000452b4 	movhi	zero,4426
   45244:	000452b4 	movhi	zero,4426
   45248:	000452b4 	movhi	zero,4426
   4524c:	000452b4 	movhi	zero,4426
   45250:	000452bc 	xorhi	zero,zero,4426
   45254:	000452b4 	movhi	zero,4426
   45258:	000452b4 	movhi	zero,4426
   4525c:	000452b4 	movhi	zero,4426
   45260:	000452b4 	movhi	zero,4426
   45264:	000452b4 	movhi	zero,4426
   45268:	000452b4 	movhi	zero,4426
   4526c:	000452b4 	movhi	zero,4426
   45270:	000452b4 	movhi	zero,4426
   45274:	000452dc 	xori	zero,zero,4427
   45278:	000452bc 	xorhi	zero,zero,4426
   4527c:	000452bc 	xorhi	zero,zero,4426
   45280:	000452bc 	xorhi	zero,zero,4426
   45284:	000452dc 	xori	zero,zero,4427
   45288:	000452bc 	xorhi	zero,zero,4426
   4528c:	000452bc 	xorhi	zero,zero,4426
   45290:	000452b4 	movhi	zero,4426
   45294:	000452b4 	movhi	zero,4426
   45298:	000452b4 	movhi	zero,4426
   4529c:	000452b4 	movhi	zero,4426
   452a0:	000452b4 	movhi	zero,4426
   452a4:	000452bc 	xorhi	zero,zero,4426
   452a8:	000452bc 	xorhi	zero,zero,4426
   452ac:	000452b4 	movhi	zero,4426
   452b0:	000452b4 	movhi	zero,4426
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   452b4:	0009883a 	mov	r4,zero
   452b8:	00451a00 	call	451a0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   452bc:	00800584 	movi	r2,22
   452c0:	e0bffc15 	stw	r2,-16(fp)
   452c4:	00000506 	br	452dc <kill+0xfc>
    }
  }

  else if (pid > 0)
   452c8:	e0bffd17 	ldw	r2,-12(fp)
   452cc:	10800050 	cmplti	r2,r2,1
   452d0:	1000021e 	bne	r2,zero,452dc <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   452d4:	008000c4 	movi	r2,3
   452d8:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   452dc:	e0bffc17 	ldw	r2,-16(fp)
   452e0:	1005003a 	cmpeq	r2,r2,zero
   452e4:	1000071e 	bne	r2,zero,45304 <kill+0x124>
  {
    ALT_ERRNO = status;
   452e8:	00453200 	call	45320 <alt_get_errno>
   452ec:	1007883a 	mov	r3,r2
   452f0:	e0bffc17 	ldw	r2,-16(fp)
   452f4:	18800015 	stw	r2,0(r3)
    return -1;
   452f8:	00bfffc4 	movi	r2,-1
   452fc:	e0bfff15 	stw	r2,-4(fp)
   45300:	00000106 	br	45308 <kill+0x128>
  }

  return 0;
   45304:	e03fff15 	stw	zero,-4(fp)
   45308:	e0bfff17 	ldw	r2,-4(fp)
}
   4530c:	e037883a 	mov	sp,fp
   45310:	dfc00117 	ldw	ra,4(sp)
   45314:	df000017 	ldw	fp,0(sp)
   45318:	dec00204 	addi	sp,sp,8
   4531c:	f800283a 	ret

00045320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45320:	defffd04 	addi	sp,sp,-12
   45324:	dfc00215 	stw	ra,8(sp)
   45328:	df000115 	stw	fp,4(sp)
   4532c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   45330:	00800134 	movhi	r2,4
   45334:	10996f04 	addi	r2,r2,26044
   45338:	10800017 	ldw	r2,0(r2)
   4533c:	1005003a 	cmpeq	r2,r2,zero
   45340:	1000061e 	bne	r2,zero,4535c <alt_get_errno+0x3c>
   45344:	00800134 	movhi	r2,4
   45348:	10996f04 	addi	r2,r2,26044
   4534c:	10800017 	ldw	r2,0(r2)
   45350:	103ee83a 	callr	r2
   45354:	e0bfff15 	stw	r2,-4(fp)
   45358:	00000306 	br	45368 <alt_get_errno+0x48>
   4535c:	00800134 	movhi	r2,4
   45360:	109ac604 	addi	r2,r2,27416
   45364:	e0bfff15 	stw	r2,-4(fp)
   45368:	e0bfff17 	ldw	r2,-4(fp)
}
   4536c:	e037883a 	mov	sp,fp
   45370:	dfc00117 	ldw	ra,4(sp)
   45374:	df000017 	ldw	fp,0(sp)
   45378:	dec00204 	addi	sp,sp,8
   4537c:	f800283a 	ret

00045380 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   45380:	defffe04 	addi	sp,sp,-8
   45384:	dfc00115 	stw	ra,4(sp)
   45388:	df000015 	stw	fp,0(sp)
   4538c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   45390:	01000134 	movhi	r4,4
   45394:	21197004 	addi	r4,r4,26048
   45398:	01400134 	movhi	r5,4
   4539c:	29582704 	addi	r5,r5,24732
   453a0:	01800134 	movhi	r6,4
   453a4:	31997004 	addi	r6,r6,26048
   453a8:	00454000 	call	45400 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   453ac:	01000134 	movhi	r4,4
   453b0:	21000804 	addi	r4,r4,32
   453b4:	01400134 	movhi	r5,4
   453b8:	29400804 	addi	r5,r5,32
   453bc:	01800134 	movhi	r6,4
   453c0:	31800804 	addi	r6,r6,32
   453c4:	00454000 	call	45400 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   453c8:	01000134 	movhi	r4,4
   453cc:	21179d04 	addi	r4,r4,24180
   453d0:	01400134 	movhi	r5,4
   453d4:	29579d04 	addi	r5,r5,24180
   453d8:	01800134 	movhi	r6,4
   453dc:	31982704 	addi	r6,r6,24732
   453e0:	00454000 	call	45400 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   453e4:	004596c0 	call	4596c <alt_dcache_flush_all>
  alt_icache_flush_all();
   453e8:	0045a500 	call	45a50 <alt_icache_flush_all>
}
   453ec:	e037883a 	mov	sp,fp
   453f0:	dfc00117 	ldw	ra,4(sp)
   453f4:	df000017 	ldw	fp,0(sp)
   453f8:	dec00204 	addi	sp,sp,8
   453fc:	f800283a 	ret

00045400 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   45400:	defffc04 	addi	sp,sp,-16
   45404:	df000315 	stw	fp,12(sp)
   45408:	df000304 	addi	fp,sp,12
   4540c:	e13ffd15 	stw	r4,-12(fp)
   45410:	e17ffe15 	stw	r5,-8(fp)
   45414:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   45418:	e0fffe17 	ldw	r3,-8(fp)
   4541c:	e0bffd17 	ldw	r2,-12(fp)
   45420:	18800e26 	beq	r3,r2,4545c <alt_load_section+0x5c>
  {
    while( to != end )
   45424:	00000a06 	br	45450 <alt_load_section+0x50>
    {
      *to++ = *from++;
   45428:	e0bffd17 	ldw	r2,-12(fp)
   4542c:	10c00017 	ldw	r3,0(r2)
   45430:	e0bffe17 	ldw	r2,-8(fp)
   45434:	10c00015 	stw	r3,0(r2)
   45438:	e0bffe17 	ldw	r2,-8(fp)
   4543c:	10800104 	addi	r2,r2,4
   45440:	e0bffe15 	stw	r2,-8(fp)
   45444:	e0bffd17 	ldw	r2,-12(fp)
   45448:	10800104 	addi	r2,r2,4
   4544c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   45450:	e0fffe17 	ldw	r3,-8(fp)
   45454:	e0bfff17 	ldw	r2,-4(fp)
   45458:	18bff31e 	bne	r3,r2,45428 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4545c:	e037883a 	mov	sp,fp
   45460:	df000017 	ldw	fp,0(sp)
   45464:	dec00104 	addi	sp,sp,4
   45468:	f800283a 	ret

0004546c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4546c:	defffd04 	addi	sp,sp,-12
   45470:	dfc00215 	stw	ra,8(sp)
   45474:	df000115 	stw	fp,4(sp)
   45478:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4547c:	0009883a 	mov	r4,zero
   45480:	004565c0 	call	4565c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   45484:	00456900 	call	45690 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   45488:	00459880 	call	45988 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4548c:	01000134 	movhi	r4,4
   45490:	21167b04 	addi	r4,r4,23020
   45494:	0045a8c0 	call	45a8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   45498:	d1216617 	ldw	r4,-31336(gp)
   4549c:	d1616717 	ldw	r5,-31332(gp)
   454a0:	d1a16817 	ldw	r6,-31328(gp)
   454a4:	00421b40 	call	421b4 <main>
   454a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   454ac:	01000044 	movi	r4,1
   454b0:	00458d00 	call	458d0 <close>
  exit (result);
   454b4:	e13fff17 	ldw	r4,-4(fp)
   454b8:	0045aa00 	call	45aa0 <exit>

000454bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   454bc:	defffe04 	addi	sp,sp,-8
   454c0:	df000115 	stw	fp,4(sp)
   454c4:	df000104 	addi	fp,sp,4
   454c8:	e13fff15 	stw	r4,-4(fp)
}
   454cc:	e037883a 	mov	sp,fp
   454d0:	df000017 	ldw	fp,0(sp)
   454d4:	dec00104 	addi	sp,sp,4
   454d8:	f800283a 	ret

000454dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   454dc:	defffe04 	addi	sp,sp,-8
   454e0:	df000115 	stw	fp,4(sp)
   454e4:	df000104 	addi	fp,sp,4
   454e8:	e13fff15 	stw	r4,-4(fp)
}
   454ec:	e037883a 	mov	sp,fp
   454f0:	df000017 	ldw	fp,0(sp)
   454f4:	dec00104 	addi	sp,sp,4
   454f8:	f800283a 	ret

000454fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   454fc:	defffb04 	addi	sp,sp,-20
   45500:	dfc00415 	stw	ra,16(sp)
   45504:	df000315 	stw	fp,12(sp)
   45508:	df000304 	addi	fp,sp,12
   4550c:	e13ffe15 	stw	r4,-8(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   45510:	e0bffe17 	ldw	r2,-8(fp)
   45514:	1007883a 	mov	r3,r2
   45518:	00bfffc4 	movi	r2,-1
   4551c:	1884703a 	and	r2,r3,r2
   45520:	e0bffd05 	stb	r2,-12(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   45524:	01000134 	movhi	r4,4
   45528:	21196d04 	addi	r4,r4,26036
   4552c:	e17ffd04 	addi	r5,fp,-12
   45530:	01800044 	movi	r6,1
   45534:	000f883a 	mov	r7,zero
   45538:	00456d00 	call	456d0 <altera_avalon_jtag_uart_write>
   4553c:	10bfffd8 	cmpnei	r2,r2,-1
   45540:	1000031e 	bne	r2,zero,45550 <alt_putchar+0x54>
        return -1;
   45544:	00bfffc4 	movi	r2,-1
   45548:	e0bfff15 	stw	r2,-4(fp)
   4554c:	00000206 	br	45558 <alt_putchar+0x5c>
    }
    return c;
   45550:	e0bffe17 	ldw	r2,-8(fp)
   45554:	e0bfff15 	stw	r2,-4(fp)
   45558:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
}
   4555c:	e037883a 	mov	sp,fp
   45560:	dfc00117 	ldw	ra,4(sp)
   45564:	df000017 	ldw	fp,0(sp)
   45568:	dec00204 	addi	sp,sp,8
   4556c:	f800283a 	ret

00045570 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   45570:	defff804 	addi	sp,sp,-32
   45574:	df000715 	stw	fp,28(sp)
   45578:	df000704 	addi	fp,sp,28
   4557c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45580:	0005303a 	rdctl	r2,status
   45584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45588:	e0fffb17 	ldw	r3,-20(fp)
   4558c:	00bfff84 	movi	r2,-2
   45590:	1884703a 	and	r2,r3,r2
   45594:	1001703a 	wrctl	status,r2
  
  return context;
   45598:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4559c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   455a0:	d0a00b17 	ldw	r2,-32724(gp)
   455a4:	10c000c4 	addi	r3,r2,3
   455a8:	00bfff04 	movi	r2,-4
   455ac:	1884703a 	and	r2,r3,r2
   455b0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   455b4:	d0e00b17 	ldw	r3,-32724(gp)
   455b8:	e0bffe17 	ldw	r2,-8(fp)
   455bc:	1887883a 	add	r3,r3,r2
   455c0:	008001b4 	movhi	r2,6
   455c4:	10a1a804 	addi	r2,r2,-31072
   455c8:	10c0072e 	bgeu	r2,r3,455e8 <sbrk+0x78>
   455cc:	e0bffd17 	ldw	r2,-12(fp)
   455d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   455d4:	e0bffa17 	ldw	r2,-24(fp)
   455d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   455dc:	00bfffc4 	movi	r2,-1
   455e0:	e0bfff15 	stw	r2,-4(fp)
   455e4:	00000c06 	br	45618 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   455e8:	d0a00b17 	ldw	r2,-32724(gp)
   455ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   455f0:	d0e00b17 	ldw	r3,-32724(gp)
   455f4:	e0bffe17 	ldw	r2,-8(fp)
   455f8:	1885883a 	add	r2,r3,r2
   455fc:	d0a00b15 	stw	r2,-32724(gp)
   45600:	e0bffd17 	ldw	r2,-12(fp)
   45604:	e0bff915 	stw	r2,-28(fp)
   45608:	e0bff917 	ldw	r2,-28(fp)
   4560c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   45610:	e0bffc17 	ldw	r2,-16(fp)
   45614:	e0bfff15 	stw	r2,-4(fp)
   45618:	e0bfff17 	ldw	r2,-4(fp)
} 
   4561c:	e037883a 	mov	sp,fp
   45620:	df000017 	ldw	fp,0(sp)
   45624:	dec00104 	addi	sp,sp,4
   45628:	f800283a 	ret

0004562c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4562c:	defffd04 	addi	sp,sp,-12
   45630:	dfc00215 	stw	ra,8(sp)
   45634:	df000115 	stw	fp,4(sp)
   45638:	df000104 	addi	fp,sp,4
   4563c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   45640:	e13fff17 	ldw	r4,-4(fp)
   45644:	00457740 	call	45774 <alt_busy_sleep>
}
   45648:	e037883a 	mov	sp,fp
   4564c:	dfc00117 	ldw	ra,4(sp)
   45650:	df000017 	ldw	fp,0(sp)
   45654:	dec00204 	addi	sp,sp,8
   45658:	f800283a 	ret

0004565c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4565c:	defffd04 	addi	sp,sp,-12
   45660:	dfc00215 	stw	ra,8(sp)
   45664:	df000115 	stw	fp,4(sp)
   45668:	df000104 	addi	fp,sp,4
   4566c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   45670:	0045a6c0 	call	45a6c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   45674:	00800044 	movi	r2,1
   45678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4567c:	e037883a 	mov	sp,fp
   45680:	dfc00117 	ldw	ra,4(sp)
   45684:	df000017 	ldw	fp,0(sp)
   45688:	dec00204 	addi	sp,sp,8
   4568c:	f800283a 	ret

00045690 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   45690:	deffff04 	addi	sp,sp,-4
   45694:	df000015 	stw	fp,0(sp)
   45698:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   4569c:	00c00134 	movhi	r3,4
   456a0:	18daca04 	addi	r3,r3,27432
   456a4:	00842004 	movi	r2,4224
   456a8:	18800015 	stw	r2,0(r3)
   456ac:	00c00134 	movhi	r3,4
   456b0:	18dacb04 	addi	r3,r3,27436
   456b4:	0080bef4 	movhi	r2,763
   456b8:	10bc2004 	addi	r2,r2,-3968
   456bc:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    FIFOED_AVALON_UART_INIT ( UART_WIFI, uart_wifi);
}
   456c0:	e037883a 	mov	sp,fp
   456c4:	df000017 	ldw	fp,0(sp)
   456c8:	dec00104 	addi	sp,sp,4
   456cc:	f800283a 	ret

000456d0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   456d0:	defff904 	addi	sp,sp,-28
   456d4:	df000615 	stw	fp,24(sp)
   456d8:	df000604 	addi	fp,sp,24
   456dc:	e13ffc15 	stw	r4,-16(fp)
   456e0:	e17ffd15 	stw	r5,-12(fp)
   456e4:	e1bffe15 	stw	r6,-8(fp)
   456e8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   456ec:	e0bffc17 	ldw	r2,-16(fp)
   456f0:	10800017 	ldw	r2,0(r2)
   456f4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   456f8:	e0bffe17 	ldw	r2,-8(fp)
   456fc:	1007883a 	mov	r3,r2
   45700:	e0bffd17 	ldw	r2,-12(fp)
   45704:	10c5883a 	add	r2,r2,r3
   45708:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   4570c:	00001106 	br	45754 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   45710:	e0bffb17 	ldw	r2,-20(fp)
   45714:	10800104 	addi	r2,r2,4
   45718:	10800037 	ldwio	r2,0(r2)
   4571c:	10bfffec 	andhi	r2,r2,65535
   45720:	1005003a 	cmpeq	r2,r2,zero
   45724:	10000b1e 	bne	r2,zero,45754 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   45728:	e13ffb17 	ldw	r4,-20(fp)
   4572c:	e0bffd17 	ldw	r2,-12(fp)
   45730:	10800003 	ldbu	r2,0(r2)
   45734:	10c03fcc 	andi	r3,r2,255
   45738:	18c0201c 	xori	r3,r3,128
   4573c:	18ffe004 	addi	r3,r3,-128
   45740:	e0bffd17 	ldw	r2,-12(fp)
   45744:	10800044 	addi	r2,r2,1
   45748:	e0bffd15 	stw	r2,-12(fp)
   4574c:	2005883a 	mov	r2,r4
   45750:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   45754:	e0fffd17 	ldw	r3,-12(fp)
   45758:	e0bffa17 	ldw	r2,-24(fp)
   4575c:	18bfec36 	bltu	r3,r2,45710 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   45760:	e0bffe17 	ldw	r2,-8(fp)
}
   45764:	e037883a 	mov	sp,fp
   45768:	df000017 	ldw	fp,0(sp)
   4576c:	dec00104 	addi	sp,sp,4
   45770:	f800283a 	ret

00045774 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   45774:	defffa04 	addi	sp,sp,-24
   45778:	dfc00515 	stw	ra,20(sp)
   4577c:	df000415 	stw	fp,16(sp)
   45780:	df000404 	addi	fp,sp,16
   45784:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   45788:	00800244 	movi	r2,9
   4578c:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   45790:	e13ffc17 	ldw	r4,-16(fp)
   45794:	014003f4 	movhi	r5,15
   45798:	29509004 	addi	r5,r5,16960
   4579c:	0043c400 	call	43c40 <__mulsi3>
   457a0:	100b883a 	mov	r5,r2
   457a4:	0100bef4 	movhi	r4,763
   457a8:	213c2004 	addi	r4,r4,-3968
   457ac:	0043c300 	call	43c30 <__udivsi3>
   457b0:	100b883a 	mov	r5,r2
   457b4:	01200034 	movhi	r4,32768
   457b8:	213fffc4 	addi	r4,r4,-1
   457bc:	0043c300 	call	43c30 <__udivsi3>
   457c0:	100b883a 	mov	r5,r2
   457c4:	e13fff17 	ldw	r4,-4(fp)
   457c8:	0043c300 	call	43c30 <__udivsi3>
   457cc:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   457d0:	e0bffd17 	ldw	r2,-12(fp)
   457d4:	1005003a 	cmpeq	r2,r2,zero
   457d8:	10002a1e 	bne	r2,zero,45884 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   457dc:	e03ffe15 	stw	zero,-8(fp)
   457e0:	00001706 	br	45840 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   457e4:	00a00034 	movhi	r2,32768
   457e8:	10bfffc4 	addi	r2,r2,-1
   457ec:	10bfffc4 	addi	r2,r2,-1
   457f0:	103ffe1e 	bne	r2,zero,457ec <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   457f4:	e13ffc17 	ldw	r4,-16(fp)
   457f8:	014003f4 	movhi	r5,15
   457fc:	29509004 	addi	r5,r5,16960
   45800:	0043c400 	call	43c40 <__mulsi3>
   45804:	100b883a 	mov	r5,r2
   45808:	0100bef4 	movhi	r4,763
   4580c:	213c2004 	addi	r4,r4,-3968
   45810:	0043c300 	call	43c30 <__udivsi3>
   45814:	100b883a 	mov	r5,r2
   45818:	01200034 	movhi	r4,32768
   4581c:	213fffc4 	addi	r4,r4,-1
   45820:	0043c300 	call	43c30 <__udivsi3>
   45824:	1007883a 	mov	r3,r2
   45828:	e0bfff17 	ldw	r2,-4(fp)
   4582c:	10c5c83a 	sub	r2,r2,r3
   45830:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   45834:	e0bffe17 	ldw	r2,-8(fp)
   45838:	10800044 	addi	r2,r2,1
   4583c:	e0bffe15 	stw	r2,-8(fp)
   45840:	e0fffe17 	ldw	r3,-8(fp)
   45844:	e0bffd17 	ldw	r2,-12(fp)
   45848:	18bfe616 	blt	r3,r2,457e4 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4584c:	e13ffc17 	ldw	r4,-16(fp)
   45850:	014003f4 	movhi	r5,15
   45854:	29509004 	addi	r5,r5,16960
   45858:	0043c400 	call	43c40 <__mulsi3>
   4585c:	100b883a 	mov	r5,r2
   45860:	0100bef4 	movhi	r4,763
   45864:	213c2004 	addi	r4,r4,-3968
   45868:	0043c300 	call	43c30 <__udivsi3>
   4586c:	1009883a 	mov	r4,r2
   45870:	e17fff17 	ldw	r5,-4(fp)
   45874:	0043c400 	call	43c40 <__mulsi3>
   45878:	10bfffc4 	addi	r2,r2,-1
   4587c:	103ffe1e 	bne	r2,zero,45878 <alt_busy_sleep+0x104>
   45880:	00000d06 	br	458b8 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45884:	e13ffc17 	ldw	r4,-16(fp)
   45888:	014003f4 	movhi	r5,15
   4588c:	29509004 	addi	r5,r5,16960
   45890:	0043c400 	call	43c40 <__mulsi3>
   45894:	100b883a 	mov	r5,r2
   45898:	0100bef4 	movhi	r4,763
   4589c:	213c2004 	addi	r4,r4,-3968
   458a0:	0043c300 	call	43c30 <__udivsi3>
   458a4:	1009883a 	mov	r4,r2
   458a8:	e17fff17 	ldw	r5,-4(fp)
   458ac:	0043c400 	call	43c40 <__mulsi3>
   458b0:	10bfffc4 	addi	r2,r2,-1
   458b4:	00bffe16 	blt	zero,r2,458b0 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   458b8:	0005883a 	mov	r2,zero
}
   458bc:	e037883a 	mov	sp,fp
   458c0:	dfc00117 	ldw	ra,4(sp)
   458c4:	df000017 	ldw	fp,0(sp)
   458c8:	dec00204 	addi	sp,sp,8
   458cc:	f800283a 	ret

000458d0 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   458d0:	defffd04 	addi	sp,sp,-12
   458d4:	dfc00215 	stw	ra,8(sp)
   458d8:	df000115 	stw	fp,4(sp)
   458dc:	df000104 	addi	fp,sp,4
   458e0:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   458e4:	004590c0 	call	4590c <alt_get_errno>
   458e8:	1007883a 	mov	r3,r2
   458ec:	00801604 	movi	r2,88
   458f0:	18800015 	stw	r2,0(r3)
  return -1;
   458f4:	00bfffc4 	movi	r2,-1
}
   458f8:	e037883a 	mov	sp,fp
   458fc:	dfc00117 	ldw	ra,4(sp)
   45900:	df000017 	ldw	fp,0(sp)
   45904:	dec00204 	addi	sp,sp,8
   45908:	f800283a 	ret

0004590c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4590c:	defffd04 	addi	sp,sp,-12
   45910:	dfc00215 	stw	ra,8(sp)
   45914:	df000115 	stw	fp,4(sp)
   45918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4591c:	00800134 	movhi	r2,4
   45920:	10996f04 	addi	r2,r2,26044
   45924:	10800017 	ldw	r2,0(r2)
   45928:	1005003a 	cmpeq	r2,r2,zero
   4592c:	1000061e 	bne	r2,zero,45948 <alt_get_errno+0x3c>
   45930:	00800134 	movhi	r2,4
   45934:	10996f04 	addi	r2,r2,26044
   45938:	10800017 	ldw	r2,0(r2)
   4593c:	103ee83a 	callr	r2
   45940:	e0bfff15 	stw	r2,-4(fp)
   45944:	00000306 	br	45954 <alt_get_errno+0x48>
   45948:	00800134 	movhi	r2,4
   4594c:	109ac604 	addi	r2,r2,27416
   45950:	e0bfff15 	stw	r2,-4(fp)
   45954:	e0bfff17 	ldw	r2,-4(fp)
}
   45958:	e037883a 	mov	sp,fp
   4595c:	dfc00117 	ldw	ra,4(sp)
   45960:	df000017 	ldw	fp,0(sp)
   45964:	dec00204 	addi	sp,sp,8
   45968:	f800283a 	ret

0004596c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4596c:	deffff04 	addi	sp,sp,-4
   45970:	df000015 	stw	fp,0(sp)
   45974:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   45978:	e037883a 	mov	sp,fp
   4597c:	df000017 	ldw	fp,0(sp)
   45980:	dec00104 	addi	sp,sp,4
   45984:	f800283a 	ret

00045988 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   45988:	defffd04 	addi	sp,sp,-12
   4598c:	dfc00215 	stw	ra,8(sp)
   45990:	df000115 	stw	fp,4(sp)
   45994:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   45998:	00bfff04 	movi	r2,-4
   4599c:	00c00134 	movhi	r3,4
   459a0:	18d79d04 	addi	r3,r3,24180
   459a4:	1885883a 	add	r2,r3,r2
   459a8:	e0bfff15 	stw	r2,-4(fp)
   459ac:	00000606 	br	459c8 <_do_ctors+0x40>
        (*ctor) (); 
   459b0:	e0bfff17 	ldw	r2,-4(fp)
   459b4:	10800017 	ldw	r2,0(r2)
   459b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   459bc:	e0bfff17 	ldw	r2,-4(fp)
   459c0:	10bfff04 	addi	r2,r2,-4
   459c4:	e0bfff15 	stw	r2,-4(fp)
   459c8:	e0ffff17 	ldw	r3,-4(fp)
   459cc:	00800134 	movhi	r2,4
   459d0:	10979b04 	addi	r2,r2,24172
   459d4:	18bff62e 	bgeu	r3,r2,459b0 <_do_ctors+0x28>
        (*ctor) (); 
}
   459d8:	e037883a 	mov	sp,fp
   459dc:	dfc00117 	ldw	ra,4(sp)
   459e0:	df000017 	ldw	fp,0(sp)
   459e4:	dec00204 	addi	sp,sp,8
   459e8:	f800283a 	ret

000459ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   459ec:	defffd04 	addi	sp,sp,-12
   459f0:	dfc00215 	stw	ra,8(sp)
   459f4:	df000115 	stw	fp,4(sp)
   459f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   459fc:	00bfff04 	movi	r2,-4
   45a00:	00c00134 	movhi	r3,4
   45a04:	18d79d04 	addi	r3,r3,24180
   45a08:	1885883a 	add	r2,r3,r2
   45a0c:	e0bfff15 	stw	r2,-4(fp)
   45a10:	00000606 	br	45a2c <_do_dtors+0x40>
        (*dtor) (); 
   45a14:	e0bfff17 	ldw	r2,-4(fp)
   45a18:	10800017 	ldw	r2,0(r2)
   45a1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45a20:	e0bfff17 	ldw	r2,-4(fp)
   45a24:	10bfff04 	addi	r2,r2,-4
   45a28:	e0bfff15 	stw	r2,-4(fp)
   45a2c:	e0ffff17 	ldw	r3,-4(fp)
   45a30:	00800134 	movhi	r2,4
   45a34:	10979d04 	addi	r2,r2,24180
   45a38:	18bff62e 	bgeu	r3,r2,45a14 <_do_dtors+0x28>
        (*dtor) (); 
}
   45a3c:	e037883a 	mov	sp,fp
   45a40:	dfc00117 	ldw	ra,4(sp)
   45a44:	df000017 	ldw	fp,0(sp)
   45a48:	dec00204 	addi	sp,sp,8
   45a4c:	f800283a 	ret

00045a50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   45a50:	deffff04 	addi	sp,sp,-4
   45a54:	df000015 	stw	fp,0(sp)
   45a58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45a5c:	e037883a 	mov	sp,fp
   45a60:	df000017 	ldw	fp,0(sp)
   45a64:	dec00104 	addi	sp,sp,4
   45a68:	f800283a 	ret

00045a6c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   45a6c:	deffff04 	addi	sp,sp,-4
   45a70:	df000015 	stw	fp,0(sp)
   45a74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45a78:	000170fa 	wrctl	ienable,zero
}
   45a7c:	e037883a 	mov	sp,fp
   45a80:	df000017 	ldw	fp,0(sp)
   45a84:	dec00104 	addi	sp,sp,4
   45a88:	f800283a 	ret

00045a8c <atexit>:
   45a8c:	200b883a 	mov	r5,r4
   45a90:	000d883a 	mov	r6,zero
   45a94:	0009883a 	mov	r4,zero
   45a98:	000f883a 	mov	r7,zero
   45a9c:	0045ac01 	jmpi	45ac0 <__register_exitproc>

00045aa0 <exit>:
   45aa0:	defffe04 	addi	sp,sp,-8
   45aa4:	dc400015 	stw	r17,0(sp)
   45aa8:	000b883a 	mov	r5,zero
   45aac:	2023883a 	mov	r17,r4
   45ab0:	dfc00115 	stw	ra,4(sp)
   45ab4:	0045c300 	call	45c30 <__call_exitprocs>
   45ab8:	8809883a 	mov	r4,r17
   45abc:	00451a00 	call	451a0 <_exit>

00045ac0 <__register_exitproc>:
   45ac0:	defff904 	addi	sp,sp,-28
   45ac4:	00800134 	movhi	r2,4
   45ac8:	10996b04 	addi	r2,r2,26028
   45acc:	dc400115 	stw	r17,4(sp)
   45ad0:	14400017 	ldw	r17,0(r2)
   45ad4:	dc000015 	stw	r16,0(sp)
   45ad8:	dd400515 	stw	r21,20(sp)
   45adc:	8c000c17 	ldw	r16,48(r17)
   45ae0:	dd000415 	stw	r20,16(sp)
   45ae4:	dcc00315 	stw	r19,12(sp)
   45ae8:	dc800215 	stw	r18,8(sp)
   45aec:	dfc00615 	stw	ra,24(sp)
   45af0:	2025883a 	mov	r18,r4
   45af4:	282b883a 	mov	r21,r5
   45af8:	3029883a 	mov	r20,r6
   45afc:	3827883a 	mov	r19,r7
   45b00:	80002626 	beq	r16,zero,45b9c <__register_exitproc+0xdc>
   45b04:	81400117 	ldw	r5,4(r16)
   45b08:	008007c4 	movi	r2,31
   45b0c:	11403716 	blt	r2,r5,45bec <__register_exitproc+0x12c>
   45b10:	90002026 	beq	r18,zero,45b94 <__register_exitproc+0xd4>
   45b14:	81802217 	ldw	r6,136(r16)
   45b18:	30002926 	beq	r6,zero,45bc0 <__register_exitproc+0x100>
   45b1c:	81400117 	ldw	r5,4(r16)
   45b20:	00c00044 	movi	r3,1
   45b24:	31004017 	ldw	r4,256(r6)
   45b28:	1946983a 	sll	r3,r3,r5
   45b2c:	2945883a 	add	r2,r5,r5
   45b30:	1085883a 	add	r2,r2,r2
   45b34:	1185883a 	add	r2,r2,r6
   45b38:	20c8b03a 	or	r4,r4,r3
   45b3c:	14c02015 	stw	r19,128(r2)
   45b40:	15000015 	stw	r20,0(r2)
   45b44:	00800084 	movi	r2,2
   45b48:	31004015 	stw	r4,256(r6)
   45b4c:	90801826 	beq	r18,r2,45bb0 <__register_exitproc+0xf0>
   45b50:	2945883a 	add	r2,r5,r5
   45b54:	1085883a 	add	r2,r2,r2
   45b58:	1405883a 	add	r2,r2,r16
   45b5c:	28c00044 	addi	r3,r5,1
   45b60:	0009883a 	mov	r4,zero
   45b64:	15400215 	stw	r21,8(r2)
   45b68:	80c00115 	stw	r3,4(r16)
   45b6c:	2005883a 	mov	r2,r4
   45b70:	dfc00617 	ldw	ra,24(sp)
   45b74:	dd400517 	ldw	r21,20(sp)
   45b78:	dd000417 	ldw	r20,16(sp)
   45b7c:	dcc00317 	ldw	r19,12(sp)
   45b80:	dc800217 	ldw	r18,8(sp)
   45b84:	dc400117 	ldw	r17,4(sp)
   45b88:	dc000017 	ldw	r16,0(sp)
   45b8c:	dec00704 	addi	sp,sp,28
   45b90:	f800283a 	ret
   45b94:	81400117 	ldw	r5,4(r16)
   45b98:	003fed06 	br	45b50 <__register_exitproc+0x90>
   45b9c:	00800134 	movhi	r2,4
   45ba0:	109cdb04 	addi	r2,r2,29548
   45ba4:	1021883a 	mov	r16,r2
   45ba8:	88800c15 	stw	r2,48(r17)
   45bac:	003fd506 	br	45b04 <__register_exitproc+0x44>
   45bb0:	30804117 	ldw	r2,260(r6)
   45bb4:	10c4b03a 	or	r2,r2,r3
   45bb8:	30804115 	stw	r2,260(r6)
   45bbc:	003fe406 	br	45b50 <__register_exitproc+0x90>
   45bc0:	00800134 	movhi	r2,4
   45bc4:	10907b04 	addi	r2,r2,16876
   45bc8:	10000b26 	beq	r2,zero,45bf8 <__register_exitproc+0x138>
   45bcc:	01004204 	movi	r4,264
   45bd0:	103ee83a 	callr	r2
   45bd4:	10000826 	beq	r2,zero,45bf8 <__register_exitproc+0x138>
   45bd8:	100d883a 	mov	r6,r2
   45bdc:	10004015 	stw	zero,256(r2)
   45be0:	10004115 	stw	zero,260(r2)
   45be4:	80802215 	stw	r2,136(r16)
   45be8:	003fcc06 	br	45b1c <__register_exitproc+0x5c>
   45bec:	00800134 	movhi	r2,4
   45bf0:	10907b04 	addi	r2,r2,16876
   45bf4:	1000021e 	bne	r2,zero,45c00 <__register_exitproc+0x140>
   45bf8:	013fffc4 	movi	r4,-1
   45bfc:	003fdb06 	br	45b6c <__register_exitproc+0xac>
   45c00:	01002304 	movi	r4,140
   45c04:	103ee83a 	callr	r2
   45c08:	1007883a 	mov	r3,r2
   45c0c:	103ffa26 	beq	r2,zero,45bf8 <__register_exitproc+0x138>
   45c10:	88800c17 	ldw	r2,48(r17)
   45c14:	1821883a 	mov	r16,r3
   45c18:	18000115 	stw	zero,4(r3)
   45c1c:	18800015 	stw	r2,0(r3)
   45c20:	88c00c15 	stw	r3,48(r17)
   45c24:	903fdb26 	beq	r18,zero,45b94 <__register_exitproc+0xd4>
   45c28:	003fba06 	br	45b14 <__register_exitproc+0x54>

00045c2c <register_fini>:
   45c2c:	f800283a 	ret

00045c30 <__call_exitprocs>:
   45c30:	defff304 	addi	sp,sp,-52
   45c34:	00800134 	movhi	r2,4
   45c38:	10996b04 	addi	r2,r2,26028
   45c3c:	df000b15 	stw	fp,44(sp)
   45c40:	17000017 	ldw	fp,0(r2)
   45c44:	00800134 	movhi	r2,4
   45c48:	10907604 	addi	r2,r2,16856
   45c4c:	1005003a 	cmpeq	r2,r2,zero
   45c50:	d8800215 	stw	r2,8(sp)
   45c54:	e0800c04 	addi	r2,fp,48
   45c58:	dd800915 	stw	r22,36(sp)
   45c5c:	dd400815 	stw	r21,32(sp)
   45c60:	dfc00c15 	stw	ra,48(sp)
   45c64:	ddc00a15 	stw	r23,40(sp)
   45c68:	dd000715 	stw	r20,28(sp)
   45c6c:	dcc00615 	stw	r19,24(sp)
   45c70:	dc800515 	stw	r18,20(sp)
   45c74:	dc400415 	stw	r17,16(sp)
   45c78:	dc000315 	stw	r16,12(sp)
   45c7c:	282d883a 	mov	r22,r5
   45c80:	d9000115 	stw	r4,4(sp)
   45c84:	d8800015 	stw	r2,0(sp)
   45c88:	282b003a 	cmpeq	r21,r5,zero
   45c8c:	e4400c17 	ldw	r17,48(fp)
   45c90:	88001226 	beq	r17,zero,45cdc <__call_exitprocs+0xac>
   45c94:	ddc00017 	ldw	r23,0(sp)
   45c98:	88800117 	ldw	r2,4(r17)
   45c9c:	8c802217 	ldw	r18,136(r17)
   45ca0:	143fffc4 	addi	r16,r2,-1
   45ca4:	80000b16 	blt	r16,zero,45cd4 <__call_exitprocs+0xa4>
   45ca8:	9027003a 	cmpeq	r19,r18,zero
   45cac:	a800171e 	bne	r21,zero,45d0c <__call_exitprocs+0xdc>
   45cb0:	9800051e 	bne	r19,zero,45cc8 <__call_exitprocs+0x98>
   45cb4:	8409883a 	add	r4,r16,r16
   45cb8:	2105883a 	add	r2,r4,r4
   45cbc:	1485883a 	add	r2,r2,r18
   45cc0:	10c02017 	ldw	r3,128(r2)
   45cc4:	b0c01226 	beq	r22,r3,45d10 <__call_exitprocs+0xe0>
   45cc8:	843fffc4 	addi	r16,r16,-1
   45ccc:	00bfffc4 	movi	r2,-1
   45cd0:	80bff61e 	bne	r16,r2,45cac <__call_exitprocs+0x7c>
   45cd4:	d8800217 	ldw	r2,8(sp)
   45cd8:	10003226 	beq	r2,zero,45da4 <__call_exitprocs+0x174>
   45cdc:	dfc00c17 	ldw	ra,48(sp)
   45ce0:	df000b17 	ldw	fp,44(sp)
   45ce4:	ddc00a17 	ldw	r23,40(sp)
   45ce8:	dd800917 	ldw	r22,36(sp)
   45cec:	dd400817 	ldw	r21,32(sp)
   45cf0:	dd000717 	ldw	r20,28(sp)
   45cf4:	dcc00617 	ldw	r19,24(sp)
   45cf8:	dc800517 	ldw	r18,20(sp)
   45cfc:	dc400417 	ldw	r17,16(sp)
   45d00:	dc000317 	ldw	r16,12(sp)
   45d04:	dec00d04 	addi	sp,sp,52
   45d08:	f800283a 	ret
   45d0c:	8409883a 	add	r4,r16,r16
   45d10:	88c00117 	ldw	r3,4(r17)
   45d14:	2105883a 	add	r2,r4,r4
   45d18:	1445883a 	add	r2,r2,r17
   45d1c:	18ffffc4 	addi	r3,r3,-1
   45d20:	11800217 	ldw	r6,8(r2)
   45d24:	1c001826 	beq	r3,r16,45d88 <__call_exitprocs+0x158>
   45d28:	10000215 	stw	zero,8(r2)
   45d2c:	303fe626 	beq	r6,zero,45cc8 <__call_exitprocs+0x98>
   45d30:	8d000117 	ldw	r20,4(r17)
   45d34:	9800121e 	bne	r19,zero,45d80 <__call_exitprocs+0x150>
   45d38:	00c00044 	movi	r3,1
   45d3c:	1c06983a 	sll	r3,r3,r16
   45d40:	90804017 	ldw	r2,256(r18)
   45d44:	1884703a 	and	r2,r3,r2
   45d48:	10000d26 	beq	r2,zero,45d80 <__call_exitprocs+0x150>
   45d4c:	90804117 	ldw	r2,260(r18)
   45d50:	1884703a 	and	r2,r3,r2
   45d54:	10000e1e 	bne	r2,zero,45d90 <__call_exitprocs+0x160>
   45d58:	2105883a 	add	r2,r4,r4
   45d5c:	1485883a 	add	r2,r2,r18
   45d60:	11400017 	ldw	r5,0(r2)
   45d64:	d9000117 	ldw	r4,4(sp)
   45d68:	303ee83a 	callr	r6
   45d6c:	88800117 	ldw	r2,4(r17)
   45d70:	a0bfc61e 	bne	r20,r2,45c8c <__call_exitprocs+0x5c>
   45d74:	b8800017 	ldw	r2,0(r23)
   45d78:	147fd326 	beq	r2,r17,45cc8 <__call_exitprocs+0x98>
   45d7c:	003fc306 	br	45c8c <__call_exitprocs+0x5c>
   45d80:	303ee83a 	callr	r6
   45d84:	003ff906 	br	45d6c <__call_exitprocs+0x13c>
   45d88:	8c000115 	stw	r16,4(r17)
   45d8c:	003fe706 	br	45d2c <__call_exitprocs+0xfc>
   45d90:	2105883a 	add	r2,r4,r4
   45d94:	1485883a 	add	r2,r2,r18
   45d98:	11000017 	ldw	r4,0(r2)
   45d9c:	303ee83a 	callr	r6
   45da0:	003ff206 	br	45d6c <__call_exitprocs+0x13c>
   45da4:	88800117 	ldw	r2,4(r17)
   45da8:	10000b1e 	bne	r2,zero,45dd8 <__call_exitprocs+0x1a8>
   45dac:	89000017 	ldw	r4,0(r17)
   45db0:	20000a26 	beq	r4,zero,45ddc <__call_exitprocs+0x1ac>
   45db4:	b9000015 	stw	r4,0(r23)
   45db8:	90000226 	beq	r18,zero,45dc4 <__call_exitprocs+0x194>
   45dbc:	9009883a 	mov	r4,r18
   45dc0:	00441d80 	call	441d8 <free>
   45dc4:	8809883a 	mov	r4,r17
   45dc8:	00441d80 	call	441d8 <free>
   45dcc:	bc400017 	ldw	r17,0(r23)
   45dd0:	883fb11e 	bne	r17,zero,45c98 <__call_exitprocs+0x68>
   45dd4:	003fc106 	br	45cdc <__call_exitprocs+0xac>
   45dd8:	89000017 	ldw	r4,0(r17)
   45ddc:	882f883a 	mov	r23,r17
   45de0:	2023883a 	mov	r17,r4
   45de4:	883fac1e 	bne	r17,zero,45c98 <__call_exitprocs+0x68>
   45de8:	003fbc06 	br	45cdc <__call_exitprocs+0xac>
   45dec:	0201ffff 	0x201ffff
   45df0:	883a0000 	call	883a000 <__alt_data_end+0x87e1960>
   45df4:	010d0bff 	0x10d0bff
   45df8:	7f010002 	0x7f010002
   45dfc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e00:	00045fa4 	muli	zero,zero,4478
   45e04:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e08:	010d0bff 	0x10d0bff
   45e0c:	01000004 	movi	r4,0
   45e10:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45e14:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e18:	010d0bff 	0x10d0bff
   45e1c:	01000004 	movi	r4,0
   45e20:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45e24:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e28:	010d0bff 	0x10d0bff
   45e2c:	01000004 	movi	r4,0
   45e30:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45e34:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e38:	010d0bff 	0x10d0bff
   45e3c:	7f010002 	0x7f010002
   45e40:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e44:	00045fa4 	muli	zero,zero,4478
   45e48:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   45e4c:	01090bff 	0x1090bff
   45e50:	7f010002 	0x7f010002
	...
   45e5c:	01090bff 	0x1090bff
   45e60:	7f010002 	0x7f010002
	...
   45e6c:	000400bc 	xorhi	zero,zero,4098
   45e70:	00045c2c 	andhi	zero,zero,4464
