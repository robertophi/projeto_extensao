#include "app.h"
#include "system.h"
#include "sys/alt_stdio.h"
#include <unistd.h>
#define SSID "ColeteWifi"
#define PASSWORD "12345678"
#define COLUMNS 8
#define LINES 4
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
	//retirando wifi      wifi = WiFi::getSingleton();
	compass_vib_value = 255;
	gyroscope_vib_value = 255;
	running.init();
}

App::~App() {
	wifi->stopServer();
}

void App::setup() {
	//retirando wifi   wifi->config(SSID, PASSWORD);
	//retirando wifi   wifi->startServer();
	//fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {

	//	motors->write(output);
	fft->read();

	if(buffer.length() > 0)
		fft->write(buffer.pop());
}


void App::writeCompass(int direction) {
	motors->write((0<<24)|(255<<16)|(255<<8)|(0));
	if(COLUMNS >= 8) {
        return compass8(direction);
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}

void App::compass4(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2) <<8 | compass_vib_value );
        if(direction < 5 && direction != 0)
            motors->write( 0 | (LINES-1) <<16| 1<<8 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
            motors->write( 0 | (LINES-1) <<16 | (COLUMNS-2) << 8 | compass_vib_value/2 );
        return;
    }
    int motor;
    if(direction < 180){
    	motor = direction < 90 ? 1:0;
    	}
    else{
    	motor = direction < 270 ? COLUMNS-1 : COLUMNS-2;
    }
    //int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 << 16 | motor << 8 | compass_vib_value );
}

void App::compass8(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2)<<8 | compass_vib_value );
        if(direction < 5 && direction != 0)
            motors->write( 0 | (LINES-1)<<16 | 3<<8 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
            motors->write( 0 | (LINES-1)<<16 | (COLUMNS-4)<<8 | compass_vib_value/2 );
        return;
    }
    int motor;
    if(direction <= 180) {
        if(direction <= 90) {
            motor = direction <= 45 ? 3 : 2;
        } else {
            motor = direction <= 135 ? 1 : 0;
        }
    } else {
        if(direction < 270) {
            motor = direction < 225 ? COLUMNS-1 : COLUMNS-2;
        } else {
            motor = direction < 315 ? COLUMNS-3 : COLUMNS-4;
        }
    }
    motors->write( 0 | (LINES-1)<<16 | motor<<8 | compass_vib_value );
}


void App::writeGyroscope(int xAngle, int yAngle, int zAngle) {

		int x = find_x(xAngle) << 16;
        int y = defineIndex(yAngle, LINES) << 8;
        zAngle = zAngle < 0 ? zAngle*(-1) : zAngle;
        zAngle = zAngle > 240 ? 240 : zAngle;
        zAngle += 10;
		motors->write((1<<24)|(x)|(y)|(10));
		motors->write((2<<24)|(x)|(y)|(5));
        motors->write( 0 | x | y | zAngle);
    }

void App::find_x(int xAngle){
	int maxAngle = 100;
	int div;
	div = xAngle / (maxAngle/5)
	if(div >= 4){
		return 0;
	}
	else if( div >= 3){
		return 1;
	}
	else if( div >= 2){
		return 2;
	}
	else if( div >= 1){
		return 3;
	}
}



void App::writeAudio(int* freq, int samples) {
	int commom = samples/COLUMNS;
	int summation = 0;
	int pos = 0;
	motors->write_to_next_line();
	motors->write( 0 | 0 | 255 | 0 );
	motors->write( 2 << 24 | 0 | 255 | 1 );
	for(int i = 0; i < samples; i++) {
		summation += freq[i];
		if(i%commom == commom - 1) {
			motors->write((1<<24)| 0 | (pos << 8) |(5));
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
			pos++;
			summation = 0;
		}
	}
}

void App::run() {
	unsigned char *data;
	unsigned int *size;
	char type;
	char readTerminalEclipse;
	int n;

	//Shift amount de 10, Decaimento de 15 e potencia de 255 em cada motor, durante inicialização do programa.
	//CMD - LINHA - COL - VALOR

	motors->write((1<<24)|(255<<16)|(255<<8)|(0));
	motors->write((2<<24)|(255<<16)|(255<<8)|(0));

	motors->write((0<<24)|(255<<16)|(255<<8)|(0));




	//alt_timestamp_start();

	while (1) {
		//Retirando a parte do wifi / timestamp

		/*wifi->receive(data, size);
		char type = data[0];
		if(alt_timestamp() >= 500) {
			running.next();
			motors->write( 1 | 255 << 16 | 255 << 8 | 0); // setting shift amount to instantaneous
			motors->write( 0 | 255 << 16 | 255 << 8 | 0); // setting all motors to not vibrate
			alt_timestamp_start();
		}
		if(running.current != type) {
			continue;
		}
		 	*/


		readTerminalEclipse = alt_getchar();
		type = readTerminalEclipse;
		alt_putchar(readTerminalEclipse);

		while(1){
			readTerminalEclipse  = alt_getchar();
			alt_putchar(readTerminalEclipse);

			if(readTerminalEclipse == 'z'){
				n=0;
				break;
			}
			data[n]=readTerminalEclipse;
			n = n + 1;

		}



		switch (type) {
		case 'k':{
			int i,j,k;
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));

			for(i=0;i<8;i++){
				k=i;
				j=i;
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(i<<8)|(255));
				while(k>=0 && j < 8){
					k=k-1;
					j=j+1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				k=i;
				j=i;
				while(k<8 && j >=0){
					k=k+1;
					j=j-1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
				for(j=0;j<8;j++){
					motors->write((0<<24)|(255<<16)|(255<<8)|(0));
					motors->write((0<<24)|(i<<16)|(j<<8)|(255));
					usleep(150000);
				}
			}


			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(i=0;i<4;i++){
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(255<<8)|(255));
				usleep(450000);
			}

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(j=0;j<8;j++){
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(255<<16)|(j<<8)|(255));
				usleep(300000);
			}
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);



		}
			break;
		case 'q':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			motors->write((0<<24)|(0<<16)|(255<<8)|(255));

		}
			break;
		case 'w':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			motors->write((0<<24)|(1<<16)|(255<<8)|(255));
				}
			break;
		case 'e':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			motors->write((0<<24)|(2<<16)|(255<<8)|(255));				}
			break;
		case 'r':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			motors->write((0<<24)|(3<<16)|(255<<8)|(255));
				}
			break;
		case 'm': { /* motors */
			int linha = (int)(data[1]);
			int coluna = (int)(data[2]);
			alt_putchar('\n');
			alt_putchar(linha);
			alt_putchar(coluna);
			alt_putchar('\n');
//			alt_putstr("Motors received. Sending it to the motors...\n");
			int command = (  (0 << 24) | ((linha-48) << 16) | ((coluna-48) << 8) | (255) );
//			alt_printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			motors->write(command);
		}
			break;
		case 'a': { /*audio*/
//			alt_putstr("Audio received. Sending it to the FFT...\n");
//			alt_printf("%s\n", data);
			//buffer.push(data);
			motors->write(4, 255, 255, 0);


//			|           _
//			|    _     / \
//		____|___/_\___/___\_____
//			|\_/   \_/     \   /
//			|               \_/

			//if(!fft->isProcessing()) {
			//	fft->write(buffer.pop());
			//}


		}
			break;
		case 'c': { /*compass*/
//			alt_putstr("Compass received. Sending to the motors...\n");
//			alt_printf("%s\n", data);

			writeCompass(179);


		}
			break;
		case 't': {
				    writeCompass(0);
						}
			break;
		case 'y': {
				    writeCompass(50);
						}
			break;
		case 'u': {
				    writeCompass(130);
						}
			break;
		case 'i': {
				    writeCompass(210);
						}
			break;
		case 'o': {
				    writeCompass(350);
						}
			break;
		case 'p': {
					writeCompass(170);
						}
			break;
		case 'g': { /*gyroscope*/
//			alt_putstr("Gyroscope received. Sending to the motors...\n");
//			alt_printf("%s\n", data);

			writeGyroscope(0,0,255);
			//writeGyroscope(int(data[1]), int(data[2]), int(data[3]));

		}
			break;
		case '1': {
			writeGyroscope(-100,-100,240);
		}
			break;
		case '2': {
			writeGyroscope(-50,-50,240);
						}
					break;
		case '3': {
			writeGyroscope(0,0,240);
								}
							break;
		case '4': {
			writeGyroscope(50,50,240);
								}
							break;
		case '5': {
			writeGyroscope(100,100,240);
			}
			break;
		case '6': {
			writeGyroscope(-100,100,240);
			}
			break;
		case '7': {
			writeGyroscope(50,-50,240);
			}
			break;



		default: {
//			alt_putstr("Some data received. Don't know what to do...\n");
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
