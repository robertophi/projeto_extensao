
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005db8 memsz 0x00005db8 flags r-x
    LOAD off    0x00006dd8 vaddr 0x00045dd8 paddr 0x000462fc align 2**12
         filesz 0x00000524 memsz 0x00000524 flags rw-
    LOAD off    0x00007820 vaddr 0x00046820 paddr 0x00046820 align 2**12
         filesz 0x00000000 memsz 0x00000914 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00005b90  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  00045bb0  00045bb0  00006bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000524  00045dd8  000462fc  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000914  00046820  00046820  00007820  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000072fc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e8  00000000  00000000  00007328  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000015ab  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00013575  00000000  00000000  00008fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000056b9  00000000  00000000  0001c530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c0e3  00000000  00000000  00021be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000155c  00000000  00000000  0002dccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029c7  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004635  00000000  00000000  00031bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00036224  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00036268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00039b2b  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00039b2e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00039b33  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00039b34  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00039b35  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00039b4b  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00039b56  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000031  00000000  00000000  00039b61  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00039956  00000000  00000000  00039b92  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .text	00000000 .text
00045bb0 l    d  .rodata	00000000 .rodata
00045dd8 l    d  .rwdata	00000000 .rwdata
00046820 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 app.cpp
000400bc l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
0004005c l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00042074 l     F .text	00000030 _Z12read_uleb128PKhPj
000420a4 l     F .text	00000054 _Z12read_sleb128PKhPi
000420f8 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
00042194 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
00042368 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
000423f8 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
000424f8 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0004257c l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
00046834 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00046880 l     O .bss	00000800 emergency_buffer
00046840 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
00043210 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00043830 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00046844 l     O .bss	00000004 fc_static
00043a74 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00043b8c l     F .text	000000cc _Unwind_RaiseException_Phase2
00043c58 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
000461e0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00044e9c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
0004505c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004513c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000462ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00045648 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00045968 l     F .text	00000004 register_fini
000418d4 g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
00042fb4 g     F .text	00000040 __cxa_free_exception
000437e0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00042d64 g     F .text	00000018 _ZSt10unexpectedv
000451a8 g     F .text	00000050 alt_main
00041a44 g     F .text	00000020 _ZN4WiFiD2Ev
00043a24 g     F .text	00000014 _Unwind_GetIPInfo
000462fc g       *ABS*	00000000 __flash_rwdata_start
00043128 g     F .text	00000074 __cxa_rethrow
000439c4 g     F .text	0000000c _Unwind_SjLj_Unregister
00042c84 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00043a14 g     F .text	00000010 _Unwind_GetIP
00047134 g       *ABS*	00000000 __alt_heap_start
000449e8 g     F .text	00000074 _kill_r
00042fa4 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00041cfc g     F .text	0000008c _ZN4WiFi9readUART2Ev
000436dc g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00044928 g     F .text	000000a0 _signal_r
000462f4 g     O .rwdata	00000004 uart_wifi
000436cc g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00045d74  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00045218 g     F .text	00000020 __malloc_unlock
00040328 g     F .text	00000154 _ZN3App8compass8Ei
00043278 g     F .text	00000020 _ZSt18uncaught_exceptionv
00046868 g     O .bss	00000004 altera_avalon_timer_ts_freq
00042ef0 g     F .text	00000010 _ZNSt9exceptionD2Ev
00041954 g     F .text	00000038 _ZN6MotorsC2Ev
0004198c g     F .text	00000038 _ZN6MotorsC1Ev
00041914 g     F .text	00000040 _ZN6Motors21write_to_next_collumnEv
00045c64  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
0004158c g     F .text	00000044 _ZN3FFTC2Ev
00043a54 g     F .text	00000008 _Unwind_GetRegionStart
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041aa4 g     F .text	00000020 _ZN4WiFiC1Ev
00042d7c g     F .text	00000100 _Znwm
00046854 g     O .bss	00000004 errno
00043e24 g     F .text	00000080 _Unwind_Backtrace
0004685c g     O .bss	00000004 alt_argv
0004e2c0 g       *ABS*	00000000 _gp
00045368 g     F .text	00000030 usleep
000417b0 g     F .text	00000050 _ZN6Motors11write_delayEjjj
00044efc g     F .text	00000020 getpid
00046824 g     O .bss	00000004 _ZN3App3fftE
00042600 g     F .text	00000180 __cxa_call_unexpected
00043270 g     F .text	00000008 __cxa_get_exception_ptr
000401dc g     F .text	000000f0 _ZN3App6find_xEi
00043dd4 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
000439e8 g     F .text	00000014 _Unwind_GetCFA
00042c70 g     F .text	00000014 _ZSt13set_terminatePFvvE
00045bb0 g       *ABS*	00000000 __DTOR_END__
00041304 g     F .text	0000005c _ZN3AppC1Ev
00043514 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000418a0 g     F .text	00000034 _ZN6Motors5writeEj
00043f28 g     F .text	00000014 malloc
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004396c g     F .text	00000008 __udivsi3
0004470c g     F .text	000000cc _raise_r
00046848 g     O .bss	00000004 __malloc_top_pad
000449e4 g     F .text	00000004 _getpid_r
00043534 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00044860 g     F .text	000000b4 __sigtramp_r
0004469c g     F .text	00000070 _sbrk_r
0004167c g     F .text	00000040 _ZN3FFT5writeEPh
00045da8  w    O .rodata	00000020 _ZTVSt9type_info
00042ec0 g     F .text	00000010 _ZNKSt9exception4whatEv
000414f0  w    F .text	00000028 _ZN3App6Buffer6lengthEv
00045ce0  w    O .rodata	0000000c _ZTISt9bad_alloc
0004684c g     O .bss	00000004 __malloc_max_sbrked_mem
00045d48  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00043594 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00042068 g     F .text	0000000c _ZdlPv
000462e8 g     O .rwdata	00000004 _global_impure_ptr
00047134 g       *ABS*	00000000 __bss_end
000439b4 g     F .text	00000010 _Unwind_SjLj_Register
000405f8 g     F .text	00000048 _ZN3App12writeCompassEi
00043efc g     F .text	00000018 abort
000419f0 g     F .text	00000054 _ZN6Motors12getSingletonEv
00041a84 g     F .text	00000020 _ZN4WiFiC2Ev
00043298 g     F .text	000000a4 __cxa_end_catch
00042f44 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00042d3c g     F .text	00000018 _ZSt9terminatev
00045d18  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00041850 g     F .text	00000050 _ZN6Motors11write_powerEjjj
000456a8 g     F .text	0000001c alt_dcache_flush_all
000462c0  w    O .rwdata	00000008 _ZTISt9exception
000462fc g       *ABS*	00000000 __ram_rwdata_end
00043810 g     F .text	00000010 _ZNSt9type_infoD1Ev
0004683c g     O .bss	00000004 __new_handler
00043800 g     F .text	00000010 _ZNSt9type_infoD0Ev
00045dd8 g       *ABS*	00000000 __ram_rodata_end
000462f0 g     O .rwdata	00000004 jtag_uart_0
000412d0 g     F .text	00000034 _ZN3AppD2Ev
00044f1c g     F .text	00000140 kill
00043974 g     F .text	00000008 __umodsi3
000437f8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000400ec g     F .text	000000f0 _ZN3App6find_yEi
00041ac4 g     F .text	00000050 _ZN4WiFi18waitForStatusReadyEj
000402cc g     F .text	0000005c _ZN3App14writeGyroscopeEiii
00047134 g       *ABS*	00000000 end
00041634 g     F .text	00000020 _ZN3FFTD1Ev
00041b14 g     F .text	000000dc _ZN4WiFi8readUARTEPcPi
00043b74 g     F .text	00000018 _Unwind_DeleteException
00045ba8 g       *ABS*	00000000 __CTOR_LIST__
000586a0 g       *ABS*	00000000 __alt_stack_pointer
00043454 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0004540c g     F .text	000000a4 altera_avalon_jtag_uart_write
00045c8c  w    O .rodata	00000012 _ZTSSt13bad_exception
00041614 g     F .text	00000020 _ZN3FFTD2Ev
00044b88 g     F .text	00000314 _free_r
0004596c g     F .text	000001bc __call_exitprocs
00041bf0 g     F .text	000000c4 _ZN4WiFi12writeCommandEPc
00041730 g     F .text	00000020 _ZN6MotorsD1Ev
000462e0 g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000003c _start
00045dc8  w    O .rodata	0000000d _ZTSSt9type_info
000416bc g     F .text	00000054 _ZN3FFT12getSingletonEv
00045cbc  w    O .rodata	00000014 _ZTVSt9bad_alloc
000449c8 g     F .text	0000001c signal
000453cc g     F .text	00000040 alt_sys_init
000457fc g     F .text	0000016c __register_exitproc
00045cd0  w    O .rodata	0000000d _ZTSSt9bad_alloc
000415d0 g     F .text	00000044 _ZN3FFTC1Ev
0004397c g     F .text	00000038 __mulsi3
00045dd8 g       *ABS*	00000000 __ram_rwdata_start
00043cdc g     F .text	000000f8 _Unwind_SjLj_RaiseException
00045bb0 g       *ABS*	00000000 __ram_rodata_start
00047080 g     O .bss	00000028 __malloc_current_mallinfo
00043c80 g     F .text	0000005c _Unwind_SjLj_Resume
00043820 g     F .text	00000010 _ZNSt9type_infoD2Ev
00043610 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000454b0 g     F .text	0000015c alt_busy_sleep
00047134 g       *ABS*	00000000 __alt_stack_base
00042f60 g     F .text	00000034 _ZNSt9bad_allocD0Ev
000436bc g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00043ea4 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
00046820 g     O .bss	00000004 _ZN3App6motorsE
000437d8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00041cb4 g     F .text	00000048 _ZN4WiFi10stopServerEv
00045dd8 g     O .rwdata	00000408 __malloc_av_
00045c78  w    O .rodata	00000014 _ZTVSt9exception
000434c0 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
000451f8 g     F .text	00000020 __malloc_lock
000452ac g     F .text	000000bc sbrk
00045cec  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0004319c g     F .text	00000074 __cxa_throw
00043a38 g     F .text	00000010 _Unwind_SetIP
00046820 g       *ABS*	00000000 __bss_start
0004467c g     F .text	00000020 memset
00041ef0 g     F .text	000000d8 main
00046828 g     O .bss	00000004 _ZN3FFT3fftE
00046860 g     O .bss	00000004 alt_envp
00046850 g     O .bss	00000004 __malloc_max_total_mem
00042c60 g     F .text	00000008 __cxa_get_globals_fast
000586a0 g       *ABS*	00000000 __alt_heap_limit
000470a8 g     O .bss	0000008c _atexit0
00043f3c g     F .text	00000740 _malloc_r
000462f8 g     O .rwdata	00000004 alt_errno
00044850 g     F .text	00000010 _init_signal
00045d3c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00042f34 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
000438ac g     F .text	00000060 __divsi3
00044a5c g     F .text	0000012c _malloc_trim_r
00041094 g     F .text	00000154 _ZN3App10writeAudioEPii
00045bb0 g       *ABS*	00000000 __CTOR_END__
00045bb0 g       *ABS*	00000000 __flash_rodata_start
00045bb0 g       *ABS*	00000000 __DTOR_LIST__
00045398 g     F .text	00000034 alt_irq_init
000413bc  w    F .text	0000004c _ZN9run_param4initEv
000419c4 g     F .text	0000002c _ZN6Motors4readEv
00041a64 g     F .text	00000020 _ZN4WiFiD1Ev
00043688 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000457c8 g     F .text	00000014 atexit
00043a6c g     F .text	00000008 _Unwind_GetTextRelBase
00042e7c g     F .text	00000044 __cxa_call_terminate
00041408  w    F .text	000000e8 _ZN3App6Buffer3popEv
000462e4 g     O .rwdata	00000004 _impure_ptr
00046858 g     O .bss	00000004 alt_argc
00046830 g     O .bss	00000004 _ZN4WiFi4wifiE
00046864 g     O .bss	00000004 altera_avalon_timer_ts_base
00045728 g     F .text	00000064 _do_dtors
00040640 g     F .text	00000a54 _ZN3App3runEv
000411e8 g     F .text	00000070 _ZN3App10fftHandlerEj
00043a5c g     F .text	00000008 _Unwind_FindEnclosingFunction
00041fc8 g     F .text	000000a0 _Znam
00043a48 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00041800 g     F .text	00000050 _ZN6Motors15write_variationEjjj
0004333c g     F .text	00000118 __cxa_begin_catch
00043524 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00042d54 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00040020 g       *ABS*	00000000 __ram_exceptions_start
00041750 g     F .text	00000060 _ZN6Motors5writeEjjjj
00042f00 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
000462cc g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
0004682c g     O .bss	00000004 _ZN6Motors6motorsE
00042ff4 g     F .text	00000134 __cxa_allocate_exception
00045d9c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00042f54 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
000462fc g       *ABS*	00000000 _edata
00047134 g       *ABS*	00000000 _end
000462c8 g     O .rwdata	00000001 _ZSt7nothrow
0004129c g     F .text	00000034 _ZN3AppD1Ev
00042780 g     F .text	000004e0 __gxx_personality_sj0
00040020 g       *ABS*	00000000 __ram_exceptions_end
000435c4 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00042ee0 g     F .text	00000010 _ZNSt9exceptionD1Ev
000462dc g     O .rwdata	00000004 __malloc_trim_threshold
000457a8 g     F .text	00000020 altera_nios2_qsys_irq_init
000457dc g     F .text	00000020 exit
000439fc g     F .text	00000018 _Unwind_SetGR
00041518  w    F .text	00000074 _ZN3App6BufferC1Ev
00042c98 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
00041e9c g     F .text	00000054 _ZN4WiFi12getSingletonEv
00041654 g     F .text	00000028 _ZN3FFT4readEv
0004390c g     F .text	00000060 __modsi3
00042f94 g     F .text	00000010 _ZNSt9bad_allocD1Ev
0004686c g     O .bss	00000014 _ZN3App6bufferE
000586a0 g       *ABS*	00000000 __alt_data_end
00043710 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00045ca0  w    O .rodata	0000000c _ZTISt13bad_exception
00041360 g     F .text	0000005c _ZN3AppC2Ev
00044edc g     F .text	00000020 _exit
000439d0 g     F .text	00000018 _Unwind_GetGR
00042c68 g     F .text	00000008 __cxa_get_globals
000462d0 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
000447ec g     F .text	00000064 _init_signal_r
000462d4  w    O .rwdata	00000008 _ZTISt9type_info
00045238 g     F .text	00000074 alt_putchar
00045cac  w    O .rodata	0000000d _ZTSSt9exception
00042ed0 g     F .text	00000010 _ZNSt9exceptionD0Ev
0004578c g     F .text	0000001c alt_icache_flush_all
00043a64 g     F .text	00000008 _Unwind_GetDataRelBase
00041258 g     F .text	00000044 _ZN3App5setupEv
000456c4 g     F .text	00000064 _do_ctors
00044914 g     F .text	00000014 __sigtramp
00041d88 g     F .text	00000114 _ZN4WiFi6configEPcS0_
0004560c g     F .text	0000003c close
000450bc g     F .text	00000080 alt_load
0004047c g     F .text	0000017c _ZN3App8compass4Ei
000437e8 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00041710 g     F .text	00000020 _ZN6MotorsD2Ev
000447d8 g     F .text	00000014 raise
00043f14 g     F .text	00000014 free
000434e0 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08400814 	ori	at,at,32
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00040020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40020:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
   40024:	dee1a814 	ori	sp,sp,34464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   40028:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4002c:	d6b8b014 	ori	gp,gp,58048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40030:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40034:	109a0814 	ori	r2,r2,26656

    movhi r3, %hi(__bss_end)
   40038:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4003c:	18dc4d14 	ori	r3,r3,28980

    beq r2, r3, 1f
   40040:	10c00326 	beq	r2,r3,40050 <_start+0x30>

0:
    stw zero, (r2)
   40044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4004c:	10fffd36 	bltu	r2,r3,40044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40050:	00450bc0 	call	450bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40054:	00451a80 	call	451a8 <alt_main>

00040058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40058:	003fff06 	br	40058 <alt_after_alt_main>

0004005c <_Z41__static_initialization_and_destruction_0ii>:
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   4005c:	defffc04 	addi	sp,sp,-16
   40060:	dfc00315 	stw	ra,12(sp)
   40064:	df000215 	stw	fp,8(sp)
   40068:	df000204 	addi	fp,sp,8
   4006c:	e13ffe15 	stw	r4,-8(fp)
   40070:	e17fff15 	stw	r5,-4(fp)
   40074:	e0bffe17 	ldw	r2,-8(fp)
   40078:	10800058 	cmpnei	r2,r2,1
   4007c:	10000a1e 	bne	r2,zero,400a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
   40080:	e0ffff17 	ldw	r3,-4(fp)
   40084:	00bfffd4 	movui	r2,65535
   40088:	1880071e 	bne	r3,r2,400a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define COLUMNS 8
#define LINES 4
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
   4008c:	00419f00 	call	419f0 <_ZN6Motors12getSingletonEv>
   40090:	d0a15815 	stw	r2,-31392(gp)
FFT	*App::fft = FFT::getSingleton();
   40094:	00416bc0 	call	416bc <_ZN3FFT12getSingletonEv>
   40098:	d0a15915 	stw	r2,-31388(gp)
App::Buffer	App::buffer;
   4009c:	01000134 	movhi	r4,4
   400a0:	211a1b04 	addi	r4,r4,26732
   400a4:	00415180 	call	41518 <_ZN3App6BufferC1Ev>
//			alt_printf("%s\n", data);
		}
			break;
		}
	}
}
   400a8:	e037883a 	mov	sp,fp
   400ac:	dfc00117 	ldw	ra,4(sp)
   400b0:	df000017 	ldw	fp,0(sp)
   400b4:	dec00204 	addi	sp,sp,8
   400b8:	f800283a 	ret

000400bc <_GLOBAL__I__ZN3App6motorsE>:
   400bc:	defffe04 	addi	sp,sp,-8
   400c0:	dfc00115 	stw	ra,4(sp)
   400c4:	df000015 	stw	fp,0(sp)
   400c8:	d839883a 	mov	fp,sp
   400cc:	01000044 	movi	r4,1
   400d0:	017fffd4 	movui	r5,65535
   400d4:	004005c0 	call	4005c <_Z41__static_initialization_and_destruction_0ii>
   400d8:	e037883a 	mov	sp,fp
   400dc:	dfc00117 	ldw	ra,4(sp)
   400e0:	df000017 	ldw	fp,0(sp)
   400e4:	dec00204 	addi	sp,sp,8
   400e8:	f800283a 	ret

000400ec <_ZN3App6find_yEi>:
	    }
	}
}


void App::find_y(int yAngle){
   400ec:	defffc04 	addi	sp,sp,-16
   400f0:	dfc00315 	stw	ra,12(sp)
   400f4:	df000215 	stw	fp,8(sp)
   400f8:	df000204 	addi	fp,sp,8
   400fc:	e13ffe15 	stw	r4,-8(fp)
   40100:	e17fff15 	stw	r5,-4(fp)
	//Definir como a rotação 'vertical' do smartphone deve ser represnetada
	//Liga sempre os motores de cima ou de baixo, de acordo com a rotação do celular
	//Quanto maior o angulo, maior a potencia no motor
	//Se o angulo for maior que 45 graus, liga um pouco a linha adjacente

	if(yAngle > 5){
   40104:	e0bfff17 	ldw	r2,-4(fp)
   40108:	10800190 	cmplti	r2,r2,6
   4010c:	1000141e 	bne	r2,zero,40160 <_ZN3App6find_yEi+0x74>
		    motors->write( 0 | 3 | 255 | yAngle);
   40110:	d1215817 	ldw	r4,-31392(gp)
   40114:	e0bfff17 	ldw	r2,-4(fp)
   40118:	10803fd4 	ori	r2,r2,255
   4011c:	100b883a 	mov	r5,r2
   40120:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		    if(yAngle>45){
   40124:	e0bfff17 	ldw	r2,-4(fp)
   40128:	10800b90 	cmplti	r2,r2,46
   4012c:	10000c1e 	bne	r2,zero,40160 <_ZN3App6find_yEi+0x74>
		    	motors->write( 0 | 2 | 3 | yAngle-45);
   40130:	d1215817 	ldw	r4,-31392(gp)
   40134:	e0bfff17 	ldw	r2,-4(fp)
   40138:	10bff4c4 	addi	r2,r2,-45
   4013c:	108000d4 	ori	r2,r2,3
   40140:	100b883a 	mov	r5,r2
   40144:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		    	motors->write( 0 | 2 | 4 | yAngle-45);
   40148:	d1215817 	ldw	r4,-31392(gp)
   4014c:	e0bfff17 	ldw	r2,-4(fp)
   40150:	10bff4c4 	addi	r2,r2,-45
   40154:	10800194 	ori	r2,r2,6
   40158:	100b883a 	mov	r5,r2
   4015c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		    }
		}
	if(yAngle < -5){
   40160:	e0bfff17 	ldw	r2,-4(fp)
   40164:	10bffec8 	cmpgei	r2,r2,-5
   40168:	1000171e 	bne	r2,zero,401c8 <_ZN3App6find_yEi+0xdc>
		motors->write( 0 | 0 | 255 | -yAngle);
   4016c:	d1215817 	ldw	r4,-31392(gp)
   40170:	e0bfff17 	ldw	r2,-4(fp)
   40174:	0085c83a 	sub	r2,zero,r2
   40178:	10803fd4 	ori	r2,r2,255
   4017c:	100b883a 	mov	r5,r2
   40180:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		if(yAngle<-45){
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	10bff4c8 	cmpgei	r2,r2,-45
   4018c:	10000e1e 	bne	r2,zero,401c8 <_ZN3App6find_yEi+0xdc>
			motors->write( 0 | 1 | 3 | (-yAngle)-45);
   40190:	d1215817 	ldw	r4,-31392(gp)
   40194:	e0bfff17 	ldw	r2,-4(fp)
   40198:	0085c83a 	sub	r2,zero,r2
   4019c:	10bff4c4 	addi	r2,r2,-45
   401a0:	108000d4 	ori	r2,r2,3
   401a4:	100b883a 	mov	r5,r2
   401a8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write( 0 | 1 | 4 | (-yAngle)-45);
   401ac:	d1215817 	ldw	r4,-31392(gp)
   401b0:	e0bfff17 	ldw	r2,-4(fp)
   401b4:	0085c83a 	sub	r2,zero,r2
   401b8:	10bff4c4 	addi	r2,r2,-45
   401bc:	10800154 	ori	r2,r2,5
   401c0:	100b883a 	mov	r5,r2
   401c4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
	}

}
   401c8:	e037883a 	mov	sp,fp
   401cc:	dfc00117 	ldw	ra,4(sp)
   401d0:	df000017 	ldw	fp,0(sp)
   401d4:	dec00204 	addi	sp,sp,8
   401d8:	f800283a 	ret

000401dc <_ZN3App6find_xEi>:

		motors->write( 0 | 255<<16 | 255<<8 | 0 );
		find_x(xAngle);
		find_y(yAngle);
	}
void App::find_x(int xAngle){
   401dc:	defffc04 	addi	sp,sp,-16
   401e0:	dfc00315 	stw	ra,12(sp)
   401e4:	df000215 	stw	fp,8(sp)
   401e8:	df000204 	addi	fp,sp,8
   401ec:	e13ffe15 	stw	r4,-8(fp)
   401f0:	e17fff15 	stw	r5,-4(fp)
	//Liga sempre os motores laterais, de acordo com a rotação do celular
	//Quanto maior o angulo, maior a potencia no motor
	//Se o angulo for maior que 45 graus, liga um pouco a coluna adjacente


	if(xAngle > 5){
   401f4:	e0bfff17 	ldw	r2,-4(fp)
   401f8:	10800190 	cmplti	r2,r2,6
   401fc:	1000141e 	bne	r2,zero,40250 <_ZN3App6find_xEi+0x74>
	    motors->write( 0 | 255 | 7 | xAngle);
   40200:	d1215817 	ldw	r4,-31392(gp)
   40204:	e0bfff17 	ldw	r2,-4(fp)
   40208:	10803fd4 	ori	r2,r2,255
   4020c:	100b883a 	mov	r5,r2
   40210:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    if(xAngle>45){
   40214:	e0bfff17 	ldw	r2,-4(fp)
   40218:	10800b90 	cmplti	r2,r2,46
   4021c:	10000c1e 	bne	r2,zero,40250 <_ZN3App6find_xEi+0x74>
	    	motors->write( 0 | 1 | 6 | xAngle-45);
   40220:	d1215817 	ldw	r4,-31392(gp)
   40224:	e0bfff17 	ldw	r2,-4(fp)
   40228:	10bff4c4 	addi	r2,r2,-45
   4022c:	108001d4 	ori	r2,r2,7
   40230:	100b883a 	mov	r5,r2
   40234:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    	motors->write( 0 | 2 | 6 | xAngle-45);
   40238:	d1215817 	ldw	r4,-31392(gp)
   4023c:	e0bfff17 	ldw	r2,-4(fp)
   40240:	10bff4c4 	addi	r2,r2,-45
   40244:	10800194 	ori	r2,r2,6
   40248:	100b883a 	mov	r5,r2
   4024c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    }
	}
	if(xAngle < -5){
   40250:	e0bfff17 	ldw	r2,-4(fp)
   40254:	10bffec8 	cmpgei	r2,r2,-5
   40258:	1000171e 	bne	r2,zero,402b8 <_ZN3App6find_xEi+0xdc>
	    motors->write( 0 | 255 | 0 | -xAngle);
   4025c:	d1215817 	ldw	r4,-31392(gp)
   40260:	e0bfff17 	ldw	r2,-4(fp)
   40264:	0085c83a 	sub	r2,zero,r2
   40268:	10803fd4 	ori	r2,r2,255
   4026c:	100b883a 	mov	r5,r2
   40270:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    if(xAngle<-45){
   40274:	e0bfff17 	ldw	r2,-4(fp)
   40278:	10bff4c8 	cmpgei	r2,r2,-45
   4027c:	10000e1e 	bne	r2,zero,402b8 <_ZN3App6find_xEi+0xdc>
	    	motors->write( 0 | 1 | 1 | (-xAngle)-45);
   40280:	d1215817 	ldw	r4,-31392(gp)
   40284:	e0bfff17 	ldw	r2,-4(fp)
   40288:	0085c83a 	sub	r2,zero,r2
   4028c:	10bff4c4 	addi	r2,r2,-45
   40290:	10800054 	ori	r2,r2,1
   40294:	100b883a 	mov	r5,r2
   40298:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    	motors->write( 0 | 2 | 1 | (-xAngle)-45);
   4029c:	d1215817 	ldw	r4,-31392(gp)
   402a0:	e0bfff17 	ldw	r2,-4(fp)
   402a4:	0085c83a 	sub	r2,zero,r2
   402a8:	10bff4c4 	addi	r2,r2,-45
   402ac:	108000d4 	ori	r2,r2,3
   402b0:	100b883a 	mov	r5,r2
   402b4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	    }
	}
}
   402b8:	e037883a 	mov	sp,fp
   402bc:	dfc00117 	ldw	ra,4(sp)
   402c0:	df000017 	ldw	fp,0(sp)
   402c4:	dec00204 	addi	sp,sp,8
   402c8:	f800283a 	ret

000402cc <_ZN3App14writeGyroscopeEiii>:
		motors->write( 0 | 2 <<16 | coluna <<8 | 255 );
    }
}


void App::writeGyroscope(int xAngle, int yAngle, int potenciaGyros) {
   402cc:	defffa04 	addi	sp,sp,-24
   402d0:	dfc00515 	stw	ra,20(sp)
   402d4:	df000415 	stw	fp,16(sp)
   402d8:	df000404 	addi	fp,sp,16
   402dc:	e13ffc15 	stw	r4,-16(fp)
   402e0:	e17ffd15 	stw	r5,-12(fp)
   402e4:	e1bffe15 	stw	r6,-8(fp)
   402e8:	e1ffff15 	stw	r7,-4(fp)
		//valores positivos indicam inclinação para tráz
		//valores negativos indicam inclinação para frente
	//Os valores tem range de [-180,180]


		motors->write( 0 | 255<<16 | 255<<8 | 0 );
   402ec:	d1215817 	ldw	r4,-31392(gp)
   402f0:	01404034 	movhi	r5,256
   402f4:	297fc004 	addi	r5,r5,-256
   402f8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		find_x(xAngle);
   402fc:	e13ffc17 	ldw	r4,-16(fp)
   40300:	e17ffd17 	ldw	r5,-12(fp)
   40304:	00401dc0 	call	401dc <_ZN3App6find_xEi>
		find_y(yAngle);
   40308:	e13ffc17 	ldw	r4,-16(fp)
   4030c:	e17ffe17 	ldw	r5,-8(fp)
   40310:	00400ec0 	call	400ec <_ZN3App6find_yEi>
	}
   40314:	e037883a 	mov	sp,fp
   40318:	dfc00117 	ldw	ra,4(sp)
   4031c:	df000017 	ldw	fp,0(sp)
   40320:	dec00204 	addi	sp,sp,8
   40324:	f800283a 	ret

00040328 <_ZN3App8compass8Ei>:
    }
    //int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 << 16 | motor << 8 | compass_vib_value );
}

void App::compass8(int direction) {
   40328:	defff904 	addi	sp,sp,-28
   4032c:	dfc00615 	stw	ra,24(sp)
   40330:	df000515 	stw	fp,20(sp)
   40334:	df000504 	addi	fp,sp,20
   40338:	e13ffe15 	stw	r4,-8(fp)
   4033c:	e17fff15 	stw	r5,-4(fp)
	int setorDaDirecao, coluna;
	int tamanhoSetor = 180/4;
   40340:	00800b44 	movi	r2,45
   40344:	e0bffb15 	stw	r2,-20(fp)
    if(direction<=25 && direction >= -25){
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800688 	cmpgei	r2,r2,26
   40350:	10001c1e 	bne	r2,zero,403c4 <_ZN3App8compass8Ei+0x9c>
   40354:	e0bfff17 	ldw	r2,-4(fp)
   40358:	10bff9d0 	cmplti	r2,r2,-25
   4035c:	1000191e 	bne	r2,zero,403c4 <_ZN3App8compass8Ei+0x9c>
    	//Se o celular está apontando para o norte, ou próximo o suficiente, ligar as duas colunas do meio
		motors->write( 0 | 255 <<16 | 3 <<8 | 100 );
   40360:	d1215817 	ldw	r4,-31392(gp)
   40364:	01403ff4 	movhi	r5,255
   40368:	2940d904 	addi	r5,r5,868
   4036c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 255 <<16 | 4 <<8 | 100 );
   40370:	d1215817 	ldw	r4,-31392(gp)
   40374:	01403ff4 	movhi	r5,255
   40378:	29411904 	addi	r5,r5,1124
   4037c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 1 <<16 | 3 <<8 | 255 );
   40380:	d1215817 	ldw	r4,-31392(gp)
   40384:	01400074 	movhi	r5,1
   40388:	2940ffc4 	addi	r5,r5,1023
   4038c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 2 <<16 | 3 <<8 | 255 );
   40390:	d1215817 	ldw	r4,-31392(gp)
   40394:	014000b4 	movhi	r5,2
   40398:	2940ffc4 	addi	r5,r5,1023
   4039c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 1 <<16 | 4 <<8 | 255 );
   403a0:	d1215817 	ldw	r4,-31392(gp)
   403a4:	01400074 	movhi	r5,1
   403a8:	29413fc4 	addi	r5,r5,1279
   403ac:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 2 <<16 | 4 <<8 | 255 );
   403b0:	d1215817 	ldw	r4,-31392(gp)
   403b4:	014000b4 	movhi	r5,2
   403b8:	29413fc4 	addi	r5,r5,1279
   403bc:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
}

void App::compass8(int direction) {
	int setorDaDirecao, coluna;
	int tamanhoSetor = 180/4;
    if(direction<=25 && direction >= -25){
   403c0:	00002906 	br	40468 <_ZN3App8compass8Ei+0x140>
    	 //Para os outros casos, vamos definir quão longe o ângulo está do norte
		//Dividimos o angulo em setores de 45 (180 graus divididos em 4 setores de 45 graus)
		//Dependendo do setor resultante, liga-se um motor em relação ao centro
		//Adiciona-se um fator de +20 ao ângulo durante o cálculo, caso contrário haveria discontinuidade
			//no limite entre próximo/distante, e também quase nunca se ligaria a ultima coluna do colete
    	if(direction > 25){
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	10800690 	cmplti	r2,r2,26
   403cc:	1000091e 	bne	r2,zero,403f4 <_ZN3App8compass8Ei+0xcc>
			setorDaDirecao = (direction+20)/45;
   403d0:	e0bfff17 	ldw	r2,-4(fp)
   403d4:	11000504 	addi	r4,r2,20
   403d8:	01400b44 	movi	r5,45
   403dc:	00438ac0 	call	438ac <__divsi3>
   403e0:	e0bffd15 	stw	r2,-12(fp)
			coluna = 3 + setorDaDirecao;
   403e4:	e0bffd17 	ldw	r2,-12(fp)
   403e8:	108000c4 	addi	r2,r2,3
   403ec:	e0bffc15 	stw	r2,-16(fp)
   403f0:	00000d06 	br	40428 <_ZN3App8compass8Ei+0x100>
    	}
    	else if(direction < -25){
   403f4:	e0bfff17 	ldw	r2,-4(fp)
   403f8:	10bff9c8 	cmpgei	r2,r2,-25
   403fc:	10000a1e 	bne	r2,zero,40428 <_ZN3App8compass8Ei+0x100>
			setorDaDirecao = (-direction+20)/45;
   40400:	00c00504 	movi	r3,20
   40404:	e0bfff17 	ldw	r2,-4(fp)
   40408:	1889c83a 	sub	r4,r3,r2
   4040c:	01400b44 	movi	r5,45
   40410:	00438ac0 	call	438ac <__divsi3>
   40414:	e0bffd15 	stw	r2,-12(fp)
			coluna = 4 - setorDaDirecao;
   40418:	00c00104 	movi	r3,4
   4041c:	e0bffd17 	ldw	r2,-12(fp)
   40420:	1885c83a 	sub	r2,r3,r2
   40424:	e0bffc15 	stw	r2,-16(fp)
		}
		motors->write( 0 | 1 <<16 | coluna <<8 | 255 );
   40428:	d1215817 	ldw	r4,-31392(gp)
   4042c:	e0bffc17 	ldw	r2,-16(fp)
   40430:	1006923a 	slli	r3,r2,8
   40434:	00800074 	movhi	r2,1
   40438:	10803fc4 	addi	r2,r2,255
   4043c:	1884b03a 	or	r2,r3,r2
   40440:	100b883a 	mov	r5,r2
   40444:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		motors->write( 0 | 2 <<16 | coluna <<8 | 255 );
   40448:	d1215817 	ldw	r4,-31392(gp)
   4044c:	e0bffc17 	ldw	r2,-16(fp)
   40450:	1006923a 	slli	r3,r2,8
   40454:	008000b4 	movhi	r2,2
   40458:	10803fc4 	addi	r2,r2,255
   4045c:	1884b03a 	or	r2,r3,r2
   40460:	100b883a 	mov	r5,r2
   40464:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
    }
}
   40468:	e037883a 	mov	sp,fp
   4046c:	dfc00117 	ldw	ra,4(sp)
   40470:	df000017 	ldw	fp,0(sp)
   40474:	dec00204 	addi	sp,sp,8
   40478:	f800283a 	ret

0004047c <_ZN3App8compass4Ei>:
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}

void App::compass4(int direction) {
   4047c:	defff904 	addi	sp,sp,-28
   40480:	dfc00615 	stw	ra,24(sp)
   40484:	df000515 	stw	fp,20(sp)
   40488:	df000504 	addi	fp,sp,20
   4048c:	e13ffc15 	stw	r4,-16(fp)
   40490:	e17ffd15 	stw	r5,-12(fp)
    if(direction < 5 || direction > 355) {
   40494:	e0bffd17 	ldw	r2,-12(fp)
   40498:	10800150 	cmplti	r2,r2,5
   4049c:	1000031e 	bne	r2,zero,404ac <_ZN3App8compass4Ei+0x30>
   404a0:	e0bffd17 	ldw	r2,-12(fp)
   404a4:	10805910 	cmplti	r2,r2,356
   404a8:	10002e1e 	bne	r2,zero,40564 <_ZN3App8compass4Ei+0xe8>
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2) <<8 | compass_vib_value );
   404ac:	d1215817 	ldw	r4,-31392(gp)
   404b0:	e0bffc17 	ldw	r2,-16(fp)
   404b4:	10c00017 	ldw	r3,0(r2)
   404b8:	008000b4 	movhi	r2,2
   404bc:	1080c004 	addi	r2,r2,768
   404c0:	1884b03a 	or	r2,r3,r2
   404c4:	100b883a 	mov	r5,r2
   404c8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
        if(direction < 5 && direction != 0)
   404cc:	e0bffd17 	ldw	r2,-12(fp)
   404d0:	10800148 	cmpgei	r2,r2,5
   404d4:	1000101e 	bne	r2,zero,40518 <_ZN3App8compass4Ei+0x9c>
   404d8:	e0bffd17 	ldw	r2,-12(fp)
   404dc:	1005003a 	cmpeq	r2,r2,zero
   404e0:	10000d1e 	bne	r2,zero,40518 <_ZN3App8compass4Ei+0x9c>
            motors->write( 0 | (LINES-1) <<16| 1<<8 | compass_vib_value/2 );
   404e4:	d1215817 	ldw	r4,-31392(gp)
   404e8:	e0bffc17 	ldw	r2,-16(fp)
   404ec:	10c00017 	ldw	r3,0(r2)
   404f0:	1804d7fa 	srli	r2,r3,31
   404f4:	10c5883a 	add	r2,r2,r3
   404f8:	1005d07a 	srai	r2,r2,1
   404fc:	1007883a 	mov	r3,r2
   40500:	008000f4 	movhi	r2,3
   40504:	10804004 	addi	r2,r2,256
   40508:	1884b03a 	or	r2,r3,r2
   4050c:	100b883a 	mov	r5,r2
   40510:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
}

void App::compass4(int direction) {
    if(direction < 5 || direction > 355) {
        motors->write( 0 | (LINES-2) << 16 | ((COLUMNS-1)/2) <<8 | compass_vib_value );
        if(direction < 5 && direction != 0)
   40514:	00003306 	br	405e4 <_ZN3App8compass4Ei+0x168>
            motors->write( 0 | (LINES-1) <<16| 1<<8 | compass_vib_value/2 );
        else if(direction > 355 && direction != 360)
   40518:	e0bffd17 	ldw	r2,-12(fp)
   4051c:	10805910 	cmplti	r2,r2,356
   40520:	1000301e 	bne	r2,zero,405e4 <_ZN3App8compass4Ei+0x168>
   40524:	e0bffd17 	ldw	r2,-12(fp)
   40528:	10805a20 	cmpeqi	r2,r2,360
   4052c:	10002d1e 	bne	r2,zero,405e4 <_ZN3App8compass4Ei+0x168>
            motors->write( 0 | (LINES-1) <<16 | (COLUMNS-2) << 8 | compass_vib_value/2 );
   40530:	d1215817 	ldw	r4,-31392(gp)
   40534:	e0bffc17 	ldw	r2,-16(fp)
   40538:	10c00017 	ldw	r3,0(r2)
   4053c:	1804d7fa 	srli	r2,r3,31
   40540:	10c5883a 	add	r2,r2,r3
   40544:	1005d07a 	srai	r2,r2,1
   40548:	1007883a 	mov	r3,r2
   4054c:	008000f4 	movhi	r2,3
   40550:	10818004 	addi	r2,r2,1536
   40554:	1884b03a 	or	r2,r3,r2
   40558:	100b883a 	mov	r5,r2
   4055c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
        return;
   40560:	00002006 	br	405e4 <_ZN3App8compass4Ei+0x168>
    }
    int motor;
    if(direction < 180){
   40564:	e0bffd17 	ldw	r2,-12(fp)
   40568:	10802d08 	cmpgei	r2,r2,180
   4056c:	10000a1e 	bne	r2,zero,40598 <_ZN3App8compass4Ei+0x11c>
    	motor = direction < 90 ? 1:0;
   40570:	e0bffd17 	ldw	r2,-12(fp)
   40574:	10801688 	cmpgei	r2,r2,90
   40578:	1000031e 	bne	r2,zero,40588 <_ZN3App8compass4Ei+0x10c>
   4057c:	00800044 	movi	r2,1
   40580:	e0bfff15 	stw	r2,-4(fp)
   40584:	00000106 	br	4058c <_ZN3App8compass4Ei+0x110>
   40588:	e03fff15 	stw	zero,-4(fp)
   4058c:	e0bfff17 	ldw	r2,-4(fp)
   40590:	e0bffb15 	stw	r2,-20(fp)
   40594:	00000a06 	br	405c0 <_ZN3App8compass4Ei+0x144>
    	}
    else{
    	motor = direction < 270 ? COLUMNS-1 : COLUMNS-2;
   40598:	e0bffd17 	ldw	r2,-12(fp)
   4059c:	10804388 	cmpgei	r2,r2,270
   405a0:	1000031e 	bne	r2,zero,405b0 <_ZN3App8compass4Ei+0x134>
   405a4:	008001c4 	movi	r2,7
   405a8:	e0bffe15 	stw	r2,-8(fp)
   405ac:	00000206 	br	405b8 <_ZN3App8compass4Ei+0x13c>
   405b0:	00800184 	movi	r2,6
   405b4:	e0bffe15 	stw	r2,-8(fp)
   405b8:	e0bffe17 	ldw	r2,-8(fp)
   405bc:	e0bffb15 	stw	r2,-20(fp)
    }
    //int motor = direction < 180 ? (direction < 90 ? 1 : 0) : (direction < 270 ? COLUMNS-2 : COLUMNS-1);
    motors->write( 0 | LINES-1 << 16 | motor << 8 | compass_vib_value );
   405c0:	d1215817 	ldw	r4,-31392(gp)
   405c4:	e0bffb17 	ldw	r2,-20(fp)
   405c8:	1006923a 	slli	r3,r2,8
   405cc:	e0bffc17 	ldw	r2,-16(fp)
   405d0:	10800017 	ldw	r2,0(r2)
   405d4:	1884b03a 	or	r2,r3,r2
   405d8:	108000f4 	orhi	r2,r2,3
   405dc:	100b883a 	mov	r5,r2
   405e0:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
}
   405e4:	e037883a 	mov	sp,fp
   405e8:	dfc00117 	ldw	ra,4(sp)
   405ec:	df000017 	ldw	fp,0(sp)
   405f0:	dec00204 	addi	sp,sp,8
   405f4:	f800283a 	ret

000405f8 <_ZN3App12writeCompassEi>:
	if(buffer.length() > 0)
		fft->write(buffer.pop());
}


void App::writeCompass(int direction) {
   405f8:	defffc04 	addi	sp,sp,-16
   405fc:	dfc00315 	stw	ra,12(sp)
   40600:	df000215 	stw	fp,8(sp)
   40604:	df000204 	addi	fp,sp,8
   40608:	e13ffe15 	stw	r4,-8(fp)
   4060c:	e17fff15 	stw	r5,-4(fp)
	//O valor recebido para o compasso é o ângulo que o celular faz com o norte
	//Os valores são planejados para o celular 'flat', com a tela virada para cima
	//Range final é [-180;180].
		//Valores negativos indicam o celular rotacioado no sentido anti-horário em relação ao norte
		//Valores positivos indicam uma rotação no sentido horário
	motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40610:	d1215817 	ldw	r4,-31392(gp)
   40614:	01404034 	movhi	r5,256
   40618:	297fc004 	addi	r5,r5,-256
   4061c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	if(COLUMNS >= 8) {
        return compass8(direction);
   40620:	e13ffe17 	ldw	r4,-8(fp)
   40624:	e17fff17 	ldw	r5,-4(fp)
   40628:	00403280 	call	40328 <_ZN3App8compass8Ei>
    } else if(COLUMNS >= 4) {
        return compass4(direction);
    }
}
   4062c:	e037883a 	mov	sp,fp
   40630:	dfc00117 	ldw	ra,4(sp)
   40634:	df000017 	ldw	fp,0(sp)
   40638:	dec00204 	addi	sp,sp,8
   4063c:	f800283a 	ret

00040640 <_ZN3App3runEv>:
			summation = 0;
		}
	}
}

void App::run() {
   40640:	deffa104 	addi	sp,sp,-380
   40644:	dfc05e15 	stw	ra,376(sp)
   40648:	df005d15 	stw	fp,372(sp)
   4064c:	df005d04 	addi	fp,sp,372
   40650:	e13ffb15 	stw	r4,-20(fp)
	char data[256];
	int size=0,i=0;
   40654:	e03fba15 	stw	zero,-280(fp)
   40658:	e03fb915 	stw	zero,-284(fp)
	char *dataPtr;
	int *sizePtr;
		dataPtr = &data[0];
   4065c:	e0bfbb04 	addi	r2,fp,-276
   40660:	e0bfb815 	stw	r2,-288(fp)
		sizePtr = &size;
   40664:	e0bfba04 	addi	r2,fp,-280
   40668:	e0bfb715 	stw	r2,-292(fp)
	char type;
	char readTerminalEclipse;
	int n;
	int lastColuna=0, lastLinha=0, lastPotencia=0;
   4066c:	e03fb415 	stw	zero,-304(fp)
   40670:	e03fb315 	stw	zero,-308(fp)
   40674:	e03fb215 	stw	zero,-312(fp)

	motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   40678:	d1215817 	ldw	r4,-31392(gp)
   4067c:	01408034 	movhi	r5,512
   40680:	297fc004 	addi	r5,r5,-256
   40684:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   40688:	d1215817 	ldw	r4,-31392(gp)
   4068c:	0140c034 	movhi	r5,768
   40690:	297fc004 	addi	r5,r5,-256
   40694:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40698:	d1215817 	ldw	r4,-31392(gp)
   4069c:	01404034 	movhi	r5,256
   406a0:	297fc004 	addi	r5,r5,-256
   406a4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
   406a8:	00000006 	br	406ac <_ZN3App3runEv+0x6c>




	while (1) {
		type = 0;
   406ac:	e03fb645 	stb	zero,-295(fp)
		wifi->readUART(dataPtr,sizePtr);
   406b0:	e0bffb17 	ldw	r2,-20(fp)
   406b4:	11000517 	ldw	r4,20(r2)
   406b8:	e17fb817 	ldw	r5,-288(fp)
   406bc:	e1bfb717 	ldw	r6,-292(fp)
   406c0:	0041b140 	call	41b14 <_ZN4WiFi8readUARTEPcPi>
		if(size != 0 ){
   406c4:	e0bfba17 	ldw	r2,-280(fp)
   406c8:	1005003a 	cmpeq	r2,r2,zero
   406cc:	1000151e 	bne	r2,zero,40724 <_ZN3App3runEv+0xe4>
			for(i=0;i<=*sizePtr;i++){
   406d0:	e03fb915 	stw	zero,-284(fp)
   406d4:	00000b06 	br	40704 <_ZN3App3runEv+0xc4>
				alt_putchar(data[i]);
   406d8:	e0ffb917 	ldw	r3,-284(fp)
   406dc:	e0bfbb04 	addi	r2,fp,-276
   406e0:	10c5883a 	add	r2,r2,r3
   406e4:	10800003 	ldbu	r2,0(r2)
   406e8:	11003fcc 	andi	r4,r2,255
   406ec:	2100201c 	xori	r4,r4,128
   406f0:	213fe004 	addi	r4,r4,-128
   406f4:	00452380 	call	45238 <alt_putchar>

	while (1) {
		type = 0;
		wifi->readUART(dataPtr,sizePtr);
		if(size != 0 ){
			for(i=0;i<=*sizePtr;i++){
   406f8:	e0bfb917 	ldw	r2,-284(fp)
   406fc:	10800044 	addi	r2,r2,1
   40700:	e0bfb915 	stw	r2,-284(fp)
   40704:	e0bfb717 	ldw	r2,-292(fp)
   40708:	10c00017 	ldw	r3,0(r2)
   4070c:	e0bfb917 	ldw	r2,-284(fp)
   40710:	18bff10e 	bge	r3,r2,406d8 <_ZN3App3runEv+0x98>
				alt_putchar(data[i]);
			}
			alt_putchar('\n');
   40714:	01000284 	movi	r4,10
   40718:	00452380 	call	45238 <alt_putchar>

			type = data[0];
   4071c:	e0bfbb03 	ldbu	r2,-276(fp)
   40720:	e0bfb645 	stb	r2,-295(fp)

		}

		switch (type) {
   40724:	e0bfb643 	ldbu	r2,-295(fp)
   40728:	10bff404 	addi	r2,r2,-48
   4072c:	e0bfff15 	stw	r2,-4(fp)
   40730:	e0ffff17 	ldw	r3,-4(fp)
   40734:	18803fcc 	andi	r2,r3,255
   40738:	108012a8 	cmpgeui	r2,r2,74
   4073c:	103fdb1e 	bne	r2,zero,406ac <_ZN3App3runEv+0x6c>
   40740:	e0ffff17 	ldw	r3,-4(fp)
   40744:	18803fcc 	andi	r2,r3,255
   40748:	1085883a 	add	r2,r2,r2
   4074c:	1087883a 	add	r3,r2,r2
   40750:	00800134 	movhi	r2,4
   40754:	1081d904 	addi	r2,r2,1892
   40758:	1885883a 	add	r2,r3,r2
   4075c:	10800017 	ldw	r2,0(r2)
   40760:	1000683a 	jmp	r2
   40764:	0004088c 	andi	zero,zero,4130
   40768:	00040f74 	movhi	zero,4157
   4076c:	00040f98 	cmpnei	zero,zero,4158
   40770:	00040fbc 	xorhi	zero,zero,4158
   40774:	00040fe0 	cmpeqi	zero,zero,4159
   40778:	00041004 	movi	zero,4160
   4077c:	00041028 	cmpgeui	zero,zero,4160
   40780:	0004104c 	andi	zero,zero,4161
   40784:	00041070 	cmpltui	zero,zero,4161
   40788:	000406ac 	andhi	zero,zero,4122
   4078c:	000406ac 	andhi	zero,zero,4122
   40790:	000406ac 	andhi	zero,zero,4122
   40794:	000406ac 	andhi	zero,zero,4122
   40798:	000406ac 	andhi	zero,zero,4122
   4079c:	000406ac 	andhi	zero,zero,4122
   407a0:	000406ac 	andhi	zero,zero,4122
   407a4:	000406ac 	andhi	zero,zero,4122
   407a8:	000406ac 	andhi	zero,zero,4122
   407ac:	000406ac 	andhi	zero,zero,4122
   407b0:	000406ac 	andhi	zero,zero,4122
   407b4:	000406ac 	andhi	zero,zero,4122
   407b8:	000406ac 	andhi	zero,zero,4122
   407bc:	000406ac 	andhi	zero,zero,4122
   407c0:	000406ac 	andhi	zero,zero,4122
   407c4:	000406ac 	andhi	zero,zero,4122
   407c8:	000406ac 	andhi	zero,zero,4122
   407cc:	000406ac 	andhi	zero,zero,4122
   407d0:	000406ac 	andhi	zero,zero,4122
   407d4:	000406ac 	andhi	zero,zero,4122
   407d8:	000406ac 	andhi	zero,zero,4122
   407dc:	000406ac 	andhi	zero,zero,4122
   407e0:	000406ac 	andhi	zero,zero,4122
   407e4:	000406ac 	andhi	zero,zero,4122
   407e8:	000406ac 	andhi	zero,zero,4122
   407ec:	000406ac 	andhi	zero,zero,4122
   407f0:	000406ac 	andhi	zero,zero,4122
   407f4:	000406ac 	andhi	zero,zero,4122
   407f8:	000406ac 	andhi	zero,zero,4122
   407fc:	000406ac 	andhi	zero,zero,4122
   40800:	000406ac 	andhi	zero,zero,4122
   40804:	000406ac 	andhi	zero,zero,4122
   40808:	000406ac 	andhi	zero,zero,4122
   4080c:	000406ac 	andhi	zero,zero,4122
   40810:	000406ac 	andhi	zero,zero,4122
   40814:	000406ac 	andhi	zero,zero,4122
   40818:	000406ac 	andhi	zero,zero,4122
   4081c:	000406ac 	andhi	zero,zero,4122
   40820:	000406ac 	andhi	zero,zero,4122
   40824:	000406ac 	andhi	zero,zero,4122
   40828:	00040dd4 	movui	zero,4151
   4082c:	000406ac 	andhi	zero,zero,4122
   40830:	00040df0 	cmpltui	zero,zero,4151
   40834:	000406ac 	andhi	zero,zero,4122
   40838:	00040c10 	cmplti	zero,zero,4144
   4083c:	000406ac 	andhi	zero,zero,4122
   40840:	00040eb4 	movhi	zero,4154
   40844:	000406ac 	andhi	zero,zero,4122
   40848:	00040e84 	movi	zero,4154
   4084c:	00040d80 	call	40d8 <__alt_mem_onchip_memory2_0-0x3bf28>
   40850:	000408f4 	movhi	zero,4131
   40854:	000406ac 	andhi	zero,zero,4122
   40858:	00040ce8 	cmpgeui	zero,zero,4147
   4085c:	00040c58 	cmpnei	zero,zero,4145
   40860:	00040e94 	movui	zero,4154
   40864:	00040ea4 	muli	zero,zero,4154
   40868:	00040bcc 	andi	zero,zero,4143
   4086c:	00040c34 	movhi	zero,4144
   40870:	000408c0 	call	408c <__alt_mem_onchip_memory2_0-0x3bf74>
   40874:	00040e54 	movui	zero,4153
   40878:	00040e74 	movhi	zero,4153
   4087c:	000406ac 	andhi	zero,zero,4122
   40880:	00040bec 	andhi	zero,zero,4143
   40884:	000406ac 	andhi	zero,zero,4122
   40888:	00040e64 	muli	zero,zero,4153
			 exemplos: m13 liga o motor [1,3]
					  k liga o padrão de teste
		 */

		case '0':{
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   4088c:	d1215817 	ldw	r4,-31392(gp)
   40890:	01408034 	movhi	r5,512
   40894:	297fc004 	addi	r5,r5,-256
   40898:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   4089c:	d1215817 	ldw	r4,-31392(gp)
   408a0:	0140c034 	movhi	r5,768
   408a4:	297fc004 	addi	r5,r5,-256
   408a8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   408ac:	d1215817 	ldw	r4,-31392(gp)
   408b0:	01404034 	movhi	r5,256
   408b4:	297fc004 	addi	r5,r5,-256
   408b8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
		break;
   408bc:	003f7b06 	br	406ac <_ZN3App3runEv+0x6c>
		case 's':{
			motors->write((1<<24)|(255<<16)|(0<<8)|(1));
   408c0:	d1215817 	ldw	r4,-31392(gp)
   408c4:	01407ff4 	movhi	r5,511
   408c8:	29400044 	addi	r5,r5,1
   408cc:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(0<<8)|(1));
   408d0:	d1215817 	ldw	r4,-31392(gp)
   408d4:	0140bff4 	movhi	r5,767
   408d8:	29400044 	addi	r5,r5,1
   408dc:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(0<<8)|(255));
   408e0:	d1215817 	ldw	r4,-31392(gp)
   408e4:	01403ff4 	movhi	r5,255
   408e8:	29403fc4 	addi	r5,r5,255
   408ec:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
		break;
   408f0:	003f6e06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'k':{
			int i,j,k;
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
   408f4:	d1215817 	ldw	r4,-31392(gp)
   408f8:	01408034 	movhi	r5,512
   408fc:	297fc004 	addi	r5,r5,-256
   40900:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));
   40904:	d1215817 	ldw	r4,-31392(gp)
   40908:	0140c034 	movhi	r5,768
   4090c:	297fc004 	addi	r5,r5,-256
   40910:	00418a00 	call	418a0 <_ZN6Motors5writeEj>

			for(i=0;i<8;i++){
   40914:	e03fb115 	stw	zero,-316(fp)
   40918:	00004706 	br	40a38 <_ZN3App3runEv+0x3f8>
				k=i;
   4091c:	e0bfb117 	ldw	r2,-316(fp)
   40920:	e0bfaf15 	stw	r2,-324(fp)
				j=i;
   40924:	e0bfb117 	ldw	r2,-316(fp)
   40928:	e0bfb015 	stw	r2,-320(fp)
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   4092c:	d1215817 	ldw	r4,-31392(gp)
   40930:	01404034 	movhi	r5,256
   40934:	297fc004 	addi	r5,r5,-256
   40938:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(i<<16)|(i<<8)|(255));
   4093c:	d1215817 	ldw	r4,-31392(gp)
   40940:	e0bfb117 	ldw	r2,-316(fp)
   40944:	1006943a 	slli	r3,r2,16
   40948:	e0bfb117 	ldw	r2,-316(fp)
   4094c:	1004923a 	slli	r2,r2,8
   40950:	1884b03a 	or	r2,r3,r2
   40954:	10803fd4 	ori	r2,r2,255
   40958:	100b883a 	mov	r5,r2
   4095c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				while(k>=0 && j < 8){
   40960:	00000f06 	br	409a0 <_ZN3App3runEv+0x360>
					k=k-1;
   40964:	e0bfaf17 	ldw	r2,-324(fp)
   40968:	10bfffc4 	addi	r2,r2,-1
   4096c:	e0bfaf15 	stw	r2,-324(fp)
					j=j+1;
   40970:	e0bfb017 	ldw	r2,-320(fp)
   40974:	10800044 	addi	r2,r2,1
   40978:	e0bfb015 	stw	r2,-320(fp)
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
   4097c:	d1215817 	ldw	r4,-31392(gp)
   40980:	e0bfb017 	ldw	r2,-320(fp)
   40984:	1006943a 	slli	r3,r2,16
   40988:	e0bfaf17 	ldw	r2,-324(fp)
   4098c:	1004923a 	slli	r2,r2,8
   40990:	1884b03a 	or	r2,r3,r2
   40994:	10803fd4 	ori	r2,r2,255
   40998:	100b883a 	mov	r5,r2
   4099c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			for(i=0;i<8;i++){
				k=i;
				j=i;
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(i<<8)|(255));
				while(k>=0 && j < 8){
   409a0:	e0bfaf17 	ldw	r2,-324(fp)
   409a4:	1004803a 	cmplt	r2,r2,zero
   409a8:	1000031e 	bne	r2,zero,409b8 <_ZN3App3runEv+0x378>
   409ac:	e0bfb017 	ldw	r2,-320(fp)
   409b0:	10800210 	cmplti	r2,r2,8
   409b4:	103feb1e 	bne	r2,zero,40964 <_ZN3App3runEv+0x324>
					k=k-1;
					j=j+1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				k=i;
   409b8:	e0bfb117 	ldw	r2,-316(fp)
   409bc:	e0bfaf15 	stw	r2,-324(fp)
				j=i;
   409c0:	e0bfb117 	ldw	r2,-316(fp)
   409c4:	e0bfb015 	stw	r2,-320(fp)
				while(k<8 && j >=0){
   409c8:	00000f06 	br	40a08 <_ZN3App3runEv+0x3c8>
					k=k+1;
   409cc:	e0bfaf17 	ldw	r2,-324(fp)
   409d0:	10800044 	addi	r2,r2,1
   409d4:	e0bfaf15 	stw	r2,-324(fp)
					j=j-1;
   409d8:	e0bfb017 	ldw	r2,-320(fp)
   409dc:	10bfffc4 	addi	r2,r2,-1
   409e0:	e0bfb015 	stw	r2,-320(fp)
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
   409e4:	d1215817 	ldw	r4,-31392(gp)
   409e8:	e0bfb017 	ldw	r2,-320(fp)
   409ec:	1006943a 	slli	r3,r2,16
   409f0:	e0bfaf17 	ldw	r2,-324(fp)
   409f4:	1004923a 	slli	r2,r2,8
   409f8:	1884b03a 	or	r2,r3,r2
   409fc:	10803fd4 	ori	r2,r2,255
   40a00:	100b883a 	mov	r5,r2
   40a04:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
					j=j+1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				k=i;
				j=i;
				while(k<8 && j >=0){
   40a08:	e0bfaf17 	ldw	r2,-324(fp)
   40a0c:	10800208 	cmpgei	r2,r2,8
   40a10:	1000031e 	bne	r2,zero,40a20 <_ZN3App3runEv+0x3e0>
   40a14:	e0bfb017 	ldw	r2,-320(fp)
   40a18:	1004403a 	cmpge	r2,r2,zero
   40a1c:	103feb1e 	bne	r2,zero,409cc <_ZN3App3runEv+0x38c>
					k=k+1;
					j=j-1;
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
   40a20:	010000f4 	movhi	r4,3
   40a24:	21035004 	addi	r4,r4,3392
   40a28:	00453680 	call	45368 <usleep>
		case 'k':{
			int i,j,k;
			motors->write((1<<24)|(255<<16)|(255<<8)|(0));
			motors->write((2<<24)|(255<<16)|(255<<8)|(0));

			for(i=0;i<8;i++){
   40a2c:	e0bfb117 	ldw	r2,-316(fp)
   40a30:	10800044 	addi	r2,r2,1
   40a34:	e0bfb115 	stw	r2,-316(fp)
   40a38:	e0bfb117 	ldw	r2,-316(fp)
   40a3c:	10800210 	cmplti	r2,r2,8
   40a40:	103fb61e 	bne	r2,zero,4091c <_ZN3App3runEv+0x2dc>
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
   40a44:	e03fb115 	stw	zero,-316(fp)
   40a48:	00001b06 	br	40ab8 <_ZN3App3runEv+0x478>
				for(j=0;j<8;j++){
   40a4c:	e03fb015 	stw	zero,-320(fp)
   40a50:	00001306 	br	40aa0 <_ZN3App3runEv+0x460>
					motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40a54:	d1215817 	ldw	r4,-31392(gp)
   40a58:	01404034 	movhi	r5,256
   40a5c:	297fc004 	addi	r5,r5,-256
   40a60:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
					motors->write((0<<24)|(i<<16)|(j<<8)|(255));
   40a64:	d1215817 	ldw	r4,-31392(gp)
   40a68:	e0bfb117 	ldw	r2,-316(fp)
   40a6c:	1006943a 	slli	r3,r2,16
   40a70:	e0bfb017 	ldw	r2,-320(fp)
   40a74:	1004923a 	slli	r2,r2,8
   40a78:	1884b03a 	or	r2,r3,r2
   40a7c:	10803fd4 	ori	r2,r2,255
   40a80:	100b883a 	mov	r5,r2
   40a84:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
					usleep(150000);
   40a88:	010000b4 	movhi	r4,2
   40a8c:	21127c04 	addi	r4,r4,18928
   40a90:	00453680 	call	45368 <usleep>
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
				for(j=0;j<8;j++){
   40a94:	e0bfb017 	ldw	r2,-320(fp)
   40a98:	10800044 	addi	r2,r2,1
   40a9c:	e0bfb015 	stw	r2,-320(fp)
   40aa0:	e0bfb017 	ldw	r2,-320(fp)
   40aa4:	10800210 	cmplti	r2,r2,8
   40aa8:	103fea1e 	bne	r2,zero,40a54 <_ZN3App3runEv+0x414>
					motors->write((0<<24)|(j<<16)|(k<<8)|(255));
				}
				usleep(200000);
			}

			for(i=0;i<4;i++){
   40aac:	e0bfb117 	ldw	r2,-316(fp)
   40ab0:	10800044 	addi	r2,r2,1
   40ab4:	e0bfb115 	stw	r2,-316(fp)
   40ab8:	e0bfb117 	ldw	r2,-316(fp)
   40abc:	10800110 	cmplti	r2,r2,4
   40ac0:	103fe21e 	bne	r2,zero,40a4c <_ZN3App3runEv+0x40c>
					usleep(150000);
				}
			}


			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40ac4:	d1215817 	ldw	r4,-31392(gp)
   40ac8:	01404034 	movhi	r5,256
   40acc:	297fc004 	addi	r5,r5,-256
   40ad0:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			usleep(500000);
   40ad4:	01000234 	movhi	r4,8
   40ad8:	21284804 	addi	r4,r4,-24288
   40adc:	00453680 	call	45368 <usleep>

			for(i=0;i<4;i++){
   40ae0:	e03fb115 	stw	zero,-316(fp)
   40ae4:	00001006 	br	40b28 <_ZN3App3runEv+0x4e8>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40ae8:	d1215817 	ldw	r4,-31392(gp)
   40aec:	01404034 	movhi	r5,256
   40af0:	297fc004 	addi	r5,r5,-256
   40af4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(i<<16)|(255<<8)|(255));
   40af8:	d1215817 	ldw	r4,-31392(gp)
   40afc:	e0bfb117 	ldw	r2,-316(fp)
   40b00:	1004943a 	slli	r2,r2,16
   40b04:	10bfffd4 	ori	r2,r2,65535
   40b08:	100b883a 	mov	r5,r2
   40b0c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				usleep(450000);
   40b10:	010001f4 	movhi	r4,7
   40b14:	21377404 	addi	r4,r4,-8752
   40b18:	00453680 	call	45368 <usleep>


			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(i=0;i<4;i++){
   40b1c:	e0bfb117 	ldw	r2,-316(fp)
   40b20:	10800044 	addi	r2,r2,1
   40b24:	e0bfb115 	stw	r2,-316(fp)
   40b28:	e0bfb117 	ldw	r2,-316(fp)
   40b2c:	10800110 	cmplti	r2,r2,4
   40b30:	103fed1e 	bne	r2,zero,40ae8 <_ZN3App3runEv+0x4a8>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(i<<16)|(255<<8)|(255));
				usleep(450000);
			}

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40b34:	d1215817 	ldw	r4,-31392(gp)
   40b38:	01404034 	movhi	r5,256
   40b3c:	297fc004 	addi	r5,r5,-256
   40b40:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			usleep(500000);
   40b44:	01000234 	movhi	r4,8
   40b48:	21284804 	addi	r4,r4,-24288
   40b4c:	00453680 	call	45368 <usleep>

			for(j=0;j<8;j++){
   40b50:	e03fb015 	stw	zero,-320(fp)
   40b54:	00001206 	br	40ba0 <_ZN3App3runEv+0x560>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40b58:	d1215817 	ldw	r4,-31392(gp)
   40b5c:	01404034 	movhi	r5,256
   40b60:	297fc004 	addi	r5,r5,-256
   40b64:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				motors->write((0<<24)|(255<<16)|(j<<8)|(255));
   40b68:	d1215817 	ldw	r4,-31392(gp)
   40b6c:	e0bfb017 	ldw	r2,-320(fp)
   40b70:	1006923a 	slli	r3,r2,8
   40b74:	00803ff4 	movhi	r2,255
   40b78:	10803fc4 	addi	r2,r2,255
   40b7c:	1884b03a 	or	r2,r3,r2
   40b80:	100b883a 	mov	r5,r2
   40b84:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				usleep(300000);
   40b88:	01000174 	movhi	r4,5
   40b8c:	2124f804 	addi	r4,r4,-27680
   40b90:	00453680 	call	45368 <usleep>
			}

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
			usleep(500000);

			for(j=0;j<8;j++){
   40b94:	e0bfb017 	ldw	r2,-320(fp)
   40b98:	10800044 	addi	r2,r2,1
   40b9c:	e0bfb015 	stw	r2,-320(fp)
   40ba0:	e0bfb017 	ldw	r2,-320(fp)
   40ba4:	10800210 	cmplti	r2,r2,8
   40ba8:	103feb1e 	bne	r2,zero,40b58 <_ZN3App3runEv+0x518>
				motors->write((0<<24)|(255<<16)|(255<<8)|(0));
				motors->write((0<<24)|(255<<16)|(j<<8)|(255));
				usleep(300000);
			}
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40bac:	d1215817 	ldw	r4,-31392(gp)
   40bb0:	01404034 	movhi	r5,256
   40bb4:	297fc004 	addi	r5,r5,-256
   40bb8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			usleep(500000);
   40bbc:	01000234 	movhi	r4,8
   40bc0:	21284804 	addi	r4,r4,-24288
   40bc4:	00453680 	call	45368 <usleep>



		}
			break;
   40bc8:	003eb806 	br	406ac <_ZN3App3runEv+0x6c>
		case 'q':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40bcc:	d1215817 	ldw	r4,-31392(gp)
   40bd0:	01404034 	movhi	r5,256
   40bd4:	297fc004 	addi	r5,r5,-256
   40bd8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(0<<16)|(255<<8)|(255));
   40bdc:	d1215817 	ldw	r4,-31392(gp)
   40be0:	017fffd4 	movui	r5,65535
   40be4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>

		}
			break;
   40be8:	003eb006 	br	406ac <_ZN3App3runEv+0x6c>
		case 'w':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40bec:	d1215817 	ldw	r4,-31392(gp)
   40bf0:	01404034 	movhi	r5,256
   40bf4:	297fc004 	addi	r5,r5,-256
   40bf8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(1<<16)|(255<<8)|(255));
   40bfc:	d1215817 	ldw	r4,-31392(gp)
   40c00:	014000b4 	movhi	r5,2
   40c04:	297fffc4 	addi	r5,r5,-1
   40c08:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				}
			break;
   40c0c:	003ea706 	br	406ac <_ZN3App3runEv+0x6c>
		case 'e':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40c10:	d1215817 	ldw	r4,-31392(gp)
   40c14:	01404034 	movhi	r5,256
   40c18:	297fc004 	addi	r5,r5,-256
   40c1c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(2<<16)|(255<<8)|(255));				}
   40c20:	d1215817 	ldw	r4,-31392(gp)
   40c24:	014000f4 	movhi	r5,3
   40c28:	297fffc4 	addi	r5,r5,-1
   40c2c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			break;
   40c30:	003e9e06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'r':{

			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40c34:	d1215817 	ldw	r4,-31392(gp)
   40c38:	01404034 	movhi	r5,256
   40c3c:	297fc004 	addi	r5,r5,-256
   40c40:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(3<<16)|(255<<8)|(255));
   40c44:	d1215817 	ldw	r4,-31392(gp)
   40c48:	01400134 	movhi	r5,4
   40c4c:	297fffc4 	addi	r5,r5,-1
   40c50:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				}
			break;
   40c54:	003e9506 	br	406ac <_ZN3App3runEv+0x6c>
		case 'n': { /* motors */
			int linha = (int)(data[1]);
   40c58:	e0bfbb43 	ldbu	r2,-275(fp)
   40c5c:	10803fcc 	andi	r2,r2,255
   40c60:	1080201c 	xori	r2,r2,128
   40c64:	10bfe004 	addi	r2,r2,-128
   40c68:	e0bfae15 	stw	r2,-328(fp)
			int coluna = (int)(data[2]);
   40c6c:	e0bfbb83 	ldbu	r2,-274(fp)
   40c70:	10803fcc 	andi	r2,r2,255
   40c74:	1080201c 	xori	r2,r2,128
   40c78:	10bfe004 	addi	r2,r2,-128
   40c7c:	e0bfad15 	stw	r2,-332(fp)
			lastLinha = linha;
   40c80:	e0bfae17 	ldw	r2,-328(fp)
   40c84:	e0bfb315 	stw	r2,-308(fp)
			lastColuna = coluna;
   40c88:	e0bfad17 	ldw	r2,-332(fp)
   40c8c:	e0bfb415 	stw	r2,-304(fp)
			lastPotencia = 0;
   40c90:	e03fb215 	stw	zero,-312(fp)
			alt_putchar('\n');
   40c94:	01000284 	movi	r4,10
   40c98:	00452380 	call	45238 <alt_putchar>
			alt_putchar(linha);
   40c9c:	e13fae17 	ldw	r4,-328(fp)
   40ca0:	00452380 	call	45238 <alt_putchar>
			alt_putchar(coluna);
   40ca4:	e13fad17 	ldw	r4,-332(fp)
   40ca8:	00452380 	call	45238 <alt_putchar>
			alt_putchar('\n');
   40cac:	01000284 	movi	r4,10
   40cb0:	00452380 	call	45238 <alt_putchar>
//			alt_putstr("Motors received. Sending it to the motors...\n");
			int command = (  (0 << 24) | ((linha-48) << 16) | ((coluna-48) << 8) | (255) );
   40cb4:	e0bfae17 	ldw	r2,-328(fp)
   40cb8:	10bff404 	addi	r2,r2,-48
   40cbc:	1006943a 	slli	r3,r2,16
   40cc0:	e0bfad17 	ldw	r2,-332(fp)
   40cc4:	10bff404 	addi	r2,r2,-48
   40cc8:	1004923a 	slli	r2,r2,8
   40ccc:	1884b03a 	or	r2,r3,r2
   40cd0:	10803fd4 	ori	r2,r2,255
   40cd4:	e0bfac15 	stw	r2,-336(fp)
//			alt_printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
			motors->write(command);
   40cd8:	d1215817 	ldw	r4,-31392(gp)
   40cdc:	e17fac17 	ldw	r5,-336(fp)
   40ce0:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
		break;
   40ce4:	003e7106 	br	406ac <_ZN3App3runEv+0x6c>
		case 'm': { /* motors */
					int linha = (int)(data[1]);
   40ce8:	e0bfbb43 	ldbu	r2,-275(fp)
   40cec:	10803fcc 	andi	r2,r2,255
   40cf0:	1080201c 	xori	r2,r2,128
   40cf4:	10bfe004 	addi	r2,r2,-128
   40cf8:	e0bfab15 	stw	r2,-340(fp)
					int coluna = (int)(data[2]);
   40cfc:	e0bfbb83 	ldbu	r2,-274(fp)
   40d00:	10803fcc 	andi	r2,r2,255
   40d04:	1080201c 	xori	r2,r2,128
   40d08:	10bfe004 	addi	r2,r2,-128
   40d0c:	e0bfaa15 	stw	r2,-344(fp)
					int potencia = (int)(data[3]);
   40d10:	e0bfbbc3 	ldbu	r2,-273(fp)
   40d14:	10803fcc 	andi	r2,r2,255
   40d18:	1080201c 	xori	r2,r2,128
   40d1c:	10bfe004 	addi	r2,r2,-128
   40d20:	e0bfa915 	stw	r2,-348(fp)
					alt_putchar('\n');
   40d24:	01000284 	movi	r4,10
   40d28:	00452380 	call	45238 <alt_putchar>
					alt_putchar(linha+48);
   40d2c:	e0bfab17 	ldw	r2,-340(fp)
   40d30:	11000c04 	addi	r4,r2,48
   40d34:	00452380 	call	45238 <alt_putchar>
					alt_putchar(coluna+48);
   40d38:	e0bfaa17 	ldw	r2,-344(fp)
   40d3c:	11000c04 	addi	r4,r2,48
   40d40:	00452380 	call	45238 <alt_putchar>
					alt_putchar('\n');
   40d44:	01000284 	movi	r4,10
   40d48:	00452380 	call	45238 <alt_putchar>
					int command = (  (0 << 24) | ((linha) << 16) | ((coluna) << 8) | (potencia*(5/2)) );
   40d4c:	e0bfab17 	ldw	r2,-340(fp)
   40d50:	1006943a 	slli	r3,r2,16
   40d54:	e0bfaa17 	ldw	r2,-344(fp)
   40d58:	1004923a 	slli	r2,r2,8
   40d5c:	1886b03a 	or	r3,r3,r2
   40d60:	e0bfa917 	ldw	r2,-348(fp)
   40d64:	1085883a 	add	r2,r2,r2
   40d68:	1884b03a 	or	r2,r3,r2
   40d6c:	e0bfa815 	stw	r2,-352(fp)
					motors->write(command);
   40d70:	d1215817 	ldw	r4,-31392(gp)
   40d74:	e17fa817 	ldw	r5,-352(fp)
   40d78:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
				}
		break;
   40d7c:	003e4b06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'j':{
			int command = (  (0 << 24) | ((lastLinha-48) << 16) | ((lastColuna-48) << 8) | (lastPotencia) );
   40d80:	e0bfb317 	ldw	r2,-308(fp)
   40d84:	10bff404 	addi	r2,r2,-48
   40d88:	1006943a 	slli	r3,r2,16
   40d8c:	e0bfb417 	ldw	r2,-304(fp)
   40d90:	10bff404 	addi	r2,r2,-48
   40d94:	1004923a 	slli	r2,r2,8
   40d98:	1886b03a 	or	r3,r3,r2
   40d9c:	e0bfb217 	ldw	r2,-312(fp)
   40da0:	1884b03a 	or	r2,r3,r2
   40da4:	e0bfa715 	stw	r2,-356(fp)
			motors->write(command);
   40da8:	d1215817 	ldw	r4,-31392(gp)
   40dac:	e17fa717 	ldw	r5,-356(fp)
   40db0:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			lastPotencia += 10;
   40db4:	e0bfb217 	ldw	r2,-312(fp)
   40db8:	10800284 	addi	r2,r2,10
   40dbc:	e0bfb215 	stw	r2,-312(fp)
			if(lastPotencia > 255) lastPotencia =0;
   40dc0:	e0bfb217 	ldw	r2,-312(fp)
   40dc4:	10804010 	cmplti	r2,r2,256
   40dc8:	103e381e 	bne	r2,zero,406ac <_ZN3App3runEv+0x6c>
   40dcc:	e03fb215 	stw	zero,-312(fp)

		}
		break;
   40dd0:	003e3606 	br	406ac <_ZN3App3runEv+0x6c>

		case 'a': { /*audio*/
//			alt_putstr("Audio received. Sending it to the FFT...\n");
//			alt_printf("%s\n", data);
			//buffer.push(data);
			motors->write(4, 255, 255, 0);
   40dd4:	d1215817 	ldw	r4,-31392(gp)
   40dd8:	d8000015 	stw	zero,0(sp)
   40ddc:	01400104 	movi	r5,4
   40de0:	01803fc4 	movi	r6,255
   40de4:	01c03fc4 	movi	r7,255
   40de8:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
			//	fft->write(buffer.pop());
			//}


		}
			break;
   40dec:	003e2f06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'c': { /*compass*/
//			alt_putstr("Compass received. Sending to the motors...\n");
//			alt_printf("%s\n", data);
			int x;
			x = (int)(data[1]*360)/125;
   40df0:	e0bfbb43 	ldbu	r2,-275(fp)
   40df4:	11003fcc 	andi	r4,r2,255
   40df8:	2100201c 	xori	r4,r4,128
   40dfc:	213fe004 	addi	r4,r4,-128
   40e00:	01405a04 	movi	r5,360
   40e04:	004397c0 	call	4397c <__mulsi3>
   40e08:	1009883a 	mov	r4,r2
   40e0c:	01401f44 	movi	r5,125
   40e10:	00438ac0 	call	438ac <__divsi3>
   40e14:	e0bfa615 	stw	r2,-360(fp)
			x = x > 180 ? x-360:x;
   40e18:	e0bfa617 	ldw	r2,-360(fp)
   40e1c:	10802d50 	cmplti	r2,r2,181
   40e20:	1000041e 	bne	r2,zero,40e34 <_ZN3App3runEv+0x7f4>
   40e24:	e0bfa617 	ldw	r2,-360(fp)
   40e28:	10bfa604 	addi	r2,r2,-360
   40e2c:	e0bffe15 	stw	r2,-8(fp)
   40e30:	00000206 	br	40e3c <_ZN3App3runEv+0x7fc>
   40e34:	e0bfa617 	ldw	r2,-360(fp)
   40e38:	e0bffe15 	stw	r2,-8(fp)
   40e3c:	e0fffe17 	ldw	r3,-8(fp)
   40e40:	e0ffa615 	stw	r3,-360(fp)
			writeCompass(x);
   40e44:	e13ffb17 	ldw	r4,-20(fp)
   40e48:	e17fa617 	ldw	r5,-360(fp)
   40e4c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40e50:	003e1606 	br	406ac <_ZN3App3runEv+0x6c>
		case 't': {
		    writeCompass(0);
   40e54:	e13ffb17 	ldw	r4,-20(fp)
   40e58:	000b883a 	mov	r5,zero
   40e5c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40e60:	003e1206 	br	406ac <_ZN3App3runEv+0x6c>
		case 'y': {
		    writeCompass(60);
   40e64:	e13ffb17 	ldw	r4,-20(fp)
   40e68:	01400f04 	movi	r5,60
   40e6c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40e70:	003e0e06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'u': {
			writeCompass(100);
   40e74:	e13ffb17 	ldw	r4,-20(fp)
   40e78:	01401904 	movi	r5,100
   40e7c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40e80:	003e0a06 	br	406ac <_ZN3App3runEv+0x6c>
		case 'i': {
			writeCompass(180);
   40e84:	e13ffb17 	ldw	r4,-20(fp)
   40e88:	01402d04 	movi	r5,180
   40e8c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40e90:	003e0606 	br	406ac <_ZN3App3runEv+0x6c>
		case 'o': {
		    writeCompass(240);
   40e94:	e13ffb17 	ldw	r4,-20(fp)
   40e98:	01403c04 	movi	r5,240
   40e9c:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40ea0:	003e0206 	br	406ac <_ZN3App3runEv+0x6c>
		case 'p': {
			writeCompass(359);
   40ea4:	e13ffb17 	ldw	r4,-20(fp)
   40ea8:	014059c4 	movi	r5,359
   40eac:	00405f80 	call	405f8 <_ZN3App12writeCompassEi>
		}
			break;
   40eb0:	003dfe06 	br	406ac <_ZN3App3runEv+0x6c>
			//O que fazer quando receber dados do giroscópio
			//O processo abaixo transforma o dado recebido de volta para graus em um range [-180;180]
			//A escala do valor recebido é [0;125], requisito necessário para transmissão dos valores
				//devido a alguns erros com valores maiores que 125 (são representados como números negativos)
			int x,y;
			x = (int)(data[1]*360)/125;
   40eb4:	e0bfbb43 	ldbu	r2,-275(fp)
   40eb8:	11003fcc 	andi	r4,r2,255
   40ebc:	2100201c 	xori	r4,r4,128
   40ec0:	213fe004 	addi	r4,r4,-128
   40ec4:	01405a04 	movi	r5,360
   40ec8:	004397c0 	call	4397c <__mulsi3>
   40ecc:	1009883a 	mov	r4,r2
   40ed0:	01401f44 	movi	r5,125
   40ed4:	00438ac0 	call	438ac <__divsi3>
   40ed8:	e0bfa515 	stw	r2,-364(fp)
			x = x > 180 ? x-360:x;
   40edc:	e0bfa517 	ldw	r2,-364(fp)
   40ee0:	10802d50 	cmplti	r2,r2,181
   40ee4:	1000041e 	bne	r2,zero,40ef8 <_ZN3App3runEv+0x8b8>
   40ee8:	e0bfa517 	ldw	r2,-364(fp)
   40eec:	10bfa604 	addi	r2,r2,-360
   40ef0:	e0bffd15 	stw	r2,-12(fp)
   40ef4:	00000206 	br	40f00 <_ZN3App3runEv+0x8c0>
   40ef8:	e0bfa517 	ldw	r2,-364(fp)
   40efc:	e0bffd15 	stw	r2,-12(fp)
   40f00:	e0fffd17 	ldw	r3,-12(fp)
   40f04:	e0ffa515 	stw	r3,-364(fp)
			y = (int)(data[2]*360)/125;
   40f08:	e0bfbb83 	ldbu	r2,-274(fp)
   40f0c:	11003fcc 	andi	r4,r2,255
   40f10:	2100201c 	xori	r4,r4,128
   40f14:	213fe004 	addi	r4,r4,-128
   40f18:	01405a04 	movi	r5,360
   40f1c:	004397c0 	call	4397c <__mulsi3>
   40f20:	1009883a 	mov	r4,r2
   40f24:	01401f44 	movi	r5,125
   40f28:	00438ac0 	call	438ac <__divsi3>
   40f2c:	e0bfa415 	stw	r2,-368(fp)
			y = y > 180 ? y-360:y;
   40f30:	e0bfa417 	ldw	r2,-368(fp)
   40f34:	10802d50 	cmplti	r2,r2,181
   40f38:	1000041e 	bne	r2,zero,40f4c <_ZN3App3runEv+0x90c>
   40f3c:	e0bfa417 	ldw	r2,-368(fp)
   40f40:	10bfa604 	addi	r2,r2,-360
   40f44:	e0bffc15 	stw	r2,-16(fp)
   40f48:	00000206 	br	40f54 <_ZN3App3runEv+0x914>
   40f4c:	e0bfa417 	ldw	r2,-368(fp)
   40f50:	e0bffc15 	stw	r2,-16(fp)
   40f54:	e0fffc17 	ldw	r3,-16(fp)
   40f58:	e0ffa415 	stw	r3,-368(fp)
			writeGyroscope(x, y, 255);
   40f5c:	e13ffb17 	ldw	r4,-20(fp)
   40f60:	e17fa517 	ldw	r5,-364(fp)
   40f64:	e1bfa417 	ldw	r6,-368(fp)
   40f68:	01c03fc4 	movi	r7,255
   40f6c:	00402cc0 	call	402cc <_ZN3App14writeGyroscopeEiii>
			//data[1] é a rotação lateral do smartphone (esquerda/direita)
			//data[2] é a rotação 'vertical' (pra cima/baixo)

		}

			break;
   40f70:	003dce06 	br	406ac <_ZN3App3runEv+0x6c>
		case '1': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f74:	d1215817 	ldw	r4,-31392(gp)
   40f78:	01404034 	movhi	r5,256
   40f7c:	297fc004 	addi	r5,r5,-256
   40f80:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(0<<8)|(255));		}
   40f84:	d1215817 	ldw	r4,-31392(gp)
   40f88:	01403ff4 	movhi	r5,255
   40f8c:	29403fc4 	addi	r5,r5,255
   40f90:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			break;
   40f94:	003dc506 	br	406ac <_ZN3App3runEv+0x6c>
		case '2': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40f98:	d1215817 	ldw	r4,-31392(gp)
   40f9c:	01404034 	movhi	r5,256
   40fa0:	297fc004 	addi	r5,r5,-256
   40fa4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(1<<8)|(255));
   40fa8:	d1215817 	ldw	r4,-31392(gp)
   40fac:	01403ff4 	movhi	r5,255
   40fb0:	29407fc4 	addi	r5,r5,511
   40fb4:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
			break;
   40fb8:	003dbc06 	br	406ac <_ZN3App3runEv+0x6c>
		case '3': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40fbc:	d1215817 	ldw	r4,-31392(gp)
   40fc0:	01404034 	movhi	r5,256
   40fc4:	297fc004 	addi	r5,r5,-256
   40fc8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(2<<8)|(255));
   40fcc:	d1215817 	ldw	r4,-31392(gp)
   40fd0:	01403ff4 	movhi	r5,255
   40fd4:	2940bfc4 	addi	r5,r5,767
   40fd8:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
			break;
   40fdc:	003db306 	br	406ac <_ZN3App3runEv+0x6c>
		case '4': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   40fe0:	d1215817 	ldw	r4,-31392(gp)
   40fe4:	01404034 	movhi	r5,256
   40fe8:	297fc004 	addi	r5,r5,-256
   40fec:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(3<<8)|(255));
   40ff0:	d1215817 	ldw	r4,-31392(gp)
   40ff4:	01403ff4 	movhi	r5,255
   40ff8:	2940ffc4 	addi	r5,r5,1023
   40ffc:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
		}
			break;
   41000:	003daa06 	br	406ac <_ZN3App3runEv+0x6c>
		case '5': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   41004:	d1215817 	ldw	r4,-31392(gp)
   41008:	01404034 	movhi	r5,256
   4100c:	297fc004 	addi	r5,r5,-256
   41010:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(4<<8)|(255));
   41014:	d1215817 	ldw	r4,-31392(gp)
   41018:	01403ff4 	movhi	r5,255
   4101c:	29413fc4 	addi	r5,r5,1279
   41020:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			}
			break;
   41024:	003da106 	br	406ac <_ZN3App3runEv+0x6c>
		case '6': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   41028:	d1215817 	ldw	r4,-31392(gp)
   4102c:	01404034 	movhi	r5,256
   41030:	297fc004 	addi	r5,r5,-256
   41034:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(5<<8)|(255));
   41038:	d1215817 	ldw	r4,-31392(gp)
   4103c:	01403ff4 	movhi	r5,255
   41040:	29417fc4 	addi	r5,r5,1535
   41044:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			}
			break;
   41048:	003d9806 	br	406ac <_ZN3App3runEv+0x6c>
		case '7': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   4104c:	d1215817 	ldw	r4,-31392(gp)
   41050:	01404034 	movhi	r5,256
   41054:	297fc004 	addi	r5,r5,-256
   41058:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(6<<8)|(255));
   4105c:	d1215817 	ldw	r4,-31392(gp)
   41060:	01403ff4 	movhi	r5,255
   41064:	2941bfc4 	addi	r5,r5,1791
   41068:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			}
			break;
   4106c:	003d8f06 	br	406ac <_ZN3App3runEv+0x6c>
		case '8': {
			motors->write((0<<24)|(255<<16)|(255<<8)|(0));
   41070:	d1215817 	ldw	r4,-31392(gp)
   41074:	01404034 	movhi	r5,256
   41078:	297fc004 	addi	r5,r5,-256
   4107c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((0<<24)|(255<<16)|(7<<8)|(255));
   41080:	d1215817 	ldw	r4,-31392(gp)
   41084:	01403ff4 	movhi	r5,255
   41088:	2941ffc4 	addi	r5,r5,2047
   4108c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>





	while (1) {
   41090:	003d8606 	br	406ac <_ZN3App3runEv+0x6c>

00041094 <_ZN3App10writeAudioEPii>:
		}
	}

}

void App::writeAudio(int* freq, int samples) {
   41094:	defff404 	addi	sp,sp,-48
   41098:	dfc00b15 	stw	ra,44(sp)
   4109c:	df000a15 	stw	fp,40(sp)
   410a0:	dc400915 	stw	r17,36(sp)
   410a4:	dc000815 	stw	r16,32(sp)
   410a8:	df000804 	addi	fp,sp,32
   410ac:	e13ffc15 	stw	r4,-16(fp)
   410b0:	e17ffd15 	stw	r5,-12(fp)
   410b4:	e1bffe15 	stw	r6,-8(fp)
	int commom = samples/COLUMNS;
   410b8:	e0bffe17 	ldw	r2,-8(fp)
   410bc:	e0bfff15 	stw	r2,-4(fp)
   410c0:	e0ffff17 	ldw	r3,-4(fp)
   410c4:	1804403a 	cmpge	r2,r3,zero
   410c8:	1000031e 	bne	r2,zero,410d8 <_ZN3App10writeAudioEPii+0x44>
   410cc:	e0bfff17 	ldw	r2,-4(fp)
   410d0:	108001c4 	addi	r2,r2,7
   410d4:	e0bfff15 	stw	r2,-4(fp)
   410d8:	e0ffff17 	ldw	r3,-4(fp)
   410dc:	1805d0fa 	srai	r2,r3,3
   410e0:	e0bffb15 	stw	r2,-20(fp)
	int summation = 0;
   410e4:	e03ffa15 	stw	zero,-24(fp)
	int pos = 0;
   410e8:	e03ff915 	stw	zero,-28(fp)
	motors->write_to_next_line();
   410ec:	d1215817 	ldw	r4,-31392(gp)
   410f0:	00418d40 	call	418d4 <_ZN6Motors18write_to_next_lineEv>
	motors->write( 0 | 0 | 255 | 0 );
   410f4:	d1215817 	ldw	r4,-31392(gp)
   410f8:	01403fc4 	movi	r5,255
   410fc:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	motors->write( 2 << 24 | 0 | 255 | 1 );
   41100:	d1215817 	ldw	r4,-31392(gp)
   41104:	01408034 	movhi	r5,512
   41108:	29403fc4 	addi	r5,r5,255
   4110c:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
	for(int i = 0; i < samples; i++) {
   41110:	e03ff815 	stw	zero,-32(fp)
   41114:	00002a06 	br	411c0 <_ZN3App10writeAudioEPii+0x12c>
		summation += freq[i];
   41118:	e0bff817 	ldw	r2,-32(fp)
   4111c:	1085883a 	add	r2,r2,r2
   41120:	1085883a 	add	r2,r2,r2
   41124:	1007883a 	mov	r3,r2
   41128:	e0bffd17 	ldw	r2,-12(fp)
   4112c:	1885883a 	add	r2,r3,r2
   41130:	10c00017 	ldw	r3,0(r2)
   41134:	e0bffa17 	ldw	r2,-24(fp)
   41138:	10c5883a 	add	r2,r2,r3
   4113c:	e0bffa15 	stw	r2,-24(fp)
		if(i%commom == commom - 1) {
   41140:	e13ff817 	ldw	r4,-32(fp)
   41144:	e17ffb17 	ldw	r5,-20(fp)
   41148:	004390c0 	call	4390c <__modsi3>
   4114c:	1007883a 	mov	r3,r2
   41150:	e0bffb17 	ldw	r2,-20(fp)
   41154:	10bfffc4 	addi	r2,r2,-1
   41158:	1880161e 	bne	r3,r2,411b4 <_ZN3App10writeAudioEPii+0x120>
			motors->write((1<<24)| 0 | (pos << 8) |(5));
   4115c:	d1215817 	ldw	r4,-31392(gp)
   41160:	e0bff917 	ldw	r2,-28(fp)
   41164:	1006923a 	slli	r3,r2,8
   41168:	00804034 	movhi	r2,256
   4116c:	10800144 	addi	r2,r2,5
   41170:	1884b03a 	or	r2,r3,r2
   41174:	100b883a 	mov	r5,r2
   41178:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
   4117c:	d4215817 	ldw	r16,-31392(gp)
   41180:	e0bff917 	ldw	r2,-28(fp)
   41184:	1022923a 	slli	r17,r2,8
   41188:	e13ffa17 	ldw	r4,-24(fp)
   4118c:	e17ffb17 	ldw	r5,-20(fp)
   41190:	00438ac0 	call	438ac <__divsi3>
   41194:	8884b03a 	or	r2,r17,r2
   41198:	100b883a 	mov	r5,r2
   4119c:	8009883a 	mov	r4,r16
   411a0:	00418a00 	call	418a0 <_ZN6Motors5writeEj>
			pos++;
   411a4:	e0bff917 	ldw	r2,-28(fp)
   411a8:	10800044 	addi	r2,r2,1
   411ac:	e0bff915 	stw	r2,-28(fp)
			summation = 0;
   411b0:	e03ffa15 	stw	zero,-24(fp)
	int summation = 0;
	int pos = 0;
	motors->write_to_next_line();
	motors->write( 0 | 0 | 255 | 0 );
	motors->write( 2 << 24 | 0 | 255 | 1 );
	for(int i = 0; i < samples; i++) {
   411b4:	e0bff817 	ldw	r2,-32(fp)
   411b8:	10800044 	addi	r2,r2,1
   411bc:	e0bff815 	stw	r2,-32(fp)
   411c0:	e0fff817 	ldw	r3,-32(fp)
   411c4:	e0bffe17 	ldw	r2,-8(fp)
   411c8:	18bfd316 	blt	r3,r2,41118 <_ZN3App10writeAudioEPii+0x84>
			motors->write((  0   | 0 | (pos << 8) | summation/commom ));
			pos++;
			summation = 0;
		}
	}
}
   411cc:	e037883a 	mov	sp,fp
   411d0:	dfc00317 	ldw	ra,12(sp)
   411d4:	df000217 	ldw	fp,8(sp)
   411d8:	dc400117 	ldw	r17,4(sp)
   411dc:	dc000017 	ldw	r16,0(sp)
   411e0:	dec00404 	addi	sp,sp,16
   411e4:	f800283a 	ret

000411e8 <_ZN3App10fftHandlerEj>:
void App::setup() {
	wifi->config(SSID, PASSWORD);
	//retirando fft    fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
   411e8:	defffc04 	addi	sp,sp,-16
   411ec:	dfc00315 	stw	ra,12(sp)
   411f0:	df000215 	stw	fp,8(sp)
   411f4:	dc000115 	stw	r16,4(sp)
   411f8:	df000104 	addi	fp,sp,4
   411fc:	e13fff15 	stw	r4,-4(fp)

	//	motors->write(output);
	fft->read();
   41200:	d1215917 	ldw	r4,-31388(gp)
   41204:	00416540 	call	41654 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
   41208:	01000134 	movhi	r4,4
   4120c:	211a1b04 	addi	r4,r4,26732
   41210:	00414f00 	call	414f0 <_ZN3App6Buffer6lengthEv>
   41214:	10800048 	cmpgei	r2,r2,1
   41218:	10803fcc 	andi	r2,r2,255
   4121c:	1005003a 	cmpeq	r2,r2,zero
   41220:	1000071e 	bne	r2,zero,41240 <_ZN3App10fftHandlerEj+0x58>
		fft->write(buffer.pop());
   41224:	d4215917 	ldw	r16,-31388(gp)
   41228:	01000134 	movhi	r4,4
   4122c:	211a1b04 	addi	r4,r4,26732
   41230:	00414080 	call	41408 <_ZN3App6Buffer3popEv>
   41234:	100b883a 	mov	r5,r2
   41238:	8009883a 	mov	r4,r16
   4123c:	004167c0 	call	4167c <_ZN3FFT5writeEPh>
}
   41240:	e037883a 	mov	sp,fp
   41244:	dfc00217 	ldw	ra,8(sp)
   41248:	df000117 	ldw	fp,4(sp)
   4124c:	dc000017 	ldw	r16,0(sp)
   41250:	dec00304 	addi	sp,sp,12
   41254:	f800283a 	ret

00041258 <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
   41258:	defffd04 	addi	sp,sp,-12
   4125c:	dfc00215 	stw	ra,8(sp)
   41260:	df000115 	stw	fp,4(sp)
   41264:	df000104 	addi	fp,sp,4
   41268:	e13fff15 	stw	r4,-4(fp)
	wifi->config(SSID, PASSWORD);
   4126c:	e0bfff17 	ldw	r2,-4(fp)
   41270:	11000517 	ldw	r4,20(r2)
   41274:	01400134 	movhi	r5,4
   41278:	2956ee04 	addi	r5,r5,23480
   4127c:	01800134 	movhi	r6,4
   41280:	3196f104 	addi	r6,r6,23492
   41284:	0041d880 	call	41d88 <_ZN4WiFi6configEPcS0_>
	//retirando fft    fft->setInterruptHandler(App::fftHandler);
}
   41288:	e037883a 	mov	sp,fp
   4128c:	dfc00117 	ldw	ra,4(sp)
   41290:	df000017 	ldw	fp,0(sp)
   41294:	dec00204 	addi	sp,sp,8
   41298:	f800283a 	ret

0004129c <_ZN3AppD1Ev>:
	compass_vib_value = 255;
	gyroscope_vib_value = 255;
	running.init();
}

App::~App() {
   4129c:	defffd04 	addi	sp,sp,-12
   412a0:	dfc00215 	stw	ra,8(sp)
   412a4:	df000115 	stw	fp,4(sp)
   412a8:	df000104 	addi	fp,sp,4
   412ac:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   412b0:	e0bfff17 	ldw	r2,-4(fp)
   412b4:	11000517 	ldw	r4,20(r2)
   412b8:	0041cb40 	call	41cb4 <_ZN4WiFi10stopServerEv>
}
   412bc:	e037883a 	mov	sp,fp
   412c0:	dfc00117 	ldw	ra,4(sp)
   412c4:	df000017 	ldw	fp,0(sp)
   412c8:	dec00204 	addi	sp,sp,8
   412cc:	f800283a 	ret

000412d0 <_ZN3AppD2Ev>:
	compass_vib_value = 255;
	gyroscope_vib_value = 255;
	running.init();
}

App::~App() {
   412d0:	defffd04 	addi	sp,sp,-12
   412d4:	dfc00215 	stw	ra,8(sp)
   412d8:	df000115 	stw	fp,4(sp)
   412dc:	df000104 	addi	fp,sp,4
   412e0:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
   412e4:	e0bfff17 	ldw	r2,-4(fp)
   412e8:	11000517 	ldw	r4,20(r2)
   412ec:	0041cb40 	call	41cb4 <_ZN4WiFi10stopServerEv>
}
   412f0:	e037883a 	mov	sp,fp
   412f4:	dfc00117 	ldw	ra,4(sp)
   412f8:	df000017 	ldw	fp,0(sp)
   412fc:	dec00204 	addi	sp,sp,8
   41300:	f800283a 	ret

00041304 <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   41304:	defffd04 	addi	sp,sp,-12
   41308:	dfc00215 	stw	ra,8(sp)
   4130c:	df000115 	stw	fp,4(sp)
   41310:	df000104 	addi	fp,sp,4
   41314:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   41318:	0041e9c0 	call	41e9c <_ZN4WiFi12getSingletonEv>
   4131c:	1007883a 	mov	r3,r2
   41320:	e0bfff17 	ldw	r2,-4(fp)
   41324:	10c00515 	stw	r3,20(r2)
	compass_vib_value = 255;
   41328:	e0ffff17 	ldw	r3,-4(fp)
   4132c:	00803fc4 	movi	r2,255
   41330:	18800015 	stw	r2,0(r3)
	gyroscope_vib_value = 255;
   41334:	e0ffff17 	ldw	r3,-4(fp)
   41338:	00803fc4 	movi	r2,255
   4133c:	18800115 	stw	r2,4(r3)
	running.init();
   41340:	e0bfff17 	ldw	r2,-4(fp)
   41344:	11000204 	addi	r4,r2,8
   41348:	00413bc0 	call	413bc <_ZN9run_param4initEv>
}
   4134c:	e037883a 	mov	sp,fp
   41350:	dfc00117 	ldw	ra,4(sp)
   41354:	df000017 	ldw	fp,0(sp)
   41358:	dec00204 	addi	sp,sp,8
   4135c:	f800283a 	ret

00041360 <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
   41360:	defffd04 	addi	sp,sp,-12
   41364:	dfc00215 	stw	ra,8(sp)
   41368:	df000115 	stw	fp,4(sp)
   4136c:	df000104 	addi	fp,sp,4
   41370:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
   41374:	0041e9c0 	call	41e9c <_ZN4WiFi12getSingletonEv>
   41378:	1007883a 	mov	r3,r2
   4137c:	e0bfff17 	ldw	r2,-4(fp)
   41380:	10c00515 	stw	r3,20(r2)
	compass_vib_value = 255;
   41384:	e0ffff17 	ldw	r3,-4(fp)
   41388:	00803fc4 	movi	r2,255
   4138c:	18800015 	stw	r2,0(r3)
	gyroscope_vib_value = 255;
   41390:	e0ffff17 	ldw	r3,-4(fp)
   41394:	00803fc4 	movi	r2,255
   41398:	18800115 	stw	r2,4(r3)
	running.init();
   4139c:	e0bfff17 	ldw	r2,-4(fp)
   413a0:	11000204 	addi	r4,r2,8
   413a4:	00413bc0 	call	413bc <_ZN9run_param4initEv>
}
   413a8:	e037883a 	mov	sp,fp
   413ac:	dfc00117 	ldw	ra,4(sp)
   413b0:	df000017 	ldw	fp,0(sp)
   413b4:	dec00204 	addi	sp,sp,8
   413b8:	f800283a 	ret

000413bc <_ZN9run_param4initEv>:
struct run_param {
	char* possible;
	char current;
	int iterator;

	void init() {
   413bc:	defffe04 	addi	sp,sp,-8
   413c0:	df000115 	stw	fp,4(sp)
   413c4:	df000104 	addi	fp,sp,4
   413c8:	e13fff15 	stw	r4,-4(fp)
		possible = "macg";
   413cc:	e0ffff17 	ldw	r3,-4(fp)
   413d0:	00800134 	movhi	r2,4
   413d4:	1096ec04 	addi	r2,r2,23472
   413d8:	18800015 	stw	r2,0(r3)
		current = possible[0];
   413dc:	e0bfff17 	ldw	r2,-4(fp)
   413e0:	10800017 	ldw	r2,0(r2)
   413e4:	10c00003 	ldbu	r3,0(r2)
   413e8:	e0bfff17 	ldw	r2,-4(fp)
   413ec:	10c00105 	stb	r3,4(r2)
		iterator = 0;
   413f0:	e0bfff17 	ldw	r2,-4(fp)
   413f4:	10000215 	stw	zero,8(r2)
	}
   413f8:	e037883a 	mov	sp,fp
   413fc:	df000017 	ldw	fp,0(sp)
   41400:	dec00104 	addi	sp,sp,4
   41404:	f800283a 	ret

00041408 <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
   41408:	defffd04 	addi	sp,sp,-12
   4140c:	df000215 	stw	fp,8(sp)
   41410:	df000204 	addi	fp,sp,8
   41414:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
   41418:	e0bffe17 	ldw	r2,-8(fp)
   4141c:	10800217 	ldw	r2,8(r2)
   41420:	10bfffd8 	cmpnei	r2,r2,-1
   41424:	1000021e 	bne	r2,zero,41430 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
   41428:	e03fff15 	stw	zero,-4(fp)
   4142c:	00002b06 	br	414dc <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
   41430:	e0bffe17 	ldw	r2,-8(fp)
   41434:	10800217 	ldw	r2,8(r2)
   41438:	10c00044 	addi	r3,r2,1
   4143c:	e0bffe17 	ldw	r2,-8(fp)
   41440:	10c00215 	stw	r3,8(r2)
   41444:	e0bffe17 	ldw	r2,-8(fp)
   41448:	10800217 	ldw	r2,8(r2)
   4144c:	1007883a 	mov	r3,r2
   41450:	e0bffe17 	ldw	r2,-8(fp)
   41454:	10800017 	ldw	r2,0(r2)
   41458:	1884703a 	and	r2,r3,r2
   4145c:	1007883a 	mov	r3,r2
   41460:	e0bffe17 	ldw	r2,-8(fp)
   41464:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
   41468:	e0bffe17 	ldw	r2,-8(fp)
   4146c:	10c00217 	ldw	r3,8(r2)
   41470:	e0bffe17 	ldw	r2,-8(fp)
   41474:	10800317 	ldw	r2,12(r2)
   41478:	1880091e 	bne	r3,r2,414a0 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
   4147c:	e0bffe17 	ldw	r2,-8(fp)
   41480:	10000315 	stw	zero,12(r2)
					begin = -1;
   41484:	e0fffe17 	ldw	r3,-8(fp)
   41488:	00bfffc4 	movi	r2,-1
   4148c:	18800215 	stw	r2,8(r3)
					len = 0;
   41490:	e0bffe17 	ldw	r2,-8(fp)
   41494:	10000115 	stw	zero,4(r2)
					return NULL;;
   41498:	e03fff15 	stw	zero,-4(fp)
   4149c:	00000f06 	br	414dc <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
   414a0:	e0bffe17 	ldw	r2,-8(fp)
   414a4:	10800117 	ldw	r2,4(r2)
   414a8:	10ffffc4 	addi	r3,r2,-1
   414ac:	e0bffe17 	ldw	r2,-8(fp)
   414b0:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
   414b4:	e0bffe17 	ldw	r2,-8(fp)
   414b8:	10c00417 	ldw	r3,16(r2)
   414bc:	e0bffe17 	ldw	r2,-8(fp)
   414c0:	10800217 	ldw	r2,8(r2)
   414c4:	1085883a 	add	r2,r2,r2
   414c8:	1085883a 	add	r2,r2,r2
   414cc:	1885883a 	add	r2,r3,r2
   414d0:	10bfff04 	addi	r2,r2,-4
   414d4:	10800017 	ldw	r2,0(r2)
   414d8:	e0bfff15 	stw	r2,-4(fp)
   414dc:	e0bfff17 	ldw	r2,-4(fp)
			}
   414e0:	e037883a 	mov	sp,fp
   414e4:	df000017 	ldw	fp,0(sp)
   414e8:	dec00104 	addi	sp,sp,4
   414ec:	f800283a 	ret

000414f0 <_ZN3App6Buffer6lengthEv>:

			int length() {
   414f0:	defffe04 	addi	sp,sp,-8
   414f4:	df000115 	stw	fp,4(sp)
   414f8:	df000104 	addi	fp,sp,4
   414fc:	e13fff15 	stw	r4,-4(fp)
				return len;
   41500:	e0bfff17 	ldw	r2,-4(fp)
   41504:	10800117 	ldw	r2,4(r2)
			}
   41508:	e037883a 	mov	sp,fp
   4150c:	df000017 	ldw	fp,0(sp)
   41510:	dec00104 	addi	sp,sp,4
   41514:	f800283a 	ret

00041518 <_ZN3App6BufferC1Ev>:
private:
	int compass_vib_value;
	int gyroscope_vib_value;
	class Buffer {
		public:
			Buffer(){
   41518:	defffd04 	addi	sp,sp,-12
   4151c:	dfc00215 	stw	ra,8(sp)
   41520:	df000115 	stw	fp,4(sp)
   41524:	df000104 	addi	fp,sp,4
   41528:	e13fff15 	stw	r4,-4(fp)
				size = 10;
   4152c:	e0ffff17 	ldw	r3,-4(fp)
   41530:	00800284 	movi	r2,10
   41534:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
   41538:	e0bfff17 	ldw	r2,-4(fp)
   4153c:	10800017 	ldw	r2,0(r2)
   41540:	1085883a 	add	r2,r2,r2
   41544:	1085883a 	add	r2,r2,r2
   41548:	1009883a 	mov	r4,r2
   4154c:	0041fc80 	call	41fc8 <_Znam>
   41550:	1007883a 	mov	r3,r2
   41554:	e0bfff17 	ldw	r2,-4(fp)
   41558:	10c00415 	stw	r3,16(r2)
				begin = -1;
   4155c:	e0ffff17 	ldw	r3,-4(fp)
   41560:	00bfffc4 	movi	r2,-1
   41564:	18800215 	stw	r2,8(r3)
				end = 0;
   41568:	e0bfff17 	ldw	r2,-4(fp)
   4156c:	10000315 	stw	zero,12(r2)
				len = 0;
   41570:	e0bfff17 	ldw	r2,-4(fp)
   41574:	10000115 	stw	zero,4(r2)
			}
   41578:	e037883a 	mov	sp,fp
   4157c:	dfc00117 	ldw	ra,4(sp)
   41580:	df000017 	ldw	fp,0(sp)
   41584:	dec00204 	addi	sp,sp,8
   41588:	f800283a 	ret

0004158c <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   4158c:	defffe04 	addi	sp,sp,-8
   41590:	df000115 	stw	fp,4(sp)
   41594:	df000104 	addi	fp,sp,4
   41598:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   4159c:	e0ffff17 	ldw	r3,-4(fp)
   415a0:	00a40a14 	movui	r2,36904
   415a4:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   415a8:	e0ffff17 	ldw	r3,-4(fp)
   415ac:	00a40e14 	movui	r2,36920
   415b0:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   415b4:	e0ffff17 	ldw	r3,-4(fp)
   415b8:	00a41214 	movui	r2,36936
   415bc:	18800215 	stw	r2,8(r3)
}
   415c0:	e037883a 	mov	sp,fp
   415c4:	df000017 	ldw	fp,0(sp)
   415c8:	dec00104 	addi	sp,sp,4
   415cc:	f800283a 	ret

000415d0 <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = 0;

/* public */
FFT::FFT() {
   415d0:	defffe04 	addi	sp,sp,-8
   415d4:	df000115 	stw	fp,4(sp)
   415d8:	df000104 	addi	fp,sp,4
   415dc:	e13fff15 	stw	r4,-4(fp)
	data = (volatile unsigned int*) matrixAddress;
   415e0:	e0ffff17 	ldw	r3,-4(fp)
   415e4:	00a40a14 	movui	r2,36904
   415e8:	18800015 	stw	r2,0(r3)
	writeFFT =(volatile unsigned int*) fftAddress;
   415ec:	e0ffff17 	ldw	r3,-4(fp)
   415f0:	00a40e14 	movui	r2,36920
   415f4:	18800115 	stw	r2,4(r3)
	readFFT = (volatile unsigned int*) fftAddress+4;
   415f8:	e0ffff17 	ldw	r3,-4(fp)
   415fc:	00a41214 	movui	r2,36936
   41600:	18800215 	stw	r2,8(r3)
}
   41604:	e037883a 	mov	sp,fp
   41608:	df000017 	ldw	fp,0(sp)
   4160c:	dec00104 	addi	sp,sp,4
   41610:	f800283a 	ret

00041614 <_ZN3FFTD2Ev>:

FFT::~FFT() {
   41614:	defffe04 	addi	sp,sp,-8
   41618:	df000115 	stw	fp,4(sp)
   4161c:	df000104 	addi	fp,sp,4
   41620:	e13fff15 	stw	r4,-4(fp)
}
   41624:	e037883a 	mov	sp,fp
   41628:	df000017 	ldw	fp,0(sp)
   4162c:	dec00104 	addi	sp,sp,4
   41630:	f800283a 	ret

00041634 <_ZN3FFTD1Ev>:
	data = (volatile unsigned int*) matrixAddress;
	writeFFT =(volatile unsigned int*) fftAddress;
	readFFT = (volatile unsigned int*) fftAddress+4;
}

FFT::~FFT() {
   41634:	defffe04 	addi	sp,sp,-8
   41638:	df000115 	stw	fp,4(sp)
   4163c:	df000104 	addi	fp,sp,4
   41640:	e13fff15 	stw	r4,-4(fp)
}
   41644:	e037883a 	mov	sp,fp
   41648:	df000017 	ldw	fp,0(sp)
   4164c:	dec00104 	addi	sp,sp,4
   41650:	f800283a 	ret

00041654 <_ZN3FFT4readEv>:
void FFT::write(unsigned char *input) {
	writeFFT = (unsigned int*)input;
	delete input;
}

int* FFT::read() {
   41654:	defffe04 	addi	sp,sp,-8
   41658:	df000115 	stw	fp,4(sp)
   4165c:	df000104 	addi	fp,sp,4
   41660:	e13fff15 	stw	r4,-4(fp)
	return (int*)readFFT;
   41664:	e0bfff17 	ldw	r2,-4(fp)
   41668:	10800217 	ldw	r2,8(r2)
}
   4166c:	e037883a 	mov	sp,fp
   41670:	df000017 	ldw	fp,0(sp)
   41674:	dec00104 	addi	sp,sp,4
   41678:	f800283a 	ret

0004167c <_ZN3FFT5writeEPh>:
	if (fft == 0)
		fft = new FFT();
	return fft;
}

void FFT::write(unsigned char *input) {
   4167c:	defffc04 	addi	sp,sp,-16
   41680:	dfc00315 	stw	ra,12(sp)
   41684:	df000215 	stw	fp,8(sp)
   41688:	df000204 	addi	fp,sp,8
   4168c:	e13ffe15 	stw	r4,-8(fp)
   41690:	e17fff15 	stw	r5,-4(fp)
	writeFFT = (unsigned int*)input;
   41694:	e0ffff17 	ldw	r3,-4(fp)
   41698:	e0bffe17 	ldw	r2,-8(fp)
   4169c:	10c00115 	stw	r3,4(r2)
	delete input;
   416a0:	e13fff17 	ldw	r4,-4(fp)
   416a4:	00420680 	call	42068 <_ZdlPv>
}
   416a8:	e037883a 	mov	sp,fp
   416ac:	dfc00117 	ldw	ra,4(sp)
   416b0:	df000017 	ldw	fp,0(sp)
   416b4:	dec00204 	addi	sp,sp,8
   416b8:	f800283a 	ret

000416bc <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
   416bc:	defffd04 	addi	sp,sp,-12
   416c0:	dfc00215 	stw	ra,8(sp)
   416c4:	df000115 	stw	fp,4(sp)
   416c8:	dc000015 	stw	r16,0(sp)
   416cc:	d839883a 	mov	fp,sp
	if (fft == 0)
   416d0:	d0a15a17 	ldw	r2,-31384(gp)
   416d4:	1004c03a 	cmpne	r2,r2,zero
   416d8:	1000061e 	bne	r2,zero,416f4 <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
   416dc:	01000304 	movi	r4,12
   416e0:	0042d7c0 	call	42d7c <_Znwm>
   416e4:	1021883a 	mov	r16,r2
   416e8:	8009883a 	mov	r4,r16
   416ec:	00415d00 	call	415d0 <_ZN3FFTC1Ev>
   416f0:	d4215a15 	stw	r16,-31384(gp)
	return fft;
   416f4:	d0a15a17 	ldw	r2,-31384(gp)
}
   416f8:	e037883a 	mov	sp,fp
   416fc:	dfc00217 	ldw	ra,8(sp)
   41700:	df000117 	ldw	fp,4(sp)
   41704:	dc000017 	ldw	r16,0(sp)
   41708:	dec00304 	addi	sp,sp,12
   4170c:	f800283a 	ret

00041710 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41710:	defffe04 	addi	sp,sp,-8
   41714:	df000115 	stw	fp,4(sp)
   41718:	df000104 	addi	fp,sp,4
   4171c:	e13fff15 	stw	r4,-4(fp)
}
   41720:	e037883a 	mov	sp,fp
   41724:	df000017 	ldw	fp,0(sp)
   41728:	dec00104 	addi	sp,sp,4
   4172c:	f800283a 	ret

00041730 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = 0;

/* public */
Motors::~Motors() {
   41730:	defffe04 	addi	sp,sp,-8
   41734:	df000115 	stw	fp,4(sp)
   41738:	df000104 	addi	fp,sp,4
   4173c:	e13fff15 	stw	r4,-4(fp)
}
   41740:	e037883a 	mov	sp,fp
   41744:	df000017 	ldw	fp,0(sp)
   41748:	dec00104 	addi	sp,sp,4
   4174c:	f800283a 	ret

00041750 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
   41750:	defffb04 	addi	sp,sp,-20
   41754:	df000415 	stw	fp,16(sp)
   41758:	df000404 	addi	fp,sp,16
   4175c:	e13ffc15 	stw	r4,-16(fp)
   41760:	e17ffd15 	stw	r5,-12(fp)
   41764:	e1bffe15 	stw	r6,-8(fp)
   41768:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
   4176c:	e0bffc17 	ldw	r2,-16(fp)
   41770:	11000017 	ldw	r4,0(r2)
   41774:	e0bffd17 	ldw	r2,-12(fp)
   41778:	1006963a 	slli	r3,r2,24
   4177c:	e0bffe17 	ldw	r2,-8(fp)
   41780:	1004943a 	slli	r2,r2,16
   41784:	1887883a 	add	r3,r3,r2
   41788:	e0bfff17 	ldw	r2,-4(fp)
   4178c:	1004923a 	slli	r2,r2,8
   41790:	1887883a 	add	r3,r3,r2
   41794:	e0800117 	ldw	r2,4(fp)
   41798:	1885883a 	add	r2,r3,r2
   4179c:	20800015 	stw	r2,0(r4)
}
   417a0:	e037883a 	mov	sp,fp
   417a4:	df000017 	ldw	fp,0(sp)
   417a8:	dec00104 	addi	sp,sp,4
   417ac:	f800283a 	ret

000417b0 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
   417b0:	defff904 	addi	sp,sp,-28
   417b4:	dfc00615 	stw	ra,24(sp)
   417b8:	df000515 	stw	fp,20(sp)
   417bc:	df000504 	addi	fp,sp,20
   417c0:	e13ffc15 	stw	r4,-16(fp)
   417c4:	e17ffd15 	stw	r5,-12(fp)
   417c8:	e1bffe15 	stw	r6,-8(fp)
   417cc:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
   417d0:	e0bfff17 	ldw	r2,-4(fp)
   417d4:	d8800015 	stw	r2,0(sp)
   417d8:	e13ffc17 	ldw	r4,-16(fp)
   417dc:	01400084 	movi	r5,2
   417e0:	e1bffd17 	ldw	r6,-12(fp)
   417e4:	e1fffe17 	ldw	r7,-8(fp)
   417e8:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
}
   417ec:	e037883a 	mov	sp,fp
   417f0:	dfc00117 	ldw	ra,4(sp)
   417f4:	df000017 	ldw	fp,0(sp)
   417f8:	dec00204 	addi	sp,sp,8
   417fc:	f800283a 	ret

00041800 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(0, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
   41800:	defff904 	addi	sp,sp,-28
   41804:	dfc00615 	stw	ra,24(sp)
   41808:	df000515 	stw	fp,20(sp)
   4180c:	df000504 	addi	fp,sp,20
   41810:	e13ffc15 	stw	r4,-16(fp)
   41814:	e17ffd15 	stw	r5,-12(fp)
   41818:	e1bffe15 	stw	r6,-8(fp)
   4181c:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
   41820:	e0bfff17 	ldw	r2,-4(fp)
   41824:	d8800015 	stw	r2,0(sp)
   41828:	e13ffc17 	ldw	r4,-16(fp)
   4182c:	01400044 	movi	r5,1
   41830:	e1bffd17 	ldw	r6,-12(fp)
   41834:	e1fffe17 	ldw	r7,-8(fp)
   41838:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
}
   4183c:	e037883a 	mov	sp,fp
   41840:	dfc00117 	ldw	ra,4(sp)
   41844:	df000017 	ldw	fp,0(sp)
   41848:	dec00204 	addi	sp,sp,8
   4184c:	f800283a 	ret

00041850 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
   41850:	defff904 	addi	sp,sp,-28
   41854:	dfc00615 	stw	ra,24(sp)
   41858:	df000515 	stw	fp,20(sp)
   4185c:	df000504 	addi	fp,sp,20
   41860:	e13ffc15 	stw	r4,-16(fp)
   41864:	e17ffd15 	stw	r5,-12(fp)
   41868:	e1bffe15 	stw	r6,-8(fp)
   4186c:	e1ffff15 	stw	r7,-4(fp)
	write(0, line, column, valor);
   41870:	e0bfff17 	ldw	r2,-4(fp)
   41874:	d8800015 	stw	r2,0(sp)
   41878:	e13ffc17 	ldw	r4,-16(fp)
   4187c:	000b883a 	mov	r5,zero
   41880:	e1bffd17 	ldw	r6,-12(fp)
   41884:	e1fffe17 	ldw	r7,-8(fp)
   41888:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
}
   4188c:	e037883a 	mov	sp,fp
   41890:	dfc00117 	ldw	ra,4(sp)
   41894:	df000017 	ldw	fp,0(sp)
   41898:	dec00204 	addi	sp,sp,8
   4189c:	f800283a 	ret

000418a0 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
   418a0:	defffd04 	addi	sp,sp,-12
   418a4:	df000215 	stw	fp,8(sp)
   418a8:	df000204 	addi	fp,sp,8
   418ac:	e13ffe15 	stw	r4,-8(fp)
   418b0:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
   418b4:	e0bffe17 	ldw	r2,-8(fp)
   418b8:	10c00017 	ldw	r3,0(r2)
   418bc:	e0bfff17 	ldw	r2,-4(fp)
   418c0:	18800015 	stw	r2,0(r3)
}
   418c4:	e037883a 	mov	sp,fp
   418c8:	df000017 	ldw	fp,0(sp)
   418cc:	dec00104 	addi	sp,sp,4
   418d0:	f800283a 	ret

000418d4 <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
   418d4:	defffc04 	addi	sp,sp,-16
   418d8:	dfc00315 	stw	ra,12(sp)
   418dc:	df000215 	stw	fp,8(sp)
   418e0:	df000204 	addi	fp,sp,8
   418e4:	e13fff15 	stw	r4,-4(fp)
	write(3, 255, 255, 0);
   418e8:	d8000015 	stw	zero,0(sp)
   418ec:	e13fff17 	ldw	r4,-4(fp)
   418f0:	014000c4 	movi	r5,3
   418f4:	01803fc4 	movi	r6,255
   418f8:	01c03fc4 	movi	r7,255
   418fc:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
}
   41900:	e037883a 	mov	sp,fp
   41904:	dfc00117 	ldw	ra,4(sp)
   41908:	df000017 	ldw	fp,0(sp)
   4190c:	dec00204 	addi	sp,sp,8
   41910:	f800283a 	ret

00041914 <_ZN6Motors21write_to_next_collumnEv>:

void Motors::write_to_next_collumn() {
   41914:	defffc04 	addi	sp,sp,-16
   41918:	dfc00315 	stw	ra,12(sp)
   4191c:	df000215 	stw	fp,8(sp)
   41920:	df000204 	addi	fp,sp,8
   41924:	e13fff15 	stw	r4,-4(fp)
	write(4, 255, 255, 0);
   41928:	d8000015 	stw	zero,0(sp)
   4192c:	e13fff17 	ldw	r4,-4(fp)
   41930:	01400104 	movi	r5,4
   41934:	01803fc4 	movi	r6,255
   41938:	01c03fc4 	movi	r7,255
   4193c:	00417500 	call	41750 <_ZN6Motors5writeEjjjj>
}
   41940:	e037883a 	mov	sp,fp
   41944:	dfc00117 	ldw	ra,4(sp)
   41948:	df000017 	ldw	fp,0(sp)
   4194c:	dec00204 	addi	sp,sp,8
   41950:	f800283a 	ret

00041954 <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
   41954:	defffe04 	addi	sp,sp,-8
   41958:	df000115 	stw	fp,4(sp)
   4195c:	df000104 	addi	fp,sp,4
   41960:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   41964:	e0ffff17 	ldw	r3,-4(fp)
   41968:	00881a04 	movi	r2,8296
   4196c:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   41970:	e0ffff17 	ldw	r3,-4(fp)
   41974:	00881b04 	movi	r2,8300
   41978:	18800115 	stw	r2,4(r3)
}
   4197c:	e037883a 	mov	sp,fp
   41980:	df000017 	ldw	fp,0(sp)
   41984:	dec00104 	addi	sp,sp,4
   41988:	f800283a 	ret

0004198c <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumn() {
	write(4, 255, 255, 0);
}

/* private */
Motors::Motors() {
   4198c:	defffe04 	addi	sp,sp,-8
   41990:	df000115 	stw	fp,4(sp)
   41994:	df000104 	addi	fp,sp,4
   41998:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
   4199c:	e0ffff17 	ldw	r3,-4(fp)
   419a0:	00881a04 	movi	r2,8296
   419a4:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
   419a8:	e0ffff17 	ldw	r3,-4(fp)
   419ac:	00881b04 	movi	r2,8300
   419b0:	18800115 	stw	r2,4(r3)
}
   419b4:	e037883a 	mov	sp,fp
   419b8:	df000017 	ldw	fp,0(sp)
   419bc:	dec00104 	addi	sp,sp,4
   419c0:	f800283a 	ret

000419c4 <_ZN6Motors4readEv>:

unsigned int Motors::read() {
   419c4:	defffe04 	addi	sp,sp,-8
   419c8:	df000115 	stw	fp,4(sp)
   419cc:	df000104 	addi	fp,sp,4
   419d0:	e13fff15 	stw	r4,-4(fp)
	return *status;
   419d4:	e0bfff17 	ldw	r2,-4(fp)
   419d8:	10800117 	ldw	r2,4(r2)
   419dc:	10800017 	ldw	r2,0(r2)
}
   419e0:	e037883a 	mov	sp,fp
   419e4:	df000017 	ldw	fp,0(sp)
   419e8:	dec00104 	addi	sp,sp,4
   419ec:	f800283a 	ret

000419f0 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
   419f0:	defffd04 	addi	sp,sp,-12
   419f4:	dfc00215 	stw	ra,8(sp)
   419f8:	df000115 	stw	fp,4(sp)
   419fc:	dc000015 	stw	r16,0(sp)
   41a00:	d839883a 	mov	fp,sp
	if (motors == 0)
   41a04:	d0a15b17 	ldw	r2,-31380(gp)
   41a08:	1004c03a 	cmpne	r2,r2,zero
   41a0c:	1000061e 	bne	r2,zero,41a28 <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
   41a10:	01000204 	movi	r4,8
   41a14:	0042d7c0 	call	42d7c <_Znwm>
   41a18:	1021883a 	mov	r16,r2
   41a1c:	8009883a 	mov	r4,r16
   41a20:	004198c0 	call	4198c <_ZN6MotorsC1Ev>
   41a24:	d4215b15 	stw	r16,-31380(gp)
	return motors;
   41a28:	d0a15b17 	ldw	r2,-31380(gp)
}
   41a2c:	e037883a 	mov	sp,fp
   41a30:	dfc00217 	ldw	ra,8(sp)
   41a34:	df000117 	ldw	fp,4(sp)
   41a38:	dc000017 	ldw	r16,0(sp)
   41a3c:	dec00304 	addi	sp,sp,12
   41a40:	f800283a 	ret

00041a44 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41a44:	defffe04 	addi	sp,sp,-8
   41a48:	df000115 	stw	fp,4(sp)
   41a4c:	df000104 	addi	fp,sp,4
   41a50:	e13fff15 	stw	r4,-4(fp)
}
   41a54:	e037883a 	mov	sp,fp
   41a58:	df000017 	ldw	fp,0(sp)
   41a5c:	dec00104 	addi	sp,sp,4
   41a60:	f800283a 	ret

00041a64 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = 0;

/* public */
WiFi::~WiFi() {
   41a64:	defffe04 	addi	sp,sp,-8
   41a68:	df000115 	stw	fp,4(sp)
   41a6c:	df000104 	addi	fp,sp,4
   41a70:	e13fff15 	stw	r4,-4(fp)
}
   41a74:	e037883a 	mov	sp,fp
   41a78:	df000017 	ldw	fp,0(sp)
   41a7c:	dec00104 	addi	sp,sp,4
   41a80:	f800283a 	ret

00041a84 <_ZN4WiFiC2Ev>:
		keep_reading=IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE) & FIFOED_AVALON_UART_STATUS_RRDY_MSK;
	}
}

/* private */
WiFi::WiFi() {
   41a84:	defffe04 	addi	sp,sp,-8
   41a88:	df000115 	stw	fp,4(sp)
   41a8c:	df000104 	addi	fp,sp,4
   41a90:	e13fff15 	stw	r4,-4(fp)
}
   41a94:	e037883a 	mov	sp,fp
   41a98:	df000017 	ldw	fp,0(sp)
   41a9c:	dec00104 	addi	sp,sp,4
   41aa0:	f800283a 	ret

00041aa4 <_ZN4WiFiC1Ev>:
		keep_reading=IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE) & FIFOED_AVALON_UART_STATUS_RRDY_MSK;
	}
}

/* private */
WiFi::WiFi() {
   41aa4:	defffe04 	addi	sp,sp,-8
   41aa8:	df000115 	stw	fp,4(sp)
   41aac:	df000104 	addi	fp,sp,4
   41ab0:	e13fff15 	stw	r4,-4(fp)
}
   41ab4:	e037883a 	mov	sp,fp
   41ab8:	df000017 	ldw	fp,0(sp)
   41abc:	dec00104 	addi	sp,sp,4
   41ac0:	f800283a 	ret

00041ac4 <_ZN4WiFi18waitForStatusReadyEj>:
	//re-enable interrupts
	//IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));

}

void WiFi::waitForStatusReady(unsigned int mask){
   41ac4:	defffc04 	addi	sp,sp,-16
   41ac8:	df000315 	stw	fp,12(sp)
   41acc:	df000304 	addi	fp,sp,12
   41ad0:	e13ffe15 	stw	r4,-8(fp)
   41ad4:	e17fff15 	stw	r5,-4(fp)
	char status;
	do{
		status = IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE);
   41ad8:	00841204 	movi	r2,4168
   41adc:	10800037 	ldwio	r2,0(r2)
   41ae0:	e0bffd05 	stb	r2,-12(fp)
		status = status & mask;
   41ae4:	e0bfff17 	ldw	r2,-4(fp)
   41ae8:	1007883a 	mov	r3,r2
   41aec:	e0bffd03 	ldbu	r2,-12(fp)
   41af0:	1884703a 	and	r2,r3,r2
   41af4:	e0bffd05 	stb	r2,-12(fp)

}

void WiFi::waitForStatusReady(unsigned int mask){
	char status;
	do{
   41af8:	e0bffd07 	ldb	r2,-12(fp)
   41afc:	1005003a 	cmpeq	r2,r2,zero
   41b00:	103ff51e 	bne	r2,zero,41ad8 <_ZN4WiFi18waitForStatusReadyEj+0x14>
		status = IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE);
		status = status & mask;
	}while(status==0x00);

}
   41b04:	e037883a 	mov	sp,fp
   41b08:	df000017 	ldw	fp,0(sp)
   41b0c:	dec00104 	addi	sp,sp,4
   41b10:	f800283a 	ret

00041b14 <_ZN4WiFi8readUARTEPcPi>:
	//Se encontrar "\n", pode indicar algum aviso do módulo, como "OK", "CONNECT", etc., e portanto não é dado
//Cada caractére encontrado é colocado no endereço indicado pelo ponteiro passado na função
//Ao final, coloca-se também o número de caractéres encontrados (size) no endereço indicado por *size

//TODO: adicionar um número máximo de iterações durante a espera de chegada de dado (?)
void WiFi::readUART(char *data, int *size){
   41b14:	defff904 	addi	sp,sp,-28
   41b18:	dfc00615 	stw	ra,24(sp)
   41b1c:	df000515 	stw	fp,20(sp)
   41b20:	df000504 	addi	fp,sp,20
   41b24:	e13ffd15 	stw	r4,-12(fp)
   41b28:	e17ffe15 	stw	r5,-8(fp)
   41b2c:	e1bfff15 	stw	r6,-4(fp)
	char ch;
	int i = 0;
   41b30:	e03ffb15 	stw	zero,-20(fp)
	do{
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41b34:	e13ffd17 	ldw	r4,-12(fp)
   41b38:	01402004 	movi	r5,128
   41b3c:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41b40:	00841004 	movi	r2,4160
   41b44:	10800037 	ldwio	r2,0(r2)
   41b48:	e0bffc05 	stb	r2,-16(fp)

//TODO: adicionar um número máximo de iterações durante a espera de chegada de dado (?)
void WiFi::readUART(char *data, int *size){
	char ch;
	int i = 0;
	do{
   41b4c:	e0bffc07 	ldb	r2,-16(fp)
   41b50:	108002a0 	cmpeqi	r2,r2,10
   41b54:	1000031e 	bne	r2,zero,41b64 <_ZN4WiFi8readUARTEPcPi+0x50>
   41b58:	e0bffc07 	ldb	r2,-16(fp)
   41b5c:	10800e98 	cmpnei	r2,r2,58
   41b60:	103ff41e 	bne	r2,zero,41b34 <_ZN4WiFi8readUARTEPcPi+0x20>
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
   41b64:	e0bffc07 	ldb	r2,-16(fp)
   41b68:	10800e98 	cmpnei	r2,r2,58
   41b6c:	1000171e 	bne	r2,zero,41bcc <_ZN4WiFi8readUARTEPcPi+0xb8>
		do{
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41b70:	e13ffd17 	ldw	r4,-12(fp)
   41b74:	01402004 	movi	r5,128
   41b78:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41b7c:	00841004 	movi	r2,4160
   41b80:	10800037 	ldwio	r2,0(r2)
   41b84:	e0bffc05 	stb	r2,-16(fp)
			*data=ch;
   41b88:	e0fffe17 	ldw	r3,-8(fp)
   41b8c:	e0bffc03 	ldbu	r2,-16(fp)
   41b90:	18800005 	stb	r2,0(r3)
			data++;
   41b94:	e0bffe17 	ldw	r2,-8(fp)
   41b98:	10800044 	addi	r2,r2,1
   41b9c:	e0bffe15 	stw	r2,-8(fp)
			i++;
   41ba0:	e0bffb17 	ldw	r2,-20(fp)
   41ba4:	10800044 	addi	r2,r2,1
   41ba8:	e0bffb15 	stw	r2,-20(fp)
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
	}while(ch !='\n' && ch != ':');

	if(ch == ':'){
		do{
   41bac:	e0bffc07 	ldb	r2,-16(fp)
   41bb0:	10800298 	cmpnei	r2,r2,10
   41bb4:	103fee1e 	bne	r2,zero,41b70 <_ZN4WiFi8readUARTEPcPi+0x5c>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
			*data=ch;
			data++;
			i++;
		}while(ch != '\n');
		*size = i-2;
   41bb8:	e0bffb17 	ldw	r2,-20(fp)
   41bbc:	10ffff84 	addi	r3,r2,-2
   41bc0:	e0bfff17 	ldw	r2,-4(fp)
   41bc4:	10c00015 	stw	r3,0(r2)
   41bc8:	00000406 	br	41bdc <_ZN4WiFi8readUARTEPcPi+0xc8>
	}
	else{
		*data = 0;
   41bcc:	e0bffe17 	ldw	r2,-8(fp)
   41bd0:	10000005 	stb	zero,0(r2)
		*size = 0;
   41bd4:	e0bfff17 	ldw	r2,-4(fp)
   41bd8:	10000015 	stw	zero,0(r2)
	}
}
   41bdc:	e037883a 	mov	sp,fp
   41be0:	dfc00117 	ldw	ra,4(sp)
   41be4:	df000017 	ldw	fp,0(sp)
   41be8:	dec00204 	addi	sp,sp,8
   41bec:	f800283a 	ret

00041bf0 <_ZN4WiFi12writeCommandEPc>:
/* private */
WiFi::WiFi() {
}
//Função usada para enviar os comandos para o módulo
//Envia os caractéres de final de comando (\r e \n) automaticamente
volatile void WiFi::writeCommand(char message[]){
   41bf0:	defffa04 	addi	sp,sp,-24
   41bf4:	dfc00515 	stw	ra,20(sp)
   41bf8:	df000415 	stw	fp,16(sp)
   41bfc:	df000404 	addi	fp,sp,16
   41c00:	e13ffe15 	stw	r4,-8(fp)
   41c04:	e17fff15 	stw	r5,-4(fp)
	int i=0;
   41c08:	e03ffd15 	stw	zero,-12(fp)
	char M=message[i];
   41c0c:	e0bffd17 	ldw	r2,-12(fp)
   41c10:	1007883a 	mov	r3,r2
   41c14:	e0bfff17 	ldw	r2,-4(fp)
   41c18:	1885883a 	add	r2,r3,r2
   41c1c:	10800003 	ldbu	r2,0(r2)
   41c20:	e0bffc05 	stb	r2,-16(fp)
	//disable interrupts
	//IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   41c24:	00000f06 	br	41c64 <_ZN4WiFi12writeCommandEPc+0x74>
		//Envia todos os caractéres do comando, até encontrar '\0'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41c28:	e13ffe17 	ldw	r4,-8(fp)
   41c2c:	01401004 	movi	r5,64
   41c30:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,M);
   41c34:	e0fffc07 	ldb	r3,-16(fp)
   41c38:	00841104 	movi	r2,4164
   41c3c:	10c00035 	stwio	r3,0(r2)
		i=i+1;
   41c40:	e0bffd17 	ldw	r2,-12(fp)
   41c44:	10800044 	addi	r2,r2,1
   41c48:	e0bffd15 	stw	r2,-12(fp)
		M=message[i];
   41c4c:	e0bffd17 	ldw	r2,-12(fp)
   41c50:	1007883a 	mov	r3,r2
   41c54:	e0bfff17 	ldw	r2,-4(fp)
   41c58:	1885883a 	add	r2,r3,r2
   41c5c:	10800003 	ldbu	r2,0(r2)
   41c60:	e0bffc05 	stb	r2,-16(fp)
	char M=message[i];
	//disable interrupts
	//IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   41c64:	e0bffc07 	ldb	r2,-16(fp)
   41c68:	1004c03a 	cmpne	r2,r2,zero
   41c6c:	103fee1e 	bne	r2,zero,41c28 <_ZN4WiFi12writeCommandEPc+0x38>
	}

	//Send end of package characters
	//Padrão do esp8266
		//Send '\r'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41c70:	e13ffe17 	ldw	r4,-8(fp)
   41c74:	01401004 	movi	r5,64
   41c78:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\r');
   41c7c:	00c41104 	movi	r3,4164
   41c80:	00800344 	movi	r2,13
   41c84:	18800035 	stwio	r2,0(r3)
		//Send '\n'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   41c88:	e13ffe17 	ldw	r4,-8(fp)
   41c8c:	01401004 	movi	r5,64
   41c90:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\n');
   41c94:	00c41104 	movi	r3,4164
   41c98:	00800284 	movi	r2,10
   41c9c:	18800035 	stwio	r2,0(r3)

	//re-enable interrupts
	//IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));

}
   41ca0:	e037883a 	mov	sp,fp
   41ca4:	dfc00117 	ldw	ra,4(sp)
   41ca8:	df000017 	ldw	fp,0(sp)
   41cac:	dec00204 	addi	sp,sp,8
   41cb0:	f800283a 	ret

00041cb4 <_ZN4WiFi10stopServerEv>:
}




void WiFi::stopServer() {
   41cb4:	defffd04 	addi	sp,sp,-12
   41cb8:	dfc00215 	stw	ra,8(sp)
   41cbc:	df000115 	stw	fp,4(sp)
   41cc0:	df000104 	addi	fp,sp,4
   41cc4:	e13fff15 	stw	r4,-4(fp)
	writeCommand("AT+CIPSERVER=0");
   41cc8:	e13fff17 	ldw	r4,-4(fp)
   41ccc:	01400134 	movhi	r5,4
   41cd0:	2956f404 	addi	r5,r5,23504
   41cd4:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	writeCommand("AT+RST");
   41cd8:	e13fff17 	ldw	r4,-4(fp)
   41cdc:	01400134 	movhi	r5,4
   41ce0:	2956f804 	addi	r5,r5,23520
   41ce4:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
}
   41ce8:	e037883a 	mov	sp,fp
   41cec:	dfc00117 	ldw	ra,4(sp)
   41cf0:	df000017 	ldw	fp,0(sp)
   41cf4:	dec00204 	addi	sp,sp,8
   41cf8:	f800283a 	ret

00041cfc <_ZN4WiFi9readUART2Ev>:


//Funcao chamada para verificar resposta do módulo aos comandos
//A reposta sempre termina em  "\n", então continua-se lendo a UART até encontrar o caractére
//Alguns comandos recebem mais de uma resposta, portanto o "keep_reading"
void WiFi::readUART2(){
   41cfc:	defffb04 	addi	sp,sp,-20
   41d00:	dfc00415 	stw	ra,16(sp)
   41d04:	df000315 	stw	fp,12(sp)
   41d08:	df000304 	addi	fp,sp,12
   41d0c:	e13fff15 	stw	r4,-4(fp)
	char ch;
	int keep_reading = 1;
   41d10:	00800044 	movi	r2,1
   41d14:	e0bffd15 	stw	r2,-12(fp)
	while(keep_reading !=0){
   41d18:	00001306 	br	41d68 <_ZN4WiFi9readUART2Ev+0x6c>
		keep_reading=1;
   41d1c:	00800044 	movi	r2,1
   41d20:	e0bffd15 	stw	r2,-12(fp)
		do{
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   41d24:	e13fff17 	ldw	r4,-4(fp)
   41d28:	01402004 	movi	r5,128
   41d2c:	0041ac40 	call	41ac4 <_ZN4WiFi18waitForStatusReadyEj>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   41d30:	00841004 	movi	r2,4160
   41d34:	10800037 	ldwio	r2,0(r2)
   41d38:	e0bffe05 	stb	r2,-8(fp)
			alt_putchar(ch);
   41d3c:	e13ffe07 	ldb	r4,-8(fp)
   41d40:	00452380 	call	45238 <alt_putchar>
void WiFi::readUART2(){
	char ch;
	int keep_reading = 1;
	while(keep_reading !=0){
		keep_reading=1;
		do{
   41d44:	e0bffe07 	ldb	r2,-8(fp)
   41d48:	10800298 	cmpnei	r2,r2,10
   41d4c:	103ff51e 	bne	r2,zero,41d24 <_ZN4WiFi9readUART2Ev+0x28>
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
			alt_putchar(ch);
		}while(ch !='\n');
		usleep(200);
   41d50:	01003204 	movi	r4,200
   41d54:	00453680 	call	45368 <usleep>
		keep_reading=IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE) & FIFOED_AVALON_UART_STATUS_RRDY_MSK;
   41d58:	00841204 	movi	r2,4168
   41d5c:	10800037 	ldwio	r2,0(r2)
   41d60:	1080200c 	andi	r2,r2,128
   41d64:	e0bffd15 	stw	r2,-12(fp)
//A reposta sempre termina em  "\n", então continua-se lendo a UART até encontrar o caractére
//Alguns comandos recebem mais de uma resposta, portanto o "keep_reading"
void WiFi::readUART2(){
	char ch;
	int keep_reading = 1;
	while(keep_reading !=0){
   41d68:	e0bffd17 	ldw	r2,-12(fp)
   41d6c:	1004c03a 	cmpne	r2,r2,zero
   41d70:	103fea1e 	bne	r2,zero,41d1c <_ZN4WiFi9readUART2Ev+0x20>
			alt_putchar(ch);
		}while(ch !='\n');
		usleep(200);
		keep_reading=IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE) & FIFOED_AVALON_UART_STATUS_RRDY_MSK;
	}
}
   41d74:	e037883a 	mov	sp,fp
   41d78:	dfc00117 	ldw	ra,4(sp)
   41d7c:	df000017 	ldw	fp,0(sp)
   41d80:	dec00204 	addi	sp,sp,8
   41d84:	f800283a 	ret

00041d88 <_ZN4WiFi6configEPcS0_>:
	return wifi;
}



void WiFi::config(char* name, char* password) {
   41d88:	defffb04 	addi	sp,sp,-20
   41d8c:	dfc00415 	stw	ra,16(sp)
   41d90:	df000315 	stw	fp,12(sp)
   41d94:	df000304 	addi	fp,sp,12
   41d98:	e13ffd15 	stw	r4,-12(fp)
   41d9c:	e17ffe15 	stw	r5,-8(fp)
   41da0:	e1bfff15 	stw	r6,-4(fp)
	usleep(1000000);
   41da4:	010003f4 	movhi	r4,15
   41da8:	21109004 	addi	r4,r4,16960
   41dac:	00453680 	call	45368 <usleep>

	//Wifi mode - mode 2 = AP mode (host)
	writeCommand("AT+CWMODE=2");
   41db0:	e13ffd17 	ldw	r4,-12(fp)
   41db4:	01400134 	movhi	r5,4
   41db8:	2956fa04 	addi	r5,r5,23528
   41dbc:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41dc0:	e13ffd17 	ldw	r4,-12(fp)
   41dc4:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41dc8:	010003f4 	movhi	r4,15
   41dcc:	21109004 	addi	r4,r4,16960
   41dd0:	00453680 	call	45368 <usleep>

	//Set multiple connection or not - mode 1 = multiple conn. enable
	writeCommand("AT+CIPMUX=1");
   41dd4:	e13ffd17 	ldw	r4,-12(fp)
   41dd8:	01400134 	movhi	r5,4
   41ddc:	2956fd04 	addi	r5,r5,23540
   41de0:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41de4:	e13ffd17 	ldw	r4,-12(fp)
   41de8:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41dec:	010003f4 	movhi	r4,15
   41df0:	21109004 	addi	r4,r4,16960
   41df4:	00453680 	call	45368 <usleep>

	//Set IP address of ESP8266 softAP
	writeCommand("AT+CIPAP=\"192.168.4.1\"");
   41df8:	e13ffd17 	ldw	r4,-12(fp)
   41dfc:	01400134 	movhi	r5,4
   41e00:	29570004 	addi	r5,r5,23552
   41e04:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41e08:	e13ffd17 	ldw	r4,-12(fp)
   41e0c:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41e10:	010003f4 	movhi	r4,15
   41e14:	21109004 	addi	r4,r4,16960
   41e18:	00453680 	call	45368 <usleep>

	//Generic configuration - ssid, pwd, ch, ecn
	writeCommand("AT+CWSAP=\"ColeteWifi\",\"123456789\",5,3");
   41e1c:	e13ffd17 	ldw	r4,-12(fp)
   41e20:	01400134 	movhi	r5,4
   41e24:	29570604 	addi	r5,r5,23576
   41e28:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41e2c:	e13ffd17 	ldw	r4,-12(fp)
   41e30:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41e34:	010003f4 	movhi	r4,15
   41e38:	21109004 	addi	r4,r4,16960
   41e3c:	00453680 	call	45368 <usleep>

	//Configure as a server - mode 1 = create server
	//						- port 80 (default 333)
	writeCommand("AT+CIPSERVER=1,80");
   41e40:	e13ffd17 	ldw	r4,-12(fp)
   41e44:	01400134 	movhi	r5,4
   41e48:	29571004 	addi	r5,r5,23616
   41e4c:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41e50:	e13ffd17 	ldw	r4,-12(fp)
   41e54:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41e58:	010003f4 	movhi	r4,15
   41e5c:	21109004 	addi	r4,r4,16960
   41e60:	00453680 	call	45368 <usleep>

	//Server timeout, max7200 segundos
	writeCommand("AT+CIPSTO=600");
   41e64:	e13ffd17 	ldw	r4,-12(fp)
   41e68:	01400134 	movhi	r5,4
   41e6c:	29571504 	addi	r5,r5,23636
   41e70:	0041bf00 	call	41bf0 <_ZN4WiFi12writeCommandEPc>
	readUART2();
   41e74:	e13ffd17 	ldw	r4,-12(fp)
   41e78:	0041cfc0 	call	41cfc <_ZN4WiFi9readUART2Ev>
	usleep(1000000);
   41e7c:	010003f4 	movhi	r4,15
   41e80:	21109004 	addi	r4,r4,16960
   41e84:	00453680 	call	45368 <usleep>


	//----------
	//telnet 192.168.4.1 80
	//para mandar dados para o wifi
}
   41e88:	e037883a 	mov	sp,fp
   41e8c:	dfc00117 	ldw	ra,4(sp)
   41e90:	df000017 	ldw	fp,0(sp)
   41e94:	dec00204 	addi	sp,sp,8
   41e98:	f800283a 	ret

00041e9c <_ZN4WiFi12getSingletonEv>:

/* public */
WiFi::~WiFi() {
}

WiFi *WiFi::getSingleton() {
   41e9c:	defffd04 	addi	sp,sp,-12
   41ea0:	dfc00215 	stw	ra,8(sp)
   41ea4:	df000115 	stw	fp,4(sp)
   41ea8:	dc000015 	stw	r16,0(sp)
   41eac:	d839883a 	mov	fp,sp
	if (wifi == 0)
   41eb0:	d0a15c17 	ldw	r2,-31376(gp)
   41eb4:	1004c03a 	cmpne	r2,r2,zero
   41eb8:	1000061e 	bne	r2,zero,41ed4 <_ZN4WiFi12getSingletonEv+0x38>
		wifi = new WiFi();
   41ebc:	01000044 	movi	r4,1
   41ec0:	0042d7c0 	call	42d7c <_Znwm>
   41ec4:	1021883a 	mov	r16,r2
   41ec8:	8009883a 	mov	r4,r16
   41ecc:	0041aa40 	call	41aa4 <_ZN4WiFiC1Ev>
   41ed0:	d4215c15 	stw	r16,-31376(gp)
	return wifi;
   41ed4:	d0a15c17 	ldw	r2,-31376(gp)
}
   41ed8:	e037883a 	mov	sp,fp
   41edc:	dfc00217 	ldw	ra,8(sp)
   41ee0:	df000117 	ldw	fp,4(sp)
   41ee4:	dc000017 	ldw	r16,0(sp)
   41ee8:	dec00304 	addi	sp,sp,12
   41eec:	f800283a 	ret

00041ef0 <main>:
#include "system.h"
#include "app.h"

int main()
   41ef0:	deffe104 	addi	sp,sp,-124
   41ef4:	dfc01e15 	stw	ra,120(sp)
   41ef8:	df001d15 	stw	fp,116(sp)
   41efc:	ddc01c15 	stw	r23,112(sp)
   41f00:	dd801b15 	stw	r22,108(sp)
   41f04:	dd401a15 	stw	r21,104(sp)
   41f08:	dd001915 	stw	r20,100(sp)
   41f0c:	dcc01815 	stw	r19,96(sp)
   41f10:	dc801715 	stw	r18,92(sp)
   41f14:	dc401615 	stw	r17,88(sp)
   41f18:	dc001515 	stw	r16,84(sp)
   41f1c:	df001504 	addi	fp,sp,84
   41f20:	00800134 	movhi	r2,4
   41f24:	1089e004 	addi	r2,r2,10112
   41f28:	e0bff715 	stw	r2,-36(fp)
   41f2c:	00800134 	movhi	r2,4
   41f30:	1096ca04 	addi	r2,r2,23336
   41f34:	e0bff815 	stw	r2,-32(fp)
   41f38:	e0bff904 	addi	r2,fp,-28
   41f3c:	e0ffeb04 	addi	r3,fp,-84
   41f40:	10c00015 	stw	r3,0(r2)
   41f44:	00c00134 	movhi	r3,4
   41f48:	18c7e404 	addi	r3,r3,8080
   41f4c:	10c00115 	stw	r3,4(r2)
   41f50:	16c00215 	stw	sp,8(r2)
   41f54:	e13ff104 	addi	r4,fp,-60
   41f58:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
{
	App app;
   41f5c:	00bfffc4 	movi	r2,-1
   41f60:	e0bff215 	stw	r2,-56(fp)
   41f64:	e13feb04 	addi	r4,fp,-84
   41f68:	00413040 	call	41304 <_ZN3AppC1Ev>

	app.setup();
   41f6c:	00800044 	movi	r2,1
   41f70:	e0bff215 	stw	r2,-56(fp)
   41f74:	e13feb04 	addi	r4,fp,-84
   41f78:	00412580 	call	41258 <_ZN3App5setupEv>
	while(1){

		app.run();
   41f7c:	00800044 	movi	r2,1
   41f80:	e0bff215 	stw	r2,-56(fp)
   41f84:	e13feb04 	addi	r4,fp,-84
   41f88:	00406400 	call	40640 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
   41f8c:	003ffb06 	br	41f7c <main+0x8c>
   41f90:	e7001504 	addi	fp,fp,84
   41f94:	e0bff317 	ldw	r2,-52(fp)
   41f98:	e0bfff15 	stw	r2,-4(fp)
   41f9c:	e0ffff17 	ldw	r3,-4(fp)
   41fa0:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
   41fa4:	e03ff215 	stw	zero,-56(fp)
   41fa8:	e13feb04 	addi	r4,fp,-84
   41fac:	004129c0 	call	4129c <_ZN3AppD1Ev>
   41fb0:	e0bffe17 	ldw	r2,-8(fp)
   41fb4:	e0bfff15 	stw	r2,-4(fp)
   41fb8:	00bfffc4 	movi	r2,-1
   41fbc:	e0bff215 	stw	r2,-56(fp)
   41fc0:	e13fff17 	ldw	r4,-4(fp)
   41fc4:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>

00041fc8 <_Znam>:
   41fc8:	deffee04 	addi	sp,sp,-72
   41fcc:	00800134 	movhi	r2,4
   41fd0:	1089e004 	addi	r2,r2,10112
   41fd4:	d8800615 	stw	r2,24(sp)
   41fd8:	00c00134 	movhi	r3,4
   41fdc:	18d6cc04 	addi	r3,r3,23344
   41fe0:	00800134 	movhi	r2,4
   41fe4:	10881104 	addi	r2,r2,8260
   41fe8:	d9000e15 	stw	r4,56(sp)
   41fec:	d809883a 	mov	r4,sp
   41ff0:	d8800915 	stw	r2,36(sp)
   41ff4:	dfc01115 	stw	ra,68(sp)
   41ff8:	df001015 	stw	fp,64(sp)
   41ffc:	ddc00f15 	stw	r23,60(sp)
   42000:	d8c00715 	stw	r3,28(sp)
   42004:	dec00815 	stw	sp,32(sp)
   42008:	dec00a15 	stw	sp,40(sp)
   4200c:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   42010:	00800044 	movi	r2,1
   42014:	d8800115 	stw	r2,4(sp)
   42018:	d9000e17 	ldw	r4,56(sp)
   4201c:	0042d7c0 	call	42d7c <_Znwm>
   42020:	d809883a 	mov	r4,sp
   42024:	d8800d15 	stw	r2,52(sp)
   42028:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   4202c:	d8800d17 	ldw	r2,52(sp)
   42030:	dfc01117 	ldw	ra,68(sp)
   42034:	df001017 	ldw	fp,64(sp)
   42038:	ddc00f17 	ldw	r23,60(sp)
   4203c:	dec01204 	addi	sp,sp,72
   42040:	f800283a 	ret
   42044:	d8800317 	ldw	r2,12(sp)
   42048:	00ffffc4 	movi	r3,-1
   4204c:	d9000217 	ldw	r4,8(sp)
   42050:	10c00226 	beq	r2,r3,4205c <_Znam+0x94>
   42054:	d8c00115 	stw	r3,4(sp)
   42058:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   4205c:	00bfffc4 	movi	r2,-1
   42060:	d8800115 	stw	r2,4(sp)
   42064:	00426000 	call	42600 <__cxa_call_unexpected>

00042068 <_ZdlPv>:
   42068:	20000126 	beq	r4,zero,42070 <_ZdlPv+0x8>
   4206c:	0043f141 	jmpi	43f14 <free>
   42070:	f800283a 	ret

00042074 <_Z12read_uleb128PKhPj>:
   42074:	000d883a 	mov	r6,zero
   42078:	000f883a 	mov	r7,zero
   4207c:	20c00007 	ldb	r3,0(r4)
   42080:	21000044 	addi	r4,r4,1
   42084:	18801fcc 	andi	r2,r3,127
   42088:	1184983a 	sll	r2,r2,r6
   4208c:	318001c4 	addi	r6,r6,7
   42090:	388eb03a 	or	r7,r7,r2
   42094:	183ff916 	blt	r3,zero,4207c <_Z12read_uleb128PKhPj+0x8>
   42098:	2005883a 	mov	r2,r4
   4209c:	29c00015 	stw	r7,0(r5)
   420a0:	f800283a 	ret

000420a4 <_Z12read_sleb128PKhPi>:
   420a4:	000f883a 	mov	r7,zero
   420a8:	0011883a 	mov	r8,zero
   420ac:	20c00007 	ldb	r3,0(r4)
   420b0:	21000044 	addi	r4,r4,1
   420b4:	19803fcc 	andi	r6,r3,255
   420b8:	30801fcc 	andi	r2,r6,127
   420bc:	11c4983a 	sll	r2,r2,r7
   420c0:	39c001c4 	addi	r7,r7,7
   420c4:	4090b03a 	or	r8,r8,r2
   420c8:	183ff816 	blt	r3,zero,420ac <_Z12read_sleb128PKhPi+0x8>
   420cc:	008007c4 	movi	r2,31
   420d0:	11c00636 	bltu	r2,r7,420ec <_Z12read_sleb128PKhPi+0x48>
   420d4:	3080100c 	andi	r2,r6,64
   420d8:	10000426 	beq	r2,zero,420ec <_Z12read_sleb128PKhPi+0x48>
   420dc:	00800044 	movi	r2,1
   420e0:	11c4983a 	sll	r2,r2,r7
   420e4:	0085c83a 	sub	r2,zero,r2
   420e8:	4090b03a 	or	r8,r8,r2
   420ec:	2005883a 	mov	r2,r4
   420f0:	2a000015 	stw	r8,0(r5)
   420f4:	f800283a 	ret

000420f8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   420f8:	28800017 	ldw	r2,0(r5)
   420fc:	defffb04 	addi	sp,sp,-20
   42100:	30c00017 	ldw	r3,0(r6)
   42104:	dc400215 	stw	r17,8(sp)
   42108:	2823883a 	mov	r17,r5
   4210c:	11400217 	ldw	r5,8(r2)
   42110:	dc800315 	stw	r18,12(sp)
   42114:	dc000115 	stw	r16,4(sp)
   42118:	dfc00415 	stw	ra,16(sp)
   4211c:	2021883a 	mov	r16,r4
   42120:	d8c00015 	stw	r3,0(sp)
   42124:	8809883a 	mov	r4,r17
   42128:	3025883a 	mov	r18,r6
   4212c:	283ee83a 	callr	r5
   42130:	10803fcc 	andi	r2,r2,255
   42134:	880b883a 	mov	r5,r17
   42138:	8009883a 	mov	r4,r16
   4213c:	d80d883a 	mov	r6,sp
   42140:	01c00044 	movi	r7,1
   42144:	10000326 	beq	r2,zero,42154 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
   42148:	d8800017 	ldw	r2,0(sp)
   4214c:	10c00017 	ldw	r3,0(r2)
   42150:	d8c00015 	stw	r3,0(sp)
   42154:	80800017 	ldw	r2,0(r16)
   42158:	10c00417 	ldw	r3,16(r2)
   4215c:	183ee83a 	callr	r3
   42160:	10803fcc 	andi	r2,r2,255
   42164:	0007883a 	mov	r3,zero
   42168:	10000326 	beq	r2,zero,42178 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
   4216c:	d8800017 	ldw	r2,0(sp)
   42170:	00c00044 	movi	r3,1
   42174:	90800015 	stw	r2,0(r18)
   42178:	1805883a 	mov	r2,r3
   4217c:	dfc00417 	ldw	ra,16(sp)
   42180:	dc800317 	ldw	r18,12(sp)
   42184:	dc400217 	ldw	r17,8(sp)
   42188:	dc000117 	ldw	r16,4(sp)
   4218c:	dec00504 	addi	sp,sp,20
   42190:	f800283a 	ret

00042194 <_Z28read_encoded_value_with_basehjPKhPj>:
   42194:	defff904 	addi	sp,sp,-28
   42198:	dc400215 	stw	r17,8(sp)
   4219c:	00801404 	movi	r2,80
   421a0:	24403fcc 	andi	r17,r4,255
   421a4:	dd000515 	stw	r20,20(sp)
   421a8:	dcc00415 	stw	r19,16(sp)
   421ac:	dc800315 	stw	r18,12(sp)
   421b0:	dc000115 	stw	r16,4(sp)
   421b4:	dfc00615 	stw	ra,24(sp)
   421b8:	2025883a 	mov	r18,r4
   421bc:	2829883a 	mov	r20,r5
   421c0:	3021883a 	mov	r16,r6
   421c4:	3827883a 	mov	r19,r7
   421c8:	88801826 	beq	r17,r2,4222c <_Z28read_encoded_value_with_basehjPKhPj+0x98>
   421cc:	88c003cc 	andi	r3,r17,15
   421d0:	00800304 	movi	r2,12
   421d4:	10c0012e 	bgeu	r2,r3,421dc <_Z28read_encoded_value_with_basehjPKhPj+0x48>
   421d8:	0043efc0 	call	43efc <abort>
   421dc:	18c5883a 	add	r2,r3,r3
   421e0:	1085883a 	add	r2,r2,r2
   421e4:	00c00134 	movhi	r3,4
   421e8:	18c87e04 	addi	r3,r3,8696
   421ec:	10c5883a 	add	r2,r2,r3
   421f0:	11000017 	ldw	r4,0(r2)
   421f4:	2000683a 	jmp	r4
   421f8:	00042268 	cmpgeui	zero,zero,4233
   421fc:	00042350 	cmplti	zero,zero,4237
   42200:	000422fc 	xorhi	zero,zero,4235
   42204:	00042268 	cmpgeui	zero,zero,4233
   42208:	000422c0 	call	422c <__alt_mem_onchip_memory2_0-0x3bdd4>
   4220c:	000421d8 	cmpnei	zero,zero,4231
   42210:	000421d8 	cmpnei	zero,zero,4231
   42214:	000421d8 	cmpnei	zero,zero,4231
   42218:	000421d8 	cmpnei	zero,zero,4231
   4221c:	00042338 	rdprs	zero,zero,4236
   42220:	00042314 	movui	zero,4236
   42224:	00042268 	cmpgeui	zero,zero,4233
   42228:	000422c0 	call	422c <__alt_mem_onchip_memory2_0-0x3bdd4>
   4222c:	308000c4 	addi	r2,r6,3
   42230:	00ffff04 	movi	r3,-4
   42234:	10c4703a 	and	r2,r2,r3
   42238:	11000017 	ldw	r4,0(r2)
   4223c:	11400104 	addi	r5,r2,4
   42240:	2805883a 	mov	r2,r5
   42244:	99000015 	stw	r4,0(r19)
   42248:	dfc00617 	ldw	ra,24(sp)
   4224c:	dd000517 	ldw	r20,20(sp)
   42250:	dcc00417 	ldw	r19,16(sp)
   42254:	dc800317 	ldw	r18,12(sp)
   42258:	dc400217 	ldw	r17,8(sp)
   4225c:	dc000117 	ldw	r16,4(sp)
   42260:	dec00704 	addi	sp,sp,28
   42264:	f800283a 	ret
   42268:	30800043 	ldbu	r2,1(r6)
   4226c:	30c00083 	ldbu	r3,2(r6)
   42270:	310000c3 	ldbu	r4,3(r6)
   42274:	31400003 	ldbu	r5,0(r6)
   42278:	1004923a 	slli	r2,r2,8
   4227c:	1806943a 	slli	r3,r3,16
   42280:	2008963a 	slli	r4,r4,24
   42284:	1144b03a 	or	r2,r2,r5
   42288:	1886b03a 	or	r3,r3,r2
   4228c:	20c8b03a 	or	r4,r4,r3
   42290:	31400104 	addi	r5,r6,4
   42294:	203fea26 	beq	r4,zero,42240 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   42298:	88c01c0c 	andi	r3,r17,112
   4229c:	00800404 	movi	r2,16
   422a0:	18801426 	beq	r3,r2,422f4 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
   422a4:	90803fcc 	andi	r2,r18,255
   422a8:	1080201c 	xori	r2,r2,128
   422ac:	10bfe004 	addi	r2,r2,-128
   422b0:	2509883a 	add	r4,r4,r20
   422b4:	103fe20e 	bge	r2,zero,42240 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   422b8:	21000017 	ldw	r4,0(r4)
   422bc:	003fe006 	br	42240 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
   422c0:	30800043 	ldbu	r2,1(r6)
   422c4:	31800083 	ldbu	r6,2(r6)
   422c8:	820000c3 	ldbu	r8,3(r16)
   422cc:	1004923a 	slli	r2,r2,8
   422d0:	82400003 	ldbu	r9,0(r16)
   422d4:	300c943a 	slli	r6,r6,16
   422d8:	4010963a 	slli	r8,r8,24
   422dc:	1244b03a 	or	r2,r2,r9
   422e0:	308cb03a 	or	r6,r6,r2
   422e4:	4184b03a 	or	r2,r8,r6
   422e8:	1009883a 	mov	r4,r2
   422ec:	81400204 	addi	r5,r16,8
   422f0:	003fe806 	br	42294 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   422f4:	8029883a 	mov	r20,r16
   422f8:	003fea06 	br	422a4 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
   422fc:	30800043 	ldbu	r2,1(r6)
   42300:	30c00003 	ldbu	r3,0(r6)
   42304:	31400084 	addi	r5,r6,2
   42308:	1004923a 	slli	r2,r2,8
   4230c:	10c8b03a 	or	r4,r2,r3
   42310:	003fe006 	br	42294 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   42314:	30800043 	ldbu	r2,1(r6)
   42318:	30c00003 	ldbu	r3,0(r6)
   4231c:	31400084 	addi	r5,r6,2
   42320:	1004923a 	slli	r2,r2,8
   42324:	10c4b03a 	or	r2,r2,r3
   42328:	113fffcc 	andi	r4,r2,65535
   4232c:	2120001c 	xori	r4,r4,32768
   42330:	21200004 	addi	r4,r4,-32768
   42334:	003fd706 	br	42294 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   42338:	3009883a 	mov	r4,r6
   4233c:	d80b883a 	mov	r5,sp
   42340:	00420a40 	call	420a4 <_Z12read_sleb128PKhPi>
   42344:	d9000017 	ldw	r4,0(sp)
   42348:	100b883a 	mov	r5,r2
   4234c:	003fd106 	br	42294 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
   42350:	3009883a 	mov	r4,r6
   42354:	d80b883a 	mov	r5,sp
   42358:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   4235c:	d9000017 	ldw	r4,0(sp)
   42360:	100b883a 	mov	r5,r2
   42364:	003fcb06 	br	42294 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

00042368 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
   42368:	deffff04 	addi	sp,sp,-4
   4236c:	21003fcc 	andi	r4,r4,255
   42370:	00803fc4 	movi	r2,255
   42374:	dfc00015 	stw	ra,0(sp)
   42378:	20800c26 	beq	r4,r2,423ac <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   4237c:	21001c0c 	andi	r4,r4,112
   42380:	00800804 	movi	r2,32
   42384:	20800d26 	beq	r4,r2,423bc <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
   42388:	1100070e 	bge	r2,r4,423a8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
   4238c:	00801004 	movi	r2,64
   42390:	20801126 	beq	r4,r2,423d8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
   42394:	00801404 	movi	r2,80
   42398:	20800426 	beq	r4,r2,423ac <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   4239c:	00800c04 	movi	r2,48
   423a0:	20801126 	beq	r4,r2,423e8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
   423a4:	0043efc0 	call	43efc <abort>
   423a8:	2000081e 	bne	r4,zero,423cc <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
   423ac:	0005883a 	mov	r2,zero
   423b0:	dfc00017 	ldw	ra,0(sp)
   423b4:	dec00104 	addi	sp,sp,4
   423b8:	f800283a 	ret
   423bc:	2809883a 	mov	r4,r5
   423c0:	dfc00017 	ldw	ra,0(sp)
   423c4:	dec00104 	addi	sp,sp,4
   423c8:	0043a6c1 	jmpi	43a6c <_Unwind_GetTextRelBase>
   423cc:	00800404 	movi	r2,16
   423d0:	20bff626 	beq	r4,r2,423ac <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
   423d4:	0043efc0 	call	43efc <abort>
   423d8:	2809883a 	mov	r4,r5
   423dc:	dfc00017 	ldw	ra,0(sp)
   423e0:	dec00104 	addi	sp,sp,4
   423e4:	0043a541 	jmpi	43a54 <_Unwind_GetRegionStart>
   423e8:	2809883a 	mov	r4,r5
   423ec:	dfc00017 	ldw	ra,0(sp)
   423f0:	dec00104 	addi	sp,sp,4
   423f4:	0043a641 	jmpi	43a64 <_Unwind_GetDataRelBase>

000423f8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   423f8:	defffa04 	addi	sp,sp,-24
   423fc:	dc800415 	stw	r18,16(sp)
   42400:	dc400315 	stw	r17,12(sp)
   42404:	dc000215 	stw	r16,8(sp)
   42408:	dfc00515 	stw	ra,20(sp)
   4240c:	2021883a 	mov	r16,r4
   42410:	000f883a 	mov	r7,zero
   42414:	3023883a 	mov	r17,r6
   42418:	2825883a 	mov	r18,r5
   4241c:	20000226 	beq	r4,zero,42428 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
   42420:	0043a540 	call	43a54 <_Unwind_GetRegionStart>
   42424:	100f883a 	mov	r7,r2
   42428:	89c00015 	stw	r7,0(r17)
   4242c:	90c00003 	ldbu	r3,0(r18)
   42430:	800b883a 	mov	r5,r16
   42434:	00803fc4 	movi	r2,255
   42438:	1c003fcc 	andi	r16,r3,255
   4243c:	91800044 	addi	r6,r18,1
   42440:	8009883a 	mov	r4,r16
   42444:	18802226 	beq	r3,r2,424d0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
   42448:	d9800115 	stw	r6,4(sp)
   4244c:	00423680 	call	42368 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42450:	d9800117 	ldw	r6,4(sp)
   42454:	8009883a 	mov	r4,r16
   42458:	100b883a 	mov	r5,r2
   4245c:	89c00104 	addi	r7,r17,4
   42460:	00421940 	call	42194 <_Z28read_encoded_value_with_basehjPKhPj>
   42464:	100d883a 	mov	r6,r2
   42468:	30800003 	ldbu	r2,0(r6)
   4246c:	31c00044 	addi	r7,r6,1
   42470:	00c03fc4 	movi	r3,255
   42474:	d80b883a 	mov	r5,sp
   42478:	3809883a 	mov	r4,r7
   4247c:	88800505 	stb	r2,20(r17)
   42480:	10c01b26 	beq	r2,r3,424f0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
   42484:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   42488:	100f883a 	mov	r7,r2
   4248c:	d8800017 	ldw	r2,0(sp)
   42490:	3885883a 	add	r2,r7,r2
   42494:	88800315 	stw	r2,12(r17)
   42498:	38800003 	ldbu	r2,0(r7)
   4249c:	39000044 	addi	r4,r7,1
   424a0:	d80b883a 	mov	r5,sp
   424a4:	88800545 	stb	r2,21(r17)
   424a8:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   424ac:	d8c00017 	ldw	r3,0(sp)
   424b0:	10c9883a 	add	r4,r2,r3
   424b4:	89000415 	stw	r4,16(r17)
   424b8:	dfc00517 	ldw	ra,20(sp)
   424bc:	dc800417 	ldw	r18,16(sp)
   424c0:	dc400317 	ldw	r17,12(sp)
   424c4:	dc000217 	ldw	r16,8(sp)
   424c8:	dec00604 	addi	sp,sp,24
   424cc:	f800283a 	ret
   424d0:	89c00115 	stw	r7,4(r17)
   424d4:	30800003 	ldbu	r2,0(r6)
   424d8:	31c00044 	addi	r7,r6,1
   424dc:	00c03fc4 	movi	r3,255
   424e0:	d80b883a 	mov	r5,sp
   424e4:	3809883a 	mov	r4,r7
   424e8:	88800505 	stb	r2,20(r17)
   424ec:	10ffe51e 	bne	r2,r3,42484 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
   424f0:	88000315 	stw	zero,12(r17)
   424f4:	003fe806 	br	42498 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

000424f8 <_Z15get_ttype_entryP16lsda_header_infoj>:
   424f8:	defffe04 	addi	sp,sp,-8
   424fc:	dfc00115 	stw	ra,4(sp)
   42500:	21c00503 	ldbu	r7,20(r4)
   42504:	00803fc4 	movi	r2,255
   42508:	38801a26 	beq	r7,r2,42574 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
   4250c:	38c001cc 	andi	r3,r7,7
   42510:	00800084 	movi	r2,2
   42514:	18801326 	beq	r3,r2,42564 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
   42518:	10c0050e 	bge	r2,r3,42530 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
   4251c:	008000c4 	movi	r2,3
   42520:	18800426 	beq	r3,r2,42534 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
   42524:	00800104 	movi	r2,4
   42528:	18801026 	beq	r3,r2,4256c <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
   4252c:	0043efc0 	call	43efc <abort>
   42530:	183ffe1e 	bne	r3,zero,4252c <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
   42534:	2945883a 	add	r2,r5,r5
   42538:	1085883a 	add	r2,r2,r2
   4253c:	21800317 	ldw	r6,12(r4)
   42540:	21400217 	ldw	r5,8(r4)
   42544:	3809883a 	mov	r4,r7
   42548:	308dc83a 	sub	r6,r6,r2
   4254c:	d80f883a 	mov	r7,sp
   42550:	00421940 	call	42194 <_Z28read_encoded_value_with_basehjPKhPj>
   42554:	d8800017 	ldw	r2,0(sp)
   42558:	dfc00117 	ldw	ra,4(sp)
   4255c:	dec00204 	addi	sp,sp,8
   42560:	f800283a 	ret
   42564:	2945883a 	add	r2,r5,r5
   42568:	003ff406 	br	4253c <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   4256c:	280490fa 	slli	r2,r5,3
   42570:	003ff206 	br	4253c <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
   42574:	0005883a 	mov	r2,zero
   42578:	003ff006 	br	4253c <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0004257c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
   4257c:	20800317 	ldw	r2,12(r4)
   42580:	defffa04 	addi	sp,sp,-24
   42584:	dc800415 	stw	r18,16(sp)
   42588:	11c5c83a 	sub	r2,r2,r7
   4258c:	dc400315 	stw	r17,12(sp)
   42590:	dc000215 	stw	r16,8(sp)
   42594:	dfc00515 	stw	ra,20(sp)
   42598:	2023883a 	mov	r17,r4
   4259c:	d9800115 	stw	r6,4(sp)
   425a0:	2825883a 	mov	r18,r5
   425a4:	143fffc4 	addi	r16,r2,-1
   425a8:	8009883a 	mov	r4,r16
   425ac:	d80b883a 	mov	r5,sp
   425b0:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   425b4:	1021883a 	mov	r16,r2
   425b8:	d8800017 	ldw	r2,0(sp)
   425bc:	8809883a 	mov	r4,r17
   425c0:	100b883a 	mov	r5,r2
   425c4:	10000826 	beq	r2,zero,425e8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
   425c8:	00424f80 	call	424f8 <_Z15get_ttype_entryP16lsda_header_infoj>
   425cc:	1009883a 	mov	r4,r2
   425d0:	900b883a 	mov	r5,r18
   425d4:	d9800104 	addi	r6,sp,4
   425d8:	00420f80 	call	420f8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   425dc:	10803fcc 	andi	r2,r2,255
   425e0:	103ff126 	beq	r2,zero,425a8 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
   425e4:	00800044 	movi	r2,1
   425e8:	dfc00517 	ldw	ra,20(sp)
   425ec:	dc800417 	ldw	r18,16(sp)
   425f0:	dc400317 	ldw	r17,12(sp)
   425f4:	dc000217 	ldw	r16,8(sp)
   425f8:	dec00604 	addi	sp,sp,24
   425fc:	f800283a 	ret

00042600 <__cxa_call_unexpected>:
   42600:	deffe204 	addi	sp,sp,-120
   42604:	00800134 	movhi	r2,4
   42608:	1089e004 	addi	r2,r2,10112
   4260c:	00c00134 	movhi	r3,4
   42610:	18d6d104 	addi	r3,r3,23364
   42614:	d8800c15 	stw	r2,48(sp)
   42618:	d9001815 	stw	r4,96(sp)
   4261c:	00800134 	movhi	r2,4
   42620:	1089a204 	addi	r2,r2,9864
   42624:	d9000604 	addi	r4,sp,24
   42628:	d8c00d15 	stw	r3,52(sp)
   4262c:	dfc01d15 	stw	ra,116(sp)
   42630:	d8800f15 	stw	r2,60(sp)
   42634:	df001c15 	stw	fp,112(sp)
   42638:	ddc01b15 	stw	r23,108(sp)
   4263c:	dec00e15 	stw	sp,56(sp)
   42640:	dec01015 	stw	sp,64(sp)
   42644:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   42648:	d9001817 	ldw	r4,96(sp)
   4264c:	004333c0 	call	4333c <__cxa_begin_catch>
   42650:	d8801817 	ldw	r2,96(sp)
   42654:	10fff504 	addi	r3,r2,-44
   42658:	18800917 	ldw	r2,36(r3)
   4265c:	19400617 	ldw	r5,24(r3)
   42660:	19000217 	ldw	r4,8(r3)
   42664:	d8800215 	stw	r2,8(sp)
   42668:	18800817 	ldw	r2,32(r3)
   4266c:	18c00317 	ldw	r3,12(r3)
   42670:	d9401615 	stw	r5,88(sp)
   42674:	d8801715 	stw	r2,92(sp)
   42678:	00800084 	movi	r2,2
   4267c:	d8c01515 	stw	r3,84(sp)
   42680:	d8800715 	stw	r2,28(sp)
   42684:	0042d540 	call	42d54 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   42688:	d8800717 	ldw	r2,28(sp)
   4268c:	d8c00817 	ldw	r3,32(sp)
   42690:	d8801a15 	stw	r2,104(sp)
   42694:	d9401a17 	ldw	r5,104(sp)
   42698:	00800044 	movi	r2,1
   4269c:	d8c01915 	stw	r3,100(sp)
   426a0:	28800826 	beq	r5,r2,426c4 <__cxa_call_unexpected+0xc4>
   426a4:	d8000715 	stw	zero,28(sp)
   426a8:	00432980 	call	43298 <__cxa_end_catch>
   426ac:	d8000715 	stw	zero,28(sp)
   426b0:	00432980 	call	43298 <__cxa_end_catch>
   426b4:	d9001917 	ldw	r4,100(sp)
   426b8:	00bfffc4 	movi	r2,-1
   426bc:	d8800715 	stw	r2,28(sp)
   426c0:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   426c4:	d9001917 	ldw	r4,100(sp)
   426c8:	004333c0 	call	4333c <__cxa_begin_catch>
   426cc:	0042c600 	call	42c60 <__cxa_get_globals_fast>
   426d0:	10800017 	ldw	r2,0(r2)
   426d4:	d8c01a17 	ldw	r3,104(sp)
   426d8:	0009883a 	mov	r4,zero
   426dc:	11401004 	addi	r5,r2,64
   426e0:	d9401315 	stw	r5,76(sp)
   426e4:	d8801415 	stw	r2,80(sp)
   426e8:	d8c00715 	stw	r3,28(sp)
   426ec:	d9401717 	ldw	r5,92(sp)
   426f0:	d80d883a 	mov	r6,sp
   426f4:	00423f80 	call	423f8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   426f8:	d8801417 	ldw	r2,80(sp)
   426fc:	d809883a 	mov	r4,sp
   42700:	d9801317 	ldw	r6,76(sp)
   42704:	11400017 	ldw	r5,0(r2)
   42708:	d9c01617 	ldw	r7,88(sp)
   4270c:	004257c0 	call	4257c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42710:	10803fcc 	andi	r2,r2,255
   42714:	1000151e 	bne	r2,zero,4276c <__cxa_call_unexpected+0x16c>
   42718:	d8c01a17 	ldw	r3,104(sp)
   4271c:	d809883a 	mov	r4,sp
   42720:	01400134 	movhi	r5,4
   42724:	29572804 	addi	r5,r5,23712
   42728:	d8c00715 	stw	r3,28(sp)
   4272c:	000d883a 	mov	r6,zero
   42730:	d9c01617 	ldw	r7,88(sp)
   42734:	004257c0 	call	4257c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42738:	10803fcc 	andi	r2,r2,255
   4273c:	10000c26 	beq	r2,zero,42770 <__cxa_call_unexpected+0x170>
   42740:	01000104 	movi	r4,4
   42744:	0042ff40 	call	42ff4 <__cxa_allocate_exception>
   42748:	1009883a 	mov	r4,r2
   4274c:	00800134 	movhi	r2,4
   42750:	10971b04 	addi	r2,r2,23660
   42754:	20800015 	stw	r2,0(r4)
   42758:	01400134 	movhi	r5,4
   4275c:	29572804 	addi	r5,r5,23712
   42760:	01800134 	movhi	r6,4
   42764:	318bcd04 	addi	r6,r6,12084
   42768:	004319c0 	call	4319c <__cxa_throw>
   4276c:	00431280 	call	43128 <__cxa_rethrow>
   42770:	d9401a17 	ldw	r5,104(sp)
   42774:	d9001517 	ldw	r4,84(sp)
   42778:	d9400715 	stw	r5,28(sp)
   4277c:	0042c980 	call	42c98 <_ZN10__cxxabiv111__terminateEPFvvE>

00042780 <__gxx_personality_sj0>:
   42780:	deffd304 	addi	sp,sp,-180
   42784:	00800134 	movhi	r2,4
   42788:	108b0704 	addi	r2,r2,11292
   4278c:	00c00134 	movhi	r3,4
   42790:	18d6d504 	addi	r3,r3,23380
   42794:	d8801315 	stw	r2,76(sp)
   42798:	d9002315 	stw	r4,140(sp)
   4279c:	00800134 	movhi	r2,4
   427a0:	1089e004 	addi	r2,r2,10112
   427a4:	d9000a04 	addi	r4,sp,40
   427a8:	d8801015 	stw	r2,64(sp)
   427ac:	d8c01115 	stw	r3,68(sp)
   427b0:	dfc02c15 	stw	ra,176(sp)
   427b4:	df002b15 	stw	fp,172(sp)
   427b8:	ddc02a15 	stw	r23,168(sp)
   427bc:	dec01215 	stw	sp,72(sp)
   427c0:	dec01415 	stw	sp,80(sp)
   427c4:	d9802515 	stw	r6,148(sp)
   427c8:	d9402415 	stw	r5,144(sp)
   427cc:	d9c02615 	stw	r7,152(sp)
   427d0:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   427d4:	d8c02317 	ldw	r3,140(sp)
   427d8:	00800044 	movi	r2,1
   427dc:	18800a26 	beq	r3,r2,42808 <__gxx_personality_sj0+0x88>
   427e0:	010000c4 	movi	r4,3
   427e4:	d9002215 	stw	r4,136(sp)
   427e8:	d9000a04 	addi	r4,sp,40
   427ec:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   427f0:	d8802217 	ldw	r2,136(sp)
   427f4:	dfc02c17 	ldw	ra,176(sp)
   427f8:	df002b17 	ldw	fp,172(sp)
   427fc:	ddc02a17 	ldw	r23,168(sp)
   42800:	dec02d04 	addi	sp,sp,180
   42804:	f800283a 	ret
   42808:	d9402d17 	ldw	r5,180(sp)
   4280c:	d9002517 	ldw	r4,148(sp)
   42810:	0007883a 	mov	r3,zero
   42814:	28800504 	addi	r2,r5,20
   42818:	d8800015 	stw	r2,0(sp)
   4281c:	28bff504 	addi	r2,r5,-44
   42820:	d8801a15 	stw	r2,104(sp)
   42824:	0090caf4 	movhi	r2,17195
   42828:	108ac004 	addi	r2,r2,11008
   4282c:	2080ad26 	beq	r4,r2,42ae4 <__gxx_personality_sj0+0x364>
   42830:	d8c02105 	stb	r3,132(sp)
   42834:	d8c02417 	ldw	r3,144(sp)
   42838:	00800184 	movi	r2,6
   4283c:	1880281e 	bne	r3,r2,428e0 <__gxx_personality_sj0+0x160>
   42840:	d8802103 	ldbu	r2,132(sp)
   42844:	10002626 	beq	r2,zero,428e0 <__gxx_personality_sj0+0x160>
   42848:	d9001a17 	ldw	r4,104(sp)
   4284c:	d9401a17 	ldw	r5,104(sp)
   42850:	d8801a17 	ldw	r2,104(sp)
   42854:	21000917 	ldw	r4,36(r4)
   42858:	29400617 	ldw	r5,24(r5)
   4285c:	10800817 	ldw	r2,32(r2)
   42860:	d9001d15 	stw	r4,116(sp)
   42864:	d9401b15 	stw	r5,108(sp)
   42868:	d8802015 	stw	r2,128(sp)
   4286c:	2000ad1e 	bne	r4,zero,42b24 <__gxx_personality_sj0+0x3a4>
   42870:	01000044 	movi	r4,1
   42874:	00800044 	movi	r2,1
   42878:	2080e126 	beq	r4,r2,42c00 <__gxx_personality_sj0+0x480>
   4287c:	d8801b17 	ldw	r2,108(sp)
   42880:	1000d316 	blt	r2,zero,42bd0 <__gxx_personality_sj0+0x450>
   42884:	d9802d17 	ldw	r6,180(sp)
   42888:	d9002e17 	ldw	r4,184(sp)
   4288c:	00bfffc4 	movi	r2,-1
   42890:	000b883a 	mov	r5,zero
   42894:	d8800b15 	stw	r2,44(sp)
   42898:	00439fc0 	call	439fc <_Unwind_SetGR>
   4289c:	d9801b17 	ldw	r6,108(sp)
   428a0:	d9002e17 	ldw	r4,184(sp)
   428a4:	01400044 	movi	r5,1
   428a8:	00439fc0 	call	439fc <_Unwind_SetGR>
   428ac:	d9002e17 	ldw	r4,184(sp)
   428b0:	d9401d17 	ldw	r5,116(sp)
   428b4:	0043a380 	call	43a38 <_Unwind_SetIP>
   428b8:	010001c4 	movi	r4,7
   428bc:	d9002215 	stw	r4,136(sp)
   428c0:	d9000a04 	addi	r4,sp,40
   428c4:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   428c8:	d8802217 	ldw	r2,136(sp)
   428cc:	dfc02c17 	ldw	ra,176(sp)
   428d0:	df002b17 	ldw	fp,172(sp)
   428d4:	ddc02a17 	ldw	r23,168(sp)
   428d8:	dec02d04 	addi	sp,sp,180
   428dc:	f800283a 	ret
   428e0:	d9002e17 	ldw	r4,184(sp)
   428e4:	00ffffc4 	movi	r3,-1
   428e8:	d8c00b15 	stw	r3,44(sp)
   428ec:	0043a480 	call	43a48 <_Unwind_GetLanguageSpecificData>
   428f0:	10007226 	beq	r2,zero,42abc <__gxx_personality_sj0+0x33c>
   428f4:	d9002e17 	ldw	r4,184(sp)
   428f8:	d9800404 	addi	r6,sp,16
   428fc:	100b883a 	mov	r5,r2
   42900:	d8802015 	stw	r2,128(sp)
   42904:	00423f80 	call	423f8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   42908:	d9000903 	ldbu	r4,36(sp)
   4290c:	d9402e17 	ldw	r5,184(sp)
   42910:	d8801e15 	stw	r2,120(sp)
   42914:	00423680 	call	42368 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42918:	d9002e17 	ldw	r4,184(sp)
   4291c:	d8800615 	stw	r2,24(sp)
   42920:	0043a140 	call	43a14 <_Unwind_GetIP>
   42924:	10bfffc4 	addi	r2,r2,-1
   42928:	d8801c15 	stw	r2,112(sp)
   4292c:	10006316 	blt	r2,zero,42abc <__gxx_personality_sj0+0x33c>
   42930:	10001b1e 	bne	r2,zero,429a0 <__gxx_personality_sj0+0x220>
   42934:	01000044 	movi	r4,1
   42938:	d8001f15 	stw	zero,124(sp)
   4293c:	d8001d15 	stw	zero,116(sp)
   42940:	d8001b15 	stw	zero,108(sp)
   42944:	d9402417 	ldw	r5,144(sp)
   42948:	00c00044 	movi	r3,1
   4294c:	28c4703a 	and	r2,r5,r3
   42950:	1005003a 	cmpeq	r2,r2,zero
   42954:	10006a1e 	bne	r2,zero,42b00 <__gxx_personality_sj0+0x380>
   42958:	00800084 	movi	r2,2
   4295c:	20805726 	beq	r4,r2,42abc <__gxx_personality_sj0+0x33c>
   42960:	d8802103 	ldbu	r2,132(sp)
   42964:	10008626 	beq	r2,zero,42b80 <__gxx_personality_sj0+0x400>
   42968:	d9001a17 	ldw	r4,104(sp)
   4296c:	d9401d17 	ldw	r5,116(sp)
   42970:	d8801b17 	ldw	r2,108(sp)
   42974:	00c00184 	movi	r3,6
   42978:	d8c02215 	stw	r3,136(sp)
   4297c:	21400915 	stw	r5,36(r4)
   42980:	20800615 	stw	r2,24(r4)
   42984:	d8c01f17 	ldw	r3,124(sp)
   42988:	d9402017 	ldw	r5,128(sp)
   4298c:	d8800017 	ldw	r2,0(sp)
   42990:	20c00715 	stw	r3,28(r4)
   42994:	21400815 	stw	r5,32(r4)
   42998:	20800a15 	stw	r2,40(r4)
   4299c:	003f9206 	br	427e8 <__gxx_personality_sj0+0x68>
   429a0:	d9001e17 	ldw	r4,120(sp)
   429a4:	d9400204 	addi	r5,sp,8
   429a8:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   429ac:	d9401c17 	ldw	r5,112(sp)
   429b0:	1009883a 	mov	r4,r2
   429b4:	297fffc4 	addi	r5,r5,-1
   429b8:	d9401c15 	stw	r5,112(sp)
   429bc:	d9400104 	addi	r5,sp,4
   429c0:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   429c4:	d8801e15 	stw	r2,120(sp)
   429c8:	d8801c17 	ldw	r2,112(sp)
   429cc:	103ff41e 	bne	r2,zero,429a0 <__gxx_personality_sj0+0x220>
   429d0:	d8800217 	ldw	r2,8(sp)
   429d4:	d8c00117 	ldw	r3,4(sp)
   429d8:	01000044 	movi	r4,1
   429dc:	1105883a 	add	r2,r2,r4
   429e0:	d8801d15 	stw	r2,116(sp)
   429e4:	1800541e 	bne	r3,zero,42b38 <__gxx_personality_sj0+0x3b8>
   429e8:	d8001f15 	stw	zero,124(sp)
   429ec:	d8c01d17 	ldw	r3,116(sp)
   429f0:	18003226 	beq	r3,zero,42abc <__gxx_personality_sj0+0x33c>
   429f4:	d9001f17 	ldw	r4,124(sp)
   429f8:	20007226 	beq	r4,zero,42bc4 <__gxx_personality_sj0+0x444>
   429fc:	d9402417 	ldw	r5,144(sp)
   42a00:	2880020c 	andi	r2,r5,8
   42a04:	10006a1e 	bne	r2,zero,42bb0 <__gxx_personality_sj0+0x430>
   42a08:	d8802103 	ldbu	r2,132(sp)
   42a0c:	10006826 	beq	r2,zero,42bb0 <__gxx_personality_sj0+0x430>
   42a10:	d8801a17 	ldw	r2,104(sp)
   42a14:	10800017 	ldw	r2,0(r2)
   42a18:	d8801915 	stw	r2,100(sp)
   42a1c:	d8c01917 	ldw	r3,100(sp)
   42a20:	d8001805 	stb	zero,96(sp)
   42a24:	1807003a 	cmpeq	r3,r3,zero
   42a28:	d8c02715 	stw	r3,156(sp)
   42a2c:	00000706 	br	42a4c <__gxx_personality_sj0+0x2cc>
   42a30:	01000044 	movi	r4,1
   42a34:	d9001805 	stb	r4,96(sp)
   42a38:	d8800217 	ldw	r2,8(sp)
   42a3c:	10005e26 	beq	r2,zero,42bb8 <__gxx_personality_sj0+0x438>
   42a40:	d8c01717 	ldw	r3,92(sp)
   42a44:	1885883a 	add	r2,r3,r2
   42a48:	d8801f15 	stw	r2,124(sp)
   42a4c:	d9001f17 	ldw	r4,124(sp)
   42a50:	d9400104 	addi	r5,sp,4
   42a54:	00420a40 	call	420a4 <_Z12read_sleb128PKhPi>
   42a58:	1009883a 	mov	r4,r2
   42a5c:	d9400204 	addi	r5,sp,8
   42a60:	d8801715 	stw	r2,92(sp)
   42a64:	00420a40 	call	420a4 <_Z12read_sleb128PKhPi>
   42a68:	d8800117 	ldw	r2,4(sp)
   42a6c:	103ff026 	beq	r2,zero,42a30 <__gxx_personality_sj0+0x2b0>
   42a70:	0080360e 	bge	zero,r2,42b4c <__gxx_personality_sj0+0x3cc>
   42a74:	017fffc4 	movi	r5,-1
   42a78:	d9400b15 	stw	r5,44(sp)
   42a7c:	d9000404 	addi	r4,sp,16
   42a80:	100b883a 	mov	r5,r2
   42a84:	00424f80 	call	424f8 <_Z15get_ttype_entryP16lsda_header_infoj>
   42a88:	10000826 	beq	r2,zero,42aac <__gxx_personality_sj0+0x32c>
   42a8c:	d8c02717 	ldw	r3,156(sp)
   42a90:	183fe91e 	bne	r3,zero,42a38 <__gxx_personality_sj0+0x2b8>
   42a94:	d9401917 	ldw	r5,100(sp)
   42a98:	1009883a 	mov	r4,r2
   42a9c:	d80d883a 	mov	r6,sp
   42aa0:	00420f80 	call	420f8 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
   42aa4:	10803fcc 	andi	r2,r2,255
   42aa8:	103fe326 	beq	r2,zero,42a38 <__gxx_personality_sj0+0x2b8>
   42aac:	d9000117 	ldw	r4,4(sp)
   42ab0:	d9001b15 	stw	r4,108(sp)
   42ab4:	010000c4 	movi	r4,3
   42ab8:	003fa206 	br	42944 <__gxx_personality_sj0+0x1c4>
   42abc:	01400204 	movi	r5,8
   42ac0:	d9000a04 	addi	r4,sp,40
   42ac4:	d9402215 	stw	r5,136(sp)
   42ac8:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   42acc:	d8802217 	ldw	r2,136(sp)
   42ad0:	dfc02c17 	ldw	ra,176(sp)
   42ad4:	df002b17 	ldw	fp,172(sp)
   42ad8:	ddc02a17 	ldw	r23,168(sp)
   42adc:	dec02d04 	addi	sp,sp,180
   42ae0:	f800283a 	ret
   42ae4:	d9402617 	ldw	r5,152(sp)
   42ae8:	0091d3b4 	movhi	r2,18254
   42aec:	109550c4 	addi	r2,r2,21827
   42af0:	28bf4f1e 	bne	r5,r2,42830 <__gxx_personality_sj0+0xb0>
   42af4:	d8802317 	ldw	r2,140(sp)
   42af8:	1007883a 	mov	r3,r2
   42afc:	003f4c06 	br	42830 <__gxx_personality_sj0+0xb0>
   42b00:	d9402417 	ldw	r5,144(sp)
   42b04:	2880020c 	andi	r2,r5,8
   42b08:	10000826 	beq	r2,zero,42b2c <__gxx_personality_sj0+0x3ac>
   42b0c:	20c04026 	beq	r4,r3,42c10 <__gxx_personality_sj0+0x490>
   42b10:	d8801b17 	ldw	r2,108(sp)
   42b14:	103f5b0e 	bge	r2,zero,42884 <__gxx_personality_sj0+0x104>
   42b18:	00800084 	movi	r2,2
   42b1c:	d8800b15 	stw	r2,44(sp)
   42b20:	0042d640 	call	42d64 <_ZSt10unexpectedv>
   42b24:	010000c4 	movi	r4,3
   42b28:	003f5206 	br	42874 <__gxx_personality_sj0+0xf4>
   42b2c:	d8802103 	ldbu	r2,132(sp)
   42b30:	103f501e 	bne	r2,zero,42874 <__gxx_personality_sj0+0xf4>
   42b34:	003ff506 	br	42b0c <__gxx_personality_sj0+0x38c>
   42b38:	d8800817 	ldw	r2,32(sp)
   42b3c:	1885883a 	add	r2,r3,r2
   42b40:	1105c83a 	sub	r2,r2,r4
   42b44:	d8801f15 	stw	r2,124(sp)
   42b48:	003fa806 	br	429ec <__gxx_personality_sj0+0x26c>
   42b4c:	d9002717 	ldw	r4,156(sp)
   42b50:	20000e1e 	bne	r4,zero,42b8c <__gxx_personality_sj0+0x40c>
   42b54:	017fffc4 	movi	r5,-1
   42b58:	d9400b15 	stw	r5,44(sp)
   42b5c:	d9800017 	ldw	r6,0(sp)
   42b60:	d9401917 	ldw	r5,100(sp)
   42b64:	100f883a 	mov	r7,r2
   42b68:	d9000404 	addi	r4,sp,16
   42b6c:	004257c0 	call	4257c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
   42b70:	1080005c 	xori	r2,r2,1
   42b74:	10803fcc 	andi	r2,r2,255
   42b78:	103faf26 	beq	r2,zero,42a38 <__gxx_personality_sj0+0x2b8>
   42b7c:	003fcb06 	br	42aac <__gxx_personality_sj0+0x32c>
   42b80:	00800184 	movi	r2,6
   42b84:	d8802215 	stw	r2,136(sp)
   42b88:	003f1706 	br	427e8 <__gxx_personality_sj0+0x68>
   42b8c:	d9000717 	ldw	r4,28(sp)
   42b90:	d9400304 	addi	r5,sp,12
   42b94:	2089c83a 	sub	r4,r4,r2
   42b98:	213fffc4 	addi	r4,r4,-1
   42b9c:	00420740 	call	42074 <_Z12read_uleb128PKhPj>
   42ba0:	d8c00317 	ldw	r3,12(sp)
   42ba4:	1807003a 	cmpeq	r3,r3,zero
   42ba8:	1805883a 	mov	r2,r3
   42bac:	003ff106 	br	42b74 <__gxx_personality_sj0+0x3f4>
   42bb0:	d8001915 	stw	zero,100(sp)
   42bb4:	003f9906 	br	42a1c <__gxx_personality_sj0+0x29c>
   42bb8:	d8801803 	ldbu	r2,96(sp)
   42bbc:	1004c03a 	cmpne	r2,r2,zero
   42bc0:	103fbe26 	beq	r2,zero,42abc <__gxx_personality_sj0+0x33c>
   42bc4:	01000084 	movi	r4,2
   42bc8:	d8001b15 	stw	zero,108(sp)
   42bcc:	003f5d06 	br	42944 <__gxx_personality_sj0+0x1c4>
   42bd0:	d9402017 	ldw	r5,128(sp)
   42bd4:	d9002e17 	ldw	r4,184(sp)
   42bd8:	00bfffc4 	movi	r2,-1
   42bdc:	d9800404 	addi	r6,sp,16
   42be0:	d8800b15 	stw	r2,44(sp)
   42be4:	00423f80 	call	423f8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   42be8:	d9000903 	ldbu	r4,36(sp)
   42bec:	d9402e17 	ldw	r5,184(sp)
   42bf0:	00423680 	call	42368 <_Z21base_of_encoded_valuehP15_Unwind_Context>
   42bf4:	d8c01a17 	ldw	r3,104(sp)
   42bf8:	18800915 	stw	r2,36(r3)
   42bfc:	003f2106 	br	42884 <__gxx_personality_sj0+0x104>
   42c00:	d9002d17 	ldw	r4,180(sp)
   42c04:	00bfffc4 	movi	r2,-1
   42c08:	d8800b15 	stw	r2,44(sp)
   42c0c:	0042e7c0 	call	42e7c <__cxa_call_terminate>
   42c10:	00bfffc4 	movi	r2,-1
   42c14:	d8800b15 	stw	r2,44(sp)
   42c18:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   42c1c:	d9000b17 	ldw	r4,44(sp)
   42c20:	d9400c17 	ldw	r5,48(sp)
   42c24:	00800044 	movi	r2,1
   42c28:	d9002915 	stw	r4,164(sp)
   42c2c:	d9402815 	stw	r5,160(sp)
   42c30:	20800626 	beq	r4,r2,42c4c <__gxx_personality_sj0+0x4cc>
   42c34:	d8000b15 	stw	zero,44(sp)
   42c38:	00432980 	call	43298 <__cxa_end_catch>
   42c3c:	d9002817 	ldw	r4,160(sp)
   42c40:	00bfffc4 	movi	r2,-1
   42c44:	d8800b15 	stw	r2,44(sp)
   42c48:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   42c4c:	d9002817 	ldw	r4,160(sp)
   42c50:	004333c0 	call	4333c <__cxa_begin_catch>
   42c54:	d8c02917 	ldw	r3,164(sp)
   42c58:	d8c00b15 	stw	r3,44(sp)
   42c5c:	0042d3c0 	call	42d3c <_ZSt9terminatev>

00042c60 <__cxa_get_globals_fast>:
   42c60:	d0a15d04 	addi	r2,gp,-31372
   42c64:	f800283a 	ret

00042c68 <__cxa_get_globals>:
   42c68:	d0a15d04 	addi	r2,gp,-31372
   42c6c:	f800283a 	ret

00042c70 <_ZSt13set_terminatePFvvE>:
   42c70:	00c00134 	movhi	r3,4
   42c74:	18d8b304 	addi	r3,r3,25292
   42c78:	18800017 	ldw	r2,0(r3)
   42c7c:	19000015 	stw	r4,0(r3)
   42c80:	f800283a 	ret

00042c84 <_ZSt14set_unexpectedPFvvE>:
   42c84:	00c00134 	movhi	r3,4
   42c88:	18d8b404 	addi	r3,r3,25296
   42c8c:	18800017 	ldw	r2,0(r3)
   42c90:	19000015 	stw	r4,0(r3)
   42c94:	f800283a 	ret

00042c98 <_ZN10__cxxabiv111__terminateEPFvvE>:
   42c98:	deffed04 	addi	sp,sp,-76
   42c9c:	00800134 	movhi	r2,4
   42ca0:	1089e004 	addi	r2,r2,10112
   42ca4:	d8800615 	stw	r2,24(sp)
   42ca8:	00c00134 	movhi	r3,4
   42cac:	18d6d904 	addi	r3,r3,23396
   42cb0:	00800134 	movhi	r2,4
   42cb4:	108b3d04 	addi	r2,r2,11508
   42cb8:	d9000d15 	stw	r4,52(sp)
   42cbc:	d809883a 	mov	r4,sp
   42cc0:	d8800915 	stw	r2,36(sp)
   42cc4:	dfc01215 	stw	ra,72(sp)
   42cc8:	df001115 	stw	fp,68(sp)
   42ccc:	ddc01015 	stw	r23,64(sp)
   42cd0:	d8c00715 	stw	r3,28(sp)
   42cd4:	dec00815 	stw	sp,32(sp)
   42cd8:	dec00a15 	stw	sp,40(sp)
   42cdc:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   42ce0:	00800084 	movi	r2,2
   42ce4:	d8800115 	stw	r2,4(sp)
   42ce8:	d8800d17 	ldw	r2,52(sp)
   42cec:	103ee83a 	callr	r2
   42cf0:	0043efc0 	call	43efc <abort>
   42cf4:	d8800117 	ldw	r2,4(sp)
   42cf8:	d8c00217 	ldw	r3,8(sp)
   42cfc:	d8800f15 	stw	r2,60(sp)
   42d00:	d8c00e15 	stw	r3,56(sp)
   42d04:	d8c00f17 	ldw	r3,60(sp)
   42d08:	00800044 	movi	r2,1
   42d0c:	18800626 	beq	r3,r2,42d28 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
   42d10:	d8000115 	stw	zero,4(sp)
   42d14:	00432980 	call	43298 <__cxa_end_catch>
   42d18:	d9000e17 	ldw	r4,56(sp)
   42d1c:	00bfffc4 	movi	r2,-1
   42d20:	d8800115 	stw	r2,4(sp)
   42d24:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   42d28:	d9000e17 	ldw	r4,56(sp)
   42d2c:	004333c0 	call	4333c <__cxa_begin_catch>
   42d30:	d8c00f17 	ldw	r3,60(sp)
   42d34:	d8c00115 	stw	r3,4(sp)
   42d38:	0043efc0 	call	43efc <abort>

00042d3c <_ZSt9terminatev>:
   42d3c:	00800134 	movhi	r2,4
   42d40:	1098b304 	addi	r2,r2,25292
   42d44:	11000017 	ldw	r4,0(r2)
   42d48:	deffff04 	addi	sp,sp,-4
   42d4c:	dfc00015 	stw	ra,0(sp)
   42d50:	0042c980 	call	42c98 <_ZN10__cxxabiv111__terminateEPFvvE>

00042d54 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   42d54:	deffff04 	addi	sp,sp,-4
   42d58:	dfc00015 	stw	ra,0(sp)
   42d5c:	203ee83a 	callr	r4
   42d60:	0042d3c0 	call	42d3c <_ZSt9terminatev>

00042d64 <_ZSt10unexpectedv>:
   42d64:	00800134 	movhi	r2,4
   42d68:	1098b404 	addi	r2,r2,25296
   42d6c:	11000017 	ldw	r4,0(r2)
   42d70:	deffff04 	addi	sp,sp,-4
   42d74:	dfc00015 	stw	ra,0(sp)
   42d78:	0042d540 	call	42d54 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00042d7c <_Znwm>:
   42d7c:	deffee04 	addi	sp,sp,-72
   42d80:	00800134 	movhi	r2,4
   42d84:	1089e004 	addi	r2,r2,10112
   42d88:	d8800615 	stw	r2,24(sp)
   42d8c:	00c00134 	movhi	r3,4
   42d90:	18d6dd04 	addi	r3,r3,23412
   42d94:	00800134 	movhi	r2,4
   42d98:	108b9604 	addi	r2,r2,11864
   42d9c:	d9000e15 	stw	r4,56(sp)
   42da0:	d809883a 	mov	r4,sp
   42da4:	d8800915 	stw	r2,36(sp)
   42da8:	dfc01115 	stw	ra,68(sp)
   42dac:	df001015 	stw	fp,64(sp)
   42db0:	ddc00f15 	stw	r23,60(sp)
   42db4:	d8c00715 	stw	r3,28(sp)
   42db8:	dec00815 	stw	sp,32(sp)
   42dbc:	dec00a15 	stw	sp,40(sp)
   42dc0:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   42dc4:	d8800e17 	ldw	r2,56(sp)
   42dc8:	10000a1e 	bne	r2,zero,42df4 <_Znwm+0x78>
   42dcc:	00800044 	movi	r2,1
   42dd0:	d8800e15 	stw	r2,56(sp)
   42dd4:	00000706 	br	42df4 <_Znwm+0x78>
   42dd8:	00800134 	movhi	r2,4
   42ddc:	109a0f04 	addi	r2,r2,26684
   42de0:	10c00017 	ldw	r3,0(r2)
   42de4:	18000f26 	beq	r3,zero,42e24 <_Znwm+0xa8>
   42de8:	00800044 	movi	r2,1
   42dec:	d8800115 	stw	r2,4(sp)
   42df0:	183ee83a 	callr	r3
   42df4:	d9000e17 	ldw	r4,56(sp)
   42df8:	0043f280 	call	43f28 <malloc>
   42dfc:	d8800d15 	stw	r2,52(sp)
   42e00:	103ff526 	beq	r2,zero,42dd8 <_Znwm+0x5c>
   42e04:	d809883a 	mov	r4,sp
   42e08:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   42e0c:	d8800d17 	ldw	r2,52(sp)
   42e10:	dfc01117 	ldw	ra,68(sp)
   42e14:	df001017 	ldw	fp,64(sp)
   42e18:	ddc00f17 	ldw	r23,60(sp)
   42e1c:	dec01204 	addi	sp,sp,72
   42e20:	f800283a 	ret
   42e24:	01000104 	movi	r4,4
   42e28:	0042ff40 	call	42ff4 <__cxa_allocate_exception>
   42e2c:	1009883a 	mov	r4,r2
   42e30:	00800134 	movhi	r2,4
   42e34:	10973104 	addi	r2,r2,23748
   42e38:	20800015 	stw	r2,0(r4)
   42e3c:	00c00044 	movi	r3,1
   42e40:	d8c00115 	stw	r3,4(sp)
   42e44:	01400134 	movhi	r5,4
   42e48:	29573804 	addi	r5,r5,23776
   42e4c:	01800134 	movhi	r6,4
   42e50:	318be504 	addi	r6,r6,12180
   42e54:	004319c0 	call	4319c <__cxa_throw>
   42e58:	d8800317 	ldw	r2,12(sp)
   42e5c:	00ffffc4 	movi	r3,-1
   42e60:	d9000217 	ldw	r4,8(sp)
   42e64:	10c00226 	beq	r2,r3,42e70 <_Znwm+0xf4>
   42e68:	d8c00115 	stw	r3,4(sp)
   42e6c:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   42e70:	00bfffc4 	movi	r2,-1
   42e74:	d8800115 	stw	r2,4(sp)
   42e78:	00426000 	call	42600 <__cxa_call_unexpected>

00042e7c <__cxa_call_terminate>:
   42e7c:	defffe04 	addi	sp,sp,-8
   42e80:	dc000015 	stw	r16,0(sp)
   42e84:	dfc00115 	stw	ra,4(sp)
   42e88:	2021883a 	mov	r16,r4
   42e8c:	20000626 	beq	r4,zero,42ea8 <__cxa_call_terminate+0x2c>
   42e90:	004333c0 	call	4333c <__cxa_begin_catch>
   42e94:	80c00017 	ldw	r3,0(r16)
   42e98:	0090caf4 	movhi	r2,17195
   42e9c:	108ac004 	addi	r2,r2,11008
   42ea0:	81000117 	ldw	r4,4(r16)
   42ea4:	18800126 	beq	r3,r2,42eac <__cxa_call_terminate+0x30>
   42ea8:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   42eac:	0091d3b4 	movhi	r2,18254
   42eb0:	109550c4 	addi	r2,r2,21827
   42eb4:	20bffc1e 	bne	r4,r2,42ea8 <__cxa_call_terminate+0x2c>
   42eb8:	813ff817 	ldw	r4,-32(r16)
   42ebc:	0042c980 	call	42c98 <_ZN10__cxxabiv111__terminateEPFvvE>

00042ec0 <_ZNKSt9exception4whatEv>:
   42ec0:	20800017 	ldw	r2,0(r4)
   42ec4:	10ffff17 	ldw	r3,-4(r2)
   42ec8:	18800117 	ldw	r2,4(r3)
   42ecc:	f800283a 	ret

00042ed0 <_ZNSt9exceptionD0Ev>:
   42ed0:	00800134 	movhi	r2,4
   42ed4:	10972004 	addi	r2,r2,23680
   42ed8:	20800015 	stw	r2,0(r4)
   42edc:	00420681 	jmpi	42068 <_ZdlPv>

00042ee0 <_ZNSt9exceptionD1Ev>:
   42ee0:	00800134 	movhi	r2,4
   42ee4:	10972004 	addi	r2,r2,23680
   42ee8:	20800015 	stw	r2,0(r4)
   42eec:	f800283a 	ret

00042ef0 <_ZNSt9exceptionD2Ev>:
   42ef0:	00800134 	movhi	r2,4
   42ef4:	10972004 	addi	r2,r2,23680
   42ef8:	20800015 	stw	r2,0(r4)
   42efc:	f800283a 	ret

00042f00 <_ZNSt13bad_exceptionD0Ev>:
   42f00:	defffe04 	addi	sp,sp,-8
   42f04:	00800134 	movhi	r2,4
   42f08:	10971b04 	addi	r2,r2,23660
   42f0c:	dc400015 	stw	r17,0(sp)
   42f10:	20800015 	stw	r2,0(r4)
   42f14:	2023883a 	mov	r17,r4
   42f18:	dfc00115 	stw	ra,4(sp)
   42f1c:	0042ef00 	call	42ef0 <_ZNSt9exceptionD2Ev>
   42f20:	8809883a 	mov	r4,r17
   42f24:	dfc00117 	ldw	ra,4(sp)
   42f28:	dc400017 	ldw	r17,0(sp)
   42f2c:	dec00204 	addi	sp,sp,8
   42f30:	00420681 	jmpi	42068 <_ZdlPv>

00042f34 <_ZNSt13bad_exceptionD1Ev>:
   42f34:	00800134 	movhi	r2,4
   42f38:	10971b04 	addi	r2,r2,23660
   42f3c:	20800015 	stw	r2,0(r4)
   42f40:	0042ef01 	jmpi	42ef0 <_ZNSt9exceptionD2Ev>

00042f44 <_ZNSt13bad_exceptionD2Ev>:
   42f44:	00800134 	movhi	r2,4
   42f48:	10971b04 	addi	r2,r2,23660
   42f4c:	20800015 	stw	r2,0(r4)
   42f50:	0042ef01 	jmpi	42ef0 <_ZNSt9exceptionD2Ev>

00042f54 <_ZSt15set_new_handlerPFvvE>:
   42f54:	d0a15f17 	ldw	r2,-31364(gp)
   42f58:	d1215f15 	stw	r4,-31364(gp)
   42f5c:	f800283a 	ret

00042f60 <_ZNSt9bad_allocD0Ev>:
   42f60:	defffe04 	addi	sp,sp,-8
   42f64:	00800134 	movhi	r2,4
   42f68:	10973104 	addi	r2,r2,23748
   42f6c:	dc400015 	stw	r17,0(sp)
   42f70:	20800015 	stw	r2,0(r4)
   42f74:	2023883a 	mov	r17,r4
   42f78:	dfc00115 	stw	ra,4(sp)
   42f7c:	0042ef00 	call	42ef0 <_ZNSt9exceptionD2Ev>
   42f80:	8809883a 	mov	r4,r17
   42f84:	dfc00117 	ldw	ra,4(sp)
   42f88:	dc400017 	ldw	r17,0(sp)
   42f8c:	dec00204 	addi	sp,sp,8
   42f90:	00420681 	jmpi	42068 <_ZdlPv>

00042f94 <_ZNSt9bad_allocD1Ev>:
   42f94:	00800134 	movhi	r2,4
   42f98:	10973104 	addi	r2,r2,23748
   42f9c:	20800015 	stw	r2,0(r4)
   42fa0:	0042ef01 	jmpi	42ef0 <_ZNSt9exceptionD2Ev>

00042fa4 <_ZNSt9bad_allocD2Ev>:
   42fa4:	00800134 	movhi	r2,4
   42fa8:	10973104 	addi	r2,r2,23748
   42fac:	20800015 	stw	r2,0(r4)
   42fb0:	0042ef01 	jmpi	42ef0 <_ZNSt9exceptionD2Ev>

00042fb4 <__cxa_free_exception>:
   42fb4:	2007883a 	mov	r3,r4
   42fb8:	00800134 	movhi	r2,4
   42fbc:	109a2004 	addi	r2,r2,26752
   42fc0:	213ff004 	addi	r4,r4,-64
   42fc4:	11420004 	addi	r5,r2,2048
   42fc8:	18800336 	bltu	r3,r2,42fd8 <__cxa_free_exception+0x24>
   42fcc:	1885c83a 	sub	r2,r3,r2
   42fd0:	1004d27a 	srli	r2,r2,9
   42fd4:	19400136 	bltu	r3,r5,42fdc <__cxa_free_exception+0x28>
   42fd8:	0043f141 	jmpi	43f14 <free>
   42fdc:	00ffff84 	movi	r3,-2
   42fe0:	1886183a 	rol	r3,r3,r2
   42fe4:	d0a16017 	ldw	r2,-31360(gp)
   42fe8:	10c4703a 	and	r2,r2,r3
   42fec:	d0a16015 	stw	r2,-31360(gp)
   42ff0:	f800283a 	ret

00042ff4 <__cxa_allocate_exception>:
   42ff4:	deffed04 	addi	sp,sp,-76
   42ff8:	00800134 	movhi	r2,4
   42ffc:	1089e004 	addi	r2,r2,10112
   43000:	21001004 	addi	r4,r4,64
   43004:	00c00134 	movhi	r3,4
   43008:	18d6e204 	addi	r3,r3,23432
   4300c:	d8800615 	stw	r2,24(sp)
   43010:	d9000d15 	stw	r4,52(sp)
   43014:	00800134 	movhi	r2,4
   43018:	108c4104 	addi	r2,r2,12548
   4301c:	d809883a 	mov	r4,sp
   43020:	dfc01215 	stw	ra,72(sp)
   43024:	d8c00715 	stw	r3,28(sp)
   43028:	d8800915 	stw	r2,36(sp)
   4302c:	df001115 	stw	fp,68(sp)
   43030:	ddc01015 	stw	r23,64(sp)
   43034:	dec00815 	stw	sp,32(sp)
   43038:	dec00a15 	stw	sp,40(sp)
   4303c:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   43040:	d9000d17 	ldw	r4,52(sp)
   43044:	0043f280 	call	43f28 <malloc>
   43048:	d8800e15 	stw	r2,56(sp)
   4304c:	1000171e 	bne	r2,zero,430ac <__cxa_allocate_exception+0xb8>
   43050:	d8c00d17 	ldw	r3,52(sp)
   43054:	00808004 	movi	r2,512
   43058:	d1e16017 	ldw	r7,-31360(gp)
   4305c:	10c02636 	bltu	r2,r3,430f8 <__cxa_allocate_exception+0x104>
   43060:	3807883a 	mov	r3,r7
   43064:	01400044 	movi	r5,1
   43068:	1944703a 	and	r2,r3,r5
   4306c:	0009883a 	mov	r4,zero
   43070:	01800104 	movi	r6,4
   43074:	10000526 	beq	r2,zero,4308c <__cxa_allocate_exception+0x98>
   43078:	2149883a 	add	r4,r4,r5
   4307c:	21801e26 	beq	r4,r6,430f8 <__cxa_allocate_exception+0x104>
   43080:	1806d07a 	srli	r3,r3,1
   43084:	1944703a 	and	r2,r3,r5
   43088:	103ffb1e 	bne	r2,zero,43078 <__cxa_allocate_exception+0x84>
   4308c:	2904983a 	sll	r2,r5,r4
   43090:	2008927a 	slli	r4,r4,9
   43094:	00c00134 	movhi	r3,4
   43098:	18da2004 	addi	r3,r3,26752
   4309c:	3884b03a 	or	r2,r7,r2
   430a0:	20c9883a 	add	r4,r4,r3
   430a4:	d9000e15 	stw	r4,56(sp)
   430a8:	d0a16015 	stw	r2,-31360(gp)
   430ac:	0042c680 	call	42c68 <__cxa_get_globals>
   430b0:	10c00117 	ldw	r3,4(r2)
   430b4:	d9000e17 	ldw	r4,56(sp)
   430b8:	000b883a 	mov	r5,zero
   430bc:	18c00044 	addi	r3,r3,1
   430c0:	10c00115 	stw	r3,4(r2)
   430c4:	01801004 	movi	r6,64
   430c8:	004467c0 	call	4467c <memset>
   430cc:	d8800e17 	ldw	r2,56(sp)
   430d0:	d809883a 	mov	r4,sp
   430d4:	10801004 	addi	r2,r2,64
   430d8:	d8800f15 	stw	r2,60(sp)
   430dc:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   430e0:	d8800f17 	ldw	r2,60(sp)
   430e4:	dfc01217 	ldw	ra,72(sp)
   430e8:	df001117 	ldw	fp,68(sp)
   430ec:	ddc01017 	ldw	r23,64(sp)
   430f0:	dec01304 	addi	sp,sp,76
   430f4:	f800283a 	ret
   430f8:	00800044 	movi	r2,1
   430fc:	d8800115 	stw	r2,4(sp)
   43100:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   43104:	d8800317 	ldw	r2,12(sp)
   43108:	00ffffc4 	movi	r3,-1
   4310c:	d9000217 	ldw	r4,8(sp)
   43110:	10c00226 	beq	r2,r3,4311c <__cxa_allocate_exception+0x128>
   43114:	d8c00115 	stw	r3,4(sp)
   43118:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   4311c:	00bfffc4 	movi	r2,-1
   43120:	d8800115 	stw	r2,4(sp)
   43124:	00426000 	call	42600 <__cxa_call_unexpected>

00043128 <__cxa_rethrow>:
   43128:	defffe04 	addi	sp,sp,-8
   4312c:	dc400015 	stw	r17,0(sp)
   43130:	dfc00115 	stw	ra,4(sp)
   43134:	0042c680 	call	42c68 <__cxa_get_globals>
   43138:	100b883a 	mov	r5,r2
   4313c:	10800117 	ldw	r2,4(r2)
   43140:	2c400017 	ldw	r17,0(r5)
   43144:	10800044 	addi	r2,r2,1
   43148:	28800115 	stw	r2,4(r5)
   4314c:	88000b26 	beq	r17,zero,4317c <__cxa_rethrow+0x54>
   43150:	88c00b17 	ldw	r3,44(r17)
   43154:	0090caf4 	movhi	r2,17195
   43158:	108ac004 	addi	r2,r2,11008
   4315c:	89000c17 	ldw	r4,48(r17)
   43160:	18800726 	beq	r3,r2,43180 <__cxa_rethrow+0x58>
   43164:	28000015 	stw	zero,0(r5)
   43168:	8c400b04 	addi	r17,r17,44
   4316c:	8809883a 	mov	r4,r17
   43170:	0043ea40 	call	43ea4 <_Unwind_SjLj_Resume_or_Rethrow>
   43174:	8809883a 	mov	r4,r17
   43178:	004333c0 	call	4333c <__cxa_begin_catch>
   4317c:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   43180:	0091d3b4 	movhi	r2,18254
   43184:	109550c4 	addi	r2,r2,21827
   43188:	20bff61e 	bne	r4,r2,43164 <__cxa_rethrow+0x3c>
   4318c:	88800517 	ldw	r2,20(r17)
   43190:	0085c83a 	sub	r2,zero,r2
   43194:	88800515 	stw	r2,20(r17)
   43198:	003ff306 	br	43168 <__cxa_rethrow+0x40>

0004319c <__cxa_throw>:
   4319c:	00800134 	movhi	r2,4
   431a0:	1098b404 	addi	r2,r2,25296
   431a4:	00c00134 	movhi	r3,4
   431a8:	18d8b304 	addi	r3,r3,25292
   431ac:	12000017 	ldw	r8,0(r2)
   431b0:	19c00017 	ldw	r7,0(r3)
   431b4:	defffe04 	addi	sp,sp,-8
   431b8:	213ff004 	addi	r4,r4,-64
   431bc:	dfc00115 	stw	ra,4(sp)
   431c0:	dc400015 	stw	r17,0(sp)
   431c4:	0090caf4 	movhi	r2,17195
   431c8:	108ac004 	addi	r2,r2,11008
   431cc:	20800b15 	stw	r2,44(r4)
   431d0:	00d1d3b4 	movhi	r3,18254
   431d4:	18d550c4 	addi	r3,r3,21827
   431d8:	24400b04 	addi	r17,r4,44
   431dc:	00800134 	movhi	r2,4
   431e0:	108c8404 	addi	r2,r2,12816
   431e4:	21400015 	stw	r5,0(r4)
   431e8:	21800115 	stw	r6,4(r4)
   431ec:	22000215 	stw	r8,8(r4)
   431f0:	21c00315 	stw	r7,12(r4)
   431f4:	20c00c15 	stw	r3,48(r4)
   431f8:	20800d15 	stw	r2,52(r4)
   431fc:	8809883a 	mov	r4,r17
   43200:	0043cdc0 	call	43cdc <_Unwind_SjLj_RaiseException>
   43204:	8809883a 	mov	r4,r17
   43208:	004333c0 	call	4333c <__cxa_begin_catch>
   4320c:	0042d3c0 	call	42d3c <_ZSt9terminatev>

00043210 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   43210:	defffe04 	addi	sp,sp,-8
   43214:	00800044 	movi	r2,1
   43218:	dfc00115 	stw	ra,4(sp)
   4321c:	dc000015 	stw	r16,0(sp)
   43220:	28fff504 	addi	r3,r5,-44
   43224:	11001036 	bltu	r2,r4,43268 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
   43228:	18800117 	ldw	r2,4(r3)
   4322c:	10000826 	beq	r2,zero,43250 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
   43230:	2c000504 	addi	r16,r5,20
   43234:	8009883a 	mov	r4,r16
   43238:	103ee83a 	callr	r2
   4323c:	8009883a 	mov	r4,r16
   43240:	dfc00117 	ldw	ra,4(sp)
   43244:	dc000017 	ldw	r16,0(sp)
   43248:	dec00204 	addi	sp,sp,8
   4324c:	0042fb41 	jmpi	42fb4 <__cxa_free_exception>
   43250:	2c000504 	addi	r16,r5,20
   43254:	8009883a 	mov	r4,r16
   43258:	dfc00117 	ldw	ra,4(sp)
   4325c:	dc000017 	ldw	r16,0(sp)
   43260:	dec00204 	addi	sp,sp,8
   43264:	0042fb41 	jmpi	42fb4 <__cxa_free_exception>
   43268:	19000317 	ldw	r4,12(r3)
   4326c:	0042c980 	call	42c98 <_ZN10__cxxabiv111__terminateEPFvvE>

00043270 <__cxa_get_exception_ptr>:
   43270:	20bfff17 	ldw	r2,-4(r4)
   43274:	f800283a 	ret

00043278 <_ZSt18uncaught_exceptionv>:
   43278:	deffff04 	addi	sp,sp,-4
   4327c:	dfc00015 	stw	ra,0(sp)
   43280:	0042c680 	call	42c68 <__cxa_get_globals>
   43284:	10800117 	ldw	r2,4(r2)
   43288:	1004c03a 	cmpne	r2,r2,zero
   4328c:	dfc00017 	ldw	ra,0(sp)
   43290:	dec00104 	addi	sp,sp,4
   43294:	f800283a 	ret

00043298 <__cxa_end_catch>:
   43298:	deffff04 	addi	sp,sp,-4
   4329c:	dfc00015 	stw	ra,0(sp)
   432a0:	0042c600 	call	42c60 <__cxa_get_globals_fast>
   432a4:	11000017 	ldw	r4,0(r2)
   432a8:	1007883a 	mov	r3,r2
   432ac:	20001326 	beq	r4,zero,432fc <__cxa_end_catch+0x64>
   432b0:	21400b17 	ldw	r5,44(r4)
   432b4:	0090caf4 	movhi	r2,17195
   432b8:	108ac004 	addi	r2,r2,11008
   432bc:	21800c17 	ldw	r6,48(r4)
   432c0:	28800526 	beq	r5,r2,432d8 <__cxa_end_catch+0x40>
   432c4:	21000b04 	addi	r4,r4,44
   432c8:	18000015 	stw	zero,0(r3)
   432cc:	dfc00017 	ldw	ra,0(sp)
   432d0:	dec00104 	addi	sp,sp,4
   432d4:	0043b741 	jmpi	43b74 <_Unwind_DeleteException>
   432d8:	0091d3b4 	movhi	r2,18254
   432dc:	109550c4 	addi	r2,r2,21827
   432e0:	30bff81e 	bne	r6,r2,432c4 <__cxa_end_catch+0x2c>
   432e4:	20800517 	ldw	r2,20(r4)
   432e8:	10000e16 	blt	r2,zero,43324 <__cxa_end_catch+0x8c>
   432ec:	117fffc4 	addi	r5,r2,-1
   432f0:	28000526 	beq	r5,zero,43308 <__cxa_end_catch+0x70>
   432f4:	28000a16 	blt	r5,zero,43320 <__cxa_end_catch+0x88>
   432f8:	21400515 	stw	r5,20(r4)
   432fc:	dfc00017 	ldw	ra,0(sp)
   43300:	dec00104 	addi	sp,sp,4
   43304:	f800283a 	ret
   43308:	20800417 	ldw	r2,16(r4)
   4330c:	21000b04 	addi	r4,r4,44
   43310:	18800015 	stw	r2,0(r3)
   43314:	dfc00017 	ldw	ra,0(sp)
   43318:	dec00104 	addi	sp,sp,4
   4331c:	0043b741 	jmpi	43b74 <_Unwind_DeleteException>
   43320:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   43324:	11400044 	addi	r5,r2,1
   43328:	283ff31e 	bne	r5,zero,432f8 <__cxa_end_catch+0x60>
   4332c:	20800417 	ldw	r2,16(r4)
   43330:	21400515 	stw	r5,20(r4)
   43334:	18800015 	stw	r2,0(r3)
   43338:	003ff006 	br	432fc <__cxa_end_catch+0x64>

0004333c <__cxa_begin_catch>:
   4333c:	deffee04 	addi	sp,sp,-72
   43340:	00800134 	movhi	r2,4
   43344:	1089e004 	addi	r2,r2,10112
   43348:	00c00134 	movhi	r3,4
   4334c:	18d6e604 	addi	r3,r3,23448
   43350:	d8800615 	stw	r2,24(sp)
   43354:	d9000e15 	stw	r4,56(sp)
   43358:	00800134 	movhi	r2,4
   4335c:	108d0c04 	addi	r2,r2,13360
   43360:	d809883a 	mov	r4,sp
   43364:	d8c00715 	stw	r3,28(sp)
   43368:	dfc01115 	stw	ra,68(sp)
   4336c:	d8800915 	stw	r2,36(sp)
   43370:	df001015 	stw	fp,64(sp)
   43374:	ddc00f15 	stw	r23,60(sp)
   43378:	dec00815 	stw	sp,32(sp)
   4337c:	dec00a15 	stw	sp,40(sp)
   43380:	00439b40 	call	439b4 <_Unwind_SjLj_Register>
   43384:	0042c680 	call	42c68 <__cxa_get_globals>
   43388:	100d883a 	mov	r6,r2
   4338c:	d8800e17 	ldw	r2,56(sp)
   43390:	31c00017 	ldw	r7,0(r6)
   43394:	117ff504 	addi	r5,r2,-44
   43398:	28c00b17 	ldw	r3,44(r5)
   4339c:	0090caf4 	movhi	r2,17195
   433a0:	108ac004 	addi	r2,r2,11008
   433a4:	29000c17 	ldw	r4,48(r5)
   433a8:	18800b26 	beq	r3,r2,433d8 <__cxa_begin_catch+0x9c>
   433ac:	38001d1e 	bne	r7,zero,43424 <__cxa_begin_catch+0xe8>
   433b0:	d8000d15 	stw	zero,52(sp)
   433b4:	31400015 	stw	r5,0(r6)
   433b8:	d809883a 	mov	r4,sp
   433bc:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   433c0:	d8800d17 	ldw	r2,52(sp)
   433c4:	dfc01117 	ldw	ra,68(sp)
   433c8:	df001017 	ldw	fp,64(sp)
   433cc:	ddc00f17 	ldw	r23,60(sp)
   433d0:	dec01204 	addi	sp,sp,72
   433d4:	f800283a 	ret
   433d8:	0091d3b4 	movhi	r2,18254
   433dc:	109550c4 	addi	r2,r2,21827
   433e0:	20bff21e 	bne	r4,r2,433ac <__cxa_begin_catch+0x70>
   433e4:	28c00517 	ldw	r3,20(r5)
   433e8:	18000b16 	blt	r3,zero,43418 <__cxa_begin_catch+0xdc>
   433ec:	18800044 	addi	r2,r3,1
   433f0:	28800515 	stw	r2,20(r5)
   433f4:	30800117 	ldw	r2,4(r6)
   433f8:	10bfffc4 	addi	r2,r2,-1
   433fc:	30800115 	stw	r2,4(r6)
   43400:	39400226 	beq	r7,r5,4340c <__cxa_begin_catch+0xd0>
   43404:	29c00415 	stw	r7,16(r5)
   43408:	31400015 	stw	r5,0(r6)
   4340c:	29400a17 	ldw	r5,40(r5)
   43410:	d9400d15 	stw	r5,52(sp)
   43414:	003fe806 	br	433b8 <__cxa_begin_catch+0x7c>
   43418:	00800044 	movi	r2,1
   4341c:	10c5c83a 	sub	r2,r2,r3
   43420:	003ff306 	br	433f0 <__cxa_begin_catch+0xb4>
   43424:	00800044 	movi	r2,1
   43428:	d8800115 	stw	r2,4(sp)
   4342c:	0042d3c0 	call	42d3c <_ZSt9terminatev>
   43430:	d8800317 	ldw	r2,12(sp)
   43434:	00ffffc4 	movi	r3,-1
   43438:	d9000217 	ldw	r4,8(sp)
   4343c:	10c00226 	beq	r2,r3,43448 <__cxa_begin_catch+0x10c>
   43440:	d8c00115 	stw	r3,4(sp)
   43444:	0043c800 	call	43c80 <_Unwind_SjLj_Resume>
   43448:	00bfffc4 	movi	r2,-1
   4344c:	d8800115 	stw	r2,4(sp)
   43450:	00426000 	call	42600 <__cxa_call_unexpected>

00043454 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   43454:	20c00017 	ldw	r3,0(r4)
   43458:	defffa04 	addi	sp,sp,-24
   4345c:	dc000415 	stw	r16,16(sp)
   43460:	1a000617 	ldw	r8,24(r3)
   43464:	3021883a 	mov	r16,r6
   43468:	31800017 	ldw	r6,0(r6)
   4346c:	00800404 	movi	r2,16
   43470:	dfc00515 	stw	ra,20(sp)
   43474:	d8800215 	stw	r2,8(sp)
   43478:	d8000015 	stw	zero,0(sp)
   4347c:	d8000115 	stw	zero,4(sp)
   43480:	d8000315 	stw	zero,12(sp)
   43484:	d80f883a 	mov	r7,sp
   43488:	403ee83a 	callr	r8
   4348c:	d8800117 	ldw	r2,4(sp)
   43490:	00c00184 	movi	r3,6
   43494:	0009883a 	mov	r4,zero
   43498:	1080018c 	andi	r2,r2,6
   4349c:	10c0031e 	bne	r2,r3,434ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
   434a0:	d8800017 	ldw	r2,0(sp)
   434a4:	01000044 	movi	r4,1
   434a8:	80800015 	stw	r2,0(r16)
   434ac:	2005883a 	mov	r2,r4
   434b0:	dfc00517 	ldw	ra,20(sp)
   434b4:	dc000417 	ldw	r16,16(sp)
   434b8:	dec00604 	addi	sp,sp,24
   434bc:	f800283a 	ret

000434c0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
   434c0:	d8800017 	ldw	r2,0(sp)
   434c4:	00c00184 	movi	r3,6
   434c8:	1180021e 	bne	r2,r6,434d4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
   434cc:	1805883a 	mov	r2,r3
   434d0:	f800283a 	ret
   434d4:	00c00044 	movi	r3,1
   434d8:	1805883a 	mov	r2,r3
   434dc:	f800283a 	ret

000434e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   434e0:	defffe04 	addi	sp,sp,-8
   434e4:	00800134 	movhi	r2,4
   434e8:	10973d04 	addi	r2,r2,23796
   434ec:	dc400015 	stw	r17,0(sp)
   434f0:	20800015 	stw	r2,0(r4)
   434f4:	2023883a 	mov	r17,r4
   434f8:	dfc00115 	stw	ra,4(sp)
   434fc:	00438200 	call	43820 <_ZNSt9type_infoD2Ev>
   43500:	8809883a 	mov	r4,r17
   43504:	dfc00117 	ldw	ra,4(sp)
   43508:	dc400017 	ldw	r17,0(sp)
   4350c:	dec00204 	addi	sp,sp,8
   43510:	00420681 	jmpi	42068 <_ZdlPv>

00043514 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   43514:	00800134 	movhi	r2,4
   43518:	10973d04 	addi	r2,r2,23796
   4351c:	20800015 	stw	r2,0(r4)
   43520:	00438201 	jmpi	43820 <_ZNSt9type_infoD2Ev>

00043524 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   43524:	00800134 	movhi	r2,4
   43528:	10973d04 	addi	r2,r2,23796
   4352c:	20800015 	stw	r2,0(r4)
   43530:	00438201 	jmpi	43820 <_ZNSt9type_infoD2Ev>

00043534 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   43534:	2811883a 	mov	r8,r5
   43538:	20c00117 	ldw	r3,4(r4)
   4353c:	40800117 	ldw	r2,4(r8)
   43540:	deffff04 	addi	sp,sp,-4
   43544:	dfc00015 	stw	ra,0(sp)
   43548:	200b883a 	mov	r5,r4
   4354c:	02400044 	movi	r9,1
   43550:	18800426 	beq	r3,r2,43564 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
   43554:	008000c4 	movi	r2,3
   43558:	4009883a 	mov	r4,r8
   4355c:	0013883a 	mov	r9,zero
   43560:	11c0042e 	bgeu	r2,r7,43574 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
   43564:	4805883a 	mov	r2,r9
   43568:	dfc00017 	ldw	ra,0(sp)
   4356c:	dec00104 	addi	sp,sp,4
   43570:	f800283a 	ret
   43574:	40800017 	ldw	r2,0(r8)
   43578:	10c00517 	ldw	r3,20(r2)
   4357c:	183ee83a 	callr	r3
   43580:	12403fcc 	andi	r9,r2,255
   43584:	4805883a 	mov	r2,r9
   43588:	dfc00017 	ldw	ra,0(sp)
   4358c:	dec00104 	addi	sp,sp,4
   43590:	f800283a 	ret

00043594 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   43594:	20c00117 	ldw	r3,4(r4)
   43598:	28800117 	ldw	r2,4(r5)
   4359c:	0009883a 	mov	r4,zero
   435a0:	1880061e 	bne	r3,r2,435bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
   435a4:	00800184 	movi	r2,6
   435a8:	38800115 	stw	r2,4(r7)
   435ac:	00800204 	movi	r2,8
   435b0:	39800015 	stw	r6,0(r7)
   435b4:	38800315 	stw	r2,12(r7)
   435b8:	01000044 	movi	r4,1
   435bc:	2005883a 	mov	r2,r4
   435c0:	f800283a 	ret

000435c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   435c4:	da000017 	ldw	r8,0(sp)
   435c8:	d8800217 	ldw	r2,8(sp)
   435cc:	d9400317 	ldw	r5,12(sp)
   435d0:	40800926 	beq	r8,r2,435f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
   435d4:	21000117 	ldw	r4,4(r4)
   435d8:	38800117 	ldw	r2,4(r7)
   435dc:	2080041e 	bne	r4,r2,435f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
   435e0:	00800044 	movi	r2,1
   435e4:	28800315 	stw	r2,12(r5)
   435e8:	2a000015 	stw	r8,0(r5)
   435ec:	29800115 	stw	r6,4(r5)
   435f0:	0005883a 	mov	r2,zero
   435f4:	f800283a 	ret
   435f8:	d8800117 	ldw	r2,4(sp)
   435fc:	21000117 	ldw	r4,4(r4)
   43600:	10c00117 	ldw	r3,4(r2)
   43604:	20fff41e 	bne	r4,r3,435d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   43608:	29800215 	stw	r6,8(r5)
   4360c:	003ff806 	br	435f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

00043610 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   43610:	defffb04 	addi	sp,sp,-20
   43614:	dd400315 	stw	r21,12(sp)
   43618:	dcc00215 	stw	r19,8(sp)
   4361c:	dc400115 	stw	r17,4(sp)
   43620:	dc000015 	stw	r16,0(sp)
   43624:	2823883a 	mov	r17,r5
   43628:	3027883a 	mov	r19,r6
   4362c:	382b883a 	mov	r21,r7
   43630:	dfc00415 	stw	ra,16(sp)
   43634:	2021883a 	mov	r16,r4
   43638:	00435940 	call	43594 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   4363c:	10803fcc 	andi	r2,r2,255
   43640:	880b883a 	mov	r5,r17
   43644:	980d883a 	mov	r6,r19
   43648:	a80f883a 	mov	r7,r21
   4364c:	00c00044 	movi	r3,1
   43650:	1000051e 	bne	r2,zero,43668 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
   43654:	81000217 	ldw	r4,8(r16)
   43658:	20800017 	ldw	r2,0(r4)
   4365c:	10c00617 	ldw	r3,24(r2)
   43660:	183ee83a 	callr	r3
   43664:	10c03fcc 	andi	r3,r2,255
   43668:	1805883a 	mov	r2,r3
   4366c:	dfc00417 	ldw	ra,16(sp)
   43670:	dd400317 	ldw	r21,12(sp)
   43674:	dcc00217 	ldw	r19,8(sp)
   43678:	dc400117 	ldw	r17,4(sp)
   4367c:	dc000017 	ldw	r16,0(sp)
   43680:	dec00504 	addi	sp,sp,20
   43684:	f800283a 	ret

00043688 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   43688:	defffe04 	addi	sp,sp,-8
   4368c:	00800134 	movhi	r2,4
   43690:	10975404 	addi	r2,r2,23888
   43694:	dc400015 	stw	r17,0(sp)
   43698:	20800015 	stw	r2,0(r4)
   4369c:	2023883a 	mov	r17,r4
   436a0:	dfc00115 	stw	ra,4(sp)
   436a4:	00435240 	call	43524 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   436a8:	8809883a 	mov	r4,r17
   436ac:	dfc00117 	ldw	ra,4(sp)
   436b0:	dc400017 	ldw	r17,0(sp)
   436b4:	dec00204 	addi	sp,sp,8
   436b8:	00420681 	jmpi	42068 <_ZdlPv>

000436bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   436bc:	00800134 	movhi	r2,4
   436c0:	10975404 	addi	r2,r2,23888
   436c4:	20800015 	stw	r2,0(r4)
   436c8:	00435241 	jmpi	43524 <_ZN10__cxxabiv117__class_type_infoD2Ev>

000436cc <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   436cc:	00800134 	movhi	r2,4
   436d0:	10975404 	addi	r2,r2,23888
   436d4:	20800015 	stw	r2,0(r4)
   436d8:	00435241 	jmpi	43524 <_ZN10__cxxabiv117__class_type_infoD2Ev>

000436dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
   436dc:	da400017 	ldw	r9,0(sp)
   436e0:	2011883a 	mov	r8,r4
   436e4:	49800526 	beq	r9,r6,436fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
   436e8:	41000217 	ldw	r4,8(r8)
   436ec:	20800017 	ldw	r2,0(r4)
   436f0:	da400015 	stw	r9,0(sp)
   436f4:	10c00817 	ldw	r3,32(r2)
   436f8:	1800683a 	jmp	r3
   436fc:	39000117 	ldw	r4,4(r7)
   43700:	40c00117 	ldw	r3,4(r8)
   43704:	00800184 	movi	r2,6
   43708:	193ff71e 	bne	r3,r4,436e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
   4370c:	f800283a 	ret

00043710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   43710:	20c00117 	ldw	r3,4(r4)
   43714:	38800117 	ldw	r2,4(r7)
   43718:	defffb04 	addi	sp,sp,-20
   4371c:	dfc00415 	stw	ra,16(sp)
   43720:	da000517 	ldw	r8,20(sp)
   43724:	dac00617 	ldw	r11,24(sp)
   43728:	da400717 	ldw	r9,28(sp)
   4372c:	da800817 	ldw	r10,32(sp)
   43730:	18800c1e 	bne	r3,r2,43764 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   43734:	51800115 	stw	r6,4(r10)
   43738:	52000015 	stw	r8,0(r10)
   4373c:	28001c16 	blt	r5,zero,437b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
   43740:	4145883a 	add	r2,r8,r5
   43744:	48801e26 	beq	r9,r2,437c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
   43748:	00800044 	movi	r2,1
   4374c:	0007883a 	mov	r3,zero
   43750:	50800315 	stw	r2,12(r10)
   43754:	1805883a 	mov	r2,r3
   43758:	dfc00417 	ldw	ra,16(sp)
   4375c:	dec00504 	addi	sp,sp,20
   43760:	f800283a 	ret
   43764:	42400d26 	beq	r8,r9,4379c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
   43768:	21000217 	ldw	r4,8(r4)
   4376c:	20800017 	ldw	r2,0(r4)
   43770:	da000015 	stw	r8,0(sp)
   43774:	dac00115 	stw	r11,4(sp)
   43778:	da400215 	stw	r9,8(sp)
   4377c:	da800315 	stw	r10,12(sp)
   43780:	10c00717 	ldw	r3,28(r2)
   43784:	183ee83a 	callr	r3
   43788:	10c03fcc 	andi	r3,r2,255
   4378c:	1805883a 	mov	r2,r3
   43790:	dfc00417 	ldw	ra,16(sp)
   43794:	dec00504 	addi	sp,sp,20
   43798:	f800283a 	ret
   4379c:	58800117 	ldw	r2,4(r11)
   437a0:	18bff11e 	bne	r3,r2,43768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
   437a4:	0007883a 	mov	r3,zero
   437a8:	51800215 	stw	r6,8(r10)
   437ac:	003fe906 	br	43754 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   437b0:	00bfff84 	movi	r2,-2
   437b4:	28800426 	beq	r5,r2,437c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
   437b8:	0007883a 	mov	r3,zero
   437bc:	003fe506 	br	43754 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   437c0:	00800184 	movi	r2,6
   437c4:	003fe106 	br	4374c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
   437c8:	00800044 	movi	r2,1
   437cc:	0007883a 	mov	r3,zero
   437d0:	50800315 	stw	r2,12(r10)
   437d4:	003fdf06 	br	43754 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

000437d8 <_ZNKSt9type_info14__is_pointer_pEv>:
   437d8:	0005883a 	mov	r2,zero
   437dc:	f800283a 	ret

000437e0 <_ZNKSt9type_info15__is_function_pEv>:
   437e0:	0005883a 	mov	r2,zero
   437e4:	f800283a 	ret

000437e8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   437e8:	20c00117 	ldw	r3,4(r4)
   437ec:	28800117 	ldw	r2,4(r5)
   437f0:	1885003a 	cmpeq	r2,r3,r2
   437f4:	f800283a 	ret

000437f8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   437f8:	0005883a 	mov	r2,zero
   437fc:	f800283a 	ret

00043800 <_ZNSt9type_infoD0Ev>:
   43800:	00800134 	movhi	r2,4
   43804:	10976c04 	addi	r2,r2,23984
   43808:	20800015 	stw	r2,0(r4)
   4380c:	00420681 	jmpi	42068 <_ZdlPv>

00043810 <_ZNSt9type_infoD1Ev>:
   43810:	00800134 	movhi	r2,4
   43814:	10976c04 	addi	r2,r2,23984
   43818:	20800015 	stw	r2,0(r4)
   4381c:	f800283a 	ret

00043820 <_ZNSt9type_infoD2Ev>:
   43820:	00800134 	movhi	r2,4
   43824:	10976c04 	addi	r2,r2,23984
   43828:	20800015 	stw	r2,0(r4)
   4382c:	f800283a 	ret

00043830 <udivmodsi4>:
   43830:	29001b2e 	bgeu	r5,r4,438a0 <udivmodsi4+0x70>
   43834:	28001a16 	blt	r5,zero,438a0 <udivmodsi4+0x70>
   43838:	00800044 	movi	r2,1
   4383c:	0007883a 	mov	r3,zero
   43840:	01c007c4 	movi	r7,31
   43844:	00000306 	br	43854 <udivmodsi4+0x24>
   43848:	19c01326 	beq	r3,r7,43898 <udivmodsi4+0x68>
   4384c:	18c00044 	addi	r3,r3,1
   43850:	28000416 	blt	r5,zero,43864 <udivmodsi4+0x34>
   43854:	294b883a 	add	r5,r5,r5
   43858:	1085883a 	add	r2,r2,r2
   4385c:	293ffa36 	bltu	r5,r4,43848 <udivmodsi4+0x18>
   43860:	10000d26 	beq	r2,zero,43898 <udivmodsi4+0x68>
   43864:	0007883a 	mov	r3,zero
   43868:	21400236 	bltu	r4,r5,43874 <udivmodsi4+0x44>
   4386c:	2149c83a 	sub	r4,r4,r5
   43870:	1886b03a 	or	r3,r3,r2
   43874:	1004d07a 	srli	r2,r2,1
   43878:	280ad07a 	srli	r5,r5,1
   4387c:	103ffa1e 	bne	r2,zero,43868 <udivmodsi4+0x38>
   43880:	30000226 	beq	r6,zero,4388c <udivmodsi4+0x5c>
   43884:	2005883a 	mov	r2,r4
   43888:	f800283a 	ret
   4388c:	1809883a 	mov	r4,r3
   43890:	2005883a 	mov	r2,r4
   43894:	f800283a 	ret
   43898:	0007883a 	mov	r3,zero
   4389c:	003ff806 	br	43880 <udivmodsi4+0x50>
   438a0:	00800044 	movi	r2,1
   438a4:	0007883a 	mov	r3,zero
   438a8:	003fef06 	br	43868 <udivmodsi4+0x38>

000438ac <__divsi3>:
   438ac:	defffe04 	addi	sp,sp,-8
   438b0:	dc000015 	stw	r16,0(sp)
   438b4:	dfc00115 	stw	ra,4(sp)
   438b8:	0021883a 	mov	r16,zero
   438bc:	20000c16 	blt	r4,zero,438f0 <__divsi3+0x44>
   438c0:	000d883a 	mov	r6,zero
   438c4:	28000e16 	blt	r5,zero,43900 <__divsi3+0x54>
   438c8:	00438300 	call	43830 <udivmodsi4>
   438cc:	1007883a 	mov	r3,r2
   438d0:	8005003a 	cmpeq	r2,r16,zero
   438d4:	1000011e 	bne	r2,zero,438dc <__divsi3+0x30>
   438d8:	00c7c83a 	sub	r3,zero,r3
   438dc:	1805883a 	mov	r2,r3
   438e0:	dfc00117 	ldw	ra,4(sp)
   438e4:	dc000017 	ldw	r16,0(sp)
   438e8:	dec00204 	addi	sp,sp,8
   438ec:	f800283a 	ret
   438f0:	0109c83a 	sub	r4,zero,r4
   438f4:	04000044 	movi	r16,1
   438f8:	000d883a 	mov	r6,zero
   438fc:	283ff20e 	bge	r5,zero,438c8 <__divsi3+0x1c>
   43900:	014bc83a 	sub	r5,zero,r5
   43904:	8021003a 	cmpeq	r16,r16,zero
   43908:	003fef06 	br	438c8 <__divsi3+0x1c>

0004390c <__modsi3>:
   4390c:	deffff04 	addi	sp,sp,-4
   43910:	dfc00015 	stw	ra,0(sp)
   43914:	01800044 	movi	r6,1
   43918:	2807883a 	mov	r3,r5
   4391c:	20000416 	blt	r4,zero,43930 <__modsi3+0x24>
   43920:	28000c16 	blt	r5,zero,43954 <__modsi3+0x48>
   43924:	dfc00017 	ldw	ra,0(sp)
   43928:	dec00104 	addi	sp,sp,4
   4392c:	00438301 	jmpi	43830 <udivmodsi4>
   43930:	0109c83a 	sub	r4,zero,r4
   43934:	28000b16 	blt	r5,zero,43964 <__modsi3+0x58>
   43938:	180b883a 	mov	r5,r3
   4393c:	01800044 	movi	r6,1
   43940:	00438300 	call	43830 <udivmodsi4>
   43944:	0085c83a 	sub	r2,zero,r2
   43948:	dfc00017 	ldw	ra,0(sp)
   4394c:	dec00104 	addi	sp,sp,4
   43950:	f800283a 	ret
   43954:	014bc83a 	sub	r5,zero,r5
   43958:	dfc00017 	ldw	ra,0(sp)
   4395c:	dec00104 	addi	sp,sp,4
   43960:	00438301 	jmpi	43830 <udivmodsi4>
   43964:	0147c83a 	sub	r3,zero,r5
   43968:	003ff306 	br	43938 <__modsi3+0x2c>

0004396c <__udivsi3>:
   4396c:	000d883a 	mov	r6,zero
   43970:	00438301 	jmpi	43830 <udivmodsi4>

00043974 <__umodsi3>:
   43974:	01800044 	movi	r6,1
   43978:	00438301 	jmpi	43830 <udivmodsi4>

0004397c <__mulsi3>:
   4397c:	20000a26 	beq	r4,zero,439a8 <__mulsi3+0x2c>
   43980:	0007883a 	mov	r3,zero
   43984:	2080004c 	andi	r2,r4,1
   43988:	1005003a 	cmpeq	r2,r2,zero
   4398c:	2008d07a 	srli	r4,r4,1
   43990:	1000011e 	bne	r2,zero,43998 <__mulsi3+0x1c>
   43994:	1947883a 	add	r3,r3,r5
   43998:	294b883a 	add	r5,r5,r5
   4399c:	203ff91e 	bne	r4,zero,43984 <__mulsi3+0x8>
   439a0:	1805883a 	mov	r2,r3
   439a4:	f800283a 	ret
   439a8:	0007883a 	mov	r3,zero
   439ac:	1805883a 	mov	r2,r3
   439b0:	f800283a 	ret

000439b4 <_Unwind_SjLj_Register>:
   439b4:	d0a16117 	ldw	r2,-31356(gp)
   439b8:	20800015 	stw	r2,0(r4)
   439bc:	d1216115 	stw	r4,-31356(gp)
   439c0:	f800283a 	ret

000439c4 <_Unwind_SjLj_Unregister>:
   439c4:	20800017 	ldw	r2,0(r4)
   439c8:	d0a16115 	stw	r2,-31356(gp)
   439cc:	f800283a 	ret

000439d0 <_Unwind_GetGR>:
   439d0:	20800017 	ldw	r2,0(r4)
   439d4:	294b883a 	add	r5,r5,r5
   439d8:	294b883a 	add	r5,r5,r5
   439dc:	288b883a 	add	r5,r5,r2
   439e0:	28800217 	ldw	r2,8(r5)
   439e4:	f800283a 	ret

000439e8 <_Unwind_GetCFA>:
   439e8:	21000017 	ldw	r4,0(r4)
   439ec:	0005883a 	mov	r2,zero
   439f0:	20000126 	beq	r4,zero,439f8 <_Unwind_GetCFA+0x10>
   439f4:	20800a17 	ldw	r2,40(r4)
   439f8:	f800283a 	ret

000439fc <_Unwind_SetGR>:
   439fc:	20800017 	ldw	r2,0(r4)
   43a00:	294b883a 	add	r5,r5,r5
   43a04:	294b883a 	add	r5,r5,r5
   43a08:	288b883a 	add	r5,r5,r2
   43a0c:	29800215 	stw	r6,8(r5)
   43a10:	f800283a 	ret

00043a14 <_Unwind_GetIP>:
   43a14:	20c00017 	ldw	r3,0(r4)
   43a18:	18800117 	ldw	r2,4(r3)
   43a1c:	10800044 	addi	r2,r2,1
   43a20:	f800283a 	ret

00043a24 <_Unwind_GetIPInfo>:
   43a24:	20c00017 	ldw	r3,0(r4)
   43a28:	28000015 	stw	zero,0(r5)
   43a2c:	18800117 	ldw	r2,4(r3)
   43a30:	10800044 	addi	r2,r2,1
   43a34:	f800283a 	ret

00043a38 <_Unwind_SetIP>:
   43a38:	20800017 	ldw	r2,0(r4)
   43a3c:	297fffc4 	addi	r5,r5,-1
   43a40:	11400115 	stw	r5,4(r2)
   43a44:	f800283a 	ret

00043a48 <_Unwind_GetLanguageSpecificData>:
   43a48:	20c00017 	ldw	r3,0(r4)
   43a4c:	18800717 	ldw	r2,28(r3)
   43a50:	f800283a 	ret

00043a54 <_Unwind_GetRegionStart>:
   43a54:	0005883a 	mov	r2,zero
   43a58:	f800283a 	ret

00043a5c <_Unwind_FindEnclosingFunction>:
   43a5c:	0005883a 	mov	r2,zero
   43a60:	f800283a 	ret

00043a64 <_Unwind_GetDataRelBase>:
   43a64:	0005883a 	mov	r2,zero
   43a68:	f800283a 	ret

00043a6c <_Unwind_GetTextRelBase>:
   43a6c:	0005883a 	mov	r2,zero
   43a70:	f800283a 	ret

00043a74 <_Unwind_ForcedUnwind_Phase2>:
   43a74:	defff604 	addi	sp,sp,-40
   43a78:	dd400815 	stw	r21,32(sp)
   43a7c:	dd000715 	stw	r20,28(sp)
   43a80:	25400317 	ldw	r21,12(r4)
   43a84:	25000417 	ldw	r20,16(r4)
   43a88:	28800017 	ldw	r2,0(r5)
   43a8c:	dc800515 	stw	r18,20(sp)
   43a90:	dc000315 	stw	r16,12(sp)
   43a94:	2825883a 	mov	r18,r5
   43a98:	2021883a 	mov	r16,r4
   43a9c:	dfc00915 	stw	ra,36(sp)
   43aa0:	dcc00615 	stw	r19,24(sp)
   43aa4:	dc400415 	stw	r17,16(sp)
   43aa8:	00001406 	br	43afc <_Unwind_ForcedUnwind_Phase2+0x88>
   43aac:	00800144 	movi	r2,5
   43ab0:	88802626 	beq	r17,r2,43b4c <_Unwind_ForcedUnwind_Phase2+0xd8>
   43ab4:	98000c26 	beq	r19,zero,43ae8 <_Unwind_ForcedUnwind_Phase2+0x74>
   43ab8:	82000017 	ldw	r8,0(r16)
   43abc:	dc000015 	stw	r16,0(sp)
   43ac0:	dc800115 	stw	r18,4(sp)
   43ac4:	82400117 	ldw	r9,4(r16)
   43ac8:	400d883a 	mov	r6,r8
   43acc:	480f883a 	mov	r7,r9
   43ad0:	983ee83a 	callr	r19
   43ad4:	1023883a 	mov	r17,r2
   43ad8:	008001c4 	movi	r2,7
   43adc:	88801b26 	beq	r17,r2,43b4c <_Unwind_ForcedUnwind_Phase2+0xd8>
   43ae0:	00800204 	movi	r2,8
   43ae4:	8880181e 	bne	r17,r2,43b48 <_Unwind_ForcedUnwind_Phase2+0xd4>
   43ae8:	91000017 	ldw	r4,0(r18)
   43aec:	00439c40 	call	439c4 <_Unwind_SjLj_Unregister>
   43af0:	90800017 	ldw	r2,0(r18)
   43af4:	10800017 	ldw	r2,0(r2)
   43af8:	90800015 	stw	r2,0(r18)
   43afc:	01400684 	movi	r5,26
   43b00:	04400144 	movi	r17,5
   43b04:	0027883a 	mov	r19,zero
   43b08:	10000326 	beq	r2,zero,43b18 <_Unwind_ForcedUnwind_Phase2+0xa4>
   43b0c:	14c00617 	ldw	r19,24(r2)
   43b10:	0023883a 	mov	r17,zero
   43b14:	01400284 	movi	r5,10
   43b18:	dc000015 	stw	r16,0(sp)
   43b1c:	dc800115 	stw	r18,4(sp)
   43b20:	80800017 	ldw	r2,0(r16)
   43b24:	dd000215 	stw	r20,8(sp)
   43b28:	80c00117 	ldw	r3,4(r16)
   43b2c:	01000044 	movi	r4,1
   43b30:	100d883a 	mov	r6,r2
   43b34:	180f883a 	mov	r7,r3
   43b38:	a83ee83a 	callr	r21
   43b3c:	01400284 	movi	r5,10
   43b40:	01000044 	movi	r4,1
   43b44:	103fd926 	beq	r2,zero,43aac <_Unwind_ForcedUnwind_Phase2+0x38>
   43b48:	04400084 	movi	r17,2
   43b4c:	8805883a 	mov	r2,r17
   43b50:	dfc00917 	ldw	ra,36(sp)
   43b54:	dd400817 	ldw	r21,32(sp)
   43b58:	dd000717 	ldw	r20,28(sp)
   43b5c:	dcc00617 	ldw	r19,24(sp)
   43b60:	dc800517 	ldw	r18,20(sp)
   43b64:	dc400417 	ldw	r17,16(sp)
   43b68:	dc000317 	ldw	r16,12(sp)
   43b6c:	dec00a04 	addi	sp,sp,40
   43b70:	f800283a 	ret

00043b74 <_Unwind_DeleteException>:
   43b74:	20800217 	ldw	r2,8(r4)
   43b78:	200b883a 	mov	r5,r4
   43b7c:	01000044 	movi	r4,1
   43b80:	10000126 	beq	r2,zero,43b88 <_Unwind_DeleteException+0x14>
   43b84:	1000683a 	jmp	r2
   43b88:	f800283a 	ret

00043b8c <_Unwind_RaiseException_Phase2>:
   43b8c:	defffa04 	addi	sp,sp,-24
   43b90:	dc800415 	stw	r18,16(sp)
   43b94:	2825883a 	mov	r18,r5
   43b98:	29400017 	ldw	r5,0(r5)
   43b9c:	dc400315 	stw	r17,12(sp)
   43ba0:	dfc00515 	stw	ra,20(sp)
   43ba4:	dc000215 	stw	r16,8(sp)
   43ba8:	2023883a 	mov	r17,r4
   43bac:	28001b26 	beq	r5,zero,43c1c <_Unwind_RaiseException_Phase2+0x90>
   43bb0:	88800417 	ldw	r2,16(r17)
   43bb4:	0007883a 	mov	r3,zero
   43bb8:	2a000617 	ldw	r8,24(r5)
   43bbc:	28a1003a 	cmpeq	r16,r5,r2
   43bc0:	802090ba 	slli	r16,r16,2
   43bc4:	18001b1e 	bne	r3,zero,43c34 <_Unwind_RaiseException_Phase2+0xa8>
   43bc8:	40000e26 	beq	r8,zero,43c04 <_Unwind_RaiseException_Phase2+0x78>
   43bcc:	88800017 	ldw	r2,0(r17)
   43bd0:	dc400015 	stw	r17,0(sp)
   43bd4:	dc800115 	stw	r18,4(sp)
   43bd8:	88c00117 	ldw	r3,4(r17)
   43bdc:	01000044 	movi	r4,1
   43be0:	81400094 	ori	r5,r16,2
   43be4:	180f883a 	mov	r7,r3
   43be8:	100d883a 	mov	r6,r2
   43bec:	403ee83a 	callr	r8
   43bf0:	1007883a 	mov	r3,r2
   43bf4:	008001c4 	movi	r2,7
   43bf8:	18800f26 	beq	r3,r2,43c38 <_Unwind_RaiseException_Phase2+0xac>
   43bfc:	00800204 	movi	r2,8
   43c00:	18800c1e 	bne	r3,r2,43c34 <_Unwind_RaiseException_Phase2+0xa8>
   43c04:	8000131e 	bne	r16,zero,43c54 <_Unwind_RaiseException_Phase2+0xc8>
   43c08:	91400017 	ldw	r5,0(r18)
   43c0c:	28800017 	ldw	r2,0(r5)
   43c10:	100b883a 	mov	r5,r2
   43c14:	90800015 	stw	r2,0(r18)
   43c18:	283fe51e 	bne	r5,zero,43bb0 <_Unwind_RaiseException_Phase2+0x24>
   43c1c:	88800417 	ldw	r2,16(r17)
   43c20:	00c00144 	movi	r3,5
   43c24:	0011883a 	mov	r8,zero
   43c28:	28a1003a 	cmpeq	r16,r5,r2
   43c2c:	802090ba 	slli	r16,r16,2
   43c30:	183fe526 	beq	r3,zero,43bc8 <_Unwind_RaiseException_Phase2+0x3c>
   43c34:	00c00084 	movi	r3,2
   43c38:	1805883a 	mov	r2,r3
   43c3c:	dfc00517 	ldw	ra,20(sp)
   43c40:	dc800417 	ldw	r18,16(sp)
   43c44:	dc400317 	ldw	r17,12(sp)
   43c48:	dc000217 	ldw	r16,8(sp)
   43c4c:	dec00604 	addi	sp,sp,24
   43c50:	f800283a 	ret
   43c54:	0043efc0 	call	43efc <abort>

00043c58 <uw_install_context>:
   43c58:	28800017 	ldw	r2,0(r5)
   43c5c:	deffff04 	addi	sp,sp,-4
   43c60:	df000015 	stw	fp,0(sp)
   43c64:	10c00804 	addi	r3,r2,32
   43c68:	d839883a 	mov	fp,sp
   43c6c:	d0a16115 	stw	r2,-31356(gp)
   43c70:	19000117 	ldw	r4,4(r3)
   43c74:	1f000017 	ldw	fp,0(r3)
   43c78:	1ec00217 	ldw	sp,8(r3)
   43c7c:	2000683a 	jmp	r4

00043c80 <_Unwind_SjLj_Resume>:
   43c80:	d0e16117 	ldw	r3,-31356(gp)
   43c84:	20800317 	ldw	r2,12(r4)
   43c88:	defffc04 	addi	sp,sp,-16
   43c8c:	dfc00315 	stw	ra,12(sp)
   43c90:	dc000215 	stw	r16,8(sp)
   43c94:	d8c00015 	stw	r3,0(sp)
   43c98:	d8c00115 	stw	r3,4(sp)
   43c9c:	1000071e 	bne	r2,zero,43cbc <_Unwind_SjLj_Resume+0x3c>
   43ca0:	dc000104 	addi	r16,sp,4
   43ca4:	800b883a 	mov	r5,r16
   43ca8:	0043b8c0 	call	43b8c <_Unwind_RaiseException_Phase2>
   43cac:	1007883a 	mov	r3,r2
   43cb0:	008001c4 	movi	r2,7
   43cb4:	18800626 	beq	r3,r2,43cd0 <_Unwind_SjLj_Resume+0x50>
   43cb8:	0043efc0 	call	43efc <abort>
   43cbc:	dc000104 	addi	r16,sp,4
   43cc0:	800b883a 	mov	r5,r16
   43cc4:	0043a740 	call	43a74 <_Unwind_ForcedUnwind_Phase2>
   43cc8:	1007883a 	mov	r3,r2
   43ccc:	003ff806 	br	43cb0 <_Unwind_SjLj_Resume+0x30>
   43cd0:	800b883a 	mov	r5,r16
   43cd4:	d809883a 	mov	r4,sp
   43cd8:	0043c580 	call	43c58 <uw_install_context>

00043cdc <_Unwind_SjLj_RaiseException>:
   43cdc:	d0a16117 	ldw	r2,-31356(gp)
   43ce0:	defff804 	addi	sp,sp,-32
   43ce4:	dc000415 	stw	r16,16(sp)
   43ce8:	dfc00715 	stw	ra,28(sp)
   43cec:	dc800615 	stw	r18,24(sp)
   43cf0:	dc400515 	stw	r17,20(sp)
   43cf4:	2021883a 	mov	r16,r4
   43cf8:	d8800215 	stw	r2,8(sp)
   43cfc:	d8800315 	stw	r2,12(sp)
   43d00:	10001626 	beq	r2,zero,43d5c <_Unwind_SjLj_RaiseException+0x80>
   43d04:	dc400304 	addi	r17,sp,12
   43d08:	04800184 	movi	r18,6
   43d0c:	00000106 	br	43d14 <_Unwind_SjLj_RaiseException+0x38>
   43d10:	d8800315 	stw	r2,12(sp)
   43d14:	12000617 	ldw	r8,24(r2)
   43d18:	40000d26 	beq	r8,zero,43d50 <_Unwind_SjLj_RaiseException+0x74>
   43d1c:	80800017 	ldw	r2,0(r16)
   43d20:	dc000015 	stw	r16,0(sp)
   43d24:	80c00117 	ldw	r3,4(r16)
   43d28:	01000044 	movi	r4,1
   43d2c:	dc400115 	stw	r17,4(sp)
   43d30:	180f883a 	mov	r7,r3
   43d34:	200b883a 	mov	r5,r4
   43d38:	100d883a 	mov	r6,r2
   43d3c:	403ee83a 	callr	r8
   43d40:	1007883a 	mov	r3,r2
   43d44:	14800d26 	beq	r2,r18,43d7c <_Unwind_SjLj_RaiseException+0xa0>
   43d48:	00800204 	movi	r2,8
   43d4c:	1880191e 	bne	r3,r2,43db4 <_Unwind_SjLj_RaiseException+0xd8>
   43d50:	d8800317 	ldw	r2,12(sp)
   43d54:	10800017 	ldw	r2,0(r2)
   43d58:	103fed1e 	bne	r2,zero,43d10 <_Unwind_SjLj_RaiseException+0x34>
   43d5c:	00c00144 	movi	r3,5
   43d60:	1805883a 	mov	r2,r3
   43d64:	dfc00717 	ldw	ra,28(sp)
   43d68:	dc800617 	ldw	r18,24(sp)
   43d6c:	dc400517 	ldw	r17,20(sp)
   43d70:	dc000417 	ldw	r16,16(sp)
   43d74:	dec00804 	addi	sp,sp,32
   43d78:	f800283a 	ret
   43d7c:	d8800317 	ldw	r2,12(sp)
   43d80:	80000315 	stw	zero,12(r16)
   43d84:	8009883a 	mov	r4,r16
   43d88:	80800415 	stw	r2,16(r16)
   43d8c:	d8800217 	ldw	r2,8(sp)
   43d90:	880b883a 	mov	r5,r17
   43d94:	d8800315 	stw	r2,12(sp)
   43d98:	0043b8c0 	call	43b8c <_Unwind_RaiseException_Phase2>
   43d9c:	1007883a 	mov	r3,r2
   43da0:	008001c4 	movi	r2,7
   43da4:	18bfee1e 	bne	r3,r2,43d60 <_Unwind_SjLj_RaiseException+0x84>
   43da8:	880b883a 	mov	r5,r17
   43dac:	d9000204 	addi	r4,sp,8
   43db0:	0043c580 	call	43c58 <uw_install_context>
   43db4:	00c000c4 	movi	r3,3
   43db8:	1805883a 	mov	r2,r3
   43dbc:	dfc00717 	ldw	ra,28(sp)
   43dc0:	dc800617 	ldw	r18,24(sp)
   43dc4:	dc400517 	ldw	r17,20(sp)
   43dc8:	dc000417 	ldw	r16,16(sp)
   43dcc:	dec00804 	addi	sp,sp,32
   43dd0:	f800283a 	ret

00043dd4 <_Unwind_SjLj_ForcedUnwind>:
   43dd4:	defffc04 	addi	sp,sp,-16
   43dd8:	d0a16117 	ldw	r2,-31356(gp)
   43ddc:	dc000215 	stw	r16,8(sp)
   43de0:	dc000104 	addi	r16,sp,4
   43de4:	21400315 	stw	r5,12(r4)
   43de8:	21800415 	stw	r6,16(r4)
   43dec:	800b883a 	mov	r5,r16
   43df0:	dfc00315 	stw	ra,12(sp)
   43df4:	d8800015 	stw	r2,0(sp)
   43df8:	d8800115 	stw	r2,4(sp)
   43dfc:	0043a740 	call	43a74 <_Unwind_ForcedUnwind_Phase2>
   43e00:	00c001c4 	movi	r3,7
   43e04:	10c00426 	beq	r2,r3,43e18 <_Unwind_SjLj_ForcedUnwind+0x44>
   43e08:	dfc00317 	ldw	ra,12(sp)
   43e0c:	dc000217 	ldw	r16,8(sp)
   43e10:	dec00404 	addi	sp,sp,16
   43e14:	f800283a 	ret
   43e18:	800b883a 	mov	r5,r16
   43e1c:	d809883a 	mov	r4,sp
   43e20:	0043c580 	call	43c58 <uw_install_context>

00043e24 <_Unwind_Backtrace>:
   43e24:	d0a16117 	ldw	r2,-31356(gp)
   43e28:	defffa04 	addi	sp,sp,-24
   43e2c:	dcc00415 	stw	r19,16(sp)
   43e30:	dc800315 	stw	r18,12(sp)
   43e34:	dc400215 	stw	r17,8(sp)
   43e38:	2025883a 	mov	r18,r4
   43e3c:	2823883a 	mov	r17,r5
   43e40:	04c00144 	movi	r19,5
   43e44:	dfc00515 	stw	ra,20(sp)
   43e48:	dc000115 	stw	r16,4(sp)
   43e4c:	d8800015 	stw	r2,0(sp)
   43e50:	00000406 	br	43e64 <_Unwind_Backtrace+0x40>
   43e54:	84c00b26 	beq	r16,r19,43e84 <_Unwind_Backtrace+0x60>
   43e58:	d8800017 	ldw	r2,0(sp)
   43e5c:	10800017 	ldw	r2,0(r2)
   43e60:	d8800015 	stw	r2,0(sp)
   43e64:	04000144 	movi	r16,5
   43e68:	10000126 	beq	r2,zero,43e70 <_Unwind_Backtrace+0x4c>
   43e6c:	0021883a 	mov	r16,zero
   43e70:	d809883a 	mov	r4,sp
   43e74:	880b883a 	mov	r5,r17
   43e78:	903ee83a 	callr	r18
   43e7c:	103ff526 	beq	r2,zero,43e54 <_Unwind_Backtrace+0x30>
   43e80:	040000c4 	movi	r16,3
   43e84:	8005883a 	mov	r2,r16
   43e88:	dfc00517 	ldw	ra,20(sp)
   43e8c:	dcc00417 	ldw	r19,16(sp)
   43e90:	dc800317 	ldw	r18,12(sp)
   43e94:	dc400217 	ldw	r17,8(sp)
   43e98:	dc000117 	ldw	r16,4(sp)
   43e9c:	dec00604 	addi	sp,sp,24
   43ea0:	f800283a 	ret

00043ea4 <_Unwind_SjLj_Resume_or_Rethrow>:
   43ea4:	20800317 	ldw	r2,12(r4)
   43ea8:	defffc04 	addi	sp,sp,-16
   43eac:	dfc00315 	stw	ra,12(sp)
   43eb0:	dc000215 	stw	r16,8(sp)
   43eb4:	10000926 	beq	r2,zero,43edc <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   43eb8:	d0a16117 	ldw	r2,-31356(gp)
   43ebc:	dc000104 	addi	r16,sp,4
   43ec0:	800b883a 	mov	r5,r16
   43ec4:	d8800015 	stw	r2,0(sp)
   43ec8:	d8800115 	stw	r2,4(sp)
   43ecc:	0043a740 	call	43a74 <_Unwind_ForcedUnwind_Phase2>
   43ed0:	00c001c4 	movi	r3,7
   43ed4:	10c00626 	beq	r2,r3,43ef0 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   43ed8:	0043efc0 	call	43efc <abort>
   43edc:	0043cdc0 	call	43cdc <_Unwind_SjLj_RaiseException>
   43ee0:	dfc00317 	ldw	ra,12(sp)
   43ee4:	dc000217 	ldw	r16,8(sp)
   43ee8:	dec00404 	addi	sp,sp,16
   43eec:	f800283a 	ret
   43ef0:	800b883a 	mov	r5,r16
   43ef4:	d809883a 	mov	r4,sp
   43ef8:	0043c580 	call	43c58 <uw_install_context>

00043efc <abort>:
   43efc:	deffff04 	addi	sp,sp,-4
   43f00:	01000184 	movi	r4,6
   43f04:	dfc00015 	stw	ra,0(sp)
   43f08:	00447d80 	call	447d8 <raise>
   43f0c:	01000044 	movi	r4,1
   43f10:	0044edc0 	call	44edc <_exit>

00043f14 <free>:
   43f14:	00800134 	movhi	r2,4
   43f18:	1098b904 	addi	r2,r2,25316
   43f1c:	200b883a 	mov	r5,r4
   43f20:	11000017 	ldw	r4,0(r2)
   43f24:	0044b881 	jmpi	44b88 <_free_r>

00043f28 <malloc>:
   43f28:	00800134 	movhi	r2,4
   43f2c:	1098b904 	addi	r2,r2,25316
   43f30:	200b883a 	mov	r5,r4
   43f34:	11000017 	ldw	r4,0(r2)
   43f38:	0043f3c1 	jmpi	43f3c <_malloc_r>

00043f3c <_malloc_r>:
   43f3c:	defff604 	addi	sp,sp,-40
   43f40:	28c002c4 	addi	r3,r5,11
   43f44:	00800584 	movi	r2,22
   43f48:	dc800215 	stw	r18,8(sp)
   43f4c:	dfc00915 	stw	ra,36(sp)
   43f50:	df000815 	stw	fp,32(sp)
   43f54:	ddc00715 	stw	r23,28(sp)
   43f58:	dd800615 	stw	r22,24(sp)
   43f5c:	dd400515 	stw	r21,20(sp)
   43f60:	dd000415 	stw	r20,16(sp)
   43f64:	dcc00315 	stw	r19,12(sp)
   43f68:	dc400115 	stw	r17,4(sp)
   43f6c:	dc000015 	stw	r16,0(sp)
   43f70:	2025883a 	mov	r18,r4
   43f74:	10c01236 	bltu	r2,r3,43fc0 <_malloc_r+0x84>
   43f78:	04400404 	movi	r17,16
   43f7c:	8940142e 	bgeu	r17,r5,43fd0 <_malloc_r+0x94>
   43f80:	00800304 	movi	r2,12
   43f84:	0007883a 	mov	r3,zero
   43f88:	90800015 	stw	r2,0(r18)
   43f8c:	1805883a 	mov	r2,r3
   43f90:	dfc00917 	ldw	ra,36(sp)
   43f94:	df000817 	ldw	fp,32(sp)
   43f98:	ddc00717 	ldw	r23,28(sp)
   43f9c:	dd800617 	ldw	r22,24(sp)
   43fa0:	dd400517 	ldw	r21,20(sp)
   43fa4:	dd000417 	ldw	r20,16(sp)
   43fa8:	dcc00317 	ldw	r19,12(sp)
   43fac:	dc800217 	ldw	r18,8(sp)
   43fb0:	dc400117 	ldw	r17,4(sp)
   43fb4:	dc000017 	ldw	r16,0(sp)
   43fb8:	dec00a04 	addi	sp,sp,40
   43fbc:	f800283a 	ret
   43fc0:	00bffe04 	movi	r2,-8
   43fc4:	18a2703a 	and	r17,r3,r2
   43fc8:	883fed16 	blt	r17,zero,43f80 <_malloc_r+0x44>
   43fcc:	897fec36 	bltu	r17,r5,43f80 <_malloc_r+0x44>
   43fd0:	9009883a 	mov	r4,r18
   43fd4:	00451f80 	call	451f8 <__malloc_lock>
   43fd8:	00807dc4 	movi	r2,503
   43fdc:	14402b2e 	bgeu	r2,r17,4408c <_malloc_r+0x150>
   43fe0:	8806d27a 	srli	r3,r17,9
   43fe4:	18003f1e 	bne	r3,zero,440e4 <_malloc_r+0x1a8>
   43fe8:	880cd0fa 	srli	r6,r17,3
   43fec:	300490fa 	slli	r2,r6,3
   43ff0:	02c00134 	movhi	r11,4
   43ff4:	5ad77604 	addi	r11,r11,24024
   43ff8:	12cb883a 	add	r5,r2,r11
   43ffc:	2c000317 	ldw	r16,12(r5)
   44000:	580f883a 	mov	r7,r11
   44004:	2c00041e 	bne	r5,r16,44018 <_malloc_r+0xdc>
   44008:	00000a06 	br	44034 <_malloc_r+0xf8>
   4400c:	1800860e 	bge	r3,zero,44228 <_malloc_r+0x2ec>
   44010:	84000317 	ldw	r16,12(r16)
   44014:	2c000726 	beq	r5,r16,44034 <_malloc_r+0xf8>
   44018:	80800117 	ldw	r2,4(r16)
   4401c:	00ffff04 	movi	r3,-4
   44020:	10c8703a 	and	r4,r2,r3
   44024:	2447c83a 	sub	r3,r4,r17
   44028:	008003c4 	movi	r2,15
   4402c:	10fff70e 	bge	r2,r3,4400c <_malloc_r+0xd0>
   44030:	31bfffc4 	addi	r6,r6,-1
   44034:	32400044 	addi	r9,r6,1
   44038:	02800134 	movhi	r10,4
   4403c:	52977804 	addi	r10,r10,24032
   44040:	54000217 	ldw	r16,8(r10)
   44044:	8280a026 	beq	r16,r10,442c8 <_malloc_r+0x38c>
   44048:	80800117 	ldw	r2,4(r16)
   4404c:	00ffff04 	movi	r3,-4
   44050:	10ca703a 	and	r5,r2,r3
   44054:	2c4dc83a 	sub	r6,r5,r17
   44058:	008003c4 	movi	r2,15
   4405c:	11808316 	blt	r2,r6,4426c <_malloc_r+0x330>
   44060:	52800315 	stw	r10,12(r10)
   44064:	52800215 	stw	r10,8(r10)
   44068:	30002916 	blt	r6,zero,44110 <_malloc_r+0x1d4>
   4406c:	8147883a 	add	r3,r16,r5
   44070:	18800117 	ldw	r2,4(r3)
   44074:	9009883a 	mov	r4,r18
   44078:	10800054 	ori	r2,r2,1
   4407c:	18800115 	stw	r2,4(r3)
   44080:	00452180 	call	45218 <__malloc_unlock>
   44084:	80c00204 	addi	r3,r16,8
   44088:	003fc006 	br	43f8c <_malloc_r+0x50>
   4408c:	02c00134 	movhi	r11,4
   44090:	5ad77604 	addi	r11,r11,24024
   44094:	8ac5883a 	add	r2,r17,r11
   44098:	14000317 	ldw	r16,12(r2)
   4409c:	580f883a 	mov	r7,r11
   440a0:	8806d0fa 	srli	r3,r17,3
   440a4:	14006c26 	beq	r2,r16,44258 <_malloc_r+0x31c>
   440a8:	80c00117 	ldw	r3,4(r16)
   440ac:	00bfff04 	movi	r2,-4
   440b0:	81800317 	ldw	r6,12(r16)
   440b4:	1886703a 	and	r3,r3,r2
   440b8:	80c7883a 	add	r3,r16,r3
   440bc:	18800117 	ldw	r2,4(r3)
   440c0:	81400217 	ldw	r5,8(r16)
   440c4:	9009883a 	mov	r4,r18
   440c8:	10800054 	ori	r2,r2,1
   440cc:	18800115 	stw	r2,4(r3)
   440d0:	31400215 	stw	r5,8(r6)
   440d4:	29800315 	stw	r6,12(r5)
   440d8:	00452180 	call	45218 <__malloc_unlock>
   440dc:	80c00204 	addi	r3,r16,8
   440e0:	003faa06 	br	43f8c <_malloc_r+0x50>
   440e4:	00800104 	movi	r2,4
   440e8:	10c0052e 	bgeu	r2,r3,44100 <_malloc_r+0x1c4>
   440ec:	00800504 	movi	r2,20
   440f0:	10c07836 	bltu	r2,r3,442d4 <_malloc_r+0x398>
   440f4:	198016c4 	addi	r6,r3,91
   440f8:	300490fa 	slli	r2,r6,3
   440fc:	003fbc06 	br	43ff0 <_malloc_r+0xb4>
   44100:	8804d1ba 	srli	r2,r17,6
   44104:	11800e04 	addi	r6,r2,56
   44108:	300490fa 	slli	r2,r6,3
   4410c:	003fb806 	br	43ff0 <_malloc_r+0xb4>
   44110:	00807fc4 	movi	r2,511
   44114:	1140bb36 	bltu	r2,r5,44404 <_malloc_r+0x4c8>
   44118:	2806d0fa 	srli	r3,r5,3
   4411c:	573ffe04 	addi	fp,r10,-8
   44120:	00800044 	movi	r2,1
   44124:	180890fa 	slli	r4,r3,3
   44128:	1807d0ba 	srai	r3,r3,2
   4412c:	e1c00117 	ldw	r7,4(fp)
   44130:	5909883a 	add	r4,r11,r4
   44134:	21400217 	ldw	r5,8(r4)
   44138:	10c4983a 	sll	r2,r2,r3
   4413c:	81000315 	stw	r4,12(r16)
   44140:	81400215 	stw	r5,8(r16)
   44144:	388eb03a 	or	r7,r7,r2
   44148:	2c000315 	stw	r16,12(r5)
   4414c:	24000215 	stw	r16,8(r4)
   44150:	e1c00115 	stw	r7,4(fp)
   44154:	4807883a 	mov	r3,r9
   44158:	4800cd16 	blt	r9,zero,44490 <_malloc_r+0x554>
   4415c:	1807d0ba 	srai	r3,r3,2
   44160:	00800044 	movi	r2,1
   44164:	10c8983a 	sll	r4,r2,r3
   44168:	39004436 	bltu	r7,r4,4427c <_malloc_r+0x340>
   4416c:	21c4703a 	and	r2,r4,r7
   44170:	10000a1e 	bne	r2,zero,4419c <_malloc_r+0x260>
   44174:	2109883a 	add	r4,r4,r4
   44178:	00bfff04 	movi	r2,-4
   4417c:	4884703a 	and	r2,r9,r2
   44180:	3906703a 	and	r3,r7,r4
   44184:	12400104 	addi	r9,r2,4
   44188:	1800041e 	bne	r3,zero,4419c <_malloc_r+0x260>
   4418c:	2109883a 	add	r4,r4,r4
   44190:	3904703a 	and	r2,r7,r4
   44194:	4a400104 	addi	r9,r9,4
   44198:	103ffc26 	beq	r2,zero,4418c <_malloc_r+0x250>
   4419c:	480490fa 	slli	r2,r9,3
   441a0:	4819883a 	mov	r12,r9
   441a4:	023fff04 	movi	r8,-4
   441a8:	589b883a 	add	r13,r11,r2
   441ac:	6807883a 	mov	r3,r13
   441b0:	014003c4 	movi	r5,15
   441b4:	1c000317 	ldw	r16,12(r3)
   441b8:	1c00041e 	bne	r3,r16,441cc <_malloc_r+0x290>
   441bc:	0000a706 	br	4445c <_malloc_r+0x520>
   441c0:	3000ab0e 	bge	r6,zero,44470 <_malloc_r+0x534>
   441c4:	84000317 	ldw	r16,12(r16)
   441c8:	1c00a426 	beq	r3,r16,4445c <_malloc_r+0x520>
   441cc:	80800117 	ldw	r2,4(r16)
   441d0:	1204703a 	and	r2,r2,r8
   441d4:	144dc83a 	sub	r6,r2,r17
   441d8:	29bff90e 	bge	r5,r6,441c0 <_malloc_r+0x284>
   441dc:	81000317 	ldw	r4,12(r16)
   441e0:	80c00217 	ldw	r3,8(r16)
   441e4:	89400054 	ori	r5,r17,1
   441e8:	8445883a 	add	r2,r16,r17
   441ec:	20c00215 	stw	r3,8(r4)
   441f0:	19000315 	stw	r4,12(r3)
   441f4:	81400115 	stw	r5,4(r16)
   441f8:	1187883a 	add	r3,r2,r6
   441fc:	31000054 	ori	r4,r6,1
   44200:	50800315 	stw	r2,12(r10)
   44204:	50800215 	stw	r2,8(r10)
   44208:	19800015 	stw	r6,0(r3)
   4420c:	11000115 	stw	r4,4(r2)
   44210:	12800215 	stw	r10,8(r2)
   44214:	12800315 	stw	r10,12(r2)
   44218:	9009883a 	mov	r4,r18
   4421c:	00452180 	call	45218 <__malloc_unlock>
   44220:	80c00204 	addi	r3,r16,8
   44224:	003f5906 	br	43f8c <_malloc_r+0x50>
   44228:	8109883a 	add	r4,r16,r4
   4422c:	20800117 	ldw	r2,4(r4)
   44230:	80c00217 	ldw	r3,8(r16)
   44234:	81400317 	ldw	r5,12(r16)
   44238:	10800054 	ori	r2,r2,1
   4423c:	20800115 	stw	r2,4(r4)
   44240:	28c00215 	stw	r3,8(r5)
   44244:	19400315 	stw	r5,12(r3)
   44248:	9009883a 	mov	r4,r18
   4424c:	00452180 	call	45218 <__malloc_unlock>
   44250:	80c00204 	addi	r3,r16,8
   44254:	003f4d06 	br	43f8c <_malloc_r+0x50>
   44258:	80800204 	addi	r2,r16,8
   4425c:	14000317 	ldw	r16,12(r2)
   44260:	143f911e 	bne	r2,r16,440a8 <_malloc_r+0x16c>
   44264:	1a400084 	addi	r9,r3,2
   44268:	003f7306 	br	44038 <_malloc_r+0xfc>
   4426c:	88c00054 	ori	r3,r17,1
   44270:	8445883a 	add	r2,r16,r17
   44274:	80c00115 	stw	r3,4(r16)
   44278:	003fdf06 	br	441f8 <_malloc_r+0x2bc>
   4427c:	e4000217 	ldw	r16,8(fp)
   44280:	00bfff04 	movi	r2,-4
   44284:	80c00117 	ldw	r3,4(r16)
   44288:	802d883a 	mov	r22,r16
   4428c:	18aa703a 	and	r21,r3,r2
   44290:	ac401636 	bltu	r21,r17,442ec <_malloc_r+0x3b0>
   44294:	ac49c83a 	sub	r4,r21,r17
   44298:	008003c4 	movi	r2,15
   4429c:	1100130e 	bge	r2,r4,442ec <_malloc_r+0x3b0>
   442a0:	88800054 	ori	r2,r17,1
   442a4:	8447883a 	add	r3,r16,r17
   442a8:	80800115 	stw	r2,4(r16)
   442ac:	20800054 	ori	r2,r4,1
   442b0:	18800115 	stw	r2,4(r3)
   442b4:	e0c00215 	stw	r3,8(fp)
   442b8:	9009883a 	mov	r4,r18
   442bc:	00452180 	call	45218 <__malloc_unlock>
   442c0:	80c00204 	addi	r3,r16,8
   442c4:	003f3106 	br	43f8c <_malloc_r+0x50>
   442c8:	39c00117 	ldw	r7,4(r7)
   442cc:	573ffe04 	addi	fp,r10,-8
   442d0:	003fa006 	br	44154 <_malloc_r+0x218>
   442d4:	00801504 	movi	r2,84
   442d8:	10c06736 	bltu	r2,r3,44478 <_malloc_r+0x53c>
   442dc:	8804d33a 	srli	r2,r17,12
   442e0:	11801b84 	addi	r6,r2,110
   442e4:	300490fa 	slli	r2,r6,3
   442e8:	003f4106 	br	43ff0 <_malloc_r+0xb4>
   442ec:	d0a16217 	ldw	r2,-31352(gp)
   442f0:	d0e00817 	ldw	r3,-32736(gp)
   442f4:	053fffc4 	movi	r20,-1
   442f8:	10800404 	addi	r2,r2,16
   442fc:	88a7883a 	add	r19,r17,r2
   44300:	1d000326 	beq	r3,r20,44310 <_malloc_r+0x3d4>
   44304:	98c01fc4 	addi	r3,r19,127
   44308:	00bfe004 	movi	r2,-128
   4430c:	18a6703a 	and	r19,r3,r2
   44310:	9009883a 	mov	r4,r18
   44314:	980b883a 	mov	r5,r19
   44318:	004469c0 	call	4469c <_sbrk_r>
   4431c:	1009883a 	mov	r4,r2
   44320:	15000426 	beq	r2,r20,44334 <_malloc_r+0x3f8>
   44324:	854b883a 	add	r5,r16,r21
   44328:	1029883a 	mov	r20,r2
   4432c:	11405a2e 	bgeu	r2,r5,44498 <_malloc_r+0x55c>
   44330:	87000c26 	beq	r16,fp,44364 <_malloc_r+0x428>
   44334:	e4000217 	ldw	r16,8(fp)
   44338:	80c00117 	ldw	r3,4(r16)
   4433c:	00bfff04 	movi	r2,-4
   44340:	1884703a 	and	r2,r3,r2
   44344:	14400336 	bltu	r2,r17,44354 <_malloc_r+0x418>
   44348:	1449c83a 	sub	r4,r2,r17
   4434c:	008003c4 	movi	r2,15
   44350:	113fd316 	blt	r2,r4,442a0 <_malloc_r+0x364>
   44354:	9009883a 	mov	r4,r18
   44358:	00452180 	call	45218 <__malloc_unlock>
   4435c:	0007883a 	mov	r3,zero
   44360:	003f0a06 	br	43f8c <_malloc_r+0x50>
   44364:	05c00134 	movhi	r23,4
   44368:	bddc2004 	addi	r23,r23,28800
   4436c:	b8800017 	ldw	r2,0(r23)
   44370:	988d883a 	add	r6,r19,r2
   44374:	b9800015 	stw	r6,0(r23)
   44378:	d0e00817 	ldw	r3,-32736(gp)
   4437c:	00bfffc4 	movi	r2,-1
   44380:	18808e26 	beq	r3,r2,445bc <_malloc_r+0x680>
   44384:	2145c83a 	sub	r2,r4,r5
   44388:	3085883a 	add	r2,r6,r2
   4438c:	b8800015 	stw	r2,0(r23)
   44390:	20c001cc 	andi	r3,r4,7
   44394:	18005f1e 	bne	r3,zero,44514 <_malloc_r+0x5d8>
   44398:	000b883a 	mov	r5,zero
   4439c:	a4c5883a 	add	r2,r20,r19
   443a0:	10801fcc 	andi	r2,r2,127
   443a4:	00c02004 	movi	r3,128
   443a8:	1887c83a 	sub	r3,r3,r2
   443ac:	28e7883a 	add	r19,r5,r3
   443b0:	9009883a 	mov	r4,r18
   443b4:	980b883a 	mov	r5,r19
   443b8:	004469c0 	call	4469c <_sbrk_r>
   443bc:	1007883a 	mov	r3,r2
   443c0:	00bfffc4 	movi	r2,-1
   443c4:	18807a26 	beq	r3,r2,445b0 <_malloc_r+0x674>
   443c8:	1d05c83a 	sub	r2,r3,r20
   443cc:	9885883a 	add	r2,r19,r2
   443d0:	10c00054 	ori	r3,r2,1
   443d4:	b8800017 	ldw	r2,0(r23)
   443d8:	a021883a 	mov	r16,r20
   443dc:	a0c00115 	stw	r3,4(r20)
   443e0:	9885883a 	add	r2,r19,r2
   443e4:	b8800015 	stw	r2,0(r23)
   443e8:	e5000215 	stw	r20,8(fp)
   443ec:	b7003626 	beq	r22,fp,444c8 <_malloc_r+0x58c>
   443f0:	018003c4 	movi	r6,15
   443f4:	35404b36 	bltu	r6,r21,44524 <_malloc_r+0x5e8>
   443f8:	00800044 	movi	r2,1
   443fc:	a0800115 	stw	r2,4(r20)
   44400:	003fcd06 	br	44338 <_malloc_r+0x3fc>
   44404:	2808d27a 	srli	r4,r5,9
   44408:	2000371e 	bne	r4,zero,444e8 <_malloc_r+0x5ac>
   4440c:	2808d0fa 	srli	r4,r5,3
   44410:	200690fa 	slli	r3,r4,3
   44414:	58d1883a 	add	r8,r11,r3
   44418:	41800217 	ldw	r6,8(r8)
   4441c:	41805b26 	beq	r8,r6,4458c <_malloc_r+0x650>
   44420:	30800117 	ldw	r2,4(r6)
   44424:	00ffff04 	movi	r3,-4
   44428:	10c4703a 	and	r2,r2,r3
   4442c:	2880022e 	bgeu	r5,r2,44438 <_malloc_r+0x4fc>
   44430:	31800217 	ldw	r6,8(r6)
   44434:	41bffa1e 	bne	r8,r6,44420 <_malloc_r+0x4e4>
   44438:	32000317 	ldw	r8,12(r6)
   4443c:	39c00117 	ldw	r7,4(r7)
   44440:	82000315 	stw	r8,12(r16)
   44444:	81800215 	stw	r6,8(r16)
   44448:	07000134 	movhi	fp,4
   4444c:	e7177604 	addi	fp,fp,24024
   44450:	34000315 	stw	r16,12(r6)
   44454:	44000215 	stw	r16,8(r8)
   44458:	003f3e06 	br	44154 <_malloc_r+0x218>
   4445c:	63000044 	addi	r12,r12,1
   44460:	608000cc 	andi	r2,r12,3
   44464:	10005d26 	beq	r2,zero,445dc <_malloc_r+0x6a0>
   44468:	18c00204 	addi	r3,r3,8
   4446c:	003f5106 	br	441b4 <_malloc_r+0x278>
   44470:	8089883a 	add	r4,r16,r2
   44474:	003f6d06 	br	4422c <_malloc_r+0x2f0>
   44478:	00805504 	movi	r2,340
   4447c:	10c02036 	bltu	r2,r3,44500 <_malloc_r+0x5c4>
   44480:	8804d3fa 	srli	r2,r17,15
   44484:	11801dc4 	addi	r6,r2,119
   44488:	300490fa 	slli	r2,r6,3
   4448c:	003ed806 	br	43ff0 <_malloc_r+0xb4>
   44490:	48c000c4 	addi	r3,r9,3
   44494:	003f3106 	br	4415c <_malloc_r+0x220>
   44498:	05c00134 	movhi	r23,4
   4449c:	bddc2004 	addi	r23,r23,28800
   444a0:	b8800017 	ldw	r2,0(r23)
   444a4:	988d883a 	add	r6,r19,r2
   444a8:	b9800015 	stw	r6,0(r23)
   444ac:	293fb21e 	bne	r5,r4,44378 <_malloc_r+0x43c>
   444b0:	20801fcc 	andi	r2,r4,127
   444b4:	103fb01e 	bne	r2,zero,44378 <_malloc_r+0x43c>
   444b8:	e4000217 	ldw	r16,8(fp)
   444bc:	9d45883a 	add	r2,r19,r21
   444c0:	10800054 	ori	r2,r2,1
   444c4:	80800115 	stw	r2,4(r16)
   444c8:	b8c00017 	ldw	r3,0(r23)
   444cc:	d0a16317 	ldw	r2,-31348(gp)
   444d0:	10c0012e 	bgeu	r2,r3,444d8 <_malloc_r+0x59c>
   444d4:	d0e16315 	stw	r3,-31348(gp)
   444d8:	d0a16417 	ldw	r2,-31344(gp)
   444dc:	10ff962e 	bgeu	r2,r3,44338 <_malloc_r+0x3fc>
   444e0:	d0e16415 	stw	r3,-31344(gp)
   444e4:	003f9406 	br	44338 <_malloc_r+0x3fc>
   444e8:	00800104 	movi	r2,4
   444ec:	11001e36 	bltu	r2,r4,44568 <_malloc_r+0x62c>
   444f0:	2804d1ba 	srli	r2,r5,6
   444f4:	11000e04 	addi	r4,r2,56
   444f8:	200690fa 	slli	r3,r4,3
   444fc:	003fc506 	br	44414 <_malloc_r+0x4d8>
   44500:	00815504 	movi	r2,1364
   44504:	10c01d2e 	bgeu	r2,r3,4457c <_malloc_r+0x640>
   44508:	01801f84 	movi	r6,126
   4450c:	0080fc04 	movi	r2,1008
   44510:	003eb706 	br	43ff0 <_malloc_r+0xb4>
   44514:	00800204 	movi	r2,8
   44518:	10cbc83a 	sub	r5,r2,r3
   4451c:	2169883a 	add	r20,r4,r5
   44520:	003f9e06 	br	4439c <_malloc_r+0x460>
   44524:	00bffe04 	movi	r2,-8
   44528:	a93ffd04 	addi	r4,r21,-12
   4452c:	2088703a 	and	r4,r4,r2
   44530:	b10b883a 	add	r5,r22,r4
   44534:	00c00144 	movi	r3,5
   44538:	28c00215 	stw	r3,8(r5)
   4453c:	28c00115 	stw	r3,4(r5)
   44540:	b0800117 	ldw	r2,4(r22)
   44544:	1080004c 	andi	r2,r2,1
   44548:	2084b03a 	or	r2,r4,r2
   4454c:	b0800115 	stw	r2,4(r22)
   44550:	313fdd2e 	bgeu	r6,r4,444c8 <_malloc_r+0x58c>
   44554:	b1400204 	addi	r5,r22,8
   44558:	9009883a 	mov	r4,r18
   4455c:	0044b880 	call	44b88 <_free_r>
   44560:	e4000217 	ldw	r16,8(fp)
   44564:	003fd806 	br	444c8 <_malloc_r+0x58c>
   44568:	00800504 	movi	r2,20
   4456c:	11001536 	bltu	r2,r4,445c4 <_malloc_r+0x688>
   44570:	210016c4 	addi	r4,r4,91
   44574:	200690fa 	slli	r3,r4,3
   44578:	003fa606 	br	44414 <_malloc_r+0x4d8>
   4457c:	8804d4ba 	srli	r2,r17,18
   44580:	11801f04 	addi	r6,r2,124
   44584:	300490fa 	slli	r2,r6,3
   44588:	003e9906 	br	43ff0 <_malloc_r+0xb4>
   4458c:	2009d0ba 	srai	r4,r4,2
   44590:	01400134 	movhi	r5,4
   44594:	29577604 	addi	r5,r5,24024
   44598:	00c00044 	movi	r3,1
   4459c:	28800117 	ldw	r2,4(r5)
   445a0:	1906983a 	sll	r3,r3,r4
   445a4:	10c4b03a 	or	r2,r2,r3
   445a8:	28800115 	stw	r2,4(r5)
   445ac:	003fa306 	br	4443c <_malloc_r+0x500>
   445b0:	0027883a 	mov	r19,zero
   445b4:	00c00044 	movi	r3,1
   445b8:	003f8606 	br	443d4 <_malloc_r+0x498>
   445bc:	d1200815 	stw	r4,-32736(gp)
   445c0:	003f7306 	br	44390 <_malloc_r+0x454>
   445c4:	00801504 	movi	r2,84
   445c8:	11001936 	bltu	r2,r4,44630 <_malloc_r+0x6f4>
   445cc:	2804d33a 	srli	r2,r5,12
   445d0:	11001b84 	addi	r4,r2,110
   445d4:	200690fa 	slli	r3,r4,3
   445d8:	003f8e06 	br	44414 <_malloc_r+0x4d8>
   445dc:	480b883a 	mov	r5,r9
   445e0:	6807883a 	mov	r3,r13
   445e4:	288000cc 	andi	r2,r5,3
   445e8:	18fffe04 	addi	r3,r3,-8
   445ec:	297fffc4 	addi	r5,r5,-1
   445f0:	10001526 	beq	r2,zero,44648 <_malloc_r+0x70c>
   445f4:	18800217 	ldw	r2,8(r3)
   445f8:	10fffa26 	beq	r2,r3,445e4 <_malloc_r+0x6a8>
   445fc:	2109883a 	add	r4,r4,r4
   44600:	393f1e36 	bltu	r7,r4,4427c <_malloc_r+0x340>
   44604:	203f1d26 	beq	r4,zero,4427c <_malloc_r+0x340>
   44608:	21c4703a 	and	r2,r4,r7
   4460c:	10000226 	beq	r2,zero,44618 <_malloc_r+0x6dc>
   44610:	6013883a 	mov	r9,r12
   44614:	003ee106 	br	4419c <_malloc_r+0x260>
   44618:	2109883a 	add	r4,r4,r4
   4461c:	3904703a 	and	r2,r7,r4
   44620:	63000104 	addi	r12,r12,4
   44624:	103ffc26 	beq	r2,zero,44618 <_malloc_r+0x6dc>
   44628:	6013883a 	mov	r9,r12
   4462c:	003edb06 	br	4419c <_malloc_r+0x260>
   44630:	00805504 	movi	r2,340
   44634:	11000836 	bltu	r2,r4,44658 <_malloc_r+0x71c>
   44638:	2804d3fa 	srli	r2,r5,15
   4463c:	11001dc4 	addi	r4,r2,119
   44640:	200690fa 	slli	r3,r4,3
   44644:	003f7306 	br	44414 <_malloc_r+0x4d8>
   44648:	0104303a 	nor	r2,zero,r4
   4464c:	388e703a 	and	r7,r7,r2
   44650:	e1c00115 	stw	r7,4(fp)
   44654:	003fe906 	br	445fc <_malloc_r+0x6c0>
   44658:	00815504 	movi	r2,1364
   4465c:	1100032e 	bgeu	r2,r4,4466c <_malloc_r+0x730>
   44660:	01001f84 	movi	r4,126
   44664:	00c0fc04 	movi	r3,1008
   44668:	003f6a06 	br	44414 <_malloc_r+0x4d8>
   4466c:	2804d4ba 	srli	r2,r5,18
   44670:	11001f04 	addi	r4,r2,124
   44674:	200690fa 	slli	r3,r4,3
   44678:	003f6606 	br	44414 <_malloc_r+0x4d8>

0004467c <memset>:
   4467c:	30000526 	beq	r6,zero,44694 <memset+0x18>
   44680:	310d883a 	add	r6,r6,r4
   44684:	2005883a 	mov	r2,r4
   44688:	11400005 	stb	r5,0(r2)
   4468c:	10800044 	addi	r2,r2,1
   44690:	11bffd1e 	bne	r2,r6,44688 <memset+0xc>
   44694:	2005883a 	mov	r2,r4
   44698:	f800283a 	ret

0004469c <_sbrk_r>:
   4469c:	defffd04 	addi	sp,sp,-12
   446a0:	dc000015 	stw	r16,0(sp)
   446a4:	04000134 	movhi	r16,4
   446a8:	841a1504 	addi	r16,r16,26708
   446ac:	dc400115 	stw	r17,4(sp)
   446b0:	80000015 	stw	zero,0(r16)
   446b4:	2023883a 	mov	r17,r4
   446b8:	2809883a 	mov	r4,r5
   446bc:	dfc00215 	stw	ra,8(sp)
   446c0:	00452ac0 	call	452ac <sbrk>
   446c4:	1007883a 	mov	r3,r2
   446c8:	00bfffc4 	movi	r2,-1
   446cc:	18800626 	beq	r3,r2,446e8 <_sbrk_r+0x4c>
   446d0:	1805883a 	mov	r2,r3
   446d4:	dfc00217 	ldw	ra,8(sp)
   446d8:	dc400117 	ldw	r17,4(sp)
   446dc:	dc000017 	ldw	r16,0(sp)
   446e0:	dec00304 	addi	sp,sp,12
   446e4:	f800283a 	ret
   446e8:	80800017 	ldw	r2,0(r16)
   446ec:	103ff826 	beq	r2,zero,446d0 <_sbrk_r+0x34>
   446f0:	88800015 	stw	r2,0(r17)
   446f4:	1805883a 	mov	r2,r3
   446f8:	dfc00217 	ldw	ra,8(sp)
   446fc:	dc400117 	ldw	r17,4(sp)
   44700:	dc000017 	ldw	r16,0(sp)
   44704:	dec00304 	addi	sp,sp,12
   44708:	f800283a 	ret

0004470c <_raise_r>:
   4470c:	defffd04 	addi	sp,sp,-12
   44710:	008007c4 	movi	r2,31
   44714:	dc400115 	stw	r17,4(sp)
   44718:	dc000015 	stw	r16,0(sp)
   4471c:	dfc00215 	stw	ra,8(sp)
   44720:	2821883a 	mov	r16,r5
   44724:	2023883a 	mov	r17,r4
   44728:	11402736 	bltu	r2,r5,447c8 <_raise_r+0xbc>
   4472c:	20c00b17 	ldw	r3,44(r4)
   44730:	18001326 	beq	r3,zero,44780 <_raise_r+0x74>
   44734:	2945883a 	add	r2,r5,r5
   44738:	1085883a 	add	r2,r2,r2
   4473c:	188b883a 	add	r5,r3,r2
   44740:	28c00017 	ldw	r3,0(r5)
   44744:	18000e26 	beq	r3,zero,44780 <_raise_r+0x74>
   44748:	01000044 	movi	r4,1
   4474c:	19000526 	beq	r3,r4,44764 <_raise_r+0x58>
   44750:	00bfffc4 	movi	r2,-1
   44754:	18801326 	beq	r3,r2,447a4 <_raise_r+0x98>
   44758:	28000015 	stw	zero,0(r5)
   4475c:	8009883a 	mov	r4,r16
   44760:	183ee83a 	callr	r3
   44764:	0007883a 	mov	r3,zero
   44768:	1805883a 	mov	r2,r3
   4476c:	dfc00217 	ldw	ra,8(sp)
   44770:	dc400117 	ldw	r17,4(sp)
   44774:	dc000017 	ldw	r16,0(sp)
   44778:	dec00304 	addi	sp,sp,12
   4477c:	f800283a 	ret
   44780:	00449e40 	call	449e4 <_getpid_r>
   44784:	100b883a 	mov	r5,r2
   44788:	8809883a 	mov	r4,r17
   4478c:	800d883a 	mov	r6,r16
   44790:	dfc00217 	ldw	ra,8(sp)
   44794:	dc400117 	ldw	r17,4(sp)
   44798:	dc000017 	ldw	r16,0(sp)
   4479c:	dec00304 	addi	sp,sp,12
   447a0:	00449e81 	jmpi	449e8 <_kill_r>
   447a4:	2007883a 	mov	r3,r4
   447a8:	00800584 	movi	r2,22
   447ac:	88800015 	stw	r2,0(r17)
   447b0:	1805883a 	mov	r2,r3
   447b4:	dfc00217 	ldw	ra,8(sp)
   447b8:	dc400117 	ldw	r17,4(sp)
   447bc:	dc000017 	ldw	r16,0(sp)
   447c0:	dec00304 	addi	sp,sp,12
   447c4:	f800283a 	ret
   447c8:	00800584 	movi	r2,22
   447cc:	00ffffc4 	movi	r3,-1
   447d0:	20800015 	stw	r2,0(r4)
   447d4:	003fe406 	br	44768 <_raise_r+0x5c>

000447d8 <raise>:
   447d8:	00800134 	movhi	r2,4
   447dc:	1098b904 	addi	r2,r2,25316
   447e0:	200b883a 	mov	r5,r4
   447e4:	11000017 	ldw	r4,0(r2)
   447e8:	004470c1 	jmpi	4470c <_raise_r>

000447ec <_init_signal_r>:
   447ec:	20800b17 	ldw	r2,44(r4)
   447f0:	defffe04 	addi	sp,sp,-8
   447f4:	dc000015 	stw	r16,0(sp)
   447f8:	dfc00115 	stw	ra,4(sp)
   447fc:	2021883a 	mov	r16,r4
   44800:	10000526 	beq	r2,zero,44818 <_init_signal_r+0x2c>
   44804:	0005883a 	mov	r2,zero
   44808:	dfc00117 	ldw	ra,4(sp)
   4480c:	dc000017 	ldw	r16,0(sp)
   44810:	dec00204 	addi	sp,sp,8
   44814:	f800283a 	ret
   44818:	01402004 	movi	r5,128
   4481c:	0043f3c0 	call	43f3c <_malloc_r>
   44820:	1009883a 	mov	r4,r2
   44824:	80800b15 	stw	r2,44(r16)
   44828:	10000726 	beq	r2,zero,44848 <_init_signal_r+0x5c>
   4482c:	0007883a 	mov	r3,zero
   44830:	01402004 	movi	r5,128
   44834:	20c5883a 	add	r2,r4,r3
   44838:	18c00104 	addi	r3,r3,4
   4483c:	10000015 	stw	zero,0(r2)
   44840:	197ffc1e 	bne	r3,r5,44834 <_init_signal_r+0x48>
   44844:	003fef06 	br	44804 <_init_signal_r+0x18>
   44848:	00bfffc4 	movi	r2,-1
   4484c:	003fee06 	br	44808 <_init_signal_r+0x1c>

00044850 <_init_signal>:
   44850:	00800134 	movhi	r2,4
   44854:	1098b904 	addi	r2,r2,25316
   44858:	11000017 	ldw	r4,0(r2)
   4485c:	00447ec1 	jmpi	447ec <_init_signal_r>

00044860 <__sigtramp_r>:
   44860:	defffd04 	addi	sp,sp,-12
   44864:	008007c4 	movi	r2,31
   44868:	dc000115 	stw	r16,4(sp)
   4486c:	dfc00215 	stw	ra,8(sp)
   44870:	2021883a 	mov	r16,r4
   44874:	11401336 	bltu	r2,r5,448c4 <__sigtramp_r+0x64>
   44878:	20c00b17 	ldw	r3,44(r4)
   4487c:	18001f26 	beq	r3,zero,448fc <__sigtramp_r+0x9c>
   44880:	2945883a 	add	r2,r5,r5
   44884:	1085883a 	add	r2,r2,r2
   44888:	10c9883a 	add	r4,r2,r3
   4488c:	20c00017 	ldw	r3,0(r4)
   44890:	18001626 	beq	r3,zero,448ec <__sigtramp_r+0x8c>
   44894:	00bfffc4 	movi	r2,-1
   44898:	18801626 	beq	r3,r2,448f4 <__sigtramp_r+0x94>
   4489c:	00800044 	movi	r2,1
   448a0:	18800d26 	beq	r3,r2,448d8 <__sigtramp_r+0x78>
   448a4:	20000015 	stw	zero,0(r4)
   448a8:	2809883a 	mov	r4,r5
   448ac:	183ee83a 	callr	r3
   448b0:	0005883a 	mov	r2,zero
   448b4:	dfc00217 	ldw	ra,8(sp)
   448b8:	dc000117 	ldw	r16,4(sp)
   448bc:	dec00304 	addi	sp,sp,12
   448c0:	f800283a 	ret
   448c4:	00bfffc4 	movi	r2,-1
   448c8:	dfc00217 	ldw	ra,8(sp)
   448cc:	dc000117 	ldw	r16,4(sp)
   448d0:	dec00304 	addi	sp,sp,12
   448d4:	f800283a 	ret
   448d8:	008000c4 	movi	r2,3
   448dc:	dfc00217 	ldw	ra,8(sp)
   448e0:	dc000117 	ldw	r16,4(sp)
   448e4:	dec00304 	addi	sp,sp,12
   448e8:	f800283a 	ret
   448ec:	00800044 	movi	r2,1
   448f0:	003ff006 	br	448b4 <__sigtramp_r+0x54>
   448f4:	00800084 	movi	r2,2
   448f8:	003fee06 	br	448b4 <__sigtramp_r+0x54>
   448fc:	d9400015 	stw	r5,0(sp)
   44900:	00447ec0 	call	447ec <_init_signal_r>
   44904:	d9400017 	ldw	r5,0(sp)
   44908:	103fee1e 	bne	r2,zero,448c4 <__sigtramp_r+0x64>
   4490c:	80c00b17 	ldw	r3,44(r16)
   44910:	003fdb06 	br	44880 <__sigtramp_r+0x20>

00044914 <__sigtramp>:
   44914:	00800134 	movhi	r2,4
   44918:	1098b904 	addi	r2,r2,25316
   4491c:	200b883a 	mov	r5,r4
   44920:	11000017 	ldw	r4,0(r2)
   44924:	00448601 	jmpi	44860 <__sigtramp_r>

00044928 <_signal_r>:
   44928:	defffc04 	addi	sp,sp,-16
   4492c:	008007c4 	movi	r2,31
   44930:	dc800215 	stw	r18,8(sp)
   44934:	dc400115 	stw	r17,4(sp)
   44938:	dc000015 	stw	r16,0(sp)
   4493c:	dfc00315 	stw	ra,12(sp)
   44940:	2823883a 	mov	r17,r5
   44944:	00ffffc4 	movi	r3,-1
   44948:	3025883a 	mov	r18,r6
   4494c:	2021883a 	mov	r16,r4
   44950:	1140092e 	bgeu	r2,r5,44978 <_signal_r+0x50>
   44954:	00800584 	movi	r2,22
   44958:	20800015 	stw	r2,0(r4)
   4495c:	1805883a 	mov	r2,r3
   44960:	dfc00317 	ldw	ra,12(sp)
   44964:	dc800217 	ldw	r18,8(sp)
   44968:	dc400117 	ldw	r17,4(sp)
   4496c:	dc000017 	ldw	r16,0(sp)
   44970:	dec00404 	addi	sp,sp,16
   44974:	f800283a 	ret
   44978:	21400b17 	ldw	r5,44(r4)
   4497c:	28000c26 	beq	r5,zero,449b0 <_signal_r+0x88>
   44980:	8c45883a 	add	r2,r17,r17
   44984:	1085883a 	add	r2,r2,r2
   44988:	1145883a 	add	r2,r2,r5
   4498c:	10c00017 	ldw	r3,0(r2)
   44990:	14800015 	stw	r18,0(r2)
   44994:	1805883a 	mov	r2,r3
   44998:	dfc00317 	ldw	ra,12(sp)
   4499c:	dc800217 	ldw	r18,8(sp)
   449a0:	dc400117 	ldw	r17,4(sp)
   449a4:	dc000017 	ldw	r16,0(sp)
   449a8:	dec00404 	addi	sp,sp,16
   449ac:	f800283a 	ret
   449b0:	00447ec0 	call	447ec <_init_signal_r>
   449b4:	1000021e 	bne	r2,zero,449c0 <_signal_r+0x98>
   449b8:	81400b17 	ldw	r5,44(r16)
   449bc:	003ff006 	br	44980 <_signal_r+0x58>
   449c0:	00ffffc4 	movi	r3,-1
   449c4:	003fe506 	br	4495c <_signal_r+0x34>

000449c8 <signal>:
   449c8:	01800134 	movhi	r6,4
   449cc:	3198b904 	addi	r6,r6,25316
   449d0:	2007883a 	mov	r3,r4
   449d4:	31000017 	ldw	r4,0(r6)
   449d8:	280d883a 	mov	r6,r5
   449dc:	180b883a 	mov	r5,r3
   449e0:	00449281 	jmpi	44928 <_signal_r>

000449e4 <_getpid_r>:
   449e4:	0044efc1 	jmpi	44efc <getpid>

000449e8 <_kill_r>:
   449e8:	defffd04 	addi	sp,sp,-12
   449ec:	dc000015 	stw	r16,0(sp)
   449f0:	04000134 	movhi	r16,4
   449f4:	841a1504 	addi	r16,r16,26708
   449f8:	dc400115 	stw	r17,4(sp)
   449fc:	80000015 	stw	zero,0(r16)
   44a00:	2023883a 	mov	r17,r4
   44a04:	2809883a 	mov	r4,r5
   44a08:	300b883a 	mov	r5,r6
   44a0c:	dfc00215 	stw	ra,8(sp)
   44a10:	0044f1c0 	call	44f1c <kill>
   44a14:	1007883a 	mov	r3,r2
   44a18:	00bfffc4 	movi	r2,-1
   44a1c:	18800626 	beq	r3,r2,44a38 <_kill_r+0x50>
   44a20:	1805883a 	mov	r2,r3
   44a24:	dfc00217 	ldw	ra,8(sp)
   44a28:	dc400117 	ldw	r17,4(sp)
   44a2c:	dc000017 	ldw	r16,0(sp)
   44a30:	dec00304 	addi	sp,sp,12
   44a34:	f800283a 	ret
   44a38:	80800017 	ldw	r2,0(r16)
   44a3c:	103ff826 	beq	r2,zero,44a20 <_kill_r+0x38>
   44a40:	88800015 	stw	r2,0(r17)
   44a44:	1805883a 	mov	r2,r3
   44a48:	dfc00217 	ldw	ra,8(sp)
   44a4c:	dc400117 	ldw	r17,4(sp)
   44a50:	dc000017 	ldw	r16,0(sp)
   44a54:	dec00304 	addi	sp,sp,12
   44a58:	f800283a 	ret

00044a5c <_malloc_trim_r>:
   44a5c:	defffb04 	addi	sp,sp,-20
   44a60:	dcc00315 	stw	r19,12(sp)
   44a64:	04c00134 	movhi	r19,4
   44a68:	9cd77604 	addi	r19,r19,24024
   44a6c:	dc800215 	stw	r18,8(sp)
   44a70:	dc400115 	stw	r17,4(sp)
   44a74:	dc000015 	stw	r16,0(sp)
   44a78:	2823883a 	mov	r17,r5
   44a7c:	2025883a 	mov	r18,r4
   44a80:	dfc00415 	stw	ra,16(sp)
   44a84:	00451f80 	call	451f8 <__malloc_lock>
   44a88:	98800217 	ldw	r2,8(r19)
   44a8c:	9009883a 	mov	r4,r18
   44a90:	000b883a 	mov	r5,zero
   44a94:	10c00117 	ldw	r3,4(r2)
   44a98:	00bfff04 	movi	r2,-4
   44a9c:	18a0703a 	and	r16,r3,r2
   44aa0:	8463c83a 	sub	r17,r16,r17
   44aa4:	8c401bc4 	addi	r17,r17,111
   44aa8:	8822d1fa 	srli	r17,r17,7
   44aac:	00801fc4 	movi	r2,127
   44ab0:	8c7fffc4 	addi	r17,r17,-1
   44ab4:	882291fa 	slli	r17,r17,7
   44ab8:	1440060e 	bge	r2,r17,44ad4 <_malloc_trim_r+0x78>
   44abc:	004469c0 	call	4469c <_sbrk_r>
   44ac0:	98c00217 	ldw	r3,8(r19)
   44ac4:	9009883a 	mov	r4,r18
   44ac8:	044bc83a 	sub	r5,zero,r17
   44acc:	80c7883a 	add	r3,r16,r3
   44ad0:	10c00926 	beq	r2,r3,44af8 <_malloc_trim_r+0x9c>
   44ad4:	00452180 	call	45218 <__malloc_unlock>
   44ad8:	0005883a 	mov	r2,zero
   44adc:	dfc00417 	ldw	ra,16(sp)
   44ae0:	dcc00317 	ldw	r19,12(sp)
   44ae4:	dc800217 	ldw	r18,8(sp)
   44ae8:	dc400117 	ldw	r17,4(sp)
   44aec:	dc000017 	ldw	r16,0(sp)
   44af0:	dec00504 	addi	sp,sp,20
   44af4:	f800283a 	ret
   44af8:	9009883a 	mov	r4,r18
   44afc:	004469c0 	call	4469c <_sbrk_r>
   44b00:	844dc83a 	sub	r6,r16,r17
   44b04:	00ffffc4 	movi	r3,-1
   44b08:	9009883a 	mov	r4,r18
   44b0c:	000b883a 	mov	r5,zero
   44b10:	01c00134 	movhi	r7,4
   44b14:	39dc2004 	addi	r7,r7,28800
   44b18:	31800054 	ori	r6,r6,1
   44b1c:	10c00926 	beq	r2,r3,44b44 <_malloc_trim_r+0xe8>
   44b20:	38800017 	ldw	r2,0(r7)
   44b24:	98c00217 	ldw	r3,8(r19)
   44b28:	9009883a 	mov	r4,r18
   44b2c:	1445c83a 	sub	r2,r2,r17
   44b30:	38800015 	stw	r2,0(r7)
   44b34:	19800115 	stw	r6,4(r3)
   44b38:	00452180 	call	45218 <__malloc_unlock>
   44b3c:	00800044 	movi	r2,1
   44b40:	003fe606 	br	44adc <_malloc_trim_r+0x80>
   44b44:	004469c0 	call	4469c <_sbrk_r>
   44b48:	99800217 	ldw	r6,8(r19)
   44b4c:	100f883a 	mov	r7,r2
   44b50:	9009883a 	mov	r4,r18
   44b54:	1187c83a 	sub	r3,r2,r6
   44b58:	008003c4 	movi	r2,15
   44b5c:	19400054 	ori	r5,r3,1
   44b60:	10ffdc0e 	bge	r2,r3,44ad4 <_malloc_trim_r+0x78>
   44b64:	00800134 	movhi	r2,4
   44b68:	1098b804 	addi	r2,r2,25312
   44b6c:	10c00017 	ldw	r3,0(r2)
   44b70:	00800134 	movhi	r2,4
   44b74:	109c2004 	addi	r2,r2,28800
   44b78:	31400115 	stw	r5,4(r6)
   44b7c:	38c7c83a 	sub	r3,r7,r3
   44b80:	10c00015 	stw	r3,0(r2)
   44b84:	003fd306 	br	44ad4 <_malloc_trim_r+0x78>

00044b88 <_free_r>:
   44b88:	defffd04 	addi	sp,sp,-12
   44b8c:	dc400115 	stw	r17,4(sp)
   44b90:	dc000015 	stw	r16,0(sp)
   44b94:	dfc00215 	stw	ra,8(sp)
   44b98:	2821883a 	mov	r16,r5
   44b9c:	2023883a 	mov	r17,r4
   44ba0:	28005a26 	beq	r5,zero,44d0c <_free_r+0x184>
   44ba4:	00451f80 	call	451f8 <__malloc_lock>
   44ba8:	823ffe04 	addi	r8,r16,-8
   44bac:	41400117 	ldw	r5,4(r8)
   44bb0:	00bfff84 	movi	r2,-2
   44bb4:	02800134 	movhi	r10,4
   44bb8:	52977604 	addi	r10,r10,24024
   44bbc:	288e703a 	and	r7,r5,r2
   44bc0:	41cd883a 	add	r6,r8,r7
   44bc4:	30c00117 	ldw	r3,4(r6)
   44bc8:	51000217 	ldw	r4,8(r10)
   44bcc:	00bfff04 	movi	r2,-4
   44bd0:	1892703a 	and	r9,r3,r2
   44bd4:	5017883a 	mov	r11,r10
   44bd8:	31006726 	beq	r6,r4,44d78 <_free_r+0x1f0>
   44bdc:	2880004c 	andi	r2,r5,1
   44be0:	1005003a 	cmpeq	r2,r2,zero
   44be4:	32400115 	stw	r9,4(r6)
   44be8:	10001a1e 	bne	r2,zero,44c54 <_free_r+0xcc>
   44bec:	000b883a 	mov	r5,zero
   44bf0:	3247883a 	add	r3,r6,r9
   44bf4:	18800117 	ldw	r2,4(r3)
   44bf8:	1080004c 	andi	r2,r2,1
   44bfc:	1000231e 	bne	r2,zero,44c8c <_free_r+0x104>
   44c00:	280ac03a 	cmpne	r5,r5,zero
   44c04:	3a4f883a 	add	r7,r7,r9
   44c08:	2800451e 	bne	r5,zero,44d20 <_free_r+0x198>
   44c0c:	31000217 	ldw	r4,8(r6)
   44c10:	00800134 	movhi	r2,4
   44c14:	10977804 	addi	r2,r2,24032
   44c18:	20807b26 	beq	r4,r2,44e08 <_free_r+0x280>
   44c1c:	30800317 	ldw	r2,12(r6)
   44c20:	3a07883a 	add	r3,r7,r8
   44c24:	19c00015 	stw	r7,0(r3)
   44c28:	11000215 	stw	r4,8(r2)
   44c2c:	20800315 	stw	r2,12(r4)
   44c30:	38800054 	ori	r2,r7,1
   44c34:	40800115 	stw	r2,4(r8)
   44c38:	28001a26 	beq	r5,zero,44ca4 <_free_r+0x11c>
   44c3c:	8809883a 	mov	r4,r17
   44c40:	dfc00217 	ldw	ra,8(sp)
   44c44:	dc400117 	ldw	r17,4(sp)
   44c48:	dc000017 	ldw	r16,0(sp)
   44c4c:	dec00304 	addi	sp,sp,12
   44c50:	00452181 	jmpi	45218 <__malloc_unlock>
   44c54:	80bffe17 	ldw	r2,-8(r16)
   44c58:	50c00204 	addi	r3,r10,8
   44c5c:	4091c83a 	sub	r8,r8,r2
   44c60:	41000217 	ldw	r4,8(r8)
   44c64:	388f883a 	add	r7,r7,r2
   44c68:	20c06126 	beq	r4,r3,44df0 <_free_r+0x268>
   44c6c:	40800317 	ldw	r2,12(r8)
   44c70:	3247883a 	add	r3,r6,r9
   44c74:	000b883a 	mov	r5,zero
   44c78:	11000215 	stw	r4,8(r2)
   44c7c:	20800315 	stw	r2,12(r4)
   44c80:	18800117 	ldw	r2,4(r3)
   44c84:	1080004c 	andi	r2,r2,1
   44c88:	103fdd26 	beq	r2,zero,44c00 <_free_r+0x78>
   44c8c:	38800054 	ori	r2,r7,1
   44c90:	3a07883a 	add	r3,r7,r8
   44c94:	280ac03a 	cmpne	r5,r5,zero
   44c98:	40800115 	stw	r2,4(r8)
   44c9c:	19c00015 	stw	r7,0(r3)
   44ca0:	283fe61e 	bne	r5,zero,44c3c <_free_r+0xb4>
   44ca4:	00807fc4 	movi	r2,511
   44ca8:	11c01f2e 	bgeu	r2,r7,44d28 <_free_r+0x1a0>
   44cac:	3806d27a 	srli	r3,r7,9
   44cb0:	1800481e 	bne	r3,zero,44dd4 <_free_r+0x24c>
   44cb4:	3804d0fa 	srli	r2,r7,3
   44cb8:	100690fa 	slli	r3,r2,3
   44cbc:	1acd883a 	add	r6,r3,r11
   44cc0:	31400217 	ldw	r5,8(r6)
   44cc4:	31405926 	beq	r6,r5,44e2c <_free_r+0x2a4>
   44cc8:	28800117 	ldw	r2,4(r5)
   44ccc:	00ffff04 	movi	r3,-4
   44cd0:	10c4703a 	and	r2,r2,r3
   44cd4:	3880022e 	bgeu	r7,r2,44ce0 <_free_r+0x158>
   44cd8:	29400217 	ldw	r5,8(r5)
   44cdc:	317ffa1e 	bne	r6,r5,44cc8 <_free_r+0x140>
   44ce0:	29800317 	ldw	r6,12(r5)
   44ce4:	41800315 	stw	r6,12(r8)
   44ce8:	41400215 	stw	r5,8(r8)
   44cec:	8809883a 	mov	r4,r17
   44cf0:	2a000315 	stw	r8,12(r5)
   44cf4:	32000215 	stw	r8,8(r6)
   44cf8:	dfc00217 	ldw	ra,8(sp)
   44cfc:	dc400117 	ldw	r17,4(sp)
   44d00:	dc000017 	ldw	r16,0(sp)
   44d04:	dec00304 	addi	sp,sp,12
   44d08:	00452181 	jmpi	45218 <__malloc_unlock>
   44d0c:	dfc00217 	ldw	ra,8(sp)
   44d10:	dc400117 	ldw	r17,4(sp)
   44d14:	dc000017 	ldw	r16,0(sp)
   44d18:	dec00304 	addi	sp,sp,12
   44d1c:	f800283a 	ret
   44d20:	31000217 	ldw	r4,8(r6)
   44d24:	003fbd06 	br	44c1c <_free_r+0x94>
   44d28:	3806d0fa 	srli	r3,r7,3
   44d2c:	00800044 	movi	r2,1
   44d30:	51400117 	ldw	r5,4(r10)
   44d34:	180890fa 	slli	r4,r3,3
   44d38:	1807d0ba 	srai	r3,r3,2
   44d3c:	22c9883a 	add	r4,r4,r11
   44d40:	21800217 	ldw	r6,8(r4)
   44d44:	10c4983a 	sll	r2,r2,r3
   44d48:	41000315 	stw	r4,12(r8)
   44d4c:	41800215 	stw	r6,8(r8)
   44d50:	288ab03a 	or	r5,r5,r2
   44d54:	22000215 	stw	r8,8(r4)
   44d58:	8809883a 	mov	r4,r17
   44d5c:	51400115 	stw	r5,4(r10)
   44d60:	32000315 	stw	r8,12(r6)
   44d64:	dfc00217 	ldw	ra,8(sp)
   44d68:	dc400117 	ldw	r17,4(sp)
   44d6c:	dc000017 	ldw	r16,0(sp)
   44d70:	dec00304 	addi	sp,sp,12
   44d74:	00452181 	jmpi	45218 <__malloc_unlock>
   44d78:	2880004c 	andi	r2,r5,1
   44d7c:	3a4d883a 	add	r6,r7,r9
   44d80:	1000071e 	bne	r2,zero,44da0 <_free_r+0x218>
   44d84:	80bffe17 	ldw	r2,-8(r16)
   44d88:	4091c83a 	sub	r8,r8,r2
   44d8c:	41000317 	ldw	r4,12(r8)
   44d90:	40c00217 	ldw	r3,8(r8)
   44d94:	308d883a 	add	r6,r6,r2
   44d98:	20c00215 	stw	r3,8(r4)
   44d9c:	19000315 	stw	r4,12(r3)
   44da0:	00800134 	movhi	r2,4
   44da4:	1098b704 	addi	r2,r2,25308
   44da8:	11000017 	ldw	r4,0(r2)
   44dac:	30c00054 	ori	r3,r6,1
   44db0:	52000215 	stw	r8,8(r10)
   44db4:	40c00115 	stw	r3,4(r8)
   44db8:	313fa036 	bltu	r6,r4,44c3c <_free_r+0xb4>
   44dbc:	00800134 	movhi	r2,4
   44dc0:	109a1204 	addi	r2,r2,26696
   44dc4:	11400017 	ldw	r5,0(r2)
   44dc8:	8809883a 	mov	r4,r17
   44dcc:	0044a5c0 	call	44a5c <_malloc_trim_r>
   44dd0:	003f9a06 	br	44c3c <_free_r+0xb4>
   44dd4:	00800104 	movi	r2,4
   44dd8:	10c0072e 	bgeu	r2,r3,44df8 <_free_r+0x270>
   44ddc:	00800504 	movi	r2,20
   44de0:	10c01936 	bltu	r2,r3,44e48 <_free_r+0x2c0>
   44de4:	188016c4 	addi	r2,r3,91
   44de8:	100690fa 	slli	r3,r2,3
   44dec:	003fb306 	br	44cbc <_free_r+0x134>
   44df0:	01400044 	movi	r5,1
   44df4:	003f7e06 	br	44bf0 <_free_r+0x68>
   44df8:	3804d1ba 	srli	r2,r7,6
   44dfc:	10800e04 	addi	r2,r2,56
   44e00:	100690fa 	slli	r3,r2,3
   44e04:	003fad06 	br	44cbc <_free_r+0x134>
   44e08:	22000315 	stw	r8,12(r4)
   44e0c:	22000215 	stw	r8,8(r4)
   44e10:	3a05883a 	add	r2,r7,r8
   44e14:	38c00054 	ori	r3,r7,1
   44e18:	11c00015 	stw	r7,0(r2)
   44e1c:	41000215 	stw	r4,8(r8)
   44e20:	40c00115 	stw	r3,4(r8)
   44e24:	41000315 	stw	r4,12(r8)
   44e28:	003f8406 	br	44c3c <_free_r+0xb4>
   44e2c:	1005d0ba 	srai	r2,r2,2
   44e30:	00c00044 	movi	r3,1
   44e34:	51000117 	ldw	r4,4(r10)
   44e38:	1886983a 	sll	r3,r3,r2
   44e3c:	20c8b03a 	or	r4,r4,r3
   44e40:	51000115 	stw	r4,4(r10)
   44e44:	003fa706 	br	44ce4 <_free_r+0x15c>
   44e48:	00801504 	movi	r2,84
   44e4c:	10c00436 	bltu	r2,r3,44e60 <_free_r+0x2d8>
   44e50:	3804d33a 	srli	r2,r7,12
   44e54:	10801b84 	addi	r2,r2,110
   44e58:	100690fa 	slli	r3,r2,3
   44e5c:	003f9706 	br	44cbc <_free_r+0x134>
   44e60:	00805504 	movi	r2,340
   44e64:	10c00436 	bltu	r2,r3,44e78 <_free_r+0x2f0>
   44e68:	3804d3fa 	srli	r2,r7,15
   44e6c:	10801dc4 	addi	r2,r2,119
   44e70:	100690fa 	slli	r3,r2,3
   44e74:	003f9106 	br	44cbc <_free_r+0x134>
   44e78:	00815504 	movi	r2,1364
   44e7c:	10c0032e 	bgeu	r2,r3,44e8c <_free_r+0x304>
   44e80:	00801f84 	movi	r2,126
   44e84:	00c0fc04 	movi	r3,1008
   44e88:	003f8c06 	br	44cbc <_free_r+0x134>
   44e8c:	3804d4ba 	srli	r2,r7,18
   44e90:	10801f04 	addi	r2,r2,124
   44e94:	100690fa 	slli	r3,r2,3
   44e98:	003f8806 	br	44cbc <_free_r+0x134>

00044e9c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   44e9c:	defffd04 	addi	sp,sp,-12
   44ea0:	df000215 	stw	fp,8(sp)
   44ea4:	df000204 	addi	fp,sp,8
   44ea8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   44eac:	e0bfff17 	ldw	r2,-4(fp)
   44eb0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   44eb4:	e0bffe17 	ldw	r2,-8(fp)
   44eb8:	1005003a 	cmpeq	r2,r2,zero
   44ebc:	1000021e 	bne	r2,zero,44ec8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   44ec0:	002af070 	cmpltui	zero,zero,43969
   44ec4:	00000106 	br	44ecc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   44ec8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   44ecc:	e037883a 	mov	sp,fp
   44ed0:	df000017 	ldw	fp,0(sp)
   44ed4:	dec00104 	addi	sp,sp,4
   44ed8:	f800283a 	ret

00044edc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   44edc:	defffd04 	addi	sp,sp,-12
   44ee0:	dfc00215 	stw	ra,8(sp)
   44ee4:	df000115 	stw	fp,4(sp)
   44ee8:	df000104 	addi	fp,sp,4
   44eec:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   44ef0:	e13fff17 	ldw	r4,-4(fp)
   44ef4:	0044e9c0 	call	44e9c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   44ef8:	003fff06 	br	44ef8 <_exit+0x1c>

00044efc <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   44efc:	deffff04 	addi	sp,sp,-4
   44f00:	df000015 	stw	fp,0(sp)
   44f04:	d839883a 	mov	fp,sp
  return 0;
   44f08:	0005883a 	mov	r2,zero
}
   44f0c:	e037883a 	mov	sp,fp
   44f10:	df000017 	ldw	fp,0(sp)
   44f14:	dec00104 	addi	sp,sp,4
   44f18:	f800283a 	ret

00044f1c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   44f1c:	defffa04 	addi	sp,sp,-24
   44f20:	dfc00515 	stw	ra,20(sp)
   44f24:	df000415 	stw	fp,16(sp)
   44f28:	df000404 	addi	fp,sp,16
   44f2c:	e13ffd15 	stw	r4,-12(fp)
   44f30:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   44f34:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   44f38:	e0bffd17 	ldw	r2,-12(fp)
   44f3c:	10800048 	cmpgei	r2,r2,1
   44f40:	1000301e 	bne	r2,zero,45004 <kill+0xe8>
  {
    switch (sig)
   44f44:	e0bffe17 	ldw	r2,-8(fp)
   44f48:	10800828 	cmpgeui	r2,r2,32
   44f4c:	10002a1e 	bne	r2,zero,44ff8 <kill+0xdc>
   44f50:	e0bffe17 	ldw	r2,-8(fp)
   44f54:	1085883a 	add	r2,r2,r2
   44f58:	1087883a 	add	r3,r2,r2
   44f5c:	00800134 	movhi	r2,4
   44f60:	1093dc04 	addi	r2,r2,20336
   44f64:	1885883a 	add	r2,r3,r2
   44f68:	10800017 	ldw	r2,0(r2)
   44f6c:	1000683a 	jmp	r2
   44f70:	00045018 	cmpnei	zero,zero,4416
   44f74:	00044ff8 	rdprs	zero,zero,4415
   44f78:	00044ff8 	rdprs	zero,zero,4415
   44f7c:	00044ff0 	cmpltui	zero,zero,4415
   44f80:	00044ff0 	cmpltui	zero,zero,4415
   44f84:	00044ff0 	cmpltui	zero,zero,4415
   44f88:	00044ff0 	cmpltui	zero,zero,4415
   44f8c:	00044ff8 	rdprs	zero,zero,4415
   44f90:	00044ff0 	cmpltui	zero,zero,4415
   44f94:	00044ff0 	cmpltui	zero,zero,4415
   44f98:	00044ff0 	cmpltui	zero,zero,4415
   44f9c:	00044ff0 	cmpltui	zero,zero,4415
   44fa0:	00044ff0 	cmpltui	zero,zero,4415
   44fa4:	00044ff0 	cmpltui	zero,zero,4415
   44fa8:	00044ff0 	cmpltui	zero,zero,4415
   44fac:	00044ff0 	cmpltui	zero,zero,4415
   44fb0:	00045018 	cmpnei	zero,zero,4416
   44fb4:	00044ff8 	rdprs	zero,zero,4415
   44fb8:	00044ff8 	rdprs	zero,zero,4415
   44fbc:	00044ff8 	rdprs	zero,zero,4415
   44fc0:	00045018 	cmpnei	zero,zero,4416
   44fc4:	00044ff8 	rdprs	zero,zero,4415
   44fc8:	00044ff8 	rdprs	zero,zero,4415
   44fcc:	00044ff0 	cmpltui	zero,zero,4415
   44fd0:	00044ff0 	cmpltui	zero,zero,4415
   44fd4:	00044ff0 	cmpltui	zero,zero,4415
   44fd8:	00044ff0 	cmpltui	zero,zero,4415
   44fdc:	00044ff0 	cmpltui	zero,zero,4415
   44fe0:	00044ff8 	rdprs	zero,zero,4415
   44fe4:	00044ff8 	rdprs	zero,zero,4415
   44fe8:	00044ff0 	cmpltui	zero,zero,4415
   44fec:	00044ff0 	cmpltui	zero,zero,4415
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   44ff0:	0009883a 	mov	r4,zero
   44ff4:	0044edc0 	call	44edc <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   44ff8:	00800584 	movi	r2,22
   44ffc:	e0bffc15 	stw	r2,-16(fp)
   45000:	00000506 	br	45018 <kill+0xfc>
    }
  }

  else if (pid > 0)
   45004:	e0bffd17 	ldw	r2,-12(fp)
   45008:	10800050 	cmplti	r2,r2,1
   4500c:	1000021e 	bne	r2,zero,45018 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   45010:	008000c4 	movi	r2,3
   45014:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   45018:	e0bffc17 	ldw	r2,-16(fp)
   4501c:	1005003a 	cmpeq	r2,r2,zero
   45020:	1000071e 	bne	r2,zero,45040 <kill+0x124>
  {
    ALT_ERRNO = status;
   45024:	004505c0 	call	4505c <alt_get_errno>
   45028:	1007883a 	mov	r3,r2
   4502c:	e0bffc17 	ldw	r2,-16(fp)
   45030:	18800015 	stw	r2,0(r3)
    return -1;
   45034:	00bfffc4 	movi	r2,-1
   45038:	e0bfff15 	stw	r2,-4(fp)
   4503c:	00000106 	br	45044 <kill+0x128>
  }

  return 0;
   45040:	e03fff15 	stw	zero,-4(fp)
   45044:	e0bfff17 	ldw	r2,-4(fp)
}
   45048:	e037883a 	mov	sp,fp
   4504c:	dfc00117 	ldw	ra,4(sp)
   45050:	df000017 	ldw	fp,0(sp)
   45054:	dec00204 	addi	sp,sp,8
   45058:	f800283a 	ret

0004505c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4505c:	defffd04 	addi	sp,sp,-12
   45060:	dfc00215 	stw	ra,8(sp)
   45064:	df000115 	stw	fp,4(sp)
   45068:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4506c:	00800134 	movhi	r2,4
   45070:	1098be04 	addi	r2,r2,25336
   45074:	10800017 	ldw	r2,0(r2)
   45078:	1005003a 	cmpeq	r2,r2,zero
   4507c:	1000061e 	bne	r2,zero,45098 <alt_get_errno+0x3c>
   45080:	00800134 	movhi	r2,4
   45084:	1098be04 	addi	r2,r2,25336
   45088:	10800017 	ldw	r2,0(r2)
   4508c:	103ee83a 	callr	r2
   45090:	e0bfff15 	stw	r2,-4(fp)
   45094:	00000306 	br	450a4 <alt_get_errno+0x48>
   45098:	00800134 	movhi	r2,4
   4509c:	109a1504 	addi	r2,r2,26708
   450a0:	e0bfff15 	stw	r2,-4(fp)
   450a4:	e0bfff17 	ldw	r2,-4(fp)
}
   450a8:	e037883a 	mov	sp,fp
   450ac:	dfc00117 	ldw	ra,4(sp)
   450b0:	df000017 	ldw	fp,0(sp)
   450b4:	dec00204 	addi	sp,sp,8
   450b8:	f800283a 	ret

000450bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   450bc:	defffe04 	addi	sp,sp,-8
   450c0:	dfc00115 	stw	ra,4(sp)
   450c4:	df000015 	stw	fp,0(sp)
   450c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   450cc:	01000134 	movhi	r4,4
   450d0:	2118bf04 	addi	r4,r4,25340
   450d4:	01400134 	movhi	r5,4
   450d8:	29577604 	addi	r5,r5,24024
   450dc:	01800134 	movhi	r6,4
   450e0:	3198bf04 	addi	r6,r6,25340
   450e4:	004513c0 	call	4513c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   450e8:	01000134 	movhi	r4,4
   450ec:	21000804 	addi	r4,r4,32
   450f0:	01400134 	movhi	r5,4
   450f4:	29400804 	addi	r5,r5,32
   450f8:	01800134 	movhi	r6,4
   450fc:	31800804 	addi	r6,r6,32
   45100:	004513c0 	call	4513c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   45104:	01000134 	movhi	r4,4
   45108:	2116ec04 	addi	r4,r4,23472
   4510c:	01400134 	movhi	r5,4
   45110:	2956ec04 	addi	r5,r5,23472
   45114:	01800134 	movhi	r6,4
   45118:	31977604 	addi	r6,r6,24024
   4511c:	004513c0 	call	4513c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   45120:	00456a80 	call	456a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   45124:	004578c0 	call	4578c <alt_icache_flush_all>
}
   45128:	e037883a 	mov	sp,fp
   4512c:	dfc00117 	ldw	ra,4(sp)
   45130:	df000017 	ldw	fp,0(sp)
   45134:	dec00204 	addi	sp,sp,8
   45138:	f800283a 	ret

0004513c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4513c:	defffc04 	addi	sp,sp,-16
   45140:	df000315 	stw	fp,12(sp)
   45144:	df000304 	addi	fp,sp,12
   45148:	e13ffd15 	stw	r4,-12(fp)
   4514c:	e17ffe15 	stw	r5,-8(fp)
   45150:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   45154:	e0fffe17 	ldw	r3,-8(fp)
   45158:	e0bffd17 	ldw	r2,-12(fp)
   4515c:	18800e26 	beq	r3,r2,45198 <alt_load_section+0x5c>
  {
    while( to != end )
   45160:	00000a06 	br	4518c <alt_load_section+0x50>
    {
      *to++ = *from++;
   45164:	e0bffd17 	ldw	r2,-12(fp)
   45168:	10c00017 	ldw	r3,0(r2)
   4516c:	e0bffe17 	ldw	r2,-8(fp)
   45170:	10c00015 	stw	r3,0(r2)
   45174:	e0bffe17 	ldw	r2,-8(fp)
   45178:	10800104 	addi	r2,r2,4
   4517c:	e0bffe15 	stw	r2,-8(fp)
   45180:	e0bffd17 	ldw	r2,-12(fp)
   45184:	10800104 	addi	r2,r2,4
   45188:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4518c:	e0fffe17 	ldw	r3,-8(fp)
   45190:	e0bfff17 	ldw	r2,-4(fp)
   45194:	18bff31e 	bne	r3,r2,45164 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   45198:	e037883a 	mov	sp,fp
   4519c:	df000017 	ldw	fp,0(sp)
   451a0:	dec00104 	addi	sp,sp,4
   451a4:	f800283a 	ret

000451a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   451a8:	defffd04 	addi	sp,sp,-12
   451ac:	dfc00215 	stw	ra,8(sp)
   451b0:	df000115 	stw	fp,4(sp)
   451b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   451b8:	0009883a 	mov	r4,zero
   451bc:	00453980 	call	45398 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   451c0:	00453cc0 	call	453cc <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   451c4:	00456c40 	call	456c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   451c8:	01000134 	movhi	r4,4
   451cc:	2115ca04 	addi	r4,r4,22312
   451d0:	00457c80 	call	457c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   451d4:	d1216617 	ldw	r4,-31336(gp)
   451d8:	d1616717 	ldw	r5,-31332(gp)
   451dc:	d1a16817 	ldw	r6,-31328(gp)
   451e0:	0041ef00 	call	41ef0 <main>
   451e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   451e8:	01000044 	movi	r4,1
   451ec:	004560c0 	call	4560c <close>
  exit (result);
   451f0:	e13fff17 	ldw	r4,-4(fp)
   451f4:	00457dc0 	call	457dc <exit>

000451f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   451f8:	defffe04 	addi	sp,sp,-8
   451fc:	df000115 	stw	fp,4(sp)
   45200:	df000104 	addi	fp,sp,4
   45204:	e13fff15 	stw	r4,-4(fp)
}
   45208:	e037883a 	mov	sp,fp
   4520c:	df000017 	ldw	fp,0(sp)
   45210:	dec00104 	addi	sp,sp,4
   45214:	f800283a 	ret

00045218 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   45218:	defffe04 	addi	sp,sp,-8
   4521c:	df000115 	stw	fp,4(sp)
   45220:	df000104 	addi	fp,sp,4
   45224:	e13fff15 	stw	r4,-4(fp)
}
   45228:	e037883a 	mov	sp,fp
   4522c:	df000017 	ldw	fp,0(sp)
   45230:	dec00104 	addi	sp,sp,4
   45234:	f800283a 	ret

00045238 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   45238:	defffb04 	addi	sp,sp,-20
   4523c:	dfc00415 	stw	ra,16(sp)
   45240:	df000315 	stw	fp,12(sp)
   45244:	df000304 	addi	fp,sp,12
   45248:	e13ffe15 	stw	r4,-8(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   4524c:	e0bffe17 	ldw	r2,-8(fp)
   45250:	1007883a 	mov	r3,r2
   45254:	00bfffc4 	movi	r2,-1
   45258:	1884703a 	and	r2,r3,r2
   4525c:	e0bffd05 	stb	r2,-12(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   45260:	01000134 	movhi	r4,4
   45264:	2118bc04 	addi	r4,r4,25328
   45268:	e17ffd04 	addi	r5,fp,-12
   4526c:	01800044 	movi	r6,1
   45270:	000f883a 	mov	r7,zero
   45274:	004540c0 	call	4540c <altera_avalon_jtag_uart_write>
   45278:	10bfffd8 	cmpnei	r2,r2,-1
   4527c:	1000031e 	bne	r2,zero,4528c <alt_putchar+0x54>
        return -1;
   45280:	00bfffc4 	movi	r2,-1
   45284:	e0bfff15 	stw	r2,-4(fp)
   45288:	00000206 	br	45294 <alt_putchar+0x5c>
    }
    return c;
   4528c:	e0bffe17 	ldw	r2,-8(fp)
   45290:	e0bfff15 	stw	r2,-4(fp)
   45294:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
}
   45298:	e037883a 	mov	sp,fp
   4529c:	dfc00117 	ldw	ra,4(sp)
   452a0:	df000017 	ldw	fp,0(sp)
   452a4:	dec00204 	addi	sp,sp,8
   452a8:	f800283a 	ret

000452ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   452ac:	defff804 	addi	sp,sp,-32
   452b0:	df000715 	stw	fp,28(sp)
   452b4:	df000704 	addi	fp,sp,28
   452b8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   452bc:	0005303a 	rdctl	r2,status
   452c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   452c4:	e0fffb17 	ldw	r3,-20(fp)
   452c8:	00bfff84 	movi	r2,-2
   452cc:	1884703a 	and	r2,r3,r2
   452d0:	1001703a 	wrctl	status,r2
  
  return context;
   452d4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   452d8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   452dc:	d0a00b17 	ldw	r2,-32724(gp)
   452e0:	10c000c4 	addi	r3,r2,3
   452e4:	00bfff04 	movi	r2,-4
   452e8:	1884703a 	and	r2,r3,r2
   452ec:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   452f0:	d0e00b17 	ldw	r3,-32724(gp)
   452f4:	e0bffe17 	ldw	r2,-8(fp)
   452f8:	1887883a 	add	r3,r3,r2
   452fc:	008001b4 	movhi	r2,6
   45300:	10a1a804 	addi	r2,r2,-31072
   45304:	10c0072e 	bgeu	r2,r3,45324 <sbrk+0x78>
   45308:	e0bffd17 	ldw	r2,-12(fp)
   4530c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45310:	e0bffa17 	ldw	r2,-24(fp)
   45314:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   45318:	00bfffc4 	movi	r2,-1
   4531c:	e0bfff15 	stw	r2,-4(fp)
   45320:	00000c06 	br	45354 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   45324:	d0a00b17 	ldw	r2,-32724(gp)
   45328:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4532c:	d0e00b17 	ldw	r3,-32724(gp)
   45330:	e0bffe17 	ldw	r2,-8(fp)
   45334:	1885883a 	add	r2,r3,r2
   45338:	d0a00b15 	stw	r2,-32724(gp)
   4533c:	e0bffd17 	ldw	r2,-12(fp)
   45340:	e0bff915 	stw	r2,-28(fp)
   45344:	e0bff917 	ldw	r2,-28(fp)
   45348:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4534c:	e0bffc17 	ldw	r2,-16(fp)
   45350:	e0bfff15 	stw	r2,-4(fp)
   45354:	e0bfff17 	ldw	r2,-4(fp)
} 
   45358:	e037883a 	mov	sp,fp
   4535c:	df000017 	ldw	fp,0(sp)
   45360:	dec00104 	addi	sp,sp,4
   45364:	f800283a 	ret

00045368 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   45368:	defffd04 	addi	sp,sp,-12
   4536c:	dfc00215 	stw	ra,8(sp)
   45370:	df000115 	stw	fp,4(sp)
   45374:	df000104 	addi	fp,sp,4
   45378:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4537c:	e13fff17 	ldw	r4,-4(fp)
   45380:	00454b00 	call	454b0 <alt_busy_sleep>
}
   45384:	e037883a 	mov	sp,fp
   45388:	dfc00117 	ldw	ra,4(sp)
   4538c:	df000017 	ldw	fp,0(sp)
   45390:	dec00204 	addi	sp,sp,8
   45394:	f800283a 	ret

00045398 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   45398:	defffd04 	addi	sp,sp,-12
   4539c:	dfc00215 	stw	ra,8(sp)
   453a0:	df000115 	stw	fp,4(sp)
   453a4:	df000104 	addi	fp,sp,4
   453a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   453ac:	00457a80 	call	457a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   453b0:	00800044 	movi	r2,1
   453b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   453b8:	e037883a 	mov	sp,fp
   453bc:	dfc00117 	ldw	ra,4(sp)
   453c0:	df000017 	ldw	fp,0(sp)
   453c4:	dec00204 	addi	sp,sp,8
   453c8:	f800283a 	ret

000453cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   453cc:	deffff04 	addi	sp,sp,-4
   453d0:	df000015 	stw	fp,0(sp)
   453d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   453d8:	00c00134 	movhi	r3,4
   453dc:	18da1904 	addi	r3,r3,26724
   453e0:	00842004 	movi	r2,4224
   453e4:	18800015 	stw	r2,0(r3)
   453e8:	00c00134 	movhi	r3,4
   453ec:	18da1a04 	addi	r3,r3,26728
   453f0:	0080bef4 	movhi	r2,763
   453f4:	10bc2004 	addi	r2,r2,-3968
   453f8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    FIFOED_AVALON_UART_INIT ( UART_WIFI, uart_wifi);
}
   453fc:	e037883a 	mov	sp,fp
   45400:	df000017 	ldw	fp,0(sp)
   45404:	dec00104 	addi	sp,sp,4
   45408:	f800283a 	ret

0004540c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4540c:	defff904 	addi	sp,sp,-28
   45410:	df000615 	stw	fp,24(sp)
   45414:	df000604 	addi	fp,sp,24
   45418:	e13ffc15 	stw	r4,-16(fp)
   4541c:	e17ffd15 	stw	r5,-12(fp)
   45420:	e1bffe15 	stw	r6,-8(fp)
   45424:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   45428:	e0bffc17 	ldw	r2,-16(fp)
   4542c:	10800017 	ldw	r2,0(r2)
   45430:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   45434:	e0bffe17 	ldw	r2,-8(fp)
   45438:	1007883a 	mov	r3,r2
   4543c:	e0bffd17 	ldw	r2,-12(fp)
   45440:	10c5883a 	add	r2,r2,r3
   45444:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   45448:	00001106 	br	45490 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   4544c:	e0bffb17 	ldw	r2,-20(fp)
   45450:	10800104 	addi	r2,r2,4
   45454:	10800037 	ldwio	r2,0(r2)
   45458:	10bfffec 	andhi	r2,r2,65535
   4545c:	1005003a 	cmpeq	r2,r2,zero
   45460:	10000b1e 	bne	r2,zero,45490 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   45464:	e13ffb17 	ldw	r4,-20(fp)
   45468:	e0bffd17 	ldw	r2,-12(fp)
   4546c:	10800003 	ldbu	r2,0(r2)
   45470:	10c03fcc 	andi	r3,r2,255
   45474:	18c0201c 	xori	r3,r3,128
   45478:	18ffe004 	addi	r3,r3,-128
   4547c:	e0bffd17 	ldw	r2,-12(fp)
   45480:	10800044 	addi	r2,r2,1
   45484:	e0bffd15 	stw	r2,-12(fp)
   45488:	2005883a 	mov	r2,r4
   4548c:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   45490:	e0fffd17 	ldw	r3,-12(fp)
   45494:	e0bffa17 	ldw	r2,-24(fp)
   45498:	18bfec36 	bltu	r3,r2,4544c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   4549c:	e0bffe17 	ldw	r2,-8(fp)
}
   454a0:	e037883a 	mov	sp,fp
   454a4:	df000017 	ldw	fp,0(sp)
   454a8:	dec00104 	addi	sp,sp,4
   454ac:	f800283a 	ret

000454b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   454b0:	defffa04 	addi	sp,sp,-24
   454b4:	dfc00515 	stw	ra,20(sp)
   454b8:	df000415 	stw	fp,16(sp)
   454bc:	df000404 	addi	fp,sp,16
   454c0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   454c4:	00800244 	movi	r2,9
   454c8:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   454cc:	e13ffc17 	ldw	r4,-16(fp)
   454d0:	014003f4 	movhi	r5,15
   454d4:	29509004 	addi	r5,r5,16960
   454d8:	004397c0 	call	4397c <__mulsi3>
   454dc:	100b883a 	mov	r5,r2
   454e0:	0100bef4 	movhi	r4,763
   454e4:	213c2004 	addi	r4,r4,-3968
   454e8:	004396c0 	call	4396c <__udivsi3>
   454ec:	100b883a 	mov	r5,r2
   454f0:	01200034 	movhi	r4,32768
   454f4:	213fffc4 	addi	r4,r4,-1
   454f8:	004396c0 	call	4396c <__udivsi3>
   454fc:	100b883a 	mov	r5,r2
   45500:	e13fff17 	ldw	r4,-4(fp)
   45504:	004396c0 	call	4396c <__udivsi3>
   45508:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4550c:	e0bffd17 	ldw	r2,-12(fp)
   45510:	1005003a 	cmpeq	r2,r2,zero
   45514:	10002a1e 	bne	r2,zero,455c0 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   45518:	e03ffe15 	stw	zero,-8(fp)
   4551c:	00001706 	br	4557c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   45520:	00a00034 	movhi	r2,32768
   45524:	10bfffc4 	addi	r2,r2,-1
   45528:	10bfffc4 	addi	r2,r2,-1
   4552c:	103ffe1e 	bne	r2,zero,45528 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   45530:	e13ffc17 	ldw	r4,-16(fp)
   45534:	014003f4 	movhi	r5,15
   45538:	29509004 	addi	r5,r5,16960
   4553c:	004397c0 	call	4397c <__mulsi3>
   45540:	100b883a 	mov	r5,r2
   45544:	0100bef4 	movhi	r4,763
   45548:	213c2004 	addi	r4,r4,-3968
   4554c:	004396c0 	call	4396c <__udivsi3>
   45550:	100b883a 	mov	r5,r2
   45554:	01200034 	movhi	r4,32768
   45558:	213fffc4 	addi	r4,r4,-1
   4555c:	004396c0 	call	4396c <__udivsi3>
   45560:	1007883a 	mov	r3,r2
   45564:	e0bfff17 	ldw	r2,-4(fp)
   45568:	10c5c83a 	sub	r2,r2,r3
   4556c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   45570:	e0bffe17 	ldw	r2,-8(fp)
   45574:	10800044 	addi	r2,r2,1
   45578:	e0bffe15 	stw	r2,-8(fp)
   4557c:	e0fffe17 	ldw	r3,-8(fp)
   45580:	e0bffd17 	ldw	r2,-12(fp)
   45584:	18bfe616 	blt	r3,r2,45520 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   45588:	e13ffc17 	ldw	r4,-16(fp)
   4558c:	014003f4 	movhi	r5,15
   45590:	29509004 	addi	r5,r5,16960
   45594:	004397c0 	call	4397c <__mulsi3>
   45598:	100b883a 	mov	r5,r2
   4559c:	0100bef4 	movhi	r4,763
   455a0:	213c2004 	addi	r4,r4,-3968
   455a4:	004396c0 	call	4396c <__udivsi3>
   455a8:	1009883a 	mov	r4,r2
   455ac:	e17fff17 	ldw	r5,-4(fp)
   455b0:	004397c0 	call	4397c <__mulsi3>
   455b4:	10bfffc4 	addi	r2,r2,-1
   455b8:	103ffe1e 	bne	r2,zero,455b4 <alt_busy_sleep+0x104>
   455bc:	00000d06 	br	455f4 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   455c0:	e13ffc17 	ldw	r4,-16(fp)
   455c4:	014003f4 	movhi	r5,15
   455c8:	29509004 	addi	r5,r5,16960
   455cc:	004397c0 	call	4397c <__mulsi3>
   455d0:	100b883a 	mov	r5,r2
   455d4:	0100bef4 	movhi	r4,763
   455d8:	213c2004 	addi	r4,r4,-3968
   455dc:	004396c0 	call	4396c <__udivsi3>
   455e0:	1009883a 	mov	r4,r2
   455e4:	e17fff17 	ldw	r5,-4(fp)
   455e8:	004397c0 	call	4397c <__mulsi3>
   455ec:	10bfffc4 	addi	r2,r2,-1
   455f0:	00bffe16 	blt	zero,r2,455ec <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   455f4:	0005883a 	mov	r2,zero
}
   455f8:	e037883a 	mov	sp,fp
   455fc:	dfc00117 	ldw	ra,4(sp)
   45600:	df000017 	ldw	fp,0(sp)
   45604:	dec00204 	addi	sp,sp,8
   45608:	f800283a 	ret

0004560c <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
   4560c:	defffd04 	addi	sp,sp,-12
   45610:	dfc00215 	stw	ra,8(sp)
   45614:	df000115 	stw	fp,4(sp)
   45618:	df000104 	addi	fp,sp,4
   4561c:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
   45620:	00456480 	call	45648 <alt_get_errno>
   45624:	1007883a 	mov	r3,r2
   45628:	00801604 	movi	r2,88
   4562c:	18800015 	stw	r2,0(r3)
  return -1;
   45630:	00bfffc4 	movi	r2,-1
}
   45634:	e037883a 	mov	sp,fp
   45638:	dfc00117 	ldw	ra,4(sp)
   4563c:	df000017 	ldw	fp,0(sp)
   45640:	dec00204 	addi	sp,sp,8
   45644:	f800283a 	ret

00045648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45648:	defffd04 	addi	sp,sp,-12
   4564c:	dfc00215 	stw	ra,8(sp)
   45650:	df000115 	stw	fp,4(sp)
   45654:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   45658:	00800134 	movhi	r2,4
   4565c:	1098be04 	addi	r2,r2,25336
   45660:	10800017 	ldw	r2,0(r2)
   45664:	1005003a 	cmpeq	r2,r2,zero
   45668:	1000061e 	bne	r2,zero,45684 <alt_get_errno+0x3c>
   4566c:	00800134 	movhi	r2,4
   45670:	1098be04 	addi	r2,r2,25336
   45674:	10800017 	ldw	r2,0(r2)
   45678:	103ee83a 	callr	r2
   4567c:	e0bfff15 	stw	r2,-4(fp)
   45680:	00000306 	br	45690 <alt_get_errno+0x48>
   45684:	00800134 	movhi	r2,4
   45688:	109a1504 	addi	r2,r2,26708
   4568c:	e0bfff15 	stw	r2,-4(fp)
   45690:	e0bfff17 	ldw	r2,-4(fp)
}
   45694:	e037883a 	mov	sp,fp
   45698:	dfc00117 	ldw	ra,4(sp)
   4569c:	df000017 	ldw	fp,0(sp)
   456a0:	dec00204 	addi	sp,sp,8
   456a4:	f800283a 	ret

000456a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   456a8:	deffff04 	addi	sp,sp,-4
   456ac:	df000015 	stw	fp,0(sp)
   456b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   456b4:	e037883a 	mov	sp,fp
   456b8:	df000017 	ldw	fp,0(sp)
   456bc:	dec00104 	addi	sp,sp,4
   456c0:	f800283a 	ret

000456c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   456c4:	defffd04 	addi	sp,sp,-12
   456c8:	dfc00215 	stw	ra,8(sp)
   456cc:	df000115 	stw	fp,4(sp)
   456d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   456d4:	00bfff04 	movi	r2,-4
   456d8:	00c00134 	movhi	r3,4
   456dc:	18d6ec04 	addi	r3,r3,23472
   456e0:	1885883a 	add	r2,r3,r2
   456e4:	e0bfff15 	stw	r2,-4(fp)
   456e8:	00000606 	br	45704 <_do_ctors+0x40>
        (*ctor) (); 
   456ec:	e0bfff17 	ldw	r2,-4(fp)
   456f0:	10800017 	ldw	r2,0(r2)
   456f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   456f8:	e0bfff17 	ldw	r2,-4(fp)
   456fc:	10bfff04 	addi	r2,r2,-4
   45700:	e0bfff15 	stw	r2,-4(fp)
   45704:	e0ffff17 	ldw	r3,-4(fp)
   45708:	00800134 	movhi	r2,4
   4570c:	1096ea04 	addi	r2,r2,23464
   45710:	18bff62e 	bgeu	r3,r2,456ec <_do_ctors+0x28>
        (*ctor) (); 
}
   45714:	e037883a 	mov	sp,fp
   45718:	dfc00117 	ldw	ra,4(sp)
   4571c:	df000017 	ldw	fp,0(sp)
   45720:	dec00204 	addi	sp,sp,8
   45724:	f800283a 	ret

00045728 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   45728:	defffd04 	addi	sp,sp,-12
   4572c:	dfc00215 	stw	ra,8(sp)
   45730:	df000115 	stw	fp,4(sp)
   45734:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   45738:	00bfff04 	movi	r2,-4
   4573c:	00c00134 	movhi	r3,4
   45740:	18d6ec04 	addi	r3,r3,23472
   45744:	1885883a 	add	r2,r3,r2
   45748:	e0bfff15 	stw	r2,-4(fp)
   4574c:	00000606 	br	45768 <_do_dtors+0x40>
        (*dtor) (); 
   45750:	e0bfff17 	ldw	r2,-4(fp)
   45754:	10800017 	ldw	r2,0(r2)
   45758:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4575c:	e0bfff17 	ldw	r2,-4(fp)
   45760:	10bfff04 	addi	r2,r2,-4
   45764:	e0bfff15 	stw	r2,-4(fp)
   45768:	e0ffff17 	ldw	r3,-4(fp)
   4576c:	00800134 	movhi	r2,4
   45770:	1096ec04 	addi	r2,r2,23472
   45774:	18bff62e 	bgeu	r3,r2,45750 <_do_dtors+0x28>
        (*dtor) (); 
}
   45778:	e037883a 	mov	sp,fp
   4577c:	dfc00117 	ldw	ra,4(sp)
   45780:	df000017 	ldw	fp,0(sp)
   45784:	dec00204 	addi	sp,sp,8
   45788:	f800283a 	ret

0004578c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4578c:	deffff04 	addi	sp,sp,-4
   45790:	df000015 	stw	fp,0(sp)
   45794:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   45798:	e037883a 	mov	sp,fp
   4579c:	df000017 	ldw	fp,0(sp)
   457a0:	dec00104 	addi	sp,sp,4
   457a4:	f800283a 	ret

000457a8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   457a8:	deffff04 	addi	sp,sp,-4
   457ac:	df000015 	stw	fp,0(sp)
   457b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   457b4:	000170fa 	wrctl	ienable,zero
}
   457b8:	e037883a 	mov	sp,fp
   457bc:	df000017 	ldw	fp,0(sp)
   457c0:	dec00104 	addi	sp,sp,4
   457c4:	f800283a 	ret

000457c8 <atexit>:
   457c8:	200b883a 	mov	r5,r4
   457cc:	000d883a 	mov	r6,zero
   457d0:	0009883a 	mov	r4,zero
   457d4:	000f883a 	mov	r7,zero
   457d8:	00457fc1 	jmpi	457fc <__register_exitproc>

000457dc <exit>:
   457dc:	defffe04 	addi	sp,sp,-8
   457e0:	dc400015 	stw	r17,0(sp)
   457e4:	000b883a 	mov	r5,zero
   457e8:	2023883a 	mov	r17,r4
   457ec:	dfc00115 	stw	ra,4(sp)
   457f0:	004596c0 	call	4596c <__call_exitprocs>
   457f4:	8809883a 	mov	r4,r17
   457f8:	0044edc0 	call	44edc <_exit>

000457fc <__register_exitproc>:
   457fc:	defff904 	addi	sp,sp,-28
   45800:	00800134 	movhi	r2,4
   45804:	1098ba04 	addi	r2,r2,25320
   45808:	dc400115 	stw	r17,4(sp)
   4580c:	14400017 	ldw	r17,0(r2)
   45810:	dc000015 	stw	r16,0(sp)
   45814:	dd400515 	stw	r21,20(sp)
   45818:	8c000c17 	ldw	r16,48(r17)
   4581c:	dd000415 	stw	r20,16(sp)
   45820:	dcc00315 	stw	r19,12(sp)
   45824:	dc800215 	stw	r18,8(sp)
   45828:	dfc00615 	stw	ra,24(sp)
   4582c:	2025883a 	mov	r18,r4
   45830:	282b883a 	mov	r21,r5
   45834:	3029883a 	mov	r20,r6
   45838:	3827883a 	mov	r19,r7
   4583c:	80002626 	beq	r16,zero,458d8 <__register_exitproc+0xdc>
   45840:	81400117 	ldw	r5,4(r16)
   45844:	008007c4 	movi	r2,31
   45848:	11403716 	blt	r2,r5,45928 <__register_exitproc+0x12c>
   4584c:	90002026 	beq	r18,zero,458d0 <__register_exitproc+0xd4>
   45850:	81802217 	ldw	r6,136(r16)
   45854:	30002926 	beq	r6,zero,458fc <__register_exitproc+0x100>
   45858:	81400117 	ldw	r5,4(r16)
   4585c:	00c00044 	movi	r3,1
   45860:	31004017 	ldw	r4,256(r6)
   45864:	1946983a 	sll	r3,r3,r5
   45868:	2945883a 	add	r2,r5,r5
   4586c:	1085883a 	add	r2,r2,r2
   45870:	1185883a 	add	r2,r2,r6
   45874:	20c8b03a 	or	r4,r4,r3
   45878:	14c02015 	stw	r19,128(r2)
   4587c:	15000015 	stw	r20,0(r2)
   45880:	00800084 	movi	r2,2
   45884:	31004015 	stw	r4,256(r6)
   45888:	90801826 	beq	r18,r2,458ec <__register_exitproc+0xf0>
   4588c:	2945883a 	add	r2,r5,r5
   45890:	1085883a 	add	r2,r2,r2
   45894:	1405883a 	add	r2,r2,r16
   45898:	28c00044 	addi	r3,r5,1
   4589c:	0009883a 	mov	r4,zero
   458a0:	15400215 	stw	r21,8(r2)
   458a4:	80c00115 	stw	r3,4(r16)
   458a8:	2005883a 	mov	r2,r4
   458ac:	dfc00617 	ldw	ra,24(sp)
   458b0:	dd400517 	ldw	r21,20(sp)
   458b4:	dd000417 	ldw	r20,16(sp)
   458b8:	dcc00317 	ldw	r19,12(sp)
   458bc:	dc800217 	ldw	r18,8(sp)
   458c0:	dc400117 	ldw	r17,4(sp)
   458c4:	dc000017 	ldw	r16,0(sp)
   458c8:	dec00704 	addi	sp,sp,28
   458cc:	f800283a 	ret
   458d0:	81400117 	ldw	r5,4(r16)
   458d4:	003fed06 	br	4588c <__register_exitproc+0x90>
   458d8:	00800134 	movhi	r2,4
   458dc:	109c2a04 	addi	r2,r2,28840
   458e0:	1021883a 	mov	r16,r2
   458e4:	88800c15 	stw	r2,48(r17)
   458e8:	003fd506 	br	45840 <__register_exitproc+0x44>
   458ec:	30804117 	ldw	r2,260(r6)
   458f0:	10c4b03a 	or	r2,r2,r3
   458f4:	30804115 	stw	r2,260(r6)
   458f8:	003fe406 	br	4588c <__register_exitproc+0x90>
   458fc:	00800134 	movhi	r2,4
   45900:	108fca04 	addi	r2,r2,16168
   45904:	10000b26 	beq	r2,zero,45934 <__register_exitproc+0x138>
   45908:	01004204 	movi	r4,264
   4590c:	103ee83a 	callr	r2
   45910:	10000826 	beq	r2,zero,45934 <__register_exitproc+0x138>
   45914:	100d883a 	mov	r6,r2
   45918:	10004015 	stw	zero,256(r2)
   4591c:	10004115 	stw	zero,260(r2)
   45920:	80802215 	stw	r2,136(r16)
   45924:	003fcc06 	br	45858 <__register_exitproc+0x5c>
   45928:	00800134 	movhi	r2,4
   4592c:	108fca04 	addi	r2,r2,16168
   45930:	1000021e 	bne	r2,zero,4593c <__register_exitproc+0x140>
   45934:	013fffc4 	movi	r4,-1
   45938:	003fdb06 	br	458a8 <__register_exitproc+0xac>
   4593c:	01002304 	movi	r4,140
   45940:	103ee83a 	callr	r2
   45944:	1007883a 	mov	r3,r2
   45948:	103ffa26 	beq	r2,zero,45934 <__register_exitproc+0x138>
   4594c:	88800c17 	ldw	r2,48(r17)
   45950:	1821883a 	mov	r16,r3
   45954:	18000115 	stw	zero,4(r3)
   45958:	18800015 	stw	r2,0(r3)
   4595c:	88c00c15 	stw	r3,48(r17)
   45960:	903fdb26 	beq	r18,zero,458d0 <__register_exitproc+0xd4>
   45964:	003fba06 	br	45850 <__register_exitproc+0x54>

00045968 <register_fini>:
   45968:	f800283a 	ret

0004596c <__call_exitprocs>:
   4596c:	defff304 	addi	sp,sp,-52
   45970:	00800134 	movhi	r2,4
   45974:	1098ba04 	addi	r2,r2,25320
   45978:	df000b15 	stw	fp,44(sp)
   4597c:	17000017 	ldw	fp,0(r2)
   45980:	00800134 	movhi	r2,4
   45984:	108fc504 	addi	r2,r2,16148
   45988:	1005003a 	cmpeq	r2,r2,zero
   4598c:	d8800215 	stw	r2,8(sp)
   45990:	e0800c04 	addi	r2,fp,48
   45994:	dd800915 	stw	r22,36(sp)
   45998:	dd400815 	stw	r21,32(sp)
   4599c:	dfc00c15 	stw	ra,48(sp)
   459a0:	ddc00a15 	stw	r23,40(sp)
   459a4:	dd000715 	stw	r20,28(sp)
   459a8:	dcc00615 	stw	r19,24(sp)
   459ac:	dc800515 	stw	r18,20(sp)
   459b0:	dc400415 	stw	r17,16(sp)
   459b4:	dc000315 	stw	r16,12(sp)
   459b8:	282d883a 	mov	r22,r5
   459bc:	d9000115 	stw	r4,4(sp)
   459c0:	d8800015 	stw	r2,0(sp)
   459c4:	282b003a 	cmpeq	r21,r5,zero
   459c8:	e4400c17 	ldw	r17,48(fp)
   459cc:	88001226 	beq	r17,zero,45a18 <__call_exitprocs+0xac>
   459d0:	ddc00017 	ldw	r23,0(sp)
   459d4:	88800117 	ldw	r2,4(r17)
   459d8:	8c802217 	ldw	r18,136(r17)
   459dc:	143fffc4 	addi	r16,r2,-1
   459e0:	80000b16 	blt	r16,zero,45a10 <__call_exitprocs+0xa4>
   459e4:	9027003a 	cmpeq	r19,r18,zero
   459e8:	a800171e 	bne	r21,zero,45a48 <__call_exitprocs+0xdc>
   459ec:	9800051e 	bne	r19,zero,45a04 <__call_exitprocs+0x98>
   459f0:	8409883a 	add	r4,r16,r16
   459f4:	2105883a 	add	r2,r4,r4
   459f8:	1485883a 	add	r2,r2,r18
   459fc:	10c02017 	ldw	r3,128(r2)
   45a00:	b0c01226 	beq	r22,r3,45a4c <__call_exitprocs+0xe0>
   45a04:	843fffc4 	addi	r16,r16,-1
   45a08:	00bfffc4 	movi	r2,-1
   45a0c:	80bff61e 	bne	r16,r2,459e8 <__call_exitprocs+0x7c>
   45a10:	d8800217 	ldw	r2,8(sp)
   45a14:	10003226 	beq	r2,zero,45ae0 <__call_exitprocs+0x174>
   45a18:	dfc00c17 	ldw	ra,48(sp)
   45a1c:	df000b17 	ldw	fp,44(sp)
   45a20:	ddc00a17 	ldw	r23,40(sp)
   45a24:	dd800917 	ldw	r22,36(sp)
   45a28:	dd400817 	ldw	r21,32(sp)
   45a2c:	dd000717 	ldw	r20,28(sp)
   45a30:	dcc00617 	ldw	r19,24(sp)
   45a34:	dc800517 	ldw	r18,20(sp)
   45a38:	dc400417 	ldw	r17,16(sp)
   45a3c:	dc000317 	ldw	r16,12(sp)
   45a40:	dec00d04 	addi	sp,sp,52
   45a44:	f800283a 	ret
   45a48:	8409883a 	add	r4,r16,r16
   45a4c:	88c00117 	ldw	r3,4(r17)
   45a50:	2105883a 	add	r2,r4,r4
   45a54:	1445883a 	add	r2,r2,r17
   45a58:	18ffffc4 	addi	r3,r3,-1
   45a5c:	11800217 	ldw	r6,8(r2)
   45a60:	1c001826 	beq	r3,r16,45ac4 <__call_exitprocs+0x158>
   45a64:	10000215 	stw	zero,8(r2)
   45a68:	303fe626 	beq	r6,zero,45a04 <__call_exitprocs+0x98>
   45a6c:	8d000117 	ldw	r20,4(r17)
   45a70:	9800121e 	bne	r19,zero,45abc <__call_exitprocs+0x150>
   45a74:	00c00044 	movi	r3,1
   45a78:	1c06983a 	sll	r3,r3,r16
   45a7c:	90804017 	ldw	r2,256(r18)
   45a80:	1884703a 	and	r2,r3,r2
   45a84:	10000d26 	beq	r2,zero,45abc <__call_exitprocs+0x150>
   45a88:	90804117 	ldw	r2,260(r18)
   45a8c:	1884703a 	and	r2,r3,r2
   45a90:	10000e1e 	bne	r2,zero,45acc <__call_exitprocs+0x160>
   45a94:	2105883a 	add	r2,r4,r4
   45a98:	1485883a 	add	r2,r2,r18
   45a9c:	11400017 	ldw	r5,0(r2)
   45aa0:	d9000117 	ldw	r4,4(sp)
   45aa4:	303ee83a 	callr	r6
   45aa8:	88800117 	ldw	r2,4(r17)
   45aac:	a0bfc61e 	bne	r20,r2,459c8 <__call_exitprocs+0x5c>
   45ab0:	b8800017 	ldw	r2,0(r23)
   45ab4:	147fd326 	beq	r2,r17,45a04 <__call_exitprocs+0x98>
   45ab8:	003fc306 	br	459c8 <__call_exitprocs+0x5c>
   45abc:	303ee83a 	callr	r6
   45ac0:	003ff906 	br	45aa8 <__call_exitprocs+0x13c>
   45ac4:	8c000115 	stw	r16,4(r17)
   45ac8:	003fe706 	br	45a68 <__call_exitprocs+0xfc>
   45acc:	2105883a 	add	r2,r4,r4
   45ad0:	1485883a 	add	r2,r2,r18
   45ad4:	11000017 	ldw	r4,0(r2)
   45ad8:	303ee83a 	callr	r6
   45adc:	003ff206 	br	45aa8 <__call_exitprocs+0x13c>
   45ae0:	88800117 	ldw	r2,4(r17)
   45ae4:	10000b1e 	bne	r2,zero,45b14 <__call_exitprocs+0x1a8>
   45ae8:	89000017 	ldw	r4,0(r17)
   45aec:	20000a26 	beq	r4,zero,45b18 <__call_exitprocs+0x1ac>
   45af0:	b9000015 	stw	r4,0(r23)
   45af4:	90000226 	beq	r18,zero,45b00 <__call_exitprocs+0x194>
   45af8:	9009883a 	mov	r4,r18
   45afc:	0043f140 	call	43f14 <free>
   45b00:	8809883a 	mov	r4,r17
   45b04:	0043f140 	call	43f14 <free>
   45b08:	bc400017 	ldw	r17,0(r23)
   45b0c:	883fb11e 	bne	r17,zero,459d4 <__call_exitprocs+0x68>
   45b10:	003fc106 	br	45a18 <__call_exitprocs+0xac>
   45b14:	89000017 	ldw	r4,0(r17)
   45b18:	882f883a 	mov	r23,r17
   45b1c:	2023883a 	mov	r17,r4
   45b20:	883fac1e 	bne	r17,zero,459d4 <__call_exitprocs+0x68>
   45b24:	003fbc06 	br	45a18 <__call_exitprocs+0xac>
   45b28:	0201ffff 	0x201ffff
   45b2c:	883a0000 	call	883a000 <__alt_data_end+0x87e1960>
   45b30:	010d0bff 	0x10d0bff
   45b34:	7f010002 	0x7f010002
   45b38:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b3c:	00045ce0 	cmpeqi	zero,zero,4467
   45b40:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b44:	010d0bff 	0x10d0bff
   45b48:	01000004 	movi	r4,0
   45b4c:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45b50:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b54:	010d0bff 	0x10d0bff
   45b58:	01000004 	movi	r4,0
   45b5c:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45b60:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b64:	010d0bff 	0x10d0bff
   45b68:	01000004 	movi	r4,0
   45b6c:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0-0x3fff0>
   45b70:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b74:	010d0bff 	0x10d0bff
   45b78:	7f010002 	0x7f010002
   45b7c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b80:	00045ce0 	cmpeqi	zero,zero,4467
   45b84:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0-0x40000>
   45b88:	01090bff 	0x1090bff
   45b8c:	7f010002 	0x7f010002
	...
   45b98:	01090bff 	0x1090bff
   45b9c:	7f010002 	0x7f010002
	...
   45ba8:	000400bc 	xorhi	zero,zero,4098
   45bac:	00045968 	cmpgeui	zero,zero,4453
