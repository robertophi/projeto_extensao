
testeWifi.elf:     file format elf32-littlenios2
testeWifi.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040140

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000083c memsz 0x0000083c flags r-x
    LOAD off    0x0000185c vaddr 0x0004085c paddr 0x00040864 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x0000186c vaddr 0x0004086c paddr 0x0004086c align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000006a0  00040140  00040140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  000407e0  000407e0  000017e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  0004085c  00040864  0000185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  0004086c  0004086c  0000186c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000278  00000000  00000000  00001890  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000033f  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001559  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b35  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000027a1  00000000  00000000  00003ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002fc  00000000  00000000  00006678  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007d1  00000000  00000000  00006974  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000051e  00000000  00000000  00007145  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007664  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000076a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000087ab  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000087ae  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000087b3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000087b4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000087b5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000087c0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000087cb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000087d6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000032  00000000  00000000  000087e1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00039ba9  00000000  00000000  00008813  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040140 l    d  .text	00000000 .text
000407e0 l    d  .rodata	00000000 .rodata
0004085c l    d  .rwdata	00000000 .rwdata
0004086c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00040178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 testeWifi.c
0004025c l     F .text	0000009c readUART
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0004045c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004065c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000404e8 g     F .text	0000002c alt_main
00040884 g     O .bss	00000100 alt_irq
00040864 g       *ABS*	00000000 __flash_rwdata_start
00040880 g     O .bss	00000004 uart_wifi
00040194 g     F .text	0000008c writeCommand
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004017c g     F .text	00000018 waitForStatusReady
00040878 g     O .bss	00000004 alt_argv
0004885c g       *ABS*	00000000 _gp
00040564 g     F .text	00000004 usleep
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00040798 g     F .text	00000008 __udivsi3
000403bc g     F .text	000000a0 alt_irq_register
00040984 g       *ABS*	00000000 __bss_end
00040870 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	00000054 alt_irq_handler
0004064c g     F .text	00000004 alt_dcache_flush_all
00040864 g       *ABS*	00000000 __ram_rwdata_end
0004085c g       *ABS*	00000000 __ram_rodata_end
00040860 g     O .rwdata	00000004 jtag_uart_0
000407a0 g     F .text	00000008 __umodsi3
00040984 g       *ABS*	00000000 end
000586a0 g       *ABS*	00000000 __alt_stack_pointer
0004058c g     F .text	00000034 altera_avalon_jtag_uart_write
00040140 g     F .text	0000003c _start
0004086c g     O .bss	00000004 data_ptr
00040568 g     F .text	00000004 alt_sys_init
000407a8 g     F .text	00000038 __mulsi3
0004085c g       *ABS*	00000000 __ram_rwdata_start
000407e0 g       *ABS*	00000000 __ram_rodata_start
000405c0 g     F .text	0000008c alt_busy_sleep
00040984 g       *ABS*	00000000 __alt_stack_base
0004086c g       *ABS*	00000000 __bss_start
0004039c g     F .text	00000020 main
0004087c g     O .bss	00000004 alt_envp
000406d8 g     F .text	00000060 __divsi3
000407e0 g       *ABS*	00000000 __flash_rodata_start
00040220 g     F .text	0000003c serial_init
0004056c g     F .text	00000020 alt_irq_init
00040874 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040864 g       *ABS*	00000000 _edata
00040984 g       *ABS*	00000000 _end
00040140 g       *ABS*	00000000 __ram_exceptions_end
000402f8 g     F .text	000000a4 wifi_init
00040654 g     F .text	00000008 altera_nios2_qsys_irq_init
0004000c g       .entry	00000000 exit
00040738 g     F .text	00000060 __modsi3
000586a0 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004000c g       .entry	00000000 _exit
00040514 g     F .text	00000050 alt_putchar
00040650 g     F .text	00000004 alt_icache_flush_all
0004085c g     O .rwdata	00000004 alt_priority_mask
0004047c g     F .text	0000006c alt_load



Disassembly of section .entry:

00040000 <__reset>:
   40000:	00400134 	movhi	at,4
   40004:	08405014 	ori	at,at,320
   40008:	0800683a 	jmp	at

0004000c <_exit>:
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:
   40020:	deffed04 	addi	sp,sp,-76
   40024:	dfc00015 	stw	ra,0(sp)
   40028:	d8400215 	stw	at,8(sp)
   4002c:	d8800315 	stw	r2,12(sp)
   40030:	d8c00415 	stw	r3,16(sp)
   40034:	d9000515 	stw	r4,20(sp)
   40038:	d9400615 	stw	r5,24(sp)
   4003c:	d9800715 	stw	r6,28(sp)
   40040:	d9c00815 	stw	r7,32(sp)
   40044:	000b307a 	rdctl	r5,estatus
   40048:	da000915 	stw	r8,36(sp)
   4004c:	da400a15 	stw	r9,40(sp)
   40050:	da800b15 	stw	r10,44(sp)
   40054:	dac00c15 	stw	r11,48(sp)
   40058:	db000d15 	stw	r12,52(sp)
   4005c:	db400e15 	stw	r13,56(sp)
   40060:	db800f15 	stw	r14,60(sp)
   40064:	dbc01015 	stw	r15,64(sp)
   40068:	d9401115 	stw	r5,68(sp)
   4006c:	ebffff04 	addi	r15,ea,-4
   40070:	dbc01215 	stw	r15,72(sp)
   40074:	0009313a 	rdctl	r4,ipending
   40078:	2880004c 	andi	r2,r5,1
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
   40084:	00400ec0 	call	400ec <alt_irq_handler>
   40088:	00000306 	br	40098 <alt_exception+0x78>
   4008c:	df401215 	stw	ea,72(sp)
   40090:	e8bfff17 	ldw	r2,-4(ea)
   40094:	003da03a 	break	0
   40098:	d9401117 	ldw	r5,68(sp)
   4009c:	df401217 	ldw	ea,72(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)
   400a4:	2801707a 	wrctl	estatus,r5
   400a8:	d8400217 	ldw	at,8(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
   400c4:	da000917 	ldw	r8,36(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
   400e4:	dec01304 	addi	sp,sp,76
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
   400ec:	deffff04 	addi	sp,sp,-4
   400f0:	dfc00015 	stw	ra,0(sp)
   400f4:	0009313a 	rdctl	r4,ipending
   400f8:	00c00044 	movi	r3,1
   400fc:	01400134 	movhi	r5,4
   40100:	29422104 	addi	r5,r5,2180
   40104:	20c4703a 	and	r2,r4,r3
   40108:	18c7883a 	add	r3,r3,r3
   4010c:	10000726 	beq	r2,zero,4012c <alt_irq_handler+0x40>
   40110:	29000117 	ldw	r4,4(r5)
   40114:	28800017 	ldw	r2,0(r5)
   40118:	103ee83a 	callr	r2
   4011c:	0005313a 	rdctl	r2,ipending
   40120:	10000426 	beq	r2,zero,40134 <alt_irq_handler+0x48>
   40124:	1009883a 	mov	r4,r2
   40128:	003ff306 	br	400f8 <alt_irq_handler+0xc>
   4012c:	29400204 	addi	r5,r5,8
   40130:	003ff406 	br	40104 <alt_irq_handler+0x18>
   40134:	dfc00017 	ldw	ra,0(sp)
   40138:	dec00104 	addi	sp,sp,4
   4013c:	f800283a 	ret

Disassembly of section .text:

00040140 <_start>:
   40140:	06c00174 	movhi	sp,5
   40144:	dee1a814 	ori	sp,sp,34464
   40148:	06800134 	movhi	gp,4
   4014c:	d6a21714 	ori	gp,gp,34908
   40150:	00800134 	movhi	r2,4
   40154:	10821b14 	ori	r2,r2,2156
   40158:	00c00134 	movhi	r3,4
   4015c:	18c26114 	ori	r3,r3,2436
   40160:	10c00326 	beq	r2,r3,40170 <_start+0x30>
   40164:	10000015 	stw	zero,0(r2)
   40168:	10800104 	addi	r2,r2,4
   4016c:	10fffd36 	bltu	r2,r3,40164 <_start+0x24>
   40170:	004047c0 	call	4047c <alt_load>
   40174:	00404e80 	call	404e8 <alt_main>

00040178 <alt_after_alt_main>:
   40178:	003fff06 	br	40178 <alt_after_alt_main>

0004017c <waitForStatusReady>:
}


//Para esperar o término do envio ou recebimento
//O registrador de status é o mesmo para os dois casos, só muda a mask a ser comparada
void waitForStatusReady(unsigned int mask){
   4017c:	00c00204 	movi	r3,8
	char status;
	do{
		status = IORD_FIFOED_AVALON_UART_STATUS(UART_WIFI_BASE);
   40180:	18800037 	ldwio	r2,0(r3)
		status = status & mask;
	}while(status==0x00);
   40184:	1104703a 	and	r2,r2,r4
   40188:	10803fcc 	andi	r2,r2,255
   4018c:	103ffc26 	beq	r2,zero,40180 <waitForStatusReady+0x4>

}
   40190:	f800283a 	ret

00040194 <writeCommand>:



//Função usada para enviar os comandos para o módulo
//Envia os caractéres de final de comando (\r e \n) automáticamente
void writeCommand(char message[]){
   40194:	defffd04 	addi	sp,sp,-12
   40198:	dfc00215 	stw	ra,8(sp)
   4019c:	dc400115 	stw	r17,4(sp)
   401a0:	dc000015 	stw	r16,0(sp)
	int i=0;
	char M=message[i];
   401a4:	20c00003 	ldbu	r3,0(r4)
	//disable interrupts
	IOWR(UART_WIFI_BASE, 3, 0);
   401a8:	00800304 	movi	r2,12
   401ac:	10000035 	stwio	zero,0(r2)
   401b0:	2021883a 	mov	r16,r4
   401b4:	00000406 	br	401c8 <writeCommand+0x34>


	while(M != '\0'){
		//Envia todos os caractéres do comando, até encontrar \0
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   401b8:	004017c0 	call	4017c <waitForStatusReady>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,M);
   401bc:	00800104 	movi	r2,4
   401c0:	14400035 	stwio	r17,0(r2)
		i=i+1;
		M=message[i];
   401c4:	80c00003 	ldbu	r3,0(r16)
	char M=message[i];
	//disable interrupts
	IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   401c8:	1c403fcc 	andi	r17,r3,255
   401cc:	8c40201c 	xori	r17,r17,128
   401d0:	8c7fe004 	addi	r17,r17,-128
		//Envia todos os caractéres do comando, até encontrar \0
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   401d4:	01001004 	movi	r4,64
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,M);
		i=i+1;
		M=message[i];
   401d8:	84000044 	addi	r16,r16,1
	char M=message[i];
	//disable interrupts
	IOWR(UART_WIFI_BASE, 3, 0);


	while(M != '\0'){
   401dc:	883ff61e 	bne	r17,zero,401b8 <writeCommand+0x24>
	}

	//Send end of package characters
	//Padrão do esp8266
		//Send '\r'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   401e0:	004017c0 	call	4017c <waitForStatusReady>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\r');
   401e4:	04000104 	movi	r16,4
   401e8:	00800344 	movi	r2,13
   401ec:	80800035 	stwio	r2,0(r16)
		//Send '\n'
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_TRDY_MSK);
   401f0:	01001004 	movi	r4,64
   401f4:	004017c0 	call	4017c <waitForStatusReady>
		IOWR_FIFOED_AVALON_UART_TXDATA(UART_WIFI_BASE,'\n');
   401f8:	00800284 	movi	r2,10
   401fc:	80800035 	stwio	r2,0(r16)

	//re-enable interrupts
	IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));
   40200:	00c06004 	movi	r3,384
   40204:	00800304 	movi	r2,12
   40208:	10c00035 	stwio	r3,0(r2)

}
   4020c:	dfc00217 	ldw	ra,8(sp)
   40210:	dc400117 	ldw	r17,4(sp)
   40214:	dc000017 	ldw	r16,0(sp)
   40218:	dec00304 	addi	sp,sp,12
   4021c:	f800283a 	ret

00040220 <serial_init>:


void serial_init()
{
	//recast do ponteiro para (void) [requesito do alt_ir_register() ]
    void* read_ptr = (void*) data_ptr;
   40220:	d1600417 	ldw	r5,-32752(gp)
	//select interrupt sources -receive ready e enable all
	IOWR(UART_WIFI_BASE, 3, (FIFOED_AVALON_UART_CONTROL_RRDY_MSK|FIFOED_AVALON_UART_CONTROL_E_MSK));
   40224:	00c06004 	movi	r3,384
   40228:	00800304 	movi	r2,12
   4022c:	10c00035 	stwio	r3,0(r2)
	// flush os caractéres no buffer de escrita, por precaução
	IORD(UART_WIFI_BASE, 0);
   40230:	0005883a 	mov	r2,zero
   40234:	10c00037 	ldwio	r3,0(r2)
	IORD(UART_WIFI_BASE, 0);
   40238:	10c00037 	ldwio	r3,0(r2)
	IORD(UART_WIFI_BASE, 0);
   4023c:	10c00037 	ldwio	r3,0(r2)
	IORD(UART_WIFI_BASE, 0);
   40240:	10800037 	ldwio	r2,0(r2)
	//reset most of the status register bits
	IOWR(UART_WIFI_BASE, 2, 0x00);
   40244:	00800204 	movi	r2,8
   40248:	10000035 	stwio	zero,0(r2)
	// install IRQ service routine

	alt_irq_register(UART_WIFI_IRQ, read_ptr, readUART);
   4024c:	01000044 	movi	r4,1
   40250:	01800134 	movhi	r6,4
   40254:	31809704 	addi	r6,r6,604
   40258:	00403bc1 	jmpi	403bc <alt_irq_register>

0004025c <readUART>:
	// enable irq da uart para Rx. */
}


//Função chamada pela interrupçao da uart
void readUART(void* context, alt_u32 id){
   4025c:	defffe04 	addi	sp,sp,-8
   40260:	dfc00115 	stw	ra,4(sp)
   40264:	dc000015 	stw	r16,0(sp)
	char ch;
	int i=0;

	do{
		waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   40268:	01002004 	movi	r4,128
   4026c:	004017c0 	call	4017c <waitForStatusReady>
		ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   40270:	0005883a 	mov	r2,zero
   40274:	10800037 	ldwio	r2,0(r2)
		alt_putchar(ch);
   40278:	14003fcc 	andi	r16,r2,255
   4027c:	8400201c 	xori	r16,r16,128
   40280:	843fe004 	addi	r16,r16,-128
   40284:	8009883a 	mov	r4,r16
   40288:	00405140 	call	40514 <alt_putchar>
	}while(ch !='\n' && ch != ':');
   4028c:	01000284 	movi	r4,10
   40290:	81001526 	beq	r16,r4,402e8 <readUART+0x8c>
   40294:	00800e84 	movi	r2,58
   40298:	80bff31e 	bne	r16,r2,40268 <readUART+0xc>

	if(ch == ':'){
		alt_putchar('\n');
   4029c:	00405140 	call	40514 <alt_putchar>
		do{
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
   402a0:	01002004 	movi	r4,128
   402a4:	004017c0 	call	4017c <waitForStatusReady>
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
   402a8:	0005883a 	mov	r2,zero
   402ac:	10800037 	ldwio	r2,0(r2)
			alt_putchar(ch);
   402b0:	14003fcc 	andi	r16,r2,255
   402b4:	8400201c 	xori	r16,r16,128
   402b8:	843fe004 	addi	r16,r16,-128
   402bc:	8009883a 	mov	r4,r16
   402c0:	00405140 	call	40514 <alt_putchar>
		}while(ch != '\n');
   402c4:	00800284 	movi	r2,10
   402c8:	80bff51e 	bne	r16,r2,402a0 <readUART+0x44>
		alt_putchar('\n');
   402cc:	8009883a 	mov	r4,r16
   402d0:	00405140 	call	40514 <alt_putchar>
		alt_putchar('\n');
   402d4:	8009883a 	mov	r4,r16
	}


}
   402d8:	dfc00117 	ldw	ra,4(sp)
   402dc:	dc000017 	ldw	r16,0(sp)
   402e0:	dec00204 	addi	sp,sp,8
			waitForStatusReady(FIFOED_AVALON_UART_STATUS_RRDY_MSK);
			ch = IORD_FIFOED_AVALON_UART_RXDATA(UART_WIFI_BASE);
			alt_putchar(ch);
		}while(ch != '\n');
		alt_putchar('\n');
		alt_putchar('\n');
   402e4:	00405141 	jmpi	40514 <alt_putchar>
	}


}
   402e8:	dfc00117 	ldw	ra,4(sp)
   402ec:	dc000017 	ldw	r16,0(sp)
   402f0:	dec00204 	addi	sp,sp,8
   402f4:	f800283a 	ret

000402f8 <wifi_init>:
	return 0;
}



void wifi_init(){
   402f8:	defffe04 	addi	sp,sp,-8
   402fc:	dc000015 	stw	r16,0(sp)
	usleep(1000000);
   40300:	040003f4 	movhi	r16,15
   40304:	84109004 	addi	r16,r16,16960
   40308:	8009883a 	mov	r4,r16
	return 0;
}



void wifi_init(){
   4030c:	dfc00115 	stw	ra,4(sp)
	usleep(1000000);
   40310:	00405640 	call	40564 <usleep>

	//Wifi mode - mode 2 = AP mode (host)
	writeCommand("AT+CWMODE=2");
   40314:	01000134 	movhi	r4,4
   40318:	2101f804 	addi	r4,r4,2016
   4031c:	00401940 	call	40194 <writeCommand>
	usleep(1000000);
   40320:	8009883a 	mov	r4,r16
   40324:	00405640 	call	40564 <usleep>

	//Set multiple connection or not - mode 1 = multiple conn. enable
	writeCommand("AT+CIPMUX=1");
   40328:	01000134 	movhi	r4,4
   4032c:	2101fb04 	addi	r4,r4,2028
   40330:	00401940 	call	40194 <writeCommand>
	usleep(1000000);
   40334:	8009883a 	mov	r4,r16
   40338:	00405640 	call	40564 <usleep>

	//Set IP address of ESP9266 softAP
	writeCommand("AT+CIPAP=\"192.168.4.1\"");
   4033c:	01000134 	movhi	r4,4
   40340:	2101fe04 	addi	r4,r4,2040
   40344:	00401940 	call	40194 <writeCommand>
	usleep(1000000);
   40348:	8009883a 	mov	r4,r16
   4034c:	00405640 	call	40564 <usleep>

	//Generic configuration - ssid, pwd, ch, ecn
	writeCommand("AT+CWSAP=\"ColeteWifi\",\"123456789\",5,3");
   40350:	01000134 	movhi	r4,4
   40354:	21020404 	addi	r4,r4,2064
   40358:	00401940 	call	40194 <writeCommand>
	usleep(2000000);
   4035c:	010007f4 	movhi	r4,31
   40360:	21212004 	addi	r4,r4,-31616
   40364:	00405640 	call	40564 <usleep>

	//Configure as a server - mode 1 = create server
	//						- port 80 (default 333)
	writeCommand("AT+CIPSERVER=1,80");
   40368:	01000134 	movhi	r4,4
   4036c:	21020e04 	addi	r4,r4,2104
   40370:	00401940 	call	40194 <writeCommand>
	usleep(1000000);
   40374:	8009883a 	mov	r4,r16
   40378:	00405640 	call	40564 <usleep>

	//Server timeout, max7200 segundos
	writeCommand("AT+CIPSTO=600");
   4037c:	01000134 	movhi	r4,4
   40380:	21021304 	addi	r4,r4,2124
   40384:	00401940 	call	40194 <writeCommand>
	usleep(1000000);
   40388:	8009883a 	mov	r4,r16

	//----------
	//telnet 192.168.4.1 80
	//para mandar dados para o wifi

}
   4038c:	dfc00117 	ldw	ra,4(sp)
   40390:	dc000017 	ldw	r16,0(sp)
   40394:	dec00204 	addi	sp,sp,8
	writeCommand("AT+CIPSERVER=1,80");
	usleep(1000000);

	//Server timeout, max7200 segundos
	writeCommand("AT+CIPSTO=600");
	usleep(1000000);
   40398:	00405641 	jmpi	40564 <usleep>

0004039c <main>:

static char buffer[64]="";
static int check = 0;

int main()
{
   4039c:	deffff04 	addi	sp,sp,-4
   403a0:	dfc00015 	stw	ra,0(sp)

	serial_init();
   403a4:	00402200 	call	40220 <serial_init>
	wifi_init();
   403a8:	00402f80 	call	402f8 <wifi_init>




	while(1){
		usleep(1000000);
   403ac:	010003f4 	movhi	r4,15
   403b0:	21109004 	addi	r4,r4,16960
   403b4:	00405640 	call	40564 <usleep>
   403b8:	003ffc06 	br	403ac <main+0x10>

000403bc <alt_irq_register>:
   403bc:	008007c4 	movi	r2,31
   403c0:	200f883a 	mov	r7,r4
   403c4:	00fffa84 	movi	r3,-22
   403c8:	11002236 	bltu	r2,r4,40454 <alt_irq_register+0x98>
   403cc:	0015303a 	rdctl	r10,status
   403d0:	027fff84 	movi	r9,-2
   403d4:	5244703a 	and	r2,r10,r9
   403d8:	1001703a 	wrctl	status,r2
   403dc:	200490fa 	slli	r2,r4,3
   403e0:	00c00134 	movhi	r3,4
   403e4:	18c22104 	addi	r3,r3,2180
   403e8:	02000134 	movhi	r8,4
   403ec:	42021c04 	addi	r8,r8,2160
   403f0:	10c5883a 	add	r2,r2,r3
   403f4:	11400115 	stw	r5,4(r2)
   403f8:	11800015 	stw	r6,0(r2)
   403fc:	30000826 	beq	r6,zero,40420 <alt_irq_register+0x64>
   40400:	0009303a 	rdctl	r4,status
   40404:	2244703a 	and	r2,r4,r9
   40408:	1001703a 	wrctl	status,r2
   4040c:	00c00044 	movi	r3,1
   40410:	19c6983a 	sll	r3,r3,r7
   40414:	40800017 	ldw	r2,0(r8)
   40418:	10c4b03a 	or	r2,r2,r3
   4041c:	00000706 	br	4043c <alt_irq_register+0x80>
   40420:	0009303a 	rdctl	r4,status
   40424:	2244703a 	and	r2,r4,r9
   40428:	1001703a 	wrctl	status,r2
   4042c:	00ffff84 	movi	r3,-2
   40430:	19c6183a 	rol	r3,r3,r7
   40434:	40800017 	ldw	r2,0(r8)
   40438:	10c4703a 	and	r2,r2,r3
   4043c:	40800015 	stw	r2,0(r8)
   40440:	40800017 	ldw	r2,0(r8)
   40444:	100170fa 	wrctl	ienable,r2
   40448:	2001703a 	wrctl	status,r4
   4044c:	5001703a 	wrctl	status,r10
   40450:	0007883a 	mov	r3,zero
   40454:	1805883a 	mov	r2,r3
   40458:	f800283a 	ret

0004045c <alt_load_section>:
   4045c:	2900051e 	bne	r5,r4,40474 <alt_load_section+0x18>
   40460:	f800283a 	ret
   40464:	20800017 	ldw	r2,0(r4)
   40468:	21000104 	addi	r4,r4,4
   4046c:	28800015 	stw	r2,0(r5)
   40470:	29400104 	addi	r5,r5,4
   40474:	29bffb1e 	bne	r5,r6,40464 <alt_load_section+0x8>
   40478:	f800283a 	ret

0004047c <alt_load>:
   4047c:	deffff04 	addi	sp,sp,-4
   40480:	01000134 	movhi	r4,4
   40484:	21021904 	addi	r4,r4,2148
   40488:	01400134 	movhi	r5,4
   4048c:	29421704 	addi	r5,r5,2140
   40490:	01800134 	movhi	r6,4
   40494:	31821904 	addi	r6,r6,2148
   40498:	dfc00015 	stw	ra,0(sp)
   4049c:	004045c0 	call	4045c <alt_load_section>
   404a0:	01000134 	movhi	r4,4
   404a4:	21000804 	addi	r4,r4,32
   404a8:	01400134 	movhi	r5,4
   404ac:	29400804 	addi	r5,r5,32
   404b0:	01800134 	movhi	r6,4
   404b4:	31805004 	addi	r6,r6,320
   404b8:	004045c0 	call	4045c <alt_load_section>
   404bc:	01000134 	movhi	r4,4
   404c0:	2101f804 	addi	r4,r4,2016
   404c4:	01400134 	movhi	r5,4
   404c8:	2941f804 	addi	r5,r5,2016
   404cc:	01800134 	movhi	r6,4
   404d0:	31821704 	addi	r6,r6,2140
   404d4:	004045c0 	call	4045c <alt_load_section>
   404d8:	004064c0 	call	4064c <alt_dcache_flush_all>
   404dc:	dfc00017 	ldw	ra,0(sp)
   404e0:	dec00104 	addi	sp,sp,4
   404e4:	00406501 	jmpi	40650 <alt_icache_flush_all>

000404e8 <alt_main>:
   404e8:	deffff04 	addi	sp,sp,-4
   404ec:	0009883a 	mov	r4,zero
   404f0:	dfc00015 	stw	ra,0(sp)
   404f4:	004056c0 	call	4056c <alt_irq_init>
   404f8:	00405680 	call	40568 <alt_sys_init>
   404fc:	d1200617 	ldw	r4,-32744(gp)
   40500:	d1600717 	ldw	r5,-32740(gp)
   40504:	d1a00817 	ldw	r6,-32736(gp)
   40508:	dfc00017 	ldw	ra,0(sp)
   4050c:	dec00104 	addi	sp,sp,4
   40510:	004039c1 	jmpi	4039c <main>

00040514 <alt_putchar>:
   40514:	defffd04 	addi	sp,sp,-12
   40518:	dc000115 	stw	r16,4(sp)
   4051c:	d80b883a 	mov	r5,sp
   40520:	2021883a 	mov	r16,r4
   40524:	01800044 	movi	r6,1
   40528:	01000134 	movhi	r4,4
   4052c:	21021804 	addi	r4,r4,2144
   40530:	000f883a 	mov	r7,zero
   40534:	dfc00215 	stw	ra,8(sp)
   40538:	dc000005 	stb	r16,0(sp)
   4053c:	004058c0 	call	4058c <altera_avalon_jtag_uart_write>
   40540:	1009883a 	mov	r4,r2
   40544:	00bfffc4 	movi	r2,-1
   40548:	2080011e 	bne	r4,r2,40550 <alt_putchar+0x3c>
   4054c:	2021883a 	mov	r16,r4
   40550:	8005883a 	mov	r2,r16
   40554:	dfc00217 	ldw	ra,8(sp)
   40558:	dc000117 	ldw	r16,4(sp)
   4055c:	dec00304 	addi	sp,sp,12
   40560:	f800283a 	ret

00040564 <usleep>:
   40564:	00405c01 	jmpi	405c0 <alt_busy_sleep>

00040568 <alt_sys_init>:
   40568:	f800283a 	ret

0004056c <alt_irq_init>:
   4056c:	deffff04 	addi	sp,sp,-4
   40570:	dfc00015 	stw	ra,0(sp)
   40574:	00406540 	call	40654 <altera_nios2_qsys_irq_init>
   40578:	00800044 	movi	r2,1
   4057c:	1001703a 	wrctl	status,r2
   40580:	dfc00017 	ldw	ra,0(sp)
   40584:	dec00104 	addi	sp,sp,4
   40588:	f800283a 	ret

0004058c <altera_avalon_jtag_uart_write>:
   4058c:	21000017 	ldw	r4,0(r4)
   40590:	298f883a 	add	r7,r5,r6
   40594:	20c00104 	addi	r3,r4,4
   40598:	00000606 	br	405b4 <altera_avalon_jtag_uart_write+0x28>
   4059c:	18800037 	ldwio	r2,0(r3)
   405a0:	10bfffec 	andhi	r2,r2,65535
   405a4:	10000326 	beq	r2,zero,405b4 <altera_avalon_jtag_uart_write+0x28>
   405a8:	28800007 	ldb	r2,0(r5)
   405ac:	29400044 	addi	r5,r5,1
   405b0:	20800035 	stwio	r2,0(r4)
   405b4:	29fff936 	bltu	r5,r7,4059c <altera_avalon_jtag_uart_write+0x10>
   405b8:	3005883a 	mov	r2,r6
   405bc:	f800283a 	ret

000405c0 <alt_busy_sleep>:
   405c0:	defffe04 	addi	sp,sp,-8
   405c4:	014666b4 	movhi	r5,6554
   405c8:	29666644 	addi	r5,r5,-26215
   405cc:	dc000015 	stw	r16,0(sp)
   405d0:	dfc00115 	stw	ra,4(sp)
   405d4:	2021883a 	mov	r16,r4
   405d8:	00407980 	call	40798 <__udivsi3>
   405dc:	10001126 	beq	r2,zero,40624 <alt_busy_sleep+0x64>
   405e0:	0007883a 	mov	r3,zero
   405e4:	01200034 	movhi	r4,32768
   405e8:	213fffc4 	addi	r4,r4,-1
   405ec:	017999b4 	movhi	r5,58982
   405f0:	295999c4 	addi	r5,r5,26215
   405f4:	00000406 	br	40608 <alt_busy_sleep+0x48>
   405f8:	213fffc4 	addi	r4,r4,-1
   405fc:	203ffe1e 	bne	r4,zero,405f8 <alt_busy_sleep+0x38>
   40600:	8161883a 	add	r16,r16,r5
   40604:	18c00044 	addi	r3,r3,1
   40608:	18bffb16 	blt	r3,r2,405f8 <alt_busy_sleep+0x38>
   4060c:	8009883a 	mov	r4,r16
   40610:	01400144 	movi	r5,5
   40614:	00407a80 	call	407a8 <__mulsi3>
   40618:	10bfffc4 	addi	r2,r2,-1
   4061c:	103ffe1e 	bne	r2,zero,40618 <alt_busy_sleep+0x58>
   40620:	00000506 	br	40638 <alt_busy_sleep+0x78>
   40624:	8009883a 	mov	r4,r16
   40628:	01400144 	movi	r5,5
   4062c:	00407a80 	call	407a8 <__mulsi3>
   40630:	10bfffc4 	addi	r2,r2,-1
   40634:	00bffe16 	blt	zero,r2,40630 <alt_busy_sleep+0x70>
   40638:	0005883a 	mov	r2,zero
   4063c:	dfc00117 	ldw	ra,4(sp)
   40640:	dc000017 	ldw	r16,0(sp)
   40644:	dec00204 	addi	sp,sp,8
   40648:	f800283a 	ret

0004064c <alt_dcache_flush_all>:
   4064c:	f800283a 	ret

00040650 <alt_icache_flush_all>:
   40650:	f800283a 	ret

00040654 <altera_nios2_qsys_irq_init>:
   40654:	000170fa 	wrctl	ienable,zero
   40658:	f800283a 	ret

0004065c <udivmodsi4>:
   4065c:	29001b2e 	bgeu	r5,r4,406cc <udivmodsi4+0x70>
   40660:	28001a16 	blt	r5,zero,406cc <udivmodsi4+0x70>
   40664:	00800044 	movi	r2,1
   40668:	0007883a 	mov	r3,zero
   4066c:	01c007c4 	movi	r7,31
   40670:	00000306 	br	40680 <udivmodsi4+0x24>
   40674:	19c01326 	beq	r3,r7,406c4 <udivmodsi4+0x68>
   40678:	18c00044 	addi	r3,r3,1
   4067c:	28000416 	blt	r5,zero,40690 <udivmodsi4+0x34>
   40680:	294b883a 	add	r5,r5,r5
   40684:	1085883a 	add	r2,r2,r2
   40688:	293ffa36 	bltu	r5,r4,40674 <udivmodsi4+0x18>
   4068c:	10000d26 	beq	r2,zero,406c4 <udivmodsi4+0x68>
   40690:	0007883a 	mov	r3,zero
   40694:	21400236 	bltu	r4,r5,406a0 <udivmodsi4+0x44>
   40698:	2149c83a 	sub	r4,r4,r5
   4069c:	1886b03a 	or	r3,r3,r2
   406a0:	1004d07a 	srli	r2,r2,1
   406a4:	280ad07a 	srli	r5,r5,1
   406a8:	103ffa1e 	bne	r2,zero,40694 <udivmodsi4+0x38>
   406ac:	30000226 	beq	r6,zero,406b8 <udivmodsi4+0x5c>
   406b0:	2005883a 	mov	r2,r4
   406b4:	f800283a 	ret
   406b8:	1809883a 	mov	r4,r3
   406bc:	2005883a 	mov	r2,r4
   406c0:	f800283a 	ret
   406c4:	0007883a 	mov	r3,zero
   406c8:	003ff806 	br	406ac <udivmodsi4+0x50>
   406cc:	00800044 	movi	r2,1
   406d0:	0007883a 	mov	r3,zero
   406d4:	003fef06 	br	40694 <udivmodsi4+0x38>

000406d8 <__divsi3>:
   406d8:	defffe04 	addi	sp,sp,-8
   406dc:	dc000015 	stw	r16,0(sp)
   406e0:	dfc00115 	stw	ra,4(sp)
   406e4:	0021883a 	mov	r16,zero
   406e8:	20000c16 	blt	r4,zero,4071c <__divsi3+0x44>
   406ec:	000d883a 	mov	r6,zero
   406f0:	28000e16 	blt	r5,zero,4072c <__divsi3+0x54>
   406f4:	004065c0 	call	4065c <udivmodsi4>
   406f8:	1007883a 	mov	r3,r2
   406fc:	8005003a 	cmpeq	r2,r16,zero
   40700:	1000011e 	bne	r2,zero,40708 <__divsi3+0x30>
   40704:	00c7c83a 	sub	r3,zero,r3
   40708:	1805883a 	mov	r2,r3
   4070c:	dfc00117 	ldw	ra,4(sp)
   40710:	dc000017 	ldw	r16,0(sp)
   40714:	dec00204 	addi	sp,sp,8
   40718:	f800283a 	ret
   4071c:	0109c83a 	sub	r4,zero,r4
   40720:	04000044 	movi	r16,1
   40724:	000d883a 	mov	r6,zero
   40728:	283ff20e 	bge	r5,zero,406f4 <__divsi3+0x1c>
   4072c:	014bc83a 	sub	r5,zero,r5
   40730:	8021003a 	cmpeq	r16,r16,zero
   40734:	003fef06 	br	406f4 <__divsi3+0x1c>

00040738 <__modsi3>:
   40738:	deffff04 	addi	sp,sp,-4
   4073c:	dfc00015 	stw	ra,0(sp)
   40740:	01800044 	movi	r6,1
   40744:	2807883a 	mov	r3,r5
   40748:	20000416 	blt	r4,zero,4075c <__modsi3+0x24>
   4074c:	28000c16 	blt	r5,zero,40780 <__modsi3+0x48>
   40750:	dfc00017 	ldw	ra,0(sp)
   40754:	dec00104 	addi	sp,sp,4
   40758:	004065c1 	jmpi	4065c <udivmodsi4>
   4075c:	0109c83a 	sub	r4,zero,r4
   40760:	28000b16 	blt	r5,zero,40790 <__modsi3+0x58>
   40764:	180b883a 	mov	r5,r3
   40768:	01800044 	movi	r6,1
   4076c:	004065c0 	call	4065c <udivmodsi4>
   40770:	0085c83a 	sub	r2,zero,r2
   40774:	dfc00017 	ldw	ra,0(sp)
   40778:	dec00104 	addi	sp,sp,4
   4077c:	f800283a 	ret
   40780:	014bc83a 	sub	r5,zero,r5
   40784:	dfc00017 	ldw	ra,0(sp)
   40788:	dec00104 	addi	sp,sp,4
   4078c:	004065c1 	jmpi	4065c <udivmodsi4>
   40790:	0147c83a 	sub	r3,zero,r5
   40794:	003ff306 	br	40764 <__modsi3+0x2c>

00040798 <__udivsi3>:
   40798:	000d883a 	mov	r6,zero
   4079c:	004065c1 	jmpi	4065c <udivmodsi4>

000407a0 <__umodsi3>:
   407a0:	01800044 	movi	r6,1
   407a4:	004065c1 	jmpi	4065c <udivmodsi4>

000407a8 <__mulsi3>:
   407a8:	20000a26 	beq	r4,zero,407d4 <__mulsi3+0x2c>
   407ac:	0007883a 	mov	r3,zero
   407b0:	2080004c 	andi	r2,r4,1
   407b4:	1005003a 	cmpeq	r2,r2,zero
   407b8:	2008d07a 	srli	r4,r4,1
   407bc:	1000011e 	bne	r2,zero,407c4 <__mulsi3+0x1c>
   407c0:	1947883a 	add	r3,r3,r5
   407c4:	294b883a 	add	r5,r5,r5
   407c8:	203ff91e 	bne	r4,zero,407b0 <__mulsi3+0x8>
   407cc:	1805883a 	mov	r2,r3
   407d0:	f800283a 	ret
   407d4:	0007883a 	mov	r3,zero
   407d8:	1805883a 	mov	r2,r3
   407dc:	f800283a 	ret
