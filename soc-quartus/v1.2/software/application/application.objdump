
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00011ee0 memsz 0x00011ee0 flags r-x
    LOAD off    0x00012f00 vaddr 0x01011f00 paddr 0x01013a3c align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x00015578 vaddr 0x01015578 paddr 0x01015578 align 2**12
         filesz 0x00000000 memsz 0x00000b28 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000115ac  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a0  01011760  01011760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  01011f00  01013a3c  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b28  01015578  01015578  00015578  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00014a3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001190  00000000  00000000  00014a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025e8  00000000  00000000  00015bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00039fc1  00000000  00000000  000181e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cf74  00000000  00000000  000521a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d7b5  00000000  00000000  0005f115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002ba4  00000000  00000000  0007c8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000441b  00000000  00000000  0007f470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fa38  00000000  00000000  0008388b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000932c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c40  00000000  00000000  000932d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00099285  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00099288  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009928d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009928e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009928f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009929a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000992a5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000992b0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  000992bb  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003d883  00000000  00000000  000992e8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01011760 l    d  .rodata	00000000 .rodata
01011f00 l    d  .rwdata	00000000 .rwdata
01015578 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 app.cpp
01000250 l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
010001f0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0100177c l     F .text	00000030 _Z12read_uleb128PKhPj
010017ac l     F .text	00000054 _Z12read_sleb128PKhPi
01001800 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0100189c l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
01001a70 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
01001b00 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
01001c00 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
01001c84 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
0101558c l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
010155e8 l     O .bss	00000800 emergency_buffer
01015598 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
01002918 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0101559c l     O .bss	00000004 fc_static
01003030 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
01003148 l     F .text	000000cc _Unwind_RaiseException_Phase2
01003214 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01003824 l     F .text	00000058 std
01003930 l     F .text	00000008 __fp_lock
01003938 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
01011f00 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
010055f0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01005d08 l     F .text	00000058 __sprint_r
01011c0e l     O .rodata	00000010 blanks.3452
01011bfe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
01007e6c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
01013a10 l     O .rwdata	00000004 charset
01011c40 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
01011d88 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100c8a0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100d9cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100e2d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100e330 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100e35c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0100e4a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100e5e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0100e784 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100e864 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100e9c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0100ead0 l     F .text	000000f8 alt_file_locked
0100ed54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0100eed8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01013a2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100f190 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010128bc l     O .rwdata	00001060 jtag_uart_0
0100f288 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100f4c8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100f6f0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 fifoed_avalon_uart.c
0100ff60 l     F .text	00000060 alt_get_errno
01010188 l     F .text	00000100 fifoed_avalon_uart_rxirq
01010288 l     F .text	00000190 fifoed_avalon_uart_txirq
01010418 l     F .text	00000090 fifoed_avalon_uart_irq
00000000 l    df *ABS*	00000000 fifoed_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01010984 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01011018 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01011520 l     F .text	00000004 register_fini
01000cb8 g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
010026bc g     F .text	00000040 __cxa_free_exception
01005354 g     F .text	0000001c putchar
01002ee8 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0100a3bc g     F .text	00000094 _mprec_log10
0100246c g     F .text	00000018 _ZSt10unexpectedv
0100a4a8 g     F .text	00000088 __any_on
01009ba0 g     F .text	00000070 _isatty_r
01011d60 g     O .rodata	00000028 __mprec_tinytens
0100ea24 g     F .text	0000006c alt_main
01005c08 g     F .text	0000008c strcpy
010015c4 g     F .text	00000034 _ZN4WiFiD2Ev
01005378 g     F .text	000000a0 _puts_r
01015e10 g     O .bss	00000100 alt_irq
01009cd4 g     F .text	00000078 _lseek_r
01002fe0 g     F .text	00000014 _Unwind_GetIPInfo
01013a3c g       *ABS*	00000000 __flash_rwdata_start
01009664 g     F .text	000000a0 __sflags
0100d3c0 g     F .text	00000088 __eqdf2
01002830 g     F .text	00000074 __cxa_rethrow
01002f80 g     F .text	0000000c _Unwind_SjLj_Unregister
0100238c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
01002fd0 g     F .text	00000010 _Unwind_GetIP
010160a0 g       *ABS*	00000000 __alt_heap_start
010059b8 g     F .text	00000074 _kill_r
010026ac g     F .text	00000010 _ZNSt9bad_allocD2Ev
010052dc g     F .text	00000044 printf
01002de4 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
010058f8 g     F .text	000000a0 _signal_r
01005a34 g     F .text	00000068 __sseek
0100388c g     F .text	000000a4 __sinit
0100b9c0 g     F .text	00000130 __swbuf_r
01002dd4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
01009c34 g     F .text	00000084 _setlocale_r
01011b34  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0100398c g     F .text	0000009c __sfmoreglue
0100eab0 g     F .text	00000020 __malloc_unlock
01002980 g     F .text	00000020 _ZSt18uncaught_exceptionv
01009ed0 g     F .text	000000e0 memmove
010025f8 g     F .text	00000010 _ZNSt9exceptionD2Ev
0100397c g     F .text	00000010 _cleanup
0100a530 g     F .text	000000bc _Balloc
01000d38 g     F .text	00000038 _ZN6MotorsC2Ev
01000d70 g     F .text	00000038 _ZN6MotorsC1Ev
0100d4d0 g     F .text	00000088 __gtdf2
01011a24  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
01010708 g     F .text	00000058 fifoed_avalon_uart_classic_write_fd
01000000 g     F .entry	0000000c __reset
01000930 g     F .text	00000028 _ZN3FFTC2Ev
01003010 g     F .text	00000008 _Unwind_GetRegionStart
01000020 g       *ABS*	00000000 __flash_exceptions_start
01000f9c g     F .text	00000064 _ZN4WiFiC1Ev
010044c8 g     F .text	00000074 _fstat_r
01002484 g     F .text	00000100 _Znwm
010155a0 g     O .bss	00000004 errno
01005658 g     F .text	00000014 __srget
010033e0 g     F .text	00000080 _Unwind_Backtrace
010155c0 g     O .bss	00000004 alt_argv
0101b9e0 g       *ABS*	00000000 _gp
01000b94 g     F .text	00000050 _ZN6Motors11write_delayEjjj
01010600 g     F .text	00000058 fifoed_avalon_uart_read_fd
0100e500 g     F .text	00000020 getpid
0101557c g     O .bss	00000004 _ZN3App3fftE
01001d08 g     F .text	00000180 __cxa_call_unexpected
01002978 g     F .text	00000008 __cxa_get_exception_ptr
0101273c g     O .rwdata	00000180 alt_fd_list
01004840 g     F .text	00000090 _getc_r
010047a8 g     F .text	00000098 getc
01005370 g     F .text	00000008 _putchar_r
01003390 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
01002fa4 g     F .text	00000014 _Unwind_GetCFA
01002378 g     F .text	00000014 _ZSt13set_terminatePFvvE
01010aac g     F .text	00000094 alt_find_dev
01009e30 g     F .text	000000a0 memcpy
010010e0 g     F .text	000001d0 _ZN4WiFi7receiveEPhPj
01003970 g     F .text	0000000c _cleanup_r
0100d668 g     F .text	000000f8 __floatsidf
010110f0 g     F .text	00000078 alt_io_redirect
0100d5e0 g     F .text	00000088 __ltdf2
010106b0 g     F .text	00000058 fifoed_avalon_uart_classic_read_fd
01011760 g       *ABS*	00000000 __DTOR_END__
0100073c g     F .text	00000038 _ZN3AppC1Ev
01002c1c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
01005418 g     F .text	00000014 puts
01000c84 g     F .text	00000034 _ZN6Motors5writeEj
0100a30c g     F .text	000000b0 __ratio
0100f908 g     F .text	00000224 altera_avalon_jtag_uart_read
01004a78 g     F .text	00000014 malloc
01005320 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100db08 g     F .text	00000008 __udivsi3
0100e520 g     F .text	000000c4 isatty
010056dc g     F .text	000000cc _raise_r
01011c70 g     O .rodata	000000c8 __mprec_tens
01009c10 g     F .text	00000008 __locale_charset
010155a4 g     O .bss	00000004 __malloc_top_pad
010059b4 g     F .text	00000004 _getpid_r
01013a0c g     O .rwdata	00000004 __mb_cur_max
01009c18 g     F .text	0000000c _localeconv_r
0100ac94 g     F .text	0000003c __i2b
01009704 g     F .text	0000049c __sfvwrite_r
01002c3c g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
01005830 g     F .text	000000b4 __sigtramp_r
0100566c g     F .text	00000070 _sbrk_r
01000a48 g     F .text	00000058 _ZN3FFT5writeEPh
01011b68  w    O .rodata	00000020 _ZTVSt9type_info
0100b228 g     F .text	00000078 _read_r
010025c8 g     F .text	00000010 _ZNKSt9exception4whatEv
01012708 g     O .rwdata	0000000c __lc_ctype
01013a24 g     O .rwdata	00000004 alt_max_fd
01000894  w    F .text	00000028 _ZN3App6Buffer6lengthEv
0100dfd0 g     F .text	00000138 __unpack_d
010034d0 g     F .text	00000110 _fclose_r
01011aa0  w    O .rodata	0000000c _ZTISt9bad_alloc
010037f0 g     F .text	00000034 fflush
010155a8 g     O .bss	00000004 __malloc_max_sbrked_mem
0100cd30 g     F .text	00000074 __adddf3
01011b08  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0100a1ec g     F .text	00000120 __b2d
0100c240 g     F .text	00000660 __umoddi3
0100e8d0 g     F .text	000000f4 lseek
01002c9c g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
01001770 g     F .text	0000000c _ZdlPv
01013a00 g     O .rwdata	00000004 _global_impure_ptr
0100b2a0 g     F .text	000005f4 _realloc_r
010160a0 g       *ABS*	00000000 __bss_end
01010f20 g     F .text	000000f8 alt_iic_isr_register
01011200 g     F .text	0000010c alt_tick
01002f70 g     F .text	00000010 _Unwind_SjLj_Register
0100bbd4 g     F .text	0000066c __udivdi3
01011d38 g     O .rodata	00000028 __mprec_bigtens
0100af1c g     F .text	00000120 __s2b
010034b8 g     F .text	00000018 abort
0100d838 g     F .text	00000194 __floatunsidf
010105b8 g     F .text	00000048 fifoed_avalon_uart_classic_write
0100a10c g     F .text	00000060 __mcmp
01000dd4 g     F .text	00000054 _ZN6Motors12getSingletonEv
01001000 g     F .text	00000064 _ZN4WiFiC2Ev
010029a0 g     F .text	000000a4 __cxa_end_catch
01003958 g     F .text	00000018 __fp_lock_all
01010ed8 g     F .text	00000048 alt_ic_irq_enabled
0100264c g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
01011168 g     F .text	00000098 alt_alarm_stop
010155c8 g     O .bss	00000004 alt_irq_active
01002444 g     F .text	00000018 _ZSt9terminatev
010000ec g     F .exceptions	000000c8 alt_irq_handler
01012714 g     O .rwdata	00000028 alt_dev_null
01011ad8  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
01000c34 g     F .text	00000050 _ZN6Motors11write_powerEjjj
010108b4 g     F .text	0000001c alt_dcache_flush_all
01009fd8 g     F .text	00000070 __hi0bits
010139e0  w    O .rwdata	00000008 _ZTISt9exception
0100d760 g     F .text	000000d8 __fixdfsi
01013a3c g       *ABS*	00000000 __ram_rwdata_end
01002f18 g     F .text	00000010 _ZNSt9type_infoD1Ev
01013a1c g     O .rwdata	00000008 alt_dev_list
01015594 g     O .bss	00000004 __new_handler
0100f06c g     F .text	00000124 write
0100b140 g     F .text	000000e8 _putc_r
01002f08 g     F .text	00000010 _ZNSt9type_infoD0Ev
01011f00 g       *ABS*	00000000 __ram_rodata_end
0100e3c8 g     F .text	000000d8 fstat
01000708 g     F .text	00000034 _ZN3AppD2Ev
0100e644 g     F .text	00000140 kill
01005b78 g     F .text	00000090 strcat
0100adfc g     F .text	00000120 __pow5mult
010155b0 g     O .bss	00000004 __nlocale_changed
0100db10 g     F .text	00000008 __umodsi3
01002f00 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
010160a0 g       *ABS*	00000000 end
010009a0 g     F .text	00000020 _ZN3FFTD1Ev
01003130 g     F .text	00000018 _Unwind_DeleteException
010044a4 g     F .text	00000024 fseek
0100f408 g     F .text	000000c0 altera_avalon_jtag_uart_init
01011758 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100dc3c g     F .text	00000080 __clzsi2
01002b5c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0100fb2c g     F .text	00000240 altera_avalon_jtag_uart_write
0100387c g     F .text	00000004 __sfp_lock_acquire
01011a4c  w    O .rodata	00000012 _ZTSSt13bad_exception
01009d4c g     F .text	000000e4 memchr
01005d60 g     F .text	00001ec4 ___vfprintf_internal_r
01000980 g     F .text	00000020 _ZN3FFTD2Ev
01003d54 g     F .text	00000314 _free_r
01011524 g     F .text	000001b0 __call_exitprocs
0100560c g     F .text	0000004c __srget_r
01000b14 g     F .text	00000020 _ZN6MotorsD1Ev
010155b4 g     O .bss	00000004 __mlocale_changed
01013a08 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
010155cc g     O .bss	00000004 _alt_tick_rate
01011b88  w    O .rodata	0000000d _ZTSSt9type_info
0100a8f4 g     F .text	0000014c __lshift
01000aa0 g     F .text	00000054 _ZN3FFT12getSingletonEv
01011a7c  w    O .rodata	00000014 _ZTVSt9bad_alloc
010155d0 g     O .bss	00000004 _alt_nticks
01005998 g     F .text	0000001c signal
0100edb4 g     F .text	00000124 read
0100f224 g     F .text	00000064 alt_sys_init
01005264 g     F .text	00000078 _open_r
010113ec g     F .text	00000134 __register_exitproc
01011a90  w    O .rodata	0000000d _ZTSSt9bad_alloc
0100aa40 g     F .text	00000254 __multiply
0100f7a0 g     F .text	00000074 altera_avalon_jtag_uart_close
01000958 g     F .text	00000028 _ZN3FFTC1Ev
01002f38 g     F .text	00000038 __mulsi3
01011f00 g       *ABS*	00000000 __ram_rwdata_start
01003298 g     F .text	000000f8 _Unwind_SjLj_RaiseException
01011760 g       *ABS*	00000000 __ram_rodata_start
01015de8 g     O .bss	00000028 __malloc_current_mallinfo
0100323c g     F .text	0000005c _Unwind_SjLj_Resume
0100a5ec g     F .text	0000017c __d2b
01002f28 g     F .text	00000010 _ZNSt9type_infoD2Ev
01002d18 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01010570 g     F .text	00000048 fifoed_avalon_uart_classic_read
0100f2c0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01010c60 g     F .text	000000d0 alt_get_fd
01000e28 g     F .text	00000048 _ZN4WiFi5writeEPci
0100e108 g     F .text	000000c8 __fpcmp_parts_d
0100fd6c g     F .text	000001f4 fifoed_avalon_uart_read
01007dfc g     F .text	00000070 _close_r
01011378 g     F .text	00000074 memcmp
0100f370 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010160a0 g       *ABS*	00000000 __alt_stack_base
0100f3b8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010046bc g     F .text	000000ac _fwrite_r
01002668 g     F .text	00000034 _ZNSt9bad_allocD0Ev
01002dc4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
01007cc0 g     F .text	0000013c __swsetup_r
01003460 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0100d168 g     F .text	00000258 __divdf3
01003a28 g     F .text	000000f0 __sfp
01015578 g     O .bss	00000004 _ZN3App6motorsE
0100a450 g     F .text	00000058 __copybits
01002ee0 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
01000eec g     F .text	000000b0 _ZN4WiFi10stopServerEv
01012300 g     O .rwdata	00000408 __malloc_av_
01003888 g     F .text	00000004 __sinit_lock_release
0100cda4 g     F .text	000003c4 __muldf3
01005b18 g     F .text	00000060 __sread
01011a38  w    O .rodata	00000014 _ZTVSt9exception
01010b40 g     F .text	00000120 alt_find_file
01002bc8 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
010108d0 g     F .text	000000b4 alt_dev_llist_insert
0100ea90 g     F .text	00000020 __malloc_lock
0100efb0 g     F .text	000000bc sbrk
01011aac  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
010028a4 g     F .text	00000074 __cxa_throw
010035f4 g     F .text	000001fc _fflush_r
01002ff4 g     F .text	00000010 _Unwind_SetIP
0100bb0c g     F .text	000000c8 _calloc_r
01003c0c g     F .text	0000001c fopen
01015578 g       *ABS*	00000000 __bss_start
010051cc g     F .text	00000098 memset
010015f8 g     F .text	000000d8 main
01000cf8 g     F .text	00000040 _ZN6Motors21write_to_next_collummEv
01015580 g     O .bss	00000004 _ZN3FFT3fftE
010155c4 g     O .bss	00000004 alt_envp
010155ac g     O .bss	00000004 __malloc_max_total_mem
0100f318 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100baf0 g     F .text	0000001c __swbuf
01002368 g     F .text	00000008 __cxa_get_globals_fast
01005a2c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010035e0 g     F .text	00000014 fclose
0100ffc0 g     F .text	000001c8 fifoed_avalon_uart_write
01015f10 g     O .bss	00000190 _atexit0
010080b0 g     F .text	000015b4 _dtoa_r
01004a8c g     F .text	00000740 _malloc_r
01013a28 g     O .rwdata	00000004 alt_errno
01005820 g     F .text	00000010 _init_signal
01011afc  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
01004604 g     F .text	000000b8 _fwalk
0100263c g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0100b03c g     F .text	00000104 putc
0100da48 g     F .text	00000060 __divsi3
01011d94 g     O .rodata	00000014 __thenan_df
01003c28 g     F .text	0000012c _malloc_trim_r
01011760 g       *ABS*	00000000 __CTOR_END__
0100b904 g     F .text	000000bc strcmp
01000334 g     F .text	0000005c _ZN3App14writeGyroscopeEii
01011760 g       *ABS*	00000000 __flash_rodata_start
01011760 g       *ABS*	00000000 __DTOR_LIST__
01010658 g     F .text	00000058 fifoed_avalon_uart_write_fd
0100d448 g     F .text	00000088 __nedf2
0100f1f0 g     F .text	00000034 alt_irq_init
0100ef38 g     F .text	00000078 alt_release_fd
01000da8 g     F .text	0000002c _ZN6Motors4readEv
01001590 g     F .text	00000034 _ZN4WiFiD1Ev
01002d90 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
01011da8 g     O .rodata	00000100 __clz_tab
010155b8 g     O .bss	00000004 _PathLocale
0101132c g     F .text	00000014 atexit
01007c48 g     F .text	00000078 _write_r
01009cb8 g     F .text	0000001c setlocale
01003028 g     F .text	00000008 _Unwind_GetTextRelBase
01002584 g     F .text	00000044 __cxa_call_terminate
010007ac  w    F .text	000000e8 _ZN3App6Buffer3popEv
010139fc g     O .rwdata	00000004 _impure_ptr
010155bc g     O .bss	00000004 alt_argc
01015588 g     O .bss	00000004 _ZN4WiFi4wifiE
01010a48 g     F .text	00000064 _do_dtors
01000390 g     F .text	0000024c _ZN3App3runEv
01004068 g     F .text	0000043c _fseek_r
01000280 g     F .text	000000b4 _ZN3App12writeCompassEh
0100542c g     F .text	000001c4 __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
010005dc g     F .text	0000009c _ZN3App10fftHandlerEj
0100a16c g     F .text	00000080 __ulp
0100b894 g     F .text	00000040 __isinfd
01003018 g     F .text	00000008 _Unwind_FindEnclosingFunction
01003940 g     F .text	00000018 __fp_unlock_all
010016d0 g     F .text	000000a0 _Znam
01013a14 g     O .rwdata	00000008 alt_fs_list
01003004 g     F .text	0000000c _Unwind_GetLanguageSpecificData
01000be4 g     F .text	00000050 _ZN6Motors15write_variationEjjj
01002a44 g     F .text	00000118 __cxa_begin_catch
01002c2c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0100245c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000b34 g     F .text	00000060 _ZN6Motors5writeEjjjj
01009c24 g     F .text	00000010 localeconv
01002608 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
010139ec g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
01015584 g     O .bss	00000004 _ZN6Motors6motorsE
01010d4c g     F .text	00000050 alt_ic_isr_register
010026fc g     F .text	00000134 __cxa_allocate_exception
01004768 g     F .text	00000040 fwrite
01011b5c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0100265c g     F .text	0000000c _ZSt15set_new_handlerPFvvE
01013a3c g       *ABS*	00000000 _edata
010160a0 g       *ABS*	00000000 _end
010139e8 g     O .rwdata	00000001 _ZSt7nothrow
010006d4 g     F .text	00000034 _ZN3AppD1Ev
01001e88 g     F .text	000004e0 __gxx_personality_sj0
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100f814 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01002ccc g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
01001064 g     F .text	0000007c _ZN4WiFi11startServerEv
010025e8 g     F .text	00000010 _ZNSt9exceptionD1Ev
01010e38 g     F .text	000000a0 alt_ic_irq_disable
01000e70 g     F .text	0000007c _ZN4WiFi15sendInstructionEPc
01005a9c g     F .text	0000007c __swrite
01013a04 g     O .rwdata	00000004 __malloc_trim_threshold
0101130c g     F .text	00000020 altera_nios2_qsys_irq_init
01011340 g     F .text	00000038 exit
01002fb8 g     F .text	00000018 _Unwind_SetGR
0100453c g     F .text	000000c8 _fwalk_reent
010008bc  w    F .text	00000074 _ZN3App6BufferC1Ev
0100a768 g     F .text	0000018c __mdiff
010023a0 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0100146c g     F .text	00000124 _ZN4WiFi12getSingletonEv
010009f0 g     F .text	0000002c _ZN3FFT4readEv
0100daa8 g     F .text	00000060 __modsi3
0100269c g     F .text	00000010 _ZNSt9bad_allocD1Ev
010155d4 g     O .bss	00000014 _ZN3App6bufferE
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01003880 g     F .text	00000004 __sfp_lock_release
01002e18 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01011a60  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
01000774 g     F .text	00000038 _ZN3AppC2Ev
0101391c g     O .rwdata	000000c4 esp8266
01003b18 g     F .text	000000f4 _fopen_r
0100b8d4 g     F .text	00000030 __isnand
0100e39c g     F .text	0000002c _exit
01010760 g     F .text	00000154 alt_alarm_start
0100db18 g     F .text	00000124 __muldi3
01002f8c g     F .text	00000018 _Unwind_GetGR
01002370 g     F .text	00000008 __cxa_get_globals
010048d0 g     F .text	00000194 __smakebuf_r
010139f0 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
01005c94 g     F .text	00000074 strlen
010057bc g     F .text	00000064 _init_signal_r
010139f4  w    O .rwdata	00000008 _ZTISt9type_info
0100ebc8 g     F .text	0000018c open
0100d558 g     F .text	00000088 __gedf2
01011a6c  w    O .rodata	0000000d _ZTSSt9exception
010025d8 g     F .text	00000010 _ZNSt9exceptionD0Ev
01010d30 g     F .text	0000001c alt_icache_flush_all
01003020 g     F .text	00000008 _Unwind_GetDataRelBase
01013a30 g     O .rwdata	00000004 alt_priority_mask
01000678 g     F .text	0000005c _ZN3App5setupEv
01010d9c g     F .text	0000009c alt_ic_irq_enable
01007c24 g     F .text	00000024 __vfprintf_internal
01000a1c g     F .text	0000002c _ZN3FFT12isProcessingEv
0100ccb0 g     F .text	00000080 __subdf3
010009c0 g     F .text	00000030 _ZN3FFT19setInterruptHandlerEPFvjE
0100a048 g     F .text	000000c4 __lo0bits
01013a34 g     O .rwdata	00000008 alt_alarm_list
010109e4 g     F .text	00000064 _do_ctors
010058e4 g     F .text	00000014 __sigtramp
010012b0 g     F .text	000001bc _ZN4WiFi6configEPcS0_
0100e1d0 g     F .text	00000100 close
0100e7e4 g     F .text	00000080 alt_load
0100dcbc g     F .text	00000314 __pack_d
01002ef0 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
010104a8 g     F .text	000000c8 fifoed_avalon_uart_init
01000af4 g     F .text	00000020 _ZN6MotorsD2Ev
010057a8 g     F .text	00000014 raise
01004a64 g     F .text	00000014 free
01003884 g     F .text	00000004 __sinit_lock_acquire
0100acd0 g     F .text	0000012c __multadd
01002be8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
01009fb0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18d78404 	addi	r3,r3,24080
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18d78404 	addi	r3,r3,24080
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6ae7814 	ori	gp,gp,47584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10955e14 	ori	r2,r2,21880

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18d82814 	ori	r3,r3,24736

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100e7e40 	call	100e7e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100ea240 	call	100ea24 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <_Z41__static_initialization_and_destruction_0ii>:
			printf("%s\n", data);
		}
			break;
		}
	}
}
 10001f0:	defffc04 	addi	sp,sp,-16
 10001f4:	dfc00315 	stw	ra,12(sp)
 10001f8:	df000215 	stw	fp,8(sp)
 10001fc:	df000204 	addi	fp,sp,8
 1000200:	e13ffe15 	stw	r4,-8(fp)
 1000204:	e17fff15 	stw	r5,-4(fp)
 1000208:	e0bffe17 	ldw	r2,-8(fp)
 100020c:	10800058 	cmpnei	r2,r2,1
 1000210:	10000a1e 	bne	r2,zero,100023c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 1000214:	e0ffff17 	ldw	r3,-4(fp)
 1000218:	00bfffd4 	movui	r2,65535
 100021c:	1880071e 	bne	r3,r2,100023c <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define SSID "ColeteWifi"
#define PASSWORD "12345678"
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
 1000220:	1000dd40 	call	1000dd4 <_ZN6Motors12getSingletonEv>
 1000224:	d0a6e615 	stw	r2,-25704(gp)
FFT	*App::fft = FFT::getSingleton();
 1000228:	1000aa00 	call	1000aa0 <_ZN3FFT12getSingletonEv>
 100022c:	d0a6e715 	stw	r2,-25700(gp)
App::Buffer	App::buffer;
 1000230:	01004074 	movhi	r4,257
 1000234:	21157504 	addi	r4,r4,21972
 1000238:	10008bc0 	call	10008bc <_ZN3App6BufferC1Ev>
			printf("%s\n", data);
		}
			break;
		}
	}
}
 100023c:	e037883a 	mov	sp,fp
 1000240:	dfc00117 	ldw	ra,4(sp)
 1000244:	df000017 	ldw	fp,0(sp)
 1000248:	dec00204 	addi	sp,sp,8
 100024c:	f800283a 	ret

01000250 <_GLOBAL__I__ZN3App6motorsE>:
 1000250:	defffe04 	addi	sp,sp,-8
 1000254:	dfc00115 	stw	ra,4(sp)
 1000258:	df000015 	stw	fp,0(sp)
 100025c:	d839883a 	mov	fp,sp
 1000260:	01000044 	movi	r4,1
 1000264:	017fffd4 	movui	r5,65535
 1000268:	10001f00 	call	10001f0 <_Z41__static_initialization_and_destruction_0ii>
 100026c:	e037883a 	mov	sp,fp
 1000270:	dfc00117 	ldw	ra,4(sp)
 1000274:	df000017 	ldw	fp,0(sp)
 1000278:	dec00204 	addi	sp,sp,8
 100027c:	f800283a 	ret

01000280 <_ZN3App12writeCompassEh>:

	if(buffer.length() > 0)
		fft->write(buffer.pop());
}

void App::writeCompass(unsigned char direction) {
 1000280:	defffb04 	addi	sp,sp,-20
 1000284:	dfc00415 	stw	ra,16(sp)
 1000288:	df000315 	stw	fp,12(sp)
 100028c:	df000304 	addi	fp,sp,12
 1000290:	e13ffd15 	stw	r4,-12(fp)
 1000294:	e17ffe05 	stb	r5,-8(fp)
	switch(direction) {
 1000298:	e0bffe03 	ldbu	r2,-8(fp)
 100029c:	e0bfff15 	stw	r2,-4(fp)
 10002a0:	e0ffff17 	ldw	r3,-4(fp)
 10002a4:	188013a0 	cmpeqi	r2,r3,78
 10002a8:	10000e1e 	bne	r2,zero,10002e4 <_ZN3App12writeCompassEh+0x64>
 10002ac:	e0ffff17 	ldw	r3,-4(fp)
 10002b0:	188013c8 	cmpgei	r2,r3,79
 10002b4:	1000041e 	bne	r2,zero,10002c8 <_ZN3App12writeCompassEh+0x48>
 10002b8:	e0ffff17 	ldw	r3,-4(fp)
 10002bc:	18801160 	cmpeqi	r2,r3,69
 10002c0:	1000101e 	bne	r2,zero,1000304 <_ZN3App12writeCompassEh+0x84>
 10002c4:	00001606 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
 10002c8:	e0ffff17 	ldw	r3,-4(fp)
 10002cc:	188014e0 	cmpeqi	r2,r3,83
 10002d0:	1000101e 	bne	r2,zero,1000314 <_ZN3App12writeCompassEh+0x94>
 10002d4:	e0ffff17 	ldw	r3,-4(fp)
 10002d8:	188015e0 	cmpeqi	r2,r3,87
 10002dc:	1000051e 	bne	r2,zero,10002f4 <_ZN3App12writeCompassEh+0x74>
 10002e0:	00000f06 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'N':
			printf("Sending direction as North.\n");
 10002e4:	01004074 	movhi	r4,257
 10002e8:	2105d804 	addi	r4,r4,5984
 10002ec:	10054180 	call	1005418 <puts>
			break;
 10002f0:	00000b06 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'W':
			printf("Sending direction as West.\n");
 10002f4:	01004074 	movhi	r4,257
 10002f8:	2105df04 	addi	r4,r4,6012
 10002fc:	10054180 	call	1005418 <puts>
			break;
 1000300:	00000706 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'E':
			printf("Sending direction as East.\n");
 1000304:	01004074 	movhi	r4,257
 1000308:	2105e604 	addi	r4,r4,6040
 100030c:	10054180 	call	1005418 <puts>
			break;
 1000310:	00000306 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'S':
			printf("Sending direction as South.\n");
 1000314:	01004074 	movhi	r4,257
 1000318:	2105ed04 	addi	r4,r4,6068
 100031c:	10054180 	call	1005418 <puts>
			break;
	}
}
 1000320:	e037883a 	mov	sp,fp
 1000324:	dfc00117 	ldw	ra,4(sp)
 1000328:	df000017 	ldw	fp,0(sp)
 100032c:	dec00204 	addi	sp,sp,8
 1000330:	f800283a 	ret

01000334 <_ZN3App14writeGyroscopeEii>:

void App::writeGyroscope(int xAngle, int yAngle) {
 1000334:	defffb04 	addi	sp,sp,-20
 1000338:	dfc00415 	stw	ra,16(sp)
 100033c:	df000315 	stw	fp,12(sp)
 1000340:	df000304 	addi	fp,sp,12
 1000344:	e13ffd15 	stw	r4,-12(fp)
 1000348:	e17ffe15 	stw	r5,-8(fp)
 100034c:	e1bfff15 	stw	r6,-4(fp)
	printf("Sending angle to vest.\n");
 1000350:	01004074 	movhi	r4,257
 1000354:	2105f404 	addi	r4,r4,6096
 1000358:	10054180 	call	1005418 <puts>
	printf("%i\n", xAngle);
 100035c:	01004074 	movhi	r4,257
 1000360:	2105fa04 	addi	r4,r4,6120
 1000364:	e17ffe17 	ldw	r5,-8(fp)
 1000368:	10052dc0 	call	10052dc <printf>
	printf("%i\n", yAngle);
 100036c:	01004074 	movhi	r4,257
 1000370:	2105fa04 	addi	r4,r4,6120
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	10052dc0 	call	10052dc <printf>
}
 100037c:	e037883a 	mov	sp,fp
 1000380:	dfc00117 	ldw	ra,4(sp)
 1000384:	df000017 	ldw	fp,0(sp)
 1000388:	dec00204 	addi	sp,sp,8
 100038c:	f800283a 	ret

01000390 <_ZN3App3runEv>:

void App::run() {
 1000390:	defff204 	addi	sp,sp,-56
 1000394:	dfc00d15 	stw	ra,52(sp)
 1000398:	df000c15 	stw	fp,48(sp)
 100039c:	df000c04 	addi	fp,sp,48
 10003a0:	e13ffe15 	stw	r4,-8(fp)
	unsigned char *data;
	unsigned int *size;


	motors->write((1<<24)|(255<<16)|(255<<8)|(1));
 10003a4:	d126e617 	ldw	r4,-25704(gp)
 10003a8:	01408034 	movhi	r5,512
 10003ac:	297fc044 	addi	r5,r5,-255
 10003b0:	1000c840 	call	1000c84 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(1));
 10003b4:	d126e617 	ldw	r4,-25704(gp)
 10003b8:	0140c034 	movhi	r5,768
 10003bc:	297fc044 	addi	r5,r5,-255
 10003c0:	1000c840 	call	1000c84 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));
 10003c4:	d126e617 	ldw	r4,-25704(gp)
 10003c8:	01404034 	movhi	r5,256
 10003cc:	297fffc4 	addi	r5,r5,-1
 10003d0:	1000c840 	call	1000c84 <_ZN6Motors5writeEj>
 10003d4:	00000006 	br	10003d8 <_ZN3App3runEv+0x48>

	while (1) {
		printf("Receiving data...\n");
 10003d8:	01004074 	movhi	r4,257
 10003dc:	2105fb04 	addi	r4,r4,6124
 10003e0:	10054180 	call	1005418 <puts>

		wifi->receive(data, size);
 10003e4:	e0bffe17 	ldw	r2,-8(fp)
 10003e8:	11000017 	ldw	r4,0(r2)
 10003ec:	e17ffd17 	ldw	r5,-12(fp)
 10003f0:	e1bffc17 	ldw	r6,-16(fp)
 10003f4:	10010e00 	call	10010e0 <_ZN4WiFi7receiveEPhPj>
		char type = data[0];
 10003f8:	e0bffd17 	ldw	r2,-12(fp)
 10003fc:	10800003 	ldbu	r2,0(r2)
 1000400:	e0bffb05 	stb	r2,-20(fp)
		switch (type) {
 1000404:	e0bffb07 	ldb	r2,-20(fp)
 1000408:	e0bfff15 	stw	r2,-4(fp)
 100040c:	e0ffff17 	ldw	r3,-4(fp)
 1000410:	188018e0 	cmpeqi	r2,r3,99
 1000414:	10004f1e 	bne	r2,zero,1000554 <_ZN3App3runEv+0x1c4>
 1000418:	e0ffff17 	ldw	r3,-4(fp)
 100041c:	18801908 	cmpgei	r2,r3,100
 1000420:	1000041e 	bne	r2,zero,1000434 <_ZN3App3runEv+0xa4>
 1000424:	e0ffff17 	ldw	r3,-4(fp)
 1000428:	18801860 	cmpeqi	r2,r3,97
 100042c:	1000431e 	bne	r2,zero,100053c <_ZN3App3runEv+0x1ac>
 1000430:	00006406 	br	10005c4 <_ZN3App3runEv+0x234>
 1000434:	e0ffff17 	ldw	r3,-4(fp)
 1000438:	188019e0 	cmpeqi	r2,r3,103
 100043c:	1000511e 	bne	r2,zero,1000584 <_ZN3App3runEv+0x1f4>
 1000440:	e0ffff17 	ldw	r3,-4(fp)
 1000444:	18801b60 	cmpeqi	r2,r3,109
 1000448:	1000011e 	bne	r2,zero,1000450 <_ZN3App3runEv+0xc0>
 100044c:	00005d06 	br	10005c4 <_ZN3App3runEv+0x234>
		case 'm': { /* motors */
			printf("%c %c",data[4],data[5]);
 1000450:	e0bffd17 	ldw	r2,-12(fp)
 1000454:	10800104 	addi	r2,r2,4
 1000458:	10800003 	ldbu	r2,0(r2)
 100045c:	11403fcc 	andi	r5,r2,255
 1000460:	e0bffd17 	ldw	r2,-12(fp)
 1000464:	10800144 	addi	r2,r2,5
 1000468:	10800003 	ldbu	r2,0(r2)
 100046c:	11803fcc 	andi	r6,r2,255
 1000470:	01004074 	movhi	r4,257
 1000474:	21060004 	addi	r4,r4,6144
 1000478:	10052dc0 	call	10052dc <printf>
			int cmd = (int)(data[1]);
 100047c:	e0bffd17 	ldw	r2,-12(fp)
 1000480:	10800044 	addi	r2,r2,1
 1000484:	10800003 	ldbu	r2,0(r2)
 1000488:	10803fcc 	andi	r2,r2,255
 100048c:	e0bffa15 	stw	r2,-24(fp)
			int linha = (int)(data[2]);
 1000490:	e0bffd17 	ldw	r2,-12(fp)
 1000494:	10800084 	addi	r2,r2,2
 1000498:	10800003 	ldbu	r2,0(r2)
 100049c:	10803fcc 	andi	r2,r2,255
 10004a0:	e0bff915 	stw	r2,-28(fp)
			int coluna = (int)(data[3]);
 10004a4:	e0bffd17 	ldw	r2,-12(fp)
 10004a8:	108000c4 	addi	r2,r2,3
 10004ac:	10800003 	ldbu	r2,0(r2)
 10004b0:	10803fcc 	andi	r2,r2,255
 10004b4:	e0bff815 	stw	r2,-32(fp)
			int valor = (int)(data[4]);
 10004b8:	e0bffd17 	ldw	r2,-12(fp)
 10004bc:	10800104 	addi	r2,r2,4
 10004c0:	10800003 	ldbu	r2,0(r2)
 10004c4:	10803fcc 	andi	r2,r2,255
 10004c8:	e0bff715 	stw	r2,-36(fp)
			printf("Motors received. Sending it to the motors...\n");
 10004cc:	01004074 	movhi	r4,257
 10004d0:	21060204 	addi	r4,r4,6152
 10004d4:	10054180 	call	1005418 <puts>
			int command = (  (cmd << 24) | (linha << 16) | (coluna << 8) | (valor) );
 10004d8:	e0bffa17 	ldw	r2,-24(fp)
 10004dc:	1006963a 	slli	r3,r2,24
 10004e0:	e0bff917 	ldw	r2,-28(fp)
 10004e4:	1004943a 	slli	r2,r2,16
 10004e8:	1886b03a 	or	r3,r3,r2
 10004ec:	e0bff817 	ldw	r2,-32(fp)
 10004f0:	1004923a 	slli	r2,r2,8
 10004f4:	1886b03a 	or	r3,r3,r2
 10004f8:	e0bff717 	ldw	r2,-36(fp)
 10004fc:	1884b03a 	or	r2,r3,r2
 1000500:	e0bff615 	stw	r2,-40(fp)
			printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
 1000504:	e0bff717 	ldw	r2,-36(fp)
 1000508:	d8800015 	stw	r2,0(sp)
 100050c:	e0bff617 	ldw	r2,-40(fp)
 1000510:	d8800115 	stw	r2,4(sp)
 1000514:	01004074 	movhi	r4,257
 1000518:	21060e04 	addi	r4,r4,6200
 100051c:	e17ffa17 	ldw	r5,-24(fp)
 1000520:	e1bff917 	ldw	r6,-28(fp)
 1000524:	e1fff817 	ldw	r7,-32(fp)
 1000528:	10052dc0 	call	10052dc <printf>
			motors->write(command);
 100052c:	d126e617 	ldw	r4,-25704(gp)
 1000530:	e17ff617 	ldw	r5,-40(fp)
 1000534:	1000c840 	call	1000c84 <_ZN6Motors5writeEj>
		}
			break;
 1000538:	003fa706 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'a': { /*audio*/
			printf("Audio received. Sending it to the FFT...\n");
 100053c:	01004074 	movhi	r4,257
 1000540:	21061504 	addi	r4,r4,6228
 1000544:	10054180 	call	1005418 <puts>
			printf("%s\n", data);
 1000548:	e13ffd17 	ldw	r4,-12(fp)
 100054c:	10054180 	call	1005418 <puts>

			//if(!fft->isProcessing()) {
			//	fft->write(buffer.pop());
			//}
		}
			break;
 1000550:	003fa106 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'c': { /*compass*/
			printf("Compass received. Sending to the motors...\n");
 1000554:	01004074 	movhi	r4,257
 1000558:	21062004 	addi	r4,r4,6272
 100055c:	10054180 	call	1005418 <puts>
			printf("%s\n", data);
 1000560:	e13ffd17 	ldw	r4,-12(fp)
 1000564:	10054180 	call	1005418 <puts>
			writeCompass(data[1]);
 1000568:	e0bffd17 	ldw	r2,-12(fp)
 100056c:	10800044 	addi	r2,r2,1
 1000570:	10800003 	ldbu	r2,0(r2)
 1000574:	11403fcc 	andi	r5,r2,255
 1000578:	e13ffe17 	ldw	r4,-8(fp)
 100057c:	10002800 	call	1000280 <_ZN3App12writeCompassEh>
		}
			break;
 1000580:	003f9506 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'g': { /*gyroscope*/
			printf("Gyroscope received. Sending to the motors...\n");
 1000584:	01004074 	movhi	r4,257
 1000588:	21062b04 	addi	r4,r4,6316
 100058c:	10054180 	call	1005418 <puts>
			printf("%s\n", data);
 1000590:	e13ffd17 	ldw	r4,-12(fp)
 1000594:	10054180 	call	1005418 <puts>
			writeGyroscope(int(data[1]), int(data[2]));
 1000598:	e0bffd17 	ldw	r2,-12(fp)
 100059c:	10800044 	addi	r2,r2,1
 10005a0:	10800003 	ldbu	r2,0(r2)
 10005a4:	11403fcc 	andi	r5,r2,255
 10005a8:	e0bffd17 	ldw	r2,-12(fp)
 10005ac:	10800084 	addi	r2,r2,2
 10005b0:	10800003 	ldbu	r2,0(r2)
 10005b4:	11803fcc 	andi	r6,r2,255
 10005b8:	e13ffe17 	ldw	r4,-8(fp)
 10005bc:	10003340 	call	1000334 <_ZN3App14writeGyroscopeEii>
		}
			break;
 10005c0:	003f8506 	br	10003d8 <_ZN3App3runEv+0x48>
		default: {
			printf("Some data received. Don't know what to do...\n");
 10005c4:	01004074 	movhi	r4,257
 10005c8:	21063704 	addi	r4,r4,6364
 10005cc:	10054180 	call	1005418 <puts>
			printf("%s\n", data);
 10005d0:	e13ffd17 	ldw	r4,-12(fp)
 10005d4:	10054180 	call	1005418 <puts>

	motors->write((1<<24)|(255<<16)|(255<<8)|(1));
	motors->write((2<<24)|(255<<16)|(255<<8)|(1));
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));

	while (1) {
 10005d8:	003f7f06 	br	10003d8 <_ZN3App3runEv+0x48>

010005dc <_ZN3App10fftHandlerEj>:
	wifi->startServer();
	printf("Setup done\n");
	//fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
 10005dc:	defffc04 	addi	sp,sp,-16
 10005e0:	dfc00315 	stw	ra,12(sp)
 10005e4:	df000215 	stw	fp,8(sp)
 10005e8:	dc000115 	stw	r16,4(sp)
 10005ec:	df000104 	addi	fp,sp,4
 10005f0:	e13fff15 	stw	r4,-4(fp)
	printf("Got FFT output %d\n", output);
 10005f4:	01004074 	movhi	r4,257
 10005f8:	21064304 	addi	r4,r4,6412
 10005fc:	e17fff17 	ldw	r5,-4(fp)
 1000600:	10052dc0 	call	10052dc <printf>

	//	motors->write(output);
	printf("%i\n", buffer.length());
 1000604:	01004074 	movhi	r4,257
 1000608:	21157504 	addi	r4,r4,21972
 100060c:	10008940 	call	1000894 <_ZN3App6Buffer6lengthEv>
 1000610:	100b883a 	mov	r5,r2
 1000614:	01004074 	movhi	r4,257
 1000618:	2105fa04 	addi	r4,r4,6120
 100061c:	10052dc0 	call	10052dc <printf>
	fft->read();
 1000620:	d126e717 	ldw	r4,-25700(gp)
 1000624:	10009f00 	call	10009f0 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
 1000628:	01004074 	movhi	r4,257
 100062c:	21157504 	addi	r4,r4,21972
 1000630:	10008940 	call	1000894 <_ZN3App6Buffer6lengthEv>
 1000634:	10800048 	cmpgei	r2,r2,1
 1000638:	10803fcc 	andi	r2,r2,255
 100063c:	1005003a 	cmpeq	r2,r2,zero
 1000640:	1000071e 	bne	r2,zero,1000660 <_ZN3App10fftHandlerEj+0x84>
		fft->write(buffer.pop());
 1000644:	d426e717 	ldw	r16,-25700(gp)
 1000648:	01004074 	movhi	r4,257
 100064c:	21157504 	addi	r4,r4,21972
 1000650:	10007ac0 	call	10007ac <_ZN3App6Buffer3popEv>
 1000654:	100b883a 	mov	r5,r2
 1000658:	8009883a 	mov	r4,r16
 100065c:	1000a480 	call	1000a48 <_ZN3FFT5writeEPh>
}
 1000660:	e037883a 	mov	sp,fp
 1000664:	dfc00217 	ldw	ra,8(sp)
 1000668:	df000117 	ldw	fp,4(sp)
 100066c:	dc000017 	ldw	r16,0(sp)
 1000670:	dec00304 	addi	sp,sp,12
 1000674:	f800283a 	ret

01000678 <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
 1000678:	defffd04 	addi	sp,sp,-12
 100067c:	dfc00215 	stw	ra,8(sp)
 1000680:	df000115 	stw	fp,4(sp)
 1000684:	df000104 	addi	fp,sp,4
 1000688:	e13fff15 	stw	r4,-4(fp)
	wifi->config(SSID, PASSWORD);
 100068c:	e0bfff17 	ldw	r2,-4(fp)
 1000690:	11000017 	ldw	r4,0(r2)
 1000694:	01404074 	movhi	r5,257
 1000698:	29464804 	addi	r5,r5,6432
 100069c:	01804074 	movhi	r6,257
 10006a0:	31864b04 	addi	r6,r6,6444
 10006a4:	10012b00 	call	10012b0 <_ZN4WiFi6configEPcS0_>
	wifi->startServer();
 10006a8:	e0bfff17 	ldw	r2,-4(fp)
 10006ac:	11000017 	ldw	r4,0(r2)
 10006b0:	10010640 	call	1001064 <_ZN4WiFi11startServerEv>
	printf("Setup done\n");
 10006b4:	01004074 	movhi	r4,257
 10006b8:	21064e04 	addi	r4,r4,6456
 10006bc:	10054180 	call	1005418 <puts>
	//fft->setInterruptHandler(App::fftHandler);
}
 10006c0:	e037883a 	mov	sp,fp
 10006c4:	dfc00117 	ldw	ra,4(sp)
 10006c8:	df000017 	ldw	fp,0(sp)
 10006cc:	dec00204 	addi	sp,sp,8
 10006d0:	f800283a 	ret

010006d4 <_ZN3AppD1Ev>:

App::App() {
	wifi = WiFi::getSingleton();
}

App::~App() {
 10006d4:	defffd04 	addi	sp,sp,-12
 10006d8:	dfc00215 	stw	ra,8(sp)
 10006dc:	df000115 	stw	fp,4(sp)
 10006e0:	df000104 	addi	fp,sp,4
 10006e4:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
 10006e8:	e0bfff17 	ldw	r2,-4(fp)
 10006ec:	11000017 	ldw	r4,0(r2)
 10006f0:	1000eec0 	call	1000eec <_ZN4WiFi10stopServerEv>
}
 10006f4:	e037883a 	mov	sp,fp
 10006f8:	dfc00117 	ldw	ra,4(sp)
 10006fc:	df000017 	ldw	fp,0(sp)
 1000700:	dec00204 	addi	sp,sp,8
 1000704:	f800283a 	ret

01000708 <_ZN3AppD2Ev>:

App::App() {
	wifi = WiFi::getSingleton();
}

App::~App() {
 1000708:	defffd04 	addi	sp,sp,-12
 100070c:	dfc00215 	stw	ra,8(sp)
 1000710:	df000115 	stw	fp,4(sp)
 1000714:	df000104 	addi	fp,sp,4
 1000718:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
 100071c:	e0bfff17 	ldw	r2,-4(fp)
 1000720:	11000017 	ldw	r4,0(r2)
 1000724:	1000eec0 	call	1000eec <_ZN4WiFi10stopServerEv>
}
 1000728:	e037883a 	mov	sp,fp
 100072c:	dfc00117 	ldw	ra,4(sp)
 1000730:	df000017 	ldw	fp,0(sp)
 1000734:	dec00204 	addi	sp,sp,8
 1000738:	f800283a 	ret

0100073c <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
 100073c:	defffd04 	addi	sp,sp,-12
 1000740:	dfc00215 	stw	ra,8(sp)
 1000744:	df000115 	stw	fp,4(sp)
 1000748:	df000104 	addi	fp,sp,4
 100074c:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
 1000750:	100146c0 	call	100146c <_ZN4WiFi12getSingletonEv>
 1000754:	1007883a 	mov	r3,r2
 1000758:	e0bfff17 	ldw	r2,-4(fp)
 100075c:	10c00015 	stw	r3,0(r2)
}
 1000760:	e037883a 	mov	sp,fp
 1000764:	dfc00117 	ldw	ra,4(sp)
 1000768:	df000017 	ldw	fp,0(sp)
 100076c:	dec00204 	addi	sp,sp,8
 1000770:	f800283a 	ret

01000774 <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
 1000774:	defffd04 	addi	sp,sp,-12
 1000778:	dfc00215 	stw	ra,8(sp)
 100077c:	df000115 	stw	fp,4(sp)
 1000780:	df000104 	addi	fp,sp,4
 1000784:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
 1000788:	100146c0 	call	100146c <_ZN4WiFi12getSingletonEv>
 100078c:	1007883a 	mov	r3,r2
 1000790:	e0bfff17 	ldw	r2,-4(fp)
 1000794:	10c00015 	stw	r3,0(r2)
}
 1000798:	e037883a 	mov	sp,fp
 100079c:	dfc00117 	ldw	ra,4(sp)
 10007a0:	df000017 	ldw	fp,0(sp)
 10007a4:	dec00204 	addi	sp,sp,8
 10007a8:	f800283a 	ret

010007ac <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
 10007ac:	defffd04 	addi	sp,sp,-12
 10007b0:	df000215 	stw	fp,8(sp)
 10007b4:	df000204 	addi	fp,sp,8
 10007b8:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
 10007bc:	e0bffe17 	ldw	r2,-8(fp)
 10007c0:	10800217 	ldw	r2,8(r2)
 10007c4:	10bfffd8 	cmpnei	r2,r2,-1
 10007c8:	1000021e 	bne	r2,zero,10007d4 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
 10007cc:	e03fff15 	stw	zero,-4(fp)
 10007d0:	00002b06 	br	1000880 <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
 10007d4:	e0bffe17 	ldw	r2,-8(fp)
 10007d8:	10800217 	ldw	r2,8(r2)
 10007dc:	10c00044 	addi	r3,r2,1
 10007e0:	e0bffe17 	ldw	r2,-8(fp)
 10007e4:	10c00215 	stw	r3,8(r2)
 10007e8:	e0bffe17 	ldw	r2,-8(fp)
 10007ec:	10800217 	ldw	r2,8(r2)
 10007f0:	1007883a 	mov	r3,r2
 10007f4:	e0bffe17 	ldw	r2,-8(fp)
 10007f8:	10800017 	ldw	r2,0(r2)
 10007fc:	1884703a 	and	r2,r3,r2
 1000800:	1007883a 	mov	r3,r2
 1000804:	e0bffe17 	ldw	r2,-8(fp)
 1000808:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
 100080c:	e0bffe17 	ldw	r2,-8(fp)
 1000810:	10c00217 	ldw	r3,8(r2)
 1000814:	e0bffe17 	ldw	r2,-8(fp)
 1000818:	10800317 	ldw	r2,12(r2)
 100081c:	1880091e 	bne	r3,r2,1000844 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
 1000820:	e0bffe17 	ldw	r2,-8(fp)
 1000824:	10000315 	stw	zero,12(r2)
					begin = -1;
 1000828:	e0fffe17 	ldw	r3,-8(fp)
 100082c:	00bfffc4 	movi	r2,-1
 1000830:	18800215 	stw	r2,8(r3)
					len = 0;
 1000834:	e0bffe17 	ldw	r2,-8(fp)
 1000838:	10000115 	stw	zero,4(r2)
					return NULL;;
 100083c:	e03fff15 	stw	zero,-4(fp)
 1000840:	00000f06 	br	1000880 <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
 1000844:	e0bffe17 	ldw	r2,-8(fp)
 1000848:	10800117 	ldw	r2,4(r2)
 100084c:	10ffffc4 	addi	r3,r2,-1
 1000850:	e0bffe17 	ldw	r2,-8(fp)
 1000854:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
 1000858:	e0bffe17 	ldw	r2,-8(fp)
 100085c:	10c00417 	ldw	r3,16(r2)
 1000860:	e0bffe17 	ldw	r2,-8(fp)
 1000864:	10800217 	ldw	r2,8(r2)
 1000868:	1085883a 	add	r2,r2,r2
 100086c:	1085883a 	add	r2,r2,r2
 1000870:	1885883a 	add	r2,r3,r2
 1000874:	10bfff04 	addi	r2,r2,-4
 1000878:	10800017 	ldw	r2,0(r2)
 100087c:	e0bfff15 	stw	r2,-4(fp)
 1000880:	e0bfff17 	ldw	r2,-4(fp)
			}
 1000884:	e037883a 	mov	sp,fp
 1000888:	df000017 	ldw	fp,0(sp)
 100088c:	dec00104 	addi	sp,sp,4
 1000890:	f800283a 	ret

01000894 <_ZN3App6Buffer6lengthEv>:

			int length() {
 1000894:	defffe04 	addi	sp,sp,-8
 1000898:	df000115 	stw	fp,4(sp)
 100089c:	df000104 	addi	fp,sp,4
 10008a0:	e13fff15 	stw	r4,-4(fp)
				return len;
 10008a4:	e0bfff17 	ldw	r2,-4(fp)
 10008a8:	10800117 	ldw	r2,4(r2)
			}
 10008ac:	e037883a 	mov	sp,fp
 10008b0:	df000017 	ldw	fp,0(sp)
 10008b4:	dec00104 	addi	sp,sp,4
 10008b8:	f800283a 	ret

010008bc <_ZN3App6BufferC1Ev>:
	void run();

private:
	class Buffer {
		public:
			Buffer(){
 10008bc:	defffd04 	addi	sp,sp,-12
 10008c0:	dfc00215 	stw	ra,8(sp)
 10008c4:	df000115 	stw	fp,4(sp)
 10008c8:	df000104 	addi	fp,sp,4
 10008cc:	e13fff15 	stw	r4,-4(fp)
				size = 10;
 10008d0:	e0ffff17 	ldw	r3,-4(fp)
 10008d4:	00800284 	movi	r2,10
 10008d8:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
 10008dc:	e0bfff17 	ldw	r2,-4(fp)
 10008e0:	10800017 	ldw	r2,0(r2)
 10008e4:	1085883a 	add	r2,r2,r2
 10008e8:	1085883a 	add	r2,r2,r2
 10008ec:	1009883a 	mov	r4,r2
 10008f0:	10016d00 	call	10016d0 <_Znam>
 10008f4:	1007883a 	mov	r3,r2
 10008f8:	e0bfff17 	ldw	r2,-4(fp)
 10008fc:	10c00415 	stw	r3,16(r2)
				begin = -1;
 1000900:	e0ffff17 	ldw	r3,-4(fp)
 1000904:	00bfffc4 	movi	r2,-1
 1000908:	18800215 	stw	r2,8(r3)
				end = 0;
 100090c:	e0bfff17 	ldw	r2,-4(fp)
 1000910:	10000315 	stw	zero,12(r2)
				len = 0;
 1000914:	e0bfff17 	ldw	r2,-4(fp)
 1000918:	10000115 	stw	zero,4(r2)
			}
 100091c:	e037883a 	mov	sp,fp
 1000920:	dfc00117 	ldw	ra,4(sp)
 1000924:	df000017 	ldw	fp,0(sp)
 1000928:	dec00204 	addi	sp,sp,8
 100092c:	f800283a 	ret

01000930 <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = NULL;

/* public */
FFT::FFT() {
 1000930:	defffe04 	addi	sp,sp,-8
 1000934:	df000115 	stw	fp,4(sp)
 1000938:	df000104 	addi	fp,sp,4
 100093c:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 1000940:	e0bfff17 	ldw	r2,-4(fp)
 1000944:	10000105 	stb	zero,4(r2)
}
 1000948:	e037883a 	mov	sp,fp
 100094c:	df000017 	ldw	fp,0(sp)
 1000950:	dec00104 	addi	sp,sp,4
 1000954:	f800283a 	ret

01000958 <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = NULL;

/* public */
FFT::FFT() {
 1000958:	defffe04 	addi	sp,sp,-8
 100095c:	df000115 	stw	fp,4(sp)
 1000960:	df000104 	addi	fp,sp,4
 1000964:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 1000968:	e0bfff17 	ldw	r2,-4(fp)
 100096c:	10000105 	stb	zero,4(r2)
}
 1000970:	e037883a 	mov	sp,fp
 1000974:	df000017 	ldw	fp,0(sp)
 1000978:	dec00104 	addi	sp,sp,4
 100097c:	f800283a 	ret

01000980 <_ZN3FFTD2Ev>:

FFT::~FFT() {
 1000980:	defffe04 	addi	sp,sp,-8
 1000984:	df000115 	stw	fp,4(sp)
 1000988:	df000104 	addi	fp,sp,4
 100098c:	e13fff15 	stw	r4,-4(fp)
}
 1000990:	e037883a 	mov	sp,fp
 1000994:	df000017 	ldw	fp,0(sp)
 1000998:	dec00104 	addi	sp,sp,4
 100099c:	f800283a 	ret

010009a0 <_ZN3FFTD1Ev>:
/* public */
FFT::FFT() {
	processing = false;
}

FFT::~FFT() {
 10009a0:	defffe04 	addi	sp,sp,-8
 10009a4:	df000115 	stw	fp,4(sp)
 10009a8:	df000104 	addi	fp,sp,4
 10009ac:	e13fff15 	stw	r4,-4(fp)
}
 10009b0:	e037883a 	mov	sp,fp
 10009b4:	df000017 	ldw	fp,0(sp)
 10009b8:	dec00104 	addi	sp,sp,4
 10009bc:	f800283a 	ret

010009c0 <_ZN3FFT19setInterruptHandlerEPFvjE>:
	if (fft == NULL)
		fft = new FFT();
	return fft;
}

void FFT::setInterruptHandler(handler h) {
 10009c0:	defffd04 	addi	sp,sp,-12
 10009c4:	df000215 	stw	fp,8(sp)
 10009c8:	df000204 	addi	fp,sp,8
 10009cc:	e13ffe15 	stw	r4,-8(fp)
 10009d0:	e17fff15 	stw	r5,-4(fp)
	int_handler = h;
 10009d4:	e0fffe17 	ldw	r3,-8(fp)
 10009d8:	e0bfff17 	ldw	r2,-4(fp)
 10009dc:	18800015 	stw	r2,0(r3)
}
 10009e0:	e037883a 	mov	sp,fp
 10009e4:	df000017 	ldw	fp,0(sp)
 10009e8:	dec00104 	addi	sp,sp,4
 10009ec:	f800283a 	ret

010009f0 <_ZN3FFT4readEv>:
	int_handler(3);

	delete input;
}

unsigned int FFT::read() {
 10009f0:	defffe04 	addi	sp,sp,-8
 10009f4:	df000115 	stw	fp,4(sp)
 10009f8:	df000104 	addi	fp,sp,4
 10009fc:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 1000a00:	e0bfff17 	ldw	r2,-4(fp)
 1000a04:	10000105 	stb	zero,4(r2)
	return 0;
 1000a08:	0005883a 	mov	r2,zero
}
 1000a0c:	e037883a 	mov	sp,fp
 1000a10:	df000017 	ldw	fp,0(sp)
 1000a14:	dec00104 	addi	sp,sp,4
 1000a18:	f800283a 	ret

01000a1c <_ZN3FFT12isProcessingEv>:

bool FFT::isProcessing() {
 1000a1c:	defffe04 	addi	sp,sp,-8
 1000a20:	df000115 	stw	fp,4(sp)
 1000a24:	df000104 	addi	fp,sp,4
 1000a28:	e13fff15 	stw	r4,-4(fp)
	return processing;
 1000a2c:	e0bfff17 	ldw	r2,-4(fp)
 1000a30:	10800103 	ldbu	r2,4(r2)
 1000a34:	10803fcc 	andi	r2,r2,255
}
 1000a38:	e037883a 	mov	sp,fp
 1000a3c:	df000017 	ldw	fp,0(sp)
 1000a40:	dec00104 	addi	sp,sp,4
 1000a44:	f800283a 	ret

01000a48 <_ZN3FFT5writeEPh>:

void FFT::setInterruptHandler(handler h) {
	int_handler = h;
}

void FFT::write(unsigned char *input) {
 1000a48:	defffc04 	addi	sp,sp,-16
 1000a4c:	dfc00315 	stw	ra,12(sp)
 1000a50:	df000215 	stw	fp,8(sp)
 1000a54:	df000204 	addi	fp,sp,8
 1000a58:	e13ffe15 	stw	r4,-8(fp)
 1000a5c:	e17fff15 	stw	r5,-4(fp)
	printf("%s\n", input);
 1000a60:	e13fff17 	ldw	r4,-4(fp)
 1000a64:	10054180 	call	1005418 <puts>

	processing = true;
 1000a68:	e0fffe17 	ldw	r3,-8(fp)
 1000a6c:	00800044 	movi	r2,1
 1000a70:	18800105 	stb	r2,4(r3)
	int_handler(3);
 1000a74:	e0bffe17 	ldw	r2,-8(fp)
 1000a78:	10800017 	ldw	r2,0(r2)
 1000a7c:	010000c4 	movi	r4,3
 1000a80:	103ee83a 	callr	r2

	delete input;
 1000a84:	e13fff17 	ldw	r4,-4(fp)
 1000a88:	10017700 	call	1001770 <_ZdlPv>
}
 1000a8c:	e037883a 	mov	sp,fp
 1000a90:	dfc00117 	ldw	ra,4(sp)
 1000a94:	df000017 	ldw	fp,0(sp)
 1000a98:	dec00204 	addi	sp,sp,8
 1000a9c:	f800283a 	ret

01000aa0 <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
 1000aa0:	defffd04 	addi	sp,sp,-12
 1000aa4:	dfc00215 	stw	ra,8(sp)
 1000aa8:	df000115 	stw	fp,4(sp)
 1000aac:	dc000015 	stw	r16,0(sp)
 1000ab0:	d839883a 	mov	fp,sp
	if (fft == NULL)
 1000ab4:	d0a6e817 	ldw	r2,-25696(gp)
 1000ab8:	1004c03a 	cmpne	r2,r2,zero
 1000abc:	1000061e 	bne	r2,zero,1000ad8 <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
 1000ac0:	01000204 	movi	r4,8
 1000ac4:	10024840 	call	1002484 <_Znwm>
 1000ac8:	1021883a 	mov	r16,r2
 1000acc:	8009883a 	mov	r4,r16
 1000ad0:	10009580 	call	1000958 <_ZN3FFTC1Ev>
 1000ad4:	d426e815 	stw	r16,-25696(gp)
	return fft;
 1000ad8:	d0a6e817 	ldw	r2,-25696(gp)
}
 1000adc:	e037883a 	mov	sp,fp
 1000ae0:	dfc00217 	ldw	ra,8(sp)
 1000ae4:	df000117 	ldw	fp,4(sp)
 1000ae8:	dc000017 	ldw	r16,0(sp)
 1000aec:	dec00304 	addi	sp,sp,12
 1000af0:	f800283a 	ret

01000af4 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = NULL;

/* public */
Motors::~Motors() {
 1000af4:	defffe04 	addi	sp,sp,-8
 1000af8:	df000115 	stw	fp,4(sp)
 1000afc:	df000104 	addi	fp,sp,4
 1000b00:	e13fff15 	stw	r4,-4(fp)
}
 1000b04:	e037883a 	mov	sp,fp
 1000b08:	df000017 	ldw	fp,0(sp)
 1000b0c:	dec00104 	addi	sp,sp,4
 1000b10:	f800283a 	ret

01000b14 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = NULL;

/* public */
Motors::~Motors() {
 1000b14:	defffe04 	addi	sp,sp,-8
 1000b18:	df000115 	stw	fp,4(sp)
 1000b1c:	df000104 	addi	fp,sp,4
 1000b20:	e13fff15 	stw	r4,-4(fp)
}
 1000b24:	e037883a 	mov	sp,fp
 1000b28:	df000017 	ldw	fp,0(sp)
 1000b2c:	dec00104 	addi	sp,sp,4
 1000b30:	f800283a 	ret

01000b34 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(4, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
 1000b34:	defffb04 	addi	sp,sp,-20
 1000b38:	df000415 	stw	fp,16(sp)
 1000b3c:	df000404 	addi	fp,sp,16
 1000b40:	e13ffc15 	stw	r4,-16(fp)
 1000b44:	e17ffd15 	stw	r5,-12(fp)
 1000b48:	e1bffe15 	stw	r6,-8(fp)
 1000b4c:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
 1000b50:	e0bffc17 	ldw	r2,-16(fp)
 1000b54:	11000017 	ldw	r4,0(r2)
 1000b58:	e0bffd17 	ldw	r2,-12(fp)
 1000b5c:	1006963a 	slli	r3,r2,24
 1000b60:	e0bffe17 	ldw	r2,-8(fp)
 1000b64:	1004943a 	slli	r2,r2,16
 1000b68:	1887883a 	add	r3,r3,r2
 1000b6c:	e0bfff17 	ldw	r2,-4(fp)
 1000b70:	1004923a 	slli	r2,r2,8
 1000b74:	1887883a 	add	r3,r3,r2
 1000b78:	e0800117 	ldw	r2,4(fp)
 1000b7c:	1885883a 	add	r2,r3,r2
 1000b80:	20800015 	stw	r2,0(r4)
}
 1000b84:	e037883a 	mov	sp,fp
 1000b88:	df000017 	ldw	fp,0(sp)
 1000b8c:	dec00104 	addi	sp,sp,4
 1000b90:	f800283a 	ret

01000b94 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000b94:	defff904 	addi	sp,sp,-28
 1000b98:	dfc00615 	stw	ra,24(sp)
 1000b9c:	df000515 	stw	fp,20(sp)
 1000ba0:	df000504 	addi	fp,sp,20
 1000ba4:	e13ffc15 	stw	r4,-16(fp)
 1000ba8:	e17ffd15 	stw	r5,-12(fp)
 1000bac:	e1bffe15 	stw	r6,-8(fp)
 1000bb0:	e1ffff15 	stw	r7,-4(fp)
	write(4, line, column, valor);
 1000bb4:	e0bfff17 	ldw	r2,-4(fp)
 1000bb8:	d8800015 	stw	r2,0(sp)
 1000bbc:	e13ffc17 	ldw	r4,-16(fp)
 1000bc0:	01400104 	movi	r5,4
 1000bc4:	e1bffd17 	ldw	r6,-12(fp)
 1000bc8:	e1fffe17 	ldw	r7,-8(fp)
 1000bcc:	1000b340 	call	1000b34 <_ZN6Motors5writeEjjjj>
}
 1000bd0:	e037883a 	mov	sp,fp
 1000bd4:	dfc00117 	ldw	ra,4(sp)
 1000bd8:	df000017 	ldw	fp,0(sp)
 1000bdc:	dec00204 	addi	sp,sp,8
 1000be0:	f800283a 	ret

01000be4 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000be4:	defff904 	addi	sp,sp,-28
 1000be8:	dfc00615 	stw	ra,24(sp)
 1000bec:	df000515 	stw	fp,20(sp)
 1000bf0:	df000504 	addi	fp,sp,20
 1000bf4:	e13ffc15 	stw	r4,-16(fp)
 1000bf8:	e17ffd15 	stw	r5,-12(fp)
 1000bfc:	e1bffe15 	stw	r6,-8(fp)
 1000c00:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
 1000c04:	e0bfff17 	ldw	r2,-4(fp)
 1000c08:	d8800015 	stw	r2,0(sp)
 1000c0c:	e13ffc17 	ldw	r4,-16(fp)
 1000c10:	01400084 	movi	r5,2
 1000c14:	e1bffd17 	ldw	r6,-12(fp)
 1000c18:	e1fffe17 	ldw	r7,-8(fp)
 1000c1c:	1000b340 	call	1000b34 <_ZN6Motors5writeEjjjj>
}
 1000c20:	e037883a 	mov	sp,fp
 1000c24:	dfc00117 	ldw	ra,4(sp)
 1000c28:	df000017 	ldw	fp,0(sp)
 1000c2c:	dec00204 	addi	sp,sp,8
 1000c30:	f800283a 	ret

01000c34 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000c34:	defff904 	addi	sp,sp,-28
 1000c38:	dfc00615 	stw	ra,24(sp)
 1000c3c:	df000515 	stw	fp,20(sp)
 1000c40:	df000504 	addi	fp,sp,20
 1000c44:	e13ffc15 	stw	r4,-16(fp)
 1000c48:	e17ffd15 	stw	r5,-12(fp)
 1000c4c:	e1bffe15 	stw	r6,-8(fp)
 1000c50:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
 1000c54:	e0bfff17 	ldw	r2,-4(fp)
 1000c58:	d8800015 	stw	r2,0(sp)
 1000c5c:	e13ffc17 	ldw	r4,-16(fp)
 1000c60:	01400044 	movi	r5,1
 1000c64:	e1bffd17 	ldw	r6,-12(fp)
 1000c68:	e1fffe17 	ldw	r7,-8(fp)
 1000c6c:	1000b340 	call	1000b34 <_ZN6Motors5writeEjjjj>
}
 1000c70:	e037883a 	mov	sp,fp
 1000c74:	dfc00117 	ldw	ra,4(sp)
 1000c78:	df000017 	ldw	fp,0(sp)
 1000c7c:	dec00204 	addi	sp,sp,8
 1000c80:	f800283a 	ret

01000c84 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
 1000c84:	defffd04 	addi	sp,sp,-12
 1000c88:	df000215 	stw	fp,8(sp)
 1000c8c:	df000204 	addi	fp,sp,8
 1000c90:	e13ffe15 	stw	r4,-8(fp)
 1000c94:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
 1000c98:	e0bffe17 	ldw	r2,-8(fp)
 1000c9c:	10c00017 	ldw	r3,0(r2)
 1000ca0:	e0bfff17 	ldw	r2,-4(fp)
 1000ca4:	18800015 	stw	r2,0(r3)
}
 1000ca8:	e037883a 	mov	sp,fp
 1000cac:	df000017 	ldw	fp,0(sp)
 1000cb0:	dec00104 	addi	sp,sp,4
 1000cb4:	f800283a 	ret

01000cb8 <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
 1000cb8:	defffc04 	addi	sp,sp,-16
 1000cbc:	dfc00315 	stw	ra,12(sp)
 1000cc0:	df000215 	stw	fp,8(sp)
 1000cc4:	df000204 	addi	fp,sp,8
 1000cc8:	e13fff15 	stw	r4,-4(fp)
	write(8, 0, 0, 0);
 1000ccc:	d8000015 	stw	zero,0(sp)
 1000cd0:	e13fff17 	ldw	r4,-4(fp)
 1000cd4:	01400204 	movi	r5,8
 1000cd8:	000d883a 	mov	r6,zero
 1000cdc:	000f883a 	mov	r7,zero
 1000ce0:	1000b340 	call	1000b34 <_ZN6Motors5writeEjjjj>
}
 1000ce4:	e037883a 	mov	sp,fp
 1000ce8:	dfc00117 	ldw	ra,4(sp)
 1000cec:	df000017 	ldw	fp,0(sp)
 1000cf0:	dec00204 	addi	sp,sp,8
 1000cf4:	f800283a 	ret

01000cf8 <_ZN6Motors21write_to_next_collummEv>:

void Motors::write_to_next_collumm() {
 1000cf8:	defffc04 	addi	sp,sp,-16
 1000cfc:	dfc00315 	stw	ra,12(sp)
 1000d00:	df000215 	stw	fp,8(sp)
 1000d04:	df000204 	addi	fp,sp,8
 1000d08:	e13fff15 	stw	r4,-4(fp)
	write(16, 0, 0, 0);
 1000d0c:	d8000015 	stw	zero,0(sp)
 1000d10:	e13fff17 	ldw	r4,-4(fp)
 1000d14:	01400404 	movi	r5,16
 1000d18:	000d883a 	mov	r6,zero
 1000d1c:	000f883a 	mov	r7,zero
 1000d20:	1000b340 	call	1000b34 <_ZN6Motors5writeEjjjj>
}
 1000d24:	e037883a 	mov	sp,fp
 1000d28:	dfc00117 	ldw	ra,4(sp)
 1000d2c:	df000017 	ldw	fp,0(sp)
 1000d30:	dec00204 	addi	sp,sp,8
 1000d34:	f800283a 	ret

01000d38 <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
 1000d38:	defffe04 	addi	sp,sp,-8
 1000d3c:	df000115 	stw	fp,4(sp)
 1000d40:	df000104 	addi	fp,sp,4
 1000d44:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
 1000d48:	e0ffff17 	ldw	r3,-4(fp)
 1000d4c:	00881a04 	movi	r2,8296
 1000d50:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
 1000d54:	e0ffff17 	ldw	r3,-4(fp)
 1000d58:	00881b04 	movi	r2,8300
 1000d5c:	18800115 	stw	r2,4(r3)
}
 1000d60:	e037883a 	mov	sp,fp
 1000d64:	df000017 	ldw	fp,0(sp)
 1000d68:	dec00104 	addi	sp,sp,4
 1000d6c:	f800283a 	ret

01000d70 <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumm() {
	write(16, 0, 0, 0);
}

/* private */
Motors::Motors() {
 1000d70:	defffe04 	addi	sp,sp,-8
 1000d74:	df000115 	stw	fp,4(sp)
 1000d78:	df000104 	addi	fp,sp,4
 1000d7c:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
 1000d80:	e0ffff17 	ldw	r3,-4(fp)
 1000d84:	00881a04 	movi	r2,8296
 1000d88:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
 1000d8c:	e0ffff17 	ldw	r3,-4(fp)
 1000d90:	00881b04 	movi	r2,8300
 1000d94:	18800115 	stw	r2,4(r3)
}
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <_ZN6Motors4readEv>:

unsigned int Motors::read() {
 1000da8:	defffe04 	addi	sp,sp,-8
 1000dac:	df000115 	stw	fp,4(sp)
 1000db0:	df000104 	addi	fp,sp,4
 1000db4:	e13fff15 	stw	r4,-4(fp)
	return *status;
 1000db8:	e0bfff17 	ldw	r2,-4(fp)
 1000dbc:	10800117 	ldw	r2,4(r2)
 1000dc0:	10800017 	ldw	r2,0(r2)
}
 1000dc4:	e037883a 	mov	sp,fp
 1000dc8:	df000017 	ldw	fp,0(sp)
 1000dcc:	dec00104 	addi	sp,sp,4
 1000dd0:	f800283a 	ret

01000dd4 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
 1000dd4:	defffd04 	addi	sp,sp,-12
 1000dd8:	dfc00215 	stw	ra,8(sp)
 1000ddc:	df000115 	stw	fp,4(sp)
 1000de0:	dc000015 	stw	r16,0(sp)
 1000de4:	d839883a 	mov	fp,sp
	if (motors == NULL)
 1000de8:	d0a6e917 	ldw	r2,-25692(gp)
 1000dec:	1004c03a 	cmpne	r2,r2,zero
 1000df0:	1000061e 	bne	r2,zero,1000e0c <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
 1000df4:	01000204 	movi	r4,8
 1000df8:	10024840 	call	1002484 <_Znwm>
 1000dfc:	1021883a 	mov	r16,r2
 1000e00:	8009883a 	mov	r4,r16
 1000e04:	1000d700 	call	1000d70 <_ZN6MotorsC1Ev>
 1000e08:	d426e915 	stw	r16,-25692(gp)
	return motors;
 1000e0c:	d0a6e917 	ldw	r2,-25692(gp)
}
 1000e10:	e037883a 	mov	sp,fp
 1000e14:	dfc00217 	ldw	ra,8(sp)
 1000e18:	df000117 	ldw	fp,4(sp)
 1000e1c:	dc000017 	ldw	r16,0(sp)
 1000e20:	dec00304 	addi	sp,sp,12
 1000e24:	f800283a 	ret

01000e28 <_ZN4WiFi5writeEPci>:
		k = getc(file);
		printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
 1000e28:	defffb04 	addi	sp,sp,-20
 1000e2c:	dfc00415 	stw	ra,16(sp)
 1000e30:	df000315 	stw	fp,12(sp)
 1000e34:	df000304 	addi	fp,sp,12
 1000e38:	e13ffd15 	stw	r4,-12(fp)
 1000e3c:	e17ffe15 	stw	r5,-8(fp)
 1000e40:	e1bfff15 	stw	r6,-4(fp)
	fwrite(msg, 1, size, file);
 1000e44:	e1bfff17 	ldw	r6,-4(fp)
 1000e48:	e0bffd17 	ldw	r2,-12(fp)
 1000e4c:	11c00017 	ldw	r7,0(r2)
 1000e50:	e13ffe17 	ldw	r4,-8(fp)
 1000e54:	01400044 	movi	r5,1
 1000e58:	10047680 	call	1004768 <fwrite>
}
 1000e5c:	e037883a 	mov	sp,fp
 1000e60:	dfc00117 	ldw	ra,4(sp)
 1000e64:	df000017 	ldw	fp,0(sp)
 1000e68:	dec00204 	addi	sp,sp,8
 1000e6c:	f800283a 	ret

01000e70 <_ZN4WiFi15sendInstructionEPc>:
	if (!file) {
		printf("Error opening UART.\n");
	}
}

void WiFi::sendInstruction(char * instruction) {
 1000e70:	defffb04 	addi	sp,sp,-20
 1000e74:	dfc00415 	stw	ra,16(sp)
 1000e78:	df000315 	stw	fp,12(sp)
 1000e7c:	df000304 	addi	fp,sp,12
 1000e80:	e13ffe15 	stw	r4,-8(fp)
 1000e84:	e17fff15 	stw	r5,-4(fp)
	write(instruction, strlen(instruction));
 1000e88:	e13fff17 	ldw	r4,-4(fp)
 1000e8c:	1005c940 	call	1005c94 <strlen>
 1000e90:	100d883a 	mov	r6,r2
 1000e94:	e13ffe17 	ldw	r4,-8(fp)
 1000e98:	e17fff17 	ldw	r5,-4(fp)
 1000e9c:	1000e280 	call	1000e28 <_ZN4WiFi5writeEPci>
	write("\r\n", 2);
 1000ea0:	e13ffe17 	ldw	r4,-8(fp)
 1000ea4:	01404074 	movhi	r5,257
 1000ea8:	29465104 	addi	r5,r5,6468
 1000eac:	01800084 	movi	r6,2
 1000eb0:	1000e280 	call	1000e28 <_ZN4WiFi5writeEPci>

	char k;
	do {
		k = getc(file);
 1000eb4:	e0bffe17 	ldw	r2,-8(fp)
 1000eb8:	11000017 	ldw	r4,0(r2)
 1000ebc:	10047a80 	call	10047a8 <getc>
 1000ec0:	e0bffd05 	stb	r2,-12(fp)
		printf("%c",k);
 1000ec4:	e13ffd07 	ldb	r4,-12(fp)
 1000ec8:	10053540 	call	1005354 <putchar>
void WiFi::sendInstruction(char * instruction) {
	write(instruction, strlen(instruction));
	write("\r\n", 2);

	char k;
	do {
 1000ecc:	e0bffd07 	ldb	r2,-12(fp)
 1000ed0:	108012d8 	cmpnei	r2,r2,75
 1000ed4:	103ff71e 	bne	r2,zero,1000eb4 <_ZN4WiFi15sendInstructionEPc+0x44>
		k = getc(file);
		printf("%c",k);
	} while (k != 'K');
}
 1000ed8:	e037883a 	mov	sp,fp
 1000edc:	dfc00117 	ldw	ra,4(sp)
 1000ee0:	df000017 	ldw	fp,0(sp)
 1000ee4:	dec00204 	addi	sp,sp,8
 1000ee8:	f800283a 	ret

01000eec <_ZN4WiFi10stopServerEv>:
	sendInstruction(server);

	printf("Done!\n");
}

void WiFi::stopServer() {
 1000eec:	defff704 	addi	sp,sp,-36
 1000ef0:	dfc00815 	stw	ra,32(sp)
 1000ef4:	df000715 	stw	fp,28(sp)
 1000ef8:	df000704 	addi	fp,sp,28
 1000efc:	e13fff15 	stw	r4,-4(fp)
	char stop[] = "AT+CIPSERVER=0";
 1000f00:	00c04074 	movhi	r3,257
 1000f04:	18c65204 	addi	r3,r3,6472
 1000f08:	18800017 	ldw	r2,0(r3)
 1000f0c:	e0bff915 	stw	r2,-28(fp)
 1000f10:	18800117 	ldw	r2,4(r3)
 1000f14:	e0bffa15 	stw	r2,-24(fp)
 1000f18:	18800217 	ldw	r2,8(r3)
 1000f1c:	e0bffb15 	stw	r2,-20(fp)
 1000f20:	1880030b 	ldhu	r2,12(r3)
 1000f24:	e0bffc0d 	sth	r2,-16(fp)
 1000f28:	18800383 	ldbu	r2,14(r3)
 1000f2c:	e0bffc85 	stb	r2,-14(fp)
	char rst[] = "AT+RST";
 1000f30:	00c04074 	movhi	r3,257
 1000f34:	18c65604 	addi	r3,r3,6488
 1000f38:	18800003 	ldbu	r2,0(r3)
 1000f3c:	e0bffcc5 	stb	r2,-13(fp)
 1000f40:	18800043 	ldbu	r2,1(r3)
 1000f44:	e0bffd05 	stb	r2,-12(fp)
 1000f48:	18800083 	ldbu	r2,2(r3)
 1000f4c:	e0bffd45 	stb	r2,-11(fp)
 1000f50:	188000c3 	ldbu	r2,3(r3)
 1000f54:	e0bffd85 	stb	r2,-10(fp)
 1000f58:	18800103 	ldbu	r2,4(r3)
 1000f5c:	e0bffdc5 	stb	r2,-9(fp)
 1000f60:	18800143 	ldbu	r2,5(r3)
 1000f64:	e0bffe05 	stb	r2,-8(fp)
 1000f68:	18800183 	ldbu	r2,6(r3)
 1000f6c:	e0bffe45 	stb	r2,-7(fp)
	sendInstruction(stop);
 1000f70:	e13fff17 	ldw	r4,-4(fp)
 1000f74:	e17ff904 	addi	r5,fp,-28
 1000f78:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>
	sendInstruction(rst);
 1000f7c:	e17ffcc4 	addi	r5,fp,-13
 1000f80:	e13fff17 	ldw	r4,-4(fp)
 1000f84:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>
}
 1000f88:	e037883a 	mov	sp,fp
 1000f8c:	dfc00117 	ldw	ra,4(sp)
 1000f90:	df000017 	ldw	fp,0(sp)
 1000f94:	dec00204 	addi	sp,sp,8
 1000f98:	f800283a 	ret

01000f9c <_ZN4WiFiC1Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
 1000f9c:	defffd04 	addi	sp,sp,-12
 1000fa0:	dfc00215 	stw	ra,8(sp)
 1000fa4:	df000115 	stw	fp,4(sp)
 1000fa8:	df000104 	addi	fp,sp,4
 1000fac:	e13fff15 	stw	r4,-4(fp)
	file = fopen("/dev/esp8266", "r+");
 1000fb0:	01004074 	movhi	r4,257
 1000fb4:	21065804 	addi	r4,r4,6496
 1000fb8:	01404074 	movhi	r5,257
 1000fbc:	29465c04 	addi	r5,r5,6512
 1000fc0:	1003c0c0 	call	1003c0c <fopen>
 1000fc4:	1007883a 	mov	r3,r2
 1000fc8:	e0bfff17 	ldw	r2,-4(fp)
 1000fcc:	10c00015 	stw	r3,0(r2)
	if (!file) {
 1000fd0:	e0bfff17 	ldw	r2,-4(fp)
 1000fd4:	10800017 	ldw	r2,0(r2)
 1000fd8:	1004c03a 	cmpne	r2,r2,zero
 1000fdc:	1000031e 	bne	r2,zero,1000fec <_ZN4WiFiC1Ev+0x50>
		printf("Error opening UART.\n");
 1000fe0:	01004074 	movhi	r4,257
 1000fe4:	21065d04 	addi	r4,r4,6516
 1000fe8:	10054180 	call	1005418 <puts>
	}
}
 1000fec:	e037883a 	mov	sp,fp
 1000ff0:	dfc00117 	ldw	ra,4(sp)
 1000ff4:	df000017 	ldw	fp,0(sp)
 1000ff8:	dec00204 	addi	sp,sp,8
 1000ffc:	f800283a 	ret

01001000 <_ZN4WiFiC2Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
 1001000:	defffd04 	addi	sp,sp,-12
 1001004:	dfc00215 	stw	ra,8(sp)
 1001008:	df000115 	stw	fp,4(sp)
 100100c:	df000104 	addi	fp,sp,4
 1001010:	e13fff15 	stw	r4,-4(fp)
	file = fopen("/dev/esp8266", "r+");
 1001014:	01004074 	movhi	r4,257
 1001018:	21065804 	addi	r4,r4,6496
 100101c:	01404074 	movhi	r5,257
 1001020:	29465c04 	addi	r5,r5,6512
 1001024:	1003c0c0 	call	1003c0c <fopen>
 1001028:	1007883a 	mov	r3,r2
 100102c:	e0bfff17 	ldw	r2,-4(fp)
 1001030:	10c00015 	stw	r3,0(r2)
	if (!file) {
 1001034:	e0bfff17 	ldw	r2,-4(fp)
 1001038:	10800017 	ldw	r2,0(r2)
 100103c:	1004c03a 	cmpne	r2,r2,zero
 1001040:	1000031e 	bne	r2,zero,1001050 <_ZN4WiFiC2Ev+0x50>
		printf("Error opening UART.\n");
 1001044:	01004074 	movhi	r4,257
 1001048:	21065d04 	addi	r4,r4,6516
 100104c:	10054180 	call	1005418 <puts>
	}
}
 1001050:	e037883a 	mov	sp,fp
 1001054:	dfc00117 	ldw	ra,4(sp)
 1001058:	df000017 	ldw	fp,0(sp)
 100105c:	dec00204 	addi	sp,sp,8
 1001060:	f800283a 	ret

01001064 <_ZN4WiFi11startServerEv>:
	sendInstruction(ip);

	printf("Done!\n");
}

void WiFi::startServer() {
 1001064:	defff804 	addi	sp,sp,-32
 1001068:	dfc00715 	stw	ra,28(sp)
 100106c:	df000615 	stw	fp,24(sp)
 1001070:	df000604 	addi	fp,sp,24
 1001074:	e13fff15 	stw	r4,-4(fp)
	printf("Starting Server...\n");
 1001078:	01004074 	movhi	r4,257
 100107c:	21066204 	addi	r4,r4,6536
 1001080:	10054180 	call	1005418 <puts>

	char server[] = "AT+CIPSERVER=1,80";
 1001084:	00c04074 	movhi	r3,257
 1001088:	18c66904 	addi	r3,r3,6564
 100108c:	18800017 	ldw	r2,0(r3)
 1001090:	e0bffa15 	stw	r2,-24(fp)
 1001094:	18800117 	ldw	r2,4(r3)
 1001098:	e0bffb15 	stw	r2,-20(fp)
 100109c:	18800217 	ldw	r2,8(r3)
 10010a0:	e0bffc15 	stw	r2,-16(fp)
 10010a4:	18800317 	ldw	r2,12(r3)
 10010a8:	e0bffd15 	stw	r2,-12(fp)
 10010ac:	1880040b 	ldhu	r2,16(r3)
 10010b0:	e0bffe0d 	sth	r2,-8(fp)
	sendInstruction(server);
 10010b4:	e13fff17 	ldw	r4,-4(fp)
 10010b8:	e17ffa04 	addi	r5,fp,-24
 10010bc:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>

	printf("Done!\n");
 10010c0:	01004074 	movhi	r4,257
 10010c4:	21066704 	addi	r4,r4,6556
 10010c8:	10054180 	call	1005418 <puts>
}
 10010cc:	e037883a 	mov	sp,fp
 10010d0:	dfc00117 	ldw	ra,4(sp)
 10010d4:	df000017 	ldw	fp,0(sp)
 10010d8:	dec00204 	addi	sp,sp,8
 10010dc:	f800283a 	ret

010010e0 <_ZN4WiFi7receiveEPhPj>:
	char rst[] = "AT+RST";
	sendInstruction(stop);
	sendInstruction(rst);
}

void WiFi::receive(unsigned char* data, unsigned int *size) {
 10010e0:	defff604 	addi	sp,sp,-40
 10010e4:	dfc00915 	stw	ra,36(sp)
 10010e8:	df000815 	stw	fp,32(sp)
 10010ec:	dc000715 	stw	r16,28(sp)
 10010f0:	df000704 	addi	fp,sp,28
 10010f4:	e13ffd15 	stw	r4,-12(fp)
 10010f8:	e17ffe15 	stw	r5,-8(fp)
 10010fc:	e1bfff15 	stw	r6,-4(fp)
	char c;
	unsigned int i;
	i=0;
 1001100:	e03ffb15 	stw	zero,-20(fp)

	do {
		c = getc(file);
 1001104:	e0bffd17 	ldw	r2,-12(fp)
 1001108:	11000017 	ldw	r4,0(r2)
 100110c:	10047a80 	call	10047a8 <getc>
 1001110:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 1001114:	e0bffb17 	ldw	r2,-20(fp)
 1001118:	10800044 	addi	r2,r2,1
 100111c:	e0bffb15 	stw	r2,-20(fp)
void WiFi::receive(unsigned char* data, unsigned int *size) {
	char c;
	unsigned int i;
	i=0;

	do {
 1001120:	e0bffc07 	ldb	r2,-16(fp)
 1001124:	10800ae0 	cmpeqi	r2,r2,43
 1001128:	1000031e 	bne	r2,zero,1001138 <_ZN4WiFi7receiveEPhPj+0x58>
 100112c:	e0bffb17 	ldw	r2,-20(fp)
 1001130:	10810030 	cmpltui	r2,r2,1024
 1001134:	103ff31e 	bne	r2,zero,1001104 <_ZN4WiFi7receiveEPhPj+0x24>
		c = getc(file);
		i=i+1;
	} while (c != '+' and i<1024);
	do {
		c = getc(file);
 1001138:	e0bffd17 	ldw	r2,-12(fp)
 100113c:	11000017 	ldw	r4,0(r2)
 1001140:	10047a80 	call	10047a8 <getc>
 1001144:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 1001148:	e0bffb17 	ldw	r2,-20(fp)
 100114c:	10800044 	addi	r2,r2,1
 1001150:	e0bffb15 	stw	r2,-20(fp)

	do {
		c = getc(file);
		i=i+1;
	} while (c != '+' and i<1024);
	do {
 1001154:	e0bffc07 	ldb	r2,-16(fp)
 1001158:	10800b20 	cmpeqi	r2,r2,44
 100115c:	1000031e 	bne	r2,zero,100116c <_ZN4WiFi7receiveEPhPj+0x8c>
 1001160:	e0bffb17 	ldw	r2,-20(fp)
 1001164:	10810030 	cmpltui	r2,r2,1024
 1001168:	103ff31e 	bne	r2,zero,1001138 <_ZN4WiFi7receiveEPhPj+0x58>
		c = getc(file);
		i=i+1;
	} while (c != ',' and i<1024);

	do {
		c = getc(file);
 100116c:	e0bffd17 	ldw	r2,-12(fp)
 1001170:	11000017 	ldw	r4,0(r2)
 1001174:	10047a80 	call	10047a8 <getc>
 1001178:	e0bffc05 	stb	r2,-16(fp)
		i=1+i;
 100117c:	e0bffb17 	ldw	r2,-20(fp)
 1001180:	10800044 	addi	r2,r2,1
 1001184:	e0bffb15 	stw	r2,-20(fp)
	do {
		c = getc(file);
		i=i+1;
	} while (c != ',' and i<1024);

	do {
 1001188:	e0bffc07 	ldb	r2,-16(fp)
 100118c:	10800b20 	cmpeqi	r2,r2,44
 1001190:	1000031e 	bne	r2,zero,10011a0 <_ZN4WiFi7receiveEPhPj+0xc0>
 1001194:	e0bffb17 	ldw	r2,-20(fp)
 1001198:	10810030 	cmpltui	r2,r2,1024
 100119c:	103ff31e 	bne	r2,zero,100116c <_ZN4WiFi7receiveEPhPj+0x8c>
		c = getc(file);
		i=1+i;
	} while (c != ',' and i<1024);

	*size = 0;
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10000015 	stw	zero,0(r2)

	c = getc(file);
 10011a8:	e0bffd17 	ldw	r2,-12(fp)
 10011ac:	11000017 	ldw	r4,0(r2)
 10011b0:	10047a80 	call	10047a8 <getc>
 10011b4:	e0bffc05 	stb	r2,-16(fp)

	while (c != ':' and i<1024) {
 10011b8:	00001106 	br	1001200 <_ZN4WiFi7receiveEPhPj+0x120>
		*size = *size * 10 + c - '0';
 10011bc:	e0bfff17 	ldw	r2,-4(fp)
 10011c0:	11000017 	ldw	r4,0(r2)
 10011c4:	01400284 	movi	r5,10
 10011c8:	1002f380 	call	1002f38 <__mulsi3>
 10011cc:	1007883a 	mov	r3,r2
 10011d0:	e0bffc07 	ldb	r2,-16(fp)
 10011d4:	1885883a 	add	r2,r3,r2
 10011d8:	10fff404 	addi	r3,r2,-48
 10011dc:	e0bfff17 	ldw	r2,-4(fp)
 10011e0:	10c00015 	stw	r3,0(r2)
		c = getc(file);
 10011e4:	e0bffd17 	ldw	r2,-12(fp)
 10011e8:	11000017 	ldw	r4,0(r2)
 10011ec:	10047a80 	call	10047a8 <getc>
 10011f0:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 10011f4:	e0bffb17 	ldw	r2,-20(fp)
 10011f8:	10800044 	addi	r2,r2,1
 10011fc:	e0bffb15 	stw	r2,-20(fp)

	*size = 0;

	c = getc(file);

	while (c != ':' and i<1024) {
 1001200:	e0bffc07 	ldb	r2,-16(fp)
 1001204:	10800ea0 	cmpeqi	r2,r2,58
 1001208:	1000031e 	bne	r2,zero,1001218 <_ZN4WiFi7receiveEPhPj+0x138>
 100120c:	e0bffb17 	ldw	r2,-20(fp)
 1001210:	10810030 	cmpltui	r2,r2,1024
 1001214:	103fe91e 	bne	r2,zero,10011bc <_ZN4WiFi7receiveEPhPj+0xdc>
		*size = *size * 10 + c - '0';
		c = getc(file);
		i=i+1;
	}
	unsigned int j,max;
	j = 0;
 1001218:	e03ffa15 	stw	zero,-24(fp)
	max= *size;
 100121c:	e0bfff17 	ldw	r2,-4(fp)
 1001220:	10800017 	ldw	r2,0(r2)
 1001224:	e0bff915 	stw	r2,-28(fp)
	if(max>2048){
 1001228:	e0bff917 	ldw	r2,-28(fp)
 100122c:	10820070 	cmpltui	r2,r2,2049
 1001230:	1000021e 	bne	r2,zero,100123c <_ZN4WiFi7receiveEPhPj+0x15c>
		max = 2048;
 1001234:	00820004 	movi	r2,2048
 1001238:	e0bff915 	stw	r2,-28(fp)
	}
	printf("Size final = %d\n",max);
 100123c:	01004074 	movhi	r4,257
 1001240:	21066e04 	addi	r4,r4,6584
 1001244:	e17ff917 	ldw	r5,-28(fp)
 1001248:	10052dc0 	call	10052dc <printf>
	for(j=0;j < max;j+=1){
 100124c:	e03ffa15 	stw	zero,-24(fp)
 1001250:	00000a06 	br	100127c <_ZN4WiFi7receiveEPhPj+0x19c>
		//printf("Size: %d\n",*size);
		data[j] = getc(file);
 1001254:	e0fffa17 	ldw	r3,-24(fp)
 1001258:	e0bffe17 	ldw	r2,-8(fp)
 100125c:	18a1883a 	add	r16,r3,r2
 1001260:	e0bffd17 	ldw	r2,-12(fp)
 1001264:	11000017 	ldw	r4,0(r2)
 1001268:	10047a80 	call	10047a8 <getc>
 100126c:	80800005 	stb	r2,0(r16)
	max= *size;
	if(max>2048){
		max = 2048;
	}
	printf("Size final = %d\n",max);
	for(j=0;j < max;j+=1){
 1001270:	e0bffa17 	ldw	r2,-24(fp)
 1001274:	10800044 	addi	r2,r2,1
 1001278:	e0bffa15 	stw	r2,-24(fp)
 100127c:	e0fffa17 	ldw	r3,-24(fp)
 1001280:	e0bff917 	ldw	r2,-28(fp)
 1001284:	18bff336 	bltu	r3,r2,1001254 <_ZN4WiFi7receiveEPhPj+0x174>
	//Finalmente. Função getc(file) estava mudando o valor de *size durante o loop
	//Alocar as condições de laço para j,max antes de iniciar resolveu

	//Outro problema: transmissão do audio / imagem: As vezes o size explode por algum motivo
	//Então coloquei um valor máximo para max (2048 ok? )
	data[j] = '\0';
 1001288:	e0bffa17 	ldw	r2,-24(fp)
 100128c:	e0fffe17 	ldw	r3,-8(fp)
 1001290:	10c5883a 	add	r2,r2,r3
 1001294:	10000005 	stb	zero,0(r2)
}
 1001298:	e037883a 	mov	sp,fp
 100129c:	dfc00217 	ldw	ra,8(sp)
 10012a0:	df000117 	ldw	fp,4(sp)
 10012a4:	dc000017 	ldw	r16,0(sp)
 10012a8:	dec00304 	addi	sp,sp,12
 10012ac:	f800283a 	ret

010012b0 <_ZN4WiFi6configEPcS0_>:
	if (wifi == NULL)
		wifi = new WiFi();
	return wifi;
}

void WiFi::config(char* name, char* password) {
 10012b0:	deffec04 	addi	sp,sp,-80
 10012b4:	dfc01315 	stw	ra,76(sp)
 10012b8:	df001215 	stw	fp,72(sp)
 10012bc:	dc001115 	stw	r16,68(sp)
 10012c0:	df001104 	addi	fp,sp,68
 10012c4:	e13ffd15 	stw	r4,-12(fp)
 10012c8:	e17ffe15 	stw	r5,-8(fp)
 10012cc:	e1bfff15 	stw	r6,-4(fp)
	printf("Configuring AP, wait......\n");
 10012d0:	01004074 	movhi	r4,257
 10012d4:	21067304 	addi	r4,r4,6604
 10012d8:	10054180 	call	1005418 <puts>
	//char rst[] = "AT+RST";
	//sendInstruction(rst);

	char modeConfig[] = "AT+CWMODE=2";
 10012dc:	00c04074 	movhi	r3,257
 10012e0:	18c67d04 	addi	r3,r3,6644
 10012e4:	18800017 	ldw	r2,0(r3)
 10012e8:	e0bff115 	stw	r2,-60(fp)
 10012ec:	18800117 	ldw	r2,4(r3)
 10012f0:	e0bff215 	stw	r2,-56(fp)
 10012f4:	18800217 	ldw	r2,8(r3)
 10012f8:	e0bff315 	stw	r2,-52(fp)
	sendInstruction(modeConfig);
 10012fc:	e17ff104 	addi	r5,fp,-60
 1001300:	e13ffd17 	ldw	r4,-12(fp)
 1001304:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>

	char *apConfig;
	int apSize = 18 + strlen(name) + strlen(password);
 1001308:	e13ffe17 	ldw	r4,-8(fp)
 100130c:	1005c940 	call	1005c94 <strlen>
 1001310:	1021883a 	mov	r16,r2
 1001314:	e13fff17 	ldw	r4,-4(fp)
 1001318:	1005c940 	call	1005c94 <strlen>
 100131c:	8085883a 	add	r2,r16,r2
 1001320:	10800484 	addi	r2,r2,18
 1001324:	e0bfef15 	stw	r2,-68(fp)
	apConfig = new char[apSize];
 1001328:	e13fef17 	ldw	r4,-68(fp)
 100132c:	10016d00 	call	10016d0 <_Znam>
 1001330:	e0bff015 	stw	r2,-64(fp)
	strcpy(apConfig, "AT+CWSAP=\"");
 1001334:	e0fff017 	ldw	r3,-64(fp)
 1001338:	00801044 	movi	r2,65
 100133c:	18800005 	stb	r2,0(r3)
 1001340:	00801504 	movi	r2,84
 1001344:	18800045 	stb	r2,1(r3)
 1001348:	00800ac4 	movi	r2,43
 100134c:	18800085 	stb	r2,2(r3)
 1001350:	008010c4 	movi	r2,67
 1001354:	188000c5 	stb	r2,3(r3)
 1001358:	008015c4 	movi	r2,87
 100135c:	18800105 	stb	r2,4(r3)
 1001360:	008014c4 	movi	r2,83
 1001364:	18800145 	stb	r2,5(r3)
 1001368:	00801044 	movi	r2,65
 100136c:	18800185 	stb	r2,6(r3)
 1001370:	00801404 	movi	r2,80
 1001374:	188001c5 	stb	r2,7(r3)
 1001378:	00800f44 	movi	r2,61
 100137c:	18800205 	stb	r2,8(r3)
 1001380:	00800884 	movi	r2,34
 1001384:	18800245 	stb	r2,9(r3)
 1001388:	18000285 	stb	zero,10(r3)
	strcat(apConfig, name);
 100138c:	e13ff017 	ldw	r4,-64(fp)
 1001390:	e17ffe17 	ldw	r5,-8(fp)
 1001394:	1005b780 	call	1005b78 <strcat>
	strcat(apConfig, "\",\"");
 1001398:	e13ff017 	ldw	r4,-64(fp)
 100139c:	01404074 	movhi	r5,257
 10013a0:	29467a04 	addi	r5,r5,6632
 10013a4:	1005b780 	call	1005b78 <strcat>
	strcat(apConfig, password);
 10013a8:	e13ff017 	ldw	r4,-64(fp)
 10013ac:	e17fff17 	ldw	r5,-4(fp)
 10013b0:	1005b780 	call	1005b78 <strcat>
	strcat(apConfig, "\",5,3");
 10013b4:	e13ff017 	ldw	r4,-64(fp)
 10013b8:	01404074 	movhi	r5,257
 10013bc:	29467b04 	addi	r5,r5,6636
 10013c0:	1005b780 	call	1005b78 <strcat>
	sendInstruction(apConfig);
 10013c4:	e13ffd17 	ldw	r4,-12(fp)
 10013c8:	e17ff017 	ldw	r5,-64(fp)
 10013cc:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>

	char mux[] = "AT+CIPMUX=1";
 10013d0:	00c04074 	movhi	r3,257
 10013d4:	18c68004 	addi	r3,r3,6656
 10013d8:	18800017 	ldw	r2,0(r3)
 10013dc:	e0bff415 	stw	r2,-48(fp)
 10013e0:	18800117 	ldw	r2,4(r3)
 10013e4:	e0bff515 	stw	r2,-44(fp)
 10013e8:	18800217 	ldw	r2,8(r3)
 10013ec:	e0bff615 	stw	r2,-40(fp)
	sendInstruction(mux);
 10013f0:	e17ff404 	addi	r5,fp,-48
 10013f4:	e13ffd17 	ldw	r4,-12(fp)
 10013f8:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
 10013fc:	00c04074 	movhi	r3,257
 1001400:	18c68304 	addi	r3,r3,6668
 1001404:	18800017 	ldw	r2,0(r3)
 1001408:	e0bff715 	stw	r2,-36(fp)
 100140c:	18800117 	ldw	r2,4(r3)
 1001410:	e0bff815 	stw	r2,-32(fp)
 1001414:	18800217 	ldw	r2,8(r3)
 1001418:	e0bff915 	stw	r2,-28(fp)
 100141c:	18800317 	ldw	r2,12(r3)
 1001420:	e0bffa15 	stw	r2,-24(fp)
 1001424:	18800417 	ldw	r2,16(r3)
 1001428:	e0bffb15 	stw	r2,-20(fp)
 100142c:	1880050b 	ldhu	r2,20(r3)
 1001430:	e0bffc0d 	sth	r2,-16(fp)
 1001434:	18800583 	ldbu	r2,22(r3)
 1001438:	e0bffc85 	stb	r2,-14(fp)
	sendInstruction(ip);
 100143c:	e17ff704 	addi	r5,fp,-36
 1001440:	e13ffd17 	ldw	r4,-12(fp)
 1001444:	1000e700 	call	1000e70 <_ZN4WiFi15sendInstructionEPc>

	printf("Done!\n");
 1001448:	01004074 	movhi	r4,257
 100144c:	21066704 	addi	r4,r4,6556
 1001450:	10054180 	call	1005418 <puts>
}
 1001454:	e037883a 	mov	sp,fp
 1001458:	dfc00217 	ldw	ra,8(sp)
 100145c:	df000117 	ldw	fp,4(sp)
 1001460:	dc000017 	ldw	r16,0(sp)
 1001464:	dec00304 	addi	sp,sp,12
 1001468:	f800283a 	ret

0100146c <_ZN4WiFi12getSingletonEv>:
/* public */
WiFi::~WiFi() {
	fclose(file);
}

WiFi *WiFi::getSingleton() {
 100146c:	deffe504 	addi	sp,sp,-108
 1001470:	dfc01a15 	stw	ra,104(sp)
 1001474:	df001915 	stw	fp,100(sp)
 1001478:	ddc01815 	stw	r23,96(sp)
 100147c:	dd801715 	stw	r22,92(sp)
 1001480:	dd401615 	stw	r21,88(sp)
 1001484:	dd001515 	stw	r20,84(sp)
 1001488:	dcc01415 	stw	r19,80(sp)
 100148c:	dc801315 	stw	r18,76(sp)
 1001490:	dc401215 	stw	r17,72(sp)
 1001494:	dc001115 	stw	r16,68(sp)
 1001498:	df001104 	addi	fp,sp,68
 100149c:	00804034 	movhi	r2,256
 10014a0:	1087a204 	addi	r2,r2,7816
 10014a4:	e0bff515 	stw	r2,-44(fp)
 10014a8:	00804074 	movhi	r2,257
 10014ac:	1085b504 	addi	r2,r2,5844
 10014b0:	e0bff615 	stw	r2,-40(fp)
 10014b4:	e0bff704 	addi	r2,fp,-36
 10014b8:	e0ffef04 	addi	r3,fp,-68
 10014bc:	10c00015 	stw	r3,0(r2)
 10014c0:	00c04034 	movhi	r3,256
 10014c4:	18c54504 	addi	r3,r3,5396
 10014c8:	10c00115 	stw	r3,4(r2)
 10014cc:	16c00215 	stw	sp,8(r2)
 10014d0:	e13fef04 	addi	r4,fp,-68
 10014d4:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
	if (wifi == NULL)
 10014d8:	d0a6ea17 	ldw	r2,-25688(gp)
 10014dc:	1004c03a 	cmpne	r2,r2,zero
 10014e0:	1000191e 	bne	r2,zero,1001548 <_ZN4WiFi12getSingletonEv+0xdc>
		wifi = new WiFi();
 10014e4:	00bfffc4 	movi	r2,-1
 10014e8:	e0bff015 	stw	r2,-64(fp)
 10014ec:	01000104 	movi	r4,4
 10014f0:	10024840 	call	1002484 <_Znwm>
 10014f4:	e0bffd15 	stw	r2,-12(fp)
 10014f8:	00800044 	movi	r2,1
 10014fc:	e0bff015 	stw	r2,-64(fp)
 1001500:	e13ffd17 	ldw	r4,-12(fp)
 1001504:	1000f9c0 	call	1000f9c <_ZN4WiFiC1Ev>
 1001508:	e0bffd17 	ldw	r2,-12(fp)
 100150c:	d0a6ea15 	stw	r2,-25688(gp)
 1001510:	00000d06 	br	1001548 <_ZN4WiFi12getSingletonEv+0xdc>
 1001514:	e7001104 	addi	fp,fp,68
 1001518:	e0fff117 	ldw	r3,-60(fp)
 100151c:	e0ffff15 	stw	r3,-4(fp)
 1001520:	e0bfff17 	ldw	r2,-4(fp)
 1001524:	e0bffc15 	stw	r2,-16(fp)
 1001528:	e13ffd17 	ldw	r4,-12(fp)
 100152c:	10017700 	call	1001770 <_ZdlPv>
 1001530:	e0fffc17 	ldw	r3,-16(fp)
 1001534:	e0ffff15 	stw	r3,-4(fp)
 1001538:	00bfffc4 	movi	r2,-1
 100153c:	e0bff015 	stw	r2,-64(fp)
 1001540:	e13fff17 	ldw	r4,-4(fp)
 1001544:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
	return wifi;
 1001548:	d0a6ea17 	ldw	r2,-25688(gp)
 100154c:	e0bffe15 	stw	r2,-8(fp)
 1001550:	e13fef04 	addi	r4,fp,-68
 1001554:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
}
 1001558:	e0bffe17 	ldw	r2,-8(fp)
 100155c:	e037883a 	mov	sp,fp
 1001560:	dfc00917 	ldw	ra,36(sp)
 1001564:	df000817 	ldw	fp,32(sp)
 1001568:	ddc00717 	ldw	r23,28(sp)
 100156c:	dd800617 	ldw	r22,24(sp)
 1001570:	dd400517 	ldw	r21,20(sp)
 1001574:	dd000417 	ldw	r20,16(sp)
 1001578:	dcc00317 	ldw	r19,12(sp)
 100157c:	dc800217 	ldw	r18,8(sp)
 1001580:	dc400117 	ldw	r17,4(sp)
 1001584:	dc000017 	ldw	r16,0(sp)
 1001588:	dec00a04 	addi	sp,sp,40
 100158c:	f800283a 	ret

01001590 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = NULL;

/* public */
WiFi::~WiFi() {
 1001590:	defffd04 	addi	sp,sp,-12
 1001594:	dfc00215 	stw	ra,8(sp)
 1001598:	df000115 	stw	fp,4(sp)
 100159c:	df000104 	addi	fp,sp,4
 10015a0:	e13fff15 	stw	r4,-4(fp)
	fclose(file);
 10015a4:	e0bfff17 	ldw	r2,-4(fp)
 10015a8:	11000017 	ldw	r4,0(r2)
 10015ac:	10035e00 	call	10035e0 <fclose>
}
 10015b0:	e037883a 	mov	sp,fp
 10015b4:	dfc00117 	ldw	ra,4(sp)
 10015b8:	df000017 	ldw	fp,0(sp)
 10015bc:	dec00204 	addi	sp,sp,8
 10015c0:	f800283a 	ret

010015c4 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = NULL;

/* public */
WiFi::~WiFi() {
 10015c4:	defffd04 	addi	sp,sp,-12
 10015c8:	dfc00215 	stw	ra,8(sp)
 10015cc:	df000115 	stw	fp,4(sp)
 10015d0:	df000104 	addi	fp,sp,4
 10015d4:	e13fff15 	stw	r4,-4(fp)
	fclose(file);
 10015d8:	e0bfff17 	ldw	r2,-4(fp)
 10015dc:	11000017 	ldw	r4,0(r2)
 10015e0:	10035e00 	call	10035e0 <fclose>
}
 10015e4:	e037883a 	mov	sp,fp
 10015e8:	dfc00117 	ldw	ra,4(sp)
 10015ec:	df000017 	ldw	fp,0(sp)
 10015f0:	dec00204 	addi	sp,sp,8
 10015f4:	f800283a 	ret

010015f8 <main>:
#include "system.h"
#include "app.h"

int main()
 10015f8:	deffe604 	addi	sp,sp,-104
 10015fc:	dfc01915 	stw	ra,100(sp)
 1001600:	df001815 	stw	fp,96(sp)
 1001604:	ddc01715 	stw	r23,92(sp)
 1001608:	dd801615 	stw	r22,88(sp)
 100160c:	dd401515 	stw	r21,84(sp)
 1001610:	dd001415 	stw	r20,80(sp)
 1001614:	dcc01315 	stw	r19,76(sp)
 1001618:	dc801215 	stw	r18,72(sp)
 100161c:	dc401115 	stw	r17,68(sp)
 1001620:	dc001015 	stw	r16,64(sp)
 1001624:	df001004 	addi	fp,sp,64
 1001628:	00804034 	movhi	r2,256
 100162c:	1087a204 	addi	r2,r2,7816
 1001630:	e0bff715 	stw	r2,-36(fp)
 1001634:	00804074 	movhi	r2,257
 1001638:	1085b684 	addi	r2,r2,5850
 100163c:	e0bff815 	stw	r2,-32(fp)
 1001640:	e0bff904 	addi	r2,fp,-28
 1001644:	e0fff004 	addi	r3,fp,-64
 1001648:	10c00015 	stw	r3,0(r2)
 100164c:	00c04034 	movhi	r3,256
 1001650:	18c5a604 	addi	r3,r3,5784
 1001654:	10c00115 	stw	r3,4(r2)
 1001658:	16c00215 	stw	sp,8(r2)
 100165c:	e13ff104 	addi	r4,fp,-60
 1001660:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
{
	App app;
 1001664:	00bfffc4 	movi	r2,-1
 1001668:	e0bff215 	stw	r2,-56(fp)
 100166c:	e13ff004 	addi	r4,fp,-64
 1001670:	100073c0 	call	100073c <_ZN3AppC1Ev>

	app.setup();
 1001674:	00800044 	movi	r2,1
 1001678:	e0bff215 	stw	r2,-56(fp)
 100167c:	e13ff004 	addi	r4,fp,-64
 1001680:	10006780 	call	1000678 <_ZN3App5setupEv>
	while(1){

		app.run();
 1001684:	00800044 	movi	r2,1
 1001688:	e0bff215 	stw	r2,-56(fp)
 100168c:	e13ff004 	addi	r4,fp,-64
 1001690:	10003900 	call	1000390 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
 1001694:	003ffb06 	br	1001684 <main+0x8c>
 1001698:	e7001004 	addi	fp,fp,64
 100169c:	e0bff317 	ldw	r2,-52(fp)
 10016a0:	e0bfff15 	stw	r2,-4(fp)
 10016a4:	e0ffff17 	ldw	r3,-4(fp)
 10016a8:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
 10016ac:	e03ff215 	stw	zero,-56(fp)
 10016b0:	e13ff004 	addi	r4,fp,-64
 10016b4:	10006d40 	call	10006d4 <_ZN3AppD1Ev>
 10016b8:	e0bffe17 	ldw	r2,-8(fp)
 10016bc:	e0bfff15 	stw	r2,-4(fp)
 10016c0:	00bfffc4 	movi	r2,-1
 10016c4:	e0bff215 	stw	r2,-56(fp)
 10016c8:	e13fff17 	ldw	r4,-4(fp)
 10016cc:	100323c0 	call	100323c <_Unwind_SjLj_Resume>

010016d0 <_Znam>:
 10016d0:	deffee04 	addi	sp,sp,-72
 10016d4:	00804034 	movhi	r2,256
 10016d8:	1087a204 	addi	r2,r2,7816
 10016dc:	d8800615 	stw	r2,24(sp)
 10016e0:	00c04074 	movhi	r3,257
 10016e4:	18c5b804 	addi	r3,r3,5856
 10016e8:	00804034 	movhi	r2,256
 10016ec:	1085d304 	addi	r2,r2,5964
 10016f0:	d9000e15 	stw	r4,56(sp)
 10016f4:	d809883a 	mov	r4,sp
 10016f8:	d8800915 	stw	r2,36(sp)
 10016fc:	dfc01115 	stw	ra,68(sp)
 1001700:	df001015 	stw	fp,64(sp)
 1001704:	ddc00f15 	stw	r23,60(sp)
 1001708:	d8c00715 	stw	r3,28(sp)
 100170c:	dec00815 	stw	sp,32(sp)
 1001710:	dec00a15 	stw	sp,40(sp)
 1001714:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 1001718:	00800044 	movi	r2,1
 100171c:	d8800115 	stw	r2,4(sp)
 1001720:	d9000e17 	ldw	r4,56(sp)
 1001724:	10024840 	call	1002484 <_Znwm>
 1001728:	d809883a 	mov	r4,sp
 100172c:	d8800d15 	stw	r2,52(sp)
 1001730:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 1001734:	d8800d17 	ldw	r2,52(sp)
 1001738:	dfc01117 	ldw	ra,68(sp)
 100173c:	df001017 	ldw	fp,64(sp)
 1001740:	ddc00f17 	ldw	r23,60(sp)
 1001744:	dec01204 	addi	sp,sp,72
 1001748:	f800283a 	ret
 100174c:	d8800317 	ldw	r2,12(sp)
 1001750:	00ffffc4 	movi	r3,-1
 1001754:	d9000217 	ldw	r4,8(sp)
 1001758:	10c00226 	beq	r2,r3,1001764 <_Znam+0x94>
 100175c:	d8c00115 	stw	r3,4(sp)
 1001760:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1001764:	00bfffc4 	movi	r2,-1
 1001768:	d8800115 	stw	r2,4(sp)
 100176c:	1001d080 	call	1001d08 <__cxa_call_unexpected>

01001770 <_ZdlPv>:
 1001770:	20000126 	beq	r4,zero,1001778 <_ZdlPv+0x8>
 1001774:	1004a641 	jmpi	1004a64 <free>
 1001778:	f800283a 	ret

0100177c <_Z12read_uleb128PKhPj>:
 100177c:	000d883a 	mov	r6,zero
 1001780:	000f883a 	mov	r7,zero
 1001784:	20c00007 	ldb	r3,0(r4)
 1001788:	21000044 	addi	r4,r4,1
 100178c:	18801fcc 	andi	r2,r3,127
 1001790:	1184983a 	sll	r2,r2,r6
 1001794:	318001c4 	addi	r6,r6,7
 1001798:	388eb03a 	or	r7,r7,r2
 100179c:	183ff916 	blt	r3,zero,1001784 <_Z12read_uleb128PKhPj+0x8>
 10017a0:	2005883a 	mov	r2,r4
 10017a4:	29c00015 	stw	r7,0(r5)
 10017a8:	f800283a 	ret

010017ac <_Z12read_sleb128PKhPi>:
 10017ac:	000f883a 	mov	r7,zero
 10017b0:	0011883a 	mov	r8,zero
 10017b4:	20c00007 	ldb	r3,0(r4)
 10017b8:	21000044 	addi	r4,r4,1
 10017bc:	19803fcc 	andi	r6,r3,255
 10017c0:	30801fcc 	andi	r2,r6,127
 10017c4:	11c4983a 	sll	r2,r2,r7
 10017c8:	39c001c4 	addi	r7,r7,7
 10017cc:	4090b03a 	or	r8,r8,r2
 10017d0:	183ff816 	blt	r3,zero,10017b4 <_Z12read_sleb128PKhPi+0x8>
 10017d4:	008007c4 	movi	r2,31
 10017d8:	11c00636 	bltu	r2,r7,10017f4 <_Z12read_sleb128PKhPi+0x48>
 10017dc:	3080100c 	andi	r2,r6,64
 10017e0:	10000426 	beq	r2,zero,10017f4 <_Z12read_sleb128PKhPi+0x48>
 10017e4:	00800044 	movi	r2,1
 10017e8:	11c4983a 	sll	r2,r2,r7
 10017ec:	0085c83a 	sub	r2,zero,r2
 10017f0:	4090b03a 	or	r8,r8,r2
 10017f4:	2005883a 	mov	r2,r4
 10017f8:	2a000015 	stw	r8,0(r5)
 10017fc:	f800283a 	ret

01001800 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 1001800:	28800017 	ldw	r2,0(r5)
 1001804:	defffb04 	addi	sp,sp,-20
 1001808:	30c00017 	ldw	r3,0(r6)
 100180c:	dc400215 	stw	r17,8(sp)
 1001810:	2823883a 	mov	r17,r5
 1001814:	11400217 	ldw	r5,8(r2)
 1001818:	dc800315 	stw	r18,12(sp)
 100181c:	dc000115 	stw	r16,4(sp)
 1001820:	dfc00415 	stw	ra,16(sp)
 1001824:	2021883a 	mov	r16,r4
 1001828:	d8c00015 	stw	r3,0(sp)
 100182c:	8809883a 	mov	r4,r17
 1001830:	3025883a 	mov	r18,r6
 1001834:	283ee83a 	callr	r5
 1001838:	10803fcc 	andi	r2,r2,255
 100183c:	880b883a 	mov	r5,r17
 1001840:	8009883a 	mov	r4,r16
 1001844:	d80d883a 	mov	r6,sp
 1001848:	01c00044 	movi	r7,1
 100184c:	10000326 	beq	r2,zero,100185c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 1001850:	d8800017 	ldw	r2,0(sp)
 1001854:	10c00017 	ldw	r3,0(r2)
 1001858:	d8c00015 	stw	r3,0(sp)
 100185c:	80800017 	ldw	r2,0(r16)
 1001860:	10c00417 	ldw	r3,16(r2)
 1001864:	183ee83a 	callr	r3
 1001868:	10803fcc 	andi	r2,r2,255
 100186c:	0007883a 	mov	r3,zero
 1001870:	10000326 	beq	r2,zero,1001880 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 1001874:	d8800017 	ldw	r2,0(sp)
 1001878:	00c00044 	movi	r3,1
 100187c:	90800015 	stw	r2,0(r18)
 1001880:	1805883a 	mov	r2,r3
 1001884:	dfc00417 	ldw	ra,16(sp)
 1001888:	dc800317 	ldw	r18,12(sp)
 100188c:	dc400217 	ldw	r17,8(sp)
 1001890:	dc000117 	ldw	r16,4(sp)
 1001894:	dec00504 	addi	sp,sp,20
 1001898:	f800283a 	ret

0100189c <_Z28read_encoded_value_with_basehjPKhPj>:
 100189c:	defff904 	addi	sp,sp,-28
 10018a0:	dc400215 	stw	r17,8(sp)
 10018a4:	00801404 	movi	r2,80
 10018a8:	24403fcc 	andi	r17,r4,255
 10018ac:	dd000515 	stw	r20,20(sp)
 10018b0:	dcc00415 	stw	r19,16(sp)
 10018b4:	dc800315 	stw	r18,12(sp)
 10018b8:	dc000115 	stw	r16,4(sp)
 10018bc:	dfc00615 	stw	ra,24(sp)
 10018c0:	2025883a 	mov	r18,r4
 10018c4:	2829883a 	mov	r20,r5
 10018c8:	3021883a 	mov	r16,r6
 10018cc:	3827883a 	mov	r19,r7
 10018d0:	88801826 	beq	r17,r2,1001934 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 10018d4:	88c003cc 	andi	r3,r17,15
 10018d8:	00800304 	movi	r2,12
 10018dc:	10c0012e 	bgeu	r2,r3,10018e4 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 10018e0:	10034b80 	call	10034b8 <abort>
 10018e4:	18c5883a 	add	r2,r3,r3
 10018e8:	1085883a 	add	r2,r2,r2
 10018ec:	00c04034 	movhi	r3,256
 10018f0:	18c64004 	addi	r3,r3,6400
 10018f4:	10c5883a 	add	r2,r2,r3
 10018f8:	11000017 	ldw	r4,0(r2)
 10018fc:	2000683a 	jmp	r4
 1001900:	01001970 	cmpltui	r4,zero,101
 1001904:	01001a58 	cmpnei	r4,zero,105
 1001908:	01001a04 	movi	r4,104
 100190c:	01001970 	cmpltui	r4,zero,101
 1001910:	010019c8 	cmpgei	r4,zero,103
 1001914:	010018e0 	cmpeqi	r4,zero,99
 1001918:	010018e0 	cmpeqi	r4,zero,99
 100191c:	010018e0 	cmpeqi	r4,zero,99
 1001920:	010018e0 	cmpeqi	r4,zero,99
 1001924:	01001a40 	call	1001a4 <__alt_mem_onchip_memory2_0+0x1001a4>
 1001928:	01001a1c 	xori	r4,zero,104
 100192c:	01001970 	cmpltui	r4,zero,101
 1001930:	010019c8 	cmpgei	r4,zero,103
 1001934:	308000c4 	addi	r2,r6,3
 1001938:	00ffff04 	movi	r3,-4
 100193c:	10c4703a 	and	r2,r2,r3
 1001940:	11000017 	ldw	r4,0(r2)
 1001944:	11400104 	addi	r5,r2,4
 1001948:	2805883a 	mov	r2,r5
 100194c:	99000015 	stw	r4,0(r19)
 1001950:	dfc00617 	ldw	ra,24(sp)
 1001954:	dd000517 	ldw	r20,20(sp)
 1001958:	dcc00417 	ldw	r19,16(sp)
 100195c:	dc800317 	ldw	r18,12(sp)
 1001960:	dc400217 	ldw	r17,8(sp)
 1001964:	dc000117 	ldw	r16,4(sp)
 1001968:	dec00704 	addi	sp,sp,28
 100196c:	f800283a 	ret
 1001970:	30800043 	ldbu	r2,1(r6)
 1001974:	30c00083 	ldbu	r3,2(r6)
 1001978:	310000c3 	ldbu	r4,3(r6)
 100197c:	31400003 	ldbu	r5,0(r6)
 1001980:	1004923a 	slli	r2,r2,8
 1001984:	1806943a 	slli	r3,r3,16
 1001988:	2008963a 	slli	r4,r4,24
 100198c:	1144b03a 	or	r2,r2,r5
 1001990:	1886b03a 	or	r3,r3,r2
 1001994:	20c8b03a 	or	r4,r4,r3
 1001998:	31400104 	addi	r5,r6,4
 100199c:	203fea26 	beq	r4,zero,1001948 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 10019a0:	88c01c0c 	andi	r3,r17,112
 10019a4:	00800404 	movi	r2,16
 10019a8:	18801426 	beq	r3,r2,10019fc <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 10019ac:	90803fcc 	andi	r2,r18,255
 10019b0:	1080201c 	xori	r2,r2,128
 10019b4:	10bfe004 	addi	r2,r2,-128
 10019b8:	2509883a 	add	r4,r4,r20
 10019bc:	103fe20e 	bge	r2,zero,1001948 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 10019c0:	21000017 	ldw	r4,0(r4)
 10019c4:	003fe006 	br	1001948 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 10019c8:	30800043 	ldbu	r2,1(r6)
 10019cc:	31800083 	ldbu	r6,2(r6)
 10019d0:	820000c3 	ldbu	r8,3(r16)
 10019d4:	1004923a 	slli	r2,r2,8
 10019d8:	82400003 	ldbu	r9,0(r16)
 10019dc:	300c943a 	slli	r6,r6,16
 10019e0:	4010963a 	slli	r8,r8,24
 10019e4:	1244b03a 	or	r2,r2,r9
 10019e8:	308cb03a 	or	r6,r6,r2
 10019ec:	4184b03a 	or	r2,r8,r6
 10019f0:	1009883a 	mov	r4,r2
 10019f4:	81400204 	addi	r5,r16,8
 10019f8:	003fe806 	br	100199c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 10019fc:	8029883a 	mov	r20,r16
 1001a00:	003fea06 	br	10019ac <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 1001a04:	30800043 	ldbu	r2,1(r6)
 1001a08:	30c00003 	ldbu	r3,0(r6)
 1001a0c:	31400084 	addi	r5,r6,2
 1001a10:	1004923a 	slli	r2,r2,8
 1001a14:	10c8b03a 	or	r4,r2,r3
 1001a18:	003fe006 	br	100199c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1001a1c:	30800043 	ldbu	r2,1(r6)
 1001a20:	30c00003 	ldbu	r3,0(r6)
 1001a24:	31400084 	addi	r5,r6,2
 1001a28:	1004923a 	slli	r2,r2,8
 1001a2c:	10c4b03a 	or	r2,r2,r3
 1001a30:	113fffcc 	andi	r4,r2,65535
 1001a34:	2120001c 	xori	r4,r4,32768
 1001a38:	21200004 	addi	r4,r4,-32768
 1001a3c:	003fd706 	br	100199c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1001a40:	3009883a 	mov	r4,r6
 1001a44:	d80b883a 	mov	r5,sp
 1001a48:	10017ac0 	call	10017ac <_Z12read_sleb128PKhPi>
 1001a4c:	d9000017 	ldw	r4,0(sp)
 1001a50:	100b883a 	mov	r5,r2
 1001a54:	003fd106 	br	100199c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1001a58:	3009883a 	mov	r4,r6
 1001a5c:	d80b883a 	mov	r5,sp
 1001a60:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 1001a64:	d9000017 	ldw	r4,0(sp)
 1001a68:	100b883a 	mov	r5,r2
 1001a6c:	003fcb06 	br	100199c <_Z28read_encoded_value_with_basehjPKhPj+0x100>

01001a70 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 1001a70:	deffff04 	addi	sp,sp,-4
 1001a74:	21003fcc 	andi	r4,r4,255
 1001a78:	00803fc4 	movi	r2,255
 1001a7c:	dfc00015 	stw	ra,0(sp)
 1001a80:	20800c26 	beq	r4,r2,1001ab4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001a84:	21001c0c 	andi	r4,r4,112
 1001a88:	00800804 	movi	r2,32
 1001a8c:	20800d26 	beq	r4,r2,1001ac4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 1001a90:	1100070e 	bge	r2,r4,1001ab0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 1001a94:	00801004 	movi	r2,64
 1001a98:	20801126 	beq	r4,r2,1001ae0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 1001a9c:	00801404 	movi	r2,80
 1001aa0:	20800426 	beq	r4,r2,1001ab4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001aa4:	00800c04 	movi	r2,48
 1001aa8:	20801126 	beq	r4,r2,1001af0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 1001aac:	10034b80 	call	10034b8 <abort>
 1001ab0:	2000081e 	bne	r4,zero,1001ad4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 1001ab4:	0005883a 	mov	r2,zero
 1001ab8:	dfc00017 	ldw	ra,0(sp)
 1001abc:	dec00104 	addi	sp,sp,4
 1001ac0:	f800283a 	ret
 1001ac4:	2809883a 	mov	r4,r5
 1001ac8:	dfc00017 	ldw	ra,0(sp)
 1001acc:	dec00104 	addi	sp,sp,4
 1001ad0:	10030281 	jmpi	1003028 <_Unwind_GetTextRelBase>
 1001ad4:	00800404 	movi	r2,16
 1001ad8:	20bff626 	beq	r4,r2,1001ab4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001adc:	10034b80 	call	10034b8 <abort>
 1001ae0:	2809883a 	mov	r4,r5
 1001ae4:	dfc00017 	ldw	ra,0(sp)
 1001ae8:	dec00104 	addi	sp,sp,4
 1001aec:	10030101 	jmpi	1003010 <_Unwind_GetRegionStart>
 1001af0:	2809883a 	mov	r4,r5
 1001af4:	dfc00017 	ldw	ra,0(sp)
 1001af8:	dec00104 	addi	sp,sp,4
 1001afc:	10030201 	jmpi	1003020 <_Unwind_GetDataRelBase>

01001b00 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 1001b00:	defffa04 	addi	sp,sp,-24
 1001b04:	dc800415 	stw	r18,16(sp)
 1001b08:	dc400315 	stw	r17,12(sp)
 1001b0c:	dc000215 	stw	r16,8(sp)
 1001b10:	dfc00515 	stw	ra,20(sp)
 1001b14:	2021883a 	mov	r16,r4
 1001b18:	000f883a 	mov	r7,zero
 1001b1c:	3023883a 	mov	r17,r6
 1001b20:	2825883a 	mov	r18,r5
 1001b24:	20000226 	beq	r4,zero,1001b30 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 1001b28:	10030100 	call	1003010 <_Unwind_GetRegionStart>
 1001b2c:	100f883a 	mov	r7,r2
 1001b30:	89c00015 	stw	r7,0(r17)
 1001b34:	90c00003 	ldbu	r3,0(r18)
 1001b38:	800b883a 	mov	r5,r16
 1001b3c:	00803fc4 	movi	r2,255
 1001b40:	1c003fcc 	andi	r16,r3,255
 1001b44:	91800044 	addi	r6,r18,1
 1001b48:	8009883a 	mov	r4,r16
 1001b4c:	18802226 	beq	r3,r2,1001bd8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 1001b50:	d9800115 	stw	r6,4(sp)
 1001b54:	1001a700 	call	1001a70 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1001b58:	d9800117 	ldw	r6,4(sp)
 1001b5c:	8009883a 	mov	r4,r16
 1001b60:	100b883a 	mov	r5,r2
 1001b64:	89c00104 	addi	r7,r17,4
 1001b68:	100189c0 	call	100189c <_Z28read_encoded_value_with_basehjPKhPj>
 1001b6c:	100d883a 	mov	r6,r2
 1001b70:	30800003 	ldbu	r2,0(r6)
 1001b74:	31c00044 	addi	r7,r6,1
 1001b78:	00c03fc4 	movi	r3,255
 1001b7c:	d80b883a 	mov	r5,sp
 1001b80:	3809883a 	mov	r4,r7
 1001b84:	88800505 	stb	r2,20(r17)
 1001b88:	10c01b26 	beq	r2,r3,1001bf8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 1001b8c:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 1001b90:	100f883a 	mov	r7,r2
 1001b94:	d8800017 	ldw	r2,0(sp)
 1001b98:	3885883a 	add	r2,r7,r2
 1001b9c:	88800315 	stw	r2,12(r17)
 1001ba0:	38800003 	ldbu	r2,0(r7)
 1001ba4:	39000044 	addi	r4,r7,1
 1001ba8:	d80b883a 	mov	r5,sp
 1001bac:	88800545 	stb	r2,21(r17)
 1001bb0:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 1001bb4:	d8c00017 	ldw	r3,0(sp)
 1001bb8:	10c9883a 	add	r4,r2,r3
 1001bbc:	89000415 	stw	r4,16(r17)
 1001bc0:	dfc00517 	ldw	ra,20(sp)
 1001bc4:	dc800417 	ldw	r18,16(sp)
 1001bc8:	dc400317 	ldw	r17,12(sp)
 1001bcc:	dc000217 	ldw	r16,8(sp)
 1001bd0:	dec00604 	addi	sp,sp,24
 1001bd4:	f800283a 	ret
 1001bd8:	89c00115 	stw	r7,4(r17)
 1001bdc:	30800003 	ldbu	r2,0(r6)
 1001be0:	31c00044 	addi	r7,r6,1
 1001be4:	00c03fc4 	movi	r3,255
 1001be8:	d80b883a 	mov	r5,sp
 1001bec:	3809883a 	mov	r4,r7
 1001bf0:	88800505 	stb	r2,20(r17)
 1001bf4:	10ffe51e 	bne	r2,r3,1001b8c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 1001bf8:	88000315 	stw	zero,12(r17)
 1001bfc:	003fe806 	br	1001ba0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

01001c00 <_Z15get_ttype_entryP16lsda_header_infoj>:
 1001c00:	defffe04 	addi	sp,sp,-8
 1001c04:	dfc00115 	stw	ra,4(sp)
 1001c08:	21c00503 	ldbu	r7,20(r4)
 1001c0c:	00803fc4 	movi	r2,255
 1001c10:	38801a26 	beq	r7,r2,1001c7c <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 1001c14:	38c001cc 	andi	r3,r7,7
 1001c18:	00800084 	movi	r2,2
 1001c1c:	18801326 	beq	r3,r2,1001c6c <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 1001c20:	10c0050e 	bge	r2,r3,1001c38 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 1001c24:	008000c4 	movi	r2,3
 1001c28:	18800426 	beq	r3,r2,1001c3c <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 1001c2c:	00800104 	movi	r2,4
 1001c30:	18801026 	beq	r3,r2,1001c74 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 1001c34:	10034b80 	call	10034b8 <abort>
 1001c38:	183ffe1e 	bne	r3,zero,1001c34 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 1001c3c:	2945883a 	add	r2,r5,r5
 1001c40:	1085883a 	add	r2,r2,r2
 1001c44:	21800317 	ldw	r6,12(r4)
 1001c48:	21400217 	ldw	r5,8(r4)
 1001c4c:	3809883a 	mov	r4,r7
 1001c50:	308dc83a 	sub	r6,r6,r2
 1001c54:	d80f883a 	mov	r7,sp
 1001c58:	100189c0 	call	100189c <_Z28read_encoded_value_with_basehjPKhPj>
 1001c5c:	d8800017 	ldw	r2,0(sp)
 1001c60:	dfc00117 	ldw	ra,4(sp)
 1001c64:	dec00204 	addi	sp,sp,8
 1001c68:	f800283a 	ret
 1001c6c:	2945883a 	add	r2,r5,r5
 1001c70:	003ff406 	br	1001c44 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 1001c74:	280490fa 	slli	r2,r5,3
 1001c78:	003ff206 	br	1001c44 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 1001c7c:	0005883a 	mov	r2,zero
 1001c80:	003ff006 	br	1001c44 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

01001c84 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 1001c84:	20800317 	ldw	r2,12(r4)
 1001c88:	defffa04 	addi	sp,sp,-24
 1001c8c:	dc800415 	stw	r18,16(sp)
 1001c90:	11c5c83a 	sub	r2,r2,r7
 1001c94:	dc400315 	stw	r17,12(sp)
 1001c98:	dc000215 	stw	r16,8(sp)
 1001c9c:	dfc00515 	stw	ra,20(sp)
 1001ca0:	2023883a 	mov	r17,r4
 1001ca4:	d9800115 	stw	r6,4(sp)
 1001ca8:	2825883a 	mov	r18,r5
 1001cac:	143fffc4 	addi	r16,r2,-1
 1001cb0:	8009883a 	mov	r4,r16
 1001cb4:	d80b883a 	mov	r5,sp
 1001cb8:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 1001cbc:	1021883a 	mov	r16,r2
 1001cc0:	d8800017 	ldw	r2,0(sp)
 1001cc4:	8809883a 	mov	r4,r17
 1001cc8:	100b883a 	mov	r5,r2
 1001ccc:	10000826 	beq	r2,zero,1001cf0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 1001cd0:	1001c000 	call	1001c00 <_Z15get_ttype_entryP16lsda_header_infoj>
 1001cd4:	1009883a 	mov	r4,r2
 1001cd8:	900b883a 	mov	r5,r18
 1001cdc:	d9800104 	addi	r6,sp,4
 1001ce0:	10018000 	call	1001800 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 1001ce4:	10803fcc 	andi	r2,r2,255
 1001ce8:	103ff126 	beq	r2,zero,1001cb0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 1001cec:	00800044 	movi	r2,1
 1001cf0:	dfc00517 	ldw	ra,20(sp)
 1001cf4:	dc800417 	ldw	r18,16(sp)
 1001cf8:	dc400317 	ldw	r17,12(sp)
 1001cfc:	dc000217 	ldw	r16,8(sp)
 1001d00:	dec00604 	addi	sp,sp,24
 1001d04:	f800283a 	ret

01001d08 <__cxa_call_unexpected>:
 1001d08:	deffe204 	addi	sp,sp,-120
 1001d0c:	00804034 	movhi	r2,256
 1001d10:	1087a204 	addi	r2,r2,7816
 1001d14:	00c04074 	movhi	r3,257
 1001d18:	18c5bd04 	addi	r3,r3,5876
 1001d1c:	d8800c15 	stw	r2,48(sp)
 1001d20:	d9001815 	stw	r4,96(sp)
 1001d24:	00804034 	movhi	r2,256
 1001d28:	10876404 	addi	r2,r2,7568
 1001d2c:	d9000604 	addi	r4,sp,24
 1001d30:	d8c00d15 	stw	r3,52(sp)
 1001d34:	dfc01d15 	stw	ra,116(sp)
 1001d38:	d8800f15 	stw	r2,60(sp)
 1001d3c:	df001c15 	stw	fp,112(sp)
 1001d40:	ddc01b15 	stw	r23,108(sp)
 1001d44:	dec00e15 	stw	sp,56(sp)
 1001d48:	dec01015 	stw	sp,64(sp)
 1001d4c:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 1001d50:	d9001817 	ldw	r4,96(sp)
 1001d54:	1002a440 	call	1002a44 <__cxa_begin_catch>
 1001d58:	d8801817 	ldw	r2,96(sp)
 1001d5c:	10fff504 	addi	r3,r2,-44
 1001d60:	18800917 	ldw	r2,36(r3)
 1001d64:	19400617 	ldw	r5,24(r3)
 1001d68:	19000217 	ldw	r4,8(r3)
 1001d6c:	d8800215 	stw	r2,8(sp)
 1001d70:	18800817 	ldw	r2,32(r3)
 1001d74:	18c00317 	ldw	r3,12(r3)
 1001d78:	d9401615 	stw	r5,88(sp)
 1001d7c:	d8801715 	stw	r2,92(sp)
 1001d80:	00800084 	movi	r2,2
 1001d84:	d8c01515 	stw	r3,84(sp)
 1001d88:	d8800715 	stw	r2,28(sp)
 1001d8c:	100245c0 	call	100245c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 1001d90:	d8800717 	ldw	r2,28(sp)
 1001d94:	d8c00817 	ldw	r3,32(sp)
 1001d98:	d8801a15 	stw	r2,104(sp)
 1001d9c:	d9401a17 	ldw	r5,104(sp)
 1001da0:	00800044 	movi	r2,1
 1001da4:	d8c01915 	stw	r3,100(sp)
 1001da8:	28800826 	beq	r5,r2,1001dcc <__cxa_call_unexpected+0xc4>
 1001dac:	d8000715 	stw	zero,28(sp)
 1001db0:	10029a00 	call	10029a0 <__cxa_end_catch>
 1001db4:	d8000715 	stw	zero,28(sp)
 1001db8:	10029a00 	call	10029a0 <__cxa_end_catch>
 1001dbc:	d9001917 	ldw	r4,100(sp)
 1001dc0:	00bfffc4 	movi	r2,-1
 1001dc4:	d8800715 	stw	r2,28(sp)
 1001dc8:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1001dcc:	d9001917 	ldw	r4,100(sp)
 1001dd0:	1002a440 	call	1002a44 <__cxa_begin_catch>
 1001dd4:	10023680 	call	1002368 <__cxa_get_globals_fast>
 1001dd8:	10800017 	ldw	r2,0(r2)
 1001ddc:	d8c01a17 	ldw	r3,104(sp)
 1001de0:	0009883a 	mov	r4,zero
 1001de4:	11401004 	addi	r5,r2,64
 1001de8:	d9401315 	stw	r5,76(sp)
 1001dec:	d8801415 	stw	r2,80(sp)
 1001df0:	d8c00715 	stw	r3,28(sp)
 1001df4:	d9401717 	ldw	r5,92(sp)
 1001df8:	d80d883a 	mov	r6,sp
 1001dfc:	1001b000 	call	1001b00 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1001e00:	d8801417 	ldw	r2,80(sp)
 1001e04:	d809883a 	mov	r4,sp
 1001e08:	d9801317 	ldw	r6,76(sp)
 1001e0c:	11400017 	ldw	r5,0(r2)
 1001e10:	d9c01617 	ldw	r7,88(sp)
 1001e14:	1001c840 	call	1001c84 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1001e18:	10803fcc 	andi	r2,r2,255
 1001e1c:	1000151e 	bne	r2,zero,1001e74 <__cxa_call_unexpected+0x16c>
 1001e20:	d8c01a17 	ldw	r3,104(sp)
 1001e24:	d809883a 	mov	r4,sp
 1001e28:	01404074 	movhi	r5,257
 1001e2c:	29469804 	addi	r5,r5,6752
 1001e30:	d8c00715 	stw	r3,28(sp)
 1001e34:	000d883a 	mov	r6,zero
 1001e38:	d9c01617 	ldw	r7,88(sp)
 1001e3c:	1001c840 	call	1001c84 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1001e40:	10803fcc 	andi	r2,r2,255
 1001e44:	10000c26 	beq	r2,zero,1001e78 <__cxa_call_unexpected+0x170>
 1001e48:	01000104 	movi	r4,4
 1001e4c:	10026fc0 	call	10026fc <__cxa_allocate_exception>
 1001e50:	1009883a 	mov	r4,r2
 1001e54:	00804074 	movhi	r2,257
 1001e58:	10868b04 	addi	r2,r2,6700
 1001e5c:	20800015 	stw	r2,0(r4)
 1001e60:	01404074 	movhi	r5,257
 1001e64:	29469804 	addi	r5,r5,6752
 1001e68:	01804034 	movhi	r6,256
 1001e6c:	31898f04 	addi	r6,r6,9788
 1001e70:	10028a40 	call	10028a4 <__cxa_throw>
 1001e74:	10028300 	call	1002830 <__cxa_rethrow>
 1001e78:	d9401a17 	ldw	r5,104(sp)
 1001e7c:	d9001517 	ldw	r4,84(sp)
 1001e80:	d9400715 	stw	r5,28(sp)
 1001e84:	10023a00 	call	10023a0 <_ZN10__cxxabiv111__terminateEPFvvE>

01001e88 <__gxx_personality_sj0>:
 1001e88:	deffd304 	addi	sp,sp,-180
 1001e8c:	00804034 	movhi	r2,256
 1001e90:	1088c904 	addi	r2,r2,8996
 1001e94:	00c04074 	movhi	r3,257
 1001e98:	18c5c104 	addi	r3,r3,5892
 1001e9c:	d8801315 	stw	r2,76(sp)
 1001ea0:	d9002315 	stw	r4,140(sp)
 1001ea4:	00804034 	movhi	r2,256
 1001ea8:	1087a204 	addi	r2,r2,7816
 1001eac:	d9000a04 	addi	r4,sp,40
 1001eb0:	d8801015 	stw	r2,64(sp)
 1001eb4:	d8c01115 	stw	r3,68(sp)
 1001eb8:	dfc02c15 	stw	ra,176(sp)
 1001ebc:	df002b15 	stw	fp,172(sp)
 1001ec0:	ddc02a15 	stw	r23,168(sp)
 1001ec4:	dec01215 	stw	sp,72(sp)
 1001ec8:	dec01415 	stw	sp,80(sp)
 1001ecc:	d9802515 	stw	r6,148(sp)
 1001ed0:	d9402415 	stw	r5,144(sp)
 1001ed4:	d9c02615 	stw	r7,152(sp)
 1001ed8:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 1001edc:	d8c02317 	ldw	r3,140(sp)
 1001ee0:	00800044 	movi	r2,1
 1001ee4:	18800a26 	beq	r3,r2,1001f10 <__gxx_personality_sj0+0x88>
 1001ee8:	010000c4 	movi	r4,3
 1001eec:	d9002215 	stw	r4,136(sp)
 1001ef0:	d9000a04 	addi	r4,sp,40
 1001ef4:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 1001ef8:	d8802217 	ldw	r2,136(sp)
 1001efc:	dfc02c17 	ldw	ra,176(sp)
 1001f00:	df002b17 	ldw	fp,172(sp)
 1001f04:	ddc02a17 	ldw	r23,168(sp)
 1001f08:	dec02d04 	addi	sp,sp,180
 1001f0c:	f800283a 	ret
 1001f10:	d9402d17 	ldw	r5,180(sp)
 1001f14:	d9002517 	ldw	r4,148(sp)
 1001f18:	0007883a 	mov	r3,zero
 1001f1c:	28800504 	addi	r2,r5,20
 1001f20:	d8800015 	stw	r2,0(sp)
 1001f24:	28bff504 	addi	r2,r5,-44
 1001f28:	d8801a15 	stw	r2,104(sp)
 1001f2c:	0090caf4 	movhi	r2,17195
 1001f30:	108ac004 	addi	r2,r2,11008
 1001f34:	2080ad26 	beq	r4,r2,10021ec <__gxx_personality_sj0+0x364>
 1001f38:	d8c02105 	stb	r3,132(sp)
 1001f3c:	d8c02417 	ldw	r3,144(sp)
 1001f40:	00800184 	movi	r2,6
 1001f44:	1880281e 	bne	r3,r2,1001fe8 <__gxx_personality_sj0+0x160>
 1001f48:	d8802103 	ldbu	r2,132(sp)
 1001f4c:	10002626 	beq	r2,zero,1001fe8 <__gxx_personality_sj0+0x160>
 1001f50:	d9001a17 	ldw	r4,104(sp)
 1001f54:	d9401a17 	ldw	r5,104(sp)
 1001f58:	d8801a17 	ldw	r2,104(sp)
 1001f5c:	21000917 	ldw	r4,36(r4)
 1001f60:	29400617 	ldw	r5,24(r5)
 1001f64:	10800817 	ldw	r2,32(r2)
 1001f68:	d9001d15 	stw	r4,116(sp)
 1001f6c:	d9401b15 	stw	r5,108(sp)
 1001f70:	d8802015 	stw	r2,128(sp)
 1001f74:	2000ad1e 	bne	r4,zero,100222c <__gxx_personality_sj0+0x3a4>
 1001f78:	01000044 	movi	r4,1
 1001f7c:	00800044 	movi	r2,1
 1001f80:	2080e126 	beq	r4,r2,1002308 <__gxx_personality_sj0+0x480>
 1001f84:	d8801b17 	ldw	r2,108(sp)
 1001f88:	1000d316 	blt	r2,zero,10022d8 <__gxx_personality_sj0+0x450>
 1001f8c:	d9802d17 	ldw	r6,180(sp)
 1001f90:	d9002e17 	ldw	r4,184(sp)
 1001f94:	00bfffc4 	movi	r2,-1
 1001f98:	000b883a 	mov	r5,zero
 1001f9c:	d8800b15 	stw	r2,44(sp)
 1001fa0:	1002fb80 	call	1002fb8 <_Unwind_SetGR>
 1001fa4:	d9801b17 	ldw	r6,108(sp)
 1001fa8:	d9002e17 	ldw	r4,184(sp)
 1001fac:	01400044 	movi	r5,1
 1001fb0:	1002fb80 	call	1002fb8 <_Unwind_SetGR>
 1001fb4:	d9002e17 	ldw	r4,184(sp)
 1001fb8:	d9401d17 	ldw	r5,116(sp)
 1001fbc:	1002ff40 	call	1002ff4 <_Unwind_SetIP>
 1001fc0:	010001c4 	movi	r4,7
 1001fc4:	d9002215 	stw	r4,136(sp)
 1001fc8:	d9000a04 	addi	r4,sp,40
 1001fcc:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 1001fd0:	d8802217 	ldw	r2,136(sp)
 1001fd4:	dfc02c17 	ldw	ra,176(sp)
 1001fd8:	df002b17 	ldw	fp,172(sp)
 1001fdc:	ddc02a17 	ldw	r23,168(sp)
 1001fe0:	dec02d04 	addi	sp,sp,180
 1001fe4:	f800283a 	ret
 1001fe8:	d9002e17 	ldw	r4,184(sp)
 1001fec:	00ffffc4 	movi	r3,-1
 1001ff0:	d8c00b15 	stw	r3,44(sp)
 1001ff4:	10030040 	call	1003004 <_Unwind_GetLanguageSpecificData>
 1001ff8:	10007226 	beq	r2,zero,10021c4 <__gxx_personality_sj0+0x33c>
 1001ffc:	d9002e17 	ldw	r4,184(sp)
 1002000:	d9800404 	addi	r6,sp,16
 1002004:	100b883a 	mov	r5,r2
 1002008:	d8802015 	stw	r2,128(sp)
 100200c:	1001b000 	call	1001b00 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1002010:	d9000903 	ldbu	r4,36(sp)
 1002014:	d9402e17 	ldw	r5,184(sp)
 1002018:	d8801e15 	stw	r2,120(sp)
 100201c:	1001a700 	call	1001a70 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1002020:	d9002e17 	ldw	r4,184(sp)
 1002024:	d8800615 	stw	r2,24(sp)
 1002028:	1002fd00 	call	1002fd0 <_Unwind_GetIP>
 100202c:	10bfffc4 	addi	r2,r2,-1
 1002030:	d8801c15 	stw	r2,112(sp)
 1002034:	10006316 	blt	r2,zero,10021c4 <__gxx_personality_sj0+0x33c>
 1002038:	10001b1e 	bne	r2,zero,10020a8 <__gxx_personality_sj0+0x220>
 100203c:	01000044 	movi	r4,1
 1002040:	d8001f15 	stw	zero,124(sp)
 1002044:	d8001d15 	stw	zero,116(sp)
 1002048:	d8001b15 	stw	zero,108(sp)
 100204c:	d9402417 	ldw	r5,144(sp)
 1002050:	00c00044 	movi	r3,1
 1002054:	28c4703a 	and	r2,r5,r3
 1002058:	1005003a 	cmpeq	r2,r2,zero
 100205c:	10006a1e 	bne	r2,zero,1002208 <__gxx_personality_sj0+0x380>
 1002060:	00800084 	movi	r2,2
 1002064:	20805726 	beq	r4,r2,10021c4 <__gxx_personality_sj0+0x33c>
 1002068:	d8802103 	ldbu	r2,132(sp)
 100206c:	10008626 	beq	r2,zero,1002288 <__gxx_personality_sj0+0x400>
 1002070:	d9001a17 	ldw	r4,104(sp)
 1002074:	d9401d17 	ldw	r5,116(sp)
 1002078:	d8801b17 	ldw	r2,108(sp)
 100207c:	00c00184 	movi	r3,6
 1002080:	d8c02215 	stw	r3,136(sp)
 1002084:	21400915 	stw	r5,36(r4)
 1002088:	20800615 	stw	r2,24(r4)
 100208c:	d8c01f17 	ldw	r3,124(sp)
 1002090:	d9402017 	ldw	r5,128(sp)
 1002094:	d8800017 	ldw	r2,0(sp)
 1002098:	20c00715 	stw	r3,28(r4)
 100209c:	21400815 	stw	r5,32(r4)
 10020a0:	20800a15 	stw	r2,40(r4)
 10020a4:	003f9206 	br	1001ef0 <__gxx_personality_sj0+0x68>
 10020a8:	d9001e17 	ldw	r4,120(sp)
 10020ac:	d9400204 	addi	r5,sp,8
 10020b0:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 10020b4:	d9401c17 	ldw	r5,112(sp)
 10020b8:	1009883a 	mov	r4,r2
 10020bc:	297fffc4 	addi	r5,r5,-1
 10020c0:	d9401c15 	stw	r5,112(sp)
 10020c4:	d9400104 	addi	r5,sp,4
 10020c8:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 10020cc:	d8801e15 	stw	r2,120(sp)
 10020d0:	d8801c17 	ldw	r2,112(sp)
 10020d4:	103ff41e 	bne	r2,zero,10020a8 <__gxx_personality_sj0+0x220>
 10020d8:	d8800217 	ldw	r2,8(sp)
 10020dc:	d8c00117 	ldw	r3,4(sp)
 10020e0:	01000044 	movi	r4,1
 10020e4:	1105883a 	add	r2,r2,r4
 10020e8:	d8801d15 	stw	r2,116(sp)
 10020ec:	1800541e 	bne	r3,zero,1002240 <__gxx_personality_sj0+0x3b8>
 10020f0:	d8001f15 	stw	zero,124(sp)
 10020f4:	d8c01d17 	ldw	r3,116(sp)
 10020f8:	18003226 	beq	r3,zero,10021c4 <__gxx_personality_sj0+0x33c>
 10020fc:	d9001f17 	ldw	r4,124(sp)
 1002100:	20007226 	beq	r4,zero,10022cc <__gxx_personality_sj0+0x444>
 1002104:	d9402417 	ldw	r5,144(sp)
 1002108:	2880020c 	andi	r2,r5,8
 100210c:	10006a1e 	bne	r2,zero,10022b8 <__gxx_personality_sj0+0x430>
 1002110:	d8802103 	ldbu	r2,132(sp)
 1002114:	10006826 	beq	r2,zero,10022b8 <__gxx_personality_sj0+0x430>
 1002118:	d8801a17 	ldw	r2,104(sp)
 100211c:	10800017 	ldw	r2,0(r2)
 1002120:	d8801915 	stw	r2,100(sp)
 1002124:	d8c01917 	ldw	r3,100(sp)
 1002128:	d8001805 	stb	zero,96(sp)
 100212c:	1807003a 	cmpeq	r3,r3,zero
 1002130:	d8c02715 	stw	r3,156(sp)
 1002134:	00000706 	br	1002154 <__gxx_personality_sj0+0x2cc>
 1002138:	01000044 	movi	r4,1
 100213c:	d9001805 	stb	r4,96(sp)
 1002140:	d8800217 	ldw	r2,8(sp)
 1002144:	10005e26 	beq	r2,zero,10022c0 <__gxx_personality_sj0+0x438>
 1002148:	d8c01717 	ldw	r3,92(sp)
 100214c:	1885883a 	add	r2,r3,r2
 1002150:	d8801f15 	stw	r2,124(sp)
 1002154:	d9001f17 	ldw	r4,124(sp)
 1002158:	d9400104 	addi	r5,sp,4
 100215c:	10017ac0 	call	10017ac <_Z12read_sleb128PKhPi>
 1002160:	1009883a 	mov	r4,r2
 1002164:	d9400204 	addi	r5,sp,8
 1002168:	d8801715 	stw	r2,92(sp)
 100216c:	10017ac0 	call	10017ac <_Z12read_sleb128PKhPi>
 1002170:	d8800117 	ldw	r2,4(sp)
 1002174:	103ff026 	beq	r2,zero,1002138 <__gxx_personality_sj0+0x2b0>
 1002178:	0080360e 	bge	zero,r2,1002254 <__gxx_personality_sj0+0x3cc>
 100217c:	017fffc4 	movi	r5,-1
 1002180:	d9400b15 	stw	r5,44(sp)
 1002184:	d9000404 	addi	r4,sp,16
 1002188:	100b883a 	mov	r5,r2
 100218c:	1001c000 	call	1001c00 <_Z15get_ttype_entryP16lsda_header_infoj>
 1002190:	10000826 	beq	r2,zero,10021b4 <__gxx_personality_sj0+0x32c>
 1002194:	d8c02717 	ldw	r3,156(sp)
 1002198:	183fe91e 	bne	r3,zero,1002140 <__gxx_personality_sj0+0x2b8>
 100219c:	d9401917 	ldw	r5,100(sp)
 10021a0:	1009883a 	mov	r4,r2
 10021a4:	d80d883a 	mov	r6,sp
 10021a8:	10018000 	call	1001800 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 10021ac:	10803fcc 	andi	r2,r2,255
 10021b0:	103fe326 	beq	r2,zero,1002140 <__gxx_personality_sj0+0x2b8>
 10021b4:	d9000117 	ldw	r4,4(sp)
 10021b8:	d9001b15 	stw	r4,108(sp)
 10021bc:	010000c4 	movi	r4,3
 10021c0:	003fa206 	br	100204c <__gxx_personality_sj0+0x1c4>
 10021c4:	01400204 	movi	r5,8
 10021c8:	d9000a04 	addi	r4,sp,40
 10021cc:	d9402215 	stw	r5,136(sp)
 10021d0:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 10021d4:	d8802217 	ldw	r2,136(sp)
 10021d8:	dfc02c17 	ldw	ra,176(sp)
 10021dc:	df002b17 	ldw	fp,172(sp)
 10021e0:	ddc02a17 	ldw	r23,168(sp)
 10021e4:	dec02d04 	addi	sp,sp,180
 10021e8:	f800283a 	ret
 10021ec:	d9402617 	ldw	r5,152(sp)
 10021f0:	0091d3b4 	movhi	r2,18254
 10021f4:	109550c4 	addi	r2,r2,21827
 10021f8:	28bf4f1e 	bne	r5,r2,1001f38 <__gxx_personality_sj0+0xb0>
 10021fc:	d8802317 	ldw	r2,140(sp)
 1002200:	1007883a 	mov	r3,r2
 1002204:	003f4c06 	br	1001f38 <__gxx_personality_sj0+0xb0>
 1002208:	d9402417 	ldw	r5,144(sp)
 100220c:	2880020c 	andi	r2,r5,8
 1002210:	10000826 	beq	r2,zero,1002234 <__gxx_personality_sj0+0x3ac>
 1002214:	20c04026 	beq	r4,r3,1002318 <__gxx_personality_sj0+0x490>
 1002218:	d8801b17 	ldw	r2,108(sp)
 100221c:	103f5b0e 	bge	r2,zero,1001f8c <__gxx_personality_sj0+0x104>
 1002220:	00800084 	movi	r2,2
 1002224:	d8800b15 	stw	r2,44(sp)
 1002228:	100246c0 	call	100246c <_ZSt10unexpectedv>
 100222c:	010000c4 	movi	r4,3
 1002230:	003f5206 	br	1001f7c <__gxx_personality_sj0+0xf4>
 1002234:	d8802103 	ldbu	r2,132(sp)
 1002238:	103f501e 	bne	r2,zero,1001f7c <__gxx_personality_sj0+0xf4>
 100223c:	003ff506 	br	1002214 <__gxx_personality_sj0+0x38c>
 1002240:	d8800817 	ldw	r2,32(sp)
 1002244:	1885883a 	add	r2,r3,r2
 1002248:	1105c83a 	sub	r2,r2,r4
 100224c:	d8801f15 	stw	r2,124(sp)
 1002250:	003fa806 	br	10020f4 <__gxx_personality_sj0+0x26c>
 1002254:	d9002717 	ldw	r4,156(sp)
 1002258:	20000e1e 	bne	r4,zero,1002294 <__gxx_personality_sj0+0x40c>
 100225c:	017fffc4 	movi	r5,-1
 1002260:	d9400b15 	stw	r5,44(sp)
 1002264:	d9800017 	ldw	r6,0(sp)
 1002268:	d9401917 	ldw	r5,100(sp)
 100226c:	100f883a 	mov	r7,r2
 1002270:	d9000404 	addi	r4,sp,16
 1002274:	1001c840 	call	1001c84 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1002278:	1080005c 	xori	r2,r2,1
 100227c:	10803fcc 	andi	r2,r2,255
 1002280:	103faf26 	beq	r2,zero,1002140 <__gxx_personality_sj0+0x2b8>
 1002284:	003fcb06 	br	10021b4 <__gxx_personality_sj0+0x32c>
 1002288:	00800184 	movi	r2,6
 100228c:	d8802215 	stw	r2,136(sp)
 1002290:	003f1706 	br	1001ef0 <__gxx_personality_sj0+0x68>
 1002294:	d9000717 	ldw	r4,28(sp)
 1002298:	d9400304 	addi	r5,sp,12
 100229c:	2089c83a 	sub	r4,r4,r2
 10022a0:	213fffc4 	addi	r4,r4,-1
 10022a4:	100177c0 	call	100177c <_Z12read_uleb128PKhPj>
 10022a8:	d8c00317 	ldw	r3,12(sp)
 10022ac:	1807003a 	cmpeq	r3,r3,zero
 10022b0:	1805883a 	mov	r2,r3
 10022b4:	003ff106 	br	100227c <__gxx_personality_sj0+0x3f4>
 10022b8:	d8001915 	stw	zero,100(sp)
 10022bc:	003f9906 	br	1002124 <__gxx_personality_sj0+0x29c>
 10022c0:	d8801803 	ldbu	r2,96(sp)
 10022c4:	1004c03a 	cmpne	r2,r2,zero
 10022c8:	103fbe26 	beq	r2,zero,10021c4 <__gxx_personality_sj0+0x33c>
 10022cc:	01000084 	movi	r4,2
 10022d0:	d8001b15 	stw	zero,108(sp)
 10022d4:	003f5d06 	br	100204c <__gxx_personality_sj0+0x1c4>
 10022d8:	d9402017 	ldw	r5,128(sp)
 10022dc:	d9002e17 	ldw	r4,184(sp)
 10022e0:	00bfffc4 	movi	r2,-1
 10022e4:	d9800404 	addi	r6,sp,16
 10022e8:	d8800b15 	stw	r2,44(sp)
 10022ec:	1001b000 	call	1001b00 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 10022f0:	d9000903 	ldbu	r4,36(sp)
 10022f4:	d9402e17 	ldw	r5,184(sp)
 10022f8:	1001a700 	call	1001a70 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 10022fc:	d8c01a17 	ldw	r3,104(sp)
 1002300:	18800915 	stw	r2,36(r3)
 1002304:	003f2106 	br	1001f8c <__gxx_personality_sj0+0x104>
 1002308:	d9002d17 	ldw	r4,180(sp)
 100230c:	00bfffc4 	movi	r2,-1
 1002310:	d8800b15 	stw	r2,44(sp)
 1002314:	10025840 	call	1002584 <__cxa_call_terminate>
 1002318:	00bfffc4 	movi	r2,-1
 100231c:	d8800b15 	stw	r2,44(sp)
 1002320:	10024440 	call	1002444 <_ZSt9terminatev>
 1002324:	d9000b17 	ldw	r4,44(sp)
 1002328:	d9400c17 	ldw	r5,48(sp)
 100232c:	00800044 	movi	r2,1
 1002330:	d9002915 	stw	r4,164(sp)
 1002334:	d9402815 	stw	r5,160(sp)
 1002338:	20800626 	beq	r4,r2,1002354 <__gxx_personality_sj0+0x4cc>
 100233c:	d8000b15 	stw	zero,44(sp)
 1002340:	10029a00 	call	10029a0 <__cxa_end_catch>
 1002344:	d9002817 	ldw	r4,160(sp)
 1002348:	00bfffc4 	movi	r2,-1
 100234c:	d8800b15 	stw	r2,44(sp)
 1002350:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1002354:	d9002817 	ldw	r4,160(sp)
 1002358:	1002a440 	call	1002a44 <__cxa_begin_catch>
 100235c:	d8c02917 	ldw	r3,164(sp)
 1002360:	d8c00b15 	stw	r3,44(sp)
 1002364:	10024440 	call	1002444 <_ZSt9terminatev>

01002368 <__cxa_get_globals_fast>:
 1002368:	d0a6eb04 	addi	r2,gp,-25684
 100236c:	f800283a 	ret

01002370 <__cxa_get_globals>:
 1002370:	d0a6eb04 	addi	r2,gp,-25684
 1002374:	f800283a 	ret

01002378 <_ZSt13set_terminatePFvvE>:
 1002378:	00c04074 	movhi	r3,257
 100237c:	18ce7b04 	addi	r3,r3,14828
 1002380:	18800017 	ldw	r2,0(r3)
 1002384:	19000015 	stw	r4,0(r3)
 1002388:	f800283a 	ret

0100238c <_ZSt14set_unexpectedPFvvE>:
 100238c:	00c04074 	movhi	r3,257
 1002390:	18ce7c04 	addi	r3,r3,14832
 1002394:	18800017 	ldw	r2,0(r3)
 1002398:	19000015 	stw	r4,0(r3)
 100239c:	f800283a 	ret

010023a0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 10023a0:	deffed04 	addi	sp,sp,-76
 10023a4:	00804034 	movhi	r2,256
 10023a8:	1087a204 	addi	r2,r2,7816
 10023ac:	d8800615 	stw	r2,24(sp)
 10023b0:	00c04074 	movhi	r3,257
 10023b4:	18c5c504 	addi	r3,r3,5908
 10023b8:	00804034 	movhi	r2,256
 10023bc:	1088ff04 	addi	r2,r2,9212
 10023c0:	d9000d15 	stw	r4,52(sp)
 10023c4:	d809883a 	mov	r4,sp
 10023c8:	d8800915 	stw	r2,36(sp)
 10023cc:	dfc01215 	stw	ra,72(sp)
 10023d0:	df001115 	stw	fp,68(sp)
 10023d4:	ddc01015 	stw	r23,64(sp)
 10023d8:	d8c00715 	stw	r3,28(sp)
 10023dc:	dec00815 	stw	sp,32(sp)
 10023e0:	dec00a15 	stw	sp,40(sp)
 10023e4:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 10023e8:	00800084 	movi	r2,2
 10023ec:	d8800115 	stw	r2,4(sp)
 10023f0:	d8800d17 	ldw	r2,52(sp)
 10023f4:	103ee83a 	callr	r2
 10023f8:	10034b80 	call	10034b8 <abort>
 10023fc:	d8800117 	ldw	r2,4(sp)
 1002400:	d8c00217 	ldw	r3,8(sp)
 1002404:	d8800f15 	stw	r2,60(sp)
 1002408:	d8c00e15 	stw	r3,56(sp)
 100240c:	d8c00f17 	ldw	r3,60(sp)
 1002410:	00800044 	movi	r2,1
 1002414:	18800626 	beq	r3,r2,1002430 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 1002418:	d8000115 	stw	zero,4(sp)
 100241c:	10029a00 	call	10029a0 <__cxa_end_catch>
 1002420:	d9000e17 	ldw	r4,56(sp)
 1002424:	00bfffc4 	movi	r2,-1
 1002428:	d8800115 	stw	r2,4(sp)
 100242c:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1002430:	d9000e17 	ldw	r4,56(sp)
 1002434:	1002a440 	call	1002a44 <__cxa_begin_catch>
 1002438:	d8c00f17 	ldw	r3,60(sp)
 100243c:	d8c00115 	stw	r3,4(sp)
 1002440:	10034b80 	call	10034b8 <abort>

01002444 <_ZSt9terminatev>:
 1002444:	00804074 	movhi	r2,257
 1002448:	108e7b04 	addi	r2,r2,14828
 100244c:	11000017 	ldw	r4,0(r2)
 1002450:	deffff04 	addi	sp,sp,-4
 1002454:	dfc00015 	stw	ra,0(sp)
 1002458:	10023a00 	call	10023a0 <_ZN10__cxxabiv111__terminateEPFvvE>

0100245c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 100245c:	deffff04 	addi	sp,sp,-4
 1002460:	dfc00015 	stw	ra,0(sp)
 1002464:	203ee83a 	callr	r4
 1002468:	10024440 	call	1002444 <_ZSt9terminatev>

0100246c <_ZSt10unexpectedv>:
 100246c:	00804074 	movhi	r2,257
 1002470:	108e7c04 	addi	r2,r2,14832
 1002474:	11000017 	ldw	r4,0(r2)
 1002478:	deffff04 	addi	sp,sp,-4
 100247c:	dfc00015 	stw	ra,0(sp)
 1002480:	100245c0 	call	100245c <_ZN10__cxxabiv112__unexpectedEPFvvE>

01002484 <_Znwm>:
 1002484:	deffee04 	addi	sp,sp,-72
 1002488:	00804034 	movhi	r2,256
 100248c:	1087a204 	addi	r2,r2,7816
 1002490:	d8800615 	stw	r2,24(sp)
 1002494:	00c04074 	movhi	r3,257
 1002498:	18c5c904 	addi	r3,r3,5924
 100249c:	00804034 	movhi	r2,256
 10024a0:	10895804 	addi	r2,r2,9568
 10024a4:	d9000e15 	stw	r4,56(sp)
 10024a8:	d809883a 	mov	r4,sp
 10024ac:	d8800915 	stw	r2,36(sp)
 10024b0:	dfc01115 	stw	ra,68(sp)
 10024b4:	df001015 	stw	fp,64(sp)
 10024b8:	ddc00f15 	stw	r23,60(sp)
 10024bc:	d8c00715 	stw	r3,28(sp)
 10024c0:	dec00815 	stw	sp,32(sp)
 10024c4:	dec00a15 	stw	sp,40(sp)
 10024c8:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 10024cc:	d8800e17 	ldw	r2,56(sp)
 10024d0:	10000a1e 	bne	r2,zero,10024fc <_Znwm+0x78>
 10024d4:	00800044 	movi	r2,1
 10024d8:	d8800e15 	stw	r2,56(sp)
 10024dc:	00000706 	br	10024fc <_Znwm+0x78>
 10024e0:	00804074 	movhi	r2,257
 10024e4:	10956504 	addi	r2,r2,21908
 10024e8:	10c00017 	ldw	r3,0(r2)
 10024ec:	18000f26 	beq	r3,zero,100252c <_Znwm+0xa8>
 10024f0:	00800044 	movi	r2,1
 10024f4:	d8800115 	stw	r2,4(sp)
 10024f8:	183ee83a 	callr	r3
 10024fc:	d9000e17 	ldw	r4,56(sp)
 1002500:	1004a780 	call	1004a78 <malloc>
 1002504:	d8800d15 	stw	r2,52(sp)
 1002508:	103ff526 	beq	r2,zero,10024e0 <_Znwm+0x5c>
 100250c:	d809883a 	mov	r4,sp
 1002510:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 1002514:	d8800d17 	ldw	r2,52(sp)
 1002518:	dfc01117 	ldw	ra,68(sp)
 100251c:	df001017 	ldw	fp,64(sp)
 1002520:	ddc00f17 	ldw	r23,60(sp)
 1002524:	dec01204 	addi	sp,sp,72
 1002528:	f800283a 	ret
 100252c:	01000104 	movi	r4,4
 1002530:	10026fc0 	call	10026fc <__cxa_allocate_exception>
 1002534:	1009883a 	mov	r4,r2
 1002538:	00804074 	movhi	r2,257
 100253c:	1086a104 	addi	r2,r2,6788
 1002540:	20800015 	stw	r2,0(r4)
 1002544:	00c00044 	movi	r3,1
 1002548:	d8c00115 	stw	r3,4(sp)
 100254c:	01404074 	movhi	r5,257
 1002550:	2946a804 	addi	r5,r5,6816
 1002554:	01804034 	movhi	r6,256
 1002558:	3189a704 	addi	r6,r6,9884
 100255c:	10028a40 	call	10028a4 <__cxa_throw>
 1002560:	d8800317 	ldw	r2,12(sp)
 1002564:	00ffffc4 	movi	r3,-1
 1002568:	d9000217 	ldw	r4,8(sp)
 100256c:	10c00226 	beq	r2,r3,1002578 <_Znwm+0xf4>
 1002570:	d8c00115 	stw	r3,4(sp)
 1002574:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1002578:	00bfffc4 	movi	r2,-1
 100257c:	d8800115 	stw	r2,4(sp)
 1002580:	1001d080 	call	1001d08 <__cxa_call_unexpected>

01002584 <__cxa_call_terminate>:
 1002584:	defffe04 	addi	sp,sp,-8
 1002588:	dc000015 	stw	r16,0(sp)
 100258c:	dfc00115 	stw	ra,4(sp)
 1002590:	2021883a 	mov	r16,r4
 1002594:	20000626 	beq	r4,zero,10025b0 <__cxa_call_terminate+0x2c>
 1002598:	1002a440 	call	1002a44 <__cxa_begin_catch>
 100259c:	80c00017 	ldw	r3,0(r16)
 10025a0:	0090caf4 	movhi	r2,17195
 10025a4:	108ac004 	addi	r2,r2,11008
 10025a8:	81000117 	ldw	r4,4(r16)
 10025ac:	18800126 	beq	r3,r2,10025b4 <__cxa_call_terminate+0x30>
 10025b0:	10024440 	call	1002444 <_ZSt9terminatev>
 10025b4:	0091d3b4 	movhi	r2,18254
 10025b8:	109550c4 	addi	r2,r2,21827
 10025bc:	20bffc1e 	bne	r4,r2,10025b0 <__cxa_call_terminate+0x2c>
 10025c0:	813ff817 	ldw	r4,-32(r16)
 10025c4:	10023a00 	call	10023a0 <_ZN10__cxxabiv111__terminateEPFvvE>

010025c8 <_ZNKSt9exception4whatEv>:
 10025c8:	20800017 	ldw	r2,0(r4)
 10025cc:	10ffff17 	ldw	r3,-4(r2)
 10025d0:	18800117 	ldw	r2,4(r3)
 10025d4:	f800283a 	ret

010025d8 <_ZNSt9exceptionD0Ev>:
 10025d8:	00804074 	movhi	r2,257
 10025dc:	10869004 	addi	r2,r2,6720
 10025e0:	20800015 	stw	r2,0(r4)
 10025e4:	10017701 	jmpi	1001770 <_ZdlPv>

010025e8 <_ZNSt9exceptionD1Ev>:
 10025e8:	00804074 	movhi	r2,257
 10025ec:	10869004 	addi	r2,r2,6720
 10025f0:	20800015 	stw	r2,0(r4)
 10025f4:	f800283a 	ret

010025f8 <_ZNSt9exceptionD2Ev>:
 10025f8:	00804074 	movhi	r2,257
 10025fc:	10869004 	addi	r2,r2,6720
 1002600:	20800015 	stw	r2,0(r4)
 1002604:	f800283a 	ret

01002608 <_ZNSt13bad_exceptionD0Ev>:
 1002608:	defffe04 	addi	sp,sp,-8
 100260c:	00804074 	movhi	r2,257
 1002610:	10868b04 	addi	r2,r2,6700
 1002614:	dc400015 	stw	r17,0(sp)
 1002618:	20800015 	stw	r2,0(r4)
 100261c:	2023883a 	mov	r17,r4
 1002620:	dfc00115 	stw	ra,4(sp)
 1002624:	10025f80 	call	10025f8 <_ZNSt9exceptionD2Ev>
 1002628:	8809883a 	mov	r4,r17
 100262c:	dfc00117 	ldw	ra,4(sp)
 1002630:	dc400017 	ldw	r17,0(sp)
 1002634:	dec00204 	addi	sp,sp,8
 1002638:	10017701 	jmpi	1001770 <_ZdlPv>

0100263c <_ZNSt13bad_exceptionD1Ev>:
 100263c:	00804074 	movhi	r2,257
 1002640:	10868b04 	addi	r2,r2,6700
 1002644:	20800015 	stw	r2,0(r4)
 1002648:	10025f81 	jmpi	10025f8 <_ZNSt9exceptionD2Ev>

0100264c <_ZNSt13bad_exceptionD2Ev>:
 100264c:	00804074 	movhi	r2,257
 1002650:	10868b04 	addi	r2,r2,6700
 1002654:	20800015 	stw	r2,0(r4)
 1002658:	10025f81 	jmpi	10025f8 <_ZNSt9exceptionD2Ev>

0100265c <_ZSt15set_new_handlerPFvvE>:
 100265c:	d0a6ed17 	ldw	r2,-25676(gp)
 1002660:	d126ed15 	stw	r4,-25676(gp)
 1002664:	f800283a 	ret

01002668 <_ZNSt9bad_allocD0Ev>:
 1002668:	defffe04 	addi	sp,sp,-8
 100266c:	00804074 	movhi	r2,257
 1002670:	1086a104 	addi	r2,r2,6788
 1002674:	dc400015 	stw	r17,0(sp)
 1002678:	20800015 	stw	r2,0(r4)
 100267c:	2023883a 	mov	r17,r4
 1002680:	dfc00115 	stw	ra,4(sp)
 1002684:	10025f80 	call	10025f8 <_ZNSt9exceptionD2Ev>
 1002688:	8809883a 	mov	r4,r17
 100268c:	dfc00117 	ldw	ra,4(sp)
 1002690:	dc400017 	ldw	r17,0(sp)
 1002694:	dec00204 	addi	sp,sp,8
 1002698:	10017701 	jmpi	1001770 <_ZdlPv>

0100269c <_ZNSt9bad_allocD1Ev>:
 100269c:	00804074 	movhi	r2,257
 10026a0:	1086a104 	addi	r2,r2,6788
 10026a4:	20800015 	stw	r2,0(r4)
 10026a8:	10025f81 	jmpi	10025f8 <_ZNSt9exceptionD2Ev>

010026ac <_ZNSt9bad_allocD2Ev>:
 10026ac:	00804074 	movhi	r2,257
 10026b0:	1086a104 	addi	r2,r2,6788
 10026b4:	20800015 	stw	r2,0(r4)
 10026b8:	10025f81 	jmpi	10025f8 <_ZNSt9exceptionD2Ev>

010026bc <__cxa_free_exception>:
 10026bc:	2007883a 	mov	r3,r4
 10026c0:	00804074 	movhi	r2,257
 10026c4:	10957a04 	addi	r2,r2,21992
 10026c8:	213ff004 	addi	r4,r4,-64
 10026cc:	11420004 	addi	r5,r2,2048
 10026d0:	18800336 	bltu	r3,r2,10026e0 <__cxa_free_exception+0x24>
 10026d4:	1885c83a 	sub	r2,r3,r2
 10026d8:	1004d27a 	srli	r2,r2,9
 10026dc:	19400136 	bltu	r3,r5,10026e4 <__cxa_free_exception+0x28>
 10026e0:	1004a641 	jmpi	1004a64 <free>
 10026e4:	00ffff84 	movi	r3,-2
 10026e8:	1886183a 	rol	r3,r3,r2
 10026ec:	d0a6ee17 	ldw	r2,-25672(gp)
 10026f0:	10c4703a 	and	r2,r2,r3
 10026f4:	d0a6ee15 	stw	r2,-25672(gp)
 10026f8:	f800283a 	ret

010026fc <__cxa_allocate_exception>:
 10026fc:	deffed04 	addi	sp,sp,-76
 1002700:	00804034 	movhi	r2,256
 1002704:	1087a204 	addi	r2,r2,7816
 1002708:	21001004 	addi	r4,r4,64
 100270c:	00c04074 	movhi	r3,257
 1002710:	18c5ce04 	addi	r3,r3,5944
 1002714:	d8800615 	stw	r2,24(sp)
 1002718:	d9000d15 	stw	r4,52(sp)
 100271c:	00804034 	movhi	r2,256
 1002720:	108a0304 	addi	r2,r2,10252
 1002724:	d809883a 	mov	r4,sp
 1002728:	dfc01215 	stw	ra,72(sp)
 100272c:	d8c00715 	stw	r3,28(sp)
 1002730:	d8800915 	stw	r2,36(sp)
 1002734:	df001115 	stw	fp,68(sp)
 1002738:	ddc01015 	stw	r23,64(sp)
 100273c:	dec00815 	stw	sp,32(sp)
 1002740:	dec00a15 	stw	sp,40(sp)
 1002744:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 1002748:	d9000d17 	ldw	r4,52(sp)
 100274c:	1004a780 	call	1004a78 <malloc>
 1002750:	d8800e15 	stw	r2,56(sp)
 1002754:	1000171e 	bne	r2,zero,10027b4 <__cxa_allocate_exception+0xb8>
 1002758:	d8c00d17 	ldw	r3,52(sp)
 100275c:	00808004 	movi	r2,512
 1002760:	d1e6ee17 	ldw	r7,-25672(gp)
 1002764:	10c02636 	bltu	r2,r3,1002800 <__cxa_allocate_exception+0x104>
 1002768:	3807883a 	mov	r3,r7
 100276c:	01400044 	movi	r5,1
 1002770:	1944703a 	and	r2,r3,r5
 1002774:	0009883a 	mov	r4,zero
 1002778:	01800104 	movi	r6,4
 100277c:	10000526 	beq	r2,zero,1002794 <__cxa_allocate_exception+0x98>
 1002780:	2149883a 	add	r4,r4,r5
 1002784:	21801e26 	beq	r4,r6,1002800 <__cxa_allocate_exception+0x104>
 1002788:	1806d07a 	srli	r3,r3,1
 100278c:	1944703a 	and	r2,r3,r5
 1002790:	103ffb1e 	bne	r2,zero,1002780 <__cxa_allocate_exception+0x84>
 1002794:	2904983a 	sll	r2,r5,r4
 1002798:	2008927a 	slli	r4,r4,9
 100279c:	00c04074 	movhi	r3,257
 10027a0:	18d57a04 	addi	r3,r3,21992
 10027a4:	3884b03a 	or	r2,r7,r2
 10027a8:	20c9883a 	add	r4,r4,r3
 10027ac:	d9000e15 	stw	r4,56(sp)
 10027b0:	d0a6ee15 	stw	r2,-25672(gp)
 10027b4:	10023700 	call	1002370 <__cxa_get_globals>
 10027b8:	10c00117 	ldw	r3,4(r2)
 10027bc:	d9000e17 	ldw	r4,56(sp)
 10027c0:	000b883a 	mov	r5,zero
 10027c4:	18c00044 	addi	r3,r3,1
 10027c8:	10c00115 	stw	r3,4(r2)
 10027cc:	01801004 	movi	r6,64
 10027d0:	10051cc0 	call	10051cc <memset>
 10027d4:	d8800e17 	ldw	r2,56(sp)
 10027d8:	d809883a 	mov	r4,sp
 10027dc:	10801004 	addi	r2,r2,64
 10027e0:	d8800f15 	stw	r2,60(sp)
 10027e4:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 10027e8:	d8800f17 	ldw	r2,60(sp)
 10027ec:	dfc01217 	ldw	ra,72(sp)
 10027f0:	df001117 	ldw	fp,68(sp)
 10027f4:	ddc01017 	ldw	r23,64(sp)
 10027f8:	dec01304 	addi	sp,sp,76
 10027fc:	f800283a 	ret
 1002800:	00800044 	movi	r2,1
 1002804:	d8800115 	stw	r2,4(sp)
 1002808:	10024440 	call	1002444 <_ZSt9terminatev>
 100280c:	d8800317 	ldw	r2,12(sp)
 1002810:	00ffffc4 	movi	r3,-1
 1002814:	d9000217 	ldw	r4,8(sp)
 1002818:	10c00226 	beq	r2,r3,1002824 <__cxa_allocate_exception+0x128>
 100281c:	d8c00115 	stw	r3,4(sp)
 1002820:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1002824:	00bfffc4 	movi	r2,-1
 1002828:	d8800115 	stw	r2,4(sp)
 100282c:	1001d080 	call	1001d08 <__cxa_call_unexpected>

01002830 <__cxa_rethrow>:
 1002830:	defffe04 	addi	sp,sp,-8
 1002834:	dc400015 	stw	r17,0(sp)
 1002838:	dfc00115 	stw	ra,4(sp)
 100283c:	10023700 	call	1002370 <__cxa_get_globals>
 1002840:	100b883a 	mov	r5,r2
 1002844:	10800117 	ldw	r2,4(r2)
 1002848:	2c400017 	ldw	r17,0(r5)
 100284c:	10800044 	addi	r2,r2,1
 1002850:	28800115 	stw	r2,4(r5)
 1002854:	88000b26 	beq	r17,zero,1002884 <__cxa_rethrow+0x54>
 1002858:	88c00b17 	ldw	r3,44(r17)
 100285c:	0090caf4 	movhi	r2,17195
 1002860:	108ac004 	addi	r2,r2,11008
 1002864:	89000c17 	ldw	r4,48(r17)
 1002868:	18800726 	beq	r3,r2,1002888 <__cxa_rethrow+0x58>
 100286c:	28000015 	stw	zero,0(r5)
 1002870:	8c400b04 	addi	r17,r17,44
 1002874:	8809883a 	mov	r4,r17
 1002878:	10034600 	call	1003460 <_Unwind_SjLj_Resume_or_Rethrow>
 100287c:	8809883a 	mov	r4,r17
 1002880:	1002a440 	call	1002a44 <__cxa_begin_catch>
 1002884:	10024440 	call	1002444 <_ZSt9terminatev>
 1002888:	0091d3b4 	movhi	r2,18254
 100288c:	109550c4 	addi	r2,r2,21827
 1002890:	20bff61e 	bne	r4,r2,100286c <__cxa_rethrow+0x3c>
 1002894:	88800517 	ldw	r2,20(r17)
 1002898:	0085c83a 	sub	r2,zero,r2
 100289c:	88800515 	stw	r2,20(r17)
 10028a0:	003ff306 	br	1002870 <__cxa_rethrow+0x40>

010028a4 <__cxa_throw>:
 10028a4:	00804074 	movhi	r2,257
 10028a8:	108e7c04 	addi	r2,r2,14832
 10028ac:	00c04074 	movhi	r3,257
 10028b0:	18ce7b04 	addi	r3,r3,14828
 10028b4:	12000017 	ldw	r8,0(r2)
 10028b8:	19c00017 	ldw	r7,0(r3)
 10028bc:	defffe04 	addi	sp,sp,-8
 10028c0:	213ff004 	addi	r4,r4,-64
 10028c4:	dfc00115 	stw	ra,4(sp)
 10028c8:	dc400015 	stw	r17,0(sp)
 10028cc:	0090caf4 	movhi	r2,17195
 10028d0:	108ac004 	addi	r2,r2,11008
 10028d4:	20800b15 	stw	r2,44(r4)
 10028d8:	00d1d3b4 	movhi	r3,18254
 10028dc:	18d550c4 	addi	r3,r3,21827
 10028e0:	24400b04 	addi	r17,r4,44
 10028e4:	00804034 	movhi	r2,256
 10028e8:	108a4604 	addi	r2,r2,10520
 10028ec:	21400015 	stw	r5,0(r4)
 10028f0:	21800115 	stw	r6,4(r4)
 10028f4:	22000215 	stw	r8,8(r4)
 10028f8:	21c00315 	stw	r7,12(r4)
 10028fc:	20c00c15 	stw	r3,48(r4)
 1002900:	20800d15 	stw	r2,52(r4)
 1002904:	8809883a 	mov	r4,r17
 1002908:	10032980 	call	1003298 <_Unwind_SjLj_RaiseException>
 100290c:	8809883a 	mov	r4,r17
 1002910:	1002a440 	call	1002a44 <__cxa_begin_catch>
 1002914:	10024440 	call	1002444 <_ZSt9terminatev>

01002918 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 1002918:	defffe04 	addi	sp,sp,-8
 100291c:	00800044 	movi	r2,1
 1002920:	dfc00115 	stw	ra,4(sp)
 1002924:	dc000015 	stw	r16,0(sp)
 1002928:	28fff504 	addi	r3,r5,-44
 100292c:	11001036 	bltu	r2,r4,1002970 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 1002930:	18800117 	ldw	r2,4(r3)
 1002934:	10000826 	beq	r2,zero,1002958 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 1002938:	2c000504 	addi	r16,r5,20
 100293c:	8009883a 	mov	r4,r16
 1002940:	103ee83a 	callr	r2
 1002944:	8009883a 	mov	r4,r16
 1002948:	dfc00117 	ldw	ra,4(sp)
 100294c:	dc000017 	ldw	r16,0(sp)
 1002950:	dec00204 	addi	sp,sp,8
 1002954:	10026bc1 	jmpi	10026bc <__cxa_free_exception>
 1002958:	2c000504 	addi	r16,r5,20
 100295c:	8009883a 	mov	r4,r16
 1002960:	dfc00117 	ldw	ra,4(sp)
 1002964:	dc000017 	ldw	r16,0(sp)
 1002968:	dec00204 	addi	sp,sp,8
 100296c:	10026bc1 	jmpi	10026bc <__cxa_free_exception>
 1002970:	19000317 	ldw	r4,12(r3)
 1002974:	10023a00 	call	10023a0 <_ZN10__cxxabiv111__terminateEPFvvE>

01002978 <__cxa_get_exception_ptr>:
 1002978:	20bfff17 	ldw	r2,-4(r4)
 100297c:	f800283a 	ret

01002980 <_ZSt18uncaught_exceptionv>:
 1002980:	deffff04 	addi	sp,sp,-4
 1002984:	dfc00015 	stw	ra,0(sp)
 1002988:	10023700 	call	1002370 <__cxa_get_globals>
 100298c:	10800117 	ldw	r2,4(r2)
 1002990:	1004c03a 	cmpne	r2,r2,zero
 1002994:	dfc00017 	ldw	ra,0(sp)
 1002998:	dec00104 	addi	sp,sp,4
 100299c:	f800283a 	ret

010029a0 <__cxa_end_catch>:
 10029a0:	deffff04 	addi	sp,sp,-4
 10029a4:	dfc00015 	stw	ra,0(sp)
 10029a8:	10023680 	call	1002368 <__cxa_get_globals_fast>
 10029ac:	11000017 	ldw	r4,0(r2)
 10029b0:	1007883a 	mov	r3,r2
 10029b4:	20001326 	beq	r4,zero,1002a04 <__cxa_end_catch+0x64>
 10029b8:	21400b17 	ldw	r5,44(r4)
 10029bc:	0090caf4 	movhi	r2,17195
 10029c0:	108ac004 	addi	r2,r2,11008
 10029c4:	21800c17 	ldw	r6,48(r4)
 10029c8:	28800526 	beq	r5,r2,10029e0 <__cxa_end_catch+0x40>
 10029cc:	21000b04 	addi	r4,r4,44
 10029d0:	18000015 	stw	zero,0(r3)
 10029d4:	dfc00017 	ldw	ra,0(sp)
 10029d8:	dec00104 	addi	sp,sp,4
 10029dc:	10031301 	jmpi	1003130 <_Unwind_DeleteException>
 10029e0:	0091d3b4 	movhi	r2,18254
 10029e4:	109550c4 	addi	r2,r2,21827
 10029e8:	30bff81e 	bne	r6,r2,10029cc <__cxa_end_catch+0x2c>
 10029ec:	20800517 	ldw	r2,20(r4)
 10029f0:	10000e16 	blt	r2,zero,1002a2c <__cxa_end_catch+0x8c>
 10029f4:	117fffc4 	addi	r5,r2,-1
 10029f8:	28000526 	beq	r5,zero,1002a10 <__cxa_end_catch+0x70>
 10029fc:	28000a16 	blt	r5,zero,1002a28 <__cxa_end_catch+0x88>
 1002a00:	21400515 	stw	r5,20(r4)
 1002a04:	dfc00017 	ldw	ra,0(sp)
 1002a08:	dec00104 	addi	sp,sp,4
 1002a0c:	f800283a 	ret
 1002a10:	20800417 	ldw	r2,16(r4)
 1002a14:	21000b04 	addi	r4,r4,44
 1002a18:	18800015 	stw	r2,0(r3)
 1002a1c:	dfc00017 	ldw	ra,0(sp)
 1002a20:	dec00104 	addi	sp,sp,4
 1002a24:	10031301 	jmpi	1003130 <_Unwind_DeleteException>
 1002a28:	10024440 	call	1002444 <_ZSt9terminatev>
 1002a2c:	11400044 	addi	r5,r2,1
 1002a30:	283ff31e 	bne	r5,zero,1002a00 <__cxa_end_catch+0x60>
 1002a34:	20800417 	ldw	r2,16(r4)
 1002a38:	21400515 	stw	r5,20(r4)
 1002a3c:	18800015 	stw	r2,0(r3)
 1002a40:	003ff006 	br	1002a04 <__cxa_end_catch+0x64>

01002a44 <__cxa_begin_catch>:
 1002a44:	deffee04 	addi	sp,sp,-72
 1002a48:	00804034 	movhi	r2,256
 1002a4c:	1087a204 	addi	r2,r2,7816
 1002a50:	00c04074 	movhi	r3,257
 1002a54:	18c5d204 	addi	r3,r3,5960
 1002a58:	d8800615 	stw	r2,24(sp)
 1002a5c:	d9000e15 	stw	r4,56(sp)
 1002a60:	00804034 	movhi	r2,256
 1002a64:	108ace04 	addi	r2,r2,11064
 1002a68:	d809883a 	mov	r4,sp
 1002a6c:	d8c00715 	stw	r3,28(sp)
 1002a70:	dfc01115 	stw	ra,68(sp)
 1002a74:	d8800915 	stw	r2,36(sp)
 1002a78:	df001015 	stw	fp,64(sp)
 1002a7c:	ddc00f15 	stw	r23,60(sp)
 1002a80:	dec00815 	stw	sp,32(sp)
 1002a84:	dec00a15 	stw	sp,40(sp)
 1002a88:	1002f700 	call	1002f70 <_Unwind_SjLj_Register>
 1002a8c:	10023700 	call	1002370 <__cxa_get_globals>
 1002a90:	100d883a 	mov	r6,r2
 1002a94:	d8800e17 	ldw	r2,56(sp)
 1002a98:	31c00017 	ldw	r7,0(r6)
 1002a9c:	117ff504 	addi	r5,r2,-44
 1002aa0:	28c00b17 	ldw	r3,44(r5)
 1002aa4:	0090caf4 	movhi	r2,17195
 1002aa8:	108ac004 	addi	r2,r2,11008
 1002aac:	29000c17 	ldw	r4,48(r5)
 1002ab0:	18800b26 	beq	r3,r2,1002ae0 <__cxa_begin_catch+0x9c>
 1002ab4:	38001d1e 	bne	r7,zero,1002b2c <__cxa_begin_catch+0xe8>
 1002ab8:	d8000d15 	stw	zero,52(sp)
 1002abc:	31400015 	stw	r5,0(r6)
 1002ac0:	d809883a 	mov	r4,sp
 1002ac4:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 1002ac8:	d8800d17 	ldw	r2,52(sp)
 1002acc:	dfc01117 	ldw	ra,68(sp)
 1002ad0:	df001017 	ldw	fp,64(sp)
 1002ad4:	ddc00f17 	ldw	r23,60(sp)
 1002ad8:	dec01204 	addi	sp,sp,72
 1002adc:	f800283a 	ret
 1002ae0:	0091d3b4 	movhi	r2,18254
 1002ae4:	109550c4 	addi	r2,r2,21827
 1002ae8:	20bff21e 	bne	r4,r2,1002ab4 <__cxa_begin_catch+0x70>
 1002aec:	28c00517 	ldw	r3,20(r5)
 1002af0:	18000b16 	blt	r3,zero,1002b20 <__cxa_begin_catch+0xdc>
 1002af4:	18800044 	addi	r2,r3,1
 1002af8:	28800515 	stw	r2,20(r5)
 1002afc:	30800117 	ldw	r2,4(r6)
 1002b00:	10bfffc4 	addi	r2,r2,-1
 1002b04:	30800115 	stw	r2,4(r6)
 1002b08:	39400226 	beq	r7,r5,1002b14 <__cxa_begin_catch+0xd0>
 1002b0c:	29c00415 	stw	r7,16(r5)
 1002b10:	31400015 	stw	r5,0(r6)
 1002b14:	29400a17 	ldw	r5,40(r5)
 1002b18:	d9400d15 	stw	r5,52(sp)
 1002b1c:	003fe806 	br	1002ac0 <__cxa_begin_catch+0x7c>
 1002b20:	00800044 	movi	r2,1
 1002b24:	10c5c83a 	sub	r2,r2,r3
 1002b28:	003ff306 	br	1002af8 <__cxa_begin_catch+0xb4>
 1002b2c:	00800044 	movi	r2,1
 1002b30:	d8800115 	stw	r2,4(sp)
 1002b34:	10024440 	call	1002444 <_ZSt9terminatev>
 1002b38:	d8800317 	ldw	r2,12(sp)
 1002b3c:	00ffffc4 	movi	r3,-1
 1002b40:	d9000217 	ldw	r4,8(sp)
 1002b44:	10c00226 	beq	r2,r3,1002b50 <__cxa_begin_catch+0x10c>
 1002b48:	d8c00115 	stw	r3,4(sp)
 1002b4c:	100323c0 	call	100323c <_Unwind_SjLj_Resume>
 1002b50:	00bfffc4 	movi	r2,-1
 1002b54:	d8800115 	stw	r2,4(sp)
 1002b58:	1001d080 	call	1001d08 <__cxa_call_unexpected>

01002b5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 1002b5c:	20c00017 	ldw	r3,0(r4)
 1002b60:	defffa04 	addi	sp,sp,-24
 1002b64:	dc000415 	stw	r16,16(sp)
 1002b68:	1a000617 	ldw	r8,24(r3)
 1002b6c:	3021883a 	mov	r16,r6
 1002b70:	31800017 	ldw	r6,0(r6)
 1002b74:	00800404 	movi	r2,16
 1002b78:	dfc00515 	stw	ra,20(sp)
 1002b7c:	d8800215 	stw	r2,8(sp)
 1002b80:	d8000015 	stw	zero,0(sp)
 1002b84:	d8000115 	stw	zero,4(sp)
 1002b88:	d8000315 	stw	zero,12(sp)
 1002b8c:	d80f883a 	mov	r7,sp
 1002b90:	403ee83a 	callr	r8
 1002b94:	d8800117 	ldw	r2,4(sp)
 1002b98:	00c00184 	movi	r3,6
 1002b9c:	0009883a 	mov	r4,zero
 1002ba0:	1080018c 	andi	r2,r2,6
 1002ba4:	10c0031e 	bne	r2,r3,1002bb4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 1002ba8:	d8800017 	ldw	r2,0(sp)
 1002bac:	01000044 	movi	r4,1
 1002bb0:	80800015 	stw	r2,0(r16)
 1002bb4:	2005883a 	mov	r2,r4
 1002bb8:	dfc00517 	ldw	ra,20(sp)
 1002bbc:	dc000417 	ldw	r16,16(sp)
 1002bc0:	dec00604 	addi	sp,sp,24
 1002bc4:	f800283a 	ret

01002bc8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 1002bc8:	d8800017 	ldw	r2,0(sp)
 1002bcc:	00c00184 	movi	r3,6
 1002bd0:	1180021e 	bne	r2,r6,1002bdc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 1002bd4:	1805883a 	mov	r2,r3
 1002bd8:	f800283a 	ret
 1002bdc:	00c00044 	movi	r3,1
 1002be0:	1805883a 	mov	r2,r3
 1002be4:	f800283a 	ret

01002be8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 1002be8:	defffe04 	addi	sp,sp,-8
 1002bec:	00804074 	movhi	r2,257
 1002bf0:	1086ad04 	addi	r2,r2,6836
 1002bf4:	dc400015 	stw	r17,0(sp)
 1002bf8:	20800015 	stw	r2,0(r4)
 1002bfc:	2023883a 	mov	r17,r4
 1002c00:	dfc00115 	stw	ra,4(sp)
 1002c04:	1002f280 	call	1002f28 <_ZNSt9type_infoD2Ev>
 1002c08:	8809883a 	mov	r4,r17
 1002c0c:	dfc00117 	ldw	ra,4(sp)
 1002c10:	dc400017 	ldw	r17,0(sp)
 1002c14:	dec00204 	addi	sp,sp,8
 1002c18:	10017701 	jmpi	1001770 <_ZdlPv>

01002c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 1002c1c:	00804074 	movhi	r2,257
 1002c20:	1086ad04 	addi	r2,r2,6836
 1002c24:	20800015 	stw	r2,0(r4)
 1002c28:	1002f281 	jmpi	1002f28 <_ZNSt9type_infoD2Ev>

01002c2c <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 1002c2c:	00804074 	movhi	r2,257
 1002c30:	1086ad04 	addi	r2,r2,6836
 1002c34:	20800015 	stw	r2,0(r4)
 1002c38:	1002f281 	jmpi	1002f28 <_ZNSt9type_infoD2Ev>

01002c3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 1002c3c:	2811883a 	mov	r8,r5
 1002c40:	20c00117 	ldw	r3,4(r4)
 1002c44:	40800117 	ldw	r2,4(r8)
 1002c48:	deffff04 	addi	sp,sp,-4
 1002c4c:	dfc00015 	stw	ra,0(sp)
 1002c50:	200b883a 	mov	r5,r4
 1002c54:	02400044 	movi	r9,1
 1002c58:	18800426 	beq	r3,r2,1002c6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 1002c5c:	008000c4 	movi	r2,3
 1002c60:	4009883a 	mov	r4,r8
 1002c64:	0013883a 	mov	r9,zero
 1002c68:	11c0042e 	bgeu	r2,r7,1002c7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 1002c6c:	4805883a 	mov	r2,r9
 1002c70:	dfc00017 	ldw	ra,0(sp)
 1002c74:	dec00104 	addi	sp,sp,4
 1002c78:	f800283a 	ret
 1002c7c:	40800017 	ldw	r2,0(r8)
 1002c80:	10c00517 	ldw	r3,20(r2)
 1002c84:	183ee83a 	callr	r3
 1002c88:	12403fcc 	andi	r9,r2,255
 1002c8c:	4805883a 	mov	r2,r9
 1002c90:	dfc00017 	ldw	ra,0(sp)
 1002c94:	dec00104 	addi	sp,sp,4
 1002c98:	f800283a 	ret

01002c9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 1002c9c:	20c00117 	ldw	r3,4(r4)
 1002ca0:	28800117 	ldw	r2,4(r5)
 1002ca4:	0009883a 	mov	r4,zero
 1002ca8:	1880061e 	bne	r3,r2,1002cc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 1002cac:	00800184 	movi	r2,6
 1002cb0:	38800115 	stw	r2,4(r7)
 1002cb4:	00800204 	movi	r2,8
 1002cb8:	39800015 	stw	r6,0(r7)
 1002cbc:	38800315 	stw	r2,12(r7)
 1002cc0:	01000044 	movi	r4,1
 1002cc4:	2005883a 	mov	r2,r4
 1002cc8:	f800283a 	ret

01002ccc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 1002ccc:	da000017 	ldw	r8,0(sp)
 1002cd0:	d8800217 	ldw	r2,8(sp)
 1002cd4:	d9400317 	ldw	r5,12(sp)
 1002cd8:	40800926 	beq	r8,r2,1002d00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 1002cdc:	21000117 	ldw	r4,4(r4)
 1002ce0:	38800117 	ldw	r2,4(r7)
 1002ce4:	2080041e 	bne	r4,r2,1002cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 1002ce8:	00800044 	movi	r2,1
 1002cec:	28800315 	stw	r2,12(r5)
 1002cf0:	2a000015 	stw	r8,0(r5)
 1002cf4:	29800115 	stw	r6,4(r5)
 1002cf8:	0005883a 	mov	r2,zero
 1002cfc:	f800283a 	ret
 1002d00:	d8800117 	ldw	r2,4(sp)
 1002d04:	21000117 	ldw	r4,4(r4)
 1002d08:	10c00117 	ldw	r3,4(r2)
 1002d0c:	20fff41e 	bne	r4,r3,1002ce0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 1002d10:	29800215 	stw	r6,8(r5)
 1002d14:	003ff806 	br	1002cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

01002d18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 1002d18:	defffb04 	addi	sp,sp,-20
 1002d1c:	dd400315 	stw	r21,12(sp)
 1002d20:	dcc00215 	stw	r19,8(sp)
 1002d24:	dc400115 	stw	r17,4(sp)
 1002d28:	dc000015 	stw	r16,0(sp)
 1002d2c:	2823883a 	mov	r17,r5
 1002d30:	3027883a 	mov	r19,r6
 1002d34:	382b883a 	mov	r21,r7
 1002d38:	dfc00415 	stw	ra,16(sp)
 1002d3c:	2021883a 	mov	r16,r4
 1002d40:	1002c9c0 	call	1002c9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 1002d44:	10803fcc 	andi	r2,r2,255
 1002d48:	880b883a 	mov	r5,r17
 1002d4c:	980d883a 	mov	r6,r19
 1002d50:	a80f883a 	mov	r7,r21
 1002d54:	00c00044 	movi	r3,1
 1002d58:	1000051e 	bne	r2,zero,1002d70 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 1002d5c:	81000217 	ldw	r4,8(r16)
 1002d60:	20800017 	ldw	r2,0(r4)
 1002d64:	10c00617 	ldw	r3,24(r2)
 1002d68:	183ee83a 	callr	r3
 1002d6c:	10c03fcc 	andi	r3,r2,255
 1002d70:	1805883a 	mov	r2,r3
 1002d74:	dfc00417 	ldw	ra,16(sp)
 1002d78:	dd400317 	ldw	r21,12(sp)
 1002d7c:	dcc00217 	ldw	r19,8(sp)
 1002d80:	dc400117 	ldw	r17,4(sp)
 1002d84:	dc000017 	ldw	r16,0(sp)
 1002d88:	dec00504 	addi	sp,sp,20
 1002d8c:	f800283a 	ret

01002d90 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 1002d90:	defffe04 	addi	sp,sp,-8
 1002d94:	00804074 	movhi	r2,257
 1002d98:	1086c404 	addi	r2,r2,6928
 1002d9c:	dc400015 	stw	r17,0(sp)
 1002da0:	20800015 	stw	r2,0(r4)
 1002da4:	2023883a 	mov	r17,r4
 1002da8:	dfc00115 	stw	ra,4(sp)
 1002dac:	1002c2c0 	call	1002c2c <_ZN10__cxxabiv117__class_type_infoD2Ev>
 1002db0:	8809883a 	mov	r4,r17
 1002db4:	dfc00117 	ldw	ra,4(sp)
 1002db8:	dc400017 	ldw	r17,0(sp)
 1002dbc:	dec00204 	addi	sp,sp,8
 1002dc0:	10017701 	jmpi	1001770 <_ZdlPv>

01002dc4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 1002dc4:	00804074 	movhi	r2,257
 1002dc8:	1086c404 	addi	r2,r2,6928
 1002dcc:	20800015 	stw	r2,0(r4)
 1002dd0:	1002c2c1 	jmpi	1002c2c <_ZN10__cxxabiv117__class_type_infoD2Ev>

01002dd4 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 1002dd4:	00804074 	movhi	r2,257
 1002dd8:	1086c404 	addi	r2,r2,6928
 1002ddc:	20800015 	stw	r2,0(r4)
 1002de0:	1002c2c1 	jmpi	1002c2c <_ZN10__cxxabiv117__class_type_infoD2Ev>

01002de4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 1002de4:	da400017 	ldw	r9,0(sp)
 1002de8:	2011883a 	mov	r8,r4
 1002dec:	49800526 	beq	r9,r6,1002e04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 1002df0:	41000217 	ldw	r4,8(r8)
 1002df4:	20800017 	ldw	r2,0(r4)
 1002df8:	da400015 	stw	r9,0(sp)
 1002dfc:	10c00817 	ldw	r3,32(r2)
 1002e00:	1800683a 	jmp	r3
 1002e04:	39000117 	ldw	r4,4(r7)
 1002e08:	40c00117 	ldw	r3,4(r8)
 1002e0c:	00800184 	movi	r2,6
 1002e10:	193ff71e 	bne	r3,r4,1002df0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 1002e14:	f800283a 	ret

01002e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 1002e18:	20c00117 	ldw	r3,4(r4)
 1002e1c:	38800117 	ldw	r2,4(r7)
 1002e20:	defffb04 	addi	sp,sp,-20
 1002e24:	dfc00415 	stw	ra,16(sp)
 1002e28:	da000517 	ldw	r8,20(sp)
 1002e2c:	dac00617 	ldw	r11,24(sp)
 1002e30:	da400717 	ldw	r9,28(sp)
 1002e34:	da800817 	ldw	r10,32(sp)
 1002e38:	18800c1e 	bne	r3,r2,1002e6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 1002e3c:	51800115 	stw	r6,4(r10)
 1002e40:	52000015 	stw	r8,0(r10)
 1002e44:	28001c16 	blt	r5,zero,1002eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 1002e48:	4145883a 	add	r2,r8,r5
 1002e4c:	48801e26 	beq	r9,r2,1002ec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 1002e50:	00800044 	movi	r2,1
 1002e54:	0007883a 	mov	r3,zero
 1002e58:	50800315 	stw	r2,12(r10)
 1002e5c:	1805883a 	mov	r2,r3
 1002e60:	dfc00417 	ldw	ra,16(sp)
 1002e64:	dec00504 	addi	sp,sp,20
 1002e68:	f800283a 	ret
 1002e6c:	42400d26 	beq	r8,r9,1002ea4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 1002e70:	21000217 	ldw	r4,8(r4)
 1002e74:	20800017 	ldw	r2,0(r4)
 1002e78:	da000015 	stw	r8,0(sp)
 1002e7c:	dac00115 	stw	r11,4(sp)
 1002e80:	da400215 	stw	r9,8(sp)
 1002e84:	da800315 	stw	r10,12(sp)
 1002e88:	10c00717 	ldw	r3,28(r2)
 1002e8c:	183ee83a 	callr	r3
 1002e90:	10c03fcc 	andi	r3,r2,255
 1002e94:	1805883a 	mov	r2,r3
 1002e98:	dfc00417 	ldw	ra,16(sp)
 1002e9c:	dec00504 	addi	sp,sp,20
 1002ea0:	f800283a 	ret
 1002ea4:	58800117 	ldw	r2,4(r11)
 1002ea8:	18bff11e 	bne	r3,r2,1002e70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 1002eac:	0007883a 	mov	r3,zero
 1002eb0:	51800215 	stw	r6,8(r10)
 1002eb4:	003fe906 	br	1002e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1002eb8:	00bfff84 	movi	r2,-2
 1002ebc:	28800426 	beq	r5,r2,1002ed0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 1002ec0:	0007883a 	mov	r3,zero
 1002ec4:	003fe506 	br	1002e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1002ec8:	00800184 	movi	r2,6
 1002ecc:	003fe106 	br	1002e54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 1002ed0:	00800044 	movi	r2,1
 1002ed4:	0007883a 	mov	r3,zero
 1002ed8:	50800315 	stw	r2,12(r10)
 1002edc:	003fdf06 	br	1002e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

01002ee0 <_ZNKSt9type_info14__is_pointer_pEv>:
 1002ee0:	0005883a 	mov	r2,zero
 1002ee4:	f800283a 	ret

01002ee8 <_ZNKSt9type_info15__is_function_pEv>:
 1002ee8:	0005883a 	mov	r2,zero
 1002eec:	f800283a 	ret

01002ef0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 1002ef0:	20c00117 	ldw	r3,4(r4)
 1002ef4:	28800117 	ldw	r2,4(r5)
 1002ef8:	1885003a 	cmpeq	r2,r3,r2
 1002efc:	f800283a 	ret

01002f00 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 1002f00:	0005883a 	mov	r2,zero
 1002f04:	f800283a 	ret

01002f08 <_ZNSt9type_infoD0Ev>:
 1002f08:	00804074 	movhi	r2,257
 1002f0c:	1086dc04 	addi	r2,r2,7024
 1002f10:	20800015 	stw	r2,0(r4)
 1002f14:	10017701 	jmpi	1001770 <_ZdlPv>

01002f18 <_ZNSt9type_infoD1Ev>:
 1002f18:	00804074 	movhi	r2,257
 1002f1c:	1086dc04 	addi	r2,r2,7024
 1002f20:	20800015 	stw	r2,0(r4)
 1002f24:	f800283a 	ret

01002f28 <_ZNSt9type_infoD2Ev>:
 1002f28:	00804074 	movhi	r2,257
 1002f2c:	1086dc04 	addi	r2,r2,7024
 1002f30:	20800015 	stw	r2,0(r4)
 1002f34:	f800283a 	ret

01002f38 <__mulsi3>:
 1002f38:	20000a26 	beq	r4,zero,1002f64 <__mulsi3+0x2c>
 1002f3c:	0007883a 	mov	r3,zero
 1002f40:	2080004c 	andi	r2,r4,1
 1002f44:	1005003a 	cmpeq	r2,r2,zero
 1002f48:	2008d07a 	srli	r4,r4,1
 1002f4c:	1000011e 	bne	r2,zero,1002f54 <__mulsi3+0x1c>
 1002f50:	1947883a 	add	r3,r3,r5
 1002f54:	294b883a 	add	r5,r5,r5
 1002f58:	203ff91e 	bne	r4,zero,1002f40 <__mulsi3+0x8>
 1002f5c:	1805883a 	mov	r2,r3
 1002f60:	f800283a 	ret
 1002f64:	0007883a 	mov	r3,zero
 1002f68:	1805883a 	mov	r2,r3
 1002f6c:	f800283a 	ret

01002f70 <_Unwind_SjLj_Register>:
 1002f70:	d0a6ef17 	ldw	r2,-25668(gp)
 1002f74:	20800015 	stw	r2,0(r4)
 1002f78:	d126ef15 	stw	r4,-25668(gp)
 1002f7c:	f800283a 	ret

01002f80 <_Unwind_SjLj_Unregister>:
 1002f80:	20800017 	ldw	r2,0(r4)
 1002f84:	d0a6ef15 	stw	r2,-25668(gp)
 1002f88:	f800283a 	ret

01002f8c <_Unwind_GetGR>:
 1002f8c:	20800017 	ldw	r2,0(r4)
 1002f90:	294b883a 	add	r5,r5,r5
 1002f94:	294b883a 	add	r5,r5,r5
 1002f98:	288b883a 	add	r5,r5,r2
 1002f9c:	28800217 	ldw	r2,8(r5)
 1002fa0:	f800283a 	ret

01002fa4 <_Unwind_GetCFA>:
 1002fa4:	21000017 	ldw	r4,0(r4)
 1002fa8:	0005883a 	mov	r2,zero
 1002fac:	20000126 	beq	r4,zero,1002fb4 <_Unwind_GetCFA+0x10>
 1002fb0:	20800a17 	ldw	r2,40(r4)
 1002fb4:	f800283a 	ret

01002fb8 <_Unwind_SetGR>:
 1002fb8:	20800017 	ldw	r2,0(r4)
 1002fbc:	294b883a 	add	r5,r5,r5
 1002fc0:	294b883a 	add	r5,r5,r5
 1002fc4:	288b883a 	add	r5,r5,r2
 1002fc8:	29800215 	stw	r6,8(r5)
 1002fcc:	f800283a 	ret

01002fd0 <_Unwind_GetIP>:
 1002fd0:	20c00017 	ldw	r3,0(r4)
 1002fd4:	18800117 	ldw	r2,4(r3)
 1002fd8:	10800044 	addi	r2,r2,1
 1002fdc:	f800283a 	ret

01002fe0 <_Unwind_GetIPInfo>:
 1002fe0:	20c00017 	ldw	r3,0(r4)
 1002fe4:	28000015 	stw	zero,0(r5)
 1002fe8:	18800117 	ldw	r2,4(r3)
 1002fec:	10800044 	addi	r2,r2,1
 1002ff0:	f800283a 	ret

01002ff4 <_Unwind_SetIP>:
 1002ff4:	20800017 	ldw	r2,0(r4)
 1002ff8:	297fffc4 	addi	r5,r5,-1
 1002ffc:	11400115 	stw	r5,4(r2)
 1003000:	f800283a 	ret

01003004 <_Unwind_GetLanguageSpecificData>:
 1003004:	20c00017 	ldw	r3,0(r4)
 1003008:	18800717 	ldw	r2,28(r3)
 100300c:	f800283a 	ret

01003010 <_Unwind_GetRegionStart>:
 1003010:	0005883a 	mov	r2,zero
 1003014:	f800283a 	ret

01003018 <_Unwind_FindEnclosingFunction>:
 1003018:	0005883a 	mov	r2,zero
 100301c:	f800283a 	ret

01003020 <_Unwind_GetDataRelBase>:
 1003020:	0005883a 	mov	r2,zero
 1003024:	f800283a 	ret

01003028 <_Unwind_GetTextRelBase>:
 1003028:	0005883a 	mov	r2,zero
 100302c:	f800283a 	ret

01003030 <_Unwind_ForcedUnwind_Phase2>:
 1003030:	defff604 	addi	sp,sp,-40
 1003034:	dd400815 	stw	r21,32(sp)
 1003038:	dd000715 	stw	r20,28(sp)
 100303c:	25400317 	ldw	r21,12(r4)
 1003040:	25000417 	ldw	r20,16(r4)
 1003044:	28800017 	ldw	r2,0(r5)
 1003048:	dc800515 	stw	r18,20(sp)
 100304c:	dc000315 	stw	r16,12(sp)
 1003050:	2825883a 	mov	r18,r5
 1003054:	2021883a 	mov	r16,r4
 1003058:	dfc00915 	stw	ra,36(sp)
 100305c:	dcc00615 	stw	r19,24(sp)
 1003060:	dc400415 	stw	r17,16(sp)
 1003064:	00001406 	br	10030b8 <_Unwind_ForcedUnwind_Phase2+0x88>
 1003068:	00800144 	movi	r2,5
 100306c:	88802626 	beq	r17,r2,1003108 <_Unwind_ForcedUnwind_Phase2+0xd8>
 1003070:	98000c26 	beq	r19,zero,10030a4 <_Unwind_ForcedUnwind_Phase2+0x74>
 1003074:	82000017 	ldw	r8,0(r16)
 1003078:	dc000015 	stw	r16,0(sp)
 100307c:	dc800115 	stw	r18,4(sp)
 1003080:	82400117 	ldw	r9,4(r16)
 1003084:	400d883a 	mov	r6,r8
 1003088:	480f883a 	mov	r7,r9
 100308c:	983ee83a 	callr	r19
 1003090:	1023883a 	mov	r17,r2
 1003094:	008001c4 	movi	r2,7
 1003098:	88801b26 	beq	r17,r2,1003108 <_Unwind_ForcedUnwind_Phase2+0xd8>
 100309c:	00800204 	movi	r2,8
 10030a0:	8880181e 	bne	r17,r2,1003104 <_Unwind_ForcedUnwind_Phase2+0xd4>
 10030a4:	91000017 	ldw	r4,0(r18)
 10030a8:	1002f800 	call	1002f80 <_Unwind_SjLj_Unregister>
 10030ac:	90800017 	ldw	r2,0(r18)
 10030b0:	10800017 	ldw	r2,0(r2)
 10030b4:	90800015 	stw	r2,0(r18)
 10030b8:	01400684 	movi	r5,26
 10030bc:	04400144 	movi	r17,5
 10030c0:	0027883a 	mov	r19,zero
 10030c4:	10000326 	beq	r2,zero,10030d4 <_Unwind_ForcedUnwind_Phase2+0xa4>
 10030c8:	14c00617 	ldw	r19,24(r2)
 10030cc:	0023883a 	mov	r17,zero
 10030d0:	01400284 	movi	r5,10
 10030d4:	dc000015 	stw	r16,0(sp)
 10030d8:	dc800115 	stw	r18,4(sp)
 10030dc:	80800017 	ldw	r2,0(r16)
 10030e0:	dd000215 	stw	r20,8(sp)
 10030e4:	80c00117 	ldw	r3,4(r16)
 10030e8:	01000044 	movi	r4,1
 10030ec:	100d883a 	mov	r6,r2
 10030f0:	180f883a 	mov	r7,r3
 10030f4:	a83ee83a 	callr	r21
 10030f8:	01400284 	movi	r5,10
 10030fc:	01000044 	movi	r4,1
 1003100:	103fd926 	beq	r2,zero,1003068 <_Unwind_ForcedUnwind_Phase2+0x38>
 1003104:	04400084 	movi	r17,2
 1003108:	8805883a 	mov	r2,r17
 100310c:	dfc00917 	ldw	ra,36(sp)
 1003110:	dd400817 	ldw	r21,32(sp)
 1003114:	dd000717 	ldw	r20,28(sp)
 1003118:	dcc00617 	ldw	r19,24(sp)
 100311c:	dc800517 	ldw	r18,20(sp)
 1003120:	dc400417 	ldw	r17,16(sp)
 1003124:	dc000317 	ldw	r16,12(sp)
 1003128:	dec00a04 	addi	sp,sp,40
 100312c:	f800283a 	ret

01003130 <_Unwind_DeleteException>:
 1003130:	20800217 	ldw	r2,8(r4)
 1003134:	200b883a 	mov	r5,r4
 1003138:	01000044 	movi	r4,1
 100313c:	10000126 	beq	r2,zero,1003144 <_Unwind_DeleteException+0x14>
 1003140:	1000683a 	jmp	r2
 1003144:	f800283a 	ret

01003148 <_Unwind_RaiseException_Phase2>:
 1003148:	defffa04 	addi	sp,sp,-24
 100314c:	dc800415 	stw	r18,16(sp)
 1003150:	2825883a 	mov	r18,r5
 1003154:	29400017 	ldw	r5,0(r5)
 1003158:	dc400315 	stw	r17,12(sp)
 100315c:	dfc00515 	stw	ra,20(sp)
 1003160:	dc000215 	stw	r16,8(sp)
 1003164:	2023883a 	mov	r17,r4
 1003168:	28001b26 	beq	r5,zero,10031d8 <_Unwind_RaiseException_Phase2+0x90>
 100316c:	88800417 	ldw	r2,16(r17)
 1003170:	0007883a 	mov	r3,zero
 1003174:	2a000617 	ldw	r8,24(r5)
 1003178:	28a1003a 	cmpeq	r16,r5,r2
 100317c:	802090ba 	slli	r16,r16,2
 1003180:	18001b1e 	bne	r3,zero,10031f0 <_Unwind_RaiseException_Phase2+0xa8>
 1003184:	40000e26 	beq	r8,zero,10031c0 <_Unwind_RaiseException_Phase2+0x78>
 1003188:	88800017 	ldw	r2,0(r17)
 100318c:	dc400015 	stw	r17,0(sp)
 1003190:	dc800115 	stw	r18,4(sp)
 1003194:	88c00117 	ldw	r3,4(r17)
 1003198:	01000044 	movi	r4,1
 100319c:	81400094 	ori	r5,r16,2
 10031a0:	180f883a 	mov	r7,r3
 10031a4:	100d883a 	mov	r6,r2
 10031a8:	403ee83a 	callr	r8
 10031ac:	1007883a 	mov	r3,r2
 10031b0:	008001c4 	movi	r2,7
 10031b4:	18800f26 	beq	r3,r2,10031f4 <_Unwind_RaiseException_Phase2+0xac>
 10031b8:	00800204 	movi	r2,8
 10031bc:	18800c1e 	bne	r3,r2,10031f0 <_Unwind_RaiseException_Phase2+0xa8>
 10031c0:	8000131e 	bne	r16,zero,1003210 <_Unwind_RaiseException_Phase2+0xc8>
 10031c4:	91400017 	ldw	r5,0(r18)
 10031c8:	28800017 	ldw	r2,0(r5)
 10031cc:	100b883a 	mov	r5,r2
 10031d0:	90800015 	stw	r2,0(r18)
 10031d4:	283fe51e 	bne	r5,zero,100316c <_Unwind_RaiseException_Phase2+0x24>
 10031d8:	88800417 	ldw	r2,16(r17)
 10031dc:	00c00144 	movi	r3,5
 10031e0:	0011883a 	mov	r8,zero
 10031e4:	28a1003a 	cmpeq	r16,r5,r2
 10031e8:	802090ba 	slli	r16,r16,2
 10031ec:	183fe526 	beq	r3,zero,1003184 <_Unwind_RaiseException_Phase2+0x3c>
 10031f0:	00c00084 	movi	r3,2
 10031f4:	1805883a 	mov	r2,r3
 10031f8:	dfc00517 	ldw	ra,20(sp)
 10031fc:	dc800417 	ldw	r18,16(sp)
 1003200:	dc400317 	ldw	r17,12(sp)
 1003204:	dc000217 	ldw	r16,8(sp)
 1003208:	dec00604 	addi	sp,sp,24
 100320c:	f800283a 	ret
 1003210:	10034b80 	call	10034b8 <abort>

01003214 <uw_install_context>:
 1003214:	28800017 	ldw	r2,0(r5)
 1003218:	deffff04 	addi	sp,sp,-4
 100321c:	df000015 	stw	fp,0(sp)
 1003220:	10c00804 	addi	r3,r2,32
 1003224:	d839883a 	mov	fp,sp
 1003228:	d0a6ef15 	stw	r2,-25668(gp)
 100322c:	19000117 	ldw	r4,4(r3)
 1003230:	1f000017 	ldw	fp,0(r3)
 1003234:	1ec00217 	ldw	sp,8(r3)
 1003238:	2000683a 	jmp	r4

0100323c <_Unwind_SjLj_Resume>:
 100323c:	d0e6ef17 	ldw	r3,-25668(gp)
 1003240:	20800317 	ldw	r2,12(r4)
 1003244:	defffc04 	addi	sp,sp,-16
 1003248:	dfc00315 	stw	ra,12(sp)
 100324c:	dc000215 	stw	r16,8(sp)
 1003250:	d8c00015 	stw	r3,0(sp)
 1003254:	d8c00115 	stw	r3,4(sp)
 1003258:	1000071e 	bne	r2,zero,1003278 <_Unwind_SjLj_Resume+0x3c>
 100325c:	dc000104 	addi	r16,sp,4
 1003260:	800b883a 	mov	r5,r16
 1003264:	10031480 	call	1003148 <_Unwind_RaiseException_Phase2>
 1003268:	1007883a 	mov	r3,r2
 100326c:	008001c4 	movi	r2,7
 1003270:	18800626 	beq	r3,r2,100328c <_Unwind_SjLj_Resume+0x50>
 1003274:	10034b80 	call	10034b8 <abort>
 1003278:	dc000104 	addi	r16,sp,4
 100327c:	800b883a 	mov	r5,r16
 1003280:	10030300 	call	1003030 <_Unwind_ForcedUnwind_Phase2>
 1003284:	1007883a 	mov	r3,r2
 1003288:	003ff806 	br	100326c <_Unwind_SjLj_Resume+0x30>
 100328c:	800b883a 	mov	r5,r16
 1003290:	d809883a 	mov	r4,sp
 1003294:	10032140 	call	1003214 <uw_install_context>

01003298 <_Unwind_SjLj_RaiseException>:
 1003298:	d0a6ef17 	ldw	r2,-25668(gp)
 100329c:	defff804 	addi	sp,sp,-32
 10032a0:	dc000415 	stw	r16,16(sp)
 10032a4:	dfc00715 	stw	ra,28(sp)
 10032a8:	dc800615 	stw	r18,24(sp)
 10032ac:	dc400515 	stw	r17,20(sp)
 10032b0:	2021883a 	mov	r16,r4
 10032b4:	d8800215 	stw	r2,8(sp)
 10032b8:	d8800315 	stw	r2,12(sp)
 10032bc:	10001626 	beq	r2,zero,1003318 <_Unwind_SjLj_RaiseException+0x80>
 10032c0:	dc400304 	addi	r17,sp,12
 10032c4:	04800184 	movi	r18,6
 10032c8:	00000106 	br	10032d0 <_Unwind_SjLj_RaiseException+0x38>
 10032cc:	d8800315 	stw	r2,12(sp)
 10032d0:	12000617 	ldw	r8,24(r2)
 10032d4:	40000d26 	beq	r8,zero,100330c <_Unwind_SjLj_RaiseException+0x74>
 10032d8:	80800017 	ldw	r2,0(r16)
 10032dc:	dc000015 	stw	r16,0(sp)
 10032e0:	80c00117 	ldw	r3,4(r16)
 10032e4:	01000044 	movi	r4,1
 10032e8:	dc400115 	stw	r17,4(sp)
 10032ec:	180f883a 	mov	r7,r3
 10032f0:	200b883a 	mov	r5,r4
 10032f4:	100d883a 	mov	r6,r2
 10032f8:	403ee83a 	callr	r8
 10032fc:	1007883a 	mov	r3,r2
 1003300:	14800d26 	beq	r2,r18,1003338 <_Unwind_SjLj_RaiseException+0xa0>
 1003304:	00800204 	movi	r2,8
 1003308:	1880191e 	bne	r3,r2,1003370 <_Unwind_SjLj_RaiseException+0xd8>
 100330c:	d8800317 	ldw	r2,12(sp)
 1003310:	10800017 	ldw	r2,0(r2)
 1003314:	103fed1e 	bne	r2,zero,10032cc <_Unwind_SjLj_RaiseException+0x34>
 1003318:	00c00144 	movi	r3,5
 100331c:	1805883a 	mov	r2,r3
 1003320:	dfc00717 	ldw	ra,28(sp)
 1003324:	dc800617 	ldw	r18,24(sp)
 1003328:	dc400517 	ldw	r17,20(sp)
 100332c:	dc000417 	ldw	r16,16(sp)
 1003330:	dec00804 	addi	sp,sp,32
 1003334:	f800283a 	ret
 1003338:	d8800317 	ldw	r2,12(sp)
 100333c:	80000315 	stw	zero,12(r16)
 1003340:	8009883a 	mov	r4,r16
 1003344:	80800415 	stw	r2,16(r16)
 1003348:	d8800217 	ldw	r2,8(sp)
 100334c:	880b883a 	mov	r5,r17
 1003350:	d8800315 	stw	r2,12(sp)
 1003354:	10031480 	call	1003148 <_Unwind_RaiseException_Phase2>
 1003358:	1007883a 	mov	r3,r2
 100335c:	008001c4 	movi	r2,7
 1003360:	18bfee1e 	bne	r3,r2,100331c <_Unwind_SjLj_RaiseException+0x84>
 1003364:	880b883a 	mov	r5,r17
 1003368:	d9000204 	addi	r4,sp,8
 100336c:	10032140 	call	1003214 <uw_install_context>
 1003370:	00c000c4 	movi	r3,3
 1003374:	1805883a 	mov	r2,r3
 1003378:	dfc00717 	ldw	ra,28(sp)
 100337c:	dc800617 	ldw	r18,24(sp)
 1003380:	dc400517 	ldw	r17,20(sp)
 1003384:	dc000417 	ldw	r16,16(sp)
 1003388:	dec00804 	addi	sp,sp,32
 100338c:	f800283a 	ret

01003390 <_Unwind_SjLj_ForcedUnwind>:
 1003390:	defffc04 	addi	sp,sp,-16
 1003394:	d0a6ef17 	ldw	r2,-25668(gp)
 1003398:	dc000215 	stw	r16,8(sp)
 100339c:	dc000104 	addi	r16,sp,4
 10033a0:	21400315 	stw	r5,12(r4)
 10033a4:	21800415 	stw	r6,16(r4)
 10033a8:	800b883a 	mov	r5,r16
 10033ac:	dfc00315 	stw	ra,12(sp)
 10033b0:	d8800015 	stw	r2,0(sp)
 10033b4:	d8800115 	stw	r2,4(sp)
 10033b8:	10030300 	call	1003030 <_Unwind_ForcedUnwind_Phase2>
 10033bc:	00c001c4 	movi	r3,7
 10033c0:	10c00426 	beq	r2,r3,10033d4 <_Unwind_SjLj_ForcedUnwind+0x44>
 10033c4:	dfc00317 	ldw	ra,12(sp)
 10033c8:	dc000217 	ldw	r16,8(sp)
 10033cc:	dec00404 	addi	sp,sp,16
 10033d0:	f800283a 	ret
 10033d4:	800b883a 	mov	r5,r16
 10033d8:	d809883a 	mov	r4,sp
 10033dc:	10032140 	call	1003214 <uw_install_context>

010033e0 <_Unwind_Backtrace>:
 10033e0:	d0a6ef17 	ldw	r2,-25668(gp)
 10033e4:	defffa04 	addi	sp,sp,-24
 10033e8:	dcc00415 	stw	r19,16(sp)
 10033ec:	dc800315 	stw	r18,12(sp)
 10033f0:	dc400215 	stw	r17,8(sp)
 10033f4:	2025883a 	mov	r18,r4
 10033f8:	2823883a 	mov	r17,r5
 10033fc:	04c00144 	movi	r19,5
 1003400:	dfc00515 	stw	ra,20(sp)
 1003404:	dc000115 	stw	r16,4(sp)
 1003408:	d8800015 	stw	r2,0(sp)
 100340c:	00000406 	br	1003420 <_Unwind_Backtrace+0x40>
 1003410:	84c00b26 	beq	r16,r19,1003440 <_Unwind_Backtrace+0x60>
 1003414:	d8800017 	ldw	r2,0(sp)
 1003418:	10800017 	ldw	r2,0(r2)
 100341c:	d8800015 	stw	r2,0(sp)
 1003420:	04000144 	movi	r16,5
 1003424:	10000126 	beq	r2,zero,100342c <_Unwind_Backtrace+0x4c>
 1003428:	0021883a 	mov	r16,zero
 100342c:	d809883a 	mov	r4,sp
 1003430:	880b883a 	mov	r5,r17
 1003434:	903ee83a 	callr	r18
 1003438:	103ff526 	beq	r2,zero,1003410 <_Unwind_Backtrace+0x30>
 100343c:	040000c4 	movi	r16,3
 1003440:	8005883a 	mov	r2,r16
 1003444:	dfc00517 	ldw	ra,20(sp)
 1003448:	dcc00417 	ldw	r19,16(sp)
 100344c:	dc800317 	ldw	r18,12(sp)
 1003450:	dc400217 	ldw	r17,8(sp)
 1003454:	dc000117 	ldw	r16,4(sp)
 1003458:	dec00604 	addi	sp,sp,24
 100345c:	f800283a 	ret

01003460 <_Unwind_SjLj_Resume_or_Rethrow>:
 1003460:	20800317 	ldw	r2,12(r4)
 1003464:	defffc04 	addi	sp,sp,-16
 1003468:	dfc00315 	stw	ra,12(sp)
 100346c:	dc000215 	stw	r16,8(sp)
 1003470:	10000926 	beq	r2,zero,1003498 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 1003474:	d0a6ef17 	ldw	r2,-25668(gp)
 1003478:	dc000104 	addi	r16,sp,4
 100347c:	800b883a 	mov	r5,r16
 1003480:	d8800015 	stw	r2,0(sp)
 1003484:	d8800115 	stw	r2,4(sp)
 1003488:	10030300 	call	1003030 <_Unwind_ForcedUnwind_Phase2>
 100348c:	00c001c4 	movi	r3,7
 1003490:	10c00626 	beq	r2,r3,10034ac <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 1003494:	10034b80 	call	10034b8 <abort>
 1003498:	10032980 	call	1003298 <_Unwind_SjLj_RaiseException>
 100349c:	dfc00317 	ldw	ra,12(sp)
 10034a0:	dc000217 	ldw	r16,8(sp)
 10034a4:	dec00404 	addi	sp,sp,16
 10034a8:	f800283a 	ret
 10034ac:	800b883a 	mov	r5,r16
 10034b0:	d809883a 	mov	r4,sp
 10034b4:	10032140 	call	1003214 <uw_install_context>

010034b8 <abort>:
 10034b8:	deffff04 	addi	sp,sp,-4
 10034bc:	01000184 	movi	r4,6
 10034c0:	dfc00015 	stw	ra,0(sp)
 10034c4:	10057a80 	call	10057a8 <raise>
 10034c8:	01000044 	movi	r4,1
 10034cc:	100e39c0 	call	100e39c <_exit>

010034d0 <_fclose_r>:
 10034d0:	defffc04 	addi	sp,sp,-16
 10034d4:	dc400115 	stw	r17,4(sp)
 10034d8:	dc000015 	stw	r16,0(sp)
 10034dc:	dfc00315 	stw	ra,12(sp)
 10034e0:	dc800215 	stw	r18,8(sp)
 10034e4:	2821883a 	mov	r16,r5
 10034e8:	2023883a 	mov	r17,r4
 10034ec:	28002926 	beq	r5,zero,1003594 <_fclose_r+0xc4>
 10034f0:	100387c0 	call	100387c <__sfp_lock_acquire>
 10034f4:	88000226 	beq	r17,zero,1003500 <_fclose_r+0x30>
 10034f8:	88800e17 	ldw	r2,56(r17)
 10034fc:	10002d26 	beq	r2,zero,10035b4 <_fclose_r+0xe4>
 1003500:	8080030f 	ldh	r2,12(r16)
 1003504:	10002226 	beq	r2,zero,1003590 <_fclose_r+0xc0>
 1003508:	8809883a 	mov	r4,r17
 100350c:	800b883a 	mov	r5,r16
 1003510:	10035f40 	call	10035f4 <_fflush_r>
 1003514:	1025883a 	mov	r18,r2
 1003518:	80800b17 	ldw	r2,44(r16)
 100351c:	10000426 	beq	r2,zero,1003530 <_fclose_r+0x60>
 1003520:	81400717 	ldw	r5,28(r16)
 1003524:	8809883a 	mov	r4,r17
 1003528:	103ee83a 	callr	r2
 100352c:	10002a16 	blt	r2,zero,10035d8 <_fclose_r+0x108>
 1003530:	8080030b 	ldhu	r2,12(r16)
 1003534:	1080200c 	andi	r2,r2,128
 1003538:	1000231e 	bne	r2,zero,10035c8 <_fclose_r+0xf8>
 100353c:	81400c17 	ldw	r5,48(r16)
 1003540:	28000526 	beq	r5,zero,1003558 <_fclose_r+0x88>
 1003544:	80801004 	addi	r2,r16,64
 1003548:	28800226 	beq	r5,r2,1003554 <_fclose_r+0x84>
 100354c:	8809883a 	mov	r4,r17
 1003550:	1003d540 	call	1003d54 <_free_r>
 1003554:	80000c15 	stw	zero,48(r16)
 1003558:	81401117 	ldw	r5,68(r16)
 100355c:	28000326 	beq	r5,zero,100356c <_fclose_r+0x9c>
 1003560:	8809883a 	mov	r4,r17
 1003564:	1003d540 	call	1003d54 <_free_r>
 1003568:	80001115 	stw	zero,68(r16)
 100356c:	8000030d 	sth	zero,12(r16)
 1003570:	10038800 	call	1003880 <__sfp_lock_release>
 1003574:	9005883a 	mov	r2,r18
 1003578:	dfc00317 	ldw	ra,12(sp)
 100357c:	dc800217 	ldw	r18,8(sp)
 1003580:	dc400117 	ldw	r17,4(sp)
 1003584:	dc000017 	ldw	r16,0(sp)
 1003588:	dec00404 	addi	sp,sp,16
 100358c:	f800283a 	ret
 1003590:	10038800 	call	1003880 <__sfp_lock_release>
 1003594:	0025883a 	mov	r18,zero
 1003598:	9005883a 	mov	r2,r18
 100359c:	dfc00317 	ldw	ra,12(sp)
 10035a0:	dc800217 	ldw	r18,8(sp)
 10035a4:	dc400117 	ldw	r17,4(sp)
 10035a8:	dc000017 	ldw	r16,0(sp)
 10035ac:	dec00404 	addi	sp,sp,16
 10035b0:	f800283a 	ret
 10035b4:	8809883a 	mov	r4,r17
 10035b8:	100388c0 	call	100388c <__sinit>
 10035bc:	8080030f 	ldh	r2,12(r16)
 10035c0:	103fd11e 	bne	r2,zero,1003508 <_fclose_r+0x38>
 10035c4:	003ff206 	br	1003590 <_fclose_r+0xc0>
 10035c8:	81400417 	ldw	r5,16(r16)
 10035cc:	8809883a 	mov	r4,r17
 10035d0:	1003d540 	call	1003d54 <_free_r>
 10035d4:	003fd906 	br	100353c <_fclose_r+0x6c>
 10035d8:	04bfffc4 	movi	r18,-1
 10035dc:	003fd406 	br	1003530 <_fclose_r+0x60>

010035e0 <fclose>:
 10035e0:	00804074 	movhi	r2,257
 10035e4:	108e7f04 	addi	r2,r2,14844
 10035e8:	200b883a 	mov	r5,r4
 10035ec:	11000017 	ldw	r4,0(r2)
 10035f0:	10034d01 	jmpi	10034d0 <_fclose_r>

010035f4 <_fflush_r>:
 10035f4:	defffb04 	addi	sp,sp,-20
 10035f8:	dcc00315 	stw	r19,12(sp)
 10035fc:	dc800215 	stw	r18,8(sp)
 1003600:	dfc00415 	stw	ra,16(sp)
 1003604:	dc400115 	stw	r17,4(sp)
 1003608:	dc000015 	stw	r16,0(sp)
 100360c:	2027883a 	mov	r19,r4
 1003610:	2825883a 	mov	r18,r5
 1003614:	20000226 	beq	r4,zero,1003620 <_fflush_r+0x2c>
 1003618:	20800e17 	ldw	r2,56(r4)
 100361c:	10005626 	beq	r2,zero,1003778 <_fflush_r+0x184>
 1003620:	9100030b 	ldhu	r4,12(r18)
 1003624:	20ffffcc 	andi	r3,r4,65535
 1003628:	18e0001c 	xori	r3,r3,32768
 100362c:	18e00004 	addi	r3,r3,-32768
 1003630:	1880020c 	andi	r2,r3,8
 1003634:	1000261e 	bne	r2,zero,10036d0 <_fflush_r+0xdc>
 1003638:	90c00117 	ldw	r3,4(r18)
 100363c:	20820014 	ori	r2,r4,2048
 1003640:	9080030d 	sth	r2,12(r18)
 1003644:	1009883a 	mov	r4,r2
 1003648:	00c0400e 	bge	zero,r3,100374c <_fflush_r+0x158>
 100364c:	92000a17 	ldw	r8,40(r18)
 1003650:	40004026 	beq	r8,zero,1003754 <_fflush_r+0x160>
 1003654:	2084000c 	andi	r2,r4,4096
 1003658:	10005326 	beq	r2,zero,10037a8 <_fflush_r+0x1b4>
 100365c:	94001417 	ldw	r16,80(r18)
 1003660:	9080030b 	ldhu	r2,12(r18)
 1003664:	1080010c 	andi	r2,r2,4
 1003668:	1000481e 	bne	r2,zero,100378c <_fflush_r+0x198>
 100366c:	91400717 	ldw	r5,28(r18)
 1003670:	9809883a 	mov	r4,r19
 1003674:	800d883a 	mov	r6,r16
 1003678:	000f883a 	mov	r7,zero
 100367c:	403ee83a 	callr	r8
 1003680:	8080261e 	bne	r16,r2,100371c <_fflush_r+0x128>
 1003684:	9080030b 	ldhu	r2,12(r18)
 1003688:	91000417 	ldw	r4,16(r18)
 100368c:	90000115 	stw	zero,4(r18)
 1003690:	10bdffcc 	andi	r2,r2,63487
 1003694:	10ffffcc 	andi	r3,r2,65535
 1003698:	18c4000c 	andi	r3,r3,4096
 100369c:	9080030d 	sth	r2,12(r18)
 10036a0:	91000015 	stw	r4,0(r18)
 10036a4:	18002b26 	beq	r3,zero,1003754 <_fflush_r+0x160>
 10036a8:	0007883a 	mov	r3,zero
 10036ac:	1805883a 	mov	r2,r3
 10036b0:	94001415 	stw	r16,80(r18)
 10036b4:	dfc00417 	ldw	ra,16(sp)
 10036b8:	dcc00317 	ldw	r19,12(sp)
 10036bc:	dc800217 	ldw	r18,8(sp)
 10036c0:	dc400117 	ldw	r17,4(sp)
 10036c4:	dc000017 	ldw	r16,0(sp)
 10036c8:	dec00504 	addi	sp,sp,20
 10036cc:	f800283a 	ret
 10036d0:	94400417 	ldw	r17,16(r18)
 10036d4:	88001f26 	beq	r17,zero,1003754 <_fflush_r+0x160>
 10036d8:	90800017 	ldw	r2,0(r18)
 10036dc:	18c000cc 	andi	r3,r3,3
 10036e0:	94400015 	stw	r17,0(r18)
 10036e4:	1461c83a 	sub	r16,r2,r17
 10036e8:	18002526 	beq	r3,zero,1003780 <_fflush_r+0x18c>
 10036ec:	0005883a 	mov	r2,zero
 10036f0:	90800215 	stw	r2,8(r18)
 10036f4:	0400170e 	bge	zero,r16,1003754 <_fflush_r+0x160>
 10036f8:	90c00917 	ldw	r3,36(r18)
 10036fc:	91400717 	ldw	r5,28(r18)
 1003700:	880d883a 	mov	r6,r17
 1003704:	800f883a 	mov	r7,r16
 1003708:	9809883a 	mov	r4,r19
 100370c:	183ee83a 	callr	r3
 1003710:	88a3883a 	add	r17,r17,r2
 1003714:	80a1c83a 	sub	r16,r16,r2
 1003718:	00bff616 	blt	zero,r2,10036f4 <_fflush_r+0x100>
 100371c:	9080030b 	ldhu	r2,12(r18)
 1003720:	00ffffc4 	movi	r3,-1
 1003724:	10801014 	ori	r2,r2,64
 1003728:	9080030d 	sth	r2,12(r18)
 100372c:	1805883a 	mov	r2,r3
 1003730:	dfc00417 	ldw	ra,16(sp)
 1003734:	dcc00317 	ldw	r19,12(sp)
 1003738:	dc800217 	ldw	r18,8(sp)
 100373c:	dc400117 	ldw	r17,4(sp)
 1003740:	dc000017 	ldw	r16,0(sp)
 1003744:	dec00504 	addi	sp,sp,20
 1003748:	f800283a 	ret
 100374c:	90800f17 	ldw	r2,60(r18)
 1003750:	00bfbe16 	blt	zero,r2,100364c <_fflush_r+0x58>
 1003754:	0007883a 	mov	r3,zero
 1003758:	1805883a 	mov	r2,r3
 100375c:	dfc00417 	ldw	ra,16(sp)
 1003760:	dcc00317 	ldw	r19,12(sp)
 1003764:	dc800217 	ldw	r18,8(sp)
 1003768:	dc400117 	ldw	r17,4(sp)
 100376c:	dc000017 	ldw	r16,0(sp)
 1003770:	dec00504 	addi	sp,sp,20
 1003774:	f800283a 	ret
 1003778:	100388c0 	call	100388c <__sinit>
 100377c:	003fa806 	br	1003620 <_fflush_r+0x2c>
 1003780:	90800517 	ldw	r2,20(r18)
 1003784:	90800215 	stw	r2,8(r18)
 1003788:	003fda06 	br	10036f4 <_fflush_r+0x100>
 100378c:	90800117 	ldw	r2,4(r18)
 1003790:	90c00c17 	ldw	r3,48(r18)
 1003794:	80a1c83a 	sub	r16,r16,r2
 1003798:	183fb426 	beq	r3,zero,100366c <_fflush_r+0x78>
 100379c:	90800f17 	ldw	r2,60(r18)
 10037a0:	80a1c83a 	sub	r16,r16,r2
 10037a4:	003fb106 	br	100366c <_fflush_r+0x78>
 10037a8:	91400717 	ldw	r5,28(r18)
 10037ac:	9809883a 	mov	r4,r19
 10037b0:	000d883a 	mov	r6,zero
 10037b4:	01c00044 	movi	r7,1
 10037b8:	403ee83a 	callr	r8
 10037bc:	1021883a 	mov	r16,r2
 10037c0:	00bfffc4 	movi	r2,-1
 10037c4:	80800226 	beq	r16,r2,10037d0 <_fflush_r+0x1dc>
 10037c8:	92000a17 	ldw	r8,40(r18)
 10037cc:	003fa406 	br	1003660 <_fflush_r+0x6c>
 10037d0:	98c00017 	ldw	r3,0(r19)
 10037d4:	00800744 	movi	r2,29
 10037d8:	18bfde26 	beq	r3,r2,1003754 <_fflush_r+0x160>
 10037dc:	9080030b 	ldhu	r2,12(r18)
 10037e0:	8007883a 	mov	r3,r16
 10037e4:	10801014 	ori	r2,r2,64
 10037e8:	9080030d 	sth	r2,12(r18)
 10037ec:	003fcf06 	br	100372c <_fflush_r+0x138>

010037f0 <fflush>:
 10037f0:	01404034 	movhi	r5,256
 10037f4:	294d7d04 	addi	r5,r5,13812
 10037f8:	2007883a 	mov	r3,r4
 10037fc:	20000526 	beq	r4,zero,1003814 <fflush+0x24>
 1003800:	00804074 	movhi	r2,257
 1003804:	108e7f04 	addi	r2,r2,14844
 1003808:	11000017 	ldw	r4,0(r2)
 100380c:	180b883a 	mov	r5,r3
 1003810:	10035f41 	jmpi	10035f4 <_fflush_r>
 1003814:	00804074 	movhi	r2,257
 1003818:	108e8004 	addi	r2,r2,14848
 100381c:	11000017 	ldw	r4,0(r2)
 1003820:	100453c1 	jmpi	100453c <_fwalk_reent>

01003824 <std>:
 1003824:	00804034 	movhi	r2,256
 1003828:	10968b04 	addi	r2,r2,23084
 100382c:	20800b15 	stw	r2,44(r4)
 1003830:	00804034 	movhi	r2,256
 1003834:	1096c604 	addi	r2,r2,23320
 1003838:	20800815 	stw	r2,32(r4)
 100383c:	00c04034 	movhi	r3,256
 1003840:	18d6a704 	addi	r3,r3,23196
 1003844:	00804034 	movhi	r2,256
 1003848:	10968d04 	addi	r2,r2,23092
 100384c:	2140030d 	sth	r5,12(r4)
 1003850:	2180038d 	sth	r6,14(r4)
 1003854:	20c00915 	stw	r3,36(r4)
 1003858:	20800a15 	stw	r2,40(r4)
 100385c:	20000015 	stw	zero,0(r4)
 1003860:	20000115 	stw	zero,4(r4)
 1003864:	20000215 	stw	zero,8(r4)
 1003868:	20000415 	stw	zero,16(r4)
 100386c:	20000515 	stw	zero,20(r4)
 1003870:	20000615 	stw	zero,24(r4)
 1003874:	21000715 	stw	r4,28(r4)
 1003878:	f800283a 	ret

0100387c <__sfp_lock_acquire>:
 100387c:	f800283a 	ret

01003880 <__sfp_lock_release>:
 1003880:	f800283a 	ret

01003884 <__sinit_lock_acquire>:
 1003884:	f800283a 	ret

01003888 <__sinit_lock_release>:
 1003888:	f800283a 	ret

0100388c <__sinit>:
 100388c:	20800e17 	ldw	r2,56(r4)
 1003890:	defffd04 	addi	sp,sp,-12
 1003894:	dc400115 	stw	r17,4(sp)
 1003898:	dc000015 	stw	r16,0(sp)
 100389c:	dfc00215 	stw	ra,8(sp)
 10038a0:	04400044 	movi	r17,1
 10038a4:	01400104 	movi	r5,4
 10038a8:	000d883a 	mov	r6,zero
 10038ac:	2021883a 	mov	r16,r4
 10038b0:	2200bb04 	addi	r8,r4,748
 10038b4:	200f883a 	mov	r7,r4
 10038b8:	10000526 	beq	r2,zero,10038d0 <__sinit+0x44>
 10038bc:	dfc00217 	ldw	ra,8(sp)
 10038c0:	dc400117 	ldw	r17,4(sp)
 10038c4:	dc000017 	ldw	r16,0(sp)
 10038c8:	dec00304 	addi	sp,sp,12
 10038cc:	f800283a 	ret
 10038d0:	21000117 	ldw	r4,4(r4)
 10038d4:	00804034 	movhi	r2,256
 10038d8:	108e5c04 	addi	r2,r2,14704
 10038dc:	00c000c4 	movi	r3,3
 10038e0:	80800f15 	stw	r2,60(r16)
 10038e4:	80c0b915 	stw	r3,740(r16)
 10038e8:	8200ba15 	stw	r8,744(r16)
 10038ec:	84400e15 	stw	r17,56(r16)
 10038f0:	8000b815 	stw	zero,736(r16)
 10038f4:	10038240 	call	1003824 <std>
 10038f8:	81000217 	ldw	r4,8(r16)
 10038fc:	880d883a 	mov	r6,r17
 1003900:	800f883a 	mov	r7,r16
 1003904:	01400284 	movi	r5,10
 1003908:	10038240 	call	1003824 <std>
 100390c:	81000317 	ldw	r4,12(r16)
 1003910:	800f883a 	mov	r7,r16
 1003914:	01400484 	movi	r5,18
 1003918:	01800084 	movi	r6,2
 100391c:	dfc00217 	ldw	ra,8(sp)
 1003920:	dc400117 	ldw	r17,4(sp)
 1003924:	dc000017 	ldw	r16,0(sp)
 1003928:	dec00304 	addi	sp,sp,12
 100392c:	10038241 	jmpi	1003824 <std>

01003930 <__fp_lock>:
 1003930:	0005883a 	mov	r2,zero
 1003934:	f800283a 	ret

01003938 <__fp_unlock>:
 1003938:	0005883a 	mov	r2,zero
 100393c:	f800283a 	ret

01003940 <__fp_unlock_all>:
 1003940:	00804074 	movhi	r2,257
 1003944:	108e7f04 	addi	r2,r2,14844
 1003948:	11000017 	ldw	r4,0(r2)
 100394c:	01404034 	movhi	r5,256
 1003950:	294e4e04 	addi	r5,r5,14648
 1003954:	10046041 	jmpi	1004604 <_fwalk>

01003958 <__fp_lock_all>:
 1003958:	00804074 	movhi	r2,257
 100395c:	108e7f04 	addi	r2,r2,14844
 1003960:	11000017 	ldw	r4,0(r2)
 1003964:	01404034 	movhi	r5,256
 1003968:	294e4c04 	addi	r5,r5,14640
 100396c:	10046041 	jmpi	1004604 <_fwalk>

01003970 <_cleanup_r>:
 1003970:	01404034 	movhi	r5,256
 1003974:	294d7804 	addi	r5,r5,13792
 1003978:	10046041 	jmpi	1004604 <_fwalk>

0100397c <_cleanup>:
 100397c:	00804074 	movhi	r2,257
 1003980:	108e8004 	addi	r2,r2,14848
 1003984:	11000017 	ldw	r4,0(r2)
 1003988:	10039701 	jmpi	1003970 <_cleanup_r>

0100398c <__sfmoreglue>:
 100398c:	defffc04 	addi	sp,sp,-16
 1003990:	dc000015 	stw	r16,0(sp)
 1003994:	2821883a 	mov	r16,r5
 1003998:	dc400115 	stw	r17,4(sp)
 100399c:	01401704 	movi	r5,92
 10039a0:	2023883a 	mov	r17,r4
 10039a4:	8009883a 	mov	r4,r16
 10039a8:	dfc00315 	stw	ra,12(sp)
 10039ac:	dcc00215 	stw	r19,8(sp)
 10039b0:	1002f380 	call	1002f38 <__mulsi3>
 10039b4:	11400304 	addi	r5,r2,12
 10039b8:	8809883a 	mov	r4,r17
 10039bc:	1027883a 	mov	r19,r2
 10039c0:	1004a8c0 	call	1004a8c <_malloc_r>
 10039c4:	10c00304 	addi	r3,r2,12
 10039c8:	1023883a 	mov	r17,r2
 10039cc:	1809883a 	mov	r4,r3
 10039d0:	980d883a 	mov	r6,r19
 10039d4:	000b883a 	mov	r5,zero
 10039d8:	10000b26 	beq	r2,zero,1003a08 <__sfmoreglue+0x7c>
 10039dc:	14000115 	stw	r16,4(r2)
 10039e0:	10c00215 	stw	r3,8(r2)
 10039e4:	10000015 	stw	zero,0(r2)
 10039e8:	10051cc0 	call	10051cc <memset>
 10039ec:	8805883a 	mov	r2,r17
 10039f0:	dfc00317 	ldw	ra,12(sp)
 10039f4:	dcc00217 	ldw	r19,8(sp)
 10039f8:	dc400117 	ldw	r17,4(sp)
 10039fc:	dc000017 	ldw	r16,0(sp)
 1003a00:	dec00404 	addi	sp,sp,16
 1003a04:	f800283a 	ret
 1003a08:	0023883a 	mov	r17,zero
 1003a0c:	8805883a 	mov	r2,r17
 1003a10:	dfc00317 	ldw	ra,12(sp)
 1003a14:	dcc00217 	ldw	r19,8(sp)
 1003a18:	dc400117 	ldw	r17,4(sp)
 1003a1c:	dc000017 	ldw	r16,0(sp)
 1003a20:	dec00404 	addi	sp,sp,16
 1003a24:	f800283a 	ret

01003a28 <__sfp>:
 1003a28:	defffd04 	addi	sp,sp,-12
 1003a2c:	00804074 	movhi	r2,257
 1003a30:	108e8004 	addi	r2,r2,14848
 1003a34:	dc000015 	stw	r16,0(sp)
 1003a38:	14000017 	ldw	r16,0(r2)
 1003a3c:	dc400115 	stw	r17,4(sp)
 1003a40:	dfc00215 	stw	ra,8(sp)
 1003a44:	80800e17 	ldw	r2,56(r16)
 1003a48:	2023883a 	mov	r17,r4
 1003a4c:	10002626 	beq	r2,zero,1003ae8 <__sfp+0xc0>
 1003a50:	8400b804 	addi	r16,r16,736
 1003a54:	80800117 	ldw	r2,4(r16)
 1003a58:	81000217 	ldw	r4,8(r16)
 1003a5c:	10ffffc4 	addi	r3,r2,-1
 1003a60:	18000916 	blt	r3,zero,1003a88 <__sfp+0x60>
 1003a64:	2080030f 	ldh	r2,12(r4)
 1003a68:	10000b26 	beq	r2,zero,1003a98 <__sfp+0x70>
 1003a6c:	017fffc4 	movi	r5,-1
 1003a70:	00000206 	br	1003a7c <__sfp+0x54>
 1003a74:	2080030f 	ldh	r2,12(r4)
 1003a78:	10000726 	beq	r2,zero,1003a98 <__sfp+0x70>
 1003a7c:	18ffffc4 	addi	r3,r3,-1
 1003a80:	21001704 	addi	r4,r4,92
 1003a84:	197ffb1e 	bne	r3,r5,1003a74 <__sfp+0x4c>
 1003a88:	80800017 	ldw	r2,0(r16)
 1003a8c:	10001926 	beq	r2,zero,1003af4 <__sfp+0xcc>
 1003a90:	1021883a 	mov	r16,r2
 1003a94:	003fef06 	br	1003a54 <__sfp+0x2c>
 1003a98:	00bfffc4 	movi	r2,-1
 1003a9c:	00c00044 	movi	r3,1
 1003aa0:	2080038d 	sth	r2,14(r4)
 1003aa4:	20c0030d 	sth	r3,12(r4)
 1003aa8:	20000015 	stw	zero,0(r4)
 1003aac:	20000215 	stw	zero,8(r4)
 1003ab0:	20000115 	stw	zero,4(r4)
 1003ab4:	20000415 	stw	zero,16(r4)
 1003ab8:	20000515 	stw	zero,20(r4)
 1003abc:	20000615 	stw	zero,24(r4)
 1003ac0:	20000c15 	stw	zero,48(r4)
 1003ac4:	20000d15 	stw	zero,52(r4)
 1003ac8:	20001115 	stw	zero,68(r4)
 1003acc:	20001215 	stw	zero,72(r4)
 1003ad0:	2005883a 	mov	r2,r4
 1003ad4:	dfc00217 	ldw	ra,8(sp)
 1003ad8:	dc400117 	ldw	r17,4(sp)
 1003adc:	dc000017 	ldw	r16,0(sp)
 1003ae0:	dec00304 	addi	sp,sp,12
 1003ae4:	f800283a 	ret
 1003ae8:	8009883a 	mov	r4,r16
 1003aec:	100388c0 	call	100388c <__sinit>
 1003af0:	003fd706 	br	1003a50 <__sfp+0x28>
 1003af4:	8809883a 	mov	r4,r17
 1003af8:	01400104 	movi	r5,4
 1003afc:	100398c0 	call	100398c <__sfmoreglue>
 1003b00:	80800015 	stw	r2,0(r16)
 1003b04:	103fe21e 	bne	r2,zero,1003a90 <__sfp+0x68>
 1003b08:	00800304 	movi	r2,12
 1003b0c:	0009883a 	mov	r4,zero
 1003b10:	88800015 	stw	r2,0(r17)
 1003b14:	003fee06 	br	1003ad0 <__sfp+0xa8>

01003b18 <_fopen_r>:
 1003b18:	defffa04 	addi	sp,sp,-24
 1003b1c:	dcc00415 	stw	r19,16(sp)
 1003b20:	2827883a 	mov	r19,r5
 1003b24:	300b883a 	mov	r5,r6
 1003b28:	d80d883a 	mov	r6,sp
 1003b2c:	dc800315 	stw	r18,12(sp)
 1003b30:	dc400215 	stw	r17,8(sp)
 1003b34:	dc000115 	stw	r16,4(sp)
 1003b38:	dfc00515 	stw	ra,20(sp)
 1003b3c:	2021883a 	mov	r16,r4
 1003b40:	10096640 	call	1009664 <__sflags>
 1003b44:	1025883a 	mov	r18,r2
 1003b48:	8009883a 	mov	r4,r16
 1003b4c:	0023883a 	mov	r17,zero
 1003b50:	1000081e 	bne	r2,zero,1003b74 <_fopen_r+0x5c>
 1003b54:	8805883a 	mov	r2,r17
 1003b58:	dfc00517 	ldw	ra,20(sp)
 1003b5c:	dcc00417 	ldw	r19,16(sp)
 1003b60:	dc800317 	ldw	r18,12(sp)
 1003b64:	dc400217 	ldw	r17,8(sp)
 1003b68:	dc000117 	ldw	r16,4(sp)
 1003b6c:	dec00604 	addi	sp,sp,24
 1003b70:	f800283a 	ret
 1003b74:	1003a280 	call	1003a28 <__sfp>
 1003b78:	1023883a 	mov	r17,r2
 1003b7c:	980b883a 	mov	r5,r19
 1003b80:	8009883a 	mov	r4,r16
 1003b84:	01c06d84 	movi	r7,438
 1003b88:	103ff226 	beq	r2,zero,1003b54 <_fopen_r+0x3c>
 1003b8c:	d9800017 	ldw	r6,0(sp)
 1003b90:	10052640 	call	1005264 <_open_r>
 1003b94:	10001816 	blt	r2,zero,1003bf8 <_fopen_r+0xe0>
 1003b98:	00c04034 	movhi	r3,256
 1003b9c:	18d6a704 	addi	r3,r3,23196
 1003ba0:	923fffcc 	andi	r8,r18,65535
 1003ba4:	8880038d 	sth	r2,14(r17)
 1003ba8:	00804034 	movhi	r2,256
 1003bac:	1096c604 	addi	r2,r2,23320
 1003bb0:	88800815 	stw	r2,32(r17)
 1003bb4:	88c00915 	stw	r3,36(r17)
 1003bb8:	00804034 	movhi	r2,256
 1003bbc:	10968d04 	addi	r2,r2,23092
 1003bc0:	00c04034 	movhi	r3,256
 1003bc4:	18d68b04 	addi	r3,r3,23084
 1003bc8:	4200400c 	andi	r8,r8,256
 1003bcc:	8c80030d 	sth	r18,12(r17)
 1003bd0:	8009883a 	mov	r4,r16
 1003bd4:	880b883a 	mov	r5,r17
 1003bd8:	000d883a 	mov	r6,zero
 1003bdc:	01c00084 	movi	r7,2
 1003be0:	88800a15 	stw	r2,40(r17)
 1003be4:	88c00b15 	stw	r3,44(r17)
 1003be8:	8c400715 	stw	r17,28(r17)
 1003bec:	403fd926 	beq	r8,zero,1003b54 <_fopen_r+0x3c>
 1003bf0:	10040680 	call	1004068 <_fseek_r>
 1003bf4:	003fd706 	br	1003b54 <_fopen_r+0x3c>
 1003bf8:	100387c0 	call	100387c <__sfp_lock_acquire>
 1003bfc:	8800030d 	sth	zero,12(r17)
 1003c00:	10038800 	call	1003880 <__sfp_lock_release>
 1003c04:	0023883a 	mov	r17,zero
 1003c08:	003fd206 	br	1003b54 <_fopen_r+0x3c>

01003c0c <fopen>:
 1003c0c:	01804074 	movhi	r6,257
 1003c10:	318e7f04 	addi	r6,r6,14844
 1003c14:	2007883a 	mov	r3,r4
 1003c18:	31000017 	ldw	r4,0(r6)
 1003c1c:	280d883a 	mov	r6,r5
 1003c20:	180b883a 	mov	r5,r3
 1003c24:	1003b181 	jmpi	1003b18 <_fopen_r>

01003c28 <_malloc_trim_r>:
 1003c28:	defffb04 	addi	sp,sp,-20
 1003c2c:	dcc00315 	stw	r19,12(sp)
 1003c30:	04c04074 	movhi	r19,257
 1003c34:	9cc8c004 	addi	r19,r19,8960
 1003c38:	dc800215 	stw	r18,8(sp)
 1003c3c:	dc400115 	stw	r17,4(sp)
 1003c40:	dc000015 	stw	r16,0(sp)
 1003c44:	2823883a 	mov	r17,r5
 1003c48:	2025883a 	mov	r18,r4
 1003c4c:	dfc00415 	stw	ra,16(sp)
 1003c50:	100ea900 	call	100ea90 <__malloc_lock>
 1003c54:	98800217 	ldw	r2,8(r19)
 1003c58:	9009883a 	mov	r4,r18
 1003c5c:	000b883a 	mov	r5,zero
 1003c60:	10c00117 	ldw	r3,4(r2)
 1003c64:	00bfff04 	movi	r2,-4
 1003c68:	18a0703a 	and	r16,r3,r2
 1003c6c:	8463c83a 	sub	r17,r16,r17
 1003c70:	8c43fbc4 	addi	r17,r17,4079
 1003c74:	8822d33a 	srli	r17,r17,12
 1003c78:	0083ffc4 	movi	r2,4095
 1003c7c:	8c7fffc4 	addi	r17,r17,-1
 1003c80:	8822933a 	slli	r17,r17,12
 1003c84:	1440060e 	bge	r2,r17,1003ca0 <_malloc_trim_r+0x78>
 1003c88:	100566c0 	call	100566c <_sbrk_r>
 1003c8c:	98c00217 	ldw	r3,8(r19)
 1003c90:	9009883a 	mov	r4,r18
 1003c94:	044bc83a 	sub	r5,zero,r17
 1003c98:	80c7883a 	add	r3,r16,r3
 1003c9c:	10c00926 	beq	r2,r3,1003cc4 <_malloc_trim_r+0x9c>
 1003ca0:	100eab00 	call	100eab0 <__malloc_unlock>
 1003ca4:	0005883a 	mov	r2,zero
 1003ca8:	dfc00417 	ldw	ra,16(sp)
 1003cac:	dcc00317 	ldw	r19,12(sp)
 1003cb0:	dc800217 	ldw	r18,8(sp)
 1003cb4:	dc400117 	ldw	r17,4(sp)
 1003cb8:	dc000017 	ldw	r16,0(sp)
 1003cbc:	dec00504 	addi	sp,sp,20
 1003cc0:	f800283a 	ret
 1003cc4:	9009883a 	mov	r4,r18
 1003cc8:	100566c0 	call	100566c <_sbrk_r>
 1003ccc:	844dc83a 	sub	r6,r16,r17
 1003cd0:	00ffffc4 	movi	r3,-1
 1003cd4:	9009883a 	mov	r4,r18
 1003cd8:	000b883a 	mov	r5,zero
 1003cdc:	01c04074 	movhi	r7,257
 1003ce0:	39d77a04 	addi	r7,r7,24040
 1003ce4:	31800054 	ori	r6,r6,1
 1003ce8:	10c00926 	beq	r2,r3,1003d10 <_malloc_trim_r+0xe8>
 1003cec:	38800017 	ldw	r2,0(r7)
 1003cf0:	98c00217 	ldw	r3,8(r19)
 1003cf4:	9009883a 	mov	r4,r18
 1003cf8:	1445c83a 	sub	r2,r2,r17
 1003cfc:	38800015 	stw	r2,0(r7)
 1003d00:	19800115 	stw	r6,4(r3)
 1003d04:	100eab00 	call	100eab0 <__malloc_unlock>
 1003d08:	00800044 	movi	r2,1
 1003d0c:	003fe606 	br	1003ca8 <_malloc_trim_r+0x80>
 1003d10:	100566c0 	call	100566c <_sbrk_r>
 1003d14:	99800217 	ldw	r6,8(r19)
 1003d18:	100f883a 	mov	r7,r2
 1003d1c:	9009883a 	mov	r4,r18
 1003d20:	1187c83a 	sub	r3,r2,r6
 1003d24:	008003c4 	movi	r2,15
 1003d28:	19400054 	ori	r5,r3,1
 1003d2c:	10ffdc0e 	bge	r2,r3,1003ca0 <_malloc_trim_r+0x78>
 1003d30:	00804074 	movhi	r2,257
 1003d34:	108e8204 	addi	r2,r2,14856
 1003d38:	10c00017 	ldw	r3,0(r2)
 1003d3c:	00804074 	movhi	r2,257
 1003d40:	10977a04 	addi	r2,r2,24040
 1003d44:	31400115 	stw	r5,4(r6)
 1003d48:	38c7c83a 	sub	r3,r7,r3
 1003d4c:	10c00015 	stw	r3,0(r2)
 1003d50:	003fd306 	br	1003ca0 <_malloc_trim_r+0x78>

01003d54 <_free_r>:
 1003d54:	defffd04 	addi	sp,sp,-12
 1003d58:	dc400115 	stw	r17,4(sp)
 1003d5c:	dc000015 	stw	r16,0(sp)
 1003d60:	dfc00215 	stw	ra,8(sp)
 1003d64:	2821883a 	mov	r16,r5
 1003d68:	2023883a 	mov	r17,r4
 1003d6c:	28005a26 	beq	r5,zero,1003ed8 <_free_r+0x184>
 1003d70:	100ea900 	call	100ea90 <__malloc_lock>
 1003d74:	823ffe04 	addi	r8,r16,-8
 1003d78:	41400117 	ldw	r5,4(r8)
 1003d7c:	00bfff84 	movi	r2,-2
 1003d80:	02804074 	movhi	r10,257
 1003d84:	5288c004 	addi	r10,r10,8960
 1003d88:	288e703a 	and	r7,r5,r2
 1003d8c:	41cd883a 	add	r6,r8,r7
 1003d90:	30c00117 	ldw	r3,4(r6)
 1003d94:	51000217 	ldw	r4,8(r10)
 1003d98:	00bfff04 	movi	r2,-4
 1003d9c:	1892703a 	and	r9,r3,r2
 1003da0:	5017883a 	mov	r11,r10
 1003da4:	31006726 	beq	r6,r4,1003f44 <_free_r+0x1f0>
 1003da8:	2880004c 	andi	r2,r5,1
 1003dac:	1005003a 	cmpeq	r2,r2,zero
 1003db0:	32400115 	stw	r9,4(r6)
 1003db4:	10001a1e 	bne	r2,zero,1003e20 <_free_r+0xcc>
 1003db8:	000b883a 	mov	r5,zero
 1003dbc:	3247883a 	add	r3,r6,r9
 1003dc0:	18800117 	ldw	r2,4(r3)
 1003dc4:	1080004c 	andi	r2,r2,1
 1003dc8:	1000231e 	bne	r2,zero,1003e58 <_free_r+0x104>
 1003dcc:	280ac03a 	cmpne	r5,r5,zero
 1003dd0:	3a4f883a 	add	r7,r7,r9
 1003dd4:	2800451e 	bne	r5,zero,1003eec <_free_r+0x198>
 1003dd8:	31000217 	ldw	r4,8(r6)
 1003ddc:	00804074 	movhi	r2,257
 1003de0:	1088c204 	addi	r2,r2,8968
 1003de4:	20807b26 	beq	r4,r2,1003fd4 <_free_r+0x280>
 1003de8:	30800317 	ldw	r2,12(r6)
 1003dec:	3a07883a 	add	r3,r7,r8
 1003df0:	19c00015 	stw	r7,0(r3)
 1003df4:	11000215 	stw	r4,8(r2)
 1003df8:	20800315 	stw	r2,12(r4)
 1003dfc:	38800054 	ori	r2,r7,1
 1003e00:	40800115 	stw	r2,4(r8)
 1003e04:	28001a26 	beq	r5,zero,1003e70 <_free_r+0x11c>
 1003e08:	8809883a 	mov	r4,r17
 1003e0c:	dfc00217 	ldw	ra,8(sp)
 1003e10:	dc400117 	ldw	r17,4(sp)
 1003e14:	dc000017 	ldw	r16,0(sp)
 1003e18:	dec00304 	addi	sp,sp,12
 1003e1c:	100eab01 	jmpi	100eab0 <__malloc_unlock>
 1003e20:	80bffe17 	ldw	r2,-8(r16)
 1003e24:	50c00204 	addi	r3,r10,8
 1003e28:	4091c83a 	sub	r8,r8,r2
 1003e2c:	41000217 	ldw	r4,8(r8)
 1003e30:	388f883a 	add	r7,r7,r2
 1003e34:	20c06126 	beq	r4,r3,1003fbc <_free_r+0x268>
 1003e38:	40800317 	ldw	r2,12(r8)
 1003e3c:	3247883a 	add	r3,r6,r9
 1003e40:	000b883a 	mov	r5,zero
 1003e44:	11000215 	stw	r4,8(r2)
 1003e48:	20800315 	stw	r2,12(r4)
 1003e4c:	18800117 	ldw	r2,4(r3)
 1003e50:	1080004c 	andi	r2,r2,1
 1003e54:	103fdd26 	beq	r2,zero,1003dcc <_free_r+0x78>
 1003e58:	38800054 	ori	r2,r7,1
 1003e5c:	3a07883a 	add	r3,r7,r8
 1003e60:	280ac03a 	cmpne	r5,r5,zero
 1003e64:	40800115 	stw	r2,4(r8)
 1003e68:	19c00015 	stw	r7,0(r3)
 1003e6c:	283fe61e 	bne	r5,zero,1003e08 <_free_r+0xb4>
 1003e70:	00807fc4 	movi	r2,511
 1003e74:	11c01f2e 	bgeu	r2,r7,1003ef4 <_free_r+0x1a0>
 1003e78:	3806d27a 	srli	r3,r7,9
 1003e7c:	1800481e 	bne	r3,zero,1003fa0 <_free_r+0x24c>
 1003e80:	3804d0fa 	srli	r2,r7,3
 1003e84:	100690fa 	slli	r3,r2,3
 1003e88:	1acd883a 	add	r6,r3,r11
 1003e8c:	31400217 	ldw	r5,8(r6)
 1003e90:	31405926 	beq	r6,r5,1003ff8 <_free_r+0x2a4>
 1003e94:	28800117 	ldw	r2,4(r5)
 1003e98:	00ffff04 	movi	r3,-4
 1003e9c:	10c4703a 	and	r2,r2,r3
 1003ea0:	3880022e 	bgeu	r7,r2,1003eac <_free_r+0x158>
 1003ea4:	29400217 	ldw	r5,8(r5)
 1003ea8:	317ffa1e 	bne	r6,r5,1003e94 <_free_r+0x140>
 1003eac:	29800317 	ldw	r6,12(r5)
 1003eb0:	41800315 	stw	r6,12(r8)
 1003eb4:	41400215 	stw	r5,8(r8)
 1003eb8:	8809883a 	mov	r4,r17
 1003ebc:	2a000315 	stw	r8,12(r5)
 1003ec0:	32000215 	stw	r8,8(r6)
 1003ec4:	dfc00217 	ldw	ra,8(sp)
 1003ec8:	dc400117 	ldw	r17,4(sp)
 1003ecc:	dc000017 	ldw	r16,0(sp)
 1003ed0:	dec00304 	addi	sp,sp,12
 1003ed4:	100eab01 	jmpi	100eab0 <__malloc_unlock>
 1003ed8:	dfc00217 	ldw	ra,8(sp)
 1003edc:	dc400117 	ldw	r17,4(sp)
 1003ee0:	dc000017 	ldw	r16,0(sp)
 1003ee4:	dec00304 	addi	sp,sp,12
 1003ee8:	f800283a 	ret
 1003eec:	31000217 	ldw	r4,8(r6)
 1003ef0:	003fbd06 	br	1003de8 <_free_r+0x94>
 1003ef4:	3806d0fa 	srli	r3,r7,3
 1003ef8:	00800044 	movi	r2,1
 1003efc:	51400117 	ldw	r5,4(r10)
 1003f00:	180890fa 	slli	r4,r3,3
 1003f04:	1807d0ba 	srai	r3,r3,2
 1003f08:	22c9883a 	add	r4,r4,r11
 1003f0c:	21800217 	ldw	r6,8(r4)
 1003f10:	10c4983a 	sll	r2,r2,r3
 1003f14:	41000315 	stw	r4,12(r8)
 1003f18:	41800215 	stw	r6,8(r8)
 1003f1c:	288ab03a 	or	r5,r5,r2
 1003f20:	22000215 	stw	r8,8(r4)
 1003f24:	8809883a 	mov	r4,r17
 1003f28:	51400115 	stw	r5,4(r10)
 1003f2c:	32000315 	stw	r8,12(r6)
 1003f30:	dfc00217 	ldw	ra,8(sp)
 1003f34:	dc400117 	ldw	r17,4(sp)
 1003f38:	dc000017 	ldw	r16,0(sp)
 1003f3c:	dec00304 	addi	sp,sp,12
 1003f40:	100eab01 	jmpi	100eab0 <__malloc_unlock>
 1003f44:	2880004c 	andi	r2,r5,1
 1003f48:	3a4d883a 	add	r6,r7,r9
 1003f4c:	1000071e 	bne	r2,zero,1003f6c <_free_r+0x218>
 1003f50:	80bffe17 	ldw	r2,-8(r16)
 1003f54:	4091c83a 	sub	r8,r8,r2
 1003f58:	41000317 	ldw	r4,12(r8)
 1003f5c:	40c00217 	ldw	r3,8(r8)
 1003f60:	308d883a 	add	r6,r6,r2
 1003f64:	20c00215 	stw	r3,8(r4)
 1003f68:	19000315 	stw	r4,12(r3)
 1003f6c:	00804074 	movhi	r2,257
 1003f70:	108e8104 	addi	r2,r2,14852
 1003f74:	11000017 	ldw	r4,0(r2)
 1003f78:	30c00054 	ori	r3,r6,1
 1003f7c:	52000215 	stw	r8,8(r10)
 1003f80:	40c00115 	stw	r3,4(r8)
 1003f84:	313fa036 	bltu	r6,r4,1003e08 <_free_r+0xb4>
 1003f88:	00804074 	movhi	r2,257
 1003f8c:	10956904 	addi	r2,r2,21924
 1003f90:	11400017 	ldw	r5,0(r2)
 1003f94:	8809883a 	mov	r4,r17
 1003f98:	1003c280 	call	1003c28 <_malloc_trim_r>
 1003f9c:	003f9a06 	br	1003e08 <_free_r+0xb4>
 1003fa0:	00800104 	movi	r2,4
 1003fa4:	10c0072e 	bgeu	r2,r3,1003fc4 <_free_r+0x270>
 1003fa8:	00800504 	movi	r2,20
 1003fac:	10c01936 	bltu	r2,r3,1004014 <_free_r+0x2c0>
 1003fb0:	188016c4 	addi	r2,r3,91
 1003fb4:	100690fa 	slli	r3,r2,3
 1003fb8:	003fb306 	br	1003e88 <_free_r+0x134>
 1003fbc:	01400044 	movi	r5,1
 1003fc0:	003f7e06 	br	1003dbc <_free_r+0x68>
 1003fc4:	3804d1ba 	srli	r2,r7,6
 1003fc8:	10800e04 	addi	r2,r2,56
 1003fcc:	100690fa 	slli	r3,r2,3
 1003fd0:	003fad06 	br	1003e88 <_free_r+0x134>
 1003fd4:	22000315 	stw	r8,12(r4)
 1003fd8:	22000215 	stw	r8,8(r4)
 1003fdc:	3a05883a 	add	r2,r7,r8
 1003fe0:	38c00054 	ori	r3,r7,1
 1003fe4:	11c00015 	stw	r7,0(r2)
 1003fe8:	41000215 	stw	r4,8(r8)
 1003fec:	40c00115 	stw	r3,4(r8)
 1003ff0:	41000315 	stw	r4,12(r8)
 1003ff4:	003f8406 	br	1003e08 <_free_r+0xb4>
 1003ff8:	1005d0ba 	srai	r2,r2,2
 1003ffc:	00c00044 	movi	r3,1
 1004000:	51000117 	ldw	r4,4(r10)
 1004004:	1886983a 	sll	r3,r3,r2
 1004008:	20c8b03a 	or	r4,r4,r3
 100400c:	51000115 	stw	r4,4(r10)
 1004010:	003fa706 	br	1003eb0 <_free_r+0x15c>
 1004014:	00801504 	movi	r2,84
 1004018:	10c00436 	bltu	r2,r3,100402c <_free_r+0x2d8>
 100401c:	3804d33a 	srli	r2,r7,12
 1004020:	10801b84 	addi	r2,r2,110
 1004024:	100690fa 	slli	r3,r2,3
 1004028:	003f9706 	br	1003e88 <_free_r+0x134>
 100402c:	00805504 	movi	r2,340
 1004030:	10c00436 	bltu	r2,r3,1004044 <_free_r+0x2f0>
 1004034:	3804d3fa 	srli	r2,r7,15
 1004038:	10801dc4 	addi	r2,r2,119
 100403c:	100690fa 	slli	r3,r2,3
 1004040:	003f9106 	br	1003e88 <_free_r+0x134>
 1004044:	00815504 	movi	r2,1364
 1004048:	10c0032e 	bgeu	r2,r3,1004058 <_free_r+0x304>
 100404c:	00801f84 	movi	r2,126
 1004050:	00c0fc04 	movi	r3,1008
 1004054:	003f8c06 	br	1003e88 <_free_r+0x134>
 1004058:	3804d4ba 	srli	r2,r7,18
 100405c:	10801f04 	addi	r2,r2,124
 1004060:	100690fa 	slli	r3,r2,3
 1004064:	003f8806 	br	1003e88 <_free_r+0x134>

01004068 <_fseek_r>:
 1004068:	deffe804 	addi	sp,sp,-96
 100406c:	dd801515 	stw	r22,84(sp)
 1004070:	dcc01215 	stw	r19,72(sp)
 1004074:	dc801115 	stw	r18,68(sp)
 1004078:	dc000f15 	stw	r16,60(sp)
 100407c:	dfc01715 	stw	ra,92(sp)
 1004080:	ddc01615 	stw	r23,88(sp)
 1004084:	dd401415 	stw	r21,80(sp)
 1004088:	dd001315 	stw	r20,76(sp)
 100408c:	dc401015 	stw	r17,64(sp)
 1004090:	2025883a 	mov	r18,r4
 1004094:	2821883a 	mov	r16,r5
 1004098:	302d883a 	mov	r22,r6
 100409c:	3827883a 	mov	r19,r7
 10040a0:	20000226 	beq	r4,zero,10040ac <_fseek_r+0x44>
 10040a4:	20800e17 	ldw	r2,56(r4)
 10040a8:	10007826 	beq	r2,zero,100428c <_fseek_r+0x224>
 10040ac:	8080030b 	ldhu	r2,12(r16)
 10040b0:	00c04204 	movi	r3,264
 10040b4:	1080420c 	andi	r2,r2,264
 10040b8:	10c07926 	beq	r2,r3,10042a0 <_fseek_r+0x238>
 10040bc:	85400a17 	ldw	r21,40(r16)
 10040c0:	a800ea26 	beq	r21,zero,100446c <_fseek_r+0x404>
 10040c4:	00800044 	movi	r2,1
 10040c8:	98805f26 	beq	r19,r2,1004248 <_fseek_r+0x1e0>
 10040cc:	00800084 	movi	r2,2
 10040d0:	98801026 	beq	r19,r2,1004114 <_fseek_r+0xac>
 10040d4:	98000f26 	beq	r19,zero,1004114 <_fseek_r+0xac>
 10040d8:	00800584 	movi	r2,22
 10040dc:	013fffc4 	movi	r4,-1
 10040e0:	90800015 	stw	r2,0(r18)
 10040e4:	2005883a 	mov	r2,r4
 10040e8:	dfc01717 	ldw	ra,92(sp)
 10040ec:	ddc01617 	ldw	r23,88(sp)
 10040f0:	dd801517 	ldw	r22,84(sp)
 10040f4:	dd401417 	ldw	r21,80(sp)
 10040f8:	dd001317 	ldw	r20,76(sp)
 10040fc:	dcc01217 	ldw	r19,72(sp)
 1004100:	dc801117 	ldw	r18,68(sp)
 1004104:	dc401017 	ldw	r17,64(sp)
 1004108:	dc000f17 	ldw	r16,60(sp)
 100410c:	dec01804 	addi	sp,sp,96
 1004110:	f800283a 	ret
 1004114:	81800417 	ldw	r6,16(r16)
 1004118:	0023883a 	mov	r17,zero
 100411c:	002f883a 	mov	r23,zero
 1004120:	3000a626 	beq	r6,zero,10043bc <_fseek_r+0x354>
 1004124:	8100030b 	ldhu	r4,12(r16)
 1004128:	2082068c 	andi	r2,r4,2074
 100412c:	1000081e 	bne	r2,zero,1004150 <_fseek_r+0xe8>
 1004130:	2081000c 	andi	r2,r4,1024
 1004134:	10001b1e 	bne	r2,zero,10041a4 <_fseek_r+0x13c>
 1004138:	00804034 	movhi	r2,256
 100413c:	10968d04 	addi	r2,r2,23092
 1004140:	a8800926 	beq	r21,r2,1004168 <_fseek_r+0x100>
 1004144:	8080030b 	ldhu	r2,12(r16)
 1004148:	10820014 	ori	r2,r2,2048
 100414c:	8080030d 	sth	r2,12(r16)
 1004150:	9009883a 	mov	r4,r18
 1004154:	800b883a 	mov	r5,r16
 1004158:	10035f40 	call	10035f4 <_fflush_r>
 100415c:	1000a326 	beq	r2,zero,10043ec <_fseek_r+0x384>
 1004160:	013fffc4 	movi	r4,-1
 1004164:	003fdf06 	br	10040e4 <_fseek_r+0x7c>
 1004168:	8140038f 	ldh	r5,14(r16)
 100416c:	283ff516 	blt	r5,zero,1004144 <_fseek_r+0xdc>
 1004170:	9009883a 	mov	r4,r18
 1004174:	d80d883a 	mov	r6,sp
 1004178:	10044c80 	call	10044c8 <_fstat_r>
 100417c:	103ff11e 	bne	r2,zero,1004144 <_fseek_r+0xdc>
 1004180:	d8800117 	ldw	r2,4(sp)
 1004184:	00e00014 	movui	r3,32768
 1004188:	10bc000c 	andi	r2,r2,61440
 100418c:	10ffed1e 	bne	r2,r3,1004144 <_fseek_r+0xdc>
 1004190:	80c0030b 	ldhu	r3,12(r16)
 1004194:	00810004 	movi	r2,1024
 1004198:	80801315 	stw	r2,76(r16)
 100419c:	1886b03a 	or	r3,r3,r2
 10041a0:	80c0030d 	sth	r3,12(r16)
 10041a4:	9800701e 	bne	r19,zero,1004368 <_fseek_r+0x300>
 10041a8:	b029883a 	mov	r20,r22
 10041ac:	b804c03a 	cmpne	r2,r23,zero
 10041b0:	10003f1e 	bne	r2,zero,10042b0 <_fseek_r+0x248>
 10041b4:	8100030b 	ldhu	r4,12(r16)
 10041b8:	2084000c 	andi	r2,r4,4096
 10041bc:	1000a126 	beq	r2,zero,1004444 <_fseek_r+0x3dc>
 10041c0:	81801417 	ldw	r6,80(r16)
 10041c4:	80c00117 	ldw	r3,4(r16)
 10041c8:	81400c17 	ldw	r5,48(r16)
 10041cc:	30e3c83a 	sub	r17,r6,r3
 10041d0:	28008026 	beq	r5,zero,10043d4 <_fseek_r+0x36c>
 10041d4:	81c00f17 	ldw	r7,60(r16)
 10041d8:	89e3c83a 	sub	r17,r17,r7
 10041dc:	80800e17 	ldw	r2,56(r16)
 10041e0:	81800417 	ldw	r6,16(r16)
 10041e4:	88c7883a 	add	r3,r17,r3
 10041e8:	1185c83a 	sub	r2,r2,r6
 10041ec:	11cf883a 	add	r7,r2,r7
 10041f0:	1887c83a 	sub	r3,r3,r2
 10041f4:	2088000c 	andi	r2,r4,8192
 10041f8:	10003e1e 	bne	r2,zero,10042f4 <_fseek_r+0x28c>
 10041fc:	a0c03d16 	blt	r20,r3,10042f4 <_fseek_r+0x28c>
 1004200:	38c5883a 	add	r2,r7,r3
 1004204:	a0803b2e 	bgeu	r20,r2,10042f4 <_fseek_r+0x28c>
 1004208:	a0c5c83a 	sub	r2,r20,r3
 100420c:	3887c83a 	sub	r3,r7,r2
 1004210:	3085883a 	add	r2,r6,r2
 1004214:	80800015 	stw	r2,0(r16)
 1004218:	80c00115 	stw	r3,4(r16)
 100421c:	28000526 	beq	r5,zero,1004234 <_fseek_r+0x1cc>
 1004220:	80801004 	addi	r2,r16,64
 1004224:	28800226 	beq	r5,r2,1004230 <_fseek_r+0x1c8>
 1004228:	9009883a 	mov	r4,r18
 100422c:	1003d540 	call	1003d54 <_free_r>
 1004230:	80000c15 	stw	zero,48(r16)
 1004234:	8080030b 	ldhu	r2,12(r16)
 1004238:	0009883a 	mov	r4,zero
 100423c:	10bff7cc 	andi	r2,r2,65503
 1004240:	8080030d 	sth	r2,12(r16)
 1004244:	003fa706 	br	10040e4 <_fseek_r+0x7c>
 1004248:	9009883a 	mov	r4,r18
 100424c:	800b883a 	mov	r5,r16
 1004250:	10035f40 	call	10035f4 <_fflush_r>
 1004254:	8100030b 	ldhu	r4,12(r16)
 1004258:	2084000c 	andi	r2,r4,4096
 100425c:	10008726 	beq	r2,zero,100447c <_fseek_r+0x414>
 1004260:	84401417 	ldw	r17,80(r16)
 1004264:	2080010c 	andi	r2,r4,4
 1004268:	1000171e 	bne	r2,zero,10042c8 <_fseek_r+0x260>
 100426c:	2080020c 	andi	r2,r4,8
 1004270:	10003b26 	beq	r2,zero,1004360 <_fseek_r+0x2f8>
 1004274:	80800017 	ldw	r2,0(r16)
 1004278:	10003926 	beq	r2,zero,1004360 <_fseek_r+0x2f8>
 100427c:	81800417 	ldw	r6,16(r16)
 1004280:	1185c83a 	sub	r2,r2,r6
 1004284:	88a3883a 	add	r17,r17,r2
 1004288:	00001606 	br	10042e4 <_fseek_r+0x27c>
 100428c:	100388c0 	call	100388c <__sinit>
 1004290:	8080030b 	ldhu	r2,12(r16)
 1004294:	00c04204 	movi	r3,264
 1004298:	1080420c 	andi	r2,r2,264
 100429c:	10ff871e 	bne	r2,r3,10040bc <_fseek_r+0x54>
 10042a0:	9009883a 	mov	r4,r18
 10042a4:	800b883a 	mov	r5,r16
 10042a8:	10035f40 	call	10035f4 <_fflush_r>
 10042ac:	003f8306 	br	10040bc <_fseek_r+0x54>
 10042b0:	81400c17 	ldw	r5,48(r16)
 10042b4:	28004526 	beq	r5,zero,10043cc <_fseek_r+0x364>
 10042b8:	8100030b 	ldhu	r4,12(r16)
 10042bc:	80c00117 	ldw	r3,4(r16)
 10042c0:	81c00f17 	ldw	r7,60(r16)
 10042c4:	003fc506 	br	10041dc <_fseek_r+0x174>
 10042c8:	80c00117 	ldw	r3,4(r16)
 10042cc:	80800c17 	ldw	r2,48(r16)
 10042d0:	88e3c83a 	sub	r17,r17,r3
 10042d4:	10002226 	beq	r2,zero,1004360 <_fseek_r+0x2f8>
 10042d8:	81c00f17 	ldw	r7,60(r16)
 10042dc:	81800417 	ldw	r6,16(r16)
 10042e0:	89e3c83a 	sub	r17,r17,r7
 10042e4:	b46d883a 	add	r22,r22,r17
 10042e8:	0027883a 	mov	r19,zero
 10042ec:	05c00044 	movi	r23,1
 10042f0:	003f8b06 	br	1004120 <_fseek_r+0xb8>
 10042f4:	80801317 	ldw	r2,76(r16)
 10042f8:	81400717 	ldw	r5,28(r16)
 10042fc:	9009883a 	mov	r4,r18
 1004300:	0085c83a 	sub	r2,zero,r2
 1004304:	a0a2703a 	and	r17,r20,r2
 1004308:	880d883a 	mov	r6,r17
 100430c:	000f883a 	mov	r7,zero
 1004310:	a83ee83a 	callr	r21
 1004314:	00ffffc4 	movi	r3,-1
 1004318:	10ff8d26 	beq	r2,r3,1004150 <_fseek_r+0xe8>
 100431c:	80800417 	ldw	r2,16(r16)
 1004320:	81400c17 	ldw	r5,48(r16)
 1004324:	80000115 	stw	zero,4(r16)
 1004328:	80800015 	stw	r2,0(r16)
 100432c:	28000526 	beq	r5,zero,1004344 <_fseek_r+0x2dc>
 1004330:	80801004 	addi	r2,r16,64
 1004334:	28800226 	beq	r5,r2,1004340 <_fseek_r+0x2d8>
 1004338:	9009883a 	mov	r4,r18
 100433c:	1003d540 	call	1003d54 <_free_r>
 1004340:	80000c15 	stw	zero,48(r16)
 1004344:	8080030b 	ldhu	r2,12(r16)
 1004348:	a463c83a 	sub	r17,r20,r17
 100434c:	10bff7cc 	andi	r2,r2,65503
 1004350:	8080030d 	sth	r2,12(r16)
 1004354:	88000c1e 	bne	r17,zero,1004388 <_fseek_r+0x320>
 1004358:	0009883a 	mov	r4,zero
 100435c:	003f6106 	br	10040e4 <_fseek_r+0x7c>
 1004360:	81800417 	ldw	r6,16(r16)
 1004364:	003fdf06 	br	10042e4 <_fseek_r+0x27c>
 1004368:	8140038f 	ldh	r5,14(r16)
 100436c:	9009883a 	mov	r4,r18
 1004370:	d80d883a 	mov	r6,sp
 1004374:	10044c80 	call	10044c8 <_fstat_r>
 1004378:	103f751e 	bne	r2,zero,1004150 <_fseek_r+0xe8>
 100437c:	d8800417 	ldw	r2,16(sp)
 1004380:	b0a9883a 	add	r20,r22,r2
 1004384:	003f8906 	br	10041ac <_fseek_r+0x144>
 1004388:	9009883a 	mov	r4,r18
 100438c:	800b883a 	mov	r5,r16
 1004390:	100542c0 	call	100542c <__srefill_r>
 1004394:	103f6e1e 	bne	r2,zero,1004150 <_fseek_r+0xe8>
 1004398:	80c00117 	ldw	r3,4(r16)
 100439c:	1c7f6c36 	bltu	r3,r17,1004150 <_fseek_r+0xe8>
 10043a0:	80800017 	ldw	r2,0(r16)
 10043a4:	1c47c83a 	sub	r3,r3,r17
 10043a8:	0009883a 	mov	r4,zero
 10043ac:	1445883a 	add	r2,r2,r17
 10043b0:	80c00115 	stw	r3,4(r16)
 10043b4:	80800015 	stw	r2,0(r16)
 10043b8:	003f4a06 	br	10040e4 <_fseek_r+0x7c>
 10043bc:	9009883a 	mov	r4,r18
 10043c0:	800b883a 	mov	r5,r16
 10043c4:	10048d00 	call	10048d0 <__smakebuf_r>
 10043c8:	003f5606 	br	1004124 <_fseek_r+0xbc>
 10043cc:	8100030b 	ldhu	r4,12(r16)
 10043d0:	80c00117 	ldw	r3,4(r16)
 10043d4:	80800017 	ldw	r2,0(r16)
 10043d8:	81800417 	ldw	r6,16(r16)
 10043dc:	1185c83a 	sub	r2,r2,r6
 10043e0:	10cf883a 	add	r7,r2,r3
 10043e4:	8887c83a 	sub	r3,r17,r2
 10043e8:	003f8206 	br	10041f4 <_fseek_r+0x18c>
 10043ec:	81400717 	ldw	r5,28(r16)
 10043f0:	b00d883a 	mov	r6,r22
 10043f4:	980f883a 	mov	r7,r19
 10043f8:	9009883a 	mov	r4,r18
 10043fc:	a83ee83a 	callr	r21
 1004400:	00ffffc4 	movi	r3,-1
 1004404:	10ff5626 	beq	r2,r3,1004160 <_fseek_r+0xf8>
 1004408:	81400c17 	ldw	r5,48(r16)
 100440c:	28000526 	beq	r5,zero,1004424 <_fseek_r+0x3bc>
 1004410:	80801004 	addi	r2,r16,64
 1004414:	28800226 	beq	r5,r2,1004420 <_fseek_r+0x3b8>
 1004418:	9009883a 	mov	r4,r18
 100441c:	1003d540 	call	1003d54 <_free_r>
 1004420:	80000c15 	stw	zero,48(r16)
 1004424:	8080030b 	ldhu	r2,12(r16)
 1004428:	80c00417 	ldw	r3,16(r16)
 100442c:	0009883a 	mov	r4,zero
 1004430:	10bdf7cc 	andi	r2,r2,63455
 1004434:	8080030d 	sth	r2,12(r16)
 1004438:	80c00015 	stw	r3,0(r16)
 100443c:	80000115 	stw	zero,4(r16)
 1004440:	003f2806 	br	10040e4 <_fseek_r+0x7c>
 1004444:	81400717 	ldw	r5,28(r16)
 1004448:	000d883a 	mov	r6,zero
 100444c:	9009883a 	mov	r4,r18
 1004450:	01c00044 	movi	r7,1
 1004454:	a83ee83a 	callr	r21
 1004458:	100d883a 	mov	r6,r2
 100445c:	00bfffc4 	movi	r2,-1
 1004460:	30bf3b26 	beq	r6,r2,1004150 <_fseek_r+0xe8>
 1004464:	8100030b 	ldhu	r4,12(r16)
 1004468:	003f5606 	br	10041c4 <_fseek_r+0x15c>
 100446c:	00800744 	movi	r2,29
 1004470:	013fffc4 	movi	r4,-1
 1004474:	90800015 	stw	r2,0(r18)
 1004478:	003f1a06 	br	10040e4 <_fseek_r+0x7c>
 100447c:	81400717 	ldw	r5,28(r16)
 1004480:	980f883a 	mov	r7,r19
 1004484:	9009883a 	mov	r4,r18
 1004488:	000d883a 	mov	r6,zero
 100448c:	a83ee83a 	callr	r21
 1004490:	1023883a 	mov	r17,r2
 1004494:	00bfffc4 	movi	r2,-1
 1004498:	88bf3126 	beq	r17,r2,1004160 <_fseek_r+0xf8>
 100449c:	8100030b 	ldhu	r4,12(r16)
 10044a0:	003f7006 	br	1004264 <_fseek_r+0x1fc>

010044a4 <fseek>:
 10044a4:	00804074 	movhi	r2,257
 10044a8:	108e7f04 	addi	r2,r2,14844
 10044ac:	2013883a 	mov	r9,r4
 10044b0:	11000017 	ldw	r4,0(r2)
 10044b4:	2805883a 	mov	r2,r5
 10044b8:	300f883a 	mov	r7,r6
 10044bc:	480b883a 	mov	r5,r9
 10044c0:	100d883a 	mov	r6,r2
 10044c4:	10040681 	jmpi	1004068 <_fseek_r>

010044c8 <_fstat_r>:
 10044c8:	defffd04 	addi	sp,sp,-12
 10044cc:	dc000015 	stw	r16,0(sp)
 10044d0:	04004074 	movhi	r16,257
 10044d4:	84156804 	addi	r16,r16,21920
 10044d8:	dc400115 	stw	r17,4(sp)
 10044dc:	80000015 	stw	zero,0(r16)
 10044e0:	2023883a 	mov	r17,r4
 10044e4:	2809883a 	mov	r4,r5
 10044e8:	300b883a 	mov	r5,r6
 10044ec:	dfc00215 	stw	ra,8(sp)
 10044f0:	100e3c80 	call	100e3c8 <fstat>
 10044f4:	1007883a 	mov	r3,r2
 10044f8:	00bfffc4 	movi	r2,-1
 10044fc:	18800626 	beq	r3,r2,1004518 <_fstat_r+0x50>
 1004500:	1805883a 	mov	r2,r3
 1004504:	dfc00217 	ldw	ra,8(sp)
 1004508:	dc400117 	ldw	r17,4(sp)
 100450c:	dc000017 	ldw	r16,0(sp)
 1004510:	dec00304 	addi	sp,sp,12
 1004514:	f800283a 	ret
 1004518:	80800017 	ldw	r2,0(r16)
 100451c:	103ff826 	beq	r2,zero,1004500 <_fstat_r+0x38>
 1004520:	88800015 	stw	r2,0(r17)
 1004524:	1805883a 	mov	r2,r3
 1004528:	dfc00217 	ldw	ra,8(sp)
 100452c:	dc400117 	ldw	r17,4(sp)
 1004530:	dc000017 	ldw	r16,0(sp)
 1004534:	dec00304 	addi	sp,sp,12
 1004538:	f800283a 	ret

0100453c <_fwalk_reent>:
 100453c:	defff704 	addi	sp,sp,-36
 1004540:	dcc00315 	stw	r19,12(sp)
 1004544:	24c0b804 	addi	r19,r4,736
 1004548:	dd800615 	stw	r22,24(sp)
 100454c:	dd400515 	stw	r21,20(sp)
 1004550:	dfc00815 	stw	ra,32(sp)
 1004554:	ddc00715 	stw	r23,28(sp)
 1004558:	dd000415 	stw	r20,16(sp)
 100455c:	dc800215 	stw	r18,8(sp)
 1004560:	dc400115 	stw	r17,4(sp)
 1004564:	dc000015 	stw	r16,0(sp)
 1004568:	202b883a 	mov	r21,r4
 100456c:	282d883a 	mov	r22,r5
 1004570:	100387c0 	call	100387c <__sfp_lock_acquire>
 1004574:	98002126 	beq	r19,zero,10045fc <_fwalk_reent+0xc0>
 1004578:	002f883a 	mov	r23,zero
 100457c:	9c800117 	ldw	r18,4(r19)
 1004580:	9c000217 	ldw	r16,8(r19)
 1004584:	90bfffc4 	addi	r2,r18,-1
 1004588:	10000d16 	blt	r2,zero,10045c0 <_fwalk_reent+0x84>
 100458c:	0023883a 	mov	r17,zero
 1004590:	053fffc4 	movi	r20,-1
 1004594:	8080030f 	ldh	r2,12(r16)
 1004598:	8c400044 	addi	r17,r17,1
 100459c:	10000626 	beq	r2,zero,10045b8 <_fwalk_reent+0x7c>
 10045a0:	8080038f 	ldh	r2,14(r16)
 10045a4:	800b883a 	mov	r5,r16
 10045a8:	a809883a 	mov	r4,r21
 10045ac:	15000226 	beq	r2,r20,10045b8 <_fwalk_reent+0x7c>
 10045b0:	b03ee83a 	callr	r22
 10045b4:	b8aeb03a 	or	r23,r23,r2
 10045b8:	84001704 	addi	r16,r16,92
 10045bc:	947ff51e 	bne	r18,r17,1004594 <_fwalk_reent+0x58>
 10045c0:	9cc00017 	ldw	r19,0(r19)
 10045c4:	983fed1e 	bne	r19,zero,100457c <_fwalk_reent+0x40>
 10045c8:	10038800 	call	1003880 <__sfp_lock_release>
 10045cc:	b805883a 	mov	r2,r23
 10045d0:	dfc00817 	ldw	ra,32(sp)
 10045d4:	ddc00717 	ldw	r23,28(sp)
 10045d8:	dd800617 	ldw	r22,24(sp)
 10045dc:	dd400517 	ldw	r21,20(sp)
 10045e0:	dd000417 	ldw	r20,16(sp)
 10045e4:	dcc00317 	ldw	r19,12(sp)
 10045e8:	dc800217 	ldw	r18,8(sp)
 10045ec:	dc400117 	ldw	r17,4(sp)
 10045f0:	dc000017 	ldw	r16,0(sp)
 10045f4:	dec00904 	addi	sp,sp,36
 10045f8:	f800283a 	ret
 10045fc:	002f883a 	mov	r23,zero
 1004600:	003ff106 	br	10045c8 <_fwalk_reent+0x8c>

01004604 <_fwalk>:
 1004604:	defff804 	addi	sp,sp,-32
 1004608:	dcc00315 	stw	r19,12(sp)
 100460c:	24c0b804 	addi	r19,r4,736
 1004610:	dd400515 	stw	r21,20(sp)
 1004614:	dfc00715 	stw	ra,28(sp)
 1004618:	dd800615 	stw	r22,24(sp)
 100461c:	dd000415 	stw	r20,16(sp)
 1004620:	dc800215 	stw	r18,8(sp)
 1004624:	dc400115 	stw	r17,4(sp)
 1004628:	dc000015 	stw	r16,0(sp)
 100462c:	282b883a 	mov	r21,r5
 1004630:	100387c0 	call	100387c <__sfp_lock_acquire>
 1004634:	98001f26 	beq	r19,zero,10046b4 <_fwalk+0xb0>
 1004638:	002d883a 	mov	r22,zero
 100463c:	9c800117 	ldw	r18,4(r19)
 1004640:	9c000217 	ldw	r16,8(r19)
 1004644:	90bfffc4 	addi	r2,r18,-1
 1004648:	10000c16 	blt	r2,zero,100467c <_fwalk+0x78>
 100464c:	0023883a 	mov	r17,zero
 1004650:	053fffc4 	movi	r20,-1
 1004654:	8080030f 	ldh	r2,12(r16)
 1004658:	8c400044 	addi	r17,r17,1
 100465c:	10000526 	beq	r2,zero,1004674 <_fwalk+0x70>
 1004660:	8080038f 	ldh	r2,14(r16)
 1004664:	8009883a 	mov	r4,r16
 1004668:	15000226 	beq	r2,r20,1004674 <_fwalk+0x70>
 100466c:	a83ee83a 	callr	r21
 1004670:	b0acb03a 	or	r22,r22,r2
 1004674:	84001704 	addi	r16,r16,92
 1004678:	947ff61e 	bne	r18,r17,1004654 <_fwalk+0x50>
 100467c:	9cc00017 	ldw	r19,0(r19)
 1004680:	983fee1e 	bne	r19,zero,100463c <_fwalk+0x38>
 1004684:	10038800 	call	1003880 <__sfp_lock_release>
 1004688:	b005883a 	mov	r2,r22
 100468c:	dfc00717 	ldw	ra,28(sp)
 1004690:	dd800617 	ldw	r22,24(sp)
 1004694:	dd400517 	ldw	r21,20(sp)
 1004698:	dd000417 	ldw	r20,16(sp)
 100469c:	dcc00317 	ldw	r19,12(sp)
 10046a0:	dc800217 	ldw	r18,8(sp)
 10046a4:	dc400117 	ldw	r17,4(sp)
 10046a8:	dc000017 	ldw	r16,0(sp)
 10046ac:	dec00804 	addi	sp,sp,32
 10046b0:	f800283a 	ret
 10046b4:	002d883a 	mov	r22,zero
 10046b8:	003ff206 	br	1004684 <_fwalk+0x80>

010046bc <_fwrite_r>:
 10046bc:	defff604 	addi	sp,sp,-40
 10046c0:	dc000515 	stw	r16,20(sp)
 10046c4:	d9400015 	stw	r5,0(sp)
 10046c8:	2021883a 	mov	r16,r4
 10046cc:	300b883a 	mov	r5,r6
 10046d0:	3809883a 	mov	r4,r7
 10046d4:	dcc00815 	stw	r19,32(sp)
 10046d8:	dc800715 	stw	r18,28(sp)
 10046dc:	dc400615 	stw	r17,24(sp)
 10046e0:	dfc00915 	stw	ra,36(sp)
 10046e4:	3825883a 	mov	r18,r7
 10046e8:	3027883a 	mov	r19,r6
 10046ec:	1002f380 	call	1002f38 <__mulsi3>
 10046f0:	1023883a 	mov	r17,r2
 10046f4:	00800044 	movi	r2,1
 10046f8:	d8800315 	stw	r2,12(sp)
 10046fc:	dc400115 	stw	r17,4(sp)
 1004700:	dc400415 	stw	r17,16(sp)
 1004704:	dec00215 	stw	sp,8(sp)
 1004708:	80000326 	beq	r16,zero,1004718 <_fwrite_r+0x5c>
 100470c:	80800e17 	ldw	r2,56(r16)
 1004710:	8009883a 	mov	r4,r16
 1004714:	10001226 	beq	r2,zero,1004760 <_fwrite_r+0xa4>
 1004718:	d9400a17 	ldw	r5,40(sp)
 100471c:	8009883a 	mov	r4,r16
 1004720:	d9800204 	addi	r6,sp,8
 1004724:	10097040 	call	1009704 <__sfvwrite_r>
 1004728:	980b883a 	mov	r5,r19
 100472c:	10000426 	beq	r2,zero,1004740 <_fwrite_r+0x84>
 1004730:	d9000417 	ldw	r4,16(sp)
 1004734:	8909c83a 	sub	r4,r17,r4
 1004738:	100db080 	call	100db08 <__udivsi3>
 100473c:	1025883a 	mov	r18,r2
 1004740:	9005883a 	mov	r2,r18
 1004744:	dfc00917 	ldw	ra,36(sp)
 1004748:	dcc00817 	ldw	r19,32(sp)
 100474c:	dc800717 	ldw	r18,28(sp)
 1004750:	dc400617 	ldw	r17,24(sp)
 1004754:	dc000517 	ldw	r16,20(sp)
 1004758:	dec00a04 	addi	sp,sp,40
 100475c:	f800283a 	ret
 1004760:	100388c0 	call	100388c <__sinit>
 1004764:	003fec06 	br	1004718 <_fwrite_r+0x5c>

01004768 <fwrite>:
 1004768:	00804074 	movhi	r2,257
 100476c:	108e7f04 	addi	r2,r2,14844
 1004770:	2017883a 	mov	r11,r4
 1004774:	11000017 	ldw	r4,0(r2)
 1004778:	defffe04 	addi	sp,sp,-8
 100477c:	3013883a 	mov	r9,r6
 1004780:	2805883a 	mov	r2,r5
 1004784:	d9c00015 	stw	r7,0(sp)
 1004788:	580b883a 	mov	r5,r11
 100478c:	100d883a 	mov	r6,r2
 1004790:	480f883a 	mov	r7,r9
 1004794:	dfc00115 	stw	ra,4(sp)
 1004798:	10046bc0 	call	10046bc <_fwrite_r>
 100479c:	dfc00117 	ldw	ra,4(sp)
 10047a0:	dec00204 	addi	sp,sp,8
 10047a4:	f800283a 	ret

010047a8 <getc>:
 10047a8:	defffd04 	addi	sp,sp,-12
 10047ac:	dc400115 	stw	r17,4(sp)
 10047b0:	04404074 	movhi	r17,257
 10047b4:	8c4e7f04 	addi	r17,r17,14844
 10047b8:	88c00017 	ldw	r3,0(r17)
 10047bc:	dc000015 	stw	r16,0(sp)
 10047c0:	dfc00215 	stw	ra,8(sp)
 10047c4:	2021883a 	mov	r16,r4
 10047c8:	18000326 	beq	r3,zero,10047d8 <getc+0x30>
 10047cc:	18800e17 	ldw	r2,56(r3)
 10047d0:	1809883a 	mov	r4,r3
 10047d4:	10000e26 	beq	r2,zero,1004810 <getc+0x68>
 10047d8:	80800117 	ldw	r2,4(r16)
 10047dc:	800b883a 	mov	r5,r16
 10047e0:	10bfffc4 	addi	r2,r2,-1
 10047e4:	80800115 	stw	r2,4(r16)
 10047e8:	10000f16 	blt	r2,zero,1004828 <getc+0x80>
 10047ec:	80c00017 	ldw	r3,0(r16)
 10047f0:	18800003 	ldbu	r2,0(r3)
 10047f4:	18c00044 	addi	r3,r3,1
 10047f8:	80c00015 	stw	r3,0(r16)
 10047fc:	dfc00217 	ldw	ra,8(sp)
 1004800:	dc400117 	ldw	r17,4(sp)
 1004804:	dc000017 	ldw	r16,0(sp)
 1004808:	dec00304 	addi	sp,sp,12
 100480c:	f800283a 	ret
 1004810:	100388c0 	call	100388c <__sinit>
 1004814:	80800117 	ldw	r2,4(r16)
 1004818:	800b883a 	mov	r5,r16
 100481c:	10bfffc4 	addi	r2,r2,-1
 1004820:	80800115 	stw	r2,4(r16)
 1004824:	103ff10e 	bge	r2,zero,10047ec <getc+0x44>
 1004828:	89000017 	ldw	r4,0(r17)
 100482c:	dfc00217 	ldw	ra,8(sp)
 1004830:	dc400117 	ldw	r17,4(sp)
 1004834:	dc000017 	ldw	r16,0(sp)
 1004838:	dec00304 	addi	sp,sp,12
 100483c:	100560c1 	jmpi	100560c <__srget_r>

01004840 <_getc_r>:
 1004840:	defffd04 	addi	sp,sp,-12
 1004844:	dc400115 	stw	r17,4(sp)
 1004848:	dc000015 	stw	r16,0(sp)
 100484c:	dfc00215 	stw	ra,8(sp)
 1004850:	2021883a 	mov	r16,r4
 1004854:	2823883a 	mov	r17,r5
 1004858:	20000226 	beq	r4,zero,1004864 <_getc_r+0x24>
 100485c:	20800e17 	ldw	r2,56(r4)
 1004860:	10000f26 	beq	r2,zero,10048a0 <_getc_r+0x60>
 1004864:	88800117 	ldw	r2,4(r17)
 1004868:	8009883a 	mov	r4,r16
 100486c:	880b883a 	mov	r5,r17
 1004870:	10bfffc4 	addi	r2,r2,-1
 1004874:	88800115 	stw	r2,4(r17)
 1004878:	10001016 	blt	r2,zero,10048bc <_getc_r+0x7c>
 100487c:	88c00017 	ldw	r3,0(r17)
 1004880:	18800003 	ldbu	r2,0(r3)
 1004884:	18c00044 	addi	r3,r3,1
 1004888:	88c00015 	stw	r3,0(r17)
 100488c:	dfc00217 	ldw	ra,8(sp)
 1004890:	dc400117 	ldw	r17,4(sp)
 1004894:	dc000017 	ldw	r16,0(sp)
 1004898:	dec00304 	addi	sp,sp,12
 100489c:	f800283a 	ret
 10048a0:	100388c0 	call	100388c <__sinit>
 10048a4:	88800117 	ldw	r2,4(r17)
 10048a8:	8009883a 	mov	r4,r16
 10048ac:	880b883a 	mov	r5,r17
 10048b0:	10bfffc4 	addi	r2,r2,-1
 10048b4:	88800115 	stw	r2,4(r17)
 10048b8:	103ff00e 	bge	r2,zero,100487c <_getc_r+0x3c>
 10048bc:	dfc00217 	ldw	ra,8(sp)
 10048c0:	dc400117 	ldw	r17,4(sp)
 10048c4:	dc000017 	ldw	r16,0(sp)
 10048c8:	dec00304 	addi	sp,sp,12
 10048cc:	100560c1 	jmpi	100560c <__srget_r>

010048d0 <__smakebuf_r>:
 10048d0:	2880030b 	ldhu	r2,12(r5)
 10048d4:	deffed04 	addi	sp,sp,-76
 10048d8:	dc401015 	stw	r17,64(sp)
 10048dc:	1080008c 	andi	r2,r2,2
 10048e0:	dc000f15 	stw	r16,60(sp)
 10048e4:	dfc01215 	stw	ra,72(sp)
 10048e8:	dc801115 	stw	r18,68(sp)
 10048ec:	2821883a 	mov	r16,r5
 10048f0:	2023883a 	mov	r17,r4
 10048f4:	10000b26 	beq	r2,zero,1004924 <__smakebuf_r+0x54>
 10048f8:	28c010c4 	addi	r3,r5,67
 10048fc:	00800044 	movi	r2,1
 1004900:	28800515 	stw	r2,20(r5)
 1004904:	28c00415 	stw	r3,16(r5)
 1004908:	28c00015 	stw	r3,0(r5)
 100490c:	dfc01217 	ldw	ra,72(sp)
 1004910:	dc801117 	ldw	r18,68(sp)
 1004914:	dc401017 	ldw	r17,64(sp)
 1004918:	dc000f17 	ldw	r16,60(sp)
 100491c:	dec01304 	addi	sp,sp,76
 1004920:	f800283a 	ret
 1004924:	2940038f 	ldh	r5,14(r5)
 1004928:	28002116 	blt	r5,zero,10049b0 <__smakebuf_r+0xe0>
 100492c:	d80d883a 	mov	r6,sp
 1004930:	10044c80 	call	10044c8 <_fstat_r>
 1004934:	10001e16 	blt	r2,zero,10049b0 <__smakebuf_r+0xe0>
 1004938:	d8800117 	ldw	r2,4(sp)
 100493c:	00e00014 	movui	r3,32768
 1004940:	113c000c 	andi	r4,r2,61440
 1004944:	20c03126 	beq	r4,r3,1004a0c <__smakebuf_r+0x13c>
 1004948:	8080030b 	ldhu	r2,12(r16)
 100494c:	00c80004 	movi	r3,8192
 1004950:	10820014 	ori	r2,r2,2048
 1004954:	8080030d 	sth	r2,12(r16)
 1004958:	20c01e26 	beq	r4,r3,10049d4 <__smakebuf_r+0x104>
 100495c:	04810004 	movi	r18,1024
 1004960:	8809883a 	mov	r4,r17
 1004964:	900b883a 	mov	r5,r18
 1004968:	1004a8c0 	call	1004a8c <_malloc_r>
 100496c:	1009883a 	mov	r4,r2
 1004970:	10003126 	beq	r2,zero,1004a38 <__smakebuf_r+0x168>
 1004974:	80c0030b 	ldhu	r3,12(r16)
 1004978:	00804034 	movhi	r2,256
 100497c:	108e5c04 	addi	r2,r2,14704
 1004980:	88800f15 	stw	r2,60(r17)
 1004984:	18c02014 	ori	r3,r3,128
 1004988:	84800515 	stw	r18,20(r16)
 100498c:	80c0030d 	sth	r3,12(r16)
 1004990:	81000415 	stw	r4,16(r16)
 1004994:	81000015 	stw	r4,0(r16)
 1004998:	dfc01217 	ldw	ra,72(sp)
 100499c:	dc801117 	ldw	r18,68(sp)
 10049a0:	dc401017 	ldw	r17,64(sp)
 10049a4:	dc000f17 	ldw	r16,60(sp)
 10049a8:	dec01304 	addi	sp,sp,76
 10049ac:	f800283a 	ret
 10049b0:	80c0030b 	ldhu	r3,12(r16)
 10049b4:	1880200c 	andi	r2,r3,128
 10049b8:	10000426 	beq	r2,zero,10049cc <__smakebuf_r+0xfc>
 10049bc:	04801004 	movi	r18,64
 10049c0:	18820014 	ori	r2,r3,2048
 10049c4:	8080030d 	sth	r2,12(r16)
 10049c8:	003fe506 	br	1004960 <__smakebuf_r+0x90>
 10049cc:	04810004 	movi	r18,1024
 10049d0:	003ffb06 	br	10049c0 <__smakebuf_r+0xf0>
 10049d4:	8140038f 	ldh	r5,14(r16)
 10049d8:	8809883a 	mov	r4,r17
 10049dc:	1009ba00 	call	1009ba0 <_isatty_r>
 10049e0:	103fde26 	beq	r2,zero,100495c <__smakebuf_r+0x8c>
 10049e4:	8080030b 	ldhu	r2,12(r16)
 10049e8:	80c010c4 	addi	r3,r16,67
 10049ec:	04810004 	movi	r18,1024
 10049f0:	10800054 	ori	r2,r2,1
 10049f4:	8080030d 	sth	r2,12(r16)
 10049f8:	00800044 	movi	r2,1
 10049fc:	80c00415 	stw	r3,16(r16)
 1004a00:	80800515 	stw	r2,20(r16)
 1004a04:	80c00015 	stw	r3,0(r16)
 1004a08:	003fd506 	br	1004960 <__smakebuf_r+0x90>
 1004a0c:	80c00a17 	ldw	r3,40(r16)
 1004a10:	00804034 	movhi	r2,256
 1004a14:	10968d04 	addi	r2,r2,23092
 1004a18:	18bfcb1e 	bne	r3,r2,1004948 <__smakebuf_r+0x78>
 1004a1c:	8080030b 	ldhu	r2,12(r16)
 1004a20:	00c10004 	movi	r3,1024
 1004a24:	1825883a 	mov	r18,r3
 1004a28:	10c4b03a 	or	r2,r2,r3
 1004a2c:	8080030d 	sth	r2,12(r16)
 1004a30:	80c01315 	stw	r3,76(r16)
 1004a34:	003fca06 	br	1004960 <__smakebuf_r+0x90>
 1004a38:	8100030b 	ldhu	r4,12(r16)
 1004a3c:	2080800c 	andi	r2,r4,512
 1004a40:	103fb21e 	bne	r2,zero,100490c <__smakebuf_r+0x3c>
 1004a44:	80c010c4 	addi	r3,r16,67
 1004a48:	21000094 	ori	r4,r4,2
 1004a4c:	00800044 	movi	r2,1
 1004a50:	80800515 	stw	r2,20(r16)
 1004a54:	8100030d 	sth	r4,12(r16)
 1004a58:	80c00415 	stw	r3,16(r16)
 1004a5c:	80c00015 	stw	r3,0(r16)
 1004a60:	003faa06 	br	100490c <__smakebuf_r+0x3c>

01004a64 <free>:
 1004a64:	00804074 	movhi	r2,257
 1004a68:	108e7f04 	addi	r2,r2,14844
 1004a6c:	200b883a 	mov	r5,r4
 1004a70:	11000017 	ldw	r4,0(r2)
 1004a74:	1003d541 	jmpi	1003d54 <_free_r>

01004a78 <malloc>:
 1004a78:	00804074 	movhi	r2,257
 1004a7c:	108e7f04 	addi	r2,r2,14844
 1004a80:	200b883a 	mov	r5,r4
 1004a84:	11000017 	ldw	r4,0(r2)
 1004a88:	1004a8c1 	jmpi	1004a8c <_malloc_r>

01004a8c <_malloc_r>:
 1004a8c:	defff604 	addi	sp,sp,-40
 1004a90:	28c002c4 	addi	r3,r5,11
 1004a94:	00800584 	movi	r2,22
 1004a98:	dc800215 	stw	r18,8(sp)
 1004a9c:	dfc00915 	stw	ra,36(sp)
 1004aa0:	df000815 	stw	fp,32(sp)
 1004aa4:	ddc00715 	stw	r23,28(sp)
 1004aa8:	dd800615 	stw	r22,24(sp)
 1004aac:	dd400515 	stw	r21,20(sp)
 1004ab0:	dd000415 	stw	r20,16(sp)
 1004ab4:	dcc00315 	stw	r19,12(sp)
 1004ab8:	dc400115 	stw	r17,4(sp)
 1004abc:	dc000015 	stw	r16,0(sp)
 1004ac0:	2025883a 	mov	r18,r4
 1004ac4:	10c01236 	bltu	r2,r3,1004b10 <_malloc_r+0x84>
 1004ac8:	04400404 	movi	r17,16
 1004acc:	8940142e 	bgeu	r17,r5,1004b20 <_malloc_r+0x94>
 1004ad0:	00800304 	movi	r2,12
 1004ad4:	0007883a 	mov	r3,zero
 1004ad8:	90800015 	stw	r2,0(r18)
 1004adc:	1805883a 	mov	r2,r3
 1004ae0:	dfc00917 	ldw	ra,36(sp)
 1004ae4:	df000817 	ldw	fp,32(sp)
 1004ae8:	ddc00717 	ldw	r23,28(sp)
 1004aec:	dd800617 	ldw	r22,24(sp)
 1004af0:	dd400517 	ldw	r21,20(sp)
 1004af4:	dd000417 	ldw	r20,16(sp)
 1004af8:	dcc00317 	ldw	r19,12(sp)
 1004afc:	dc800217 	ldw	r18,8(sp)
 1004b00:	dc400117 	ldw	r17,4(sp)
 1004b04:	dc000017 	ldw	r16,0(sp)
 1004b08:	dec00a04 	addi	sp,sp,40
 1004b0c:	f800283a 	ret
 1004b10:	00bffe04 	movi	r2,-8
 1004b14:	18a2703a 	and	r17,r3,r2
 1004b18:	883fed16 	blt	r17,zero,1004ad0 <_malloc_r+0x44>
 1004b1c:	897fec36 	bltu	r17,r5,1004ad0 <_malloc_r+0x44>
 1004b20:	9009883a 	mov	r4,r18
 1004b24:	100ea900 	call	100ea90 <__malloc_lock>
 1004b28:	00807dc4 	movi	r2,503
 1004b2c:	14402b2e 	bgeu	r2,r17,1004bdc <_malloc_r+0x150>
 1004b30:	8806d27a 	srli	r3,r17,9
 1004b34:	18003f1e 	bne	r3,zero,1004c34 <_malloc_r+0x1a8>
 1004b38:	880cd0fa 	srli	r6,r17,3
 1004b3c:	300490fa 	slli	r2,r6,3
 1004b40:	02c04074 	movhi	r11,257
 1004b44:	5ac8c004 	addi	r11,r11,8960
 1004b48:	12cb883a 	add	r5,r2,r11
 1004b4c:	2c000317 	ldw	r16,12(r5)
 1004b50:	580f883a 	mov	r7,r11
 1004b54:	2c00041e 	bne	r5,r16,1004b68 <_malloc_r+0xdc>
 1004b58:	00000a06 	br	1004b84 <_malloc_r+0xf8>
 1004b5c:	1800860e 	bge	r3,zero,1004d78 <_malloc_r+0x2ec>
 1004b60:	84000317 	ldw	r16,12(r16)
 1004b64:	2c000726 	beq	r5,r16,1004b84 <_malloc_r+0xf8>
 1004b68:	80800117 	ldw	r2,4(r16)
 1004b6c:	00ffff04 	movi	r3,-4
 1004b70:	10c8703a 	and	r4,r2,r3
 1004b74:	2447c83a 	sub	r3,r4,r17
 1004b78:	008003c4 	movi	r2,15
 1004b7c:	10fff70e 	bge	r2,r3,1004b5c <_malloc_r+0xd0>
 1004b80:	31bfffc4 	addi	r6,r6,-1
 1004b84:	32400044 	addi	r9,r6,1
 1004b88:	02804074 	movhi	r10,257
 1004b8c:	5288c204 	addi	r10,r10,8968
 1004b90:	54000217 	ldw	r16,8(r10)
 1004b94:	8280a026 	beq	r16,r10,1004e18 <_malloc_r+0x38c>
 1004b98:	80800117 	ldw	r2,4(r16)
 1004b9c:	00ffff04 	movi	r3,-4
 1004ba0:	10ca703a 	and	r5,r2,r3
 1004ba4:	2c4dc83a 	sub	r6,r5,r17
 1004ba8:	008003c4 	movi	r2,15
 1004bac:	11808316 	blt	r2,r6,1004dbc <_malloc_r+0x330>
 1004bb0:	52800315 	stw	r10,12(r10)
 1004bb4:	52800215 	stw	r10,8(r10)
 1004bb8:	30002916 	blt	r6,zero,1004c60 <_malloc_r+0x1d4>
 1004bbc:	8147883a 	add	r3,r16,r5
 1004bc0:	18800117 	ldw	r2,4(r3)
 1004bc4:	9009883a 	mov	r4,r18
 1004bc8:	10800054 	ori	r2,r2,1
 1004bcc:	18800115 	stw	r2,4(r3)
 1004bd0:	100eab00 	call	100eab0 <__malloc_unlock>
 1004bd4:	80c00204 	addi	r3,r16,8
 1004bd8:	003fc006 	br	1004adc <_malloc_r+0x50>
 1004bdc:	02c04074 	movhi	r11,257
 1004be0:	5ac8c004 	addi	r11,r11,8960
 1004be4:	8ac5883a 	add	r2,r17,r11
 1004be8:	14000317 	ldw	r16,12(r2)
 1004bec:	580f883a 	mov	r7,r11
 1004bf0:	8806d0fa 	srli	r3,r17,3
 1004bf4:	14006c26 	beq	r2,r16,1004da8 <_malloc_r+0x31c>
 1004bf8:	80c00117 	ldw	r3,4(r16)
 1004bfc:	00bfff04 	movi	r2,-4
 1004c00:	81800317 	ldw	r6,12(r16)
 1004c04:	1886703a 	and	r3,r3,r2
 1004c08:	80c7883a 	add	r3,r16,r3
 1004c0c:	18800117 	ldw	r2,4(r3)
 1004c10:	81400217 	ldw	r5,8(r16)
 1004c14:	9009883a 	mov	r4,r18
 1004c18:	10800054 	ori	r2,r2,1
 1004c1c:	18800115 	stw	r2,4(r3)
 1004c20:	31400215 	stw	r5,8(r6)
 1004c24:	29800315 	stw	r6,12(r5)
 1004c28:	100eab00 	call	100eab0 <__malloc_unlock>
 1004c2c:	80c00204 	addi	r3,r16,8
 1004c30:	003faa06 	br	1004adc <_malloc_r+0x50>
 1004c34:	00800104 	movi	r2,4
 1004c38:	10c0052e 	bgeu	r2,r3,1004c50 <_malloc_r+0x1c4>
 1004c3c:	00800504 	movi	r2,20
 1004c40:	10c07836 	bltu	r2,r3,1004e24 <_malloc_r+0x398>
 1004c44:	198016c4 	addi	r6,r3,91
 1004c48:	300490fa 	slli	r2,r6,3
 1004c4c:	003fbc06 	br	1004b40 <_malloc_r+0xb4>
 1004c50:	8804d1ba 	srli	r2,r17,6
 1004c54:	11800e04 	addi	r6,r2,56
 1004c58:	300490fa 	slli	r2,r6,3
 1004c5c:	003fb806 	br	1004b40 <_malloc_r+0xb4>
 1004c60:	00807fc4 	movi	r2,511
 1004c64:	1140bb36 	bltu	r2,r5,1004f54 <_malloc_r+0x4c8>
 1004c68:	2806d0fa 	srli	r3,r5,3
 1004c6c:	573ffe04 	addi	fp,r10,-8
 1004c70:	00800044 	movi	r2,1
 1004c74:	180890fa 	slli	r4,r3,3
 1004c78:	1807d0ba 	srai	r3,r3,2
 1004c7c:	e1c00117 	ldw	r7,4(fp)
 1004c80:	5909883a 	add	r4,r11,r4
 1004c84:	21400217 	ldw	r5,8(r4)
 1004c88:	10c4983a 	sll	r2,r2,r3
 1004c8c:	81000315 	stw	r4,12(r16)
 1004c90:	81400215 	stw	r5,8(r16)
 1004c94:	388eb03a 	or	r7,r7,r2
 1004c98:	2c000315 	stw	r16,12(r5)
 1004c9c:	24000215 	stw	r16,8(r4)
 1004ca0:	e1c00115 	stw	r7,4(fp)
 1004ca4:	4807883a 	mov	r3,r9
 1004ca8:	4800cd16 	blt	r9,zero,1004fe0 <_malloc_r+0x554>
 1004cac:	1807d0ba 	srai	r3,r3,2
 1004cb0:	00800044 	movi	r2,1
 1004cb4:	10c8983a 	sll	r4,r2,r3
 1004cb8:	39004436 	bltu	r7,r4,1004dcc <_malloc_r+0x340>
 1004cbc:	21c4703a 	and	r2,r4,r7
 1004cc0:	10000a1e 	bne	r2,zero,1004cec <_malloc_r+0x260>
 1004cc4:	2109883a 	add	r4,r4,r4
 1004cc8:	00bfff04 	movi	r2,-4
 1004ccc:	4884703a 	and	r2,r9,r2
 1004cd0:	3906703a 	and	r3,r7,r4
 1004cd4:	12400104 	addi	r9,r2,4
 1004cd8:	1800041e 	bne	r3,zero,1004cec <_malloc_r+0x260>
 1004cdc:	2109883a 	add	r4,r4,r4
 1004ce0:	3904703a 	and	r2,r7,r4
 1004ce4:	4a400104 	addi	r9,r9,4
 1004ce8:	103ffc26 	beq	r2,zero,1004cdc <_malloc_r+0x250>
 1004cec:	480490fa 	slli	r2,r9,3
 1004cf0:	4819883a 	mov	r12,r9
 1004cf4:	023fff04 	movi	r8,-4
 1004cf8:	589b883a 	add	r13,r11,r2
 1004cfc:	6807883a 	mov	r3,r13
 1004d00:	014003c4 	movi	r5,15
 1004d04:	1c000317 	ldw	r16,12(r3)
 1004d08:	1c00041e 	bne	r3,r16,1004d1c <_malloc_r+0x290>
 1004d0c:	0000a706 	br	1004fac <_malloc_r+0x520>
 1004d10:	3000ab0e 	bge	r6,zero,1004fc0 <_malloc_r+0x534>
 1004d14:	84000317 	ldw	r16,12(r16)
 1004d18:	1c00a426 	beq	r3,r16,1004fac <_malloc_r+0x520>
 1004d1c:	80800117 	ldw	r2,4(r16)
 1004d20:	1204703a 	and	r2,r2,r8
 1004d24:	144dc83a 	sub	r6,r2,r17
 1004d28:	29bff90e 	bge	r5,r6,1004d10 <_malloc_r+0x284>
 1004d2c:	81000317 	ldw	r4,12(r16)
 1004d30:	80c00217 	ldw	r3,8(r16)
 1004d34:	89400054 	ori	r5,r17,1
 1004d38:	8445883a 	add	r2,r16,r17
 1004d3c:	20c00215 	stw	r3,8(r4)
 1004d40:	19000315 	stw	r4,12(r3)
 1004d44:	81400115 	stw	r5,4(r16)
 1004d48:	1187883a 	add	r3,r2,r6
 1004d4c:	31000054 	ori	r4,r6,1
 1004d50:	50800315 	stw	r2,12(r10)
 1004d54:	50800215 	stw	r2,8(r10)
 1004d58:	19800015 	stw	r6,0(r3)
 1004d5c:	11000115 	stw	r4,4(r2)
 1004d60:	12800215 	stw	r10,8(r2)
 1004d64:	12800315 	stw	r10,12(r2)
 1004d68:	9009883a 	mov	r4,r18
 1004d6c:	100eab00 	call	100eab0 <__malloc_unlock>
 1004d70:	80c00204 	addi	r3,r16,8
 1004d74:	003f5906 	br	1004adc <_malloc_r+0x50>
 1004d78:	8109883a 	add	r4,r16,r4
 1004d7c:	20800117 	ldw	r2,4(r4)
 1004d80:	80c00217 	ldw	r3,8(r16)
 1004d84:	81400317 	ldw	r5,12(r16)
 1004d88:	10800054 	ori	r2,r2,1
 1004d8c:	20800115 	stw	r2,4(r4)
 1004d90:	28c00215 	stw	r3,8(r5)
 1004d94:	19400315 	stw	r5,12(r3)
 1004d98:	9009883a 	mov	r4,r18
 1004d9c:	100eab00 	call	100eab0 <__malloc_unlock>
 1004da0:	80c00204 	addi	r3,r16,8
 1004da4:	003f4d06 	br	1004adc <_malloc_r+0x50>
 1004da8:	80800204 	addi	r2,r16,8
 1004dac:	14000317 	ldw	r16,12(r2)
 1004db0:	143f911e 	bne	r2,r16,1004bf8 <_malloc_r+0x16c>
 1004db4:	1a400084 	addi	r9,r3,2
 1004db8:	003f7306 	br	1004b88 <_malloc_r+0xfc>
 1004dbc:	88c00054 	ori	r3,r17,1
 1004dc0:	8445883a 	add	r2,r16,r17
 1004dc4:	80c00115 	stw	r3,4(r16)
 1004dc8:	003fdf06 	br	1004d48 <_malloc_r+0x2bc>
 1004dcc:	e4000217 	ldw	r16,8(fp)
 1004dd0:	00bfff04 	movi	r2,-4
 1004dd4:	80c00117 	ldw	r3,4(r16)
 1004dd8:	802d883a 	mov	r22,r16
 1004ddc:	18aa703a 	and	r21,r3,r2
 1004de0:	ac401636 	bltu	r21,r17,1004e3c <_malloc_r+0x3b0>
 1004de4:	ac49c83a 	sub	r4,r21,r17
 1004de8:	008003c4 	movi	r2,15
 1004dec:	1100130e 	bge	r2,r4,1004e3c <_malloc_r+0x3b0>
 1004df0:	88800054 	ori	r2,r17,1
 1004df4:	8447883a 	add	r3,r16,r17
 1004df8:	80800115 	stw	r2,4(r16)
 1004dfc:	20800054 	ori	r2,r4,1
 1004e00:	18800115 	stw	r2,4(r3)
 1004e04:	e0c00215 	stw	r3,8(fp)
 1004e08:	9009883a 	mov	r4,r18
 1004e0c:	100eab00 	call	100eab0 <__malloc_unlock>
 1004e10:	80c00204 	addi	r3,r16,8
 1004e14:	003f3106 	br	1004adc <_malloc_r+0x50>
 1004e18:	39c00117 	ldw	r7,4(r7)
 1004e1c:	573ffe04 	addi	fp,r10,-8
 1004e20:	003fa006 	br	1004ca4 <_malloc_r+0x218>
 1004e24:	00801504 	movi	r2,84
 1004e28:	10c06736 	bltu	r2,r3,1004fc8 <_malloc_r+0x53c>
 1004e2c:	8804d33a 	srli	r2,r17,12
 1004e30:	11801b84 	addi	r6,r2,110
 1004e34:	300490fa 	slli	r2,r6,3
 1004e38:	003f4106 	br	1004b40 <_malloc_r+0xb4>
 1004e3c:	d0a6f117 	ldw	r2,-25660(gp)
 1004e40:	d0e00a17 	ldw	r3,-32728(gp)
 1004e44:	053fffc4 	movi	r20,-1
 1004e48:	10800404 	addi	r2,r2,16
 1004e4c:	88a7883a 	add	r19,r17,r2
 1004e50:	1d000326 	beq	r3,r20,1004e60 <_malloc_r+0x3d4>
 1004e54:	98c3ffc4 	addi	r3,r19,4095
 1004e58:	00bc0004 	movi	r2,-4096
 1004e5c:	18a6703a 	and	r19,r3,r2
 1004e60:	9009883a 	mov	r4,r18
 1004e64:	980b883a 	mov	r5,r19
 1004e68:	100566c0 	call	100566c <_sbrk_r>
 1004e6c:	1009883a 	mov	r4,r2
 1004e70:	15000426 	beq	r2,r20,1004e84 <_malloc_r+0x3f8>
 1004e74:	854b883a 	add	r5,r16,r21
 1004e78:	1029883a 	mov	r20,r2
 1004e7c:	11405a2e 	bgeu	r2,r5,1004fe8 <_malloc_r+0x55c>
 1004e80:	87000c26 	beq	r16,fp,1004eb4 <_malloc_r+0x428>
 1004e84:	e4000217 	ldw	r16,8(fp)
 1004e88:	80c00117 	ldw	r3,4(r16)
 1004e8c:	00bfff04 	movi	r2,-4
 1004e90:	1884703a 	and	r2,r3,r2
 1004e94:	14400336 	bltu	r2,r17,1004ea4 <_malloc_r+0x418>
 1004e98:	1449c83a 	sub	r4,r2,r17
 1004e9c:	008003c4 	movi	r2,15
 1004ea0:	113fd316 	blt	r2,r4,1004df0 <_malloc_r+0x364>
 1004ea4:	9009883a 	mov	r4,r18
 1004ea8:	100eab00 	call	100eab0 <__malloc_unlock>
 1004eac:	0007883a 	mov	r3,zero
 1004eb0:	003f0a06 	br	1004adc <_malloc_r+0x50>
 1004eb4:	05c04074 	movhi	r23,257
 1004eb8:	bdd77a04 	addi	r23,r23,24040
 1004ebc:	b8800017 	ldw	r2,0(r23)
 1004ec0:	988d883a 	add	r6,r19,r2
 1004ec4:	b9800015 	stw	r6,0(r23)
 1004ec8:	d0e00a17 	ldw	r3,-32728(gp)
 1004ecc:	00bfffc4 	movi	r2,-1
 1004ed0:	18808e26 	beq	r3,r2,100510c <_malloc_r+0x680>
 1004ed4:	2145c83a 	sub	r2,r4,r5
 1004ed8:	3085883a 	add	r2,r6,r2
 1004edc:	b8800015 	stw	r2,0(r23)
 1004ee0:	20c001cc 	andi	r3,r4,7
 1004ee4:	18005f1e 	bne	r3,zero,1005064 <_malloc_r+0x5d8>
 1004ee8:	000b883a 	mov	r5,zero
 1004eec:	a4c5883a 	add	r2,r20,r19
 1004ef0:	1083ffcc 	andi	r2,r2,4095
 1004ef4:	00c40004 	movi	r3,4096
 1004ef8:	1887c83a 	sub	r3,r3,r2
 1004efc:	28e7883a 	add	r19,r5,r3
 1004f00:	9009883a 	mov	r4,r18
 1004f04:	980b883a 	mov	r5,r19
 1004f08:	100566c0 	call	100566c <_sbrk_r>
 1004f0c:	1007883a 	mov	r3,r2
 1004f10:	00bfffc4 	movi	r2,-1
 1004f14:	18807a26 	beq	r3,r2,1005100 <_malloc_r+0x674>
 1004f18:	1d05c83a 	sub	r2,r3,r20
 1004f1c:	9885883a 	add	r2,r19,r2
 1004f20:	10c00054 	ori	r3,r2,1
 1004f24:	b8800017 	ldw	r2,0(r23)
 1004f28:	a021883a 	mov	r16,r20
 1004f2c:	a0c00115 	stw	r3,4(r20)
 1004f30:	9885883a 	add	r2,r19,r2
 1004f34:	b8800015 	stw	r2,0(r23)
 1004f38:	e5000215 	stw	r20,8(fp)
 1004f3c:	b7003626 	beq	r22,fp,1005018 <_malloc_r+0x58c>
 1004f40:	018003c4 	movi	r6,15
 1004f44:	35404b36 	bltu	r6,r21,1005074 <_malloc_r+0x5e8>
 1004f48:	00800044 	movi	r2,1
 1004f4c:	a0800115 	stw	r2,4(r20)
 1004f50:	003fcd06 	br	1004e88 <_malloc_r+0x3fc>
 1004f54:	2808d27a 	srli	r4,r5,9
 1004f58:	2000371e 	bne	r4,zero,1005038 <_malloc_r+0x5ac>
 1004f5c:	2808d0fa 	srli	r4,r5,3
 1004f60:	200690fa 	slli	r3,r4,3
 1004f64:	1ad1883a 	add	r8,r3,r11
 1004f68:	41800217 	ldw	r6,8(r8)
 1004f6c:	41805b26 	beq	r8,r6,10050dc <_malloc_r+0x650>
 1004f70:	30800117 	ldw	r2,4(r6)
 1004f74:	00ffff04 	movi	r3,-4
 1004f78:	10c4703a 	and	r2,r2,r3
 1004f7c:	2880022e 	bgeu	r5,r2,1004f88 <_malloc_r+0x4fc>
 1004f80:	31800217 	ldw	r6,8(r6)
 1004f84:	41bffa1e 	bne	r8,r6,1004f70 <_malloc_r+0x4e4>
 1004f88:	32000317 	ldw	r8,12(r6)
 1004f8c:	39c00117 	ldw	r7,4(r7)
 1004f90:	82000315 	stw	r8,12(r16)
 1004f94:	81800215 	stw	r6,8(r16)
 1004f98:	07004074 	movhi	fp,257
 1004f9c:	e708c004 	addi	fp,fp,8960
 1004fa0:	34000315 	stw	r16,12(r6)
 1004fa4:	44000215 	stw	r16,8(r8)
 1004fa8:	003f3e06 	br	1004ca4 <_malloc_r+0x218>
 1004fac:	63000044 	addi	r12,r12,1
 1004fb0:	608000cc 	andi	r2,r12,3
 1004fb4:	10005d26 	beq	r2,zero,100512c <_malloc_r+0x6a0>
 1004fb8:	18c00204 	addi	r3,r3,8
 1004fbc:	003f5106 	br	1004d04 <_malloc_r+0x278>
 1004fc0:	8089883a 	add	r4,r16,r2
 1004fc4:	003f6d06 	br	1004d7c <_malloc_r+0x2f0>
 1004fc8:	00805504 	movi	r2,340
 1004fcc:	10c02036 	bltu	r2,r3,1005050 <_malloc_r+0x5c4>
 1004fd0:	8804d3fa 	srli	r2,r17,15
 1004fd4:	11801dc4 	addi	r6,r2,119
 1004fd8:	300490fa 	slli	r2,r6,3
 1004fdc:	003ed806 	br	1004b40 <_malloc_r+0xb4>
 1004fe0:	48c000c4 	addi	r3,r9,3
 1004fe4:	003f3106 	br	1004cac <_malloc_r+0x220>
 1004fe8:	05c04074 	movhi	r23,257
 1004fec:	bdd77a04 	addi	r23,r23,24040
 1004ff0:	b8800017 	ldw	r2,0(r23)
 1004ff4:	988d883a 	add	r6,r19,r2
 1004ff8:	b9800015 	stw	r6,0(r23)
 1004ffc:	293fb21e 	bne	r5,r4,1004ec8 <_malloc_r+0x43c>
 1005000:	2083ffcc 	andi	r2,r4,4095
 1005004:	103fb01e 	bne	r2,zero,1004ec8 <_malloc_r+0x43c>
 1005008:	e4000217 	ldw	r16,8(fp)
 100500c:	9d45883a 	add	r2,r19,r21
 1005010:	10800054 	ori	r2,r2,1
 1005014:	80800115 	stw	r2,4(r16)
 1005018:	b8c00017 	ldw	r3,0(r23)
 100501c:	d0a6f217 	ldw	r2,-25656(gp)
 1005020:	10c0012e 	bgeu	r2,r3,1005028 <_malloc_r+0x59c>
 1005024:	d0e6f215 	stw	r3,-25656(gp)
 1005028:	d0a6f317 	ldw	r2,-25652(gp)
 100502c:	10ff962e 	bgeu	r2,r3,1004e88 <_malloc_r+0x3fc>
 1005030:	d0e6f315 	stw	r3,-25652(gp)
 1005034:	003f9406 	br	1004e88 <_malloc_r+0x3fc>
 1005038:	00800104 	movi	r2,4
 100503c:	11001e36 	bltu	r2,r4,10050b8 <_malloc_r+0x62c>
 1005040:	2804d1ba 	srli	r2,r5,6
 1005044:	11000e04 	addi	r4,r2,56
 1005048:	200690fa 	slli	r3,r4,3
 100504c:	003fc506 	br	1004f64 <_malloc_r+0x4d8>
 1005050:	00815504 	movi	r2,1364
 1005054:	10c01d2e 	bgeu	r2,r3,10050cc <_malloc_r+0x640>
 1005058:	01801f84 	movi	r6,126
 100505c:	0080fc04 	movi	r2,1008
 1005060:	003eb706 	br	1004b40 <_malloc_r+0xb4>
 1005064:	00800204 	movi	r2,8
 1005068:	10cbc83a 	sub	r5,r2,r3
 100506c:	2169883a 	add	r20,r4,r5
 1005070:	003f9e06 	br	1004eec <_malloc_r+0x460>
 1005074:	00bffe04 	movi	r2,-8
 1005078:	a93ffd04 	addi	r4,r21,-12
 100507c:	2088703a 	and	r4,r4,r2
 1005080:	b10b883a 	add	r5,r22,r4
 1005084:	00c00144 	movi	r3,5
 1005088:	28c00215 	stw	r3,8(r5)
 100508c:	28c00115 	stw	r3,4(r5)
 1005090:	b0800117 	ldw	r2,4(r22)
 1005094:	1080004c 	andi	r2,r2,1
 1005098:	2084b03a 	or	r2,r4,r2
 100509c:	b0800115 	stw	r2,4(r22)
 10050a0:	313fdd2e 	bgeu	r6,r4,1005018 <_malloc_r+0x58c>
 10050a4:	b1400204 	addi	r5,r22,8
 10050a8:	9009883a 	mov	r4,r18
 10050ac:	1003d540 	call	1003d54 <_free_r>
 10050b0:	e4000217 	ldw	r16,8(fp)
 10050b4:	003fd806 	br	1005018 <_malloc_r+0x58c>
 10050b8:	00800504 	movi	r2,20
 10050bc:	11001536 	bltu	r2,r4,1005114 <_malloc_r+0x688>
 10050c0:	210016c4 	addi	r4,r4,91
 10050c4:	200690fa 	slli	r3,r4,3
 10050c8:	003fa606 	br	1004f64 <_malloc_r+0x4d8>
 10050cc:	8804d4ba 	srli	r2,r17,18
 10050d0:	11801f04 	addi	r6,r2,124
 10050d4:	300490fa 	slli	r2,r6,3
 10050d8:	003e9906 	br	1004b40 <_malloc_r+0xb4>
 10050dc:	2009d0ba 	srai	r4,r4,2
 10050e0:	01404074 	movhi	r5,257
 10050e4:	2948c004 	addi	r5,r5,8960
 10050e8:	00c00044 	movi	r3,1
 10050ec:	28800117 	ldw	r2,4(r5)
 10050f0:	1906983a 	sll	r3,r3,r4
 10050f4:	10c4b03a 	or	r2,r2,r3
 10050f8:	28800115 	stw	r2,4(r5)
 10050fc:	003fa306 	br	1004f8c <_malloc_r+0x500>
 1005100:	0027883a 	mov	r19,zero
 1005104:	00c00044 	movi	r3,1
 1005108:	003f8606 	br	1004f24 <_malloc_r+0x498>
 100510c:	d1200a15 	stw	r4,-32728(gp)
 1005110:	003f7306 	br	1004ee0 <_malloc_r+0x454>
 1005114:	00801504 	movi	r2,84
 1005118:	11001936 	bltu	r2,r4,1005180 <_malloc_r+0x6f4>
 100511c:	2804d33a 	srli	r2,r5,12
 1005120:	11001b84 	addi	r4,r2,110
 1005124:	200690fa 	slli	r3,r4,3
 1005128:	003f8e06 	br	1004f64 <_malloc_r+0x4d8>
 100512c:	480b883a 	mov	r5,r9
 1005130:	6807883a 	mov	r3,r13
 1005134:	288000cc 	andi	r2,r5,3
 1005138:	18fffe04 	addi	r3,r3,-8
 100513c:	297fffc4 	addi	r5,r5,-1
 1005140:	10001526 	beq	r2,zero,1005198 <_malloc_r+0x70c>
 1005144:	18800217 	ldw	r2,8(r3)
 1005148:	10fffa26 	beq	r2,r3,1005134 <_malloc_r+0x6a8>
 100514c:	2109883a 	add	r4,r4,r4
 1005150:	393f1e36 	bltu	r7,r4,1004dcc <_malloc_r+0x340>
 1005154:	203f1d26 	beq	r4,zero,1004dcc <_malloc_r+0x340>
 1005158:	21c4703a 	and	r2,r4,r7
 100515c:	10000226 	beq	r2,zero,1005168 <_malloc_r+0x6dc>
 1005160:	6013883a 	mov	r9,r12
 1005164:	003ee106 	br	1004cec <_malloc_r+0x260>
 1005168:	2109883a 	add	r4,r4,r4
 100516c:	3904703a 	and	r2,r7,r4
 1005170:	63000104 	addi	r12,r12,4
 1005174:	103ffc26 	beq	r2,zero,1005168 <_malloc_r+0x6dc>
 1005178:	6013883a 	mov	r9,r12
 100517c:	003edb06 	br	1004cec <_malloc_r+0x260>
 1005180:	00805504 	movi	r2,340
 1005184:	11000836 	bltu	r2,r4,10051a8 <_malloc_r+0x71c>
 1005188:	2804d3fa 	srli	r2,r5,15
 100518c:	11001dc4 	addi	r4,r2,119
 1005190:	200690fa 	slli	r3,r4,3
 1005194:	003f7306 	br	1004f64 <_malloc_r+0x4d8>
 1005198:	0104303a 	nor	r2,zero,r4
 100519c:	388e703a 	and	r7,r7,r2
 10051a0:	e1c00115 	stw	r7,4(fp)
 10051a4:	003fe906 	br	100514c <_malloc_r+0x6c0>
 10051a8:	00815504 	movi	r2,1364
 10051ac:	1100032e 	bgeu	r2,r4,10051bc <_malloc_r+0x730>
 10051b0:	01001f84 	movi	r4,126
 10051b4:	00c0fc04 	movi	r3,1008
 10051b8:	003f6a06 	br	1004f64 <_malloc_r+0x4d8>
 10051bc:	2804d4ba 	srli	r2,r5,18
 10051c0:	11001f04 	addi	r4,r2,124
 10051c4:	200690fa 	slli	r3,r4,3
 10051c8:	003f6606 	br	1004f64 <_malloc_r+0x4d8>

010051cc <memset>:
 10051cc:	008000c4 	movi	r2,3
 10051d0:	29403fcc 	andi	r5,r5,255
 10051d4:	2007883a 	mov	r3,r4
 10051d8:	1180022e 	bgeu	r2,r6,10051e4 <memset+0x18>
 10051dc:	2084703a 	and	r2,r4,r2
 10051e0:	10000826 	beq	r2,zero,1005204 <memset+0x38>
 10051e4:	30000526 	beq	r6,zero,10051fc <memset+0x30>
 10051e8:	2805883a 	mov	r2,r5
 10051ec:	30cd883a 	add	r6,r6,r3
 10051f0:	18800005 	stb	r2,0(r3)
 10051f4:	18c00044 	addi	r3,r3,1
 10051f8:	19bffd1e 	bne	r3,r6,10051f0 <memset+0x24>
 10051fc:	2005883a 	mov	r2,r4
 1005200:	f800283a 	ret
 1005204:	2804923a 	slli	r2,r5,8
 1005208:	020003c4 	movi	r8,15
 100520c:	200f883a 	mov	r7,r4
 1005210:	2884b03a 	or	r2,r5,r2
 1005214:	1006943a 	slli	r3,r2,16
 1005218:	10c6b03a 	or	r3,r2,r3
 100521c:	41800a2e 	bgeu	r8,r6,1005248 <memset+0x7c>
 1005220:	4005883a 	mov	r2,r8
 1005224:	31bffc04 	addi	r6,r6,-16
 1005228:	38c00015 	stw	r3,0(r7)
 100522c:	38c00115 	stw	r3,4(r7)
 1005230:	38c00215 	stw	r3,8(r7)
 1005234:	38c00315 	stw	r3,12(r7)
 1005238:	39c00404 	addi	r7,r7,16
 100523c:	11bff936 	bltu	r2,r6,1005224 <memset+0x58>
 1005240:	008000c4 	movi	r2,3
 1005244:	1180052e 	bgeu	r2,r6,100525c <memset+0x90>
 1005248:	31bfff04 	addi	r6,r6,-4
 100524c:	008000c4 	movi	r2,3
 1005250:	38c00015 	stw	r3,0(r7)
 1005254:	39c00104 	addi	r7,r7,4
 1005258:	11bffb36 	bltu	r2,r6,1005248 <memset+0x7c>
 100525c:	3807883a 	mov	r3,r7
 1005260:	003fe006 	br	10051e4 <memset+0x18>

01005264 <_open_r>:
 1005264:	defffd04 	addi	sp,sp,-12
 1005268:	dc000015 	stw	r16,0(sp)
 100526c:	04004074 	movhi	r16,257
 1005270:	84156804 	addi	r16,r16,21920
 1005274:	dc400115 	stw	r17,4(sp)
 1005278:	80000015 	stw	zero,0(r16)
 100527c:	2023883a 	mov	r17,r4
 1005280:	2809883a 	mov	r4,r5
 1005284:	300b883a 	mov	r5,r6
 1005288:	380d883a 	mov	r6,r7
 100528c:	dfc00215 	stw	ra,8(sp)
 1005290:	100ebc80 	call	100ebc8 <open>
 1005294:	1007883a 	mov	r3,r2
 1005298:	00bfffc4 	movi	r2,-1
 100529c:	18800626 	beq	r3,r2,10052b8 <_open_r+0x54>
 10052a0:	1805883a 	mov	r2,r3
 10052a4:	dfc00217 	ldw	ra,8(sp)
 10052a8:	dc400117 	ldw	r17,4(sp)
 10052ac:	dc000017 	ldw	r16,0(sp)
 10052b0:	dec00304 	addi	sp,sp,12
 10052b4:	f800283a 	ret
 10052b8:	80800017 	ldw	r2,0(r16)
 10052bc:	103ff826 	beq	r2,zero,10052a0 <_open_r+0x3c>
 10052c0:	88800015 	stw	r2,0(r17)
 10052c4:	1805883a 	mov	r2,r3
 10052c8:	dfc00217 	ldw	ra,8(sp)
 10052cc:	dc400117 	ldw	r17,4(sp)
 10052d0:	dc000017 	ldw	r16,0(sp)
 10052d4:	dec00304 	addi	sp,sp,12
 10052d8:	f800283a 	ret

010052dc <printf>:
 10052dc:	defffb04 	addi	sp,sp,-20
 10052e0:	dfc00115 	stw	ra,4(sp)
 10052e4:	d9400215 	stw	r5,8(sp)
 10052e8:	d9800315 	stw	r6,12(sp)
 10052ec:	d9c00415 	stw	r7,16(sp)
 10052f0:	00804074 	movhi	r2,257
 10052f4:	108e7f04 	addi	r2,r2,14844
 10052f8:	10c00017 	ldw	r3,0(r2)
 10052fc:	200b883a 	mov	r5,r4
 1005300:	d8800204 	addi	r2,sp,8
 1005304:	19000217 	ldw	r4,8(r3)
 1005308:	100d883a 	mov	r6,r2
 100530c:	d8800015 	stw	r2,0(sp)
 1005310:	1007c240 	call	1007c24 <__vfprintf_internal>
 1005314:	dfc00117 	ldw	ra,4(sp)
 1005318:	dec00504 	addi	sp,sp,20
 100531c:	f800283a 	ret

01005320 <_printf_r>:
 1005320:	defffc04 	addi	sp,sp,-16
 1005324:	dfc00115 	stw	ra,4(sp)
 1005328:	d9800215 	stw	r6,8(sp)
 100532c:	d9c00315 	stw	r7,12(sp)
 1005330:	280d883a 	mov	r6,r5
 1005334:	21400217 	ldw	r5,8(r4)
 1005338:	d8c00204 	addi	r3,sp,8
 100533c:	180f883a 	mov	r7,r3
 1005340:	d8c00015 	stw	r3,0(sp)
 1005344:	1005d600 	call	1005d60 <___vfprintf_internal_r>
 1005348:	dfc00117 	ldw	ra,4(sp)
 100534c:	dec00404 	addi	sp,sp,16
 1005350:	f800283a 	ret

01005354 <putchar>:
 1005354:	00804074 	movhi	r2,257
 1005358:	108e7f04 	addi	r2,r2,14844
 100535c:	11800017 	ldw	r6,0(r2)
 1005360:	200b883a 	mov	r5,r4
 1005364:	3009883a 	mov	r4,r6
 1005368:	31800217 	ldw	r6,8(r6)
 100536c:	100b1401 	jmpi	100b140 <_putc_r>

01005370 <_putchar_r>:
 1005370:	21800217 	ldw	r6,8(r4)
 1005374:	100b1401 	jmpi	100b140 <_putc_r>

01005378 <_puts_r>:
 1005378:	defff604 	addi	sp,sp,-40
 100537c:	dc400715 	stw	r17,28(sp)
 1005380:	2023883a 	mov	r17,r4
 1005384:	2809883a 	mov	r4,r5
 1005388:	dfc00915 	stw	ra,36(sp)
 100538c:	dcc00815 	stw	r19,32(sp)
 1005390:	2827883a 	mov	r19,r5
 1005394:	1005c940 	call	1005c94 <strlen>
 1005398:	89400217 	ldw	r5,8(r17)
 100539c:	00c04074 	movhi	r3,257
 10053a0:	18c6e704 	addi	r3,r3,7068
 10053a4:	01c00044 	movi	r7,1
 10053a8:	12000044 	addi	r8,r2,1
 10053ac:	d8c00515 	stw	r3,20(sp)
 10053b0:	d9c00615 	stw	r7,24(sp)
 10053b4:	d8c00304 	addi	r3,sp,12
 10053b8:	01c00084 	movi	r7,2
 10053bc:	8809883a 	mov	r4,r17
 10053c0:	d80d883a 	mov	r6,sp
 10053c4:	d8c00015 	stw	r3,0(sp)
 10053c8:	dcc00315 	stw	r19,12(sp)
 10053cc:	da000215 	stw	r8,8(sp)
 10053d0:	d9c00115 	stw	r7,4(sp)
 10053d4:	d8800415 	stw	r2,16(sp)
 10053d8:	10097040 	call	1009704 <__sfvwrite_r>
 10053dc:	00ffffc4 	movi	r3,-1
 10053e0:	10000626 	beq	r2,zero,10053fc <_puts_r+0x84>
 10053e4:	1805883a 	mov	r2,r3
 10053e8:	dfc00917 	ldw	ra,36(sp)
 10053ec:	dcc00817 	ldw	r19,32(sp)
 10053f0:	dc400717 	ldw	r17,28(sp)
 10053f4:	dec00a04 	addi	sp,sp,40
 10053f8:	f800283a 	ret
 10053fc:	00c00284 	movi	r3,10
 1005400:	1805883a 	mov	r2,r3
 1005404:	dfc00917 	ldw	ra,36(sp)
 1005408:	dcc00817 	ldw	r19,32(sp)
 100540c:	dc400717 	ldw	r17,28(sp)
 1005410:	dec00a04 	addi	sp,sp,40
 1005414:	f800283a 	ret

01005418 <puts>:
 1005418:	00804074 	movhi	r2,257
 100541c:	108e7f04 	addi	r2,r2,14844
 1005420:	200b883a 	mov	r5,r4
 1005424:	11000017 	ldw	r4,0(r2)
 1005428:	10053781 	jmpi	1005378 <_puts_r>

0100542c <__srefill_r>:
 100542c:	defffd04 	addi	sp,sp,-12
 1005430:	dc400115 	stw	r17,4(sp)
 1005434:	dc000015 	stw	r16,0(sp)
 1005438:	dfc00215 	stw	ra,8(sp)
 100543c:	2023883a 	mov	r17,r4
 1005440:	2821883a 	mov	r16,r5
 1005444:	20000226 	beq	r4,zero,1005450 <__srefill_r+0x24>
 1005448:	20800e17 	ldw	r2,56(r4)
 100544c:	10004126 	beq	r2,zero,1005554 <__srefill_r+0x128>
 1005450:	80c0030b 	ldhu	r3,12(r16)
 1005454:	80000115 	stw	zero,4(r16)
 1005458:	1880080c 	andi	r2,r3,32
 100545c:	1000361e 	bne	r2,zero,1005538 <__srefill_r+0x10c>
 1005460:	1880010c 	andi	r2,r3,4
 1005464:	1000211e 	bne	r2,zero,10054ec <__srefill_r+0xc0>
 1005468:	1880040c 	andi	r2,r3,16
 100546c:	10005026 	beq	r2,zero,10055b0 <__srefill_r+0x184>
 1005470:	1880020c 	andi	r2,r3,8
 1005474:	1000541e 	bne	r2,zero,10055c8 <__srefill_r+0x19c>
 1005478:	8080030b 	ldhu	r2,12(r16)
 100547c:	10800114 	ori	r2,r2,4
 1005480:	8080030d 	sth	r2,12(r16)
 1005484:	80800417 	ldw	r2,16(r16)
 1005488:	10004526 	beq	r2,zero,10055a0 <__srefill_r+0x174>
 100548c:	8080030b 	ldhu	r2,12(r16)
 1005490:	108000cc 	andi	r2,r2,3
 1005494:	1000361e 	bne	r2,zero,1005570 <__srefill_r+0x144>
 1005498:	81800417 	ldw	r6,16(r16)
 100549c:	80c00817 	ldw	r3,32(r16)
 10054a0:	81400717 	ldw	r5,28(r16)
 10054a4:	81c00517 	ldw	r7,20(r16)
 10054a8:	8809883a 	mov	r4,r17
 10054ac:	81800015 	stw	r6,0(r16)
 10054b0:	183ee83a 	callr	r3
 10054b4:	80c0030b 	ldhu	r3,12(r16)
 10054b8:	1009883a 	mov	r4,r2
 10054bc:	80800115 	stw	r2,4(r16)
 10054c0:	00b7ffc4 	movi	r2,-8193
 10054c4:	1884703a 	and	r2,r3,r2
 10054c8:	8080030d 	sth	r2,12(r16)
 10054cc:	0100230e 	bge	zero,r4,100555c <__srefill_r+0x130>
 10054d0:	0009883a 	mov	r4,zero
 10054d4:	2005883a 	mov	r2,r4
 10054d8:	dfc00217 	ldw	ra,8(sp)
 10054dc:	dc400117 	ldw	r17,4(sp)
 10054e0:	dc000017 	ldw	r16,0(sp)
 10054e4:	dec00304 	addi	sp,sp,12
 10054e8:	f800283a 	ret
 10054ec:	81400c17 	ldw	r5,48(r16)
 10054f0:	283fe426 	beq	r5,zero,1005484 <__srefill_r+0x58>
 10054f4:	80801004 	addi	r2,r16,64
 10054f8:	28800226 	beq	r5,r2,1005504 <__srefill_r+0xd8>
 10054fc:	8809883a 	mov	r4,r17
 1005500:	1003d540 	call	1003d54 <_free_r>
 1005504:	80800f17 	ldw	r2,60(r16)
 1005508:	80000c15 	stw	zero,48(r16)
 100550c:	80800115 	stw	r2,4(r16)
 1005510:	103fdc26 	beq	r2,zero,1005484 <__srefill_r+0x58>
 1005514:	80800e17 	ldw	r2,56(r16)
 1005518:	0009883a 	mov	r4,zero
 100551c:	80800015 	stw	r2,0(r16)
 1005520:	2005883a 	mov	r2,r4
 1005524:	dfc00217 	ldw	ra,8(sp)
 1005528:	dc400117 	ldw	r17,4(sp)
 100552c:	dc000017 	ldw	r16,0(sp)
 1005530:	dec00304 	addi	sp,sp,12
 1005534:	f800283a 	ret
 1005538:	013fffc4 	movi	r4,-1
 100553c:	2005883a 	mov	r2,r4
 1005540:	dfc00217 	ldw	ra,8(sp)
 1005544:	dc400117 	ldw	r17,4(sp)
 1005548:	dc000017 	ldw	r16,0(sp)
 100554c:	dec00304 	addi	sp,sp,12
 1005550:	f800283a 	ret
 1005554:	100388c0 	call	100388c <__sinit>
 1005558:	003fbd06 	br	1005450 <__srefill_r+0x24>
 100555c:	20000b1e 	bne	r4,zero,100558c <__srefill_r+0x160>
 1005560:	10800814 	ori	r2,r2,32
 1005564:	013fffc4 	movi	r4,-1
 1005568:	8080030d 	sth	r2,12(r16)
 100556c:	003fd906 	br	10054d4 <__srefill_r+0xa8>
 1005570:	00804074 	movhi	r2,257
 1005574:	108e8004 	addi	r2,r2,14848
 1005578:	11000017 	ldw	r4,0(r2)
 100557c:	01404034 	movhi	r5,256
 1005580:	29557c04 	addi	r5,r5,22000
 1005584:	10046040 	call	1004604 <_fwalk>
 1005588:	003fc306 	br	1005498 <__srefill_r+0x6c>
 100558c:	10801014 	ori	r2,r2,64
 1005590:	013fffc4 	movi	r4,-1
 1005594:	8080030d 	sth	r2,12(r16)
 1005598:	80000115 	stw	zero,4(r16)
 100559c:	003fcd06 	br	10054d4 <__srefill_r+0xa8>
 10055a0:	8809883a 	mov	r4,r17
 10055a4:	800b883a 	mov	r5,r16
 10055a8:	10048d00 	call	10048d0 <__smakebuf_r>
 10055ac:	003fb706 	br	100548c <__srefill_r+0x60>
 10055b0:	18c01014 	ori	r3,r3,64
 10055b4:	00800244 	movi	r2,9
 10055b8:	013fffc4 	movi	r4,-1
 10055bc:	88800015 	stw	r2,0(r17)
 10055c0:	80c0030d 	sth	r3,12(r16)
 10055c4:	003fc306 	br	10054d4 <__srefill_r+0xa8>
 10055c8:	8809883a 	mov	r4,r17
 10055cc:	800b883a 	mov	r5,r16
 10055d0:	10035f40 	call	10035f4 <_fflush_r>
 10055d4:	103fd81e 	bne	r2,zero,1005538 <__srefill_r+0x10c>
 10055d8:	8080030b 	ldhu	r2,12(r16)
 10055dc:	80000215 	stw	zero,8(r16)
 10055e0:	80000615 	stw	zero,24(r16)
 10055e4:	10bffdcc 	andi	r2,r2,65527
 10055e8:	8080030d 	sth	r2,12(r16)
 10055ec:	003fa206 	br	1005478 <__srefill_r+0x4c>

010055f0 <lflush>:
 10055f0:	20c0030b 	ldhu	r3,12(r4)
 10055f4:	01400244 	movi	r5,9
 10055f8:	0005883a 	mov	r2,zero
 10055fc:	18c0024c 	andi	r3,r3,9
 1005600:	19400126 	beq	r3,r5,1005608 <lflush+0x18>
 1005604:	f800283a 	ret
 1005608:	10037f01 	jmpi	10037f0 <fflush>

0100560c <__srget_r>:
 100560c:	defffe04 	addi	sp,sp,-8
 1005610:	dc000015 	stw	r16,0(sp)
 1005614:	dfc00115 	stw	ra,4(sp)
 1005618:	2821883a 	mov	r16,r5
 100561c:	100542c0 	call	100542c <__srefill_r>
 1005620:	013fffc4 	movi	r4,-1
 1005624:	1000071e 	bne	r2,zero,1005644 <__srget_r+0x38>
 1005628:	80800117 	ldw	r2,4(r16)
 100562c:	81000017 	ldw	r4,0(r16)
 1005630:	10bfffc4 	addi	r2,r2,-1
 1005634:	20c00044 	addi	r3,r4,1
 1005638:	80800115 	stw	r2,4(r16)
 100563c:	21000003 	ldbu	r4,0(r4)
 1005640:	80c00015 	stw	r3,0(r16)
 1005644:	2005883a 	mov	r2,r4
 1005648:	dfc00117 	ldw	ra,4(sp)
 100564c:	dc000017 	ldw	r16,0(sp)
 1005650:	dec00204 	addi	sp,sp,8
 1005654:	f800283a 	ret

01005658 <__srget>:
 1005658:	00804074 	movhi	r2,257
 100565c:	108e7f04 	addi	r2,r2,14844
 1005660:	200b883a 	mov	r5,r4
 1005664:	11000017 	ldw	r4,0(r2)
 1005668:	100560c1 	jmpi	100560c <__srget_r>

0100566c <_sbrk_r>:
 100566c:	defffd04 	addi	sp,sp,-12
 1005670:	dc000015 	stw	r16,0(sp)
 1005674:	04004074 	movhi	r16,257
 1005678:	84156804 	addi	r16,r16,21920
 100567c:	dc400115 	stw	r17,4(sp)
 1005680:	80000015 	stw	zero,0(r16)
 1005684:	2023883a 	mov	r17,r4
 1005688:	2809883a 	mov	r4,r5
 100568c:	dfc00215 	stw	ra,8(sp)
 1005690:	100efb00 	call	100efb0 <sbrk>
 1005694:	1007883a 	mov	r3,r2
 1005698:	00bfffc4 	movi	r2,-1
 100569c:	18800626 	beq	r3,r2,10056b8 <_sbrk_r+0x4c>
 10056a0:	1805883a 	mov	r2,r3
 10056a4:	dfc00217 	ldw	ra,8(sp)
 10056a8:	dc400117 	ldw	r17,4(sp)
 10056ac:	dc000017 	ldw	r16,0(sp)
 10056b0:	dec00304 	addi	sp,sp,12
 10056b4:	f800283a 	ret
 10056b8:	80800017 	ldw	r2,0(r16)
 10056bc:	103ff826 	beq	r2,zero,10056a0 <_sbrk_r+0x34>
 10056c0:	88800015 	stw	r2,0(r17)
 10056c4:	1805883a 	mov	r2,r3
 10056c8:	dfc00217 	ldw	ra,8(sp)
 10056cc:	dc400117 	ldw	r17,4(sp)
 10056d0:	dc000017 	ldw	r16,0(sp)
 10056d4:	dec00304 	addi	sp,sp,12
 10056d8:	f800283a 	ret

010056dc <_raise_r>:
 10056dc:	defffd04 	addi	sp,sp,-12
 10056e0:	008007c4 	movi	r2,31
 10056e4:	dc400115 	stw	r17,4(sp)
 10056e8:	dc000015 	stw	r16,0(sp)
 10056ec:	dfc00215 	stw	ra,8(sp)
 10056f0:	2821883a 	mov	r16,r5
 10056f4:	2023883a 	mov	r17,r4
 10056f8:	11402736 	bltu	r2,r5,1005798 <_raise_r+0xbc>
 10056fc:	20c0b717 	ldw	r3,732(r4)
 1005700:	18001326 	beq	r3,zero,1005750 <_raise_r+0x74>
 1005704:	2945883a 	add	r2,r5,r5
 1005708:	1085883a 	add	r2,r2,r2
 100570c:	188b883a 	add	r5,r3,r2
 1005710:	28c00017 	ldw	r3,0(r5)
 1005714:	18000e26 	beq	r3,zero,1005750 <_raise_r+0x74>
 1005718:	01000044 	movi	r4,1
 100571c:	19000526 	beq	r3,r4,1005734 <_raise_r+0x58>
 1005720:	00bfffc4 	movi	r2,-1
 1005724:	18801326 	beq	r3,r2,1005774 <_raise_r+0x98>
 1005728:	28000015 	stw	zero,0(r5)
 100572c:	8009883a 	mov	r4,r16
 1005730:	183ee83a 	callr	r3
 1005734:	0007883a 	mov	r3,zero
 1005738:	1805883a 	mov	r2,r3
 100573c:	dfc00217 	ldw	ra,8(sp)
 1005740:	dc400117 	ldw	r17,4(sp)
 1005744:	dc000017 	ldw	r16,0(sp)
 1005748:	dec00304 	addi	sp,sp,12
 100574c:	f800283a 	ret
 1005750:	10059b40 	call	10059b4 <_getpid_r>
 1005754:	100b883a 	mov	r5,r2
 1005758:	8809883a 	mov	r4,r17
 100575c:	800d883a 	mov	r6,r16
 1005760:	dfc00217 	ldw	ra,8(sp)
 1005764:	dc400117 	ldw	r17,4(sp)
 1005768:	dc000017 	ldw	r16,0(sp)
 100576c:	dec00304 	addi	sp,sp,12
 1005770:	10059b81 	jmpi	10059b8 <_kill_r>
 1005774:	2007883a 	mov	r3,r4
 1005778:	00800584 	movi	r2,22
 100577c:	88800015 	stw	r2,0(r17)
 1005780:	1805883a 	mov	r2,r3
 1005784:	dfc00217 	ldw	ra,8(sp)
 1005788:	dc400117 	ldw	r17,4(sp)
 100578c:	dc000017 	ldw	r16,0(sp)
 1005790:	dec00304 	addi	sp,sp,12
 1005794:	f800283a 	ret
 1005798:	00800584 	movi	r2,22
 100579c:	00ffffc4 	movi	r3,-1
 10057a0:	20800015 	stw	r2,0(r4)
 10057a4:	003fe406 	br	1005738 <_raise_r+0x5c>

010057a8 <raise>:
 10057a8:	00804074 	movhi	r2,257
 10057ac:	108e7f04 	addi	r2,r2,14844
 10057b0:	200b883a 	mov	r5,r4
 10057b4:	11000017 	ldw	r4,0(r2)
 10057b8:	10056dc1 	jmpi	10056dc <_raise_r>

010057bc <_init_signal_r>:
 10057bc:	2080b717 	ldw	r2,732(r4)
 10057c0:	defffe04 	addi	sp,sp,-8
 10057c4:	dc000015 	stw	r16,0(sp)
 10057c8:	dfc00115 	stw	ra,4(sp)
 10057cc:	2021883a 	mov	r16,r4
 10057d0:	10000526 	beq	r2,zero,10057e8 <_init_signal_r+0x2c>
 10057d4:	0005883a 	mov	r2,zero
 10057d8:	dfc00117 	ldw	ra,4(sp)
 10057dc:	dc000017 	ldw	r16,0(sp)
 10057e0:	dec00204 	addi	sp,sp,8
 10057e4:	f800283a 	ret
 10057e8:	01402004 	movi	r5,128
 10057ec:	1004a8c0 	call	1004a8c <_malloc_r>
 10057f0:	1009883a 	mov	r4,r2
 10057f4:	8080b715 	stw	r2,732(r16)
 10057f8:	10000726 	beq	r2,zero,1005818 <_init_signal_r+0x5c>
 10057fc:	0007883a 	mov	r3,zero
 1005800:	01402004 	movi	r5,128
 1005804:	20c5883a 	add	r2,r4,r3
 1005808:	18c00104 	addi	r3,r3,4
 100580c:	10000015 	stw	zero,0(r2)
 1005810:	197ffc1e 	bne	r3,r5,1005804 <_init_signal_r+0x48>
 1005814:	003fef06 	br	10057d4 <_init_signal_r+0x18>
 1005818:	00bfffc4 	movi	r2,-1
 100581c:	003fee06 	br	10057d8 <_init_signal_r+0x1c>

01005820 <_init_signal>:
 1005820:	00804074 	movhi	r2,257
 1005824:	108e7f04 	addi	r2,r2,14844
 1005828:	11000017 	ldw	r4,0(r2)
 100582c:	10057bc1 	jmpi	10057bc <_init_signal_r>

01005830 <__sigtramp_r>:
 1005830:	defffd04 	addi	sp,sp,-12
 1005834:	008007c4 	movi	r2,31
 1005838:	dc000115 	stw	r16,4(sp)
 100583c:	dfc00215 	stw	ra,8(sp)
 1005840:	2021883a 	mov	r16,r4
 1005844:	11401336 	bltu	r2,r5,1005894 <__sigtramp_r+0x64>
 1005848:	20c0b717 	ldw	r3,732(r4)
 100584c:	18001f26 	beq	r3,zero,10058cc <__sigtramp_r+0x9c>
 1005850:	2945883a 	add	r2,r5,r5
 1005854:	1085883a 	add	r2,r2,r2
 1005858:	10c9883a 	add	r4,r2,r3
 100585c:	20c00017 	ldw	r3,0(r4)
 1005860:	18001626 	beq	r3,zero,10058bc <__sigtramp_r+0x8c>
 1005864:	00bfffc4 	movi	r2,-1
 1005868:	18801626 	beq	r3,r2,10058c4 <__sigtramp_r+0x94>
 100586c:	00800044 	movi	r2,1
 1005870:	18800d26 	beq	r3,r2,10058a8 <__sigtramp_r+0x78>
 1005874:	20000015 	stw	zero,0(r4)
 1005878:	2809883a 	mov	r4,r5
 100587c:	183ee83a 	callr	r3
 1005880:	0005883a 	mov	r2,zero
 1005884:	dfc00217 	ldw	ra,8(sp)
 1005888:	dc000117 	ldw	r16,4(sp)
 100588c:	dec00304 	addi	sp,sp,12
 1005890:	f800283a 	ret
 1005894:	00bfffc4 	movi	r2,-1
 1005898:	dfc00217 	ldw	ra,8(sp)
 100589c:	dc000117 	ldw	r16,4(sp)
 10058a0:	dec00304 	addi	sp,sp,12
 10058a4:	f800283a 	ret
 10058a8:	008000c4 	movi	r2,3
 10058ac:	dfc00217 	ldw	ra,8(sp)
 10058b0:	dc000117 	ldw	r16,4(sp)
 10058b4:	dec00304 	addi	sp,sp,12
 10058b8:	f800283a 	ret
 10058bc:	00800044 	movi	r2,1
 10058c0:	003ff006 	br	1005884 <__sigtramp_r+0x54>
 10058c4:	00800084 	movi	r2,2
 10058c8:	003fee06 	br	1005884 <__sigtramp_r+0x54>
 10058cc:	d9400015 	stw	r5,0(sp)
 10058d0:	10057bc0 	call	10057bc <_init_signal_r>
 10058d4:	d9400017 	ldw	r5,0(sp)
 10058d8:	103fee1e 	bne	r2,zero,1005894 <__sigtramp_r+0x64>
 10058dc:	80c0b717 	ldw	r3,732(r16)
 10058e0:	003fdb06 	br	1005850 <__sigtramp_r+0x20>

010058e4 <__sigtramp>:
 10058e4:	00804074 	movhi	r2,257
 10058e8:	108e7f04 	addi	r2,r2,14844
 10058ec:	200b883a 	mov	r5,r4
 10058f0:	11000017 	ldw	r4,0(r2)
 10058f4:	10058301 	jmpi	1005830 <__sigtramp_r>

010058f8 <_signal_r>:
 10058f8:	defffc04 	addi	sp,sp,-16
 10058fc:	008007c4 	movi	r2,31
 1005900:	dc800215 	stw	r18,8(sp)
 1005904:	dc400115 	stw	r17,4(sp)
 1005908:	dc000015 	stw	r16,0(sp)
 100590c:	dfc00315 	stw	ra,12(sp)
 1005910:	2823883a 	mov	r17,r5
 1005914:	00ffffc4 	movi	r3,-1
 1005918:	3025883a 	mov	r18,r6
 100591c:	2021883a 	mov	r16,r4
 1005920:	1140092e 	bgeu	r2,r5,1005948 <_signal_r+0x50>
 1005924:	00800584 	movi	r2,22
 1005928:	20800015 	stw	r2,0(r4)
 100592c:	1805883a 	mov	r2,r3
 1005930:	dfc00317 	ldw	ra,12(sp)
 1005934:	dc800217 	ldw	r18,8(sp)
 1005938:	dc400117 	ldw	r17,4(sp)
 100593c:	dc000017 	ldw	r16,0(sp)
 1005940:	dec00404 	addi	sp,sp,16
 1005944:	f800283a 	ret
 1005948:	2140b717 	ldw	r5,732(r4)
 100594c:	28000c26 	beq	r5,zero,1005980 <_signal_r+0x88>
 1005950:	8c45883a 	add	r2,r17,r17
 1005954:	1085883a 	add	r2,r2,r2
 1005958:	1145883a 	add	r2,r2,r5
 100595c:	10c00017 	ldw	r3,0(r2)
 1005960:	14800015 	stw	r18,0(r2)
 1005964:	1805883a 	mov	r2,r3
 1005968:	dfc00317 	ldw	ra,12(sp)
 100596c:	dc800217 	ldw	r18,8(sp)
 1005970:	dc400117 	ldw	r17,4(sp)
 1005974:	dc000017 	ldw	r16,0(sp)
 1005978:	dec00404 	addi	sp,sp,16
 100597c:	f800283a 	ret
 1005980:	10057bc0 	call	10057bc <_init_signal_r>
 1005984:	1000021e 	bne	r2,zero,1005990 <_signal_r+0x98>
 1005988:	8140b717 	ldw	r5,732(r16)
 100598c:	003ff006 	br	1005950 <_signal_r+0x58>
 1005990:	00ffffc4 	movi	r3,-1
 1005994:	003fe506 	br	100592c <_signal_r+0x34>

01005998 <signal>:
 1005998:	01804074 	movhi	r6,257
 100599c:	318e7f04 	addi	r6,r6,14844
 10059a0:	2007883a 	mov	r3,r4
 10059a4:	31000017 	ldw	r4,0(r6)
 10059a8:	280d883a 	mov	r6,r5
 10059ac:	180b883a 	mov	r5,r3
 10059b0:	10058f81 	jmpi	10058f8 <_signal_r>

010059b4 <_getpid_r>:
 10059b4:	100e5001 	jmpi	100e500 <getpid>

010059b8 <_kill_r>:
 10059b8:	defffd04 	addi	sp,sp,-12
 10059bc:	dc000015 	stw	r16,0(sp)
 10059c0:	04004074 	movhi	r16,257
 10059c4:	84156804 	addi	r16,r16,21920
 10059c8:	dc400115 	stw	r17,4(sp)
 10059cc:	80000015 	stw	zero,0(r16)
 10059d0:	2023883a 	mov	r17,r4
 10059d4:	2809883a 	mov	r4,r5
 10059d8:	300b883a 	mov	r5,r6
 10059dc:	dfc00215 	stw	ra,8(sp)
 10059e0:	100e6440 	call	100e644 <kill>
 10059e4:	1007883a 	mov	r3,r2
 10059e8:	00bfffc4 	movi	r2,-1
 10059ec:	18800626 	beq	r3,r2,1005a08 <_kill_r+0x50>
 10059f0:	1805883a 	mov	r2,r3
 10059f4:	dfc00217 	ldw	ra,8(sp)
 10059f8:	dc400117 	ldw	r17,4(sp)
 10059fc:	dc000017 	ldw	r16,0(sp)
 1005a00:	dec00304 	addi	sp,sp,12
 1005a04:	f800283a 	ret
 1005a08:	80800017 	ldw	r2,0(r16)
 1005a0c:	103ff826 	beq	r2,zero,10059f0 <_kill_r+0x38>
 1005a10:	88800015 	stw	r2,0(r17)
 1005a14:	1805883a 	mov	r2,r3
 1005a18:	dfc00217 	ldw	ra,8(sp)
 1005a1c:	dc400117 	ldw	r17,4(sp)
 1005a20:	dc000017 	ldw	r16,0(sp)
 1005a24:	dec00304 	addi	sp,sp,12
 1005a28:	f800283a 	ret

01005a2c <__sclose>:
 1005a2c:	2940038f 	ldh	r5,14(r5)
 1005a30:	1007dfc1 	jmpi	1007dfc <_close_r>

01005a34 <__sseek>:
 1005a34:	defffe04 	addi	sp,sp,-8
 1005a38:	dc000015 	stw	r16,0(sp)
 1005a3c:	2821883a 	mov	r16,r5
 1005a40:	2940038f 	ldh	r5,14(r5)
 1005a44:	dfc00115 	stw	ra,4(sp)
 1005a48:	1009cd40 	call	1009cd4 <_lseek_r>
 1005a4c:	1007883a 	mov	r3,r2
 1005a50:	00bfffc4 	movi	r2,-1
 1005a54:	18800926 	beq	r3,r2,1005a7c <__sseek+0x48>
 1005a58:	8080030b 	ldhu	r2,12(r16)
 1005a5c:	80c01415 	stw	r3,80(r16)
 1005a60:	10840014 	ori	r2,r2,4096
 1005a64:	8080030d 	sth	r2,12(r16)
 1005a68:	1805883a 	mov	r2,r3
 1005a6c:	dfc00117 	ldw	ra,4(sp)
 1005a70:	dc000017 	ldw	r16,0(sp)
 1005a74:	dec00204 	addi	sp,sp,8
 1005a78:	f800283a 	ret
 1005a7c:	8080030b 	ldhu	r2,12(r16)
 1005a80:	10bbffcc 	andi	r2,r2,61439
 1005a84:	8080030d 	sth	r2,12(r16)
 1005a88:	1805883a 	mov	r2,r3
 1005a8c:	dfc00117 	ldw	ra,4(sp)
 1005a90:	dc000017 	ldw	r16,0(sp)
 1005a94:	dec00204 	addi	sp,sp,8
 1005a98:	f800283a 	ret

01005a9c <__swrite>:
 1005a9c:	2880030b 	ldhu	r2,12(r5)
 1005aa0:	defffb04 	addi	sp,sp,-20
 1005aa4:	dcc00315 	stw	r19,12(sp)
 1005aa8:	1080400c 	andi	r2,r2,256
 1005aac:	dc800215 	stw	r18,8(sp)
 1005ab0:	dc400115 	stw	r17,4(sp)
 1005ab4:	dc000015 	stw	r16,0(sp)
 1005ab8:	3027883a 	mov	r19,r6
 1005abc:	3825883a 	mov	r18,r7
 1005ac0:	dfc00415 	stw	ra,16(sp)
 1005ac4:	2821883a 	mov	r16,r5
 1005ac8:	000d883a 	mov	r6,zero
 1005acc:	01c00084 	movi	r7,2
 1005ad0:	2023883a 	mov	r17,r4
 1005ad4:	10000226 	beq	r2,zero,1005ae0 <__swrite+0x44>
 1005ad8:	2940038f 	ldh	r5,14(r5)
 1005adc:	1009cd40 	call	1009cd4 <_lseek_r>
 1005ae0:	8080030b 	ldhu	r2,12(r16)
 1005ae4:	8140038f 	ldh	r5,14(r16)
 1005ae8:	8809883a 	mov	r4,r17
 1005aec:	10bbffcc 	andi	r2,r2,61439
 1005af0:	980d883a 	mov	r6,r19
 1005af4:	900f883a 	mov	r7,r18
 1005af8:	8080030d 	sth	r2,12(r16)
 1005afc:	dfc00417 	ldw	ra,16(sp)
 1005b00:	dcc00317 	ldw	r19,12(sp)
 1005b04:	dc800217 	ldw	r18,8(sp)
 1005b08:	dc400117 	ldw	r17,4(sp)
 1005b0c:	dc000017 	ldw	r16,0(sp)
 1005b10:	dec00504 	addi	sp,sp,20
 1005b14:	1007c481 	jmpi	1007c48 <_write_r>

01005b18 <__sread>:
 1005b18:	defffe04 	addi	sp,sp,-8
 1005b1c:	dc000015 	stw	r16,0(sp)
 1005b20:	2821883a 	mov	r16,r5
 1005b24:	2940038f 	ldh	r5,14(r5)
 1005b28:	dfc00115 	stw	ra,4(sp)
 1005b2c:	100b2280 	call	100b228 <_read_r>
 1005b30:	1007883a 	mov	r3,r2
 1005b34:	10000816 	blt	r2,zero,1005b58 <__sread+0x40>
 1005b38:	80801417 	ldw	r2,80(r16)
 1005b3c:	10c5883a 	add	r2,r2,r3
 1005b40:	80801415 	stw	r2,80(r16)
 1005b44:	1805883a 	mov	r2,r3
 1005b48:	dfc00117 	ldw	ra,4(sp)
 1005b4c:	dc000017 	ldw	r16,0(sp)
 1005b50:	dec00204 	addi	sp,sp,8
 1005b54:	f800283a 	ret
 1005b58:	8080030b 	ldhu	r2,12(r16)
 1005b5c:	10bbffcc 	andi	r2,r2,61439
 1005b60:	8080030d 	sth	r2,12(r16)
 1005b64:	1805883a 	mov	r2,r3
 1005b68:	dfc00117 	ldw	ra,4(sp)
 1005b6c:	dc000017 	ldw	r16,0(sp)
 1005b70:	dec00204 	addi	sp,sp,8
 1005b74:	f800283a 	ret

01005b78 <strcat>:
 1005b78:	defffe04 	addi	sp,sp,-8
 1005b7c:	208000cc 	andi	r2,r4,3
 1005b80:	dc000015 	stw	r16,0(sp)
 1005b84:	dfc00115 	stw	ra,4(sp)
 1005b88:	2021883a 	mov	r16,r4
 1005b8c:	1000161e 	bne	r2,zero,1005be8 <strcat+0x70>
 1005b90:	20c00017 	ldw	r3,0(r4)
 1005b94:	01bfbff4 	movhi	r6,65279
 1005b98:	31bfbfc4 	addi	r6,r6,-257
 1005b9c:	02202074 	movhi	r8,32897
 1005ba0:	42202004 	addi	r8,r8,-32640
 1005ba4:	1985883a 	add	r2,r3,r6
 1005ba8:	1204703a 	and	r2,r2,r8
 1005bac:	00c6303a 	nor	r3,zero,r3
 1005bb0:	1886703a 	and	r3,r3,r2
 1005bb4:	18000c1e 	bne	r3,zero,1005be8 <strcat+0x70>
 1005bb8:	300f883a 	mov	r7,r6
 1005bbc:	400d883a 	mov	r6,r8
 1005bc0:	21000104 	addi	r4,r4,4
 1005bc4:	20800017 	ldw	r2,0(r4)
 1005bc8:	11c7883a 	add	r3,r2,r7
 1005bcc:	1986703a 	and	r3,r3,r6
 1005bd0:	0084303a 	nor	r2,zero,r2
 1005bd4:	10c4703a 	and	r2,r2,r3
 1005bd8:	103ff926 	beq	r2,zero,1005bc0 <strcat+0x48>
 1005bdc:	20800007 	ldb	r2,0(r4)
 1005be0:	10000326 	beq	r2,zero,1005bf0 <strcat+0x78>
 1005be4:	21000044 	addi	r4,r4,1
 1005be8:	20800007 	ldb	r2,0(r4)
 1005bec:	103ffd1e 	bne	r2,zero,1005be4 <strcat+0x6c>
 1005bf0:	1005c080 	call	1005c08 <strcpy>
 1005bf4:	8005883a 	mov	r2,r16
 1005bf8:	dfc00117 	ldw	ra,4(sp)
 1005bfc:	dc000017 	ldw	r16,0(sp)
 1005c00:	dec00204 	addi	sp,sp,8
 1005c04:	f800283a 	ret

01005c08 <strcpy>:
 1005c08:	2904b03a 	or	r2,r5,r4
 1005c0c:	108000cc 	andi	r2,r2,3
 1005c10:	10000826 	beq	r2,zero,1005c34 <strcpy+0x2c>
 1005c14:	2007883a 	mov	r3,r4
 1005c18:	28800003 	ldbu	r2,0(r5)
 1005c1c:	29400044 	addi	r5,r5,1
 1005c20:	18800005 	stb	r2,0(r3)
 1005c24:	18c00044 	addi	r3,r3,1
 1005c28:	103ffb1e 	bne	r2,zero,1005c18 <strcpy+0x10>
 1005c2c:	2005883a 	mov	r2,r4
 1005c30:	f800283a 	ret
 1005c34:	29800017 	ldw	r6,0(r5)
 1005c38:	023fbff4 	movhi	r8,65279
 1005c3c:	423fbfc4 	addi	r8,r8,-257
 1005c40:	02a02074 	movhi	r10,32897
 1005c44:	52a02004 	addi	r10,r10,-32640
 1005c48:	3205883a 	add	r2,r6,r8
 1005c4c:	0186303a 	nor	r3,zero,r6
 1005c50:	10c4703a 	and	r2,r2,r3
 1005c54:	1284703a 	and	r2,r2,r10
 1005c58:	200f883a 	mov	r7,r4
 1005c5c:	10000b1e 	bne	r2,zero,1005c8c <strcpy+0x84>
 1005c60:	4013883a 	mov	r9,r8
 1005c64:	5011883a 	mov	r8,r10
 1005c68:	39800015 	stw	r6,0(r7)
 1005c6c:	29400104 	addi	r5,r5,4
 1005c70:	29800017 	ldw	r6,0(r5)
 1005c74:	39c00104 	addi	r7,r7,4
 1005c78:	3245883a 	add	r2,r6,r9
 1005c7c:	0186303a 	nor	r3,zero,r6
 1005c80:	10c4703a 	and	r2,r2,r3
 1005c84:	1204703a 	and	r2,r2,r8
 1005c88:	103ff726 	beq	r2,zero,1005c68 <strcpy+0x60>
 1005c8c:	3807883a 	mov	r3,r7
 1005c90:	003fe106 	br	1005c18 <strcpy+0x10>

01005c94 <strlen>:
 1005c94:	208000cc 	andi	r2,r4,3
 1005c98:	2011883a 	mov	r8,r4
 1005c9c:	1000161e 	bne	r2,zero,1005cf8 <strlen+0x64>
 1005ca0:	20c00017 	ldw	r3,0(r4)
 1005ca4:	017fbff4 	movhi	r5,65279
 1005ca8:	297fbfc4 	addi	r5,r5,-257
 1005cac:	01e02074 	movhi	r7,32897
 1005cb0:	39e02004 	addi	r7,r7,-32640
 1005cb4:	1945883a 	add	r2,r3,r5
 1005cb8:	11c4703a 	and	r2,r2,r7
 1005cbc:	00c6303a 	nor	r3,zero,r3
 1005cc0:	1886703a 	and	r3,r3,r2
 1005cc4:	18000c1e 	bne	r3,zero,1005cf8 <strlen+0x64>
 1005cc8:	280d883a 	mov	r6,r5
 1005ccc:	380b883a 	mov	r5,r7
 1005cd0:	21000104 	addi	r4,r4,4
 1005cd4:	20800017 	ldw	r2,0(r4)
 1005cd8:	1187883a 	add	r3,r2,r6
 1005cdc:	1946703a 	and	r3,r3,r5
 1005ce0:	0084303a 	nor	r2,zero,r2
 1005ce4:	10c4703a 	and	r2,r2,r3
 1005ce8:	103ff926 	beq	r2,zero,1005cd0 <strlen+0x3c>
 1005cec:	20800007 	ldb	r2,0(r4)
 1005cf0:	10000326 	beq	r2,zero,1005d00 <strlen+0x6c>
 1005cf4:	21000044 	addi	r4,r4,1
 1005cf8:	20800007 	ldb	r2,0(r4)
 1005cfc:	103ffd1e 	bne	r2,zero,1005cf4 <strlen+0x60>
 1005d00:	2205c83a 	sub	r2,r4,r8
 1005d04:	f800283a 	ret

01005d08 <__sprint_r>:
 1005d08:	30800217 	ldw	r2,8(r6)
 1005d0c:	defffe04 	addi	sp,sp,-8
 1005d10:	dc000015 	stw	r16,0(sp)
 1005d14:	dfc00115 	stw	ra,4(sp)
 1005d18:	3021883a 	mov	r16,r6
 1005d1c:	0007883a 	mov	r3,zero
 1005d20:	1000061e 	bne	r2,zero,1005d3c <__sprint_r+0x34>
 1005d24:	1805883a 	mov	r2,r3
 1005d28:	30000115 	stw	zero,4(r6)
 1005d2c:	dfc00117 	ldw	ra,4(sp)
 1005d30:	dc000017 	ldw	r16,0(sp)
 1005d34:	dec00204 	addi	sp,sp,8
 1005d38:	f800283a 	ret
 1005d3c:	10097040 	call	1009704 <__sfvwrite_r>
 1005d40:	1007883a 	mov	r3,r2
 1005d44:	1805883a 	mov	r2,r3
 1005d48:	80000115 	stw	zero,4(r16)
 1005d4c:	80000215 	stw	zero,8(r16)
 1005d50:	dfc00117 	ldw	ra,4(sp)
 1005d54:	dc000017 	ldw	r16,0(sp)
 1005d58:	dec00204 	addi	sp,sp,8
 1005d5c:	f800283a 	ret

01005d60 <___vfprintf_internal_r>:
 1005d60:	defea404 	addi	sp,sp,-1392
 1005d64:	dd815815 	stw	r22,1376(sp)
 1005d68:	dc015215 	stw	r16,1352(sp)
 1005d6c:	d9c15115 	stw	r7,1348(sp)
 1005d70:	dfc15b15 	stw	ra,1388(sp)
 1005d74:	df015a15 	stw	fp,1384(sp)
 1005d78:	ddc15915 	stw	r23,1380(sp)
 1005d7c:	dd415715 	stw	r21,1372(sp)
 1005d80:	dd015615 	stw	r20,1368(sp)
 1005d84:	dcc15515 	stw	r19,1364(sp)
 1005d88:	dc815415 	stw	r18,1360(sp)
 1005d8c:	dc415315 	stw	r17,1356(sp)
 1005d90:	282d883a 	mov	r22,r5
 1005d94:	3021883a 	mov	r16,r6
 1005d98:	d9014f15 	stw	r4,1340(sp)
 1005d9c:	1009c180 	call	1009c18 <_localeconv_r>
 1005da0:	10800017 	ldw	r2,0(r2)
 1005da4:	d9c15117 	ldw	r7,1348(sp)
 1005da8:	d8814915 	stw	r2,1316(sp)
 1005dac:	d8814f17 	ldw	r2,1340(sp)
 1005db0:	10000226 	beq	r2,zero,1005dbc <___vfprintf_internal_r+0x5c>
 1005db4:	10800e17 	ldw	r2,56(r2)
 1005db8:	10020d26 	beq	r2,zero,10065f0 <___vfprintf_internal_r+0x890>
 1005dbc:	b080030b 	ldhu	r2,12(r22)
 1005dc0:	1080020c 	andi	r2,r2,8
 1005dc4:	10020e26 	beq	r2,zero,1006600 <___vfprintf_internal_r+0x8a0>
 1005dc8:	b0800417 	ldw	r2,16(r22)
 1005dcc:	10020c26 	beq	r2,zero,1006600 <___vfprintf_internal_r+0x8a0>
 1005dd0:	b200030b 	ldhu	r8,12(r22)
 1005dd4:	00800284 	movi	r2,10
 1005dd8:	40c0068c 	andi	r3,r8,26
 1005ddc:	18802f1e 	bne	r3,r2,1005e9c <___vfprintf_internal_r+0x13c>
 1005de0:	b080038f 	ldh	r2,14(r22)
 1005de4:	10002d16 	blt	r2,zero,1005e9c <___vfprintf_internal_r+0x13c>
 1005de8:	b240038b 	ldhu	r9,14(r22)
 1005dec:	b2800717 	ldw	r10,28(r22)
 1005df0:	b2c00917 	ldw	r11,36(r22)
 1005df4:	d9014f17 	ldw	r4,1340(sp)
 1005df8:	dc402904 	addi	r17,sp,164
 1005dfc:	d8804004 	addi	r2,sp,256
 1005e00:	00c10004 	movi	r3,1024
 1005e04:	423fff4c 	andi	r8,r8,65533
 1005e08:	800d883a 	mov	r6,r16
 1005e0c:	880b883a 	mov	r5,r17
 1005e10:	da002c0d 	sth	r8,176(sp)
 1005e14:	da402c8d 	sth	r9,178(sp)
 1005e18:	da803015 	stw	r10,192(sp)
 1005e1c:	dac03215 	stw	r11,200(sp)
 1005e20:	d8802d15 	stw	r2,180(sp)
 1005e24:	d8c02e15 	stw	r3,184(sp)
 1005e28:	d8802915 	stw	r2,164(sp)
 1005e2c:	d8c02b15 	stw	r3,172(sp)
 1005e30:	d8002f15 	stw	zero,188(sp)
 1005e34:	1005d600 	call	1005d60 <___vfprintf_internal_r>
 1005e38:	d8814b15 	stw	r2,1324(sp)
 1005e3c:	10000416 	blt	r2,zero,1005e50 <___vfprintf_internal_r+0xf0>
 1005e40:	d9014f17 	ldw	r4,1340(sp)
 1005e44:	880b883a 	mov	r5,r17
 1005e48:	10035f40 	call	10035f4 <_fflush_r>
 1005e4c:	1002321e 	bne	r2,zero,1006718 <___vfprintf_internal_r+0x9b8>
 1005e50:	d8802c0b 	ldhu	r2,176(sp)
 1005e54:	1080100c 	andi	r2,r2,64
 1005e58:	10000326 	beq	r2,zero,1005e68 <___vfprintf_internal_r+0x108>
 1005e5c:	b080030b 	ldhu	r2,12(r22)
 1005e60:	10801014 	ori	r2,r2,64
 1005e64:	b080030d 	sth	r2,12(r22)
 1005e68:	d8814b17 	ldw	r2,1324(sp)
 1005e6c:	dfc15b17 	ldw	ra,1388(sp)
 1005e70:	df015a17 	ldw	fp,1384(sp)
 1005e74:	ddc15917 	ldw	r23,1380(sp)
 1005e78:	dd815817 	ldw	r22,1376(sp)
 1005e7c:	dd415717 	ldw	r21,1372(sp)
 1005e80:	dd015617 	ldw	r20,1368(sp)
 1005e84:	dcc15517 	ldw	r19,1364(sp)
 1005e88:	dc815417 	ldw	r18,1360(sp)
 1005e8c:	dc415317 	ldw	r17,1356(sp)
 1005e90:	dc015217 	ldw	r16,1352(sp)
 1005e94:	dec15c04 	addi	sp,sp,1392
 1005e98:	f800283a 	ret
 1005e9c:	0005883a 	mov	r2,zero
 1005ea0:	0007883a 	mov	r3,zero
 1005ea4:	dd401904 	addi	r21,sp,100
 1005ea8:	d8814215 	stw	r2,1288(sp)
 1005eac:	802f883a 	mov	r23,r16
 1005eb0:	d8c14315 	stw	r3,1292(sp)
 1005eb4:	d8014b15 	stw	zero,1324(sp)
 1005eb8:	d8014815 	stw	zero,1312(sp)
 1005ebc:	d8014415 	stw	zero,1296(sp)
 1005ec0:	d8014715 	stw	zero,1308(sp)
 1005ec4:	dd400c15 	stw	r21,48(sp)
 1005ec8:	d8000e15 	stw	zero,56(sp)
 1005ecc:	d8000d15 	stw	zero,52(sp)
 1005ed0:	b8800007 	ldb	r2,0(r23)
 1005ed4:	10001926 	beq	r2,zero,1005f3c <___vfprintf_internal_r+0x1dc>
 1005ed8:	00c00944 	movi	r3,37
 1005edc:	10c01726 	beq	r2,r3,1005f3c <___vfprintf_internal_r+0x1dc>
 1005ee0:	b821883a 	mov	r16,r23
 1005ee4:	00000106 	br	1005eec <___vfprintf_internal_r+0x18c>
 1005ee8:	10c00326 	beq	r2,r3,1005ef8 <___vfprintf_internal_r+0x198>
 1005eec:	84000044 	addi	r16,r16,1
 1005ef0:	80800007 	ldb	r2,0(r16)
 1005ef4:	103ffc1e 	bne	r2,zero,1005ee8 <___vfprintf_internal_r+0x188>
 1005ef8:	85e7c83a 	sub	r19,r16,r23
 1005efc:	98000e26 	beq	r19,zero,1005f38 <___vfprintf_internal_r+0x1d8>
 1005f00:	dc800e17 	ldw	r18,56(sp)
 1005f04:	dc400d17 	ldw	r17,52(sp)
 1005f08:	008001c4 	movi	r2,7
 1005f0c:	94e5883a 	add	r18,r18,r19
 1005f10:	8c400044 	addi	r17,r17,1
 1005f14:	adc00015 	stw	r23,0(r21)
 1005f18:	dc800e15 	stw	r18,56(sp)
 1005f1c:	acc00115 	stw	r19,4(r21)
 1005f20:	dc400d15 	stw	r17,52(sp)
 1005f24:	14428b16 	blt	r2,r17,1006954 <___vfprintf_internal_r+0xbf4>
 1005f28:	ad400204 	addi	r21,r21,8
 1005f2c:	d9014b17 	ldw	r4,1324(sp)
 1005f30:	24c9883a 	add	r4,r4,r19
 1005f34:	d9014b15 	stw	r4,1324(sp)
 1005f38:	802f883a 	mov	r23,r16
 1005f3c:	b8800007 	ldb	r2,0(r23)
 1005f40:	10013c26 	beq	r2,zero,1006434 <___vfprintf_internal_r+0x6d4>
 1005f44:	bdc00044 	addi	r23,r23,1
 1005f48:	d8000405 	stb	zero,16(sp)
 1005f4c:	b8c00007 	ldb	r3,0(r23)
 1005f50:	04ffffc4 	movi	r19,-1
 1005f54:	d8014c15 	stw	zero,1328(sp)
 1005f58:	d8014a15 	stw	zero,1320(sp)
 1005f5c:	d8c14d15 	stw	r3,1332(sp)
 1005f60:	bdc00044 	addi	r23,r23,1
 1005f64:	d9414d17 	ldw	r5,1332(sp)
 1005f68:	00801604 	movi	r2,88
 1005f6c:	28fff804 	addi	r3,r5,-32
 1005f70:	10c06036 	bltu	r2,r3,10060f4 <___vfprintf_internal_r+0x394>
 1005f74:	18c5883a 	add	r2,r3,r3
 1005f78:	1085883a 	add	r2,r2,r2
 1005f7c:	00c04034 	movhi	r3,256
 1005f80:	18d7e404 	addi	r3,r3,24464
 1005f84:	10c5883a 	add	r2,r2,r3
 1005f88:	11000017 	ldw	r4,0(r2)
 1005f8c:	2000683a 	jmp	r4
 1005f90:	01006f04 	movi	r4,444
 1005f94:	010060f4 	movhi	r4,387
 1005f98:	010060f4 	movhi	r4,387
 1005f9c:	01006ef0 	cmpltui	r4,zero,443
 1005fa0:	010060f4 	movhi	r4,387
 1005fa4:	010060f4 	movhi	r4,387
 1005fa8:	010060f4 	movhi	r4,387
 1005fac:	010060f4 	movhi	r4,387
 1005fb0:	010060f4 	movhi	r4,387
 1005fb4:	010060f4 	movhi	r4,387
 1005fb8:	01006cd0 	cmplti	r4,zero,435
 1005fbc:	01006ee0 	cmpeqi	r4,zero,443
 1005fc0:	010060f4 	movhi	r4,387
 1005fc4:	01006ce8 	cmpgeui	r4,zero,435
 1005fc8:	01006f88 	cmpgei	r4,zero,446
 1005fcc:	010060f4 	movhi	r4,387
 1005fd0:	01006f74 	movhi	r4,445
 1005fd4:	01006f30 	cmpltui	r4,zero,444
 1005fd8:	01006f30 	cmpltui	r4,zero,444
 1005fdc:	01006f30 	cmpltui	r4,zero,444
 1005fe0:	01006f30 	cmpltui	r4,zero,444
 1005fe4:	01006f30 	cmpltui	r4,zero,444
 1005fe8:	01006f30 	cmpltui	r4,zero,444
 1005fec:	01006f30 	cmpltui	r4,zero,444
 1005ff0:	01006f30 	cmpltui	r4,zero,444
 1005ff4:	01006f30 	cmpltui	r4,zero,444
 1005ff8:	010060f4 	movhi	r4,387
 1005ffc:	010060f4 	movhi	r4,387
 1006000:	010060f4 	movhi	r4,387
 1006004:	010060f4 	movhi	r4,387
 1006008:	010060f4 	movhi	r4,387
 100600c:	010060f4 	movhi	r4,387
 1006010:	010060f4 	movhi	r4,387
 1006014:	010060f4 	movhi	r4,387
 1006018:	010060f4 	movhi	r4,387
 100601c:	010060f4 	movhi	r4,387
 1006020:	0100674c 	andi	r4,zero,413
 1006024:	01006db8 	rdprs	r4,zero,438
 1006028:	010060f4 	movhi	r4,387
 100602c:	01006db8 	rdprs	r4,zero,438
 1006030:	010060f4 	movhi	r4,387
 1006034:	010060f4 	movhi	r4,387
 1006038:	010060f4 	movhi	r4,387
 100603c:	010060f4 	movhi	r4,387
 1006040:	01006f1c 	xori	r4,zero,444
 1006044:	010060f4 	movhi	r4,387
 1006048:	010060f4 	movhi	r4,387
 100604c:	01006800 	call	100680 <__alt_mem_onchip_memory2_0+0x100680>
 1006050:	010060f4 	movhi	r4,387
 1006054:	010060f4 	movhi	r4,387
 1006058:	010060f4 	movhi	r4,387
 100605c:	010060f4 	movhi	r4,387
 1006060:	010060f4 	movhi	r4,387
 1006064:	0100684c 	andi	r4,zero,417
 1006068:	010060f4 	movhi	r4,387
 100606c:	010060f4 	movhi	r4,387
 1006070:	01006e6c 	andhi	r4,zero,441
 1006074:	010060f4 	movhi	r4,387
 1006078:	010060f4 	movhi	r4,387
 100607c:	010060f4 	movhi	r4,387
 1006080:	010060f4 	movhi	r4,387
 1006084:	010060f4 	movhi	r4,387
 1006088:	010060f4 	movhi	r4,387
 100608c:	010060f4 	movhi	r4,387
 1006090:	010060f4 	movhi	r4,387
 1006094:	010060f4 	movhi	r4,387
 1006098:	010060f4 	movhi	r4,387
 100609c:	01006e40 	call	1006e4 <__alt_mem_onchip_memory2_0+0x1006e4>
 10060a0:	01006758 	cmpnei	r4,zero,413
 10060a4:	01006db8 	rdprs	r4,zero,438
 10060a8:	01006db8 	rdprs	r4,zero,438
 10060ac:	01006db8 	rdprs	r4,zero,438
 10060b0:	01006da4 	muli	r4,zero,438
 10060b4:	01006758 	cmpnei	r4,zero,413
 10060b8:	010060f4 	movhi	r4,387
 10060bc:	010060f4 	movhi	r4,387
 10060c0:	01006d2c 	andhi	r4,zero,436
 10060c4:	010060f4 	movhi	r4,387
 10060c8:	01006cfc 	xorhi	r4,zero,435
 10060cc:	0100680c 	andi	r4,zero,416
 10060d0:	01006d5c 	xori	r4,zero,437
 10060d4:	01006d48 	cmpgei	r4,zero,437
 10060d8:	010060f4 	movhi	r4,387
 10060dc:	01006ff0 	cmpltui	r4,zero,447
 10060e0:	010060f4 	movhi	r4,387
 10060e4:	01006858 	cmpnei	r4,zero,417
 10060e8:	010060f4 	movhi	r4,387
 10060ec:	010060f4 	movhi	r4,387
 10060f0:	01006ed0 	cmplti	r4,zero,443
 10060f4:	d9014d17 	ldw	r4,1332(sp)
 10060f8:	2000ce26 	beq	r4,zero,1006434 <___vfprintf_internal_r+0x6d4>
 10060fc:	01400044 	movi	r5,1
 1006100:	d9800f04 	addi	r6,sp,60
 1006104:	d9c14015 	stw	r7,1280(sp)
 1006108:	d9414515 	stw	r5,1300(sp)
 100610c:	d9814115 	stw	r6,1284(sp)
 1006110:	280f883a 	mov	r7,r5
 1006114:	d9000f05 	stb	r4,60(sp)
 1006118:	d8000405 	stb	zero,16(sp)
 100611c:	d8014615 	stw	zero,1304(sp)
 1006120:	d8c14c17 	ldw	r3,1328(sp)
 1006124:	1880008c 	andi	r2,r3,2
 1006128:	1005003a 	cmpeq	r2,r2,zero
 100612c:	d8815015 	stw	r2,1344(sp)
 1006130:	1000031e 	bne	r2,zero,1006140 <___vfprintf_internal_r+0x3e0>
 1006134:	d9014517 	ldw	r4,1300(sp)
 1006138:	21000084 	addi	r4,r4,2
 100613c:	d9014515 	stw	r4,1300(sp)
 1006140:	d9414c17 	ldw	r5,1328(sp)
 1006144:	2940210c 	andi	r5,r5,132
 1006148:	d9414e15 	stw	r5,1336(sp)
 100614c:	28002d1e 	bne	r5,zero,1006204 <___vfprintf_internal_r+0x4a4>
 1006150:	d9814a17 	ldw	r6,1320(sp)
 1006154:	d8814517 	ldw	r2,1300(sp)
 1006158:	30a1c83a 	sub	r16,r6,r2
 100615c:	0400290e 	bge	zero,r16,1006204 <___vfprintf_internal_r+0x4a4>
 1006160:	00800404 	movi	r2,16
 1006164:	14045e0e 	bge	r2,r16,10072e0 <___vfprintf_internal_r+0x1580>
 1006168:	dc800e17 	ldw	r18,56(sp)
 100616c:	dc400d17 	ldw	r17,52(sp)
 1006170:	1027883a 	mov	r19,r2
 1006174:	07004074 	movhi	fp,257
 1006178:	e7070384 	addi	fp,fp,7182
 100617c:	050001c4 	movi	r20,7
 1006180:	00000306 	br	1006190 <___vfprintf_internal_r+0x430>
 1006184:	843ffc04 	addi	r16,r16,-16
 1006188:	ad400204 	addi	r21,r21,8
 100618c:	9c00130e 	bge	r19,r16,10061dc <___vfprintf_internal_r+0x47c>
 1006190:	94800404 	addi	r18,r18,16
 1006194:	8c400044 	addi	r17,r17,1
 1006198:	af000015 	stw	fp,0(r21)
 100619c:	acc00115 	stw	r19,4(r21)
 10061a0:	dc800e15 	stw	r18,56(sp)
 10061a4:	dc400d15 	stw	r17,52(sp)
 10061a8:	a47ff60e 	bge	r20,r17,1006184 <___vfprintf_internal_r+0x424>
 10061ac:	d9014f17 	ldw	r4,1340(sp)
 10061b0:	b00b883a 	mov	r5,r22
 10061b4:	d9800c04 	addi	r6,sp,48
 10061b8:	d9c15115 	stw	r7,1348(sp)
 10061bc:	1005d080 	call	1005d08 <__sprint_r>
 10061c0:	d9c15117 	ldw	r7,1348(sp)
 10061c4:	10009e1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10061c8:	843ffc04 	addi	r16,r16,-16
 10061cc:	dc800e17 	ldw	r18,56(sp)
 10061d0:	dc400d17 	ldw	r17,52(sp)
 10061d4:	dd401904 	addi	r21,sp,100
 10061d8:	9c3fed16 	blt	r19,r16,1006190 <___vfprintf_internal_r+0x430>
 10061dc:	9425883a 	add	r18,r18,r16
 10061e0:	8c400044 	addi	r17,r17,1
 10061e4:	008001c4 	movi	r2,7
 10061e8:	af000015 	stw	fp,0(r21)
 10061ec:	ac000115 	stw	r16,4(r21)
 10061f0:	dc800e15 	stw	r18,56(sp)
 10061f4:	dc400d15 	stw	r17,52(sp)
 10061f8:	1441f516 	blt	r2,r17,10069d0 <___vfprintf_internal_r+0xc70>
 10061fc:	ad400204 	addi	r21,r21,8
 1006200:	00000206 	br	100620c <___vfprintf_internal_r+0x4ac>
 1006204:	dc800e17 	ldw	r18,56(sp)
 1006208:	dc400d17 	ldw	r17,52(sp)
 100620c:	d8800407 	ldb	r2,16(sp)
 1006210:	10000b26 	beq	r2,zero,1006240 <___vfprintf_internal_r+0x4e0>
 1006214:	00800044 	movi	r2,1
 1006218:	94800044 	addi	r18,r18,1
 100621c:	8c400044 	addi	r17,r17,1
 1006220:	a8800115 	stw	r2,4(r21)
 1006224:	d8c00404 	addi	r3,sp,16
 1006228:	008001c4 	movi	r2,7
 100622c:	a8c00015 	stw	r3,0(r21)
 1006230:	dc800e15 	stw	r18,56(sp)
 1006234:	dc400d15 	stw	r17,52(sp)
 1006238:	1441da16 	blt	r2,r17,10069a4 <___vfprintf_internal_r+0xc44>
 100623c:	ad400204 	addi	r21,r21,8
 1006240:	d9015017 	ldw	r4,1344(sp)
 1006244:	20000b1e 	bne	r4,zero,1006274 <___vfprintf_internal_r+0x514>
 1006248:	d8800444 	addi	r2,sp,17
 100624c:	94800084 	addi	r18,r18,2
 1006250:	8c400044 	addi	r17,r17,1
 1006254:	a8800015 	stw	r2,0(r21)
 1006258:	00c00084 	movi	r3,2
 100625c:	008001c4 	movi	r2,7
 1006260:	a8c00115 	stw	r3,4(r21)
 1006264:	dc800e15 	stw	r18,56(sp)
 1006268:	dc400d15 	stw	r17,52(sp)
 100626c:	1441c216 	blt	r2,r17,1006978 <___vfprintf_internal_r+0xc18>
 1006270:	ad400204 	addi	r21,r21,8
 1006274:	d9414e17 	ldw	r5,1336(sp)
 1006278:	00802004 	movi	r2,128
 100627c:	2880b126 	beq	r5,r2,1006544 <___vfprintf_internal_r+0x7e4>
 1006280:	d8c14617 	ldw	r3,1304(sp)
 1006284:	19e1c83a 	sub	r16,r3,r7
 1006288:	0400260e 	bge	zero,r16,1006324 <___vfprintf_internal_r+0x5c4>
 100628c:	00800404 	movi	r2,16
 1006290:	1403cf0e 	bge	r2,r16,10071d0 <___vfprintf_internal_r+0x1470>
 1006294:	1027883a 	mov	r19,r2
 1006298:	07004074 	movhi	fp,257
 100629c:	e706ff84 	addi	fp,fp,7166
 10062a0:	050001c4 	movi	r20,7
 10062a4:	00000306 	br	10062b4 <___vfprintf_internal_r+0x554>
 10062a8:	843ffc04 	addi	r16,r16,-16
 10062ac:	ad400204 	addi	r21,r21,8
 10062b0:	9c00130e 	bge	r19,r16,1006300 <___vfprintf_internal_r+0x5a0>
 10062b4:	94800404 	addi	r18,r18,16
 10062b8:	8c400044 	addi	r17,r17,1
 10062bc:	af000015 	stw	fp,0(r21)
 10062c0:	acc00115 	stw	r19,4(r21)
 10062c4:	dc800e15 	stw	r18,56(sp)
 10062c8:	dc400d15 	stw	r17,52(sp)
 10062cc:	a47ff60e 	bge	r20,r17,10062a8 <___vfprintf_internal_r+0x548>
 10062d0:	d9014f17 	ldw	r4,1340(sp)
 10062d4:	b00b883a 	mov	r5,r22
 10062d8:	d9800c04 	addi	r6,sp,48
 10062dc:	d9c15115 	stw	r7,1348(sp)
 10062e0:	1005d080 	call	1005d08 <__sprint_r>
 10062e4:	d9c15117 	ldw	r7,1348(sp)
 10062e8:	1000551e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10062ec:	843ffc04 	addi	r16,r16,-16
 10062f0:	dc800e17 	ldw	r18,56(sp)
 10062f4:	dc400d17 	ldw	r17,52(sp)
 10062f8:	dd401904 	addi	r21,sp,100
 10062fc:	9c3fed16 	blt	r19,r16,10062b4 <___vfprintf_internal_r+0x554>
 1006300:	9425883a 	add	r18,r18,r16
 1006304:	8c400044 	addi	r17,r17,1
 1006308:	008001c4 	movi	r2,7
 100630c:	af000015 	stw	fp,0(r21)
 1006310:	ac000115 	stw	r16,4(r21)
 1006314:	dc800e15 	stw	r18,56(sp)
 1006318:	dc400d15 	stw	r17,52(sp)
 100631c:	14418216 	blt	r2,r17,1006928 <___vfprintf_internal_r+0xbc8>
 1006320:	ad400204 	addi	r21,r21,8
 1006324:	d9014c17 	ldw	r4,1328(sp)
 1006328:	2080400c 	andi	r2,r4,256
 100632c:	10004a1e 	bne	r2,zero,1006458 <___vfprintf_internal_r+0x6f8>
 1006330:	d9414117 	ldw	r5,1284(sp)
 1006334:	91e5883a 	add	r18,r18,r7
 1006338:	8c400044 	addi	r17,r17,1
 100633c:	008001c4 	movi	r2,7
 1006340:	a9400015 	stw	r5,0(r21)
 1006344:	a9c00115 	stw	r7,4(r21)
 1006348:	dc800e15 	stw	r18,56(sp)
 100634c:	dc400d15 	stw	r17,52(sp)
 1006350:	14416716 	blt	r2,r17,10068f0 <___vfprintf_internal_r+0xb90>
 1006354:	a8c00204 	addi	r3,r21,8
 1006358:	d9814c17 	ldw	r6,1328(sp)
 100635c:	3080010c 	andi	r2,r6,4
 1006360:	10002826 	beq	r2,zero,1006404 <___vfprintf_internal_r+0x6a4>
 1006364:	d8814a17 	ldw	r2,1320(sp)
 1006368:	d9014517 	ldw	r4,1300(sp)
 100636c:	1121c83a 	sub	r16,r2,r4
 1006370:	0400240e 	bge	zero,r16,1006404 <___vfprintf_internal_r+0x6a4>
 1006374:	00800404 	movi	r2,16
 1006378:	1404550e 	bge	r2,r16,10074d0 <___vfprintf_internal_r+0x1770>
 100637c:	dc400d17 	ldw	r17,52(sp)
 1006380:	1027883a 	mov	r19,r2
 1006384:	07004074 	movhi	fp,257
 1006388:	e7070384 	addi	fp,fp,7182
 100638c:	050001c4 	movi	r20,7
 1006390:	00000306 	br	10063a0 <___vfprintf_internal_r+0x640>
 1006394:	843ffc04 	addi	r16,r16,-16
 1006398:	18c00204 	addi	r3,r3,8
 100639c:	9c00110e 	bge	r19,r16,10063e4 <___vfprintf_internal_r+0x684>
 10063a0:	94800404 	addi	r18,r18,16
 10063a4:	8c400044 	addi	r17,r17,1
 10063a8:	1f000015 	stw	fp,0(r3)
 10063ac:	1cc00115 	stw	r19,4(r3)
 10063b0:	dc800e15 	stw	r18,56(sp)
 10063b4:	dc400d15 	stw	r17,52(sp)
 10063b8:	a47ff60e 	bge	r20,r17,1006394 <___vfprintf_internal_r+0x634>
 10063bc:	d9014f17 	ldw	r4,1340(sp)
 10063c0:	b00b883a 	mov	r5,r22
 10063c4:	d9800c04 	addi	r6,sp,48
 10063c8:	1005d080 	call	1005d08 <__sprint_r>
 10063cc:	10001c1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10063d0:	843ffc04 	addi	r16,r16,-16
 10063d4:	dc800e17 	ldw	r18,56(sp)
 10063d8:	dc400d17 	ldw	r17,52(sp)
 10063dc:	d8c01904 	addi	r3,sp,100
 10063e0:	9c3fef16 	blt	r19,r16,10063a0 <___vfprintf_internal_r+0x640>
 10063e4:	9425883a 	add	r18,r18,r16
 10063e8:	8c400044 	addi	r17,r17,1
 10063ec:	008001c4 	movi	r2,7
 10063f0:	1f000015 	stw	fp,0(r3)
 10063f4:	1c000115 	stw	r16,4(r3)
 10063f8:	dc800e15 	stw	r18,56(sp)
 10063fc:	dc400d15 	stw	r17,52(sp)
 1006400:	1440cb16 	blt	r2,r17,1006730 <___vfprintf_internal_r+0x9d0>
 1006404:	d8814a17 	ldw	r2,1320(sp)
 1006408:	d9414517 	ldw	r5,1300(sp)
 100640c:	1140010e 	bge	r2,r5,1006414 <___vfprintf_internal_r+0x6b4>
 1006410:	2805883a 	mov	r2,r5
 1006414:	d9814b17 	ldw	r6,1324(sp)
 1006418:	308d883a 	add	r6,r6,r2
 100641c:	d9814b15 	stw	r6,1324(sp)
 1006420:	90013b1e 	bne	r18,zero,1006910 <___vfprintf_internal_r+0xbb0>
 1006424:	d9c14017 	ldw	r7,1280(sp)
 1006428:	dd401904 	addi	r21,sp,100
 100642c:	d8000d15 	stw	zero,52(sp)
 1006430:	003ea706 	br	1005ed0 <___vfprintf_internal_r+0x170>
 1006434:	d8800e17 	ldw	r2,56(sp)
 1006438:	1005451e 	bne	r2,zero,1007950 <___vfprintf_internal_r+0x1bf0>
 100643c:	d8000d15 	stw	zero,52(sp)
 1006440:	b080030b 	ldhu	r2,12(r22)
 1006444:	1080100c 	andi	r2,r2,64
 1006448:	103e8726 	beq	r2,zero,1005e68 <___vfprintf_internal_r+0x108>
 100644c:	00bfffc4 	movi	r2,-1
 1006450:	d8814b15 	stw	r2,1324(sp)
 1006454:	003e8406 	br	1005e68 <___vfprintf_internal_r+0x108>
 1006458:	d9814d17 	ldw	r6,1332(sp)
 100645c:	00801944 	movi	r2,101
 1006460:	11806e16 	blt	r2,r6,100661c <___vfprintf_internal_r+0x8bc>
 1006464:	d9414717 	ldw	r5,1308(sp)
 1006468:	00c00044 	movi	r3,1
 100646c:	1943490e 	bge	r3,r5,1007194 <___vfprintf_internal_r+0x1434>
 1006470:	d8814117 	ldw	r2,1284(sp)
 1006474:	94800044 	addi	r18,r18,1
 1006478:	8c400044 	addi	r17,r17,1
 100647c:	a8800015 	stw	r2,0(r21)
 1006480:	008001c4 	movi	r2,7
 1006484:	a8c00115 	stw	r3,4(r21)
 1006488:	dc800e15 	stw	r18,56(sp)
 100648c:	dc400d15 	stw	r17,52(sp)
 1006490:	1441ca16 	blt	r2,r17,1006bbc <___vfprintf_internal_r+0xe5c>
 1006494:	a8c00204 	addi	r3,r21,8
 1006498:	d9014917 	ldw	r4,1316(sp)
 100649c:	00800044 	movi	r2,1
 10064a0:	94800044 	addi	r18,r18,1
 10064a4:	8c400044 	addi	r17,r17,1
 10064a8:	18800115 	stw	r2,4(r3)
 10064ac:	008001c4 	movi	r2,7
 10064b0:	19000015 	stw	r4,0(r3)
 10064b4:	dc800e15 	stw	r18,56(sp)
 10064b8:	dc400d15 	stw	r17,52(sp)
 10064bc:	1441b616 	blt	r2,r17,1006b98 <___vfprintf_internal_r+0xe38>
 10064c0:	1cc00204 	addi	r19,r3,8
 10064c4:	d9014217 	ldw	r4,1288(sp)
 10064c8:	d9414317 	ldw	r5,1292(sp)
 10064cc:	000d883a 	mov	r6,zero
 10064d0:	000f883a 	mov	r7,zero
 10064d4:	100d4480 	call	100d448 <__nedf2>
 10064d8:	10017426 	beq	r2,zero,1006aac <___vfprintf_internal_r+0xd4c>
 10064dc:	d9414717 	ldw	r5,1308(sp)
 10064e0:	d9814117 	ldw	r6,1284(sp)
 10064e4:	8c400044 	addi	r17,r17,1
 10064e8:	2c85883a 	add	r2,r5,r18
 10064ec:	14bfffc4 	addi	r18,r2,-1
 10064f0:	28bfffc4 	addi	r2,r5,-1
 10064f4:	30c00044 	addi	r3,r6,1
 10064f8:	98800115 	stw	r2,4(r19)
 10064fc:	008001c4 	movi	r2,7
 1006500:	98c00015 	stw	r3,0(r19)
 1006504:	dc800e15 	stw	r18,56(sp)
 1006508:	dc400d15 	stw	r17,52(sp)
 100650c:	14418e16 	blt	r2,r17,1006b48 <___vfprintf_internal_r+0xde8>
 1006510:	9cc00204 	addi	r19,r19,8
 1006514:	d9414817 	ldw	r5,1312(sp)
 1006518:	d8800804 	addi	r2,sp,32
 100651c:	8c400044 	addi	r17,r17,1
 1006520:	9165883a 	add	r18,r18,r5
 1006524:	98800015 	stw	r2,0(r19)
 1006528:	008001c4 	movi	r2,7
 100652c:	99400115 	stw	r5,4(r19)
 1006530:	dc800e15 	stw	r18,56(sp)
 1006534:	dc400d15 	stw	r17,52(sp)
 1006538:	1440ed16 	blt	r2,r17,10068f0 <___vfprintf_internal_r+0xb90>
 100653c:	98c00204 	addi	r3,r19,8
 1006540:	003f8506 	br	1006358 <___vfprintf_internal_r+0x5f8>
 1006544:	d9814a17 	ldw	r6,1320(sp)
 1006548:	d8814517 	ldw	r2,1300(sp)
 100654c:	30a1c83a 	sub	r16,r6,r2
 1006550:	043f4b0e 	bge	zero,r16,1006280 <___vfprintf_internal_r+0x520>
 1006554:	00800404 	movi	r2,16
 1006558:	14043a0e 	bge	r2,r16,1007644 <___vfprintf_internal_r+0x18e4>
 100655c:	1027883a 	mov	r19,r2
 1006560:	07004074 	movhi	fp,257
 1006564:	e706ff84 	addi	fp,fp,7166
 1006568:	050001c4 	movi	r20,7
 100656c:	00000306 	br	100657c <___vfprintf_internal_r+0x81c>
 1006570:	843ffc04 	addi	r16,r16,-16
 1006574:	ad400204 	addi	r21,r21,8
 1006578:	9c00130e 	bge	r19,r16,10065c8 <___vfprintf_internal_r+0x868>
 100657c:	94800404 	addi	r18,r18,16
 1006580:	8c400044 	addi	r17,r17,1
 1006584:	af000015 	stw	fp,0(r21)
 1006588:	acc00115 	stw	r19,4(r21)
 100658c:	dc800e15 	stw	r18,56(sp)
 1006590:	dc400d15 	stw	r17,52(sp)
 1006594:	a47ff60e 	bge	r20,r17,1006570 <___vfprintf_internal_r+0x810>
 1006598:	d9014f17 	ldw	r4,1340(sp)
 100659c:	b00b883a 	mov	r5,r22
 10065a0:	d9800c04 	addi	r6,sp,48
 10065a4:	d9c15115 	stw	r7,1348(sp)
 10065a8:	1005d080 	call	1005d08 <__sprint_r>
 10065ac:	d9c15117 	ldw	r7,1348(sp)
 10065b0:	103fa31e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10065b4:	843ffc04 	addi	r16,r16,-16
 10065b8:	dc800e17 	ldw	r18,56(sp)
 10065bc:	dc400d17 	ldw	r17,52(sp)
 10065c0:	dd401904 	addi	r21,sp,100
 10065c4:	9c3fed16 	blt	r19,r16,100657c <___vfprintf_internal_r+0x81c>
 10065c8:	9425883a 	add	r18,r18,r16
 10065cc:	8c400044 	addi	r17,r17,1
 10065d0:	008001c4 	movi	r2,7
 10065d4:	af000015 	stw	fp,0(r21)
 10065d8:	ac000115 	stw	r16,4(r21)
 10065dc:	dc800e15 	stw	r18,56(sp)
 10065e0:	dc400d15 	stw	r17,52(sp)
 10065e4:	14416116 	blt	r2,r17,1006b6c <___vfprintf_internal_r+0xe0c>
 10065e8:	ad400204 	addi	r21,r21,8
 10065ec:	003f2406 	br	1006280 <___vfprintf_internal_r+0x520>
 10065f0:	d9014f17 	ldw	r4,1340(sp)
 10065f4:	100388c0 	call	100388c <__sinit>
 10065f8:	d9c15117 	ldw	r7,1348(sp)
 10065fc:	003def06 	br	1005dbc <___vfprintf_internal_r+0x5c>
 1006600:	d9014f17 	ldw	r4,1340(sp)
 1006604:	b00b883a 	mov	r5,r22
 1006608:	d9c15115 	stw	r7,1348(sp)
 100660c:	1007cc00 	call	1007cc0 <__swsetup_r>
 1006610:	d9c15117 	ldw	r7,1348(sp)
 1006614:	103dee26 	beq	r2,zero,1005dd0 <___vfprintf_internal_r+0x70>
 1006618:	003f8c06 	br	100644c <___vfprintf_internal_r+0x6ec>
 100661c:	d9014217 	ldw	r4,1288(sp)
 1006620:	d9414317 	ldw	r5,1292(sp)
 1006624:	000d883a 	mov	r6,zero
 1006628:	000f883a 	mov	r7,zero
 100662c:	100d3c00 	call	100d3c0 <__eqdf2>
 1006630:	1000f21e 	bne	r2,zero,10069fc <___vfprintf_internal_r+0xc9c>
 1006634:	00804074 	movhi	r2,257
 1006638:	1086ff04 	addi	r2,r2,7164
 100663c:	94800044 	addi	r18,r18,1
 1006640:	8c400044 	addi	r17,r17,1
 1006644:	a8800015 	stw	r2,0(r21)
 1006648:	00c00044 	movi	r3,1
 100664c:	008001c4 	movi	r2,7
 1006650:	a8c00115 	stw	r3,4(r21)
 1006654:	dc800e15 	stw	r18,56(sp)
 1006658:	dc400d15 	stw	r17,52(sp)
 100665c:	14430016 	blt	r2,r17,1007260 <___vfprintf_internal_r+0x1500>
 1006660:	a8c00204 	addi	r3,r21,8
 1006664:	d8800517 	ldw	r2,20(sp)
 1006668:	d9014717 	ldw	r4,1308(sp)
 100666c:	11015c0e 	bge	r2,r4,1006be0 <___vfprintf_internal_r+0xe80>
 1006670:	dc400d17 	ldw	r17,52(sp)
 1006674:	d9814917 	ldw	r6,1316(sp)
 1006678:	00800044 	movi	r2,1
 100667c:	94800044 	addi	r18,r18,1
 1006680:	8c400044 	addi	r17,r17,1
 1006684:	18800115 	stw	r2,4(r3)
 1006688:	008001c4 	movi	r2,7
 100668c:	19800015 	stw	r6,0(r3)
 1006690:	dc800e15 	stw	r18,56(sp)
 1006694:	dc400d15 	stw	r17,52(sp)
 1006698:	14431616 	blt	r2,r17,10072f4 <___vfprintf_internal_r+0x1594>
 100669c:	18c00204 	addi	r3,r3,8
 10066a0:	d8814717 	ldw	r2,1308(sp)
 10066a4:	143fffc4 	addi	r16,r2,-1
 10066a8:	043f2b0e 	bge	zero,r16,1006358 <___vfprintf_internal_r+0x5f8>
 10066ac:	00800404 	movi	r2,16
 10066b0:	1402a80e 	bge	r2,r16,1007154 <___vfprintf_internal_r+0x13f4>
 10066b4:	dc400d17 	ldw	r17,52(sp)
 10066b8:	1027883a 	mov	r19,r2
 10066bc:	07004074 	movhi	fp,257
 10066c0:	e706ff84 	addi	fp,fp,7166
 10066c4:	050001c4 	movi	r20,7
 10066c8:	00000306 	br	10066d8 <___vfprintf_internal_r+0x978>
 10066cc:	18c00204 	addi	r3,r3,8
 10066d0:	843ffc04 	addi	r16,r16,-16
 10066d4:	9c02a20e 	bge	r19,r16,1007160 <___vfprintf_internal_r+0x1400>
 10066d8:	94800404 	addi	r18,r18,16
 10066dc:	8c400044 	addi	r17,r17,1
 10066e0:	1f000015 	stw	fp,0(r3)
 10066e4:	1cc00115 	stw	r19,4(r3)
 10066e8:	dc800e15 	stw	r18,56(sp)
 10066ec:	dc400d15 	stw	r17,52(sp)
 10066f0:	a47ff60e 	bge	r20,r17,10066cc <___vfprintf_internal_r+0x96c>
 10066f4:	d9014f17 	ldw	r4,1340(sp)
 10066f8:	b00b883a 	mov	r5,r22
 10066fc:	d9800c04 	addi	r6,sp,48
 1006700:	1005d080 	call	1005d08 <__sprint_r>
 1006704:	103f4e1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006708:	dc800e17 	ldw	r18,56(sp)
 100670c:	dc400d17 	ldw	r17,52(sp)
 1006710:	d8c01904 	addi	r3,sp,100
 1006714:	003fee06 	br	10066d0 <___vfprintf_internal_r+0x970>
 1006718:	d8802c0b 	ldhu	r2,176(sp)
 100671c:	00ffffc4 	movi	r3,-1
 1006720:	d8c14b15 	stw	r3,1324(sp)
 1006724:	1080100c 	andi	r2,r2,64
 1006728:	103dcc1e 	bne	r2,zero,1005e5c <___vfprintf_internal_r+0xfc>
 100672c:	003dce06 	br	1005e68 <___vfprintf_internal_r+0x108>
 1006730:	d9014f17 	ldw	r4,1340(sp)
 1006734:	b00b883a 	mov	r5,r22
 1006738:	d9800c04 	addi	r6,sp,48
 100673c:	1005d080 	call	1005d08 <__sprint_r>
 1006740:	103f3f1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006744:	dc800e17 	ldw	r18,56(sp)
 1006748:	003f2e06 	br	1006404 <___vfprintf_internal_r+0x6a4>
 100674c:	d9414c17 	ldw	r5,1328(sp)
 1006750:	29400414 	ori	r5,r5,16
 1006754:	d9414c15 	stw	r5,1328(sp)
 1006758:	d9814c17 	ldw	r6,1328(sp)
 100675c:	3080080c 	andi	r2,r6,32
 1006760:	10014f1e 	bne	r2,zero,1006ca0 <___vfprintf_internal_r+0xf40>
 1006764:	d8c14c17 	ldw	r3,1328(sp)
 1006768:	1880040c 	andi	r2,r3,16
 100676c:	1002f01e 	bne	r2,zero,1007330 <___vfprintf_internal_r+0x15d0>
 1006770:	d9014c17 	ldw	r4,1328(sp)
 1006774:	2080100c 	andi	r2,r4,64
 1006778:	1002ed26 	beq	r2,zero,1007330 <___vfprintf_internal_r+0x15d0>
 100677c:	3880000f 	ldh	r2,0(r7)
 1006780:	39c00104 	addi	r7,r7,4
 1006784:	d9c14015 	stw	r7,1280(sp)
 1006788:	1023d7fa 	srai	r17,r2,31
 100678c:	1021883a 	mov	r16,r2
 1006790:	88037816 	blt	r17,zero,1007574 <___vfprintf_internal_r+0x1814>
 1006794:	01000044 	movi	r4,1
 1006798:	98000416 	blt	r19,zero,10067ac <___vfprintf_internal_r+0xa4c>
 100679c:	d8c14c17 	ldw	r3,1328(sp)
 10067a0:	00bfdfc4 	movi	r2,-129
 10067a4:	1886703a 	and	r3,r3,r2
 10067a8:	d8c14c15 	stw	r3,1328(sp)
 10067ac:	8444b03a 	or	r2,r16,r17
 10067b0:	10022c1e 	bne	r2,zero,1007064 <___vfprintf_internal_r+0x1304>
 10067b4:	98022b1e 	bne	r19,zero,1007064 <___vfprintf_internal_r+0x1304>
 10067b8:	20803fcc 	andi	r2,r4,255
 10067bc:	1002a126 	beq	r2,zero,1007244 <___vfprintf_internal_r+0x14e4>
 10067c0:	d8c01904 	addi	r3,sp,100
 10067c4:	dd000f04 	addi	r20,sp,60
 10067c8:	d8c14115 	stw	r3,1284(sp)
 10067cc:	d8c14117 	ldw	r3,1284(sp)
 10067d0:	dcc14515 	stw	r19,1300(sp)
 10067d4:	a0c5c83a 	sub	r2,r20,r3
 10067d8:	11c00a04 	addi	r7,r2,40
 10067dc:	99c0010e 	bge	r19,r7,10067e4 <___vfprintf_internal_r+0xa84>
 10067e0:	d9c14515 	stw	r7,1300(sp)
 10067e4:	dcc14615 	stw	r19,1304(sp)
 10067e8:	d8800407 	ldb	r2,16(sp)
 10067ec:	103e4c26 	beq	r2,zero,1006120 <___vfprintf_internal_r+0x3c0>
 10067f0:	d8814517 	ldw	r2,1300(sp)
 10067f4:	10800044 	addi	r2,r2,1
 10067f8:	d8814515 	stw	r2,1300(sp)
 10067fc:	003e4806 	br	1006120 <___vfprintf_internal_r+0x3c0>
 1006800:	d9814c17 	ldw	r6,1328(sp)
 1006804:	31800414 	ori	r6,r6,16
 1006808:	d9814c15 	stw	r6,1328(sp)
 100680c:	d8c14c17 	ldw	r3,1328(sp)
 1006810:	1880080c 	andi	r2,r3,32
 1006814:	1001271e 	bne	r2,zero,1006cb4 <___vfprintf_internal_r+0xf54>
 1006818:	d9414c17 	ldw	r5,1328(sp)
 100681c:	2880040c 	andi	r2,r5,16
 1006820:	1002bc1e 	bne	r2,zero,1007314 <___vfprintf_internal_r+0x15b4>
 1006824:	d9814c17 	ldw	r6,1328(sp)
 1006828:	3080100c 	andi	r2,r6,64
 100682c:	1002b926 	beq	r2,zero,1007314 <___vfprintf_internal_r+0x15b4>
 1006830:	3c00000b 	ldhu	r16,0(r7)
 1006834:	0009883a 	mov	r4,zero
 1006838:	39c00104 	addi	r7,r7,4
 100683c:	0023883a 	mov	r17,zero
 1006840:	d9c14015 	stw	r7,1280(sp)
 1006844:	d8000405 	stb	zero,16(sp)
 1006848:	003fd306 	br	1006798 <___vfprintf_internal_r+0xa38>
 100684c:	d9014c17 	ldw	r4,1328(sp)
 1006850:	21000414 	ori	r4,r4,16
 1006854:	d9014c15 	stw	r4,1328(sp)
 1006858:	d9414c17 	ldw	r5,1328(sp)
 100685c:	2880080c 	andi	r2,r5,32
 1006860:	1001081e 	bne	r2,zero,1006c84 <___vfprintf_internal_r+0xf24>
 1006864:	d8c14c17 	ldw	r3,1328(sp)
 1006868:	1880040c 	andi	r2,r3,16
 100686c:	1002b61e 	bne	r2,zero,1007348 <___vfprintf_internal_r+0x15e8>
 1006870:	d9014c17 	ldw	r4,1328(sp)
 1006874:	2080100c 	andi	r2,r4,64
 1006878:	1002b326 	beq	r2,zero,1007348 <___vfprintf_internal_r+0x15e8>
 100687c:	3c00000b 	ldhu	r16,0(r7)
 1006880:	01000044 	movi	r4,1
 1006884:	39c00104 	addi	r7,r7,4
 1006888:	0023883a 	mov	r17,zero
 100688c:	d9c14015 	stw	r7,1280(sp)
 1006890:	d8000405 	stb	zero,16(sp)
 1006894:	003fc006 	br	1006798 <___vfprintf_internal_r+0xa38>
 1006898:	d9014f17 	ldw	r4,1340(sp)
 100689c:	b00b883a 	mov	r5,r22
 10068a0:	d9800c04 	addi	r6,sp,48
 10068a4:	1005d080 	call	1005d08 <__sprint_r>
 10068a8:	103ee51e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10068ac:	dc800e17 	ldw	r18,56(sp)
 10068b0:	d8c01904 	addi	r3,sp,100
 10068b4:	d9814c17 	ldw	r6,1328(sp)
 10068b8:	3080004c 	andi	r2,r6,1
 10068bc:	1005003a 	cmpeq	r2,r2,zero
 10068c0:	103ea51e 	bne	r2,zero,1006358 <___vfprintf_internal_r+0x5f8>
 10068c4:	00800044 	movi	r2,1
 10068c8:	dc400d17 	ldw	r17,52(sp)
 10068cc:	18800115 	stw	r2,4(r3)
 10068d0:	d8814917 	ldw	r2,1316(sp)
 10068d4:	94800044 	addi	r18,r18,1
 10068d8:	8c400044 	addi	r17,r17,1
 10068dc:	18800015 	stw	r2,0(r3)
 10068e0:	008001c4 	movi	r2,7
 10068e4:	dc800e15 	stw	r18,56(sp)
 10068e8:	dc400d15 	stw	r17,52(sp)
 10068ec:	1442240e 	bge	r2,r17,1007180 <___vfprintf_internal_r+0x1420>
 10068f0:	d9014f17 	ldw	r4,1340(sp)
 10068f4:	b00b883a 	mov	r5,r22
 10068f8:	d9800c04 	addi	r6,sp,48
 10068fc:	1005d080 	call	1005d08 <__sprint_r>
 1006900:	103ecf1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006904:	dc800e17 	ldw	r18,56(sp)
 1006908:	d8c01904 	addi	r3,sp,100
 100690c:	003e9206 	br	1006358 <___vfprintf_internal_r+0x5f8>
 1006910:	d9014f17 	ldw	r4,1340(sp)
 1006914:	b00b883a 	mov	r5,r22
 1006918:	d9800c04 	addi	r6,sp,48
 100691c:	1005d080 	call	1005d08 <__sprint_r>
 1006920:	103ec026 	beq	r2,zero,1006424 <___vfprintf_internal_r+0x6c4>
 1006924:	003ec606 	br	1006440 <___vfprintf_internal_r+0x6e0>
 1006928:	d9014f17 	ldw	r4,1340(sp)
 100692c:	b00b883a 	mov	r5,r22
 1006930:	d9800c04 	addi	r6,sp,48
 1006934:	d9c15115 	stw	r7,1348(sp)
 1006938:	1005d080 	call	1005d08 <__sprint_r>
 100693c:	d9c15117 	ldw	r7,1348(sp)
 1006940:	103ebf1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006944:	dc800e17 	ldw	r18,56(sp)
 1006948:	dc400d17 	ldw	r17,52(sp)
 100694c:	dd401904 	addi	r21,sp,100
 1006950:	003e7406 	br	1006324 <___vfprintf_internal_r+0x5c4>
 1006954:	d9014f17 	ldw	r4,1340(sp)
 1006958:	b00b883a 	mov	r5,r22
 100695c:	d9800c04 	addi	r6,sp,48
 1006960:	d9c15115 	stw	r7,1348(sp)
 1006964:	1005d080 	call	1005d08 <__sprint_r>
 1006968:	d9c15117 	ldw	r7,1348(sp)
 100696c:	103eb41e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006970:	dd401904 	addi	r21,sp,100
 1006974:	003d6d06 	br	1005f2c <___vfprintf_internal_r+0x1cc>
 1006978:	d9014f17 	ldw	r4,1340(sp)
 100697c:	b00b883a 	mov	r5,r22
 1006980:	d9800c04 	addi	r6,sp,48
 1006984:	d9c15115 	stw	r7,1348(sp)
 1006988:	1005d080 	call	1005d08 <__sprint_r>
 100698c:	d9c15117 	ldw	r7,1348(sp)
 1006990:	103eab1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006994:	dc800e17 	ldw	r18,56(sp)
 1006998:	dc400d17 	ldw	r17,52(sp)
 100699c:	dd401904 	addi	r21,sp,100
 10069a0:	003e3406 	br	1006274 <___vfprintf_internal_r+0x514>
 10069a4:	d9014f17 	ldw	r4,1340(sp)
 10069a8:	b00b883a 	mov	r5,r22
 10069ac:	d9800c04 	addi	r6,sp,48
 10069b0:	d9c15115 	stw	r7,1348(sp)
 10069b4:	1005d080 	call	1005d08 <__sprint_r>
 10069b8:	d9c15117 	ldw	r7,1348(sp)
 10069bc:	103ea01e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10069c0:	dc800e17 	ldw	r18,56(sp)
 10069c4:	dc400d17 	ldw	r17,52(sp)
 10069c8:	dd401904 	addi	r21,sp,100
 10069cc:	003e1c06 	br	1006240 <___vfprintf_internal_r+0x4e0>
 10069d0:	d9014f17 	ldw	r4,1340(sp)
 10069d4:	b00b883a 	mov	r5,r22
 10069d8:	d9800c04 	addi	r6,sp,48
 10069dc:	d9c15115 	stw	r7,1348(sp)
 10069e0:	1005d080 	call	1005d08 <__sprint_r>
 10069e4:	d9c15117 	ldw	r7,1348(sp)
 10069e8:	103e951e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10069ec:	dc800e17 	ldw	r18,56(sp)
 10069f0:	dc400d17 	ldw	r17,52(sp)
 10069f4:	dd401904 	addi	r21,sp,100
 10069f8:	003e0406 	br	100620c <___vfprintf_internal_r+0x4ac>
 10069fc:	d9000517 	ldw	r4,20(sp)
 1006a00:	0102580e 	bge	zero,r4,1007364 <___vfprintf_internal_r+0x1604>
 1006a04:	d9814717 	ldw	r6,1308(sp)
 1006a08:	21807a16 	blt	r4,r6,1006bf4 <___vfprintf_internal_r+0xe94>
 1006a0c:	d8814117 	ldw	r2,1284(sp)
 1006a10:	91a5883a 	add	r18,r18,r6
 1006a14:	8c400044 	addi	r17,r17,1
 1006a18:	a8800015 	stw	r2,0(r21)
 1006a1c:	008001c4 	movi	r2,7
 1006a20:	a9800115 	stw	r6,4(r21)
 1006a24:	dc800e15 	stw	r18,56(sp)
 1006a28:	dc400d15 	stw	r17,52(sp)
 1006a2c:	1442fc16 	blt	r2,r17,1007620 <___vfprintf_internal_r+0x18c0>
 1006a30:	a8c00204 	addi	r3,r21,8
 1006a34:	d9414717 	ldw	r5,1308(sp)
 1006a38:	2161c83a 	sub	r16,r4,r5
 1006a3c:	043f9d0e 	bge	zero,r16,10068b4 <___vfprintf_internal_r+0xb54>
 1006a40:	00800404 	movi	r2,16
 1006a44:	1402190e 	bge	r2,r16,10072ac <___vfprintf_internal_r+0x154c>
 1006a48:	dc400d17 	ldw	r17,52(sp)
 1006a4c:	1027883a 	mov	r19,r2
 1006a50:	07004074 	movhi	fp,257
 1006a54:	e706ff84 	addi	fp,fp,7166
 1006a58:	050001c4 	movi	r20,7
 1006a5c:	00000306 	br	1006a6c <___vfprintf_internal_r+0xd0c>
 1006a60:	18c00204 	addi	r3,r3,8
 1006a64:	843ffc04 	addi	r16,r16,-16
 1006a68:	9c02130e 	bge	r19,r16,10072b8 <___vfprintf_internal_r+0x1558>
 1006a6c:	94800404 	addi	r18,r18,16
 1006a70:	8c400044 	addi	r17,r17,1
 1006a74:	1f000015 	stw	fp,0(r3)
 1006a78:	1cc00115 	stw	r19,4(r3)
 1006a7c:	dc800e15 	stw	r18,56(sp)
 1006a80:	dc400d15 	stw	r17,52(sp)
 1006a84:	a47ff60e 	bge	r20,r17,1006a60 <___vfprintf_internal_r+0xd00>
 1006a88:	d9014f17 	ldw	r4,1340(sp)
 1006a8c:	b00b883a 	mov	r5,r22
 1006a90:	d9800c04 	addi	r6,sp,48
 1006a94:	1005d080 	call	1005d08 <__sprint_r>
 1006a98:	103e691e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006a9c:	dc800e17 	ldw	r18,56(sp)
 1006aa0:	dc400d17 	ldw	r17,52(sp)
 1006aa4:	d8c01904 	addi	r3,sp,100
 1006aa8:	003fee06 	br	1006a64 <___vfprintf_internal_r+0xd04>
 1006aac:	d8814717 	ldw	r2,1308(sp)
 1006ab0:	143fffc4 	addi	r16,r2,-1
 1006ab4:	043e970e 	bge	zero,r16,1006514 <___vfprintf_internal_r+0x7b4>
 1006ab8:	00800404 	movi	r2,16
 1006abc:	1400180e 	bge	r2,r16,1006b20 <___vfprintf_internal_r+0xdc0>
 1006ac0:	1029883a 	mov	r20,r2
 1006ac4:	07004074 	movhi	fp,257
 1006ac8:	e706ff84 	addi	fp,fp,7166
 1006acc:	054001c4 	movi	r21,7
 1006ad0:	00000306 	br	1006ae0 <___vfprintf_internal_r+0xd80>
 1006ad4:	9cc00204 	addi	r19,r19,8
 1006ad8:	843ffc04 	addi	r16,r16,-16
 1006adc:	a400120e 	bge	r20,r16,1006b28 <___vfprintf_internal_r+0xdc8>
 1006ae0:	94800404 	addi	r18,r18,16
 1006ae4:	8c400044 	addi	r17,r17,1
 1006ae8:	9f000015 	stw	fp,0(r19)
 1006aec:	9d000115 	stw	r20,4(r19)
 1006af0:	dc800e15 	stw	r18,56(sp)
 1006af4:	dc400d15 	stw	r17,52(sp)
 1006af8:	ac7ff60e 	bge	r21,r17,1006ad4 <___vfprintf_internal_r+0xd74>
 1006afc:	d9014f17 	ldw	r4,1340(sp)
 1006b00:	b00b883a 	mov	r5,r22
 1006b04:	d9800c04 	addi	r6,sp,48
 1006b08:	1005d080 	call	1005d08 <__sprint_r>
 1006b0c:	103e4c1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006b10:	dc800e17 	ldw	r18,56(sp)
 1006b14:	dc400d17 	ldw	r17,52(sp)
 1006b18:	dcc01904 	addi	r19,sp,100
 1006b1c:	003fee06 	br	1006ad8 <___vfprintf_internal_r+0xd78>
 1006b20:	07004074 	movhi	fp,257
 1006b24:	e706ff84 	addi	fp,fp,7166
 1006b28:	9425883a 	add	r18,r18,r16
 1006b2c:	8c400044 	addi	r17,r17,1
 1006b30:	008001c4 	movi	r2,7
 1006b34:	9f000015 	stw	fp,0(r19)
 1006b38:	9c000115 	stw	r16,4(r19)
 1006b3c:	dc800e15 	stw	r18,56(sp)
 1006b40:	dc400d15 	stw	r17,52(sp)
 1006b44:	147e720e 	bge	r2,r17,1006510 <___vfprintf_internal_r+0x7b0>
 1006b48:	d9014f17 	ldw	r4,1340(sp)
 1006b4c:	b00b883a 	mov	r5,r22
 1006b50:	d9800c04 	addi	r6,sp,48
 1006b54:	1005d080 	call	1005d08 <__sprint_r>
 1006b58:	103e391e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006b5c:	dc800e17 	ldw	r18,56(sp)
 1006b60:	dc400d17 	ldw	r17,52(sp)
 1006b64:	dcc01904 	addi	r19,sp,100
 1006b68:	003e6a06 	br	1006514 <___vfprintf_internal_r+0x7b4>
 1006b6c:	d9014f17 	ldw	r4,1340(sp)
 1006b70:	b00b883a 	mov	r5,r22
 1006b74:	d9800c04 	addi	r6,sp,48
 1006b78:	d9c15115 	stw	r7,1348(sp)
 1006b7c:	1005d080 	call	1005d08 <__sprint_r>
 1006b80:	d9c15117 	ldw	r7,1348(sp)
 1006b84:	103e2e1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006b88:	dc800e17 	ldw	r18,56(sp)
 1006b8c:	dc400d17 	ldw	r17,52(sp)
 1006b90:	dd401904 	addi	r21,sp,100
 1006b94:	003dba06 	br	1006280 <___vfprintf_internal_r+0x520>
 1006b98:	d9014f17 	ldw	r4,1340(sp)
 1006b9c:	b00b883a 	mov	r5,r22
 1006ba0:	d9800c04 	addi	r6,sp,48
 1006ba4:	1005d080 	call	1005d08 <__sprint_r>
 1006ba8:	103e251e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006bac:	dc800e17 	ldw	r18,56(sp)
 1006bb0:	dc400d17 	ldw	r17,52(sp)
 1006bb4:	dcc01904 	addi	r19,sp,100
 1006bb8:	003e4206 	br	10064c4 <___vfprintf_internal_r+0x764>
 1006bbc:	d9014f17 	ldw	r4,1340(sp)
 1006bc0:	b00b883a 	mov	r5,r22
 1006bc4:	d9800c04 	addi	r6,sp,48
 1006bc8:	1005d080 	call	1005d08 <__sprint_r>
 1006bcc:	103e1c1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1006bd0:	dc800e17 	ldw	r18,56(sp)
 1006bd4:	dc400d17 	ldw	r17,52(sp)
 1006bd8:	d8c01904 	addi	r3,sp,100
 1006bdc:	003e2e06 	br	1006498 <___vfprintf_internal_r+0x738>
 1006be0:	d9414c17 	ldw	r5,1328(sp)
 1006be4:	2880004c 	andi	r2,r5,1
 1006be8:	1005003a 	cmpeq	r2,r2,zero
 1006bec:	103dda1e 	bne	r2,zero,1006358 <___vfprintf_internal_r+0x5f8>
 1006bf0:	003e9f06 	br	1006670 <___vfprintf_internal_r+0x910>
 1006bf4:	d8c14117 	ldw	r3,1284(sp)
 1006bf8:	9125883a 	add	r18,r18,r4
 1006bfc:	8c400044 	addi	r17,r17,1
 1006c00:	008001c4 	movi	r2,7
 1006c04:	a8c00015 	stw	r3,0(r21)
 1006c08:	a9000115 	stw	r4,4(r21)
 1006c0c:	dc800e15 	stw	r18,56(sp)
 1006c10:	dc400d15 	stw	r17,52(sp)
 1006c14:	14426c16 	blt	r2,r17,10075c8 <___vfprintf_internal_r+0x1868>
 1006c18:	a8c00204 	addi	r3,r21,8
 1006c1c:	d9414917 	ldw	r5,1316(sp)
 1006c20:	00800044 	movi	r2,1
 1006c24:	94800044 	addi	r18,r18,1
 1006c28:	8c400044 	addi	r17,r17,1
 1006c2c:	18800115 	stw	r2,4(r3)
 1006c30:	008001c4 	movi	r2,7
 1006c34:	19400015 	stw	r5,0(r3)
 1006c38:	dc800e15 	stw	r18,56(sp)
 1006c3c:	dc400d15 	stw	r17,52(sp)
 1006c40:	2021883a 	mov	r16,r4
 1006c44:	14425616 	blt	r2,r17,10075a0 <___vfprintf_internal_r+0x1840>
 1006c48:	19400204 	addi	r5,r3,8
 1006c4c:	d9814717 	ldw	r6,1308(sp)
 1006c50:	8c400044 	addi	r17,r17,1
 1006c54:	dc400d15 	stw	r17,52(sp)
 1006c58:	3107c83a 	sub	r3,r6,r4
 1006c5c:	d9014117 	ldw	r4,1284(sp)
 1006c60:	90e5883a 	add	r18,r18,r3
 1006c64:	28c00115 	stw	r3,4(r5)
 1006c68:	8105883a 	add	r2,r16,r4
 1006c6c:	28800015 	stw	r2,0(r5)
 1006c70:	008001c4 	movi	r2,7
 1006c74:	dc800e15 	stw	r18,56(sp)
 1006c78:	147f1d16 	blt	r2,r17,10068f0 <___vfprintf_internal_r+0xb90>
 1006c7c:	28c00204 	addi	r3,r5,8
 1006c80:	003db506 	br	1006358 <___vfprintf_internal_r+0x5f8>
 1006c84:	3c000017 	ldw	r16,0(r7)
 1006c88:	3c400117 	ldw	r17,4(r7)
 1006c8c:	39800204 	addi	r6,r7,8
 1006c90:	01000044 	movi	r4,1
 1006c94:	d9814015 	stw	r6,1280(sp)
 1006c98:	d8000405 	stb	zero,16(sp)
 1006c9c:	003ebe06 	br	1006798 <___vfprintf_internal_r+0xa38>
 1006ca0:	3c000017 	ldw	r16,0(r7)
 1006ca4:	3c400117 	ldw	r17,4(r7)
 1006ca8:	38800204 	addi	r2,r7,8
 1006cac:	d8814015 	stw	r2,1280(sp)
 1006cb0:	003eb706 	br	1006790 <___vfprintf_internal_r+0xa30>
 1006cb4:	3c000017 	ldw	r16,0(r7)
 1006cb8:	3c400117 	ldw	r17,4(r7)
 1006cbc:	39000204 	addi	r4,r7,8
 1006cc0:	d9014015 	stw	r4,1280(sp)
 1006cc4:	0009883a 	mov	r4,zero
 1006cc8:	d8000405 	stb	zero,16(sp)
 1006ccc:	003eb206 	br	1006798 <___vfprintf_internal_r+0xa38>
 1006cd0:	38c00017 	ldw	r3,0(r7)
 1006cd4:	39c00104 	addi	r7,r7,4
 1006cd8:	d8c14a15 	stw	r3,1320(sp)
 1006cdc:	1800d70e 	bge	r3,zero,100703c <___vfprintf_internal_r+0x12dc>
 1006ce0:	00c7c83a 	sub	r3,zero,r3
 1006ce4:	d8c14a15 	stw	r3,1320(sp)
 1006ce8:	d9014c17 	ldw	r4,1328(sp)
 1006cec:	b8c00007 	ldb	r3,0(r23)
 1006cf0:	21000114 	ori	r4,r4,4
 1006cf4:	d9014c15 	stw	r4,1328(sp)
 1006cf8:	003c9806 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006cfc:	d9814c17 	ldw	r6,1328(sp)
 1006d00:	3080080c 	andi	r2,r6,32
 1006d04:	1001f626 	beq	r2,zero,10074e0 <___vfprintf_internal_r+0x1780>
 1006d08:	d9014b17 	ldw	r4,1324(sp)
 1006d0c:	38800017 	ldw	r2,0(r7)
 1006d10:	39c00104 	addi	r7,r7,4
 1006d14:	d9c14015 	stw	r7,1280(sp)
 1006d18:	2007d7fa 	srai	r3,r4,31
 1006d1c:	d9c14017 	ldw	r7,1280(sp)
 1006d20:	11000015 	stw	r4,0(r2)
 1006d24:	10c00115 	stw	r3,4(r2)
 1006d28:	003c6906 	br	1005ed0 <___vfprintf_internal_r+0x170>
 1006d2c:	b8c00007 	ldb	r3,0(r23)
 1006d30:	00801b04 	movi	r2,108
 1006d34:	18825526 	beq	r3,r2,100768c <___vfprintf_internal_r+0x192c>
 1006d38:	d9414c17 	ldw	r5,1328(sp)
 1006d3c:	29400414 	ori	r5,r5,16
 1006d40:	d9414c15 	stw	r5,1328(sp)
 1006d44:	003c8506 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006d48:	d9814c17 	ldw	r6,1328(sp)
 1006d4c:	b8c00007 	ldb	r3,0(r23)
 1006d50:	31800814 	ori	r6,r6,32
 1006d54:	d9814c15 	stw	r6,1328(sp)
 1006d58:	003c8006 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006d5c:	d8814c17 	ldw	r2,1328(sp)
 1006d60:	3c000017 	ldw	r16,0(r7)
 1006d64:	00c01e04 	movi	r3,120
 1006d68:	10800094 	ori	r2,r2,2
 1006d6c:	d8814c15 	stw	r2,1328(sp)
 1006d70:	39c00104 	addi	r7,r7,4
 1006d74:	01404074 	movhi	r5,257
 1006d78:	2946e804 	addi	r5,r5,7072
 1006d7c:	00800c04 	movi	r2,48
 1006d80:	0023883a 	mov	r17,zero
 1006d84:	01000084 	movi	r4,2
 1006d88:	d9c14015 	stw	r7,1280(sp)
 1006d8c:	d8c14d15 	stw	r3,1332(sp)
 1006d90:	d9414415 	stw	r5,1296(sp)
 1006d94:	d8800445 	stb	r2,17(sp)
 1006d98:	d8c00485 	stb	r3,18(sp)
 1006d9c:	d8000405 	stb	zero,16(sp)
 1006da0:	003e7d06 	br	1006798 <___vfprintf_internal_r+0xa38>
 1006da4:	d8814c17 	ldw	r2,1328(sp)
 1006da8:	b8c00007 	ldb	r3,0(r23)
 1006dac:	10801014 	ori	r2,r2,64
 1006db0:	d8814c15 	stw	r2,1328(sp)
 1006db4:	003c6906 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006db8:	d9414c17 	ldw	r5,1328(sp)
 1006dbc:	2880020c 	andi	r2,r5,8
 1006dc0:	1001e526 	beq	r2,zero,1007558 <___vfprintf_internal_r+0x17f8>
 1006dc4:	39800017 	ldw	r6,0(r7)
 1006dc8:	38800204 	addi	r2,r7,8
 1006dcc:	d8814015 	stw	r2,1280(sp)
 1006dd0:	d9814215 	stw	r6,1288(sp)
 1006dd4:	39c00117 	ldw	r7,4(r7)
 1006dd8:	d9c14315 	stw	r7,1292(sp)
 1006ddc:	d9014217 	ldw	r4,1288(sp)
 1006de0:	d9414317 	ldw	r5,1292(sp)
 1006de4:	100b8940 	call	100b894 <__isinfd>
 1006de8:	10021d26 	beq	r2,zero,1007660 <___vfprintf_internal_r+0x1900>
 1006dec:	d9014217 	ldw	r4,1288(sp)
 1006df0:	d9414317 	ldw	r5,1292(sp)
 1006df4:	000d883a 	mov	r6,zero
 1006df8:	000f883a 	mov	r7,zero
 1006dfc:	100d5e00 	call	100d5e0 <__ltdf2>
 1006e00:	1002d016 	blt	r2,zero,1007944 <___vfprintf_internal_r+0x1be4>
 1006e04:	d9414d17 	ldw	r5,1332(sp)
 1006e08:	008011c4 	movi	r2,71
 1006e0c:	11421016 	blt	r2,r5,1007650 <___vfprintf_internal_r+0x18f0>
 1006e10:	01804074 	movhi	r6,257
 1006e14:	3186ed04 	addi	r6,r6,7092
 1006e18:	d9814115 	stw	r6,1284(sp)
 1006e1c:	d9014c17 	ldw	r4,1328(sp)
 1006e20:	00c000c4 	movi	r3,3
 1006e24:	00bfdfc4 	movi	r2,-129
 1006e28:	2088703a 	and	r4,r4,r2
 1006e2c:	180f883a 	mov	r7,r3
 1006e30:	d8c14515 	stw	r3,1300(sp)
 1006e34:	d9014c15 	stw	r4,1328(sp)
 1006e38:	d8014615 	stw	zero,1304(sp)
 1006e3c:	003e6a06 	br	10067e8 <___vfprintf_internal_r+0xa88>
 1006e40:	38800017 	ldw	r2,0(r7)
 1006e44:	00c00044 	movi	r3,1
 1006e48:	39c00104 	addi	r7,r7,4
 1006e4c:	d9c14015 	stw	r7,1280(sp)
 1006e50:	d9000f04 	addi	r4,sp,60
 1006e54:	180f883a 	mov	r7,r3
 1006e58:	d8c14515 	stw	r3,1300(sp)
 1006e5c:	d9014115 	stw	r4,1284(sp)
 1006e60:	d8800f05 	stb	r2,60(sp)
 1006e64:	d8000405 	stb	zero,16(sp)
 1006e68:	003cac06 	br	100611c <___vfprintf_internal_r+0x3bc>
 1006e6c:	01404074 	movhi	r5,257
 1006e70:	2946f304 	addi	r5,r5,7116
 1006e74:	d9414415 	stw	r5,1296(sp)
 1006e78:	d9814c17 	ldw	r6,1328(sp)
 1006e7c:	3080080c 	andi	r2,r6,32
 1006e80:	1000ff26 	beq	r2,zero,1007280 <___vfprintf_internal_r+0x1520>
 1006e84:	3c000017 	ldw	r16,0(r7)
 1006e88:	3c400117 	ldw	r17,4(r7)
 1006e8c:	38800204 	addi	r2,r7,8
 1006e90:	d8814015 	stw	r2,1280(sp)
 1006e94:	d9414c17 	ldw	r5,1328(sp)
 1006e98:	2880004c 	andi	r2,r5,1
 1006e9c:	1005003a 	cmpeq	r2,r2,zero
 1006ea0:	1000b91e 	bne	r2,zero,1007188 <___vfprintf_internal_r+0x1428>
 1006ea4:	8444b03a 	or	r2,r16,r17
 1006ea8:	1000b726 	beq	r2,zero,1007188 <___vfprintf_internal_r+0x1428>
 1006eac:	d9814d17 	ldw	r6,1332(sp)
 1006eb0:	29400094 	ori	r5,r5,2
 1006eb4:	00800c04 	movi	r2,48
 1006eb8:	01000084 	movi	r4,2
 1006ebc:	d9414c15 	stw	r5,1328(sp)
 1006ec0:	d8800445 	stb	r2,17(sp)
 1006ec4:	d9800485 	stb	r6,18(sp)
 1006ec8:	d8000405 	stb	zero,16(sp)
 1006ecc:	003e3206 	br	1006798 <___vfprintf_internal_r+0xa38>
 1006ed0:	01804074 	movhi	r6,257
 1006ed4:	3186e804 	addi	r6,r6,7072
 1006ed8:	d9814415 	stw	r6,1296(sp)
 1006edc:	003fe606 	br	1006e78 <___vfprintf_internal_r+0x1118>
 1006ee0:	00800ac4 	movi	r2,43
 1006ee4:	d8800405 	stb	r2,16(sp)
 1006ee8:	b8c00007 	ldb	r3,0(r23)
 1006eec:	003c1b06 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006ef0:	d8814c17 	ldw	r2,1328(sp)
 1006ef4:	b8c00007 	ldb	r3,0(r23)
 1006ef8:	10800054 	ori	r2,r2,1
 1006efc:	d8814c15 	stw	r2,1328(sp)
 1006f00:	003c1606 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006f04:	d8800407 	ldb	r2,16(sp)
 1006f08:	10004c1e 	bne	r2,zero,100703c <___vfprintf_internal_r+0x12dc>
 1006f0c:	00800804 	movi	r2,32
 1006f10:	d8800405 	stb	r2,16(sp)
 1006f14:	b8c00007 	ldb	r3,0(r23)
 1006f18:	003c1006 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006f1c:	d9814c17 	ldw	r6,1328(sp)
 1006f20:	b8c00007 	ldb	r3,0(r23)
 1006f24:	31800214 	ori	r6,r6,8
 1006f28:	d9814c15 	stw	r6,1328(sp)
 1006f2c:	003c0b06 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006f30:	0009883a 	mov	r4,zero
 1006f34:	04000244 	movi	r16,9
 1006f38:	01400284 	movi	r5,10
 1006f3c:	d9c15115 	stw	r7,1348(sp)
 1006f40:	1002f380 	call	1002f38 <__mulsi3>
 1006f44:	b9000007 	ldb	r4,0(r23)
 1006f48:	d8c14d17 	ldw	r3,1332(sp)
 1006f4c:	bdc00044 	addi	r23,r23,1
 1006f50:	d9014d15 	stw	r4,1332(sp)
 1006f54:	d9414d17 	ldw	r5,1332(sp)
 1006f58:	1885883a 	add	r2,r3,r2
 1006f5c:	113ff404 	addi	r4,r2,-48
 1006f60:	28bff404 	addi	r2,r5,-48
 1006f64:	d9c15117 	ldw	r7,1348(sp)
 1006f68:	80bff32e 	bgeu	r16,r2,1006f38 <___vfprintf_internal_r+0x11d8>
 1006f6c:	d9014a15 	stw	r4,1320(sp)
 1006f70:	003bfc06 	br	1005f64 <___vfprintf_internal_r+0x204>
 1006f74:	d8814c17 	ldw	r2,1328(sp)
 1006f78:	b8c00007 	ldb	r3,0(r23)
 1006f7c:	10802014 	ori	r2,r2,128
 1006f80:	d8814c15 	stw	r2,1328(sp)
 1006f84:	003bf506 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1006f88:	b8c00007 	ldb	r3,0(r23)
 1006f8c:	00800a84 	movi	r2,42
 1006f90:	bdc00044 	addi	r23,r23,1
 1006f94:	18831826 	beq	r3,r2,1007bf8 <___vfprintf_internal_r+0x1e98>
 1006f98:	d8c14d15 	stw	r3,1332(sp)
 1006f9c:	18bff404 	addi	r2,r3,-48
 1006fa0:	00c00244 	movi	r3,9
 1006fa4:	18827b36 	bltu	r3,r2,1007994 <___vfprintf_internal_r+0x1c34>
 1006fa8:	1821883a 	mov	r16,r3
 1006fac:	0009883a 	mov	r4,zero
 1006fb0:	01400284 	movi	r5,10
 1006fb4:	d9c15115 	stw	r7,1348(sp)
 1006fb8:	1002f380 	call	1002f38 <__mulsi3>
 1006fbc:	d9414d17 	ldw	r5,1332(sp)
 1006fc0:	b9800007 	ldb	r6,0(r23)
 1006fc4:	d9c15117 	ldw	r7,1348(sp)
 1006fc8:	1145883a 	add	r2,r2,r5
 1006fcc:	113ff404 	addi	r4,r2,-48
 1006fd0:	30bff404 	addi	r2,r6,-48
 1006fd4:	d9814d15 	stw	r6,1332(sp)
 1006fd8:	bdc00044 	addi	r23,r23,1
 1006fdc:	80bff42e 	bgeu	r16,r2,1006fb0 <___vfprintf_internal_r+0x1250>
 1006fe0:	2027883a 	mov	r19,r4
 1006fe4:	203bdf0e 	bge	r4,zero,1005f64 <___vfprintf_internal_r+0x204>
 1006fe8:	04ffffc4 	movi	r19,-1
 1006fec:	003bdd06 	br	1005f64 <___vfprintf_internal_r+0x204>
 1006ff0:	d8000405 	stb	zero,16(sp)
 1006ff4:	39800017 	ldw	r6,0(r7)
 1006ff8:	39c00104 	addi	r7,r7,4
 1006ffc:	d9c14015 	stw	r7,1280(sp)
 1007000:	d9814115 	stw	r6,1284(sp)
 1007004:	3001c926 	beq	r6,zero,100772c <___vfprintf_internal_r+0x19cc>
 1007008:	98000e16 	blt	r19,zero,1007044 <___vfprintf_internal_r+0x12e4>
 100700c:	d9014117 	ldw	r4,1284(sp)
 1007010:	000b883a 	mov	r5,zero
 1007014:	980d883a 	mov	r6,r19
 1007018:	1009d4c0 	call	1009d4c <memchr>
 100701c:	10025926 	beq	r2,zero,1007984 <___vfprintf_internal_r+0x1c24>
 1007020:	d8c14117 	ldw	r3,1284(sp)
 1007024:	10cfc83a 	sub	r7,r2,r3
 1007028:	99c19e16 	blt	r19,r7,10076a4 <___vfprintf_internal_r+0x1944>
 100702c:	d9c14515 	stw	r7,1300(sp)
 1007030:	38000916 	blt	r7,zero,1007058 <___vfprintf_internal_r+0x12f8>
 1007034:	d8014615 	stw	zero,1304(sp)
 1007038:	003deb06 	br	10067e8 <___vfprintf_internal_r+0xa88>
 100703c:	b8c00007 	ldb	r3,0(r23)
 1007040:	003bc606 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1007044:	d9014117 	ldw	r4,1284(sp)
 1007048:	1005c940 	call	1005c94 <strlen>
 100704c:	d8814515 	stw	r2,1300(sp)
 1007050:	100f883a 	mov	r7,r2
 1007054:	103ff70e 	bge	r2,zero,1007034 <___vfprintf_internal_r+0x12d4>
 1007058:	d8014515 	stw	zero,1300(sp)
 100705c:	d8014615 	stw	zero,1304(sp)
 1007060:	003de106 	br	10067e8 <___vfprintf_internal_r+0xa88>
 1007064:	20c03fcc 	andi	r3,r4,255
 1007068:	00800044 	movi	r2,1
 100706c:	18802d26 	beq	r3,r2,1007124 <___vfprintf_internal_r+0x13c4>
 1007070:	18800e36 	bltu	r3,r2,10070ac <___vfprintf_internal_r+0x134c>
 1007074:	00800084 	movi	r2,2
 1007078:	1880fa26 	beq	r3,r2,1007464 <___vfprintf_internal_r+0x1704>
 100707c:	01004074 	movhi	r4,257
 1007080:	2106f804 	addi	r4,r4,7136
 1007084:	1005c940 	call	1005c94 <strlen>
 1007088:	100f883a 	mov	r7,r2
 100708c:	dcc14515 	stw	r19,1300(sp)
 1007090:	9880010e 	bge	r19,r2,1007098 <___vfprintf_internal_r+0x1338>
 1007094:	d8814515 	stw	r2,1300(sp)
 1007098:	00804074 	movhi	r2,257
 100709c:	1086f804 	addi	r2,r2,7136
 10070a0:	dcc14615 	stw	r19,1304(sp)
 10070a4:	d8814115 	stw	r2,1284(sp)
 10070a8:	003dcf06 	br	10067e8 <___vfprintf_internal_r+0xa88>
 10070ac:	d9401904 	addi	r5,sp,100
 10070b0:	dd000f04 	addi	r20,sp,60
 10070b4:	d9414115 	stw	r5,1284(sp)
 10070b8:	880a977a 	slli	r5,r17,29
 10070bc:	d9814117 	ldw	r6,1284(sp)
 10070c0:	8004d0fa 	srli	r2,r16,3
 10070c4:	8806d0fa 	srli	r3,r17,3
 10070c8:	810001cc 	andi	r4,r16,7
 10070cc:	2884b03a 	or	r2,r5,r2
 10070d0:	31bfffc4 	addi	r6,r6,-1
 10070d4:	21000c04 	addi	r4,r4,48
 10070d8:	d9814115 	stw	r6,1284(sp)
 10070dc:	10cab03a 	or	r5,r2,r3
 10070e0:	31000005 	stb	r4,0(r6)
 10070e4:	1021883a 	mov	r16,r2
 10070e8:	1823883a 	mov	r17,r3
 10070ec:	283ff21e 	bne	r5,zero,10070b8 <___vfprintf_internal_r+0x1358>
 10070f0:	d8c14c17 	ldw	r3,1328(sp)
 10070f4:	1880004c 	andi	r2,r3,1
 10070f8:	1005003a 	cmpeq	r2,r2,zero
 10070fc:	103db31e 	bne	r2,zero,10067cc <___vfprintf_internal_r+0xa6c>
 1007100:	20803fcc 	andi	r2,r4,255
 1007104:	1080201c 	xori	r2,r2,128
 1007108:	10bfe004 	addi	r2,r2,-128
 100710c:	00c00c04 	movi	r3,48
 1007110:	10fdae26 	beq	r2,r3,10067cc <___vfprintf_internal_r+0xa6c>
 1007114:	31bfffc4 	addi	r6,r6,-1
 1007118:	d9814115 	stw	r6,1284(sp)
 100711c:	30c00005 	stb	r3,0(r6)
 1007120:	003daa06 	br	10067cc <___vfprintf_internal_r+0xa6c>
 1007124:	88800068 	cmpgeui	r2,r17,1
 1007128:	10002c1e 	bne	r2,zero,10071dc <___vfprintf_internal_r+0x147c>
 100712c:	8800021e 	bne	r17,zero,1007138 <___vfprintf_internal_r+0x13d8>
 1007130:	00800244 	movi	r2,9
 1007134:	14002936 	bltu	r2,r16,10071dc <___vfprintf_internal_r+0x147c>
 1007138:	d90018c4 	addi	r4,sp,99
 100713c:	dd000f04 	addi	r20,sp,60
 1007140:	d9014115 	stw	r4,1284(sp)
 1007144:	d9014117 	ldw	r4,1284(sp)
 1007148:	80800c04 	addi	r2,r16,48
 100714c:	20800005 	stb	r2,0(r4)
 1007150:	003d9e06 	br	10067cc <___vfprintf_internal_r+0xa6c>
 1007154:	dc400d17 	ldw	r17,52(sp)
 1007158:	07004074 	movhi	fp,257
 100715c:	e706ff84 	addi	fp,fp,7166
 1007160:	9425883a 	add	r18,r18,r16
 1007164:	8c400044 	addi	r17,r17,1
 1007168:	008001c4 	movi	r2,7
 100716c:	1f000015 	stw	fp,0(r3)
 1007170:	1c000115 	stw	r16,4(r3)
 1007174:	dc800e15 	stw	r18,56(sp)
 1007178:	dc400d15 	stw	r17,52(sp)
 100717c:	147ddc16 	blt	r2,r17,10068f0 <___vfprintf_internal_r+0xb90>
 1007180:	18c00204 	addi	r3,r3,8
 1007184:	003c7406 	br	1006358 <___vfprintf_internal_r+0x5f8>
 1007188:	01000084 	movi	r4,2
 100718c:	d8000405 	stb	zero,16(sp)
 1007190:	003d8106 	br	1006798 <___vfprintf_internal_r+0xa38>
 1007194:	d9814c17 	ldw	r6,1328(sp)
 1007198:	30c4703a 	and	r2,r6,r3
 100719c:	1005003a 	cmpeq	r2,r2,zero
 10071a0:	103cb326 	beq	r2,zero,1006470 <___vfprintf_internal_r+0x710>
 10071a4:	d9014117 	ldw	r4,1284(sp)
 10071a8:	94800044 	addi	r18,r18,1
 10071ac:	8c400044 	addi	r17,r17,1
 10071b0:	008001c4 	movi	r2,7
 10071b4:	a9000015 	stw	r4,0(r21)
 10071b8:	a8c00115 	stw	r3,4(r21)
 10071bc:	dc800e15 	stw	r18,56(sp)
 10071c0:	dc400d15 	stw	r17,52(sp)
 10071c4:	147e6016 	blt	r2,r17,1006b48 <___vfprintf_internal_r+0xde8>
 10071c8:	acc00204 	addi	r19,r21,8
 10071cc:	003cd106 	br	1006514 <___vfprintf_internal_r+0x7b4>
 10071d0:	07004074 	movhi	fp,257
 10071d4:	e706ff84 	addi	fp,fp,7166
 10071d8:	003c4906 	br	1006300 <___vfprintf_internal_r+0x5a0>
 10071dc:	dd000f04 	addi	r20,sp,60
 10071e0:	dc801904 	addi	r18,sp,100
 10071e4:	8009883a 	mov	r4,r16
 10071e8:	880b883a 	mov	r5,r17
 10071ec:	01800284 	movi	r6,10
 10071f0:	000f883a 	mov	r7,zero
 10071f4:	100c2400 	call	100c240 <__umoddi3>
 10071f8:	12000c04 	addi	r8,r2,48
 10071fc:	94bfffc4 	addi	r18,r18,-1
 1007200:	8009883a 	mov	r4,r16
 1007204:	880b883a 	mov	r5,r17
 1007208:	01800284 	movi	r6,10
 100720c:	000f883a 	mov	r7,zero
 1007210:	92000005 	stb	r8,0(r18)
 1007214:	100bbd40 	call	100bbd4 <__udivdi3>
 1007218:	1009883a 	mov	r4,r2
 100721c:	1021883a 	mov	r16,r2
 1007220:	18800068 	cmpgeui	r2,r3,1
 1007224:	1823883a 	mov	r17,r3
 1007228:	103fee1e 	bne	r2,zero,10071e4 <___vfprintf_internal_r+0x1484>
 100722c:	1800021e 	bne	r3,zero,1007238 <___vfprintf_internal_r+0x14d8>
 1007230:	00800244 	movi	r2,9
 1007234:	113feb36 	bltu	r2,r4,10071e4 <___vfprintf_internal_r+0x1484>
 1007238:	94bfffc4 	addi	r18,r18,-1
 100723c:	dc814115 	stw	r18,1284(sp)
 1007240:	003fc006 	br	1007144 <___vfprintf_internal_r+0x13e4>
 1007244:	d9014c17 	ldw	r4,1328(sp)
 1007248:	2080004c 	andi	r2,r4,1
 100724c:	10009a1e 	bne	r2,zero,10074b8 <___vfprintf_internal_r+0x1758>
 1007250:	d9401904 	addi	r5,sp,100
 1007254:	dd000f04 	addi	r20,sp,60
 1007258:	d9414115 	stw	r5,1284(sp)
 100725c:	003d5b06 	br	10067cc <___vfprintf_internal_r+0xa6c>
 1007260:	d9014f17 	ldw	r4,1340(sp)
 1007264:	b00b883a 	mov	r5,r22
 1007268:	d9800c04 	addi	r6,sp,48
 100726c:	1005d080 	call	1005d08 <__sprint_r>
 1007270:	103c731e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007274:	dc800e17 	ldw	r18,56(sp)
 1007278:	d8c01904 	addi	r3,sp,100
 100727c:	003cf906 	br	1006664 <___vfprintf_internal_r+0x904>
 1007280:	d8c14c17 	ldw	r3,1328(sp)
 1007284:	1880040c 	andi	r2,r3,16
 1007288:	1000711e 	bne	r2,zero,1007450 <___vfprintf_internal_r+0x16f0>
 100728c:	d9014c17 	ldw	r4,1328(sp)
 1007290:	2080100c 	andi	r2,r4,64
 1007294:	10006e26 	beq	r2,zero,1007450 <___vfprintf_internal_r+0x16f0>
 1007298:	3c00000b 	ldhu	r16,0(r7)
 100729c:	0023883a 	mov	r17,zero
 10072a0:	39c00104 	addi	r7,r7,4
 10072a4:	d9c14015 	stw	r7,1280(sp)
 10072a8:	003efa06 	br	1006e94 <___vfprintf_internal_r+0x1134>
 10072ac:	dc400d17 	ldw	r17,52(sp)
 10072b0:	07004074 	movhi	fp,257
 10072b4:	e706ff84 	addi	fp,fp,7166
 10072b8:	9425883a 	add	r18,r18,r16
 10072bc:	8c400044 	addi	r17,r17,1
 10072c0:	008001c4 	movi	r2,7
 10072c4:	1f000015 	stw	fp,0(r3)
 10072c8:	1c000115 	stw	r16,4(r3)
 10072cc:	dc800e15 	stw	r18,56(sp)
 10072d0:	dc400d15 	stw	r17,52(sp)
 10072d4:	147d7016 	blt	r2,r17,1006898 <___vfprintf_internal_r+0xb38>
 10072d8:	18c00204 	addi	r3,r3,8
 10072dc:	003d7506 	br	10068b4 <___vfprintf_internal_r+0xb54>
 10072e0:	dc800e17 	ldw	r18,56(sp)
 10072e4:	dc400d17 	ldw	r17,52(sp)
 10072e8:	07004074 	movhi	fp,257
 10072ec:	e7070384 	addi	fp,fp,7182
 10072f0:	003bba06 	br	10061dc <___vfprintf_internal_r+0x47c>
 10072f4:	d9014f17 	ldw	r4,1340(sp)
 10072f8:	b00b883a 	mov	r5,r22
 10072fc:	d9800c04 	addi	r6,sp,48
 1007300:	1005d080 	call	1005d08 <__sprint_r>
 1007304:	103c4e1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007308:	dc800e17 	ldw	r18,56(sp)
 100730c:	d8c01904 	addi	r3,sp,100
 1007310:	003ce306 	br	10066a0 <___vfprintf_internal_r+0x940>
 1007314:	3c000017 	ldw	r16,0(r7)
 1007318:	0009883a 	mov	r4,zero
 100731c:	39c00104 	addi	r7,r7,4
 1007320:	0023883a 	mov	r17,zero
 1007324:	d9c14015 	stw	r7,1280(sp)
 1007328:	d8000405 	stb	zero,16(sp)
 100732c:	003d1a06 	br	1006798 <___vfprintf_internal_r+0xa38>
 1007330:	38800017 	ldw	r2,0(r7)
 1007334:	39c00104 	addi	r7,r7,4
 1007338:	d9c14015 	stw	r7,1280(sp)
 100733c:	1023d7fa 	srai	r17,r2,31
 1007340:	1021883a 	mov	r16,r2
 1007344:	003d1206 	br	1006790 <___vfprintf_internal_r+0xa30>
 1007348:	3c000017 	ldw	r16,0(r7)
 100734c:	01000044 	movi	r4,1
 1007350:	39c00104 	addi	r7,r7,4
 1007354:	0023883a 	mov	r17,zero
 1007358:	d9c14015 	stw	r7,1280(sp)
 100735c:	d8000405 	stb	zero,16(sp)
 1007360:	003d0d06 	br	1006798 <___vfprintf_internal_r+0xa38>
 1007364:	00804074 	movhi	r2,257
 1007368:	1086ff04 	addi	r2,r2,7164
 100736c:	94800044 	addi	r18,r18,1
 1007370:	8c400044 	addi	r17,r17,1
 1007374:	a8800015 	stw	r2,0(r21)
 1007378:	00c00044 	movi	r3,1
 100737c:	008001c4 	movi	r2,7
 1007380:	a8c00115 	stw	r3,4(r21)
 1007384:	dc800e15 	stw	r18,56(sp)
 1007388:	dc400d15 	stw	r17,52(sp)
 100738c:	1440ca16 	blt	r2,r17,10076b8 <___vfprintf_internal_r+0x1958>
 1007390:	a8c00204 	addi	r3,r21,8
 1007394:	2000061e 	bne	r4,zero,10073b0 <___vfprintf_internal_r+0x1650>
 1007398:	d9414717 	ldw	r5,1308(sp)
 100739c:	2800041e 	bne	r5,zero,10073b0 <___vfprintf_internal_r+0x1650>
 10073a0:	d9814c17 	ldw	r6,1328(sp)
 10073a4:	3080004c 	andi	r2,r6,1
 10073a8:	1005003a 	cmpeq	r2,r2,zero
 10073ac:	103bea1e 	bne	r2,zero,1006358 <___vfprintf_internal_r+0x5f8>
 10073b0:	00800044 	movi	r2,1
 10073b4:	dc400d17 	ldw	r17,52(sp)
 10073b8:	18800115 	stw	r2,4(r3)
 10073bc:	d8814917 	ldw	r2,1316(sp)
 10073c0:	94800044 	addi	r18,r18,1
 10073c4:	8c400044 	addi	r17,r17,1
 10073c8:	18800015 	stw	r2,0(r3)
 10073cc:	008001c4 	movi	r2,7
 10073d0:	dc800e15 	stw	r18,56(sp)
 10073d4:	dc400d15 	stw	r17,52(sp)
 10073d8:	1440ca16 	blt	r2,r17,1007704 <___vfprintf_internal_r+0x19a4>
 10073dc:	18c00204 	addi	r3,r3,8
 10073e0:	0121c83a 	sub	r16,zero,r4
 10073e4:	0400500e 	bge	zero,r16,1007528 <___vfprintf_internal_r+0x17c8>
 10073e8:	00800404 	movi	r2,16
 10073ec:	1400800e 	bge	r2,r16,10075f0 <___vfprintf_internal_r+0x1890>
 10073f0:	1027883a 	mov	r19,r2
 10073f4:	07004074 	movhi	fp,257
 10073f8:	e706ff84 	addi	fp,fp,7166
 10073fc:	050001c4 	movi	r20,7
 1007400:	00000306 	br	1007410 <___vfprintf_internal_r+0x16b0>
 1007404:	18c00204 	addi	r3,r3,8
 1007408:	843ffc04 	addi	r16,r16,-16
 100740c:	9c007a0e 	bge	r19,r16,10075f8 <___vfprintf_internal_r+0x1898>
 1007410:	94800404 	addi	r18,r18,16
 1007414:	8c400044 	addi	r17,r17,1
 1007418:	1f000015 	stw	fp,0(r3)
 100741c:	1cc00115 	stw	r19,4(r3)
 1007420:	dc800e15 	stw	r18,56(sp)
 1007424:	dc400d15 	stw	r17,52(sp)
 1007428:	a47ff60e 	bge	r20,r17,1007404 <___vfprintf_internal_r+0x16a4>
 100742c:	d9014f17 	ldw	r4,1340(sp)
 1007430:	b00b883a 	mov	r5,r22
 1007434:	d9800c04 	addi	r6,sp,48
 1007438:	1005d080 	call	1005d08 <__sprint_r>
 100743c:	103c001e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007440:	dc800e17 	ldw	r18,56(sp)
 1007444:	dc400d17 	ldw	r17,52(sp)
 1007448:	d8c01904 	addi	r3,sp,100
 100744c:	003fee06 	br	1007408 <___vfprintf_internal_r+0x16a8>
 1007450:	3c000017 	ldw	r16,0(r7)
 1007454:	0023883a 	mov	r17,zero
 1007458:	39c00104 	addi	r7,r7,4
 100745c:	d9c14015 	stw	r7,1280(sp)
 1007460:	003e8c06 	br	1006e94 <___vfprintf_internal_r+0x1134>
 1007464:	d9401904 	addi	r5,sp,100
 1007468:	dd000f04 	addi	r20,sp,60
 100746c:	d9414115 	stw	r5,1284(sp)
 1007470:	d9814417 	ldw	r6,1296(sp)
 1007474:	880a973a 	slli	r5,r17,28
 1007478:	8004d13a 	srli	r2,r16,4
 100747c:	810003cc 	andi	r4,r16,15
 1007480:	3109883a 	add	r4,r6,r4
 1007484:	2884b03a 	or	r2,r5,r2
 1007488:	21400003 	ldbu	r5,0(r4)
 100748c:	d9014117 	ldw	r4,1284(sp)
 1007490:	8806d13a 	srli	r3,r17,4
 1007494:	1021883a 	mov	r16,r2
 1007498:	213fffc4 	addi	r4,r4,-1
 100749c:	d9014115 	stw	r4,1284(sp)
 10074a0:	d9814117 	ldw	r6,1284(sp)
 10074a4:	10c8b03a 	or	r4,r2,r3
 10074a8:	1823883a 	mov	r17,r3
 10074ac:	31400005 	stb	r5,0(r6)
 10074b0:	203fef1e 	bne	r4,zero,1007470 <___vfprintf_internal_r+0x1710>
 10074b4:	003cc506 	br	10067cc <___vfprintf_internal_r+0xa6c>
 10074b8:	00800c04 	movi	r2,48
 10074bc:	d98018c4 	addi	r6,sp,99
 10074c0:	dd000f04 	addi	r20,sp,60
 10074c4:	d88018c5 	stb	r2,99(sp)
 10074c8:	d9814115 	stw	r6,1284(sp)
 10074cc:	003cbf06 	br	10067cc <___vfprintf_internal_r+0xa6c>
 10074d0:	dc400d17 	ldw	r17,52(sp)
 10074d4:	07004074 	movhi	fp,257
 10074d8:	e7070384 	addi	fp,fp,7182
 10074dc:	003bc106 	br	10063e4 <___vfprintf_internal_r+0x684>
 10074e0:	d9414c17 	ldw	r5,1328(sp)
 10074e4:	2880040c 	andi	r2,r5,16
 10074e8:	10007c26 	beq	r2,zero,10076dc <___vfprintf_internal_r+0x197c>
 10074ec:	38800017 	ldw	r2,0(r7)
 10074f0:	39c00104 	addi	r7,r7,4
 10074f4:	d9c14015 	stw	r7,1280(sp)
 10074f8:	d9814b17 	ldw	r6,1324(sp)
 10074fc:	d9c14017 	ldw	r7,1280(sp)
 1007500:	11800015 	stw	r6,0(r2)
 1007504:	003a7206 	br	1005ed0 <___vfprintf_internal_r+0x170>
 1007508:	d9014f17 	ldw	r4,1340(sp)
 100750c:	b00b883a 	mov	r5,r22
 1007510:	d9800c04 	addi	r6,sp,48
 1007514:	1005d080 	call	1005d08 <__sprint_r>
 1007518:	103bc91e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 100751c:	dc800e17 	ldw	r18,56(sp)
 1007520:	dc400d17 	ldw	r17,52(sp)
 1007524:	d8c01904 	addi	r3,sp,100
 1007528:	d9014717 	ldw	r4,1308(sp)
 100752c:	d9414117 	ldw	r5,1284(sp)
 1007530:	8c400044 	addi	r17,r17,1
 1007534:	9125883a 	add	r18,r18,r4
 1007538:	008001c4 	movi	r2,7
 100753c:	19400015 	stw	r5,0(r3)
 1007540:	19000115 	stw	r4,4(r3)
 1007544:	dc800e15 	stw	r18,56(sp)
 1007548:	dc400d15 	stw	r17,52(sp)
 100754c:	147ce816 	blt	r2,r17,10068f0 <___vfprintf_internal_r+0xb90>
 1007550:	18c00204 	addi	r3,r3,8
 1007554:	003b8006 	br	1006358 <___vfprintf_internal_r+0x5f8>
 1007558:	38c00017 	ldw	r3,0(r7)
 100755c:	39000204 	addi	r4,r7,8
 1007560:	d9014015 	stw	r4,1280(sp)
 1007564:	d8c14215 	stw	r3,1288(sp)
 1007568:	39c00117 	ldw	r7,4(r7)
 100756c:	d9c14315 	stw	r7,1292(sp)
 1007570:	003e1a06 	br	1006ddc <___vfprintf_internal_r+0x107c>
 1007574:	0005883a 	mov	r2,zero
 1007578:	1409c83a 	sub	r4,r2,r16
 100757c:	1105803a 	cmpltu	r2,r2,r4
 1007580:	044bc83a 	sub	r5,zero,r17
 1007584:	2885c83a 	sub	r2,r5,r2
 1007588:	2021883a 	mov	r16,r4
 100758c:	1023883a 	mov	r17,r2
 1007590:	01000044 	movi	r4,1
 1007594:	00800b44 	movi	r2,45
 1007598:	d8800405 	stb	r2,16(sp)
 100759c:	003c7e06 	br	1006798 <___vfprintf_internal_r+0xa38>
 10075a0:	d9014f17 	ldw	r4,1340(sp)
 10075a4:	b00b883a 	mov	r5,r22
 10075a8:	d9800c04 	addi	r6,sp,48
 10075ac:	1005d080 	call	1005d08 <__sprint_r>
 10075b0:	103ba31e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10075b4:	dc800e17 	ldw	r18,56(sp)
 10075b8:	dc400d17 	ldw	r17,52(sp)
 10075bc:	d9000517 	ldw	r4,20(sp)
 10075c0:	d9401904 	addi	r5,sp,100
 10075c4:	003da106 	br	1006c4c <___vfprintf_internal_r+0xeec>
 10075c8:	d9014f17 	ldw	r4,1340(sp)
 10075cc:	b00b883a 	mov	r5,r22
 10075d0:	d9800c04 	addi	r6,sp,48
 10075d4:	1005d080 	call	1005d08 <__sprint_r>
 10075d8:	103b991e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10075dc:	dc800e17 	ldw	r18,56(sp)
 10075e0:	dc400d17 	ldw	r17,52(sp)
 10075e4:	d9000517 	ldw	r4,20(sp)
 10075e8:	d8c01904 	addi	r3,sp,100
 10075ec:	003d8b06 	br	1006c1c <___vfprintf_internal_r+0xebc>
 10075f0:	07004074 	movhi	fp,257
 10075f4:	e706ff84 	addi	fp,fp,7166
 10075f8:	9425883a 	add	r18,r18,r16
 10075fc:	8c400044 	addi	r17,r17,1
 1007600:	008001c4 	movi	r2,7
 1007604:	1f000015 	stw	fp,0(r3)
 1007608:	1c000115 	stw	r16,4(r3)
 100760c:	dc800e15 	stw	r18,56(sp)
 1007610:	dc400d15 	stw	r17,52(sp)
 1007614:	147fbc16 	blt	r2,r17,1007508 <___vfprintf_internal_r+0x17a8>
 1007618:	18c00204 	addi	r3,r3,8
 100761c:	003fc206 	br	1007528 <___vfprintf_internal_r+0x17c8>
 1007620:	d9014f17 	ldw	r4,1340(sp)
 1007624:	b00b883a 	mov	r5,r22
 1007628:	d9800c04 	addi	r6,sp,48
 100762c:	1005d080 	call	1005d08 <__sprint_r>
 1007630:	103b831e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007634:	dc800e17 	ldw	r18,56(sp)
 1007638:	d9000517 	ldw	r4,20(sp)
 100763c:	d8c01904 	addi	r3,sp,100
 1007640:	003cfc06 	br	1006a34 <___vfprintf_internal_r+0xcd4>
 1007644:	07004074 	movhi	fp,257
 1007648:	e706ff84 	addi	fp,fp,7166
 100764c:	003bde06 	br	10065c8 <___vfprintf_internal_r+0x868>
 1007650:	00804074 	movhi	r2,257
 1007654:	1086ee04 	addi	r2,r2,7096
 1007658:	d8814115 	stw	r2,1284(sp)
 100765c:	003def06 	br	1006e1c <___vfprintf_internal_r+0x10bc>
 1007660:	d9014217 	ldw	r4,1288(sp)
 1007664:	d9414317 	ldw	r5,1292(sp)
 1007668:	100b8d40 	call	100b8d4 <__isnand>
 100766c:	10003926 	beq	r2,zero,1007754 <___vfprintf_internal_r+0x19f4>
 1007670:	d9414d17 	ldw	r5,1332(sp)
 1007674:	008011c4 	movi	r2,71
 1007678:	1140ce16 	blt	r2,r5,10079b4 <___vfprintf_internal_r+0x1c54>
 100767c:	01804074 	movhi	r6,257
 1007680:	3186ef04 	addi	r6,r6,7100
 1007684:	d9814115 	stw	r6,1284(sp)
 1007688:	003de406 	br	1006e1c <___vfprintf_internal_r+0x10bc>
 100768c:	d9014c17 	ldw	r4,1328(sp)
 1007690:	bdc00044 	addi	r23,r23,1
 1007694:	b8c00007 	ldb	r3,0(r23)
 1007698:	21000814 	ori	r4,r4,32
 100769c:	d9014c15 	stw	r4,1328(sp)
 10076a0:	003a2e06 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 10076a4:	dcc14515 	stw	r19,1300(sp)
 10076a8:	98011016 	blt	r19,zero,1007aec <___vfprintf_internal_r+0x1d8c>
 10076ac:	980f883a 	mov	r7,r19
 10076b0:	d8014615 	stw	zero,1304(sp)
 10076b4:	003c4c06 	br	10067e8 <___vfprintf_internal_r+0xa88>
 10076b8:	d9014f17 	ldw	r4,1340(sp)
 10076bc:	b00b883a 	mov	r5,r22
 10076c0:	d9800c04 	addi	r6,sp,48
 10076c4:	1005d080 	call	1005d08 <__sprint_r>
 10076c8:	103b5d1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 10076cc:	dc800e17 	ldw	r18,56(sp)
 10076d0:	d9000517 	ldw	r4,20(sp)
 10076d4:	d8c01904 	addi	r3,sp,100
 10076d8:	003f2e06 	br	1007394 <___vfprintf_internal_r+0x1634>
 10076dc:	d8c14c17 	ldw	r3,1328(sp)
 10076e0:	1880100c 	andi	r2,r3,64
 10076e4:	1000a026 	beq	r2,zero,1007968 <___vfprintf_internal_r+0x1c08>
 10076e8:	38800017 	ldw	r2,0(r7)
 10076ec:	39c00104 	addi	r7,r7,4
 10076f0:	d9c14015 	stw	r7,1280(sp)
 10076f4:	d9014b17 	ldw	r4,1324(sp)
 10076f8:	d9c14017 	ldw	r7,1280(sp)
 10076fc:	1100000d 	sth	r4,0(r2)
 1007700:	0039f306 	br	1005ed0 <___vfprintf_internal_r+0x170>
 1007704:	d9014f17 	ldw	r4,1340(sp)
 1007708:	b00b883a 	mov	r5,r22
 100770c:	d9800c04 	addi	r6,sp,48
 1007710:	1005d080 	call	1005d08 <__sprint_r>
 1007714:	103b4a1e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007718:	dc800e17 	ldw	r18,56(sp)
 100771c:	dc400d17 	ldw	r17,52(sp)
 1007720:	d9000517 	ldw	r4,20(sp)
 1007724:	d8c01904 	addi	r3,sp,100
 1007728:	003f2d06 	br	10073e0 <___vfprintf_internal_r+0x1680>
 100772c:	00800184 	movi	r2,6
 1007730:	14c09a36 	bltu	r2,r19,100799c <___vfprintf_internal_r+0x1c3c>
 1007734:	dcc14515 	stw	r19,1300(sp)
 1007738:	9800010e 	bge	r19,zero,1007740 <___vfprintf_internal_r+0x19e0>
 100773c:	d8014515 	stw	zero,1300(sp)
 1007740:	00804074 	movhi	r2,257
 1007744:	1086f104 	addi	r2,r2,7108
 1007748:	980f883a 	mov	r7,r19
 100774c:	d8814115 	stw	r2,1284(sp)
 1007750:	003a7206 	br	100611c <___vfprintf_internal_r+0x3bc>
 1007754:	00bfffc4 	movi	r2,-1
 1007758:	9880e226 	beq	r19,r2,1007ae4 <___vfprintf_internal_r+0x1d84>
 100775c:	d9414d17 	ldw	r5,1332(sp)
 1007760:	008019c4 	movi	r2,103
 1007764:	2880dc26 	beq	r5,r2,1007ad8 <___vfprintf_internal_r+0x1d78>
 1007768:	008011c4 	movi	r2,71
 100776c:	2880da26 	beq	r5,r2,1007ad8 <___vfprintf_internal_r+0x1d78>
 1007770:	d9414c17 	ldw	r5,1328(sp)
 1007774:	d9014317 	ldw	r4,1292(sp)
 1007778:	d9814217 	ldw	r6,1288(sp)
 100777c:	29404014 	ori	r5,r5,256
 1007780:	d9414c15 	stw	r5,1328(sp)
 1007784:	2000cc16 	blt	r4,zero,1007ab8 <___vfprintf_internal_r+0x1d58>
 1007788:	3021883a 	mov	r16,r6
 100778c:	2023883a 	mov	r17,r4
 1007790:	0039883a 	mov	fp,zero
 1007794:	d9414d17 	ldw	r5,1332(sp)
 1007798:	00801984 	movi	r2,102
 100779c:	2880b726 	beq	r5,r2,1007a7c <___vfprintf_internal_r+0x1d1c>
 10077a0:	00801184 	movi	r2,70
 10077a4:	2880b526 	beq	r5,r2,1007a7c <___vfprintf_internal_r+0x1d1c>
 10077a8:	00801944 	movi	r2,101
 10077ac:	2880c826 	beq	r5,r2,1007ad0 <___vfprintf_internal_r+0x1d70>
 10077b0:	00801144 	movi	r2,69
 10077b4:	2880c626 	beq	r5,r2,1007ad0 <___vfprintf_internal_r+0x1d70>
 10077b8:	9829883a 	mov	r20,r19
 10077bc:	d9014f17 	ldw	r4,1340(sp)
 10077c0:	d8800504 	addi	r2,sp,20
 10077c4:	880d883a 	mov	r6,r17
 10077c8:	d8800115 	stw	r2,4(sp)
 10077cc:	d8c00604 	addi	r3,sp,24
 10077d0:	d8800704 	addi	r2,sp,28
 10077d4:	800b883a 	mov	r5,r16
 10077d8:	01c00084 	movi	r7,2
 10077dc:	d8c00215 	stw	r3,8(sp)
 10077e0:	d8800315 	stw	r2,12(sp)
 10077e4:	dd000015 	stw	r20,0(sp)
 10077e8:	10080b00 	call	10080b0 <_dtoa_r>
 10077ec:	d9814d17 	ldw	r6,1332(sp)
 10077f0:	d8814115 	stw	r2,1284(sp)
 10077f4:	008019c4 	movi	r2,103
 10077f8:	30809526 	beq	r6,r2,1007a50 <___vfprintf_internal_r+0x1cf0>
 10077fc:	d8c14d17 	ldw	r3,1332(sp)
 1007800:	008011c4 	movi	r2,71
 1007804:	18809226 	beq	r3,r2,1007a50 <___vfprintf_internal_r+0x1cf0>
 1007808:	d9414117 	ldw	r5,1284(sp)
 100780c:	d9814d17 	ldw	r6,1332(sp)
 1007810:	00801984 	movi	r2,102
 1007814:	2d25883a 	add	r18,r5,r20
 1007818:	30808626 	beq	r6,r2,1007a34 <___vfprintf_internal_r+0x1cd4>
 100781c:	00801184 	movi	r2,70
 1007820:	30808426 	beq	r6,r2,1007a34 <___vfprintf_internal_r+0x1cd4>
 1007824:	000d883a 	mov	r6,zero
 1007828:	000f883a 	mov	r7,zero
 100782c:	880b883a 	mov	r5,r17
 1007830:	8009883a 	mov	r4,r16
 1007834:	100d3c00 	call	100d3c0 <__eqdf2>
 1007838:	1000751e 	bne	r2,zero,1007a10 <___vfprintf_internal_r+0x1cb0>
 100783c:	9005883a 	mov	r2,r18
 1007840:	dc800715 	stw	r18,28(sp)
 1007844:	d9014117 	ldw	r4,1284(sp)
 1007848:	d9414d17 	ldw	r5,1332(sp)
 100784c:	00c019c4 	movi	r3,103
 1007850:	1125c83a 	sub	r18,r2,r4
 1007854:	28c06826 	beq	r5,r3,10079f8 <___vfprintf_internal_r+0x1c98>
 1007858:	008011c4 	movi	r2,71
 100785c:	28806626 	beq	r5,r2,10079f8 <___vfprintf_internal_r+0x1c98>
 1007860:	d9000517 	ldw	r4,20(sp)
 1007864:	d8c14d17 	ldw	r3,1332(sp)
 1007868:	00801944 	movi	r2,101
 100786c:	10c05516 	blt	r2,r3,10079c4 <___vfprintf_internal_r+0x1c64>
 1007870:	213fffc4 	addi	r4,r4,-1
 1007874:	d9000515 	stw	r4,20(sp)
 1007878:	d8c00805 	stb	r3,32(sp)
 100787c:	2021883a 	mov	r16,r4
 1007880:	2000c116 	blt	r4,zero,1007b88 <___vfprintf_internal_r+0x1e28>
 1007884:	00800ac4 	movi	r2,43
 1007888:	d8800845 	stb	r2,33(sp)
 100788c:	00800244 	movi	r2,9
 1007890:	1400af0e 	bge	r2,r16,1007b50 <___vfprintf_internal_r+0x1df0>
 1007894:	1027883a 	mov	r19,r2
 1007898:	dc400b84 	addi	r17,sp,46
 100789c:	8009883a 	mov	r4,r16
 10078a0:	01400284 	movi	r5,10
 10078a4:	100daa80 	call	100daa8 <__modsi3>
 10078a8:	10800c04 	addi	r2,r2,48
 10078ac:	8c7fffc4 	addi	r17,r17,-1
 10078b0:	8009883a 	mov	r4,r16
 10078b4:	01400284 	movi	r5,10
 10078b8:	88800005 	stb	r2,0(r17)
 10078bc:	100da480 	call	100da48 <__divsi3>
 10078c0:	1021883a 	mov	r16,r2
 10078c4:	98bff516 	blt	r19,r2,100789c <___vfprintf_internal_r+0x1b3c>
 10078c8:	10c00c04 	addi	r3,r2,48
 10078cc:	d88009c4 	addi	r2,sp,39
 10078d0:	108001c4 	addi	r2,r2,7
 10078d4:	897fffc4 	addi	r5,r17,-1
 10078d8:	88ffffc5 	stb	r3,-1(r17)
 10078dc:	2880a72e 	bgeu	r5,r2,1007b7c <___vfprintf_internal_r+0x1e1c>
 10078e0:	1009883a 	mov	r4,r2
 10078e4:	d9800804 	addi	r6,sp,32
 10078e8:	d8c00884 	addi	r3,sp,34
 10078ec:	28800003 	ldbu	r2,0(r5)
 10078f0:	29400044 	addi	r5,r5,1
 10078f4:	18800005 	stb	r2,0(r3)
 10078f8:	18c00044 	addi	r3,r3,1
 10078fc:	293ffb36 	bltu	r5,r4,10078ec <___vfprintf_internal_r+0x1b8c>
 1007900:	1987c83a 	sub	r3,r3,r6
 1007904:	00800044 	movi	r2,1
 1007908:	d8c14815 	stw	r3,1312(sp)
 100790c:	90cf883a 	add	r7,r18,r3
 1007910:	1480960e 	bge	r2,r18,1007b6c <___vfprintf_internal_r+0x1e0c>
 1007914:	39c00044 	addi	r7,r7,1
 1007918:	d9c14515 	stw	r7,1300(sp)
 100791c:	38003416 	blt	r7,zero,10079f0 <___vfprintf_internal_r+0x1c90>
 1007920:	e0803fcc 	andi	r2,fp,255
 1007924:	1080201c 	xori	r2,r2,128
 1007928:	10bfe004 	addi	r2,r2,-128
 100792c:	10004e26 	beq	r2,zero,1007a68 <___vfprintf_internal_r+0x1d08>
 1007930:	00800b44 	movi	r2,45
 1007934:	dc814715 	stw	r18,1308(sp)
 1007938:	d8014615 	stw	zero,1304(sp)
 100793c:	d8800405 	stb	r2,16(sp)
 1007940:	003bab06 	br	10067f0 <___vfprintf_internal_r+0xa90>
 1007944:	00800b44 	movi	r2,45
 1007948:	d8800405 	stb	r2,16(sp)
 100794c:	003d2d06 	br	1006e04 <___vfprintf_internal_r+0x10a4>
 1007950:	d9014f17 	ldw	r4,1340(sp)
 1007954:	b00b883a 	mov	r5,r22
 1007958:	d9800c04 	addi	r6,sp,48
 100795c:	1005d080 	call	1005d08 <__sprint_r>
 1007960:	103ab71e 	bne	r2,zero,1006440 <___vfprintf_internal_r+0x6e0>
 1007964:	003ab506 	br	100643c <___vfprintf_internal_r+0x6dc>
 1007968:	38800017 	ldw	r2,0(r7)
 100796c:	39c00104 	addi	r7,r7,4
 1007970:	d9c14015 	stw	r7,1280(sp)
 1007974:	d9414b17 	ldw	r5,1324(sp)
 1007978:	d9c14017 	ldw	r7,1280(sp)
 100797c:	11400015 	stw	r5,0(r2)
 1007980:	00395306 	br	1005ed0 <___vfprintf_internal_r+0x170>
 1007984:	980f883a 	mov	r7,r19
 1007988:	dcc14515 	stw	r19,1300(sp)
 100798c:	d8014615 	stw	zero,1304(sp)
 1007990:	003b9506 	br	10067e8 <___vfprintf_internal_r+0xa88>
 1007994:	0027883a 	mov	r19,zero
 1007998:	00397206 	br	1005f64 <___vfprintf_internal_r+0x204>
 100799c:	00c04074 	movhi	r3,257
 10079a0:	18c6f104 	addi	r3,r3,7108
 10079a4:	100f883a 	mov	r7,r2
 10079a8:	d8814515 	stw	r2,1300(sp)
 10079ac:	d8c14115 	stw	r3,1284(sp)
 10079b0:	0039da06 	br	100611c <___vfprintf_internal_r+0x3bc>
 10079b4:	00804074 	movhi	r2,257
 10079b8:	1086f004 	addi	r2,r2,7104
 10079bc:	d8814115 	stw	r2,1284(sp)
 10079c0:	003d1606 	br	1006e1c <___vfprintf_internal_r+0x10bc>
 10079c4:	d9414d17 	ldw	r5,1332(sp)
 10079c8:	00801984 	movi	r2,102
 10079cc:	28804926 	beq	r5,r2,1007af4 <___vfprintf_internal_r+0x1d94>
 10079d0:	200f883a 	mov	r7,r4
 10079d4:	24805716 	blt	r4,r18,1007b34 <___vfprintf_internal_r+0x1dd4>
 10079d8:	d9414c17 	ldw	r5,1328(sp)
 10079dc:	2880004c 	andi	r2,r5,1
 10079e0:	10000126 	beq	r2,zero,10079e8 <___vfprintf_internal_r+0x1c88>
 10079e4:	21c00044 	addi	r7,r4,1
 10079e8:	d9c14515 	stw	r7,1300(sp)
 10079ec:	383fcc0e 	bge	r7,zero,1007920 <___vfprintf_internal_r+0x1bc0>
 10079f0:	d8014515 	stw	zero,1300(sp)
 10079f4:	003fca06 	br	1007920 <___vfprintf_internal_r+0x1bc0>
 10079f8:	d9000517 	ldw	r4,20(sp)
 10079fc:	00bfff04 	movi	r2,-4
 1007a00:	1100480e 	bge	r2,r4,1007b24 <___vfprintf_internal_r+0x1dc4>
 1007a04:	99004716 	blt	r19,r4,1007b24 <___vfprintf_internal_r+0x1dc4>
 1007a08:	d8c14d15 	stw	r3,1332(sp)
 1007a0c:	003ff006 	br	10079d0 <___vfprintf_internal_r+0x1c70>
 1007a10:	d8800717 	ldw	r2,28(sp)
 1007a14:	14bf8b2e 	bgeu	r2,r18,1007844 <___vfprintf_internal_r+0x1ae4>
 1007a18:	9007883a 	mov	r3,r18
 1007a1c:	01000c04 	movi	r4,48
 1007a20:	11000005 	stb	r4,0(r2)
 1007a24:	10800044 	addi	r2,r2,1
 1007a28:	d8800715 	stw	r2,28(sp)
 1007a2c:	18bffc1e 	bne	r3,r2,1007a20 <___vfprintf_internal_r+0x1cc0>
 1007a30:	003f8406 	br	1007844 <___vfprintf_internal_r+0x1ae4>
 1007a34:	d8814117 	ldw	r2,1284(sp)
 1007a38:	10c00007 	ldb	r3,0(r2)
 1007a3c:	00800c04 	movi	r2,48
 1007a40:	18805b26 	beq	r3,r2,1007bb0 <___vfprintf_internal_r+0x1e50>
 1007a44:	d9000517 	ldw	r4,20(sp)
 1007a48:	9125883a 	add	r18,r18,r4
 1007a4c:	003f7506 	br	1007824 <___vfprintf_internal_r+0x1ac4>
 1007a50:	d9014c17 	ldw	r4,1328(sp)
 1007a54:	2080004c 	andi	r2,r4,1
 1007a58:	1005003a 	cmpeq	r2,r2,zero
 1007a5c:	103f6a26 	beq	r2,zero,1007808 <___vfprintf_internal_r+0x1aa8>
 1007a60:	d8800717 	ldw	r2,28(sp)
 1007a64:	003f7706 	br	1007844 <___vfprintf_internal_r+0x1ae4>
 1007a68:	d9c14515 	stw	r7,1300(sp)
 1007a6c:	38004d16 	blt	r7,zero,1007ba4 <___vfprintf_internal_r+0x1e44>
 1007a70:	dc814715 	stw	r18,1308(sp)
 1007a74:	d8014615 	stw	zero,1304(sp)
 1007a78:	003b5b06 	br	10067e8 <___vfprintf_internal_r+0xa88>
 1007a7c:	d9014f17 	ldw	r4,1340(sp)
 1007a80:	d8800504 	addi	r2,sp,20
 1007a84:	d8800115 	stw	r2,4(sp)
 1007a88:	d8c00604 	addi	r3,sp,24
 1007a8c:	d8800704 	addi	r2,sp,28
 1007a90:	800b883a 	mov	r5,r16
 1007a94:	880d883a 	mov	r6,r17
 1007a98:	01c000c4 	movi	r7,3
 1007a9c:	d8c00215 	stw	r3,8(sp)
 1007aa0:	d8800315 	stw	r2,12(sp)
 1007aa4:	dcc00015 	stw	r19,0(sp)
 1007aa8:	9829883a 	mov	r20,r19
 1007aac:	10080b00 	call	10080b0 <_dtoa_r>
 1007ab0:	d8814115 	stw	r2,1284(sp)
 1007ab4:	003f5106 	br	10077fc <___vfprintf_internal_r+0x1a9c>
 1007ab8:	d8c14217 	ldw	r3,1288(sp)
 1007abc:	d9014317 	ldw	r4,1292(sp)
 1007ac0:	07000b44 	movi	fp,45
 1007ac4:	1821883a 	mov	r16,r3
 1007ac8:	2460003c 	xorhi	r17,r4,32768
 1007acc:	003f3106 	br	1007794 <___vfprintf_internal_r+0x1a34>
 1007ad0:	9d000044 	addi	r20,r19,1
 1007ad4:	003f3906 	br	10077bc <___vfprintf_internal_r+0x1a5c>
 1007ad8:	983f251e 	bne	r19,zero,1007770 <___vfprintf_internal_r+0x1a10>
 1007adc:	04c00044 	movi	r19,1
 1007ae0:	003f2306 	br	1007770 <___vfprintf_internal_r+0x1a10>
 1007ae4:	04c00184 	movi	r19,6
 1007ae8:	003f2106 	br	1007770 <___vfprintf_internal_r+0x1a10>
 1007aec:	d8014515 	stw	zero,1300(sp)
 1007af0:	003eee06 	br	10076ac <___vfprintf_internal_r+0x194c>
 1007af4:	200f883a 	mov	r7,r4
 1007af8:	0100370e 	bge	zero,r4,1007bd8 <___vfprintf_internal_r+0x1e78>
 1007afc:	9800031e 	bne	r19,zero,1007b0c <___vfprintf_internal_r+0x1dac>
 1007b00:	d9814c17 	ldw	r6,1328(sp)
 1007b04:	3080004c 	andi	r2,r6,1
 1007b08:	103fb726 	beq	r2,zero,10079e8 <___vfprintf_internal_r+0x1c88>
 1007b0c:	20800044 	addi	r2,r4,1
 1007b10:	98a7883a 	add	r19,r19,r2
 1007b14:	dcc14515 	stw	r19,1300(sp)
 1007b18:	980f883a 	mov	r7,r19
 1007b1c:	983f800e 	bge	r19,zero,1007920 <___vfprintf_internal_r+0x1bc0>
 1007b20:	003fb306 	br	10079f0 <___vfprintf_internal_r+0x1c90>
 1007b24:	d9814d17 	ldw	r6,1332(sp)
 1007b28:	31bfff84 	addi	r6,r6,-2
 1007b2c:	d9814d15 	stw	r6,1332(sp)
 1007b30:	003f4c06 	br	1007864 <___vfprintf_internal_r+0x1b04>
 1007b34:	0100180e 	bge	zero,r4,1007b98 <___vfprintf_internal_r+0x1e38>
 1007b38:	00800044 	movi	r2,1
 1007b3c:	1485883a 	add	r2,r2,r18
 1007b40:	d8814515 	stw	r2,1300(sp)
 1007b44:	100f883a 	mov	r7,r2
 1007b48:	103f750e 	bge	r2,zero,1007920 <___vfprintf_internal_r+0x1bc0>
 1007b4c:	003fa806 	br	10079f0 <___vfprintf_internal_r+0x1c90>
 1007b50:	80c00c04 	addi	r3,r16,48
 1007b54:	00800c04 	movi	r2,48
 1007b58:	d8c008c5 	stb	r3,35(sp)
 1007b5c:	d9800804 	addi	r6,sp,32
 1007b60:	d8c00904 	addi	r3,sp,36
 1007b64:	d8800885 	stb	r2,34(sp)
 1007b68:	003f6506 	br	1007900 <___vfprintf_internal_r+0x1ba0>
 1007b6c:	d9014c17 	ldw	r4,1328(sp)
 1007b70:	2084703a 	and	r2,r4,r2
 1007b74:	103f9c26 	beq	r2,zero,10079e8 <___vfprintf_internal_r+0x1c88>
 1007b78:	003f6606 	br	1007914 <___vfprintf_internal_r+0x1bb4>
 1007b7c:	d9800804 	addi	r6,sp,32
 1007b80:	d8c00884 	addi	r3,sp,34
 1007b84:	003f5e06 	br	1007900 <___vfprintf_internal_r+0x1ba0>
 1007b88:	00800b44 	movi	r2,45
 1007b8c:	0121c83a 	sub	r16,zero,r4
 1007b90:	d8800845 	stb	r2,33(sp)
 1007b94:	003f3d06 	br	100788c <___vfprintf_internal_r+0x1b2c>
 1007b98:	00800084 	movi	r2,2
 1007b9c:	1105c83a 	sub	r2,r2,r4
 1007ba0:	003fe606 	br	1007b3c <___vfprintf_internal_r+0x1ddc>
 1007ba4:	d8014515 	stw	zero,1300(sp)
 1007ba8:	dc814715 	stw	r18,1308(sp)
 1007bac:	003fb106 	br	1007a74 <___vfprintf_internal_r+0x1d14>
 1007bb0:	000d883a 	mov	r6,zero
 1007bb4:	000f883a 	mov	r7,zero
 1007bb8:	8009883a 	mov	r4,r16
 1007bbc:	880b883a 	mov	r5,r17
 1007bc0:	100d4480 	call	100d448 <__nedf2>
 1007bc4:	103f9f26 	beq	r2,zero,1007a44 <___vfprintf_internal_r+0x1ce4>
 1007bc8:	00800044 	movi	r2,1
 1007bcc:	1509c83a 	sub	r4,r2,r20
 1007bd0:	d9000515 	stw	r4,20(sp)
 1007bd4:	003f9b06 	br	1007a44 <___vfprintf_internal_r+0x1ce4>
 1007bd8:	98000d1e 	bne	r19,zero,1007c10 <___vfprintf_internal_r+0x1eb0>
 1007bdc:	d8c14c17 	ldw	r3,1328(sp)
 1007be0:	1880004c 	andi	r2,r3,1
 1007be4:	10000a1e 	bne	r2,zero,1007c10 <___vfprintf_internal_r+0x1eb0>
 1007be8:	01000044 	movi	r4,1
 1007bec:	200f883a 	mov	r7,r4
 1007bf0:	d9014515 	stw	r4,1300(sp)
 1007bf4:	003f4a06 	br	1007920 <___vfprintf_internal_r+0x1bc0>
 1007bf8:	3cc00017 	ldw	r19,0(r7)
 1007bfc:	39c00104 	addi	r7,r7,4
 1007c00:	983d0e0e 	bge	r19,zero,100703c <___vfprintf_internal_r+0x12dc>
 1007c04:	b8c00007 	ldb	r3,0(r23)
 1007c08:	04ffffc4 	movi	r19,-1
 1007c0c:	0038d306 	br	1005f5c <___vfprintf_internal_r+0x1fc>
 1007c10:	9cc00084 	addi	r19,r19,2
 1007c14:	dcc14515 	stw	r19,1300(sp)
 1007c18:	980f883a 	mov	r7,r19
 1007c1c:	983f400e 	bge	r19,zero,1007920 <___vfprintf_internal_r+0x1bc0>
 1007c20:	003f7306 	br	10079f0 <___vfprintf_internal_r+0x1c90>

01007c24 <__vfprintf_internal>:
 1007c24:	00804074 	movhi	r2,257
 1007c28:	108e7f04 	addi	r2,r2,14844
 1007c2c:	2013883a 	mov	r9,r4
 1007c30:	11000017 	ldw	r4,0(r2)
 1007c34:	2805883a 	mov	r2,r5
 1007c38:	300f883a 	mov	r7,r6
 1007c3c:	480b883a 	mov	r5,r9
 1007c40:	100d883a 	mov	r6,r2
 1007c44:	1005d601 	jmpi	1005d60 <___vfprintf_internal_r>

01007c48 <_write_r>:
 1007c48:	defffd04 	addi	sp,sp,-12
 1007c4c:	dc000015 	stw	r16,0(sp)
 1007c50:	04004074 	movhi	r16,257
 1007c54:	84156804 	addi	r16,r16,21920
 1007c58:	dc400115 	stw	r17,4(sp)
 1007c5c:	80000015 	stw	zero,0(r16)
 1007c60:	2023883a 	mov	r17,r4
 1007c64:	2809883a 	mov	r4,r5
 1007c68:	300b883a 	mov	r5,r6
 1007c6c:	380d883a 	mov	r6,r7
 1007c70:	dfc00215 	stw	ra,8(sp)
 1007c74:	100f06c0 	call	100f06c <write>
 1007c78:	1007883a 	mov	r3,r2
 1007c7c:	00bfffc4 	movi	r2,-1
 1007c80:	18800626 	beq	r3,r2,1007c9c <_write_r+0x54>
 1007c84:	1805883a 	mov	r2,r3
 1007c88:	dfc00217 	ldw	ra,8(sp)
 1007c8c:	dc400117 	ldw	r17,4(sp)
 1007c90:	dc000017 	ldw	r16,0(sp)
 1007c94:	dec00304 	addi	sp,sp,12
 1007c98:	f800283a 	ret
 1007c9c:	80800017 	ldw	r2,0(r16)
 1007ca0:	103ff826 	beq	r2,zero,1007c84 <_write_r+0x3c>
 1007ca4:	88800015 	stw	r2,0(r17)
 1007ca8:	1805883a 	mov	r2,r3
 1007cac:	dfc00217 	ldw	ra,8(sp)
 1007cb0:	dc400117 	ldw	r17,4(sp)
 1007cb4:	dc000017 	ldw	r16,0(sp)
 1007cb8:	dec00304 	addi	sp,sp,12
 1007cbc:	f800283a 	ret

01007cc0 <__swsetup_r>:
 1007cc0:	00804074 	movhi	r2,257
 1007cc4:	108e7f04 	addi	r2,r2,14844
 1007cc8:	10c00017 	ldw	r3,0(r2)
 1007ccc:	defffd04 	addi	sp,sp,-12
 1007cd0:	dc400115 	stw	r17,4(sp)
 1007cd4:	dc000015 	stw	r16,0(sp)
 1007cd8:	dfc00215 	stw	ra,8(sp)
 1007cdc:	2023883a 	mov	r17,r4
 1007ce0:	2821883a 	mov	r16,r5
 1007ce4:	18000226 	beq	r3,zero,1007cf0 <__swsetup_r+0x30>
 1007ce8:	18800e17 	ldw	r2,56(r3)
 1007cec:	10001f26 	beq	r2,zero,1007d6c <__swsetup_r+0xac>
 1007cf0:	8100030b 	ldhu	r4,12(r16)
 1007cf4:	2080020c 	andi	r2,r4,8
 1007cf8:	10002826 	beq	r2,zero,1007d9c <__swsetup_r+0xdc>
 1007cfc:	81400417 	ldw	r5,16(r16)
 1007d00:	28001d26 	beq	r5,zero,1007d78 <__swsetup_r+0xb8>
 1007d04:	2080004c 	andi	r2,r4,1
 1007d08:	1005003a 	cmpeq	r2,r2,zero
 1007d0c:	10000b26 	beq	r2,zero,1007d3c <__swsetup_r+0x7c>
 1007d10:	2080008c 	andi	r2,r4,2
 1007d14:	10001226 	beq	r2,zero,1007d60 <__swsetup_r+0xa0>
 1007d18:	0005883a 	mov	r2,zero
 1007d1c:	80800215 	stw	r2,8(r16)
 1007d20:	28000b26 	beq	r5,zero,1007d50 <__swsetup_r+0x90>
 1007d24:	0005883a 	mov	r2,zero
 1007d28:	dfc00217 	ldw	ra,8(sp)
 1007d2c:	dc400117 	ldw	r17,4(sp)
 1007d30:	dc000017 	ldw	r16,0(sp)
 1007d34:	dec00304 	addi	sp,sp,12
 1007d38:	f800283a 	ret
 1007d3c:	80800517 	ldw	r2,20(r16)
 1007d40:	80000215 	stw	zero,8(r16)
 1007d44:	0085c83a 	sub	r2,zero,r2
 1007d48:	80800615 	stw	r2,24(r16)
 1007d4c:	283ff51e 	bne	r5,zero,1007d24 <__swsetup_r+0x64>
 1007d50:	2080200c 	andi	r2,r4,128
 1007d54:	103ff326 	beq	r2,zero,1007d24 <__swsetup_r+0x64>
 1007d58:	00bfffc4 	movi	r2,-1
 1007d5c:	003ff206 	br	1007d28 <__swsetup_r+0x68>
 1007d60:	80800517 	ldw	r2,20(r16)
 1007d64:	80800215 	stw	r2,8(r16)
 1007d68:	003fed06 	br	1007d20 <__swsetup_r+0x60>
 1007d6c:	1809883a 	mov	r4,r3
 1007d70:	100388c0 	call	100388c <__sinit>
 1007d74:	003fde06 	br	1007cf0 <__swsetup_r+0x30>
 1007d78:	20c0a00c 	andi	r3,r4,640
 1007d7c:	00808004 	movi	r2,512
 1007d80:	18bfe026 	beq	r3,r2,1007d04 <__swsetup_r+0x44>
 1007d84:	8809883a 	mov	r4,r17
 1007d88:	800b883a 	mov	r5,r16
 1007d8c:	10048d00 	call	10048d0 <__smakebuf_r>
 1007d90:	8100030b 	ldhu	r4,12(r16)
 1007d94:	81400417 	ldw	r5,16(r16)
 1007d98:	003fda06 	br	1007d04 <__swsetup_r+0x44>
 1007d9c:	2080040c 	andi	r2,r4,16
 1007da0:	103fed26 	beq	r2,zero,1007d58 <__swsetup_r+0x98>
 1007da4:	2080010c 	andi	r2,r4,4
 1007da8:	10001226 	beq	r2,zero,1007df4 <__swsetup_r+0x134>
 1007dac:	81400c17 	ldw	r5,48(r16)
 1007db0:	28000526 	beq	r5,zero,1007dc8 <__swsetup_r+0x108>
 1007db4:	80801004 	addi	r2,r16,64
 1007db8:	28800226 	beq	r5,r2,1007dc4 <__swsetup_r+0x104>
 1007dbc:	8809883a 	mov	r4,r17
 1007dc0:	1003d540 	call	1003d54 <_free_r>
 1007dc4:	80000c15 	stw	zero,48(r16)
 1007dc8:	8080030b 	ldhu	r2,12(r16)
 1007dcc:	81400417 	ldw	r5,16(r16)
 1007dd0:	80000115 	stw	zero,4(r16)
 1007dd4:	10bff6cc 	andi	r2,r2,65499
 1007dd8:	8080030d 	sth	r2,12(r16)
 1007ddc:	81400015 	stw	r5,0(r16)
 1007de0:	8080030b 	ldhu	r2,12(r16)
 1007de4:	10800214 	ori	r2,r2,8
 1007de8:	113fffcc 	andi	r4,r2,65535
 1007dec:	8080030d 	sth	r2,12(r16)
 1007df0:	003fc306 	br	1007d00 <__swsetup_r+0x40>
 1007df4:	81400417 	ldw	r5,16(r16)
 1007df8:	003ff906 	br	1007de0 <__swsetup_r+0x120>

01007dfc <_close_r>:
 1007dfc:	defffd04 	addi	sp,sp,-12
 1007e00:	dc000015 	stw	r16,0(sp)
 1007e04:	04004074 	movhi	r16,257
 1007e08:	84156804 	addi	r16,r16,21920
 1007e0c:	dc400115 	stw	r17,4(sp)
 1007e10:	80000015 	stw	zero,0(r16)
 1007e14:	2023883a 	mov	r17,r4
 1007e18:	2809883a 	mov	r4,r5
 1007e1c:	dfc00215 	stw	ra,8(sp)
 1007e20:	100e1d00 	call	100e1d0 <close>
 1007e24:	1007883a 	mov	r3,r2
 1007e28:	00bfffc4 	movi	r2,-1
 1007e2c:	18800626 	beq	r3,r2,1007e48 <_close_r+0x4c>
 1007e30:	1805883a 	mov	r2,r3
 1007e34:	dfc00217 	ldw	ra,8(sp)
 1007e38:	dc400117 	ldw	r17,4(sp)
 1007e3c:	dc000017 	ldw	r16,0(sp)
 1007e40:	dec00304 	addi	sp,sp,12
 1007e44:	f800283a 	ret
 1007e48:	80800017 	ldw	r2,0(r16)
 1007e4c:	103ff826 	beq	r2,zero,1007e30 <_close_r+0x34>
 1007e50:	88800015 	stw	r2,0(r17)
 1007e54:	1805883a 	mov	r2,r3
 1007e58:	dfc00217 	ldw	ra,8(sp)
 1007e5c:	dc400117 	ldw	r17,4(sp)
 1007e60:	dc000017 	ldw	r16,0(sp)
 1007e64:	dec00304 	addi	sp,sp,12
 1007e68:	f800283a 	ret

01007e6c <quorem>:
 1007e6c:	28c00417 	ldw	r3,16(r5)
 1007e70:	20800417 	ldw	r2,16(r4)
 1007e74:	defff104 	addi	sp,sp,-60
 1007e78:	dfc00e15 	stw	ra,56(sp)
 1007e7c:	df000d15 	stw	fp,52(sp)
 1007e80:	ddc00c15 	stw	r23,48(sp)
 1007e84:	dd800b15 	stw	r22,44(sp)
 1007e88:	dd400a15 	stw	r21,40(sp)
 1007e8c:	dd000915 	stw	r20,36(sp)
 1007e90:	dcc00815 	stw	r19,32(sp)
 1007e94:	dc800715 	stw	r18,28(sp)
 1007e98:	dc400615 	stw	r17,24(sp)
 1007e9c:	dc000515 	stw	r16,20(sp)
 1007ea0:	d9000315 	stw	r4,12(sp)
 1007ea4:	d9400415 	stw	r5,16(sp)
 1007ea8:	10c07f16 	blt	r2,r3,10080a8 <quorem+0x23c>
 1007eac:	1d3fffc4 	addi	r20,r3,-1
 1007eb0:	d8c00417 	ldw	r3,16(sp)
 1007eb4:	d9000317 	ldw	r4,12(sp)
 1007eb8:	a505883a 	add	r2,r20,r20
 1007ebc:	1085883a 	add	r2,r2,r2
 1007ec0:	1cc00504 	addi	r19,r3,20
 1007ec4:	25c00504 	addi	r23,r4,20
 1007ec8:	98ad883a 	add	r22,r19,r2
 1007ecc:	15c7883a 	add	r3,r2,r23
 1007ed0:	b1400017 	ldw	r5,0(r22)
 1007ed4:	19000017 	ldw	r4,0(r3)
 1007ed8:	d8c00015 	stw	r3,0(sp)
 1007edc:	29400044 	addi	r5,r5,1
 1007ee0:	d9000215 	stw	r4,8(sp)
 1007ee4:	100db080 	call	100db08 <__udivsi3>
 1007ee8:	1039883a 	mov	fp,r2
 1007eec:	10003d1e 	bne	r2,zero,1007fe4 <quorem+0x178>
 1007ef0:	d9400417 	ldw	r5,16(sp)
 1007ef4:	d9000317 	ldw	r4,12(sp)
 1007ef8:	100a10c0 	call	100a10c <__mcmp>
 1007efc:	10002c16 	blt	r2,zero,1007fb0 <quorem+0x144>
 1007f00:	e7000044 	addi	fp,fp,1
 1007f04:	b80f883a 	mov	r7,r23
 1007f08:	0011883a 	mov	r8,zero
 1007f0c:	0009883a 	mov	r4,zero
 1007f10:	99400017 	ldw	r5,0(r19)
 1007f14:	38c00017 	ldw	r3,0(r7)
 1007f18:	9cc00104 	addi	r19,r19,4
 1007f1c:	28bfffcc 	andi	r2,r5,65535
 1007f20:	2085883a 	add	r2,r4,r2
 1007f24:	11bfffcc 	andi	r6,r2,65535
 1007f28:	193fffcc 	andi	r4,r3,65535
 1007f2c:	1004d43a 	srli	r2,r2,16
 1007f30:	280ad43a 	srli	r5,r5,16
 1007f34:	2189c83a 	sub	r4,r4,r6
 1007f38:	2209883a 	add	r4,r4,r8
 1007f3c:	1806d43a 	srli	r3,r3,16
 1007f40:	288b883a 	add	r5,r5,r2
 1007f44:	200dd43a 	srai	r6,r4,16
 1007f48:	28bfffcc 	andi	r2,r5,65535
 1007f4c:	1887c83a 	sub	r3,r3,r2
 1007f50:	1987883a 	add	r3,r3,r6
 1007f54:	3900000d 	sth	r4,0(r7)
 1007f58:	38c0008d 	sth	r3,2(r7)
 1007f5c:	2808d43a 	srli	r4,r5,16
 1007f60:	39c00104 	addi	r7,r7,4
 1007f64:	1811d43a 	srai	r8,r3,16
 1007f68:	b4ffe92e 	bgeu	r22,r19,1007f10 <quorem+0xa4>
 1007f6c:	a505883a 	add	r2,r20,r20
 1007f70:	1085883a 	add	r2,r2,r2
 1007f74:	b885883a 	add	r2,r23,r2
 1007f78:	10c00017 	ldw	r3,0(r2)
 1007f7c:	18000c1e 	bne	r3,zero,1007fb0 <quorem+0x144>
 1007f80:	113fff04 	addi	r4,r2,-4
 1007f84:	b900082e 	bgeu	r23,r4,1007fa8 <quorem+0x13c>
 1007f88:	10bfff17 	ldw	r2,-4(r2)
 1007f8c:	10000326 	beq	r2,zero,1007f9c <quorem+0x130>
 1007f90:	00000506 	br	1007fa8 <quorem+0x13c>
 1007f94:	20800017 	ldw	r2,0(r4)
 1007f98:	1000031e 	bne	r2,zero,1007fa8 <quorem+0x13c>
 1007f9c:	213fff04 	addi	r4,r4,-4
 1007fa0:	a53fffc4 	addi	r20,r20,-1
 1007fa4:	b93ffb36 	bltu	r23,r4,1007f94 <quorem+0x128>
 1007fa8:	d9000317 	ldw	r4,12(sp)
 1007fac:	25000415 	stw	r20,16(r4)
 1007fb0:	e005883a 	mov	r2,fp
 1007fb4:	dfc00e17 	ldw	ra,56(sp)
 1007fb8:	df000d17 	ldw	fp,52(sp)
 1007fbc:	ddc00c17 	ldw	r23,48(sp)
 1007fc0:	dd800b17 	ldw	r22,44(sp)
 1007fc4:	dd400a17 	ldw	r21,40(sp)
 1007fc8:	dd000917 	ldw	r20,36(sp)
 1007fcc:	dcc00817 	ldw	r19,32(sp)
 1007fd0:	dc800717 	ldw	r18,28(sp)
 1007fd4:	dc400617 	ldw	r17,24(sp)
 1007fd8:	dc000517 	ldw	r16,20(sp)
 1007fdc:	dec00f04 	addi	sp,sp,60
 1007fe0:	f800283a 	ret
 1007fe4:	b823883a 	mov	r17,r23
 1007fe8:	9825883a 	mov	r18,r19
 1007fec:	d8000115 	stw	zero,4(sp)
 1007ff0:	002b883a 	mov	r21,zero
 1007ff4:	94000017 	ldw	r16,0(r18)
 1007ff8:	e009883a 	mov	r4,fp
 1007ffc:	94800104 	addi	r18,r18,4
 1008000:	817fffcc 	andi	r5,r16,65535
 1008004:	1002f380 	call	1002f38 <__mulsi3>
 1008008:	800ad43a 	srli	r5,r16,16
 100800c:	e009883a 	mov	r4,fp
 1008010:	a8a1883a 	add	r16,r21,r2
 1008014:	1002f380 	call	1002f38 <__mulsi3>
 1008018:	89000017 	ldw	r4,0(r17)
 100801c:	80ffffcc 	andi	r3,r16,65535
 1008020:	8020d43a 	srli	r16,r16,16
 1008024:	217fffcc 	andi	r5,r4,65535
 1008028:	28cbc83a 	sub	r5,r5,r3
 100802c:	d8c00117 	ldw	r3,4(sp)
 1008030:	2008d43a 	srli	r4,r4,16
 1008034:	1405883a 	add	r2,r2,r16
 1008038:	28cb883a 	add	r5,r5,r3
 100803c:	280dd43a 	srai	r6,r5,16
 1008040:	10ffffcc 	andi	r3,r2,65535
 1008044:	20c9c83a 	sub	r4,r4,r3
 1008048:	2189883a 	add	r4,r4,r6
 100804c:	8900008d 	sth	r4,2(r17)
 1008050:	2009d43a 	srai	r4,r4,16
 1008054:	8940000d 	sth	r5,0(r17)
 1008058:	102ad43a 	srli	r21,r2,16
 100805c:	8c400104 	addi	r17,r17,4
 1008060:	d9000115 	stw	r4,4(sp)
 1008064:	b4bfe32e 	bgeu	r22,r18,1007ff4 <quorem+0x188>
 1008068:	d9000217 	ldw	r4,8(sp)
 100806c:	203fa01e 	bne	r4,zero,1007ef0 <quorem+0x84>
 1008070:	d8800017 	ldw	r2,0(sp)
 1008074:	10ffff04 	addi	r3,r2,-4
 1008078:	b8c0082e 	bgeu	r23,r3,100809c <quorem+0x230>
 100807c:	10bfff17 	ldw	r2,-4(r2)
 1008080:	10000326 	beq	r2,zero,1008090 <quorem+0x224>
 1008084:	00000506 	br	100809c <quorem+0x230>
 1008088:	18800017 	ldw	r2,0(r3)
 100808c:	1000031e 	bne	r2,zero,100809c <quorem+0x230>
 1008090:	18ffff04 	addi	r3,r3,-4
 1008094:	a53fffc4 	addi	r20,r20,-1
 1008098:	b8fffb36 	bltu	r23,r3,1008088 <quorem+0x21c>
 100809c:	d8c00317 	ldw	r3,12(sp)
 10080a0:	1d000415 	stw	r20,16(r3)
 10080a4:	003f9206 	br	1007ef0 <quorem+0x84>
 10080a8:	0005883a 	mov	r2,zero
 10080ac:	003fc106 	br	1007fb4 <quorem+0x148>

010080b0 <_dtoa_r>:
 10080b0:	22001017 	ldw	r8,64(r4)
 10080b4:	deffda04 	addi	sp,sp,-152
 10080b8:	dd402115 	stw	r21,132(sp)
 10080bc:	dd002015 	stw	r20,128(sp)
 10080c0:	dc801e15 	stw	r18,120(sp)
 10080c4:	dc401d15 	stw	r17,116(sp)
 10080c8:	dfc02515 	stw	ra,148(sp)
 10080cc:	df002415 	stw	fp,144(sp)
 10080d0:	ddc02315 	stw	r23,140(sp)
 10080d4:	dd802215 	stw	r22,136(sp)
 10080d8:	dcc01f15 	stw	r19,124(sp)
 10080dc:	dc001c15 	stw	r16,112(sp)
 10080e0:	d9001615 	stw	r4,88(sp)
 10080e4:	3023883a 	mov	r17,r6
 10080e8:	2829883a 	mov	r20,r5
 10080ec:	d9c01715 	stw	r7,92(sp)
 10080f0:	dc802817 	ldw	r18,160(sp)
 10080f4:	302b883a 	mov	r21,r6
 10080f8:	40000a26 	beq	r8,zero,1008124 <_dtoa_r+0x74>
 10080fc:	20801117 	ldw	r2,68(r4)
 1008100:	400b883a 	mov	r5,r8
 1008104:	40800115 	stw	r2,4(r8)
 1008108:	20c01117 	ldw	r3,68(r4)
 100810c:	00800044 	movi	r2,1
 1008110:	10c4983a 	sll	r2,r2,r3
 1008114:	40800215 	stw	r2,8(r8)
 1008118:	1009fb00 	call	1009fb0 <_Bfree>
 100811c:	d8c01617 	ldw	r3,88(sp)
 1008120:	18001015 	stw	zero,64(r3)
 1008124:	8800a316 	blt	r17,zero,10083b4 <_dtoa_r+0x304>
 1008128:	90000015 	stw	zero,0(r18)
 100812c:	a8dffc2c 	andhi	r3,r21,32752
 1008130:	009ffc34 	movhi	r2,32752
 1008134:	18809126 	beq	r3,r2,100837c <_dtoa_r+0x2cc>
 1008138:	000d883a 	mov	r6,zero
 100813c:	000f883a 	mov	r7,zero
 1008140:	a009883a 	mov	r4,r20
 1008144:	a80b883a 	mov	r5,r21
 1008148:	dd001215 	stw	r20,72(sp)
 100814c:	dd401315 	stw	r21,76(sp)
 1008150:	100d4480 	call	100d448 <__nedf2>
 1008154:	1000171e 	bne	r2,zero,10081b4 <_dtoa_r+0x104>
 1008158:	d9802717 	ldw	r6,156(sp)
 100815c:	00800044 	movi	r2,1
 1008160:	30800015 	stw	r2,0(r6)
 1008164:	d8802917 	ldw	r2,164(sp)
 1008168:	10029b26 	beq	r2,zero,1008bd8 <_dtoa_r+0xb28>
 100816c:	d9002917 	ldw	r4,164(sp)
 1008170:	00804074 	movhi	r2,257
 1008174:	1086ff44 	addi	r2,r2,7165
 1008178:	10ffffc4 	addi	r3,r2,-1
 100817c:	20800015 	stw	r2,0(r4)
 1008180:	1805883a 	mov	r2,r3
 1008184:	dfc02517 	ldw	ra,148(sp)
 1008188:	df002417 	ldw	fp,144(sp)
 100818c:	ddc02317 	ldw	r23,140(sp)
 1008190:	dd802217 	ldw	r22,136(sp)
 1008194:	dd402117 	ldw	r21,132(sp)
 1008198:	dd002017 	ldw	r20,128(sp)
 100819c:	dcc01f17 	ldw	r19,124(sp)
 10081a0:	dc801e17 	ldw	r18,120(sp)
 10081a4:	dc401d17 	ldw	r17,116(sp)
 10081a8:	dc001c17 	ldw	r16,112(sp)
 10081ac:	dec02604 	addi	sp,sp,152
 10081b0:	f800283a 	ret
 10081b4:	d9001617 	ldw	r4,88(sp)
 10081b8:	d9401217 	ldw	r5,72(sp)
 10081bc:	d8800104 	addi	r2,sp,4
 10081c0:	a80d883a 	mov	r6,r21
 10081c4:	d9c00204 	addi	r7,sp,8
 10081c8:	d8800015 	stw	r2,0(sp)
 10081cc:	100a5ec0 	call	100a5ec <__d2b>
 10081d0:	d8800715 	stw	r2,28(sp)
 10081d4:	a804d53a 	srli	r2,r21,20
 10081d8:	1101ffcc 	andi	r4,r2,2047
 10081dc:	20008626 	beq	r4,zero,10083f8 <_dtoa_r+0x348>
 10081e0:	d8c01217 	ldw	r3,72(sp)
 10081e4:	00800434 	movhi	r2,16
 10081e8:	10bfffc4 	addi	r2,r2,-1
 10081ec:	ddc00117 	ldw	r23,4(sp)
 10081f0:	a884703a 	and	r2,r21,r2
 10081f4:	1811883a 	mov	r8,r3
 10081f8:	124ffc34 	orhi	r9,r2,16368
 10081fc:	25bf0044 	addi	r22,r4,-1023
 1008200:	d8000815 	stw	zero,32(sp)
 1008204:	0005883a 	mov	r2,zero
 1008208:	00cffe34 	movhi	r3,16376
 100820c:	480b883a 	mov	r5,r9
 1008210:	4009883a 	mov	r4,r8
 1008214:	180f883a 	mov	r7,r3
 1008218:	100d883a 	mov	r6,r2
 100821c:	100ccb00 	call	100ccb0 <__subdf3>
 1008220:	0218dbf4 	movhi	r8,25455
 1008224:	4210d844 	addi	r8,r8,17249
 1008228:	024ff4f4 	movhi	r9,16339
 100822c:	4a61e9c4 	addi	r9,r9,-30809
 1008230:	480f883a 	mov	r7,r9
 1008234:	400d883a 	mov	r6,r8
 1008238:	180b883a 	mov	r5,r3
 100823c:	1009883a 	mov	r4,r2
 1008240:	100cda40 	call	100cda4 <__muldf3>
 1008244:	0222d874 	movhi	r8,35681
 1008248:	42322cc4 	addi	r8,r8,-14157
 100824c:	024ff1f4 	movhi	r9,16327
 1008250:	4a628a04 	addi	r9,r9,-30168
 1008254:	480f883a 	mov	r7,r9
 1008258:	400d883a 	mov	r6,r8
 100825c:	180b883a 	mov	r5,r3
 1008260:	1009883a 	mov	r4,r2
 1008264:	100cd300 	call	100cd30 <__adddf3>
 1008268:	b009883a 	mov	r4,r22
 100826c:	1021883a 	mov	r16,r2
 1008270:	1823883a 	mov	r17,r3
 1008274:	100d6680 	call	100d668 <__floatsidf>
 1008278:	021427f4 	movhi	r8,20639
 100827c:	421e7ec4 	addi	r8,r8,31227
 1008280:	024ff4f4 	movhi	r9,16339
 1008284:	4a5104c4 	addi	r9,r9,17427
 1008288:	480f883a 	mov	r7,r9
 100828c:	400d883a 	mov	r6,r8
 1008290:	180b883a 	mov	r5,r3
 1008294:	1009883a 	mov	r4,r2
 1008298:	100cda40 	call	100cda4 <__muldf3>
 100829c:	180f883a 	mov	r7,r3
 10082a0:	880b883a 	mov	r5,r17
 10082a4:	100d883a 	mov	r6,r2
 10082a8:	8009883a 	mov	r4,r16
 10082ac:	100cd300 	call	100cd30 <__adddf3>
 10082b0:	1009883a 	mov	r4,r2
 10082b4:	180b883a 	mov	r5,r3
 10082b8:	1021883a 	mov	r16,r2
 10082bc:	1823883a 	mov	r17,r3
 10082c0:	100d7600 	call	100d760 <__fixdfsi>
 10082c4:	000d883a 	mov	r6,zero
 10082c8:	000f883a 	mov	r7,zero
 10082cc:	8009883a 	mov	r4,r16
 10082d0:	880b883a 	mov	r5,r17
 10082d4:	d8800d15 	stw	r2,52(sp)
 10082d8:	100d5e00 	call	100d5e0 <__ltdf2>
 10082dc:	10031716 	blt	r2,zero,1008f3c <_dtoa_r+0xe8c>
 10082e0:	d8c00d17 	ldw	r3,52(sp)
 10082e4:	00800584 	movi	r2,22
 10082e8:	10c1482e 	bgeu	r2,r3,100880c <_dtoa_r+0x75c>
 10082ec:	01000044 	movi	r4,1
 10082f0:	d9000c15 	stw	r4,48(sp)
 10082f4:	bd85c83a 	sub	r2,r23,r22
 10082f8:	11bfffc4 	addi	r6,r2,-1
 10082fc:	30030b16 	blt	r6,zero,1008f2c <_dtoa_r+0xe7c>
 1008300:	d9800a15 	stw	r6,40(sp)
 1008304:	d8001115 	stw	zero,68(sp)
 1008308:	d8c00d17 	ldw	r3,52(sp)
 100830c:	1802ff16 	blt	r3,zero,1008f0c <_dtoa_r+0xe5c>
 1008310:	d9000a17 	ldw	r4,40(sp)
 1008314:	d8c00915 	stw	r3,36(sp)
 1008318:	d8001015 	stw	zero,64(sp)
 100831c:	20c9883a 	add	r4,r4,r3
 1008320:	d9000a15 	stw	r4,40(sp)
 1008324:	d9001717 	ldw	r4,92(sp)
 1008328:	00800244 	movi	r2,9
 100832c:	11004636 	bltu	r2,r4,1008448 <_dtoa_r+0x398>
 1008330:	00800144 	movi	r2,5
 1008334:	11020416 	blt	r2,r4,1008b48 <_dtoa_r+0xa98>
 1008338:	04400044 	movi	r17,1
 100833c:	d8c01717 	ldw	r3,92(sp)
 1008340:	00800144 	movi	r2,5
 1008344:	10c1ed36 	bltu	r2,r3,1008afc <_dtoa_r+0xa4c>
 1008348:	18c5883a 	add	r2,r3,r3
 100834c:	1085883a 	add	r2,r2,r2
 1008350:	00c04074 	movhi	r3,257
 1008354:	18e0d904 	addi	r3,r3,-31900
 1008358:	10c5883a 	add	r2,r2,r3
 100835c:	11000017 	ldw	r4,0(r2)
 1008360:	2000683a 	jmp	r4
 1008364:	01008450 	cmplti	r4,zero,529
 1008368:	01008450 	cmplti	r4,zero,529
 100836c:	01008e50 	cmplti	r4,zero,569
 1008370:	01008e28 	cmpgeui	r4,zero,568
 1008374:	01008e6c 	andhi	r4,zero,569
 1008378:	01008e78 	rdprs	r4,zero,569
 100837c:	d9002717 	ldw	r4,156(sp)
 1008380:	0089c3c4 	movi	r2,9999
 1008384:	20800015 	stw	r2,0(r4)
 1008388:	a0001026 	beq	r20,zero,10083cc <_dtoa_r+0x31c>
 100838c:	00c04074 	movhi	r3,257
 1008390:	18c70b04 	addi	r3,r3,7212
 1008394:	d9802917 	ldw	r6,164(sp)
 1008398:	303f7926 	beq	r6,zero,1008180 <_dtoa_r+0xd0>
 100839c:	188000c7 	ldb	r2,3(r3)
 10083a0:	190000c4 	addi	r4,r3,3
 10083a4:	1000101e 	bne	r2,zero,10083e8 <_dtoa_r+0x338>
 10083a8:	d8802917 	ldw	r2,164(sp)
 10083ac:	11000015 	stw	r4,0(r2)
 10083b0:	003f7306 	br	1008180 <_dtoa_r+0xd0>
 10083b4:	00a00034 	movhi	r2,32768
 10083b8:	10bfffc4 	addi	r2,r2,-1
 10083bc:	00c00044 	movi	r3,1
 10083c0:	88aa703a 	and	r21,r17,r2
 10083c4:	90c00015 	stw	r3,0(r18)
 10083c8:	003f5806 	br	100812c <_dtoa_r+0x7c>
 10083cc:	00800434 	movhi	r2,16
 10083d0:	10bfffc4 	addi	r2,r2,-1
 10083d4:	a884703a 	and	r2,r21,r2
 10083d8:	103fec1e 	bne	r2,zero,100838c <_dtoa_r+0x2dc>
 10083dc:	00c04074 	movhi	r3,257
 10083e0:	18c70804 	addi	r3,r3,7200
 10083e4:	003feb06 	br	1008394 <_dtoa_r+0x2e4>
 10083e8:	d8802917 	ldw	r2,164(sp)
 10083ec:	19000204 	addi	r4,r3,8
 10083f0:	11000015 	stw	r4,0(r2)
 10083f4:	003f6206 	br	1008180 <_dtoa_r+0xd0>
 10083f8:	ddc00117 	ldw	r23,4(sp)
 10083fc:	d8800217 	ldw	r2,8(sp)
 1008400:	01000804 	movi	r4,32
 1008404:	b8c10c84 	addi	r3,r23,1074
 1008408:	18a3883a 	add	r17,r3,r2
 100840c:	2441b80e 	bge	r4,r17,1008af0 <_dtoa_r+0xa40>
 1008410:	00c01004 	movi	r3,64
 1008414:	1c47c83a 	sub	r3,r3,r17
 1008418:	88bff804 	addi	r2,r17,-32
 100841c:	a8c6983a 	sll	r3,r21,r3
 1008420:	a084d83a 	srl	r2,r20,r2
 1008424:	1888b03a 	or	r4,r3,r2
 1008428:	100d8380 	call	100d838 <__floatunsidf>
 100842c:	1011883a 	mov	r8,r2
 1008430:	00bf8434 	movhi	r2,65040
 1008434:	01000044 	movi	r4,1
 1008438:	10d3883a 	add	r9,r2,r3
 100843c:	8dbef344 	addi	r22,r17,-1075
 1008440:	d9000815 	stw	r4,32(sp)
 1008444:	003f6f06 	br	1008204 <_dtoa_r+0x154>
 1008448:	d8001715 	stw	zero,92(sp)
 100844c:	04400044 	movi	r17,1
 1008450:	00bfffc4 	movi	r2,-1
 1008454:	00c00044 	movi	r3,1
 1008458:	d8800e15 	stw	r2,56(sp)
 100845c:	d8002615 	stw	zero,152(sp)
 1008460:	d8800f15 	stw	r2,60(sp)
 1008464:	d8c00b15 	stw	r3,44(sp)
 1008468:	1021883a 	mov	r16,r2
 100846c:	d8801617 	ldw	r2,88(sp)
 1008470:	10001115 	stw	zero,68(r2)
 1008474:	d8801617 	ldw	r2,88(sp)
 1008478:	11401117 	ldw	r5,68(r2)
 100847c:	1009883a 	mov	r4,r2
 1008480:	100a5300 	call	100a530 <_Balloc>
 1008484:	d8c01617 	ldw	r3,88(sp)
 1008488:	d8800515 	stw	r2,20(sp)
 100848c:	18801015 	stw	r2,64(r3)
 1008490:	00800384 	movi	r2,14
 1008494:	14006836 	bltu	r2,r16,1008638 <_dtoa_r+0x588>
 1008498:	8805003a 	cmpeq	r2,r17,zero
 100849c:	1000661e 	bne	r2,zero,1008638 <_dtoa_r+0x588>
 10084a0:	d9000d17 	ldw	r4,52(sp)
 10084a4:	0102300e 	bge	zero,r4,1008d68 <_dtoa_r+0xcb8>
 10084a8:	208003cc 	andi	r2,r4,15
 10084ac:	100490fa 	slli	r2,r2,3
 10084b0:	2025d13a 	srai	r18,r4,4
 10084b4:	00c04074 	movhi	r3,257
 10084b8:	18c71c04 	addi	r3,r3,7280
 10084bc:	10c5883a 	add	r2,r2,r3
 10084c0:	90c0040c 	andi	r3,r18,16
 10084c4:	14000017 	ldw	r16,0(r2)
 10084c8:	14400117 	ldw	r17,4(r2)
 10084cc:	18036a1e 	bne	r3,zero,1009278 <_dtoa_r+0x11c8>
 10084d0:	05800084 	movi	r22,2
 10084d4:	90001026 	beq	r18,zero,1008518 <_dtoa_r+0x468>
 10084d8:	04c04074 	movhi	r19,257
 10084dc:	9cc74e04 	addi	r19,r19,7480
 10084e0:	9080004c 	andi	r2,r18,1
 10084e4:	1005003a 	cmpeq	r2,r2,zero
 10084e8:	1000081e 	bne	r2,zero,100850c <_dtoa_r+0x45c>
 10084ec:	99800017 	ldw	r6,0(r19)
 10084f0:	99c00117 	ldw	r7,4(r19)
 10084f4:	880b883a 	mov	r5,r17
 10084f8:	8009883a 	mov	r4,r16
 10084fc:	100cda40 	call	100cda4 <__muldf3>
 1008500:	1021883a 	mov	r16,r2
 1008504:	b5800044 	addi	r22,r22,1
 1008508:	1823883a 	mov	r17,r3
 100850c:	9025d07a 	srai	r18,r18,1
 1008510:	9cc00204 	addi	r19,r19,8
 1008514:	903ff21e 	bne	r18,zero,10084e0 <_dtoa_r+0x430>
 1008518:	a80b883a 	mov	r5,r21
 100851c:	a009883a 	mov	r4,r20
 1008520:	880f883a 	mov	r7,r17
 1008524:	800d883a 	mov	r6,r16
 1008528:	100d1680 	call	100d168 <__divdf3>
 100852c:	1029883a 	mov	r20,r2
 1008530:	182b883a 	mov	r21,r3
 1008534:	d8c00c17 	ldw	r3,48(sp)
 1008538:	1805003a 	cmpeq	r2,r3,zero
 100853c:	1000081e 	bne	r2,zero,1008560 <_dtoa_r+0x4b0>
 1008540:	0005883a 	mov	r2,zero
 1008544:	00cffc34 	movhi	r3,16368
 1008548:	180f883a 	mov	r7,r3
 100854c:	a009883a 	mov	r4,r20
 1008550:	a80b883a 	mov	r5,r21
 1008554:	100d883a 	mov	r6,r2
 1008558:	100d5e00 	call	100d5e0 <__ltdf2>
 100855c:	1003fe16 	blt	r2,zero,1009558 <_dtoa_r+0x14a8>
 1008560:	b009883a 	mov	r4,r22
 1008564:	100d6680 	call	100d668 <__floatsidf>
 1008568:	180b883a 	mov	r5,r3
 100856c:	1009883a 	mov	r4,r2
 1008570:	a00d883a 	mov	r6,r20
 1008574:	a80f883a 	mov	r7,r21
 1008578:	100cda40 	call	100cda4 <__muldf3>
 100857c:	0011883a 	mov	r8,zero
 1008580:	02500734 	movhi	r9,16412
 1008584:	1009883a 	mov	r4,r2
 1008588:	180b883a 	mov	r5,r3
 100858c:	480f883a 	mov	r7,r9
 1008590:	400d883a 	mov	r6,r8
 1008594:	100cd300 	call	100cd30 <__adddf3>
 1008598:	d9000f17 	ldw	r4,60(sp)
 100859c:	102d883a 	mov	r22,r2
 10085a0:	00bf3034 	movhi	r2,64704
 10085a4:	18b9883a 	add	fp,r3,r2
 10085a8:	e02f883a 	mov	r23,fp
 10085ac:	20028f1e 	bne	r4,zero,1008fec <_dtoa_r+0xf3c>
 10085b0:	0005883a 	mov	r2,zero
 10085b4:	00d00534 	movhi	r3,16404
 10085b8:	a009883a 	mov	r4,r20
 10085bc:	a80b883a 	mov	r5,r21
 10085c0:	180f883a 	mov	r7,r3
 10085c4:	100d883a 	mov	r6,r2
 10085c8:	100ccb00 	call	100ccb0 <__subdf3>
 10085cc:	1009883a 	mov	r4,r2
 10085d0:	e00f883a 	mov	r7,fp
 10085d4:	180b883a 	mov	r5,r3
 10085d8:	b00d883a 	mov	r6,r22
 10085dc:	1025883a 	mov	r18,r2
 10085e0:	1827883a 	mov	r19,r3
 10085e4:	100d4d00 	call	100d4d0 <__gtdf2>
 10085e8:	00834f16 	blt	zero,r2,1009328 <_dtoa_r+0x1278>
 10085ec:	e0e0003c 	xorhi	r3,fp,32768
 10085f0:	9009883a 	mov	r4,r18
 10085f4:	980b883a 	mov	r5,r19
 10085f8:	180f883a 	mov	r7,r3
 10085fc:	b00d883a 	mov	r6,r22
 1008600:	100d5e00 	call	100d5e0 <__ltdf2>
 1008604:	1000080e 	bge	r2,zero,1008628 <_dtoa_r+0x578>
 1008608:	0027883a 	mov	r19,zero
 100860c:	0025883a 	mov	r18,zero
 1008610:	d8802617 	ldw	r2,152(sp)
 1008614:	df000517 	ldw	fp,20(sp)
 1008618:	d8000615 	stw	zero,24(sp)
 100861c:	0084303a 	nor	r2,zero,r2
 1008620:	d8800d15 	stw	r2,52(sp)
 1008624:	00019b06 	br	1008c94 <_dtoa_r+0xbe4>
 1008628:	d9801217 	ldw	r6,72(sp)
 100862c:	d8801317 	ldw	r2,76(sp)
 1008630:	3029883a 	mov	r20,r6
 1008634:	102b883a 	mov	r21,r2
 1008638:	d8c00217 	ldw	r3,8(sp)
 100863c:	18008516 	blt	r3,zero,1008854 <_dtoa_r+0x7a4>
 1008640:	d9000d17 	ldw	r4,52(sp)
 1008644:	00800384 	movi	r2,14
 1008648:	11008216 	blt	r2,r4,1008854 <_dtoa_r+0x7a4>
 100864c:	200490fa 	slli	r2,r4,3
 1008650:	d9802617 	ldw	r6,152(sp)
 1008654:	00c04074 	movhi	r3,257
 1008658:	18c71c04 	addi	r3,r3,7280
 100865c:	10c5883a 	add	r2,r2,r3
 1008660:	14800017 	ldw	r18,0(r2)
 1008664:	14c00117 	ldw	r19,4(r2)
 1008668:	30031e16 	blt	r6,zero,10092e4 <_dtoa_r+0x1234>
 100866c:	d9000517 	ldw	r4,20(sp)
 1008670:	d8c00f17 	ldw	r3,60(sp)
 1008674:	a823883a 	mov	r17,r21
 1008678:	a021883a 	mov	r16,r20
 100867c:	192b883a 	add	r21,r3,r4
 1008680:	2039883a 	mov	fp,r4
 1008684:	00000f06 	br	10086c4 <_dtoa_r+0x614>
 1008688:	0005883a 	mov	r2,zero
 100868c:	00d00934 	movhi	r3,16420
 1008690:	5009883a 	mov	r4,r10
 1008694:	580b883a 	mov	r5,r11
 1008698:	180f883a 	mov	r7,r3
 100869c:	100d883a 	mov	r6,r2
 10086a0:	100cda40 	call	100cda4 <__muldf3>
 10086a4:	180b883a 	mov	r5,r3
 10086a8:	000d883a 	mov	r6,zero
 10086ac:	000f883a 	mov	r7,zero
 10086b0:	1009883a 	mov	r4,r2
 10086b4:	1021883a 	mov	r16,r2
 10086b8:	1823883a 	mov	r17,r3
 10086bc:	100d4480 	call	100d448 <__nedf2>
 10086c0:	10004526 	beq	r2,zero,10087d8 <_dtoa_r+0x728>
 10086c4:	900d883a 	mov	r6,r18
 10086c8:	980f883a 	mov	r7,r19
 10086cc:	8009883a 	mov	r4,r16
 10086d0:	880b883a 	mov	r5,r17
 10086d4:	100d1680 	call	100d168 <__divdf3>
 10086d8:	180b883a 	mov	r5,r3
 10086dc:	1009883a 	mov	r4,r2
 10086e0:	100d7600 	call	100d760 <__fixdfsi>
 10086e4:	1009883a 	mov	r4,r2
 10086e8:	1029883a 	mov	r20,r2
 10086ec:	100d6680 	call	100d668 <__floatsidf>
 10086f0:	180f883a 	mov	r7,r3
 10086f4:	9009883a 	mov	r4,r18
 10086f8:	980b883a 	mov	r5,r19
 10086fc:	100d883a 	mov	r6,r2
 1008700:	100cda40 	call	100cda4 <__muldf3>
 1008704:	180f883a 	mov	r7,r3
 1008708:	880b883a 	mov	r5,r17
 100870c:	8009883a 	mov	r4,r16
 1008710:	100d883a 	mov	r6,r2
 1008714:	100ccb00 	call	100ccb0 <__subdf3>
 1008718:	1015883a 	mov	r10,r2
 100871c:	a0800c04 	addi	r2,r20,48
 1008720:	e0800005 	stb	r2,0(fp)
 1008724:	e7000044 	addi	fp,fp,1
 1008728:	1817883a 	mov	r11,r3
 100872c:	e57fd61e 	bne	fp,r21,1008688 <_dtoa_r+0x5d8>
 1008730:	500d883a 	mov	r6,r10
 1008734:	180f883a 	mov	r7,r3
 1008738:	5009883a 	mov	r4,r10
 100873c:	180b883a 	mov	r5,r3
 1008740:	100cd300 	call	100cd30 <__adddf3>
 1008744:	100d883a 	mov	r6,r2
 1008748:	9009883a 	mov	r4,r18
 100874c:	980b883a 	mov	r5,r19
 1008750:	180f883a 	mov	r7,r3
 1008754:	1021883a 	mov	r16,r2
 1008758:	1823883a 	mov	r17,r3
 100875c:	100d5e00 	call	100d5e0 <__ltdf2>
 1008760:	10000816 	blt	r2,zero,1008784 <_dtoa_r+0x6d4>
 1008764:	980b883a 	mov	r5,r19
 1008768:	800d883a 	mov	r6,r16
 100876c:	880f883a 	mov	r7,r17
 1008770:	9009883a 	mov	r4,r18
 1008774:	100d3c00 	call	100d3c0 <__eqdf2>
 1008778:	1000171e 	bne	r2,zero,10087d8 <_dtoa_r+0x728>
 100877c:	a080004c 	andi	r2,r20,1
 1008780:	10001526 	beq	r2,zero,10087d8 <_dtoa_r+0x728>
 1008784:	d8800d17 	ldw	r2,52(sp)
 1008788:	d8800415 	stw	r2,16(sp)
 100878c:	e009883a 	mov	r4,fp
 1008790:	213fffc4 	addi	r4,r4,-1
 1008794:	20c00007 	ldb	r3,0(r4)
 1008798:	00800e44 	movi	r2,57
 100879c:	1880081e 	bne	r3,r2,10087c0 <_dtoa_r+0x710>
 10087a0:	d8800517 	ldw	r2,20(sp)
 10087a4:	113ffa1e 	bne	r2,r4,1008790 <_dtoa_r+0x6e0>
 10087a8:	d8c00417 	ldw	r3,16(sp)
 10087ac:	d9800517 	ldw	r6,20(sp)
 10087b0:	00800c04 	movi	r2,48
 10087b4:	18c00044 	addi	r3,r3,1
 10087b8:	d8c00415 	stw	r3,16(sp)
 10087bc:	30800005 	stb	r2,0(r6)
 10087c0:	20800003 	ldbu	r2,0(r4)
 10087c4:	d8c00417 	ldw	r3,16(sp)
 10087c8:	27000044 	addi	fp,r4,1
 10087cc:	10800044 	addi	r2,r2,1
 10087d0:	d8c00d15 	stw	r3,52(sp)
 10087d4:	20800005 	stb	r2,0(r4)
 10087d8:	d9001617 	ldw	r4,88(sp)
 10087dc:	d9400717 	ldw	r5,28(sp)
 10087e0:	1009fb00 	call	1009fb0 <_Bfree>
 10087e4:	e0000005 	stb	zero,0(fp)
 10087e8:	d9800d17 	ldw	r6,52(sp)
 10087ec:	d8c02717 	ldw	r3,156(sp)
 10087f0:	d9002917 	ldw	r4,164(sp)
 10087f4:	30800044 	addi	r2,r6,1
 10087f8:	18800015 	stw	r2,0(r3)
 10087fc:	20029c26 	beq	r4,zero,1009270 <_dtoa_r+0x11c0>
 1008800:	d8c00517 	ldw	r3,20(sp)
 1008804:	27000015 	stw	fp,0(r4)
 1008808:	003e5d06 	br	1008180 <_dtoa_r+0xd0>
 100880c:	d9800d17 	ldw	r6,52(sp)
 1008810:	00c04074 	movhi	r3,257
 1008814:	18c71c04 	addi	r3,r3,7280
 1008818:	d9001217 	ldw	r4,72(sp)
 100881c:	300490fa 	slli	r2,r6,3
 1008820:	d9401317 	ldw	r5,76(sp)
 1008824:	10c5883a 	add	r2,r2,r3
 1008828:	12000017 	ldw	r8,0(r2)
 100882c:	12400117 	ldw	r9,4(r2)
 1008830:	400d883a 	mov	r6,r8
 1008834:	480f883a 	mov	r7,r9
 1008838:	100d5e00 	call	100d5e0 <__ltdf2>
 100883c:	1000030e 	bge	r2,zero,100884c <_dtoa_r+0x79c>
 1008840:	d8800d17 	ldw	r2,52(sp)
 1008844:	10bfffc4 	addi	r2,r2,-1
 1008848:	d8800d15 	stw	r2,52(sp)
 100884c:	d8000c15 	stw	zero,48(sp)
 1008850:	003ea806 	br	10082f4 <_dtoa_r+0x244>
 1008854:	d9000b17 	ldw	r4,44(sp)
 1008858:	202cc03a 	cmpne	r22,r4,zero
 100885c:	b000c71e 	bne	r22,zero,1008b7c <_dtoa_r+0xacc>
 1008860:	dc001117 	ldw	r16,68(sp)
 1008864:	dc801017 	ldw	r18,64(sp)
 1008868:	0027883a 	mov	r19,zero
 100886c:	04000b0e 	bge	zero,r16,100889c <_dtoa_r+0x7ec>
 1008870:	d8c00a17 	ldw	r3,40(sp)
 1008874:	00c0090e 	bge	zero,r3,100889c <_dtoa_r+0x7ec>
 1008878:	8005883a 	mov	r2,r16
 100887c:	1c011316 	blt	r3,r16,1008ccc <_dtoa_r+0xc1c>
 1008880:	d9000a17 	ldw	r4,40(sp)
 1008884:	d9801117 	ldw	r6,68(sp)
 1008888:	80a1c83a 	sub	r16,r16,r2
 100888c:	2089c83a 	sub	r4,r4,r2
 1008890:	308dc83a 	sub	r6,r6,r2
 1008894:	d9000a15 	stw	r4,40(sp)
 1008898:	d9801115 	stw	r6,68(sp)
 100889c:	d8801017 	ldw	r2,64(sp)
 10088a0:	0080150e 	bge	zero,r2,10088f8 <_dtoa_r+0x848>
 10088a4:	d8c00b17 	ldw	r3,44(sp)
 10088a8:	1805003a 	cmpeq	r2,r3,zero
 10088ac:	1001c91e 	bne	r2,zero,1008fd4 <_dtoa_r+0xf24>
 10088b0:	04800e0e 	bge	zero,r18,10088ec <_dtoa_r+0x83c>
 10088b4:	d9001617 	ldw	r4,88(sp)
 10088b8:	980b883a 	mov	r5,r19
 10088bc:	900d883a 	mov	r6,r18
 10088c0:	100adfc0 	call	100adfc <__pow5mult>
 10088c4:	d9001617 	ldw	r4,88(sp)
 10088c8:	d9800717 	ldw	r6,28(sp)
 10088cc:	100b883a 	mov	r5,r2
 10088d0:	1027883a 	mov	r19,r2
 10088d4:	100aa400 	call	100aa40 <__multiply>
 10088d8:	d9001617 	ldw	r4,88(sp)
 10088dc:	d9400717 	ldw	r5,28(sp)
 10088e0:	1023883a 	mov	r17,r2
 10088e4:	1009fb00 	call	1009fb0 <_Bfree>
 10088e8:	dc400715 	stw	r17,28(sp)
 10088ec:	d9001017 	ldw	r4,64(sp)
 10088f0:	248dc83a 	sub	r6,r4,r18
 10088f4:	30010e1e 	bne	r6,zero,1008d30 <_dtoa_r+0xc80>
 10088f8:	d9001617 	ldw	r4,88(sp)
 10088fc:	04400044 	movi	r17,1
 1008900:	880b883a 	mov	r5,r17
 1008904:	100ac940 	call	100ac94 <__i2b>
 1008908:	d9800917 	ldw	r6,36(sp)
 100890c:	1025883a 	mov	r18,r2
 1008910:	0180040e 	bge	zero,r6,1008924 <_dtoa_r+0x874>
 1008914:	d9001617 	ldw	r4,88(sp)
 1008918:	100b883a 	mov	r5,r2
 100891c:	100adfc0 	call	100adfc <__pow5mult>
 1008920:	1025883a 	mov	r18,r2
 1008924:	d8801717 	ldw	r2,92(sp)
 1008928:	8880f30e 	bge	r17,r2,1008cf8 <_dtoa_r+0xc48>
 100892c:	0023883a 	mov	r17,zero
 1008930:	d9800917 	ldw	r6,36(sp)
 1008934:	30019e1e 	bne	r6,zero,1008fb0 <_dtoa_r+0xf00>
 1008938:	00c00044 	movi	r3,1
 100893c:	d9000a17 	ldw	r4,40(sp)
 1008940:	20c5883a 	add	r2,r4,r3
 1008944:	10c007cc 	andi	r3,r2,31
 1008948:	1800841e 	bne	r3,zero,1008b5c <_dtoa_r+0xaac>
 100894c:	00800704 	movi	r2,28
 1008950:	d9000a17 	ldw	r4,40(sp)
 1008954:	d9801117 	ldw	r6,68(sp)
 1008958:	80a1883a 	add	r16,r16,r2
 100895c:	2089883a 	add	r4,r4,r2
 1008960:	308d883a 	add	r6,r6,r2
 1008964:	d9000a15 	stw	r4,40(sp)
 1008968:	d9801115 	stw	r6,68(sp)
 100896c:	d8801117 	ldw	r2,68(sp)
 1008970:	0080050e 	bge	zero,r2,1008988 <_dtoa_r+0x8d8>
 1008974:	d9400717 	ldw	r5,28(sp)
 1008978:	d9001617 	ldw	r4,88(sp)
 100897c:	100d883a 	mov	r6,r2
 1008980:	100a8f40 	call	100a8f4 <__lshift>
 1008984:	d8800715 	stw	r2,28(sp)
 1008988:	d8c00a17 	ldw	r3,40(sp)
 100898c:	00c0050e 	bge	zero,r3,10089a4 <_dtoa_r+0x8f4>
 1008990:	d9001617 	ldw	r4,88(sp)
 1008994:	900b883a 	mov	r5,r18
 1008998:	180d883a 	mov	r6,r3
 100899c:	100a8f40 	call	100a8f4 <__lshift>
 10089a0:	1025883a 	mov	r18,r2
 10089a4:	d9000c17 	ldw	r4,48(sp)
 10089a8:	2005003a 	cmpeq	r2,r4,zero
 10089ac:	10016f26 	beq	r2,zero,1008f6c <_dtoa_r+0xebc>
 10089b0:	d9000f17 	ldw	r4,60(sp)
 10089b4:	0102170e 	bge	zero,r4,1009214 <_dtoa_r+0x1164>
 10089b8:	d9800b17 	ldw	r6,44(sp)
 10089bc:	3005003a 	cmpeq	r2,r6,zero
 10089c0:	1000881e 	bne	r2,zero,1008be4 <_dtoa_r+0xb34>
 10089c4:	0400050e 	bge	zero,r16,10089dc <_dtoa_r+0x92c>
 10089c8:	d9001617 	ldw	r4,88(sp)
 10089cc:	980b883a 	mov	r5,r19
 10089d0:	800d883a 	mov	r6,r16
 10089d4:	100a8f40 	call	100a8f4 <__lshift>
 10089d8:	1027883a 	mov	r19,r2
 10089dc:	8804c03a 	cmpne	r2,r17,zero
 10089e0:	1002541e 	bne	r2,zero,1009334 <_dtoa_r+0x1284>
 10089e4:	980b883a 	mov	r5,r19
 10089e8:	dd800517 	ldw	r22,20(sp)
 10089ec:	dcc00615 	stw	r19,24(sp)
 10089f0:	a700004c 	andi	fp,r20,1
 10089f4:	2827883a 	mov	r19,r5
 10089f8:	d9000717 	ldw	r4,28(sp)
 10089fc:	900b883a 	mov	r5,r18
 1008a00:	1007e6c0 	call	1007e6c <quorem>
 1008a04:	d9000717 	ldw	r4,28(sp)
 1008a08:	d9400617 	ldw	r5,24(sp)
 1008a0c:	1023883a 	mov	r17,r2
 1008a10:	8dc00c04 	addi	r23,r17,48
 1008a14:	100a10c0 	call	100a10c <__mcmp>
 1008a18:	d9001617 	ldw	r4,88(sp)
 1008a1c:	900b883a 	mov	r5,r18
 1008a20:	980d883a 	mov	r6,r19
 1008a24:	1029883a 	mov	r20,r2
 1008a28:	100a7680 	call	100a768 <__mdiff>
 1008a2c:	102b883a 	mov	r21,r2
 1008a30:	10800317 	ldw	r2,12(r2)
 1008a34:	1001281e 	bne	r2,zero,1008ed8 <_dtoa_r+0xe28>
 1008a38:	d9000717 	ldw	r4,28(sp)
 1008a3c:	a80b883a 	mov	r5,r21
 1008a40:	100a10c0 	call	100a10c <__mcmp>
 1008a44:	d9001617 	ldw	r4,88(sp)
 1008a48:	1021883a 	mov	r16,r2
 1008a4c:	a80b883a 	mov	r5,r21
 1008a50:	1009fb00 	call	1009fb0 <_Bfree>
 1008a54:	8000041e 	bne	r16,zero,1008a68 <_dtoa_r+0x9b8>
 1008a58:	d8801717 	ldw	r2,92(sp)
 1008a5c:	1000021e 	bne	r2,zero,1008a68 <_dtoa_r+0x9b8>
 1008a60:	e004c03a 	cmpne	r2,fp,zero
 1008a64:	10011726 	beq	r2,zero,1008ec4 <_dtoa_r+0xe14>
 1008a68:	a0010616 	blt	r20,zero,1008e84 <_dtoa_r+0xdd4>
 1008a6c:	a000041e 	bne	r20,zero,1008a80 <_dtoa_r+0x9d0>
 1008a70:	d8c01717 	ldw	r3,92(sp)
 1008a74:	1800021e 	bne	r3,zero,1008a80 <_dtoa_r+0x9d0>
 1008a78:	e004c03a 	cmpne	r2,fp,zero
 1008a7c:	10010126 	beq	r2,zero,1008e84 <_dtoa_r+0xdd4>
 1008a80:	04023d16 	blt	zero,r16,1009378 <_dtoa_r+0x12c8>
 1008a84:	b5c00005 	stb	r23,0(r22)
 1008a88:	d9800517 	ldw	r6,20(sp)
 1008a8c:	d9000f17 	ldw	r4,60(sp)
 1008a90:	b5800044 	addi	r22,r22,1
 1008a94:	3105883a 	add	r2,r6,r4
 1008a98:	b0806526 	beq	r22,r2,1008c30 <_dtoa_r+0xb80>
 1008a9c:	d9400717 	ldw	r5,28(sp)
 1008aa0:	d9001617 	ldw	r4,88(sp)
 1008aa4:	01800284 	movi	r6,10
 1008aa8:	000f883a 	mov	r7,zero
 1008aac:	100acd00 	call	100acd0 <__multadd>
 1008ab0:	d8800715 	stw	r2,28(sp)
 1008ab4:	d8800617 	ldw	r2,24(sp)
 1008ab8:	14c10c26 	beq	r2,r19,1008eec <_dtoa_r+0xe3c>
 1008abc:	d9400617 	ldw	r5,24(sp)
 1008ac0:	d9001617 	ldw	r4,88(sp)
 1008ac4:	01800284 	movi	r6,10
 1008ac8:	000f883a 	mov	r7,zero
 1008acc:	100acd00 	call	100acd0 <__multadd>
 1008ad0:	d9001617 	ldw	r4,88(sp)
 1008ad4:	980b883a 	mov	r5,r19
 1008ad8:	01800284 	movi	r6,10
 1008adc:	000f883a 	mov	r7,zero
 1008ae0:	d8800615 	stw	r2,24(sp)
 1008ae4:	100acd00 	call	100acd0 <__multadd>
 1008ae8:	1027883a 	mov	r19,r2
 1008aec:	003fc206 	br	10089f8 <_dtoa_r+0x948>
 1008af0:	2445c83a 	sub	r2,r4,r17
 1008af4:	a088983a 	sll	r4,r20,r2
 1008af8:	003e4b06 	br	1008428 <_dtoa_r+0x378>
 1008afc:	01bfffc4 	movi	r6,-1
 1008b00:	00800044 	movi	r2,1
 1008b04:	d9800e15 	stw	r6,56(sp)
 1008b08:	d9800f15 	stw	r6,60(sp)
 1008b0c:	d8800b15 	stw	r2,44(sp)
 1008b10:	d8c01617 	ldw	r3,88(sp)
 1008b14:	008005c4 	movi	r2,23
 1008b18:	18001115 	stw	zero,68(r3)
 1008b1c:	1580082e 	bgeu	r2,r22,1008b40 <_dtoa_r+0xa90>
 1008b20:	00c00104 	movi	r3,4
 1008b24:	0009883a 	mov	r4,zero
 1008b28:	18c7883a 	add	r3,r3,r3
 1008b2c:	18800504 	addi	r2,r3,20
 1008b30:	21000044 	addi	r4,r4,1
 1008b34:	b0bffc2e 	bgeu	r22,r2,1008b28 <_dtoa_r+0xa78>
 1008b38:	d9801617 	ldw	r6,88(sp)
 1008b3c:	31001115 	stw	r4,68(r6)
 1008b40:	dc000f17 	ldw	r16,60(sp)
 1008b44:	003e4b06 	br	1008474 <_dtoa_r+0x3c4>
 1008b48:	d9801717 	ldw	r6,92(sp)
 1008b4c:	0023883a 	mov	r17,zero
 1008b50:	31bfff04 	addi	r6,r6,-4
 1008b54:	d9801715 	stw	r6,92(sp)
 1008b58:	003df806 	br	100833c <_dtoa_r+0x28c>
 1008b5c:	00800804 	movi	r2,32
 1008b60:	10c9c83a 	sub	r4,r2,r3
 1008b64:	00c00104 	movi	r3,4
 1008b68:	19005a16 	blt	r3,r4,1008cd4 <_dtoa_r+0xc24>
 1008b6c:	008000c4 	movi	r2,3
 1008b70:	113f7e16 	blt	r2,r4,100896c <_dtoa_r+0x8bc>
 1008b74:	20800704 	addi	r2,r4,28
 1008b78:	003f7506 	br	1008950 <_dtoa_r+0x8a0>
 1008b7c:	d9801717 	ldw	r6,92(sp)
 1008b80:	00800044 	movi	r2,1
 1008b84:	1180a10e 	bge	r2,r6,1008e0c <_dtoa_r+0xd5c>
 1008b88:	d9800f17 	ldw	r6,60(sp)
 1008b8c:	d8c01017 	ldw	r3,64(sp)
 1008b90:	30bfffc4 	addi	r2,r6,-1
 1008b94:	1881c616 	blt	r3,r2,10092b0 <_dtoa_r+0x1200>
 1008b98:	18a5c83a 	sub	r18,r3,r2
 1008b9c:	d8800f17 	ldw	r2,60(sp)
 1008ba0:	10026216 	blt	r2,zero,100952c <_dtoa_r+0x147c>
 1008ba4:	dc001117 	ldw	r16,68(sp)
 1008ba8:	1007883a 	mov	r3,r2
 1008bac:	d9800a17 	ldw	r6,40(sp)
 1008bb0:	d8801117 	ldw	r2,68(sp)
 1008bb4:	d9001617 	ldw	r4,88(sp)
 1008bb8:	30cd883a 	add	r6,r6,r3
 1008bbc:	10c5883a 	add	r2,r2,r3
 1008bc0:	01400044 	movi	r5,1
 1008bc4:	d9800a15 	stw	r6,40(sp)
 1008bc8:	d8801115 	stw	r2,68(sp)
 1008bcc:	100ac940 	call	100ac94 <__i2b>
 1008bd0:	1027883a 	mov	r19,r2
 1008bd4:	003f2506 	br	100886c <_dtoa_r+0x7bc>
 1008bd8:	00c04074 	movhi	r3,257
 1008bdc:	18c6ff04 	addi	r3,r3,7164
 1008be0:	003d6706 	br	1008180 <_dtoa_r+0xd0>
 1008be4:	dd800517 	ldw	r22,20(sp)
 1008be8:	04000044 	movi	r16,1
 1008bec:	00000706 	br	1008c0c <_dtoa_r+0xb5c>
 1008bf0:	d9400717 	ldw	r5,28(sp)
 1008bf4:	d9001617 	ldw	r4,88(sp)
 1008bf8:	01800284 	movi	r6,10
 1008bfc:	000f883a 	mov	r7,zero
 1008c00:	100acd00 	call	100acd0 <__multadd>
 1008c04:	d8800715 	stw	r2,28(sp)
 1008c08:	84000044 	addi	r16,r16,1
 1008c0c:	d9000717 	ldw	r4,28(sp)
 1008c10:	900b883a 	mov	r5,r18
 1008c14:	1007e6c0 	call	1007e6c <quorem>
 1008c18:	15c00c04 	addi	r23,r2,48
 1008c1c:	b5c00005 	stb	r23,0(r22)
 1008c20:	d8c00f17 	ldw	r3,60(sp)
 1008c24:	b5800044 	addi	r22,r22,1
 1008c28:	80fff116 	blt	r16,r3,1008bf0 <_dtoa_r+0xb40>
 1008c2c:	d8000615 	stw	zero,24(sp)
 1008c30:	d9400717 	ldw	r5,28(sp)
 1008c34:	d9001617 	ldw	r4,88(sp)
 1008c38:	01800044 	movi	r6,1
 1008c3c:	100a8f40 	call	100a8f4 <__lshift>
 1008c40:	1009883a 	mov	r4,r2
 1008c44:	900b883a 	mov	r5,r18
 1008c48:	d8800715 	stw	r2,28(sp)
 1008c4c:	100a10c0 	call	100a10c <__mcmp>
 1008c50:	00803c0e 	bge	zero,r2,1008d44 <_dtoa_r+0xc94>
 1008c54:	b009883a 	mov	r4,r22
 1008c58:	213fffc4 	addi	r4,r4,-1
 1008c5c:	21400003 	ldbu	r5,0(r4)
 1008c60:	00800e44 	movi	r2,57
 1008c64:	28c03fcc 	andi	r3,r5,255
 1008c68:	18c0201c 	xori	r3,r3,128
 1008c6c:	18ffe004 	addi	r3,r3,-128
 1008c70:	1881981e 	bne	r3,r2,10092d4 <_dtoa_r+0x1224>
 1008c74:	d9800517 	ldw	r6,20(sp)
 1008c78:	21bff71e 	bne	r4,r6,1008c58 <_dtoa_r+0xba8>
 1008c7c:	d8800d17 	ldw	r2,52(sp)
 1008c80:	37000044 	addi	fp,r6,1
 1008c84:	10800044 	addi	r2,r2,1
 1008c88:	d8800d15 	stw	r2,52(sp)
 1008c8c:	00800c44 	movi	r2,49
 1008c90:	30800005 	stb	r2,0(r6)
 1008c94:	d9001617 	ldw	r4,88(sp)
 1008c98:	900b883a 	mov	r5,r18
 1008c9c:	1009fb00 	call	1009fb0 <_Bfree>
 1008ca0:	983ecd26 	beq	r19,zero,10087d8 <_dtoa_r+0x728>
 1008ca4:	d8c00617 	ldw	r3,24(sp)
 1008ca8:	18000426 	beq	r3,zero,1008cbc <_dtoa_r+0xc0c>
 1008cac:	1cc00326 	beq	r3,r19,1008cbc <_dtoa_r+0xc0c>
 1008cb0:	d9001617 	ldw	r4,88(sp)
 1008cb4:	180b883a 	mov	r5,r3
 1008cb8:	1009fb00 	call	1009fb0 <_Bfree>
 1008cbc:	d9001617 	ldw	r4,88(sp)
 1008cc0:	980b883a 	mov	r5,r19
 1008cc4:	1009fb00 	call	1009fb0 <_Bfree>
 1008cc8:	003ec306 	br	10087d8 <_dtoa_r+0x728>
 1008ccc:	1805883a 	mov	r2,r3
 1008cd0:	003eeb06 	br	1008880 <_dtoa_r+0x7d0>
 1008cd4:	d9800a17 	ldw	r6,40(sp)
 1008cd8:	d8c01117 	ldw	r3,68(sp)
 1008cdc:	20bfff04 	addi	r2,r4,-4
 1008ce0:	308d883a 	add	r6,r6,r2
 1008ce4:	1887883a 	add	r3,r3,r2
 1008ce8:	80a1883a 	add	r16,r16,r2
 1008cec:	d9800a15 	stw	r6,40(sp)
 1008cf0:	d8c01115 	stw	r3,68(sp)
 1008cf4:	003f1d06 	br	100896c <_dtoa_r+0x8bc>
 1008cf8:	a03f0c1e 	bne	r20,zero,100892c <_dtoa_r+0x87c>
 1008cfc:	00800434 	movhi	r2,16
 1008d00:	10bfffc4 	addi	r2,r2,-1
 1008d04:	a884703a 	and	r2,r21,r2
 1008d08:	103f081e 	bne	r2,zero,100892c <_dtoa_r+0x87c>
 1008d0c:	a89ffc2c 	andhi	r2,r21,32752
 1008d10:	103f0626 	beq	r2,zero,100892c <_dtoa_r+0x87c>
 1008d14:	d8c01117 	ldw	r3,68(sp)
 1008d18:	d9000a17 	ldw	r4,40(sp)
 1008d1c:	18c00044 	addi	r3,r3,1
 1008d20:	21000044 	addi	r4,r4,1
 1008d24:	d8c01115 	stw	r3,68(sp)
 1008d28:	d9000a15 	stw	r4,40(sp)
 1008d2c:	003f0006 	br	1008930 <_dtoa_r+0x880>
 1008d30:	d9400717 	ldw	r5,28(sp)
 1008d34:	d9001617 	ldw	r4,88(sp)
 1008d38:	100adfc0 	call	100adfc <__pow5mult>
 1008d3c:	d8800715 	stw	r2,28(sp)
 1008d40:	003eed06 	br	10088f8 <_dtoa_r+0x848>
 1008d44:	1000021e 	bne	r2,zero,1008d50 <_dtoa_r+0xca0>
 1008d48:	b880004c 	andi	r2,r23,1
 1008d4c:	103fc11e 	bne	r2,zero,1008c54 <_dtoa_r+0xba4>
 1008d50:	b5bfffc4 	addi	r22,r22,-1
 1008d54:	b0c00007 	ldb	r3,0(r22)
 1008d58:	00800c04 	movi	r2,48
 1008d5c:	18bffc26 	beq	r3,r2,1008d50 <_dtoa_r+0xca0>
 1008d60:	b7000044 	addi	fp,r22,1
 1008d64:	003fcb06 	br	1008c94 <_dtoa_r+0xbe4>
 1008d68:	d9800d17 	ldw	r6,52(sp)
 1008d6c:	018fc83a 	sub	r7,zero,r6
 1008d70:	3801f726 	beq	r7,zero,1009550 <_dtoa_r+0x14a0>
 1008d74:	398003cc 	andi	r6,r7,15
 1008d78:	300c90fa 	slli	r6,r6,3
 1008d7c:	01404074 	movhi	r5,257
 1008d80:	29471c04 	addi	r5,r5,7280
 1008d84:	d9001217 	ldw	r4,72(sp)
 1008d88:	314d883a 	add	r6,r6,r5
 1008d8c:	30c00117 	ldw	r3,4(r6)
 1008d90:	30800017 	ldw	r2,0(r6)
 1008d94:	d9401317 	ldw	r5,76(sp)
 1008d98:	3821d13a 	srai	r16,r7,4
 1008d9c:	100d883a 	mov	r6,r2
 1008da0:	180f883a 	mov	r7,r3
 1008da4:	100cda40 	call	100cda4 <__muldf3>
 1008da8:	1011883a 	mov	r8,r2
 1008dac:	1813883a 	mov	r9,r3
 1008db0:	1029883a 	mov	r20,r2
 1008db4:	182b883a 	mov	r21,r3
 1008db8:	8001e526 	beq	r16,zero,1009550 <_dtoa_r+0x14a0>
 1008dbc:	05800084 	movi	r22,2
 1008dc0:	04404074 	movhi	r17,257
 1008dc4:	8c474e04 	addi	r17,r17,7480
 1008dc8:	8080004c 	andi	r2,r16,1
 1008dcc:	1005003a 	cmpeq	r2,r2,zero
 1008dd0:	1000081e 	bne	r2,zero,1008df4 <_dtoa_r+0xd44>
 1008dd4:	89800017 	ldw	r6,0(r17)
 1008dd8:	89c00117 	ldw	r7,4(r17)
 1008ddc:	480b883a 	mov	r5,r9
 1008de0:	4009883a 	mov	r4,r8
 1008de4:	100cda40 	call	100cda4 <__muldf3>
 1008de8:	1011883a 	mov	r8,r2
 1008dec:	b5800044 	addi	r22,r22,1
 1008df0:	1813883a 	mov	r9,r3
 1008df4:	8021d07a 	srai	r16,r16,1
 1008df8:	8c400204 	addi	r17,r17,8
 1008dfc:	803ff21e 	bne	r16,zero,1008dc8 <_dtoa_r+0xd18>
 1008e00:	4029883a 	mov	r20,r8
 1008e04:	482b883a 	mov	r21,r9
 1008e08:	003dca06 	br	1008534 <_dtoa_r+0x484>
 1008e0c:	d9000817 	ldw	r4,32(sp)
 1008e10:	2005003a 	cmpeq	r2,r4,zero
 1008e14:	1001f61e 	bne	r2,zero,10095f0 <_dtoa_r+0x1540>
 1008e18:	dc001117 	ldw	r16,68(sp)
 1008e1c:	dc801017 	ldw	r18,64(sp)
 1008e20:	18c10cc4 	addi	r3,r3,1075
 1008e24:	003f6106 	br	1008bac <_dtoa_r+0xafc>
 1008e28:	d8000b15 	stw	zero,44(sp)
 1008e2c:	d9802617 	ldw	r6,152(sp)
 1008e30:	d8c00d17 	ldw	r3,52(sp)
 1008e34:	30800044 	addi	r2,r6,1
 1008e38:	18ad883a 	add	r22,r3,r2
 1008e3c:	b13fffc4 	addi	r4,r22,-1
 1008e40:	d9000e15 	stw	r4,56(sp)
 1008e44:	0581f60e 	bge	zero,r22,1009620 <_dtoa_r+0x1570>
 1008e48:	dd800f15 	stw	r22,60(sp)
 1008e4c:	003f3006 	br	1008b10 <_dtoa_r+0xa60>
 1008e50:	d8000b15 	stw	zero,44(sp)
 1008e54:	d9002617 	ldw	r4,152(sp)
 1008e58:	0101eb0e 	bge	zero,r4,1009608 <_dtoa_r+0x1558>
 1008e5c:	202d883a 	mov	r22,r4
 1008e60:	d9000e15 	stw	r4,56(sp)
 1008e64:	d9000f15 	stw	r4,60(sp)
 1008e68:	003f2906 	br	1008b10 <_dtoa_r+0xa60>
 1008e6c:	01800044 	movi	r6,1
 1008e70:	d9800b15 	stw	r6,44(sp)
 1008e74:	003ff706 	br	1008e54 <_dtoa_r+0xda4>
 1008e78:	01000044 	movi	r4,1
 1008e7c:	d9000b15 	stw	r4,44(sp)
 1008e80:	003fea06 	br	1008e2c <_dtoa_r+0xd7c>
 1008e84:	04000c0e 	bge	zero,r16,1008eb8 <_dtoa_r+0xe08>
 1008e88:	d9400717 	ldw	r5,28(sp)
 1008e8c:	d9001617 	ldw	r4,88(sp)
 1008e90:	01800044 	movi	r6,1
 1008e94:	100a8f40 	call	100a8f4 <__lshift>
 1008e98:	1009883a 	mov	r4,r2
 1008e9c:	900b883a 	mov	r5,r18
 1008ea0:	d8800715 	stw	r2,28(sp)
 1008ea4:	100a10c0 	call	100a10c <__mcmp>
 1008ea8:	0081e00e 	bge	zero,r2,100962c <_dtoa_r+0x157c>
 1008eac:	bdc00044 	addi	r23,r23,1
 1008eb0:	00800e84 	movi	r2,58
 1008eb4:	b881a226 	beq	r23,r2,1009540 <_dtoa_r+0x1490>
 1008eb8:	b7000044 	addi	fp,r22,1
 1008ebc:	b5c00005 	stb	r23,0(r22)
 1008ec0:	003f7406 	br	1008c94 <_dtoa_r+0xbe4>
 1008ec4:	00800e44 	movi	r2,57
 1008ec8:	b8819d26 	beq	r23,r2,1009540 <_dtoa_r+0x1490>
 1008ecc:	053ffa0e 	bge	zero,r20,1008eb8 <_dtoa_r+0xe08>
 1008ed0:	8dc00c44 	addi	r23,r17,49
 1008ed4:	003ff806 	br	1008eb8 <_dtoa_r+0xe08>
 1008ed8:	d9001617 	ldw	r4,88(sp)
 1008edc:	a80b883a 	mov	r5,r21
 1008ee0:	04000044 	movi	r16,1
 1008ee4:	1009fb00 	call	1009fb0 <_Bfree>
 1008ee8:	003edf06 	br	1008a68 <_dtoa_r+0x9b8>
 1008eec:	d9001617 	ldw	r4,88(sp)
 1008ef0:	980b883a 	mov	r5,r19
 1008ef4:	01800284 	movi	r6,10
 1008ef8:	000f883a 	mov	r7,zero
 1008efc:	100acd00 	call	100acd0 <__multadd>
 1008f00:	1027883a 	mov	r19,r2
 1008f04:	d8800615 	stw	r2,24(sp)
 1008f08:	003ebb06 	br	10089f8 <_dtoa_r+0x948>
 1008f0c:	d9801117 	ldw	r6,68(sp)
 1008f10:	d8800d17 	ldw	r2,52(sp)
 1008f14:	d8000915 	stw	zero,36(sp)
 1008f18:	308dc83a 	sub	r6,r6,r2
 1008f1c:	0087c83a 	sub	r3,zero,r2
 1008f20:	d9801115 	stw	r6,68(sp)
 1008f24:	d8c01015 	stw	r3,64(sp)
 1008f28:	003cfe06 	br	1008324 <_dtoa_r+0x274>
 1008f2c:	018dc83a 	sub	r6,zero,r6
 1008f30:	d9801115 	stw	r6,68(sp)
 1008f34:	d8000a15 	stw	zero,40(sp)
 1008f38:	003cf306 	br	1008308 <_dtoa_r+0x258>
 1008f3c:	d9000d17 	ldw	r4,52(sp)
 1008f40:	100d6680 	call	100d668 <__floatsidf>
 1008f44:	880b883a 	mov	r5,r17
 1008f48:	8009883a 	mov	r4,r16
 1008f4c:	180f883a 	mov	r7,r3
 1008f50:	100d883a 	mov	r6,r2
 1008f54:	100d4480 	call	100d448 <__nedf2>
 1008f58:	103ce126 	beq	r2,zero,10082e0 <_dtoa_r+0x230>
 1008f5c:	d9800d17 	ldw	r6,52(sp)
 1008f60:	31bfffc4 	addi	r6,r6,-1
 1008f64:	d9800d15 	stw	r6,52(sp)
 1008f68:	003cdd06 	br	10082e0 <_dtoa_r+0x230>
 1008f6c:	d9000717 	ldw	r4,28(sp)
 1008f70:	900b883a 	mov	r5,r18
 1008f74:	100a10c0 	call	100a10c <__mcmp>
 1008f78:	103e8d0e 	bge	r2,zero,10089b0 <_dtoa_r+0x900>
 1008f7c:	d9400717 	ldw	r5,28(sp)
 1008f80:	d9001617 	ldw	r4,88(sp)
 1008f84:	01800284 	movi	r6,10
 1008f88:	000f883a 	mov	r7,zero
 1008f8c:	100acd00 	call	100acd0 <__multadd>
 1008f90:	d9800d17 	ldw	r6,52(sp)
 1008f94:	d8800715 	stw	r2,28(sp)
 1008f98:	31bfffc4 	addi	r6,r6,-1
 1008f9c:	d9800d15 	stw	r6,52(sp)
 1008fa0:	b001a71e 	bne	r22,zero,1009640 <_dtoa_r+0x1590>
 1008fa4:	d8800e17 	ldw	r2,56(sp)
 1008fa8:	d8800f15 	stw	r2,60(sp)
 1008fac:	003e8006 	br	10089b0 <_dtoa_r+0x900>
 1008fb0:	90800417 	ldw	r2,16(r18)
 1008fb4:	1085883a 	add	r2,r2,r2
 1008fb8:	1085883a 	add	r2,r2,r2
 1008fbc:	1485883a 	add	r2,r2,r18
 1008fc0:	11000417 	ldw	r4,16(r2)
 1008fc4:	1009fd80 	call	1009fd8 <__hi0bits>
 1008fc8:	00c00804 	movi	r3,32
 1008fcc:	1887c83a 	sub	r3,r3,r2
 1008fd0:	003e5a06 	br	100893c <_dtoa_r+0x88c>
 1008fd4:	d9400717 	ldw	r5,28(sp)
 1008fd8:	d9801017 	ldw	r6,64(sp)
 1008fdc:	d9001617 	ldw	r4,88(sp)
 1008fe0:	100adfc0 	call	100adfc <__pow5mult>
 1008fe4:	d8800715 	stw	r2,28(sp)
 1008fe8:	003e4306 	br	10088f8 <_dtoa_r+0x848>
 1008fec:	d9800f17 	ldw	r6,60(sp)
 1008ff0:	d8800d17 	ldw	r2,52(sp)
 1008ff4:	d9800315 	stw	r6,12(sp)
 1008ff8:	d8800415 	stw	r2,16(sp)
 1008ffc:	d8c00b17 	ldw	r3,44(sp)
 1009000:	1805003a 	cmpeq	r2,r3,zero
 1009004:	1000e21e 	bne	r2,zero,1009390 <_dtoa_r+0x12e0>
 1009008:	d9000317 	ldw	r4,12(sp)
 100900c:	0005883a 	mov	r2,zero
 1009010:	00cff834 	movhi	r3,16352
 1009014:	200c90fa 	slli	r6,r4,3
 1009018:	01004074 	movhi	r4,257
 100901c:	21071c04 	addi	r4,r4,7280
 1009020:	180b883a 	mov	r5,r3
 1009024:	310d883a 	add	r6,r6,r4
 1009028:	327fff17 	ldw	r9,-4(r6)
 100902c:	323ffe17 	ldw	r8,-8(r6)
 1009030:	1009883a 	mov	r4,r2
 1009034:	480f883a 	mov	r7,r9
 1009038:	400d883a 	mov	r6,r8
 100903c:	100d1680 	call	100d168 <__divdf3>
 1009040:	180b883a 	mov	r5,r3
 1009044:	b00d883a 	mov	r6,r22
 1009048:	b80f883a 	mov	r7,r23
 100904c:	1009883a 	mov	r4,r2
 1009050:	100ccb00 	call	100ccb0 <__subdf3>
 1009054:	a80b883a 	mov	r5,r21
 1009058:	a009883a 	mov	r4,r20
 100905c:	d8c01915 	stw	r3,100(sp)
 1009060:	d8801815 	stw	r2,96(sp)
 1009064:	100d7600 	call	100d760 <__fixdfsi>
 1009068:	1009883a 	mov	r4,r2
 100906c:	1027883a 	mov	r19,r2
 1009070:	100d6680 	call	100d668 <__floatsidf>
 1009074:	a80b883a 	mov	r5,r21
 1009078:	a009883a 	mov	r4,r20
 100907c:	180f883a 	mov	r7,r3
 1009080:	100d883a 	mov	r6,r2
 1009084:	100ccb00 	call	100ccb0 <__subdf3>
 1009088:	d9801817 	ldw	r6,96(sp)
 100908c:	1823883a 	mov	r17,r3
 1009090:	d8801415 	stw	r2,80(sp)
 1009094:	302d883a 	mov	r22,r6
 1009098:	d9800517 	ldw	r6,20(sp)
 100909c:	9cc00c04 	addi	r19,r19,48
 10090a0:	dc401515 	stw	r17,84(sp)
 10090a4:	d8c01917 	ldw	r3,100(sp)
 10090a8:	34c00005 	stb	r19,0(r6)
 10090ac:	d8800517 	ldw	r2,20(sp)
 10090b0:	d9401917 	ldw	r5,100(sp)
 10090b4:	d9801417 	ldw	r6,80(sp)
 10090b8:	b009883a 	mov	r4,r22
 10090bc:	880f883a 	mov	r7,r17
 10090c0:	182f883a 	mov	r23,r3
 10090c4:	17000044 	addi	fp,r2,1
 10090c8:	100d4d00 	call	100d4d0 <__gtdf2>
 10090cc:	00804e16 	blt	zero,r2,1009208 <_dtoa_r+0x1158>
 10090d0:	d9801417 	ldw	r6,80(sp)
 10090d4:	0005883a 	mov	r2,zero
 10090d8:	00cffc34 	movhi	r3,16368
 10090dc:	180b883a 	mov	r5,r3
 10090e0:	880f883a 	mov	r7,r17
 10090e4:	1009883a 	mov	r4,r2
 10090e8:	100ccb00 	call	100ccb0 <__subdf3>
 10090ec:	d9401917 	ldw	r5,100(sp)
 10090f0:	180f883a 	mov	r7,r3
 10090f4:	b009883a 	mov	r4,r22
 10090f8:	100d883a 	mov	r6,r2
 10090fc:	100d4d00 	call	100d4d0 <__gtdf2>
 1009100:	00bda216 	blt	zero,r2,100878c <_dtoa_r+0x6dc>
 1009104:	d8c00317 	ldw	r3,12(sp)
 1009108:	00800044 	movi	r2,1
 100910c:	10c01216 	blt	r2,r3,1009158 <_dtoa_r+0x10a8>
 1009110:	003d4506 	br	1008628 <_dtoa_r+0x578>
 1009114:	d9801417 	ldw	r6,80(sp)
 1009118:	0005883a 	mov	r2,zero
 100911c:	00cffc34 	movhi	r3,16368
 1009120:	180b883a 	mov	r5,r3
 1009124:	880f883a 	mov	r7,r17
 1009128:	1009883a 	mov	r4,r2
 100912c:	100ccb00 	call	100ccb0 <__subdf3>
 1009130:	d9c01b17 	ldw	r7,108(sp)
 1009134:	180b883a 	mov	r5,r3
 1009138:	1009883a 	mov	r4,r2
 100913c:	b00d883a 	mov	r6,r22
 1009140:	100d5e00 	call	100d5e0 <__ltdf2>
 1009144:	103d9116 	blt	r2,zero,100878c <_dtoa_r+0x6dc>
 1009148:	d9800517 	ldw	r6,20(sp)
 100914c:	d9000317 	ldw	r4,12(sp)
 1009150:	3105883a 	add	r2,r6,r4
 1009154:	e0bd3426 	beq	fp,r2,1008628 <_dtoa_r+0x578>
 1009158:	04500934 	movhi	r17,16420
 100915c:	0021883a 	mov	r16,zero
 1009160:	b80b883a 	mov	r5,r23
 1009164:	b009883a 	mov	r4,r22
 1009168:	800d883a 	mov	r6,r16
 100916c:	880f883a 	mov	r7,r17
 1009170:	100cda40 	call	100cda4 <__muldf3>
 1009174:	d9401517 	ldw	r5,84(sp)
 1009178:	d9001417 	ldw	r4,80(sp)
 100917c:	880f883a 	mov	r7,r17
 1009180:	000d883a 	mov	r6,zero
 1009184:	d8801a15 	stw	r2,104(sp)
 1009188:	d8c01b15 	stw	r3,108(sp)
 100918c:	100cda40 	call	100cda4 <__muldf3>
 1009190:	180b883a 	mov	r5,r3
 1009194:	1009883a 	mov	r4,r2
 1009198:	1823883a 	mov	r17,r3
 100919c:	1021883a 	mov	r16,r2
 10091a0:	100d7600 	call	100d760 <__fixdfsi>
 10091a4:	1009883a 	mov	r4,r2
 10091a8:	102b883a 	mov	r21,r2
 10091ac:	100d6680 	call	100d668 <__floatsidf>
 10091b0:	880b883a 	mov	r5,r17
 10091b4:	8009883a 	mov	r4,r16
 10091b8:	180f883a 	mov	r7,r3
 10091bc:	100d883a 	mov	r6,r2
 10091c0:	100ccb00 	call	100ccb0 <__subdf3>
 10091c4:	1021883a 	mov	r16,r2
 10091c8:	d9001b17 	ldw	r4,108(sp)
 10091cc:	1823883a 	mov	r17,r3
 10091d0:	dc001415 	stw	r16,80(sp)
 10091d4:	ad400c04 	addi	r21,r21,48
 10091d8:	dc401515 	stw	r17,84(sp)
 10091dc:	d8801a17 	ldw	r2,104(sp)
 10091e0:	e5400005 	stb	r21,0(fp)
 10091e4:	202f883a 	mov	r23,r4
 10091e8:	d9c01b17 	ldw	r7,108(sp)
 10091ec:	d9001417 	ldw	r4,80(sp)
 10091f0:	880b883a 	mov	r5,r17
 10091f4:	100d883a 	mov	r6,r2
 10091f8:	102d883a 	mov	r22,r2
 10091fc:	e7000044 	addi	fp,fp,1
 1009200:	100d5e00 	call	100d5e0 <__ltdf2>
 1009204:	103fc30e 	bge	r2,zero,1009114 <_dtoa_r+0x1064>
 1009208:	d9000417 	ldw	r4,16(sp)
 100920c:	d9000d15 	stw	r4,52(sp)
 1009210:	003d7106 	br	10087d8 <_dtoa_r+0x728>
 1009214:	d9801717 	ldw	r6,92(sp)
 1009218:	00800084 	movi	r2,2
 100921c:	11bde60e 	bge	r2,r6,10089b8 <_dtoa_r+0x908>
 1009220:	203cfb1e 	bne	r4,zero,1008610 <_dtoa_r+0x560>
 1009224:	d9001617 	ldw	r4,88(sp)
 1009228:	900b883a 	mov	r5,r18
 100922c:	01800144 	movi	r6,5
 1009230:	000f883a 	mov	r7,zero
 1009234:	100acd00 	call	100acd0 <__multadd>
 1009238:	d9000717 	ldw	r4,28(sp)
 100923c:	100b883a 	mov	r5,r2
 1009240:	1025883a 	mov	r18,r2
 1009244:	100a10c0 	call	100a10c <__mcmp>
 1009248:	00bcf10e 	bge	zero,r2,1008610 <_dtoa_r+0x560>
 100924c:	d8c00d17 	ldw	r3,52(sp)
 1009250:	d9000517 	ldw	r4,20(sp)
 1009254:	d8000615 	stw	zero,24(sp)
 1009258:	18c00044 	addi	r3,r3,1
 100925c:	d8c00d15 	stw	r3,52(sp)
 1009260:	00800c44 	movi	r2,49
 1009264:	27000044 	addi	fp,r4,1
 1009268:	20800005 	stb	r2,0(r4)
 100926c:	003e8906 	br	1008c94 <_dtoa_r+0xbe4>
 1009270:	d8c00517 	ldw	r3,20(sp)
 1009274:	003bc206 	br	1008180 <_dtoa_r+0xd0>
 1009278:	01804074 	movhi	r6,257
 100927c:	31874e04 	addi	r6,r6,7480
 1009280:	30c00917 	ldw	r3,36(r6)
 1009284:	30800817 	ldw	r2,32(r6)
 1009288:	d9001217 	ldw	r4,72(sp)
 100928c:	d9401317 	ldw	r5,76(sp)
 1009290:	180f883a 	mov	r7,r3
 1009294:	100d883a 	mov	r6,r2
 1009298:	100d1680 	call	100d168 <__divdf3>
 100929c:	948003cc 	andi	r18,r18,15
 10092a0:	058000c4 	movi	r22,3
 10092a4:	1029883a 	mov	r20,r2
 10092a8:	182b883a 	mov	r21,r3
 10092ac:	003c8906 	br	10084d4 <_dtoa_r+0x424>
 10092b0:	d9001017 	ldw	r4,64(sp)
 10092b4:	d9800917 	ldw	r6,36(sp)
 10092b8:	0025883a 	mov	r18,zero
 10092bc:	1105c83a 	sub	r2,r2,r4
 10092c0:	2089883a 	add	r4,r4,r2
 10092c4:	308d883a 	add	r6,r6,r2
 10092c8:	d9001015 	stw	r4,64(sp)
 10092cc:	d9800915 	stw	r6,36(sp)
 10092d0:	003e3206 	br	1008b9c <_dtoa_r+0xaec>
 10092d4:	28800044 	addi	r2,r5,1
 10092d8:	27000044 	addi	fp,r4,1
 10092dc:	20800005 	stb	r2,0(r4)
 10092e0:	003e6c06 	br	1008c94 <_dtoa_r+0xbe4>
 10092e4:	d8800f17 	ldw	r2,60(sp)
 10092e8:	00bce016 	blt	zero,r2,100866c <_dtoa_r+0x5bc>
 10092ec:	d9800f17 	ldw	r6,60(sp)
 10092f0:	303cc51e 	bne	r6,zero,1008608 <_dtoa_r+0x558>
 10092f4:	0005883a 	mov	r2,zero
 10092f8:	00d00534 	movhi	r3,16404
 10092fc:	980b883a 	mov	r5,r19
 1009300:	180f883a 	mov	r7,r3
 1009304:	9009883a 	mov	r4,r18
 1009308:	100d883a 	mov	r6,r2
 100930c:	100cda40 	call	100cda4 <__muldf3>
 1009310:	180b883a 	mov	r5,r3
 1009314:	a80f883a 	mov	r7,r21
 1009318:	1009883a 	mov	r4,r2
 100931c:	a00d883a 	mov	r6,r20
 1009320:	100d5580 	call	100d558 <__gedf2>
 1009324:	103cb80e 	bge	r2,zero,1008608 <_dtoa_r+0x558>
 1009328:	0027883a 	mov	r19,zero
 100932c:	0025883a 	mov	r18,zero
 1009330:	003fc606 	br	100924c <_dtoa_r+0x119c>
 1009334:	99400117 	ldw	r5,4(r19)
 1009338:	d9001617 	ldw	r4,88(sp)
 100933c:	100a5300 	call	100a530 <_Balloc>
 1009340:	99800417 	ldw	r6,16(r19)
 1009344:	11000304 	addi	r4,r2,12
 1009348:	99400304 	addi	r5,r19,12
 100934c:	318d883a 	add	r6,r6,r6
 1009350:	318d883a 	add	r6,r6,r6
 1009354:	31800204 	addi	r6,r6,8
 1009358:	1023883a 	mov	r17,r2
 100935c:	1009e300 	call	1009e30 <memcpy>
 1009360:	d9001617 	ldw	r4,88(sp)
 1009364:	880b883a 	mov	r5,r17
 1009368:	01800044 	movi	r6,1
 100936c:	100a8f40 	call	100a8f4 <__lshift>
 1009370:	100b883a 	mov	r5,r2
 1009374:	003d9c06 	br	10089e8 <_dtoa_r+0x938>
 1009378:	00800e44 	movi	r2,57
 100937c:	b8807026 	beq	r23,r2,1009540 <_dtoa_r+0x1490>
 1009380:	b8800044 	addi	r2,r23,1
 1009384:	b7000044 	addi	fp,r22,1
 1009388:	b0800005 	stb	r2,0(r22)
 100938c:	003e4106 	br	1008c94 <_dtoa_r+0xbe4>
 1009390:	d8800317 	ldw	r2,12(sp)
 1009394:	01804074 	movhi	r6,257
 1009398:	31871c04 	addi	r6,r6,7280
 100939c:	b009883a 	mov	r4,r22
 10093a0:	100e90fa 	slli	r7,r2,3
 10093a4:	b80b883a 	mov	r5,r23
 10093a8:	398f883a 	add	r7,r7,r6
 10093ac:	38bffe17 	ldw	r2,-8(r7)
 10093b0:	d9800517 	ldw	r6,20(sp)
 10093b4:	38ffff17 	ldw	r3,-4(r7)
 10093b8:	37000044 	addi	fp,r6,1
 10093bc:	180f883a 	mov	r7,r3
 10093c0:	100d883a 	mov	r6,r2
 10093c4:	100cda40 	call	100cda4 <__muldf3>
 10093c8:	a80b883a 	mov	r5,r21
 10093cc:	a009883a 	mov	r4,r20
 10093d0:	182f883a 	mov	r23,r3
 10093d4:	102d883a 	mov	r22,r2
 10093d8:	100d7600 	call	100d760 <__fixdfsi>
 10093dc:	1009883a 	mov	r4,r2
 10093e0:	1027883a 	mov	r19,r2
 10093e4:	100d6680 	call	100d668 <__floatsidf>
 10093e8:	a80b883a 	mov	r5,r21
 10093ec:	a009883a 	mov	r4,r20
 10093f0:	180f883a 	mov	r7,r3
 10093f4:	100d883a 	mov	r6,r2
 10093f8:	100ccb00 	call	100ccb0 <__subdf3>
 10093fc:	180b883a 	mov	r5,r3
 1009400:	d8c00517 	ldw	r3,20(sp)
 1009404:	9cc00c04 	addi	r19,r19,48
 1009408:	1009883a 	mov	r4,r2
 100940c:	1cc00005 	stb	r19,0(r3)
 1009410:	2021883a 	mov	r16,r4
 1009414:	d9000317 	ldw	r4,12(sp)
 1009418:	00800044 	movi	r2,1
 100941c:	2823883a 	mov	r17,r5
 1009420:	20802226 	beq	r4,r2,10094ac <_dtoa_r+0x13fc>
 1009424:	1029883a 	mov	r20,r2
 1009428:	0005883a 	mov	r2,zero
 100942c:	00d00934 	movhi	r3,16420
 1009430:	180f883a 	mov	r7,r3
 1009434:	100d883a 	mov	r6,r2
 1009438:	880b883a 	mov	r5,r17
 100943c:	8009883a 	mov	r4,r16
 1009440:	100cda40 	call	100cda4 <__muldf3>
 1009444:	180b883a 	mov	r5,r3
 1009448:	1009883a 	mov	r4,r2
 100944c:	1823883a 	mov	r17,r3
 1009450:	1021883a 	mov	r16,r2
 1009454:	100d7600 	call	100d760 <__fixdfsi>
 1009458:	1009883a 	mov	r4,r2
 100945c:	102b883a 	mov	r21,r2
 1009460:	100d6680 	call	100d668 <__floatsidf>
 1009464:	880b883a 	mov	r5,r17
 1009468:	8009883a 	mov	r4,r16
 100946c:	180f883a 	mov	r7,r3
 1009470:	100d883a 	mov	r6,r2
 1009474:	100ccb00 	call	100ccb0 <__subdf3>
 1009478:	180b883a 	mov	r5,r3
 100947c:	d8c00517 	ldw	r3,20(sp)
 1009480:	1009883a 	mov	r4,r2
 1009484:	ad400c04 	addi	r21,r21,48
 1009488:	1d05883a 	add	r2,r3,r20
 100948c:	15400005 	stb	r21,0(r2)
 1009490:	2021883a 	mov	r16,r4
 1009494:	d9000317 	ldw	r4,12(sp)
 1009498:	a5000044 	addi	r20,r20,1
 100949c:	2823883a 	mov	r17,r5
 10094a0:	a13fe11e 	bne	r20,r4,1009428 <_dtoa_r+0x1378>
 10094a4:	e505883a 	add	r2,fp,r20
 10094a8:	173fffc4 	addi	fp,r2,-1
 10094ac:	0025883a 	mov	r18,zero
 10094b0:	04cff834 	movhi	r19,16352
 10094b4:	b009883a 	mov	r4,r22
 10094b8:	b80b883a 	mov	r5,r23
 10094bc:	900d883a 	mov	r6,r18
 10094c0:	980f883a 	mov	r7,r19
 10094c4:	100cd300 	call	100cd30 <__adddf3>
 10094c8:	180b883a 	mov	r5,r3
 10094cc:	1009883a 	mov	r4,r2
 10094d0:	800d883a 	mov	r6,r16
 10094d4:	880f883a 	mov	r7,r17
 10094d8:	100d5e00 	call	100d5e0 <__ltdf2>
 10094dc:	103cab16 	blt	r2,zero,100878c <_dtoa_r+0x6dc>
 10094e0:	0009883a 	mov	r4,zero
 10094e4:	980b883a 	mov	r5,r19
 10094e8:	b80f883a 	mov	r7,r23
 10094ec:	b00d883a 	mov	r6,r22
 10094f0:	100ccb00 	call	100ccb0 <__subdf3>
 10094f4:	180b883a 	mov	r5,r3
 10094f8:	880f883a 	mov	r7,r17
 10094fc:	1009883a 	mov	r4,r2
 1009500:	800d883a 	mov	r6,r16
 1009504:	100d4d00 	call	100d4d0 <__gtdf2>
 1009508:	00bc470e 	bge	zero,r2,1008628 <_dtoa_r+0x578>
 100950c:	00c00c04 	movi	r3,48
 1009510:	e73fffc4 	addi	fp,fp,-1
 1009514:	e0800007 	ldb	r2,0(fp)
 1009518:	10fffd26 	beq	r2,r3,1009510 <_dtoa_r+0x1460>
 100951c:	d9800417 	ldw	r6,16(sp)
 1009520:	e7000044 	addi	fp,fp,1
 1009524:	d9800d15 	stw	r6,52(sp)
 1009528:	003cab06 	br	10087d8 <_dtoa_r+0x728>
 100952c:	d8c00f17 	ldw	r3,60(sp)
 1009530:	d9001117 	ldw	r4,68(sp)
 1009534:	20e1c83a 	sub	r16,r4,r3
 1009538:	0007883a 	mov	r3,zero
 100953c:	003d9b06 	br	1008bac <_dtoa_r+0xafc>
 1009540:	00800e44 	movi	r2,57
 1009544:	b0800005 	stb	r2,0(r22)
 1009548:	b5800044 	addi	r22,r22,1
 100954c:	003dc106 	br	1008c54 <_dtoa_r+0xba4>
 1009550:	05800084 	movi	r22,2
 1009554:	003bf706 	br	1008534 <_dtoa_r+0x484>
 1009558:	d9000f17 	ldw	r4,60(sp)
 100955c:	013c000e 	bge	zero,r4,1008560 <_dtoa_r+0x4b0>
 1009560:	d9800e17 	ldw	r6,56(sp)
 1009564:	01bc300e 	bge	zero,r6,1008628 <_dtoa_r+0x578>
 1009568:	0005883a 	mov	r2,zero
 100956c:	00d00934 	movhi	r3,16420
 1009570:	a80b883a 	mov	r5,r21
 1009574:	180f883a 	mov	r7,r3
 1009578:	a009883a 	mov	r4,r20
 100957c:	100d883a 	mov	r6,r2
 1009580:	100cda40 	call	100cda4 <__muldf3>
 1009584:	b1000044 	addi	r4,r22,1
 1009588:	1021883a 	mov	r16,r2
 100958c:	1823883a 	mov	r17,r3
 1009590:	100d6680 	call	100d668 <__floatsidf>
 1009594:	880b883a 	mov	r5,r17
 1009598:	8009883a 	mov	r4,r16
 100959c:	180f883a 	mov	r7,r3
 10095a0:	100d883a 	mov	r6,r2
 10095a4:	100cda40 	call	100cda4 <__muldf3>
 10095a8:	0011883a 	mov	r8,zero
 10095ac:	02500734 	movhi	r9,16412
 10095b0:	180b883a 	mov	r5,r3
 10095b4:	480f883a 	mov	r7,r9
 10095b8:	1009883a 	mov	r4,r2
 10095bc:	400d883a 	mov	r6,r8
 10095c0:	100cd300 	call	100cd30 <__adddf3>
 10095c4:	102d883a 	mov	r22,r2
 10095c8:	00bf3034 	movhi	r2,64704
 10095cc:	10ef883a 	add	r23,r2,r3
 10095d0:	d8800d17 	ldw	r2,52(sp)
 10095d4:	d8c00e17 	ldw	r3,56(sp)
 10095d8:	8029883a 	mov	r20,r16
 10095dc:	10bfffc4 	addi	r2,r2,-1
 10095e0:	882b883a 	mov	r21,r17
 10095e4:	d8800415 	stw	r2,16(sp)
 10095e8:	d8c00315 	stw	r3,12(sp)
 10095ec:	003e8306 	br	1008ffc <_dtoa_r+0xf4c>
 10095f0:	d8800117 	ldw	r2,4(sp)
 10095f4:	dc001117 	ldw	r16,68(sp)
 10095f8:	dc801017 	ldw	r18,64(sp)
 10095fc:	00c00d84 	movi	r3,54
 1009600:	1887c83a 	sub	r3,r3,r2
 1009604:	003d6906 	br	1008bac <_dtoa_r+0xafc>
 1009608:	01800044 	movi	r6,1
 100960c:	3021883a 	mov	r16,r6
 1009610:	d9800f15 	stw	r6,60(sp)
 1009614:	d9802615 	stw	r6,152(sp)
 1009618:	d9800e15 	stw	r6,56(sp)
 100961c:	003b9306 	br	100846c <_dtoa_r+0x3bc>
 1009620:	b021883a 	mov	r16,r22
 1009624:	dd800f15 	stw	r22,60(sp)
 1009628:	003b9006 	br	100846c <_dtoa_r+0x3bc>
 100962c:	103e221e 	bne	r2,zero,1008eb8 <_dtoa_r+0xe08>
 1009630:	b880004c 	andi	r2,r23,1
 1009634:	1005003a 	cmpeq	r2,r2,zero
 1009638:	103e1f1e 	bne	r2,zero,1008eb8 <_dtoa_r+0xe08>
 100963c:	003e1b06 	br	1008eac <_dtoa_r+0xdfc>
 1009640:	d9001617 	ldw	r4,88(sp)
 1009644:	980b883a 	mov	r5,r19
 1009648:	01800284 	movi	r6,10
 100964c:	000f883a 	mov	r7,zero
 1009650:	100acd00 	call	100acd0 <__multadd>
 1009654:	d8c00e17 	ldw	r3,56(sp)
 1009658:	1027883a 	mov	r19,r2
 100965c:	d8c00f15 	stw	r3,60(sp)
 1009660:	003cd306 	br	10089b0 <_dtoa_r+0x900>

01009664 <__sflags>:
 1009664:	28c00007 	ldb	r3,0(r5)
 1009668:	00801c84 	movi	r2,114
 100966c:	18800926 	beq	r3,r2,1009694 <__sflags+0x30>
 1009670:	00801dc4 	movi	r2,119
 1009674:	18801426 	beq	r3,r2,10096c8 <__sflags+0x64>
 1009678:	00801844 	movi	r2,97
 100967c:	18801626 	beq	r3,r2,10096d8 <__sflags+0x74>
 1009680:	0007883a 	mov	r3,zero
 1009684:	00800584 	movi	r2,22
 1009688:	20800015 	stw	r2,0(r4)
 100968c:	1805883a 	mov	r2,r3
 1009690:	f800283a 	ret
 1009694:	000f883a 	mov	r7,zero
 1009698:	0011883a 	mov	r8,zero
 100969c:	00c00104 	movi	r3,4
 10096a0:	28800047 	ldb	r2,1(r5)
 10096a4:	10000426 	beq	r2,zero,10096b8 <__sflags+0x54>
 10096a8:	01000ac4 	movi	r4,43
 10096ac:	11000e26 	beq	r2,r4,10096e8 <__sflags+0x84>
 10096b0:	28800087 	ldb	r2,2(r5)
 10096b4:	11000c26 	beq	r2,r4,10096e8 <__sflags+0x84>
 10096b8:	3a04b03a 	or	r2,r7,r8
 10096bc:	30800015 	stw	r2,0(r6)
 10096c0:	1805883a 	mov	r2,r3
 10096c4:	f800283a 	ret
 10096c8:	01c00044 	movi	r7,1
 10096cc:	02018004 	movi	r8,1536
 10096d0:	00c00204 	movi	r3,8
 10096d4:	003ff206 	br	10096a0 <__sflags+0x3c>
 10096d8:	01c00044 	movi	r7,1
 10096dc:	02008204 	movi	r8,520
 10096e0:	00c04204 	movi	r3,264
 10096e4:	003fee06 	br	10096a0 <__sflags+0x3c>
 10096e8:	00bffcc4 	movi	r2,-13
 10096ec:	1884703a 	and	r2,r3,r2
 10096f0:	01c00084 	movi	r7,2
 10096f4:	10c00414 	ori	r3,r2,16
 10096f8:	3a04b03a 	or	r2,r7,r8
 10096fc:	30800015 	stw	r2,0(r6)
 1009700:	003fef06 	br	10096c0 <__sflags+0x5c>

01009704 <__sfvwrite_r>:
 1009704:	30800217 	ldw	r2,8(r6)
 1009708:	defff504 	addi	sp,sp,-44
 100970c:	df000915 	stw	fp,36(sp)
 1009710:	dd800715 	stw	r22,28(sp)
 1009714:	dc800315 	stw	r18,12(sp)
 1009718:	dfc00a15 	stw	ra,40(sp)
 100971c:	ddc00815 	stw	r23,32(sp)
 1009720:	dd400615 	stw	r21,24(sp)
 1009724:	dd000515 	stw	r20,20(sp)
 1009728:	dcc00415 	stw	r19,16(sp)
 100972c:	dc400215 	stw	r17,8(sp)
 1009730:	dc000115 	stw	r16,4(sp)
 1009734:	302d883a 	mov	r22,r6
 1009738:	2039883a 	mov	fp,r4
 100973c:	2825883a 	mov	r18,r5
 1009740:	10001c26 	beq	r2,zero,10097b4 <__sfvwrite_r+0xb0>
 1009744:	29c0030b 	ldhu	r7,12(r5)
 1009748:	3880020c 	andi	r2,r7,8
 100974c:	10002726 	beq	r2,zero,10097ec <__sfvwrite_r+0xe8>
 1009750:	28800417 	ldw	r2,16(r5)
 1009754:	10002526 	beq	r2,zero,10097ec <__sfvwrite_r+0xe8>
 1009758:	3880008c 	andi	r2,r7,2
 100975c:	b5400017 	ldw	r21,0(r22)
 1009760:	10002826 	beq	r2,zero,1009804 <__sfvwrite_r+0x100>
 1009764:	0021883a 	mov	r16,zero
 1009768:	0023883a 	mov	r17,zero
 100976c:	880d883a 	mov	r6,r17
 1009770:	e009883a 	mov	r4,fp
 1009774:	00810004 	movi	r2,1024
 1009778:	80006e26 	beq	r16,zero,1009934 <__sfvwrite_r+0x230>
 100977c:	800f883a 	mov	r7,r16
 1009780:	91400717 	ldw	r5,28(r18)
 1009784:	1400012e 	bgeu	r2,r16,100978c <__sfvwrite_r+0x88>
 1009788:	100f883a 	mov	r7,r2
 100978c:	90c00917 	ldw	r3,36(r18)
 1009790:	183ee83a 	callr	r3
 1009794:	1007883a 	mov	r3,r2
 1009798:	80a1c83a 	sub	r16,r16,r2
 100979c:	88a3883a 	add	r17,r17,r2
 10097a0:	00806d0e 	bge	zero,r2,1009958 <__sfvwrite_r+0x254>
 10097a4:	b0800217 	ldw	r2,8(r22)
 10097a8:	10c5c83a 	sub	r2,r2,r3
 10097ac:	b0800215 	stw	r2,8(r22)
 10097b0:	103fee1e 	bne	r2,zero,100976c <__sfvwrite_r+0x68>
 10097b4:	0009883a 	mov	r4,zero
 10097b8:	2005883a 	mov	r2,r4
 10097bc:	dfc00a17 	ldw	ra,40(sp)
 10097c0:	df000917 	ldw	fp,36(sp)
 10097c4:	ddc00817 	ldw	r23,32(sp)
 10097c8:	dd800717 	ldw	r22,28(sp)
 10097cc:	dd400617 	ldw	r21,24(sp)
 10097d0:	dd000517 	ldw	r20,20(sp)
 10097d4:	dcc00417 	ldw	r19,16(sp)
 10097d8:	dc800317 	ldw	r18,12(sp)
 10097dc:	dc400217 	ldw	r17,8(sp)
 10097e0:	dc000117 	ldw	r16,4(sp)
 10097e4:	dec00b04 	addi	sp,sp,44
 10097e8:	f800283a 	ret
 10097ec:	1007cc00 	call	1007cc0 <__swsetup_r>
 10097f0:	1000e41e 	bne	r2,zero,1009b84 <__sfvwrite_r+0x480>
 10097f4:	91c0030b 	ldhu	r7,12(r18)
 10097f8:	b5400017 	ldw	r21,0(r22)
 10097fc:	3880008c 	andi	r2,r7,2
 1009800:	103fd81e 	bne	r2,zero,1009764 <__sfvwrite_r+0x60>
 1009804:	3880004c 	andi	r2,r7,1
 1009808:	1005003a 	cmpeq	r2,r2,zero
 100980c:	10005726 	beq	r2,zero,100996c <__sfvwrite_r+0x268>
 1009810:	0029883a 	mov	r20,zero
 1009814:	002f883a 	mov	r23,zero
 1009818:	a0004226 	beq	r20,zero,1009924 <__sfvwrite_r+0x220>
 100981c:	3880800c 	andi	r2,r7,512
 1009820:	94000217 	ldw	r16,8(r18)
 1009824:	10008b26 	beq	r2,zero,1009a54 <__sfvwrite_r+0x350>
 1009828:	800d883a 	mov	r6,r16
 100982c:	a400a536 	bltu	r20,r16,1009ac4 <__sfvwrite_r+0x3c0>
 1009830:	3881200c 	andi	r2,r7,1152
 1009834:	10002726 	beq	r2,zero,10098d4 <__sfvwrite_r+0x1d0>
 1009838:	90800517 	ldw	r2,20(r18)
 100983c:	92000417 	ldw	r8,16(r18)
 1009840:	91400017 	ldw	r5,0(r18)
 1009844:	1087883a 	add	r3,r2,r2
 1009848:	1887883a 	add	r3,r3,r2
 100984c:	1808d7fa 	srli	r4,r3,31
 1009850:	2a21c83a 	sub	r16,r5,r8
 1009854:	80800044 	addi	r2,r16,1
 1009858:	20c9883a 	add	r4,r4,r3
 100985c:	2027d07a 	srai	r19,r4,1
 1009860:	a085883a 	add	r2,r20,r2
 1009864:	980d883a 	mov	r6,r19
 1009868:	9880022e 	bgeu	r19,r2,1009874 <__sfvwrite_r+0x170>
 100986c:	1027883a 	mov	r19,r2
 1009870:	100d883a 	mov	r6,r2
 1009874:	3881000c 	andi	r2,r7,1024
 1009878:	1000b826 	beq	r2,zero,1009b5c <__sfvwrite_r+0x458>
 100987c:	300b883a 	mov	r5,r6
 1009880:	e009883a 	mov	r4,fp
 1009884:	1004a8c0 	call	1004a8c <_malloc_r>
 1009888:	10003126 	beq	r2,zero,1009950 <__sfvwrite_r+0x24c>
 100988c:	91400417 	ldw	r5,16(r18)
 1009890:	1009883a 	mov	r4,r2
 1009894:	800d883a 	mov	r6,r16
 1009898:	1023883a 	mov	r17,r2
 100989c:	1009e300 	call	1009e30 <memcpy>
 10098a0:	90c0030b 	ldhu	r3,12(r18)
 10098a4:	00beffc4 	movi	r2,-1025
 10098a8:	1886703a 	and	r3,r3,r2
 10098ac:	18c02014 	ori	r3,r3,128
 10098b0:	90c0030d 	sth	r3,12(r18)
 10098b4:	9c07c83a 	sub	r3,r19,r16
 10098b8:	8c05883a 	add	r2,r17,r16
 10098bc:	a00d883a 	mov	r6,r20
 10098c0:	a021883a 	mov	r16,r20
 10098c4:	90800015 	stw	r2,0(r18)
 10098c8:	90c00215 	stw	r3,8(r18)
 10098cc:	94400415 	stw	r17,16(r18)
 10098d0:	94c00515 	stw	r19,20(r18)
 10098d4:	91000017 	ldw	r4,0(r18)
 10098d8:	b80b883a 	mov	r5,r23
 10098dc:	a023883a 	mov	r17,r20
 10098e0:	1009ed00 	call	1009ed0 <memmove>
 10098e4:	90c00217 	ldw	r3,8(r18)
 10098e8:	90800017 	ldw	r2,0(r18)
 10098ec:	a027883a 	mov	r19,r20
 10098f0:	1c07c83a 	sub	r3,r3,r16
 10098f4:	1405883a 	add	r2,r2,r16
 10098f8:	90c00215 	stw	r3,8(r18)
 10098fc:	a021883a 	mov	r16,r20
 1009900:	90800015 	stw	r2,0(r18)
 1009904:	b0800217 	ldw	r2,8(r22)
 1009908:	1405c83a 	sub	r2,r2,r16
 100990c:	b0800215 	stw	r2,8(r22)
 1009910:	103fa826 	beq	r2,zero,10097b4 <__sfvwrite_r+0xb0>
 1009914:	a469c83a 	sub	r20,r20,r17
 1009918:	91c0030b 	ldhu	r7,12(r18)
 100991c:	bcef883a 	add	r23,r23,r19
 1009920:	a03fbe1e 	bne	r20,zero,100981c <__sfvwrite_r+0x118>
 1009924:	adc00017 	ldw	r23,0(r21)
 1009928:	ad000117 	ldw	r20,4(r21)
 100992c:	ad400204 	addi	r21,r21,8
 1009930:	003fb906 	br	1009818 <__sfvwrite_r+0x114>
 1009934:	ac400017 	ldw	r17,0(r21)
 1009938:	ac000117 	ldw	r16,4(r21)
 100993c:	ad400204 	addi	r21,r21,8
 1009940:	003f8a06 	br	100976c <__sfvwrite_r+0x68>
 1009944:	91400417 	ldw	r5,16(r18)
 1009948:	e009883a 	mov	r4,fp
 100994c:	1003d540 	call	1003d54 <_free_r>
 1009950:	00800304 	movi	r2,12
 1009954:	e0800015 	stw	r2,0(fp)
 1009958:	9080030b 	ldhu	r2,12(r18)
 100995c:	013fffc4 	movi	r4,-1
 1009960:	10801014 	ori	r2,r2,64
 1009964:	9080030d 	sth	r2,12(r18)
 1009968:	003f9306 	br	10097b8 <__sfvwrite_r+0xb4>
 100996c:	0027883a 	mov	r19,zero
 1009970:	002f883a 	mov	r23,zero
 1009974:	d8000015 	stw	zero,0(sp)
 1009978:	0029883a 	mov	r20,zero
 100997c:	98001e26 	beq	r19,zero,10099f8 <__sfvwrite_r+0x2f4>
 1009980:	d8c00017 	ldw	r3,0(sp)
 1009984:	1804c03a 	cmpne	r2,r3,zero
 1009988:	10005e26 	beq	r2,zero,1009b04 <__sfvwrite_r+0x400>
 100998c:	9821883a 	mov	r16,r19
 1009990:	a4c0012e 	bgeu	r20,r19,1009998 <__sfvwrite_r+0x294>
 1009994:	a021883a 	mov	r16,r20
 1009998:	91000017 	ldw	r4,0(r18)
 100999c:	90800417 	ldw	r2,16(r18)
 10099a0:	91800217 	ldw	r6,8(r18)
 10099a4:	91c00517 	ldw	r7,20(r18)
 10099a8:	1100022e 	bgeu	r2,r4,10099b4 <__sfvwrite_r+0x2b0>
 10099ac:	31e3883a 	add	r17,r6,r7
 10099b0:	8c001616 	blt	r17,r16,1009a0c <__sfvwrite_r+0x308>
 10099b4:	81c03816 	blt	r16,r7,1009a98 <__sfvwrite_r+0x394>
 10099b8:	90c00917 	ldw	r3,36(r18)
 10099bc:	91400717 	ldw	r5,28(r18)
 10099c0:	e009883a 	mov	r4,fp
 10099c4:	b80d883a 	mov	r6,r23
 10099c8:	183ee83a 	callr	r3
 10099cc:	1023883a 	mov	r17,r2
 10099d0:	00bfe10e 	bge	zero,r2,1009958 <__sfvwrite_r+0x254>
 10099d4:	a469c83a 	sub	r20,r20,r17
 10099d8:	a0001826 	beq	r20,zero,1009a3c <__sfvwrite_r+0x338>
 10099dc:	b0800217 	ldw	r2,8(r22)
 10099e0:	1445c83a 	sub	r2,r2,r17
 10099e4:	b0800215 	stw	r2,8(r22)
 10099e8:	103f7226 	beq	r2,zero,10097b4 <__sfvwrite_r+0xb0>
 10099ec:	9c67c83a 	sub	r19,r19,r17
 10099f0:	bc6f883a 	add	r23,r23,r17
 10099f4:	983fe21e 	bne	r19,zero,1009980 <__sfvwrite_r+0x27c>
 10099f8:	adc00017 	ldw	r23,0(r21)
 10099fc:	acc00117 	ldw	r19,4(r21)
 1009a00:	ad400204 	addi	r21,r21,8
 1009a04:	d8000015 	stw	zero,0(sp)
 1009a08:	003fdc06 	br	100997c <__sfvwrite_r+0x278>
 1009a0c:	b80b883a 	mov	r5,r23
 1009a10:	880d883a 	mov	r6,r17
 1009a14:	1009ed00 	call	1009ed0 <memmove>
 1009a18:	90c00017 	ldw	r3,0(r18)
 1009a1c:	e009883a 	mov	r4,fp
 1009a20:	900b883a 	mov	r5,r18
 1009a24:	1c47883a 	add	r3,r3,r17
 1009a28:	90c00015 	stw	r3,0(r18)
 1009a2c:	10035f40 	call	10035f4 <_fflush_r>
 1009a30:	103fc91e 	bne	r2,zero,1009958 <__sfvwrite_r+0x254>
 1009a34:	a469c83a 	sub	r20,r20,r17
 1009a38:	a03fe81e 	bne	r20,zero,10099dc <__sfvwrite_r+0x2d8>
 1009a3c:	e009883a 	mov	r4,fp
 1009a40:	900b883a 	mov	r5,r18
 1009a44:	10035f40 	call	10035f4 <_fflush_r>
 1009a48:	103fc31e 	bne	r2,zero,1009958 <__sfvwrite_r+0x254>
 1009a4c:	d8000015 	stw	zero,0(sp)
 1009a50:	003fe206 	br	10099dc <__sfvwrite_r+0x2d8>
 1009a54:	91000017 	ldw	r4,0(r18)
 1009a58:	90800417 	ldw	r2,16(r18)
 1009a5c:	1100022e 	bgeu	r2,r4,1009a68 <__sfvwrite_r+0x364>
 1009a60:	8023883a 	mov	r17,r16
 1009a64:	85003136 	bltu	r16,r20,1009b2c <__sfvwrite_r+0x428>
 1009a68:	91c00517 	ldw	r7,20(r18)
 1009a6c:	a1c01836 	bltu	r20,r7,1009ad0 <__sfvwrite_r+0x3cc>
 1009a70:	90c00917 	ldw	r3,36(r18)
 1009a74:	91400717 	ldw	r5,28(r18)
 1009a78:	e009883a 	mov	r4,fp
 1009a7c:	b80d883a 	mov	r6,r23
 1009a80:	183ee83a 	callr	r3
 1009a84:	1021883a 	mov	r16,r2
 1009a88:	00bfb30e 	bge	zero,r2,1009958 <__sfvwrite_r+0x254>
 1009a8c:	1023883a 	mov	r17,r2
 1009a90:	1027883a 	mov	r19,r2
 1009a94:	003f9b06 	br	1009904 <__sfvwrite_r+0x200>
 1009a98:	b80b883a 	mov	r5,r23
 1009a9c:	800d883a 	mov	r6,r16
 1009aa0:	1009ed00 	call	1009ed0 <memmove>
 1009aa4:	90c00217 	ldw	r3,8(r18)
 1009aa8:	90800017 	ldw	r2,0(r18)
 1009aac:	8023883a 	mov	r17,r16
 1009ab0:	1c07c83a 	sub	r3,r3,r16
 1009ab4:	1405883a 	add	r2,r2,r16
 1009ab8:	90c00215 	stw	r3,8(r18)
 1009abc:	90800015 	stw	r2,0(r18)
 1009ac0:	003fc406 	br	10099d4 <__sfvwrite_r+0x2d0>
 1009ac4:	a00d883a 	mov	r6,r20
 1009ac8:	a021883a 	mov	r16,r20
 1009acc:	003f8106 	br	10098d4 <__sfvwrite_r+0x1d0>
 1009ad0:	b80b883a 	mov	r5,r23
 1009ad4:	a00d883a 	mov	r6,r20
 1009ad8:	1009ed00 	call	1009ed0 <memmove>
 1009adc:	90c00217 	ldw	r3,8(r18)
 1009ae0:	90800017 	ldw	r2,0(r18)
 1009ae4:	a021883a 	mov	r16,r20
 1009ae8:	1d07c83a 	sub	r3,r3,r20
 1009aec:	1505883a 	add	r2,r2,r20
 1009af0:	a023883a 	mov	r17,r20
 1009af4:	a027883a 	mov	r19,r20
 1009af8:	90c00215 	stw	r3,8(r18)
 1009afc:	90800015 	stw	r2,0(r18)
 1009b00:	003f8006 	br	1009904 <__sfvwrite_r+0x200>
 1009b04:	b809883a 	mov	r4,r23
 1009b08:	01400284 	movi	r5,10
 1009b0c:	980d883a 	mov	r6,r19
 1009b10:	1009d4c0 	call	1009d4c <memchr>
 1009b14:	10001726 	beq	r2,zero,1009b74 <__sfvwrite_r+0x470>
 1009b18:	15c5c83a 	sub	r2,r2,r23
 1009b1c:	15000044 	addi	r20,r2,1
 1009b20:	00800044 	movi	r2,1
 1009b24:	d8800015 	stw	r2,0(sp)
 1009b28:	003f9806 	br	100998c <__sfvwrite_r+0x288>
 1009b2c:	b80b883a 	mov	r5,r23
 1009b30:	800d883a 	mov	r6,r16
 1009b34:	1009ed00 	call	1009ed0 <memmove>
 1009b38:	90c00017 	ldw	r3,0(r18)
 1009b3c:	e009883a 	mov	r4,fp
 1009b40:	900b883a 	mov	r5,r18
 1009b44:	1c07883a 	add	r3,r3,r16
 1009b48:	90c00015 	stw	r3,0(r18)
 1009b4c:	8027883a 	mov	r19,r16
 1009b50:	10035f40 	call	10035f4 <_fflush_r>
 1009b54:	103f6b26 	beq	r2,zero,1009904 <__sfvwrite_r+0x200>
 1009b58:	003f7f06 	br	1009958 <__sfvwrite_r+0x254>
 1009b5c:	400b883a 	mov	r5,r8
 1009b60:	e009883a 	mov	r4,fp
 1009b64:	100b2a00 	call	100b2a0 <_realloc_r>
 1009b68:	103f7626 	beq	r2,zero,1009944 <__sfvwrite_r+0x240>
 1009b6c:	1023883a 	mov	r17,r2
 1009b70:	003f5006 	br	10098b4 <__sfvwrite_r+0x1b0>
 1009b74:	00c00044 	movi	r3,1
 1009b78:	9d000044 	addi	r20,r19,1
 1009b7c:	d8c00015 	stw	r3,0(sp)
 1009b80:	003f8206 	br	100998c <__sfvwrite_r+0x288>
 1009b84:	9080030b 	ldhu	r2,12(r18)
 1009b88:	00c00244 	movi	r3,9
 1009b8c:	013fffc4 	movi	r4,-1
 1009b90:	10801014 	ori	r2,r2,64
 1009b94:	9080030d 	sth	r2,12(r18)
 1009b98:	e0c00015 	stw	r3,0(fp)
 1009b9c:	003f0606 	br	10097b8 <__sfvwrite_r+0xb4>

01009ba0 <_isatty_r>:
 1009ba0:	defffd04 	addi	sp,sp,-12
 1009ba4:	dc000015 	stw	r16,0(sp)
 1009ba8:	04004074 	movhi	r16,257
 1009bac:	84156804 	addi	r16,r16,21920
 1009bb0:	dc400115 	stw	r17,4(sp)
 1009bb4:	80000015 	stw	zero,0(r16)
 1009bb8:	2023883a 	mov	r17,r4
 1009bbc:	2809883a 	mov	r4,r5
 1009bc0:	dfc00215 	stw	ra,8(sp)
 1009bc4:	100e5200 	call	100e520 <isatty>
 1009bc8:	1007883a 	mov	r3,r2
 1009bcc:	00bfffc4 	movi	r2,-1
 1009bd0:	18800626 	beq	r3,r2,1009bec <_isatty_r+0x4c>
 1009bd4:	1805883a 	mov	r2,r3
 1009bd8:	dfc00217 	ldw	ra,8(sp)
 1009bdc:	dc400117 	ldw	r17,4(sp)
 1009be0:	dc000017 	ldw	r16,0(sp)
 1009be4:	dec00304 	addi	sp,sp,12
 1009be8:	f800283a 	ret
 1009bec:	80800017 	ldw	r2,0(r16)
 1009bf0:	103ff826 	beq	r2,zero,1009bd4 <_isatty_r+0x34>
 1009bf4:	88800015 	stw	r2,0(r17)
 1009bf8:	1805883a 	mov	r2,r3
 1009bfc:	dfc00217 	ldw	ra,8(sp)
 1009c00:	dc400117 	ldw	r17,4(sp)
 1009c04:	dc000017 	ldw	r16,0(sp)
 1009c08:	dec00304 	addi	sp,sp,12
 1009c0c:	f800283a 	ret

01009c10 <__locale_charset>:
 1009c10:	d0a00c17 	ldw	r2,-32720(gp)
 1009c14:	f800283a 	ret

01009c18 <_localeconv_r>:
 1009c18:	00804074 	movhi	r2,257
 1009c1c:	10871004 	addi	r2,r2,7232
 1009c20:	f800283a 	ret

01009c24 <localeconv>:
 1009c24:	00804074 	movhi	r2,257
 1009c28:	108e7f04 	addi	r2,r2,14844
 1009c2c:	11000017 	ldw	r4,0(r2)
 1009c30:	1009c181 	jmpi	1009c18 <_localeconv_r>

01009c34 <_setlocale_r>:
 1009c34:	defffc04 	addi	sp,sp,-16
 1009c38:	00c04074 	movhi	r3,257
 1009c3c:	18c6e604 	addi	r3,r3,7064
 1009c40:	dc800215 	stw	r18,8(sp)
 1009c44:	dc400115 	stw	r17,4(sp)
 1009c48:	dc000015 	stw	r16,0(sp)
 1009c4c:	2023883a 	mov	r17,r4
 1009c50:	2825883a 	mov	r18,r5
 1009c54:	dfc00315 	stw	ra,12(sp)
 1009c58:	3021883a 	mov	r16,r6
 1009c5c:	3009883a 	mov	r4,r6
 1009c60:	180b883a 	mov	r5,r3
 1009c64:	30000926 	beq	r6,zero,1009c8c <_setlocale_r+0x58>
 1009c68:	100b9040 	call	100b904 <strcmp>
 1009c6c:	8009883a 	mov	r4,r16
 1009c70:	01404074 	movhi	r5,257
 1009c74:	2946f704 	addi	r5,r5,7132
 1009c78:	10000b1e 	bne	r2,zero,1009ca8 <_setlocale_r+0x74>
 1009c7c:	8c000d15 	stw	r16,52(r17)
 1009c80:	8c800c15 	stw	r18,48(r17)
 1009c84:	00c04074 	movhi	r3,257
 1009c88:	18c6e604 	addi	r3,r3,7064
 1009c8c:	1805883a 	mov	r2,r3
 1009c90:	dfc00317 	ldw	ra,12(sp)
 1009c94:	dc800217 	ldw	r18,8(sp)
 1009c98:	dc400117 	ldw	r17,4(sp)
 1009c9c:	dc000017 	ldw	r16,0(sp)
 1009ca0:	dec00404 	addi	sp,sp,16
 1009ca4:	f800283a 	ret
 1009ca8:	100b9040 	call	100b904 <strcmp>
 1009cac:	0007883a 	mov	r3,zero
 1009cb0:	103ff226 	beq	r2,zero,1009c7c <_setlocale_r+0x48>
 1009cb4:	003ff506 	br	1009c8c <_setlocale_r+0x58>

01009cb8 <setlocale>:
 1009cb8:	01804074 	movhi	r6,257
 1009cbc:	318e7f04 	addi	r6,r6,14844
 1009cc0:	2007883a 	mov	r3,r4
 1009cc4:	31000017 	ldw	r4,0(r6)
 1009cc8:	280d883a 	mov	r6,r5
 1009ccc:	180b883a 	mov	r5,r3
 1009cd0:	1009c341 	jmpi	1009c34 <_setlocale_r>

01009cd4 <_lseek_r>:
 1009cd4:	defffd04 	addi	sp,sp,-12
 1009cd8:	dc000015 	stw	r16,0(sp)
 1009cdc:	04004074 	movhi	r16,257
 1009ce0:	84156804 	addi	r16,r16,21920
 1009ce4:	dc400115 	stw	r17,4(sp)
 1009ce8:	80000015 	stw	zero,0(r16)
 1009cec:	2023883a 	mov	r17,r4
 1009cf0:	2809883a 	mov	r4,r5
 1009cf4:	300b883a 	mov	r5,r6
 1009cf8:	380d883a 	mov	r6,r7
 1009cfc:	dfc00215 	stw	ra,8(sp)
 1009d00:	100e8d00 	call	100e8d0 <lseek>
 1009d04:	1007883a 	mov	r3,r2
 1009d08:	00bfffc4 	movi	r2,-1
 1009d0c:	18800626 	beq	r3,r2,1009d28 <_lseek_r+0x54>
 1009d10:	1805883a 	mov	r2,r3
 1009d14:	dfc00217 	ldw	ra,8(sp)
 1009d18:	dc400117 	ldw	r17,4(sp)
 1009d1c:	dc000017 	ldw	r16,0(sp)
 1009d20:	dec00304 	addi	sp,sp,12
 1009d24:	f800283a 	ret
 1009d28:	80800017 	ldw	r2,0(r16)
 1009d2c:	103ff826 	beq	r2,zero,1009d10 <_lseek_r+0x3c>
 1009d30:	88800015 	stw	r2,0(r17)
 1009d34:	1805883a 	mov	r2,r3
 1009d38:	dfc00217 	ldw	ra,8(sp)
 1009d3c:	dc400117 	ldw	r17,4(sp)
 1009d40:	dc000017 	ldw	r16,0(sp)
 1009d44:	dec00304 	addi	sp,sp,12
 1009d48:	f800283a 	ret

01009d4c <memchr>:
 1009d4c:	008000c4 	movi	r2,3
 1009d50:	29403fcc 	andi	r5,r5,255
 1009d54:	2007883a 	mov	r3,r4
 1009d58:	1180022e 	bgeu	r2,r6,1009d64 <memchr+0x18>
 1009d5c:	2084703a 	and	r2,r4,r2
 1009d60:	10000b26 	beq	r2,zero,1009d90 <memchr+0x44>
 1009d64:	313fffc4 	addi	r4,r6,-1
 1009d68:	3000051e 	bne	r6,zero,1009d80 <memchr+0x34>
 1009d6c:	00002c06 	br	1009e20 <memchr+0xd4>
 1009d70:	213fffc4 	addi	r4,r4,-1
 1009d74:	00bfffc4 	movi	r2,-1
 1009d78:	18c00044 	addi	r3,r3,1
 1009d7c:	20802826 	beq	r4,r2,1009e20 <memchr+0xd4>
 1009d80:	18800003 	ldbu	r2,0(r3)
 1009d84:	28bffa1e 	bne	r5,r2,1009d70 <memchr+0x24>
 1009d88:	1805883a 	mov	r2,r3
 1009d8c:	f800283a 	ret
 1009d90:	0011883a 	mov	r8,zero
 1009d94:	0007883a 	mov	r3,zero
 1009d98:	01c00104 	movi	r7,4
 1009d9c:	4004923a 	slli	r2,r8,8
 1009da0:	18c00044 	addi	r3,r3,1
 1009da4:	1151883a 	add	r8,r2,r5
 1009da8:	19fffc1e 	bne	r3,r7,1009d9c <memchr+0x50>
 1009dac:	02bfbff4 	movhi	r10,65279
 1009db0:	52bfbfc4 	addi	r10,r10,-257
 1009db4:	02602074 	movhi	r9,32897
 1009db8:	4a602004 	addi	r9,r9,-32640
 1009dbc:	02c000c4 	movi	r11,3
 1009dc0:	20800017 	ldw	r2,0(r4)
 1009dc4:	31bfff04 	addi	r6,r6,-4
 1009dc8:	200f883a 	mov	r7,r4
 1009dcc:	1204f03a 	xor	r2,r2,r8
 1009dd0:	1287883a 	add	r3,r2,r10
 1009dd4:	1a46703a 	and	r3,r3,r9
 1009dd8:	0084303a 	nor	r2,zero,r2
 1009ddc:	10c4703a 	and	r2,r2,r3
 1009de0:	10000b26 	beq	r2,zero,1009e10 <memchr+0xc4>
 1009de4:	20800003 	ldbu	r2,0(r4)
 1009de8:	28800f26 	beq	r5,r2,1009e28 <memchr+0xdc>
 1009dec:	20800043 	ldbu	r2,1(r4)
 1009df0:	21c00044 	addi	r7,r4,1
 1009df4:	28800c26 	beq	r5,r2,1009e28 <memchr+0xdc>
 1009df8:	20800083 	ldbu	r2,2(r4)
 1009dfc:	21c00084 	addi	r7,r4,2
 1009e00:	28800926 	beq	r5,r2,1009e28 <memchr+0xdc>
 1009e04:	208000c3 	ldbu	r2,3(r4)
 1009e08:	21c000c4 	addi	r7,r4,3
 1009e0c:	28800626 	beq	r5,r2,1009e28 <memchr+0xdc>
 1009e10:	21000104 	addi	r4,r4,4
 1009e14:	59bfea36 	bltu	r11,r6,1009dc0 <memchr+0x74>
 1009e18:	2007883a 	mov	r3,r4
 1009e1c:	003fd106 	br	1009d64 <memchr+0x18>
 1009e20:	0005883a 	mov	r2,zero
 1009e24:	f800283a 	ret
 1009e28:	3805883a 	mov	r2,r7
 1009e2c:	f800283a 	ret

01009e30 <memcpy>:
 1009e30:	01c003c4 	movi	r7,15
 1009e34:	2007883a 	mov	r3,r4
 1009e38:	3980032e 	bgeu	r7,r6,1009e48 <memcpy+0x18>
 1009e3c:	2904b03a 	or	r2,r5,r4
 1009e40:	108000cc 	andi	r2,r2,3
 1009e44:	10000926 	beq	r2,zero,1009e6c <memcpy+0x3c>
 1009e48:	30000626 	beq	r6,zero,1009e64 <memcpy+0x34>
 1009e4c:	30cd883a 	add	r6,r6,r3
 1009e50:	28800003 	ldbu	r2,0(r5)
 1009e54:	29400044 	addi	r5,r5,1
 1009e58:	18800005 	stb	r2,0(r3)
 1009e5c:	18c00044 	addi	r3,r3,1
 1009e60:	30fffb1e 	bne	r6,r3,1009e50 <memcpy+0x20>
 1009e64:	2005883a 	mov	r2,r4
 1009e68:	f800283a 	ret
 1009e6c:	3811883a 	mov	r8,r7
 1009e70:	200f883a 	mov	r7,r4
 1009e74:	28c00017 	ldw	r3,0(r5)
 1009e78:	31bffc04 	addi	r6,r6,-16
 1009e7c:	38c00015 	stw	r3,0(r7)
 1009e80:	28800117 	ldw	r2,4(r5)
 1009e84:	38800115 	stw	r2,4(r7)
 1009e88:	28c00217 	ldw	r3,8(r5)
 1009e8c:	38c00215 	stw	r3,8(r7)
 1009e90:	28800317 	ldw	r2,12(r5)
 1009e94:	29400404 	addi	r5,r5,16
 1009e98:	38800315 	stw	r2,12(r7)
 1009e9c:	39c00404 	addi	r7,r7,16
 1009ea0:	41bff436 	bltu	r8,r6,1009e74 <memcpy+0x44>
 1009ea4:	008000c4 	movi	r2,3
 1009ea8:	1180072e 	bgeu	r2,r6,1009ec8 <memcpy+0x98>
 1009eac:	1007883a 	mov	r3,r2
 1009eb0:	28800017 	ldw	r2,0(r5)
 1009eb4:	31bfff04 	addi	r6,r6,-4
 1009eb8:	29400104 	addi	r5,r5,4
 1009ebc:	38800015 	stw	r2,0(r7)
 1009ec0:	39c00104 	addi	r7,r7,4
 1009ec4:	19bffa36 	bltu	r3,r6,1009eb0 <memcpy+0x80>
 1009ec8:	3807883a 	mov	r3,r7
 1009ecc:	003fde06 	br	1009e48 <memcpy+0x18>

01009ed0 <memmove>:
 1009ed0:	2807883a 	mov	r3,r5
 1009ed4:	2011883a 	mov	r8,r4
 1009ed8:	29000c2e 	bgeu	r5,r4,1009f0c <memmove+0x3c>
 1009edc:	298f883a 	add	r7,r5,r6
 1009ee0:	21c00a2e 	bgeu	r4,r7,1009f0c <memmove+0x3c>
 1009ee4:	30000726 	beq	r6,zero,1009f04 <memmove+0x34>
 1009ee8:	2187883a 	add	r3,r4,r6
 1009eec:	198dc83a 	sub	r6,r3,r6
 1009ef0:	39ffffc4 	addi	r7,r7,-1
 1009ef4:	38800003 	ldbu	r2,0(r7)
 1009ef8:	18ffffc4 	addi	r3,r3,-1
 1009efc:	18800005 	stb	r2,0(r3)
 1009f00:	19bffb1e 	bne	r3,r6,1009ef0 <memmove+0x20>
 1009f04:	2005883a 	mov	r2,r4
 1009f08:	f800283a 	ret
 1009f0c:	01c003c4 	movi	r7,15
 1009f10:	39800a36 	bltu	r7,r6,1009f3c <memmove+0x6c>
 1009f14:	303ffb26 	beq	r6,zero,1009f04 <memmove+0x34>
 1009f18:	400f883a 	mov	r7,r8
 1009f1c:	320d883a 	add	r6,r6,r8
 1009f20:	28800003 	ldbu	r2,0(r5)
 1009f24:	29400044 	addi	r5,r5,1
 1009f28:	38800005 	stb	r2,0(r7)
 1009f2c:	39c00044 	addi	r7,r7,1
 1009f30:	39bffb1e 	bne	r7,r6,1009f20 <memmove+0x50>
 1009f34:	2005883a 	mov	r2,r4
 1009f38:	f800283a 	ret
 1009f3c:	1904b03a 	or	r2,r3,r4
 1009f40:	108000cc 	andi	r2,r2,3
 1009f44:	103ff31e 	bne	r2,zero,1009f14 <memmove+0x44>
 1009f48:	3811883a 	mov	r8,r7
 1009f4c:	180b883a 	mov	r5,r3
 1009f50:	200f883a 	mov	r7,r4
 1009f54:	28c00017 	ldw	r3,0(r5)
 1009f58:	31bffc04 	addi	r6,r6,-16
 1009f5c:	38c00015 	stw	r3,0(r7)
 1009f60:	28800117 	ldw	r2,4(r5)
 1009f64:	38800115 	stw	r2,4(r7)
 1009f68:	28c00217 	ldw	r3,8(r5)
 1009f6c:	38c00215 	stw	r3,8(r7)
 1009f70:	28800317 	ldw	r2,12(r5)
 1009f74:	29400404 	addi	r5,r5,16
 1009f78:	38800315 	stw	r2,12(r7)
 1009f7c:	39c00404 	addi	r7,r7,16
 1009f80:	41bff436 	bltu	r8,r6,1009f54 <memmove+0x84>
 1009f84:	008000c4 	movi	r2,3
 1009f88:	1180072e 	bgeu	r2,r6,1009fa8 <memmove+0xd8>
 1009f8c:	1007883a 	mov	r3,r2
 1009f90:	28800017 	ldw	r2,0(r5)
 1009f94:	31bfff04 	addi	r6,r6,-4
 1009f98:	29400104 	addi	r5,r5,4
 1009f9c:	38800015 	stw	r2,0(r7)
 1009fa0:	39c00104 	addi	r7,r7,4
 1009fa4:	19bffa36 	bltu	r3,r6,1009f90 <memmove+0xc0>
 1009fa8:	3811883a 	mov	r8,r7
 1009fac:	003fd906 	br	1009f14 <memmove+0x44>

01009fb0 <_Bfree>:
 1009fb0:	28000826 	beq	r5,zero,1009fd4 <_Bfree+0x24>
 1009fb4:	28800117 	ldw	r2,4(r5)
 1009fb8:	21001317 	ldw	r4,76(r4)
 1009fbc:	1085883a 	add	r2,r2,r2
 1009fc0:	1085883a 	add	r2,r2,r2
 1009fc4:	1105883a 	add	r2,r2,r4
 1009fc8:	10c00017 	ldw	r3,0(r2)
 1009fcc:	28c00015 	stw	r3,0(r5)
 1009fd0:	11400015 	stw	r5,0(r2)
 1009fd4:	f800283a 	ret

01009fd8 <__hi0bits>:
 1009fd8:	20bfffec 	andhi	r2,r4,65535
 1009fdc:	10001426 	beq	r2,zero,100a030 <__hi0bits+0x58>
 1009fe0:	0007883a 	mov	r3,zero
 1009fe4:	20bfc02c 	andhi	r2,r4,65280
 1009fe8:	1000021e 	bne	r2,zero,1009ff4 <__hi0bits+0x1c>
 1009fec:	2008923a 	slli	r4,r4,8
 1009ff0:	18c00204 	addi	r3,r3,8
 1009ff4:	20bc002c 	andhi	r2,r4,61440
 1009ff8:	1000021e 	bne	r2,zero,100a004 <__hi0bits+0x2c>
 1009ffc:	2008913a 	slli	r4,r4,4
 100a000:	18c00104 	addi	r3,r3,4
 100a004:	20b0002c 	andhi	r2,r4,49152
 100a008:	1000031e 	bne	r2,zero,100a018 <__hi0bits+0x40>
 100a00c:	2105883a 	add	r2,r4,r4
 100a010:	18c00084 	addi	r3,r3,2
 100a014:	1089883a 	add	r4,r2,r2
 100a018:	20000316 	blt	r4,zero,100a028 <__hi0bits+0x50>
 100a01c:	2090002c 	andhi	r2,r4,16384
 100a020:	10000626 	beq	r2,zero,100a03c <__hi0bits+0x64>
 100a024:	18c00044 	addi	r3,r3,1
 100a028:	1805883a 	mov	r2,r3
 100a02c:	f800283a 	ret
 100a030:	2008943a 	slli	r4,r4,16
 100a034:	00c00404 	movi	r3,16
 100a038:	003fea06 	br	1009fe4 <__hi0bits+0xc>
 100a03c:	00c00804 	movi	r3,32
 100a040:	1805883a 	mov	r2,r3
 100a044:	f800283a 	ret

0100a048 <__lo0bits>:
 100a048:	20c00017 	ldw	r3,0(r4)
 100a04c:	188001cc 	andi	r2,r3,7
 100a050:	10000a26 	beq	r2,zero,100a07c <__lo0bits+0x34>
 100a054:	1880004c 	andi	r2,r3,1
 100a058:	1005003a 	cmpeq	r2,r2,zero
 100a05c:	10002126 	beq	r2,zero,100a0e4 <__lo0bits+0x9c>
 100a060:	1880008c 	andi	r2,r3,2
 100a064:	1000251e 	bne	r2,zero,100a0fc <__lo0bits+0xb4>
 100a068:	1804d0ba 	srli	r2,r3,2
 100a06c:	01400084 	movi	r5,2
 100a070:	20800015 	stw	r2,0(r4)
 100a074:	2805883a 	mov	r2,r5
 100a078:	f800283a 	ret
 100a07c:	18bfffcc 	andi	r2,r3,65535
 100a080:	10001526 	beq	r2,zero,100a0d8 <__lo0bits+0x90>
 100a084:	000b883a 	mov	r5,zero
 100a088:	18803fcc 	andi	r2,r3,255
 100a08c:	1000021e 	bne	r2,zero,100a098 <__lo0bits+0x50>
 100a090:	1806d23a 	srli	r3,r3,8
 100a094:	29400204 	addi	r5,r5,8
 100a098:	188003cc 	andi	r2,r3,15
 100a09c:	1000021e 	bne	r2,zero,100a0a8 <__lo0bits+0x60>
 100a0a0:	1806d13a 	srli	r3,r3,4
 100a0a4:	29400104 	addi	r5,r5,4
 100a0a8:	188000cc 	andi	r2,r3,3
 100a0ac:	1000021e 	bne	r2,zero,100a0b8 <__lo0bits+0x70>
 100a0b0:	1806d0ba 	srli	r3,r3,2
 100a0b4:	29400084 	addi	r5,r5,2
 100a0b8:	1880004c 	andi	r2,r3,1
 100a0bc:	1000031e 	bne	r2,zero,100a0cc <__lo0bits+0x84>
 100a0c0:	1806d07a 	srli	r3,r3,1
 100a0c4:	18000a26 	beq	r3,zero,100a0f0 <__lo0bits+0xa8>
 100a0c8:	29400044 	addi	r5,r5,1
 100a0cc:	2805883a 	mov	r2,r5
 100a0d0:	20c00015 	stw	r3,0(r4)
 100a0d4:	f800283a 	ret
 100a0d8:	1806d43a 	srli	r3,r3,16
 100a0dc:	01400404 	movi	r5,16
 100a0e0:	003fe906 	br	100a088 <__lo0bits+0x40>
 100a0e4:	000b883a 	mov	r5,zero
 100a0e8:	2805883a 	mov	r2,r5
 100a0ec:	f800283a 	ret
 100a0f0:	01400804 	movi	r5,32
 100a0f4:	2805883a 	mov	r2,r5
 100a0f8:	f800283a 	ret
 100a0fc:	1804d07a 	srli	r2,r3,1
 100a100:	01400044 	movi	r5,1
 100a104:	20800015 	stw	r2,0(r4)
 100a108:	003fda06 	br	100a074 <__lo0bits+0x2c>

0100a10c <__mcmp>:
 100a10c:	20800417 	ldw	r2,16(r4)
 100a110:	28c00417 	ldw	r3,16(r5)
 100a114:	10cfc83a 	sub	r7,r2,r3
 100a118:	38000c1e 	bne	r7,zero,100a14c <__mcmp+0x40>
 100a11c:	18c5883a 	add	r2,r3,r3
 100a120:	1085883a 	add	r2,r2,r2
 100a124:	10c00504 	addi	r3,r2,20
 100a128:	21000504 	addi	r4,r4,20
 100a12c:	28cb883a 	add	r5,r5,r3
 100a130:	2085883a 	add	r2,r4,r2
 100a134:	10bfff04 	addi	r2,r2,-4
 100a138:	297fff04 	addi	r5,r5,-4
 100a13c:	11800017 	ldw	r6,0(r2)
 100a140:	28c00017 	ldw	r3,0(r5)
 100a144:	30c0031e 	bne	r6,r3,100a154 <__mcmp+0x48>
 100a148:	20bffa36 	bltu	r4,r2,100a134 <__mcmp+0x28>
 100a14c:	3805883a 	mov	r2,r7
 100a150:	f800283a 	ret
 100a154:	30c00336 	bltu	r6,r3,100a164 <__mcmp+0x58>
 100a158:	01c00044 	movi	r7,1
 100a15c:	3805883a 	mov	r2,r7
 100a160:	f800283a 	ret
 100a164:	01ffffc4 	movi	r7,-1
 100a168:	003ff806 	br	100a14c <__mcmp+0x40>

0100a16c <__ulp>:
 100a16c:	295ffc2c 	andhi	r5,r5,32752
 100a170:	013f3034 	movhi	r4,64704
 100a174:	290b883a 	add	r5,r5,r4
 100a178:	0145c83a 	sub	r2,zero,r5
 100a17c:	1007d53a 	srai	r3,r2,20
 100a180:	000d883a 	mov	r6,zero
 100a184:	0140040e 	bge	zero,r5,100a198 <__ulp+0x2c>
 100a188:	280f883a 	mov	r7,r5
 100a18c:	3807883a 	mov	r3,r7
 100a190:	3005883a 	mov	r2,r6
 100a194:	f800283a 	ret
 100a198:	008004c4 	movi	r2,19
 100a19c:	193ffb04 	addi	r4,r3,-20
 100a1a0:	10c00c0e 	bge	r2,r3,100a1d4 <__ulp+0x68>
 100a1a4:	008007c4 	movi	r2,31
 100a1a8:	1107c83a 	sub	r3,r2,r4
 100a1ac:	00800784 	movi	r2,30
 100a1b0:	01400044 	movi	r5,1
 100a1b4:	11000216 	blt	r2,r4,100a1c0 <__ulp+0x54>
 100a1b8:	00800044 	movi	r2,1
 100a1bc:	10ca983a 	sll	r5,r2,r3
 100a1c0:	000f883a 	mov	r7,zero
 100a1c4:	280d883a 	mov	r6,r5
 100a1c8:	3807883a 	mov	r3,r7
 100a1cc:	3005883a 	mov	r2,r6
 100a1d0:	f800283a 	ret
 100a1d4:	00800234 	movhi	r2,8
 100a1d8:	10cfd83a 	sra	r7,r2,r3
 100a1dc:	000d883a 	mov	r6,zero
 100a1e0:	3005883a 	mov	r2,r6
 100a1e4:	3807883a 	mov	r3,r7
 100a1e8:	f800283a 	ret

0100a1ec <__b2d>:
 100a1ec:	20800417 	ldw	r2,16(r4)
 100a1f0:	defff904 	addi	sp,sp,-28
 100a1f4:	dd000415 	stw	r20,16(sp)
 100a1f8:	1085883a 	add	r2,r2,r2
 100a1fc:	25000504 	addi	r20,r4,20
 100a200:	1085883a 	add	r2,r2,r2
 100a204:	dc000015 	stw	r16,0(sp)
 100a208:	a0a1883a 	add	r16,r20,r2
 100a20c:	dd400515 	stw	r21,20(sp)
 100a210:	857fff17 	ldw	r21,-4(r16)
 100a214:	dc400115 	stw	r17,4(sp)
 100a218:	dfc00615 	stw	ra,24(sp)
 100a21c:	a809883a 	mov	r4,r21
 100a220:	2823883a 	mov	r17,r5
 100a224:	dcc00315 	stw	r19,12(sp)
 100a228:	dc800215 	stw	r18,8(sp)
 100a22c:	1009fd80 	call	1009fd8 <__hi0bits>
 100a230:	100b883a 	mov	r5,r2
 100a234:	00800804 	movi	r2,32
 100a238:	1145c83a 	sub	r2,r2,r5
 100a23c:	88800015 	stw	r2,0(r17)
 100a240:	00800284 	movi	r2,10
 100a244:	80ffff04 	addi	r3,r16,-4
 100a248:	11401416 	blt	r2,r5,100a29c <__b2d+0xb0>
 100a24c:	008002c4 	movi	r2,11
 100a250:	1149c83a 	sub	r4,r2,r5
 100a254:	a0c02736 	bltu	r20,r3,100a2f4 <__b2d+0x108>
 100a258:	000d883a 	mov	r6,zero
 100a25c:	28800544 	addi	r2,r5,21
 100a260:	a906d83a 	srl	r3,r21,r4
 100a264:	a884983a 	sll	r2,r21,r2
 100a268:	1ccffc34 	orhi	r19,r3,16368
 100a26c:	11a4b03a 	or	r18,r2,r6
 100a270:	9005883a 	mov	r2,r18
 100a274:	9807883a 	mov	r3,r19
 100a278:	dfc00617 	ldw	ra,24(sp)
 100a27c:	dd400517 	ldw	r21,20(sp)
 100a280:	dd000417 	ldw	r20,16(sp)
 100a284:	dcc00317 	ldw	r19,12(sp)
 100a288:	dc800217 	ldw	r18,8(sp)
 100a28c:	dc400117 	ldw	r17,4(sp)
 100a290:	dc000017 	ldw	r16,0(sp)
 100a294:	dec00704 	addi	sp,sp,28
 100a298:	f800283a 	ret
 100a29c:	a0c00e36 	bltu	r20,r3,100a2d8 <__b2d+0xec>
 100a2a0:	293ffd44 	addi	r4,r5,-11
 100a2a4:	000d883a 	mov	r6,zero
 100a2a8:	20000f26 	beq	r4,zero,100a2e8 <__b2d+0xfc>
 100a2ac:	00800804 	movi	r2,32
 100a2b0:	110bc83a 	sub	r5,r2,r4
 100a2b4:	a0c01236 	bltu	r20,r3,100a300 <__b2d+0x114>
 100a2b8:	000f883a 	mov	r7,zero
 100a2bc:	a904983a 	sll	r2,r21,r4
 100a2c0:	3146d83a 	srl	r3,r6,r5
 100a2c4:	3108983a 	sll	r4,r6,r4
 100a2c8:	108ffc34 	orhi	r2,r2,16368
 100a2cc:	18a6b03a 	or	r19,r3,r2
 100a2d0:	3924b03a 	or	r18,r7,r4
 100a2d4:	003fe606 	br	100a270 <__b2d+0x84>
 100a2d8:	293ffd44 	addi	r4,r5,-11
 100a2dc:	81bffe17 	ldw	r6,-8(r16)
 100a2e0:	80fffe04 	addi	r3,r16,-8
 100a2e4:	203ff11e 	bne	r4,zero,100a2ac <__b2d+0xc0>
 100a2e8:	accffc34 	orhi	r19,r21,16368
 100a2ec:	3025883a 	mov	r18,r6
 100a2f0:	003fdf06 	br	100a270 <__b2d+0x84>
 100a2f4:	18bfff17 	ldw	r2,-4(r3)
 100a2f8:	110cd83a 	srl	r6,r2,r4
 100a2fc:	003fd706 	br	100a25c <__b2d+0x70>
 100a300:	18bfff17 	ldw	r2,-4(r3)
 100a304:	114ed83a 	srl	r7,r2,r5
 100a308:	003fec06 	br	100a2bc <__b2d+0xd0>

0100a30c <__ratio>:
 100a30c:	defff904 	addi	sp,sp,-28
 100a310:	dc400215 	stw	r17,8(sp)
 100a314:	2823883a 	mov	r17,r5
 100a318:	d80b883a 	mov	r5,sp
 100a31c:	dfc00615 	stw	ra,24(sp)
 100a320:	dd000515 	stw	r20,20(sp)
 100a324:	dcc00415 	stw	r19,16(sp)
 100a328:	dc800315 	stw	r18,12(sp)
 100a32c:	2025883a 	mov	r18,r4
 100a330:	100a1ec0 	call	100a1ec <__b2d>
 100a334:	8809883a 	mov	r4,r17
 100a338:	d9400104 	addi	r5,sp,4
 100a33c:	1027883a 	mov	r19,r2
 100a340:	1829883a 	mov	r20,r3
 100a344:	100a1ec0 	call	100a1ec <__b2d>
 100a348:	89000417 	ldw	r4,16(r17)
 100a34c:	91c00417 	ldw	r7,16(r18)
 100a350:	d9800117 	ldw	r6,4(sp)
 100a354:	180b883a 	mov	r5,r3
 100a358:	390fc83a 	sub	r7,r7,r4
 100a35c:	1009883a 	mov	r4,r2
 100a360:	d8800017 	ldw	r2,0(sp)
 100a364:	380e917a 	slli	r7,r7,5
 100a368:	2011883a 	mov	r8,r4
 100a36c:	1185c83a 	sub	r2,r2,r6
 100a370:	11c5883a 	add	r2,r2,r7
 100a374:	1006953a 	slli	r3,r2,20
 100a378:	2813883a 	mov	r9,r5
 100a37c:	00800d0e 	bge	zero,r2,100a3b4 <__ratio+0xa8>
 100a380:	1d29883a 	add	r20,r3,r20
 100a384:	a00b883a 	mov	r5,r20
 100a388:	480f883a 	mov	r7,r9
 100a38c:	9809883a 	mov	r4,r19
 100a390:	400d883a 	mov	r6,r8
 100a394:	100d1680 	call	100d168 <__divdf3>
 100a398:	dfc00617 	ldw	ra,24(sp)
 100a39c:	dd000517 	ldw	r20,20(sp)
 100a3a0:	dcc00417 	ldw	r19,16(sp)
 100a3a4:	dc800317 	ldw	r18,12(sp)
 100a3a8:	dc400217 	ldw	r17,8(sp)
 100a3ac:	dec00704 	addi	sp,sp,28
 100a3b0:	f800283a 	ret
 100a3b4:	28d3c83a 	sub	r9,r5,r3
 100a3b8:	003ff206 	br	100a384 <__ratio+0x78>

0100a3bc <_mprec_log10>:
 100a3bc:	defffe04 	addi	sp,sp,-8
 100a3c0:	008005c4 	movi	r2,23
 100a3c4:	dc000015 	stw	r16,0(sp)
 100a3c8:	dfc00115 	stw	ra,4(sp)
 100a3cc:	2021883a 	mov	r16,r4
 100a3d0:	11000c16 	blt	r2,r4,100a404 <_mprec_log10+0x48>
 100a3d4:	200490fa 	slli	r2,r4,3
 100a3d8:	00c04074 	movhi	r3,257
 100a3dc:	18c71c04 	addi	r3,r3,7280
 100a3e0:	10c5883a 	add	r2,r2,r3
 100a3e4:	12400117 	ldw	r9,4(r2)
 100a3e8:	12000017 	ldw	r8,0(r2)
 100a3ec:	4807883a 	mov	r3,r9
 100a3f0:	4005883a 	mov	r2,r8
 100a3f4:	dfc00117 	ldw	ra,4(sp)
 100a3f8:	dc000017 	ldw	r16,0(sp)
 100a3fc:	dec00204 	addi	sp,sp,8
 100a400:	f800283a 	ret
 100a404:	0011883a 	mov	r8,zero
 100a408:	024ffc34 	movhi	r9,16368
 100a40c:	0005883a 	mov	r2,zero
 100a410:	00d00934 	movhi	r3,16420
 100a414:	480b883a 	mov	r5,r9
 100a418:	4009883a 	mov	r4,r8
 100a41c:	180f883a 	mov	r7,r3
 100a420:	100d883a 	mov	r6,r2
 100a424:	100cda40 	call	100cda4 <__muldf3>
 100a428:	843fffc4 	addi	r16,r16,-1
 100a42c:	1011883a 	mov	r8,r2
 100a430:	1813883a 	mov	r9,r3
 100a434:	803ff51e 	bne	r16,zero,100a40c <_mprec_log10+0x50>
 100a438:	4005883a 	mov	r2,r8
 100a43c:	4807883a 	mov	r3,r9
 100a440:	dfc00117 	ldw	ra,4(sp)
 100a444:	dc000017 	ldw	r16,0(sp)
 100a448:	dec00204 	addi	sp,sp,8
 100a44c:	f800283a 	ret

0100a450 <__copybits>:
 100a450:	297fffc4 	addi	r5,r5,-1
 100a454:	30800417 	ldw	r2,16(r6)
 100a458:	280bd17a 	srai	r5,r5,5
 100a45c:	31800504 	addi	r6,r6,20
 100a460:	1085883a 	add	r2,r2,r2
 100a464:	294b883a 	add	r5,r5,r5
 100a468:	294b883a 	add	r5,r5,r5
 100a46c:	1085883a 	add	r2,r2,r2
 100a470:	290b883a 	add	r5,r5,r4
 100a474:	3087883a 	add	r3,r6,r2
 100a478:	29400104 	addi	r5,r5,4
 100a47c:	30c0052e 	bgeu	r6,r3,100a494 <__copybits+0x44>
 100a480:	30800017 	ldw	r2,0(r6)
 100a484:	31800104 	addi	r6,r6,4
 100a488:	20800015 	stw	r2,0(r4)
 100a48c:	21000104 	addi	r4,r4,4
 100a490:	30fffb36 	bltu	r6,r3,100a480 <__copybits+0x30>
 100a494:	2140032e 	bgeu	r4,r5,100a4a4 <__copybits+0x54>
 100a498:	20000015 	stw	zero,0(r4)
 100a49c:	21000104 	addi	r4,r4,4
 100a4a0:	217ffd36 	bltu	r4,r5,100a498 <__copybits+0x48>
 100a4a4:	f800283a 	ret

0100a4a8 <__any_on>:
 100a4a8:	20800417 	ldw	r2,16(r4)
 100a4ac:	2807d17a 	srai	r3,r5,5
 100a4b0:	21000504 	addi	r4,r4,20
 100a4b4:	10c00d0e 	bge	r2,r3,100a4ec <__any_on+0x44>
 100a4b8:	1085883a 	add	r2,r2,r2
 100a4bc:	1085883a 	add	r2,r2,r2
 100a4c0:	208d883a 	add	r6,r4,r2
 100a4c4:	2180182e 	bgeu	r4,r6,100a528 <__any_on+0x80>
 100a4c8:	30bfff17 	ldw	r2,-4(r6)
 100a4cc:	30ffff04 	addi	r3,r6,-4
 100a4d0:	1000041e 	bne	r2,zero,100a4e4 <__any_on+0x3c>
 100a4d4:	20c0142e 	bgeu	r4,r3,100a528 <__any_on+0x80>
 100a4d8:	18ffff04 	addi	r3,r3,-4
 100a4dc:	18800017 	ldw	r2,0(r3)
 100a4e0:	103ffc26 	beq	r2,zero,100a4d4 <__any_on+0x2c>
 100a4e4:	00800044 	movi	r2,1
 100a4e8:	f800283a 	ret
 100a4ec:	18800a0e 	bge	r3,r2,100a518 <__any_on+0x70>
 100a4f0:	294007cc 	andi	r5,r5,31
 100a4f4:	28000826 	beq	r5,zero,100a518 <__any_on+0x70>
 100a4f8:	18c5883a 	add	r2,r3,r3
 100a4fc:	1085883a 	add	r2,r2,r2
 100a500:	208d883a 	add	r6,r4,r2
 100a504:	30c00017 	ldw	r3,0(r6)
 100a508:	1944d83a 	srl	r2,r3,r5
 100a50c:	1144983a 	sll	r2,r2,r5
 100a510:	18bff41e 	bne	r3,r2,100a4e4 <__any_on+0x3c>
 100a514:	003feb06 	br	100a4c4 <__any_on+0x1c>
 100a518:	18c5883a 	add	r2,r3,r3
 100a51c:	1085883a 	add	r2,r2,r2
 100a520:	208d883a 	add	r6,r4,r2
 100a524:	003fe706 	br	100a4c4 <__any_on+0x1c>
 100a528:	0005883a 	mov	r2,zero
 100a52c:	f800283a 	ret

0100a530 <_Balloc>:
 100a530:	20c01317 	ldw	r3,76(r4)
 100a534:	defffb04 	addi	sp,sp,-20
 100a538:	dcc00315 	stw	r19,12(sp)
 100a53c:	dc800215 	stw	r18,8(sp)
 100a540:	dfc00415 	stw	ra,16(sp)
 100a544:	2825883a 	mov	r18,r5
 100a548:	dc400115 	stw	r17,4(sp)
 100a54c:	dc000015 	stw	r16,0(sp)
 100a550:	2027883a 	mov	r19,r4
 100a554:	01800404 	movi	r6,16
 100a558:	01400104 	movi	r5,4
 100a55c:	18001726 	beq	r3,zero,100a5bc <_Balloc+0x8c>
 100a560:	01400044 	movi	r5,1
 100a564:	9485883a 	add	r2,r18,r18
 100a568:	2ca2983a 	sll	r17,r5,r18
 100a56c:	1085883a 	add	r2,r2,r2
 100a570:	10c7883a 	add	r3,r2,r3
 100a574:	1c000017 	ldw	r16,0(r3)
 100a578:	8c4d883a 	add	r6,r17,r17
 100a57c:	318d883a 	add	r6,r6,r6
 100a580:	9809883a 	mov	r4,r19
 100a584:	31800504 	addi	r6,r6,20
 100a588:	80001226 	beq	r16,zero,100a5d4 <_Balloc+0xa4>
 100a58c:	80800017 	ldw	r2,0(r16)
 100a590:	18800015 	stw	r2,0(r3)
 100a594:	80000415 	stw	zero,16(r16)
 100a598:	80000315 	stw	zero,12(r16)
 100a59c:	8005883a 	mov	r2,r16
 100a5a0:	dfc00417 	ldw	ra,16(sp)
 100a5a4:	dcc00317 	ldw	r19,12(sp)
 100a5a8:	dc800217 	ldw	r18,8(sp)
 100a5ac:	dc400117 	ldw	r17,4(sp)
 100a5b0:	dc000017 	ldw	r16,0(sp)
 100a5b4:	dec00504 	addi	sp,sp,20
 100a5b8:	f800283a 	ret
 100a5bc:	100bb0c0 	call	100bb0c <_calloc_r>
 100a5c0:	1007883a 	mov	r3,r2
 100a5c4:	0021883a 	mov	r16,zero
 100a5c8:	98801315 	stw	r2,76(r19)
 100a5cc:	103fe41e 	bne	r2,zero,100a560 <_Balloc+0x30>
 100a5d0:	003ff206 	br	100a59c <_Balloc+0x6c>
 100a5d4:	100bb0c0 	call	100bb0c <_calloc_r>
 100a5d8:	103ff026 	beq	r2,zero,100a59c <_Balloc+0x6c>
 100a5dc:	1021883a 	mov	r16,r2
 100a5e0:	14800115 	stw	r18,4(r2)
 100a5e4:	14400215 	stw	r17,8(r2)
 100a5e8:	003fea06 	br	100a594 <_Balloc+0x64>

0100a5ec <__d2b>:
 100a5ec:	defff504 	addi	sp,sp,-44
 100a5f0:	dcc00515 	stw	r19,20(sp)
 100a5f4:	04c00044 	movi	r19,1
 100a5f8:	dc000215 	stw	r16,8(sp)
 100a5fc:	2821883a 	mov	r16,r5
 100a600:	980b883a 	mov	r5,r19
 100a604:	ddc00915 	stw	r23,36(sp)
 100a608:	dd800815 	stw	r22,32(sp)
 100a60c:	dd400715 	stw	r21,28(sp)
 100a610:	dd000615 	stw	r20,24(sp)
 100a614:	dc800415 	stw	r18,16(sp)
 100a618:	dc400315 	stw	r17,12(sp)
 100a61c:	dfc00a15 	stw	ra,40(sp)
 100a620:	3023883a 	mov	r17,r6
 100a624:	382d883a 	mov	r22,r7
 100a628:	ddc00b17 	ldw	r23,44(sp)
 100a62c:	100a5300 	call	100a530 <_Balloc>
 100a630:	1025883a 	mov	r18,r2
 100a634:	00a00034 	movhi	r2,32768
 100a638:	10bfffc4 	addi	r2,r2,-1
 100a63c:	8888703a 	and	r4,r17,r2
 100a640:	202ad53a 	srli	r21,r4,20
 100a644:	00800434 	movhi	r2,16
 100a648:	10bfffc4 	addi	r2,r2,-1
 100a64c:	8886703a 	and	r3,r17,r2
 100a650:	a829003a 	cmpeq	r20,r21,zero
 100a654:	800b883a 	mov	r5,r16
 100a658:	d8c00115 	stw	r3,4(sp)
 100a65c:	94000504 	addi	r16,r18,20
 100a660:	a000021e 	bne	r20,zero,100a66c <__d2b+0x80>
 100a664:	18c00434 	orhi	r3,r3,16
 100a668:	d8c00115 	stw	r3,4(sp)
 100a66c:	28002726 	beq	r5,zero,100a70c <__d2b+0x120>
 100a670:	d809883a 	mov	r4,sp
 100a674:	d9400015 	stw	r5,0(sp)
 100a678:	100a0480 	call	100a048 <__lo0bits>
 100a67c:	100d883a 	mov	r6,r2
 100a680:	10003526 	beq	r2,zero,100a758 <__d2b+0x16c>
 100a684:	d8c00117 	ldw	r3,4(sp)
 100a688:	00800804 	movi	r2,32
 100a68c:	1185c83a 	sub	r2,r2,r6
 100a690:	d9000017 	ldw	r4,0(sp)
 100a694:	1886983a 	sll	r3,r3,r2
 100a698:	1906b03a 	or	r3,r3,r4
 100a69c:	90c00515 	stw	r3,20(r18)
 100a6a0:	d8c00117 	ldw	r3,4(sp)
 100a6a4:	1986d83a 	srl	r3,r3,r6
 100a6a8:	d8c00115 	stw	r3,4(sp)
 100a6ac:	180b003a 	cmpeq	r5,r3,zero
 100a6b0:	00800084 	movi	r2,2
 100a6b4:	114bc83a 	sub	r5,r2,r5
 100a6b8:	80c00115 	stw	r3,4(r16)
 100a6bc:	91400415 	stw	r5,16(r18)
 100a6c0:	a0001a1e 	bne	r20,zero,100a72c <__d2b+0x140>
 100a6c4:	3545883a 	add	r2,r6,r21
 100a6c8:	10bef344 	addi	r2,r2,-1075
 100a6cc:	00c00d44 	movi	r3,53
 100a6d0:	b0800015 	stw	r2,0(r22)
 100a6d4:	1987c83a 	sub	r3,r3,r6
 100a6d8:	b8c00015 	stw	r3,0(r23)
 100a6dc:	9005883a 	mov	r2,r18
 100a6e0:	dfc00a17 	ldw	ra,40(sp)
 100a6e4:	ddc00917 	ldw	r23,36(sp)
 100a6e8:	dd800817 	ldw	r22,32(sp)
 100a6ec:	dd400717 	ldw	r21,28(sp)
 100a6f0:	dd000617 	ldw	r20,24(sp)
 100a6f4:	dcc00517 	ldw	r19,20(sp)
 100a6f8:	dc800417 	ldw	r18,16(sp)
 100a6fc:	dc400317 	ldw	r17,12(sp)
 100a700:	dc000217 	ldw	r16,8(sp)
 100a704:	dec00b04 	addi	sp,sp,44
 100a708:	f800283a 	ret
 100a70c:	d9000104 	addi	r4,sp,4
 100a710:	100a0480 	call	100a048 <__lo0bits>
 100a714:	11800804 	addi	r6,r2,32
 100a718:	d8800117 	ldw	r2,4(sp)
 100a71c:	94c00415 	stw	r19,16(r18)
 100a720:	980b883a 	mov	r5,r19
 100a724:	90800515 	stw	r2,20(r18)
 100a728:	a03fe626 	beq	r20,zero,100a6c4 <__d2b+0xd8>
 100a72c:	2945883a 	add	r2,r5,r5
 100a730:	1085883a 	add	r2,r2,r2
 100a734:	1405883a 	add	r2,r2,r16
 100a738:	113fff17 	ldw	r4,-4(r2)
 100a73c:	30fef384 	addi	r3,r6,-1074
 100a740:	2820917a 	slli	r16,r5,5
 100a744:	b0c00015 	stw	r3,0(r22)
 100a748:	1009fd80 	call	1009fd8 <__hi0bits>
 100a74c:	80a1c83a 	sub	r16,r16,r2
 100a750:	bc000015 	stw	r16,0(r23)
 100a754:	003fe106 	br	100a6dc <__d2b+0xf0>
 100a758:	d8800017 	ldw	r2,0(sp)
 100a75c:	90800515 	stw	r2,20(r18)
 100a760:	d8c00117 	ldw	r3,4(sp)
 100a764:	003fd106 	br	100a6ac <__d2b+0xc0>

0100a768 <__mdiff>:
 100a768:	defffb04 	addi	sp,sp,-20
 100a76c:	dc000015 	stw	r16,0(sp)
 100a770:	2821883a 	mov	r16,r5
 100a774:	dc800215 	stw	r18,8(sp)
 100a778:	300b883a 	mov	r5,r6
 100a77c:	2025883a 	mov	r18,r4
 100a780:	8009883a 	mov	r4,r16
 100a784:	dc400115 	stw	r17,4(sp)
 100a788:	dfc00415 	stw	ra,16(sp)
 100a78c:	dcc00315 	stw	r19,12(sp)
 100a790:	3023883a 	mov	r17,r6
 100a794:	100a10c0 	call	100a10c <__mcmp>
 100a798:	10004226 	beq	r2,zero,100a8a4 <__mdiff+0x13c>
 100a79c:	10005016 	blt	r2,zero,100a8e0 <__mdiff+0x178>
 100a7a0:	0027883a 	mov	r19,zero
 100a7a4:	81400117 	ldw	r5,4(r16)
 100a7a8:	9009883a 	mov	r4,r18
 100a7ac:	100a5300 	call	100a530 <_Balloc>
 100a7b0:	1019883a 	mov	r12,r2
 100a7b4:	82800417 	ldw	r10,16(r16)
 100a7b8:	88800417 	ldw	r2,16(r17)
 100a7bc:	81800504 	addi	r6,r16,20
 100a7c0:	5287883a 	add	r3,r10,r10
 100a7c4:	1085883a 	add	r2,r2,r2
 100a7c8:	18c7883a 	add	r3,r3,r3
 100a7cc:	1085883a 	add	r2,r2,r2
 100a7d0:	8a000504 	addi	r8,r17,20
 100a7d4:	64c00315 	stw	r19,12(r12)
 100a7d8:	30db883a 	add	r13,r6,r3
 100a7dc:	4097883a 	add	r11,r8,r2
 100a7e0:	61c00504 	addi	r7,r12,20
 100a7e4:	0013883a 	mov	r9,zero
 100a7e8:	31000017 	ldw	r4,0(r6)
 100a7ec:	41400017 	ldw	r5,0(r8)
 100a7f0:	42000104 	addi	r8,r8,4
 100a7f4:	20bfffcc 	andi	r2,r4,65535
 100a7f8:	28ffffcc 	andi	r3,r5,65535
 100a7fc:	10c5c83a 	sub	r2,r2,r3
 100a800:	1245883a 	add	r2,r2,r9
 100a804:	2008d43a 	srli	r4,r4,16
 100a808:	280ad43a 	srli	r5,r5,16
 100a80c:	1007d43a 	srai	r3,r2,16
 100a810:	3880000d 	sth	r2,0(r7)
 100a814:	2149c83a 	sub	r4,r4,r5
 100a818:	20c9883a 	add	r4,r4,r3
 100a81c:	3900008d 	sth	r4,2(r7)
 100a820:	31800104 	addi	r6,r6,4
 100a824:	39c00104 	addi	r7,r7,4
 100a828:	2013d43a 	srai	r9,r4,16
 100a82c:	42ffee36 	bltu	r8,r11,100a7e8 <__mdiff+0x80>
 100a830:	33400c2e 	bgeu	r6,r13,100a864 <__mdiff+0xfc>
 100a834:	30800017 	ldw	r2,0(r6)
 100a838:	31800104 	addi	r6,r6,4
 100a83c:	10ffffcc 	andi	r3,r2,65535
 100a840:	1a47883a 	add	r3,r3,r9
 100a844:	1004d43a 	srli	r2,r2,16
 100a848:	1809d43a 	srai	r4,r3,16
 100a84c:	38c0000d 	sth	r3,0(r7)
 100a850:	1105883a 	add	r2,r2,r4
 100a854:	3880008d 	sth	r2,2(r7)
 100a858:	1013d43a 	srai	r9,r2,16
 100a85c:	39c00104 	addi	r7,r7,4
 100a860:	337ff436 	bltu	r6,r13,100a834 <__mdiff+0xcc>
 100a864:	38bfff17 	ldw	r2,-4(r7)
 100a868:	38ffff04 	addi	r3,r7,-4
 100a86c:	1000041e 	bne	r2,zero,100a880 <__mdiff+0x118>
 100a870:	18ffff04 	addi	r3,r3,-4
 100a874:	18800017 	ldw	r2,0(r3)
 100a878:	52bfffc4 	addi	r10,r10,-1
 100a87c:	103ffc26 	beq	r2,zero,100a870 <__mdiff+0x108>
 100a880:	6005883a 	mov	r2,r12
 100a884:	62800415 	stw	r10,16(r12)
 100a888:	dfc00417 	ldw	ra,16(sp)
 100a88c:	dcc00317 	ldw	r19,12(sp)
 100a890:	dc800217 	ldw	r18,8(sp)
 100a894:	dc400117 	ldw	r17,4(sp)
 100a898:	dc000017 	ldw	r16,0(sp)
 100a89c:	dec00504 	addi	sp,sp,20
 100a8a0:	f800283a 	ret
 100a8a4:	9009883a 	mov	r4,r18
 100a8a8:	000b883a 	mov	r5,zero
 100a8ac:	100a5300 	call	100a530 <_Balloc>
 100a8b0:	1019883a 	mov	r12,r2
 100a8b4:	00800044 	movi	r2,1
 100a8b8:	60800415 	stw	r2,16(r12)
 100a8bc:	6005883a 	mov	r2,r12
 100a8c0:	60000515 	stw	zero,20(r12)
 100a8c4:	dfc00417 	ldw	ra,16(sp)
 100a8c8:	dcc00317 	ldw	r19,12(sp)
 100a8cc:	dc800217 	ldw	r18,8(sp)
 100a8d0:	dc400117 	ldw	r17,4(sp)
 100a8d4:	dc000017 	ldw	r16,0(sp)
 100a8d8:	dec00504 	addi	sp,sp,20
 100a8dc:	f800283a 	ret
 100a8e0:	880d883a 	mov	r6,r17
 100a8e4:	04c00044 	movi	r19,1
 100a8e8:	8023883a 	mov	r17,r16
 100a8ec:	3021883a 	mov	r16,r6
 100a8f0:	003fac06 	br	100a7a4 <__mdiff+0x3c>

0100a8f4 <__lshift>:
 100a8f4:	defff904 	addi	sp,sp,-28
 100a8f8:	28800417 	ldw	r2,16(r5)
 100a8fc:	dc000015 	stw	r16,0(sp)
 100a900:	3021d17a 	srai	r16,r6,5
 100a904:	28c00217 	ldw	r3,8(r5)
 100a908:	10800044 	addi	r2,r2,1
 100a90c:	dc400115 	stw	r17,4(sp)
 100a910:	80a3883a 	add	r17,r16,r2
 100a914:	dd400515 	stw	r21,20(sp)
 100a918:	dd000415 	stw	r20,16(sp)
 100a91c:	dc800215 	stw	r18,8(sp)
 100a920:	dfc00615 	stw	ra,24(sp)
 100a924:	2825883a 	mov	r18,r5
 100a928:	dcc00315 	stw	r19,12(sp)
 100a92c:	3029883a 	mov	r20,r6
 100a930:	202b883a 	mov	r21,r4
 100a934:	29400117 	ldw	r5,4(r5)
 100a938:	1c40030e 	bge	r3,r17,100a948 <__lshift+0x54>
 100a93c:	18c7883a 	add	r3,r3,r3
 100a940:	29400044 	addi	r5,r5,1
 100a944:	1c7ffd16 	blt	r3,r17,100a93c <__lshift+0x48>
 100a948:	a809883a 	mov	r4,r21
 100a94c:	100a5300 	call	100a530 <_Balloc>
 100a950:	1027883a 	mov	r19,r2
 100a954:	11400504 	addi	r5,r2,20
 100a958:	0400090e 	bge	zero,r16,100a980 <__lshift+0x8c>
 100a95c:	2805883a 	mov	r2,r5
 100a960:	0007883a 	mov	r3,zero
 100a964:	18c00044 	addi	r3,r3,1
 100a968:	10000015 	stw	zero,0(r2)
 100a96c:	10800104 	addi	r2,r2,4
 100a970:	80fffc1e 	bne	r16,r3,100a964 <__lshift+0x70>
 100a974:	8405883a 	add	r2,r16,r16
 100a978:	1085883a 	add	r2,r2,r2
 100a97c:	288b883a 	add	r5,r5,r2
 100a980:	90800417 	ldw	r2,16(r18)
 100a984:	91000504 	addi	r4,r18,20
 100a988:	a18007cc 	andi	r6,r20,31
 100a98c:	1085883a 	add	r2,r2,r2
 100a990:	1085883a 	add	r2,r2,r2
 100a994:	208f883a 	add	r7,r4,r2
 100a998:	30001e26 	beq	r6,zero,100aa14 <__lshift+0x120>
 100a99c:	00800804 	movi	r2,32
 100a9a0:	1191c83a 	sub	r8,r2,r6
 100a9a4:	0007883a 	mov	r3,zero
 100a9a8:	20800017 	ldw	r2,0(r4)
 100a9ac:	1184983a 	sll	r2,r2,r6
 100a9b0:	1884b03a 	or	r2,r3,r2
 100a9b4:	28800015 	stw	r2,0(r5)
 100a9b8:	20c00017 	ldw	r3,0(r4)
 100a9bc:	21000104 	addi	r4,r4,4
 100a9c0:	29400104 	addi	r5,r5,4
 100a9c4:	1a06d83a 	srl	r3,r3,r8
 100a9c8:	21fff736 	bltu	r4,r7,100a9a8 <__lshift+0xb4>
 100a9cc:	28c00015 	stw	r3,0(r5)
 100a9d0:	18000126 	beq	r3,zero,100a9d8 <__lshift+0xe4>
 100a9d4:	8c400044 	addi	r17,r17,1
 100a9d8:	88bfffc4 	addi	r2,r17,-1
 100a9dc:	98800415 	stw	r2,16(r19)
 100a9e0:	a809883a 	mov	r4,r21
 100a9e4:	900b883a 	mov	r5,r18
 100a9e8:	1009fb00 	call	1009fb0 <_Bfree>
 100a9ec:	9805883a 	mov	r2,r19
 100a9f0:	dfc00617 	ldw	ra,24(sp)
 100a9f4:	dd400517 	ldw	r21,20(sp)
 100a9f8:	dd000417 	ldw	r20,16(sp)
 100a9fc:	dcc00317 	ldw	r19,12(sp)
 100aa00:	dc800217 	ldw	r18,8(sp)
 100aa04:	dc400117 	ldw	r17,4(sp)
 100aa08:	dc000017 	ldw	r16,0(sp)
 100aa0c:	dec00704 	addi	sp,sp,28
 100aa10:	f800283a 	ret
 100aa14:	20800017 	ldw	r2,0(r4)
 100aa18:	21000104 	addi	r4,r4,4
 100aa1c:	28800015 	stw	r2,0(r5)
 100aa20:	29400104 	addi	r5,r5,4
 100aa24:	21ffec2e 	bgeu	r4,r7,100a9d8 <__lshift+0xe4>
 100aa28:	20800017 	ldw	r2,0(r4)
 100aa2c:	21000104 	addi	r4,r4,4
 100aa30:	28800015 	stw	r2,0(r5)
 100aa34:	29400104 	addi	r5,r5,4
 100aa38:	21fff636 	bltu	r4,r7,100aa14 <__lshift+0x120>
 100aa3c:	003fe606 	br	100a9d8 <__lshift+0xe4>

0100aa40 <__multiply>:
 100aa40:	defff004 	addi	sp,sp,-64
 100aa44:	dc800815 	stw	r18,32(sp)
 100aa48:	dc400715 	stw	r17,28(sp)
 100aa4c:	2c800417 	ldw	r18,16(r5)
 100aa50:	34400417 	ldw	r17,16(r6)
 100aa54:	dcc00915 	stw	r19,36(sp)
 100aa58:	dc000615 	stw	r16,24(sp)
 100aa5c:	dfc00f15 	stw	ra,60(sp)
 100aa60:	df000e15 	stw	fp,56(sp)
 100aa64:	ddc00d15 	stw	r23,52(sp)
 100aa68:	dd800c15 	stw	r22,48(sp)
 100aa6c:	dd400b15 	stw	r21,44(sp)
 100aa70:	dd000a15 	stw	r20,40(sp)
 100aa74:	2821883a 	mov	r16,r5
 100aa78:	3027883a 	mov	r19,r6
 100aa7c:	9440040e 	bge	r18,r17,100aa90 <__multiply+0x50>
 100aa80:	8825883a 	mov	r18,r17
 100aa84:	2c400417 	ldw	r17,16(r5)
 100aa88:	2827883a 	mov	r19,r5
 100aa8c:	3021883a 	mov	r16,r6
 100aa90:	80800217 	ldw	r2,8(r16)
 100aa94:	9447883a 	add	r3,r18,r17
 100aa98:	d8c00415 	stw	r3,16(sp)
 100aa9c:	81400117 	ldw	r5,4(r16)
 100aaa0:	10c0010e 	bge	r2,r3,100aaa8 <__multiply+0x68>
 100aaa4:	29400044 	addi	r5,r5,1
 100aaa8:	100a5300 	call	100a530 <_Balloc>
 100aaac:	d8800515 	stw	r2,20(sp)
 100aab0:	d9000417 	ldw	r4,16(sp)
 100aab4:	d8c00517 	ldw	r3,20(sp)
 100aab8:	2105883a 	add	r2,r4,r4
 100aabc:	1085883a 	add	r2,r2,r2
 100aac0:	19000504 	addi	r4,r3,20
 100aac4:	2085883a 	add	r2,r4,r2
 100aac8:	d8800315 	stw	r2,12(sp)
 100aacc:	2080052e 	bgeu	r4,r2,100aae4 <__multiply+0xa4>
 100aad0:	2005883a 	mov	r2,r4
 100aad4:	d8c00317 	ldw	r3,12(sp)
 100aad8:	10000015 	stw	zero,0(r2)
 100aadc:	10800104 	addi	r2,r2,4
 100aae0:	10fffc36 	bltu	r2,r3,100aad4 <__multiply+0x94>
 100aae4:	8c45883a 	add	r2,r17,r17
 100aae8:	9487883a 	add	r3,r18,r18
 100aaec:	9dc00504 	addi	r23,r19,20
 100aaf0:	1085883a 	add	r2,r2,r2
 100aaf4:	84000504 	addi	r16,r16,20
 100aaf8:	18c7883a 	add	r3,r3,r3
 100aafc:	b885883a 	add	r2,r23,r2
 100ab00:	dc000015 	stw	r16,0(sp)
 100ab04:	d8800215 	stw	r2,8(sp)
 100ab08:	80f9883a 	add	fp,r16,r3
 100ab0c:	b880432e 	bgeu	r23,r2,100ac1c <__multiply+0x1dc>
 100ab10:	d9000115 	stw	r4,4(sp)
 100ab14:	b9000017 	ldw	r4,0(r23)
 100ab18:	253fffcc 	andi	r20,r4,65535
 100ab1c:	a0001a26 	beq	r20,zero,100ab88 <__multiply+0x148>
 100ab20:	dcc00017 	ldw	r19,0(sp)
 100ab24:	dc800117 	ldw	r18,4(sp)
 100ab28:	002b883a 	mov	r21,zero
 100ab2c:	9c400017 	ldw	r17,0(r19)
 100ab30:	94000017 	ldw	r16,0(r18)
 100ab34:	a009883a 	mov	r4,r20
 100ab38:	897fffcc 	andi	r5,r17,65535
 100ab3c:	1002f380 	call	1002f38 <__mulsi3>
 100ab40:	880ad43a 	srli	r5,r17,16
 100ab44:	80ffffcc 	andi	r3,r16,65535
 100ab48:	a8c7883a 	add	r3,r21,r3
 100ab4c:	a009883a 	mov	r4,r20
 100ab50:	10e3883a 	add	r17,r2,r3
 100ab54:	8020d43a 	srli	r16,r16,16
 100ab58:	1002f380 	call	1002f38 <__mulsi3>
 100ab5c:	8806d43a 	srli	r3,r17,16
 100ab60:	1405883a 	add	r2,r2,r16
 100ab64:	9cc00104 	addi	r19,r19,4
 100ab68:	1887883a 	add	r3,r3,r2
 100ab6c:	90c0008d 	sth	r3,2(r18)
 100ab70:	9440000d 	sth	r17,0(r18)
 100ab74:	182ad43a 	srli	r21,r3,16
 100ab78:	94800104 	addi	r18,r18,4
 100ab7c:	9f3feb36 	bltu	r19,fp,100ab2c <__multiply+0xec>
 100ab80:	95400015 	stw	r21,0(r18)
 100ab84:	b9000017 	ldw	r4,0(r23)
 100ab88:	202ad43a 	srli	r21,r4,16
 100ab8c:	a8001c26 	beq	r21,zero,100ac00 <__multiply+0x1c0>
 100ab90:	d9000117 	ldw	r4,4(sp)
 100ab94:	dd000017 	ldw	r20,0(sp)
 100ab98:	002d883a 	mov	r22,zero
 100ab9c:	24c00017 	ldw	r19,0(r4)
 100aba0:	2025883a 	mov	r18,r4
 100aba4:	9823883a 	mov	r17,r19
 100aba8:	a4000017 	ldw	r16,0(r20)
 100abac:	a809883a 	mov	r4,r21
 100abb0:	a5000104 	addi	r20,r20,4
 100abb4:	817fffcc 	andi	r5,r16,65535
 100abb8:	1002f380 	call	1002f38 <__mulsi3>
 100abbc:	8806d43a 	srli	r3,r17,16
 100abc0:	800ad43a 	srli	r5,r16,16
 100abc4:	94c0000d 	sth	r19,0(r18)
 100abc8:	b0c7883a 	add	r3,r22,r3
 100abcc:	10e1883a 	add	r16,r2,r3
 100abd0:	9400008d 	sth	r16,2(r18)
 100abd4:	a809883a 	mov	r4,r21
 100abd8:	94800104 	addi	r18,r18,4
 100abdc:	1002f380 	call	1002f38 <__mulsi3>
 100abe0:	94400017 	ldw	r17,0(r18)
 100abe4:	8020d43a 	srli	r16,r16,16
 100abe8:	88ffffcc 	andi	r3,r17,65535
 100abec:	10c5883a 	add	r2,r2,r3
 100abf0:	80a7883a 	add	r19,r16,r2
 100abf4:	982cd43a 	srli	r22,r19,16
 100abf8:	a73feb36 	bltu	r20,fp,100aba8 <__multiply+0x168>
 100abfc:	94c00015 	stw	r19,0(r18)
 100ac00:	d8800217 	ldw	r2,8(sp)
 100ac04:	bdc00104 	addi	r23,r23,4
 100ac08:	b880042e 	bgeu	r23,r2,100ac1c <__multiply+0x1dc>
 100ac0c:	d8c00117 	ldw	r3,4(sp)
 100ac10:	18c00104 	addi	r3,r3,4
 100ac14:	d8c00115 	stw	r3,4(sp)
 100ac18:	003fbe06 	br	100ab14 <__multiply+0xd4>
 100ac1c:	d9000417 	ldw	r4,16(sp)
 100ac20:	01000c0e 	bge	zero,r4,100ac54 <__multiply+0x214>
 100ac24:	d8c00317 	ldw	r3,12(sp)
 100ac28:	18bfff17 	ldw	r2,-4(r3)
 100ac2c:	18ffff04 	addi	r3,r3,-4
 100ac30:	10000326 	beq	r2,zero,100ac40 <__multiply+0x200>
 100ac34:	00000706 	br	100ac54 <__multiply+0x214>
 100ac38:	18800017 	ldw	r2,0(r3)
 100ac3c:	1000051e 	bne	r2,zero,100ac54 <__multiply+0x214>
 100ac40:	d9000417 	ldw	r4,16(sp)
 100ac44:	18ffff04 	addi	r3,r3,-4
 100ac48:	213fffc4 	addi	r4,r4,-1
 100ac4c:	d9000415 	stw	r4,16(sp)
 100ac50:	203ff91e 	bne	r4,zero,100ac38 <__multiply+0x1f8>
 100ac54:	d8800417 	ldw	r2,16(sp)
 100ac58:	d8c00517 	ldw	r3,20(sp)
 100ac5c:	18800415 	stw	r2,16(r3)
 100ac60:	1805883a 	mov	r2,r3
 100ac64:	dfc00f17 	ldw	ra,60(sp)
 100ac68:	df000e17 	ldw	fp,56(sp)
 100ac6c:	ddc00d17 	ldw	r23,52(sp)
 100ac70:	dd800c17 	ldw	r22,48(sp)
 100ac74:	dd400b17 	ldw	r21,44(sp)
 100ac78:	dd000a17 	ldw	r20,40(sp)
 100ac7c:	dcc00917 	ldw	r19,36(sp)
 100ac80:	dc800817 	ldw	r18,32(sp)
 100ac84:	dc400717 	ldw	r17,28(sp)
 100ac88:	dc000617 	ldw	r16,24(sp)
 100ac8c:	dec01004 	addi	sp,sp,64
 100ac90:	f800283a 	ret

0100ac94 <__i2b>:
 100ac94:	defffd04 	addi	sp,sp,-12
 100ac98:	dc000015 	stw	r16,0(sp)
 100ac9c:	04000044 	movi	r16,1
 100aca0:	dc800115 	stw	r18,4(sp)
 100aca4:	2825883a 	mov	r18,r5
 100aca8:	800b883a 	mov	r5,r16
 100acac:	dfc00215 	stw	ra,8(sp)
 100acb0:	100a5300 	call	100a530 <_Balloc>
 100acb4:	14000415 	stw	r16,16(r2)
 100acb8:	14800515 	stw	r18,20(r2)
 100acbc:	dfc00217 	ldw	ra,8(sp)
 100acc0:	dc800117 	ldw	r18,4(sp)
 100acc4:	dc000017 	ldw	r16,0(sp)
 100acc8:	dec00304 	addi	sp,sp,12
 100accc:	f800283a 	ret

0100acd0 <__multadd>:
 100acd0:	defff604 	addi	sp,sp,-40
 100acd4:	dd800615 	stw	r22,24(sp)
 100acd8:	2d800417 	ldw	r22,16(r5)
 100acdc:	df000815 	stw	fp,32(sp)
 100ace0:	ddc00715 	stw	r23,28(sp)
 100ace4:	dd400515 	stw	r21,20(sp)
 100ace8:	dd000415 	stw	r20,16(sp)
 100acec:	dcc00315 	stw	r19,12(sp)
 100acf0:	dc800215 	stw	r18,8(sp)
 100acf4:	dfc00915 	stw	ra,36(sp)
 100acf8:	dc400115 	stw	r17,4(sp)
 100acfc:	dc000015 	stw	r16,0(sp)
 100ad00:	282f883a 	mov	r23,r5
 100ad04:	2039883a 	mov	fp,r4
 100ad08:	302b883a 	mov	r21,r6
 100ad0c:	3829883a 	mov	r20,r7
 100ad10:	2c800504 	addi	r18,r5,20
 100ad14:	0027883a 	mov	r19,zero
 100ad18:	94400017 	ldw	r17,0(r18)
 100ad1c:	a80b883a 	mov	r5,r21
 100ad20:	9cc00044 	addi	r19,r19,1
 100ad24:	893fffcc 	andi	r4,r17,65535
 100ad28:	1002f380 	call	1002f38 <__mulsi3>
 100ad2c:	8808d43a 	srli	r4,r17,16
 100ad30:	1521883a 	add	r16,r2,r20
 100ad34:	a80b883a 	mov	r5,r21
 100ad38:	1002f380 	call	1002f38 <__mulsi3>
 100ad3c:	8008d43a 	srli	r4,r16,16
 100ad40:	843fffcc 	andi	r16,r16,65535
 100ad44:	1105883a 	add	r2,r2,r4
 100ad48:	1006943a 	slli	r3,r2,16
 100ad4c:	1028d43a 	srli	r20,r2,16
 100ad50:	1c07883a 	add	r3,r3,r16
 100ad54:	90c00015 	stw	r3,0(r18)
 100ad58:	94800104 	addi	r18,r18,4
 100ad5c:	9dbfee16 	blt	r19,r22,100ad18 <__multadd+0x48>
 100ad60:	a0000826 	beq	r20,zero,100ad84 <__multadd+0xb4>
 100ad64:	b8800217 	ldw	r2,8(r23)
 100ad68:	b080130e 	bge	r22,r2,100adb8 <__multadd+0xe8>
 100ad6c:	b585883a 	add	r2,r22,r22
 100ad70:	1085883a 	add	r2,r2,r2
 100ad74:	15c5883a 	add	r2,r2,r23
 100ad78:	b0c00044 	addi	r3,r22,1
 100ad7c:	15000515 	stw	r20,20(r2)
 100ad80:	b8c00415 	stw	r3,16(r23)
 100ad84:	b805883a 	mov	r2,r23
 100ad88:	dfc00917 	ldw	ra,36(sp)
 100ad8c:	df000817 	ldw	fp,32(sp)
 100ad90:	ddc00717 	ldw	r23,28(sp)
 100ad94:	dd800617 	ldw	r22,24(sp)
 100ad98:	dd400517 	ldw	r21,20(sp)
 100ad9c:	dd000417 	ldw	r20,16(sp)
 100ada0:	dcc00317 	ldw	r19,12(sp)
 100ada4:	dc800217 	ldw	r18,8(sp)
 100ada8:	dc400117 	ldw	r17,4(sp)
 100adac:	dc000017 	ldw	r16,0(sp)
 100adb0:	dec00a04 	addi	sp,sp,40
 100adb4:	f800283a 	ret
 100adb8:	b9400117 	ldw	r5,4(r23)
 100adbc:	e009883a 	mov	r4,fp
 100adc0:	29400044 	addi	r5,r5,1
 100adc4:	100a5300 	call	100a530 <_Balloc>
 100adc8:	b9800417 	ldw	r6,16(r23)
 100adcc:	b9400304 	addi	r5,r23,12
 100add0:	11000304 	addi	r4,r2,12
 100add4:	318d883a 	add	r6,r6,r6
 100add8:	318d883a 	add	r6,r6,r6
 100addc:	31800204 	addi	r6,r6,8
 100ade0:	1023883a 	mov	r17,r2
 100ade4:	1009e300 	call	1009e30 <memcpy>
 100ade8:	b80b883a 	mov	r5,r23
 100adec:	e009883a 	mov	r4,fp
 100adf0:	1009fb00 	call	1009fb0 <_Bfree>
 100adf4:	882f883a 	mov	r23,r17
 100adf8:	003fdc06 	br	100ad6c <__multadd+0x9c>

0100adfc <__pow5mult>:
 100adfc:	defffa04 	addi	sp,sp,-24
 100ae00:	308000cc 	andi	r2,r6,3
 100ae04:	dd000415 	stw	r20,16(sp)
 100ae08:	dcc00315 	stw	r19,12(sp)
 100ae0c:	dc000015 	stw	r16,0(sp)
 100ae10:	dfc00515 	stw	ra,20(sp)
 100ae14:	dc800215 	stw	r18,8(sp)
 100ae18:	dc400115 	stw	r17,4(sp)
 100ae1c:	3021883a 	mov	r16,r6
 100ae20:	2027883a 	mov	r19,r4
 100ae24:	2829883a 	mov	r20,r5
 100ae28:	10002b1e 	bne	r2,zero,100aed8 <__pow5mult+0xdc>
 100ae2c:	8025d0ba 	srai	r18,r16,2
 100ae30:	90001b26 	beq	r18,zero,100aea0 <__pow5mult+0xa4>
 100ae34:	9c001217 	ldw	r16,72(r19)
 100ae38:	8000081e 	bne	r16,zero,100ae5c <__pow5mult+0x60>
 100ae3c:	00003006 	br	100af00 <__pow5mult+0x104>
 100ae40:	800b883a 	mov	r5,r16
 100ae44:	800d883a 	mov	r6,r16
 100ae48:	9809883a 	mov	r4,r19
 100ae4c:	90001426 	beq	r18,zero,100aea0 <__pow5mult+0xa4>
 100ae50:	80800017 	ldw	r2,0(r16)
 100ae54:	10001b26 	beq	r2,zero,100aec4 <__pow5mult+0xc8>
 100ae58:	1021883a 	mov	r16,r2
 100ae5c:	9080004c 	andi	r2,r18,1
 100ae60:	1005003a 	cmpeq	r2,r2,zero
 100ae64:	9025d07a 	srai	r18,r18,1
 100ae68:	800d883a 	mov	r6,r16
 100ae6c:	9809883a 	mov	r4,r19
 100ae70:	a00b883a 	mov	r5,r20
 100ae74:	103ff21e 	bne	r2,zero,100ae40 <__pow5mult+0x44>
 100ae78:	100aa400 	call	100aa40 <__multiply>
 100ae7c:	a00b883a 	mov	r5,r20
 100ae80:	9809883a 	mov	r4,r19
 100ae84:	1023883a 	mov	r17,r2
 100ae88:	1009fb00 	call	1009fb0 <_Bfree>
 100ae8c:	8829883a 	mov	r20,r17
 100ae90:	800b883a 	mov	r5,r16
 100ae94:	800d883a 	mov	r6,r16
 100ae98:	9809883a 	mov	r4,r19
 100ae9c:	903fec1e 	bne	r18,zero,100ae50 <__pow5mult+0x54>
 100aea0:	a005883a 	mov	r2,r20
 100aea4:	dfc00517 	ldw	ra,20(sp)
 100aea8:	dd000417 	ldw	r20,16(sp)
 100aeac:	dcc00317 	ldw	r19,12(sp)
 100aeb0:	dc800217 	ldw	r18,8(sp)
 100aeb4:	dc400117 	ldw	r17,4(sp)
 100aeb8:	dc000017 	ldw	r16,0(sp)
 100aebc:	dec00604 	addi	sp,sp,24
 100aec0:	f800283a 	ret
 100aec4:	100aa400 	call	100aa40 <__multiply>
 100aec8:	80800015 	stw	r2,0(r16)
 100aecc:	1021883a 	mov	r16,r2
 100aed0:	10000015 	stw	zero,0(r2)
 100aed4:	003fe106 	br	100ae5c <__pow5mult+0x60>
 100aed8:	1085883a 	add	r2,r2,r2
 100aedc:	00c04074 	movhi	r3,257
 100aee0:	18c76204 	addi	r3,r3,7560
 100aee4:	1085883a 	add	r2,r2,r2
 100aee8:	10c5883a 	add	r2,r2,r3
 100aeec:	11bfff17 	ldw	r6,-4(r2)
 100aef0:	000f883a 	mov	r7,zero
 100aef4:	100acd00 	call	100acd0 <__multadd>
 100aef8:	1029883a 	mov	r20,r2
 100aefc:	003fcb06 	br	100ae2c <__pow5mult+0x30>
 100af00:	9809883a 	mov	r4,r19
 100af04:	01409c44 	movi	r5,625
 100af08:	100ac940 	call	100ac94 <__i2b>
 100af0c:	98801215 	stw	r2,72(r19)
 100af10:	1021883a 	mov	r16,r2
 100af14:	10000015 	stw	zero,0(r2)
 100af18:	003fd006 	br	100ae5c <__pow5mult+0x60>

0100af1c <__s2b>:
 100af1c:	defff904 	addi	sp,sp,-28
 100af20:	dcc00315 	stw	r19,12(sp)
 100af24:	dc800215 	stw	r18,8(sp)
 100af28:	2827883a 	mov	r19,r5
 100af2c:	2025883a 	mov	r18,r4
 100af30:	01400244 	movi	r5,9
 100af34:	39000204 	addi	r4,r7,8
 100af38:	dd000415 	stw	r20,16(sp)
 100af3c:	dc400115 	stw	r17,4(sp)
 100af40:	dfc00615 	stw	ra,24(sp)
 100af44:	dd400515 	stw	r21,20(sp)
 100af48:	dc000015 	stw	r16,0(sp)
 100af4c:	3829883a 	mov	r20,r7
 100af50:	3023883a 	mov	r17,r6
 100af54:	100da480 	call	100da48 <__divsi3>
 100af58:	00c00044 	movi	r3,1
 100af5c:	1880350e 	bge	r3,r2,100b034 <__s2b+0x118>
 100af60:	000b883a 	mov	r5,zero
 100af64:	18c7883a 	add	r3,r3,r3
 100af68:	29400044 	addi	r5,r5,1
 100af6c:	18bffd16 	blt	r3,r2,100af64 <__s2b+0x48>
 100af70:	9009883a 	mov	r4,r18
 100af74:	100a5300 	call	100a530 <_Balloc>
 100af78:	1011883a 	mov	r8,r2
 100af7c:	d8800717 	ldw	r2,28(sp)
 100af80:	00c00044 	movi	r3,1
 100af84:	01800244 	movi	r6,9
 100af88:	40800515 	stw	r2,20(r8)
 100af8c:	40c00415 	stw	r3,16(r8)
 100af90:	3440260e 	bge	r6,r17,100b02c <__s2b+0x110>
 100af94:	3021883a 	mov	r16,r6
 100af98:	99ab883a 	add	r21,r19,r6
 100af9c:	9c05883a 	add	r2,r19,r16
 100afa0:	11c00007 	ldb	r7,0(r2)
 100afa4:	400b883a 	mov	r5,r8
 100afa8:	9009883a 	mov	r4,r18
 100afac:	39fff404 	addi	r7,r7,-48
 100afb0:	01800284 	movi	r6,10
 100afb4:	100acd00 	call	100acd0 <__multadd>
 100afb8:	84000044 	addi	r16,r16,1
 100afbc:	1011883a 	mov	r8,r2
 100afc0:	8c3ff61e 	bne	r17,r16,100af9c <__s2b+0x80>
 100afc4:	ac45883a 	add	r2,r21,r17
 100afc8:	117ffe04 	addi	r5,r2,-8
 100afcc:	880d883a 	mov	r6,r17
 100afd0:	35000c0e 	bge	r6,r20,100b004 <__s2b+0xe8>
 100afd4:	a185c83a 	sub	r2,r20,r6
 100afd8:	2821883a 	mov	r16,r5
 100afdc:	28a3883a 	add	r17,r5,r2
 100afe0:	81c00007 	ldb	r7,0(r16)
 100afe4:	400b883a 	mov	r5,r8
 100afe8:	9009883a 	mov	r4,r18
 100afec:	39fff404 	addi	r7,r7,-48
 100aff0:	01800284 	movi	r6,10
 100aff4:	100acd00 	call	100acd0 <__multadd>
 100aff8:	84000044 	addi	r16,r16,1
 100affc:	1011883a 	mov	r8,r2
 100b000:	847ff71e 	bne	r16,r17,100afe0 <__s2b+0xc4>
 100b004:	4005883a 	mov	r2,r8
 100b008:	dfc00617 	ldw	ra,24(sp)
 100b00c:	dd400517 	ldw	r21,20(sp)
 100b010:	dd000417 	ldw	r20,16(sp)
 100b014:	dcc00317 	ldw	r19,12(sp)
 100b018:	dc800217 	ldw	r18,8(sp)
 100b01c:	dc400117 	ldw	r17,4(sp)
 100b020:	dc000017 	ldw	r16,0(sp)
 100b024:	dec00704 	addi	sp,sp,28
 100b028:	f800283a 	ret
 100b02c:	99400284 	addi	r5,r19,10
 100b030:	003fe706 	br	100afd0 <__s2b+0xb4>
 100b034:	000b883a 	mov	r5,zero
 100b038:	003fcd06 	br	100af70 <__s2b+0x54>

0100b03c <putc>:
 100b03c:	defffc04 	addi	sp,sp,-16
 100b040:	dc800215 	stw	r18,8(sp)
 100b044:	04804074 	movhi	r18,257
 100b048:	948e7f04 	addi	r18,r18,14844
 100b04c:	90c00017 	ldw	r3,0(r18)
 100b050:	dc400115 	stw	r17,4(sp)
 100b054:	dc000015 	stw	r16,0(sp)
 100b058:	dfc00315 	stw	ra,12(sp)
 100b05c:	2023883a 	mov	r17,r4
 100b060:	2821883a 	mov	r16,r5
 100b064:	18000226 	beq	r3,zero,100b070 <putc+0x34>
 100b068:	18800e17 	ldw	r2,56(r3)
 100b06c:	10001126 	beq	r2,zero,100b0b4 <putc+0x78>
 100b070:	80800217 	ldw	r2,8(r16)
 100b074:	10ffffc4 	addi	r3,r2,-1
 100b078:	80c00215 	stw	r3,8(r16)
 100b07c:	18001316 	blt	r3,zero,100b0cc <putc+0x90>
 100b080:	80800017 	ldw	r2,0(r16)
 100b084:	14400005 	stb	r17,0(r2)
 100b088:	80c00017 	ldw	r3,0(r16)
 100b08c:	18800044 	addi	r2,r3,1
 100b090:	18c00003 	ldbu	r3,0(r3)
 100b094:	80800015 	stw	r2,0(r16)
 100b098:	1805883a 	mov	r2,r3
 100b09c:	dfc00317 	ldw	ra,12(sp)
 100b0a0:	dc800217 	ldw	r18,8(sp)
 100b0a4:	dc400117 	ldw	r17,4(sp)
 100b0a8:	dc000017 	ldw	r16,0(sp)
 100b0ac:	dec00404 	addi	sp,sp,16
 100b0b0:	f800283a 	ret
 100b0b4:	1809883a 	mov	r4,r3
 100b0b8:	100388c0 	call	100388c <__sinit>
 100b0bc:	80800217 	ldw	r2,8(r16)
 100b0c0:	10ffffc4 	addi	r3,r2,-1
 100b0c4:	80c00215 	stw	r3,8(r16)
 100b0c8:	183fed0e 	bge	r3,zero,100b080 <putc+0x44>
 100b0cc:	80800617 	ldw	r2,24(r16)
 100b0d0:	18800f16 	blt	r3,r2,100b110 <putc+0xd4>
 100b0d4:	80800017 	ldw	r2,0(r16)
 100b0d8:	14400005 	stb	r17,0(r2)
 100b0dc:	81000017 	ldw	r4,0(r16)
 100b0e0:	00800284 	movi	r2,10
 100b0e4:	20c00003 	ldbu	r3,0(r4)
 100b0e8:	18801226 	beq	r3,r2,100b134 <putc+0xf8>
 100b0ec:	20800044 	addi	r2,r4,1
 100b0f0:	80800015 	stw	r2,0(r16)
 100b0f4:	1805883a 	mov	r2,r3
 100b0f8:	dfc00317 	ldw	ra,12(sp)
 100b0fc:	dc800217 	ldw	r18,8(sp)
 100b100:	dc400117 	ldw	r17,4(sp)
 100b104:	dc000017 	ldw	r16,0(sp)
 100b108:	dec00404 	addi	sp,sp,16
 100b10c:	f800283a 	ret
 100b110:	91000017 	ldw	r4,0(r18)
 100b114:	880b883a 	mov	r5,r17
 100b118:	800d883a 	mov	r6,r16
 100b11c:	dfc00317 	ldw	ra,12(sp)
 100b120:	dc800217 	ldw	r18,8(sp)
 100b124:	dc400117 	ldw	r17,4(sp)
 100b128:	dc000017 	ldw	r16,0(sp)
 100b12c:	dec00404 	addi	sp,sp,16
 100b130:	100b9c01 	jmpi	100b9c0 <__swbuf_r>
 100b134:	91000017 	ldw	r4,0(r18)
 100b138:	180b883a 	mov	r5,r3
 100b13c:	003ff606 	br	100b118 <putc+0xdc>

0100b140 <_putc_r>:
 100b140:	defffc04 	addi	sp,sp,-16
 100b144:	dc400215 	stw	r17,8(sp)
 100b148:	dc000115 	stw	r16,4(sp)
 100b14c:	dfc00315 	stw	ra,12(sp)
 100b150:	2021883a 	mov	r16,r4
 100b154:	2823883a 	mov	r17,r5
 100b158:	20000226 	beq	r4,zero,100b164 <_putc_r+0x24>
 100b15c:	20800e17 	ldw	r2,56(r4)
 100b160:	10001026 	beq	r2,zero,100b1a4 <_putc_r+0x64>
 100b164:	30800217 	ldw	r2,8(r6)
 100b168:	10ffffc4 	addi	r3,r2,-1
 100b16c:	30c00215 	stw	r3,8(r6)
 100b170:	18001316 	blt	r3,zero,100b1c0 <_putc_r+0x80>
 100b174:	30800017 	ldw	r2,0(r6)
 100b178:	14400005 	stb	r17,0(r2)
 100b17c:	30c00017 	ldw	r3,0(r6)
 100b180:	18800044 	addi	r2,r3,1
 100b184:	18c00003 	ldbu	r3,0(r3)
 100b188:	30800015 	stw	r2,0(r6)
 100b18c:	1805883a 	mov	r2,r3
 100b190:	dfc00317 	ldw	ra,12(sp)
 100b194:	dc400217 	ldw	r17,8(sp)
 100b198:	dc000117 	ldw	r16,4(sp)
 100b19c:	dec00404 	addi	sp,sp,16
 100b1a0:	f800283a 	ret
 100b1a4:	d9800015 	stw	r6,0(sp)
 100b1a8:	100388c0 	call	100388c <__sinit>
 100b1ac:	d9800017 	ldw	r6,0(sp)
 100b1b0:	30800217 	ldw	r2,8(r6)
 100b1b4:	10ffffc4 	addi	r3,r2,-1
 100b1b8:	30c00215 	stw	r3,8(r6)
 100b1bc:	183fed0e 	bge	r3,zero,100b174 <_putc_r+0x34>
 100b1c0:	30800617 	ldw	r2,24(r6)
 100b1c4:	18800e16 	blt	r3,r2,100b200 <_putc_r+0xc0>
 100b1c8:	30800017 	ldw	r2,0(r6)
 100b1cc:	14400005 	stb	r17,0(r2)
 100b1d0:	31000017 	ldw	r4,0(r6)
 100b1d4:	00800284 	movi	r2,10
 100b1d8:	20c00003 	ldbu	r3,0(r4)
 100b1dc:	18800f26 	beq	r3,r2,100b21c <_putc_r+0xdc>
 100b1e0:	20800044 	addi	r2,r4,1
 100b1e4:	30800015 	stw	r2,0(r6)
 100b1e8:	1805883a 	mov	r2,r3
 100b1ec:	dfc00317 	ldw	ra,12(sp)
 100b1f0:	dc400217 	ldw	r17,8(sp)
 100b1f4:	dc000117 	ldw	r16,4(sp)
 100b1f8:	dec00404 	addi	sp,sp,16
 100b1fc:	f800283a 	ret
 100b200:	8009883a 	mov	r4,r16
 100b204:	880b883a 	mov	r5,r17
 100b208:	dfc00317 	ldw	ra,12(sp)
 100b20c:	dc400217 	ldw	r17,8(sp)
 100b210:	dc000117 	ldw	r16,4(sp)
 100b214:	dec00404 	addi	sp,sp,16
 100b218:	100b9c01 	jmpi	100b9c0 <__swbuf_r>
 100b21c:	8009883a 	mov	r4,r16
 100b220:	180b883a 	mov	r5,r3
 100b224:	003ff806 	br	100b208 <_putc_r+0xc8>

0100b228 <_read_r>:
 100b228:	defffd04 	addi	sp,sp,-12
 100b22c:	dc000015 	stw	r16,0(sp)
 100b230:	04004074 	movhi	r16,257
 100b234:	84156804 	addi	r16,r16,21920
 100b238:	dc400115 	stw	r17,4(sp)
 100b23c:	80000015 	stw	zero,0(r16)
 100b240:	2023883a 	mov	r17,r4
 100b244:	2809883a 	mov	r4,r5
 100b248:	300b883a 	mov	r5,r6
 100b24c:	380d883a 	mov	r6,r7
 100b250:	dfc00215 	stw	ra,8(sp)
 100b254:	100edb40 	call	100edb4 <read>
 100b258:	1007883a 	mov	r3,r2
 100b25c:	00bfffc4 	movi	r2,-1
 100b260:	18800626 	beq	r3,r2,100b27c <_read_r+0x54>
 100b264:	1805883a 	mov	r2,r3
 100b268:	dfc00217 	ldw	ra,8(sp)
 100b26c:	dc400117 	ldw	r17,4(sp)
 100b270:	dc000017 	ldw	r16,0(sp)
 100b274:	dec00304 	addi	sp,sp,12
 100b278:	f800283a 	ret
 100b27c:	80800017 	ldw	r2,0(r16)
 100b280:	103ff826 	beq	r2,zero,100b264 <_read_r+0x3c>
 100b284:	88800015 	stw	r2,0(r17)
 100b288:	1805883a 	mov	r2,r3
 100b28c:	dfc00217 	ldw	ra,8(sp)
 100b290:	dc400117 	ldw	r17,4(sp)
 100b294:	dc000017 	ldw	r16,0(sp)
 100b298:	dec00304 	addi	sp,sp,12
 100b29c:	f800283a 	ret

0100b2a0 <_realloc_r>:
 100b2a0:	defff404 	addi	sp,sp,-48
 100b2a4:	dd800815 	stw	r22,32(sp)
 100b2a8:	dc800415 	stw	r18,16(sp)
 100b2ac:	dc400315 	stw	r17,12(sp)
 100b2b0:	dfc00b15 	stw	ra,44(sp)
 100b2b4:	df000a15 	stw	fp,40(sp)
 100b2b8:	ddc00915 	stw	r23,36(sp)
 100b2bc:	dd400715 	stw	r21,28(sp)
 100b2c0:	dd000615 	stw	r20,24(sp)
 100b2c4:	dcc00515 	stw	r19,20(sp)
 100b2c8:	dc000215 	stw	r16,8(sp)
 100b2cc:	2825883a 	mov	r18,r5
 100b2d0:	3023883a 	mov	r17,r6
 100b2d4:	202d883a 	mov	r22,r4
 100b2d8:	2800c926 	beq	r5,zero,100b600 <_realloc_r+0x360>
 100b2dc:	100ea900 	call	100ea90 <__malloc_lock>
 100b2e0:	943ffe04 	addi	r16,r18,-8
 100b2e4:	88c002c4 	addi	r3,r17,11
 100b2e8:	00800584 	movi	r2,22
 100b2ec:	82000117 	ldw	r8,4(r16)
 100b2f0:	10c01b2e 	bgeu	r2,r3,100b360 <_realloc_r+0xc0>
 100b2f4:	00bffe04 	movi	r2,-8
 100b2f8:	188e703a 	and	r7,r3,r2
 100b2fc:	3839883a 	mov	fp,r7
 100b300:	38001a16 	blt	r7,zero,100b36c <_realloc_r+0xcc>
 100b304:	e4401936 	bltu	fp,r17,100b36c <_realloc_r+0xcc>
 100b308:	013fff04 	movi	r4,-4
 100b30c:	4126703a 	and	r19,r8,r4
 100b310:	99c02616 	blt	r19,r7,100b3ac <_realloc_r+0x10c>
 100b314:	802b883a 	mov	r21,r16
 100b318:	9829883a 	mov	r20,r19
 100b31c:	84000204 	addi	r16,r16,8
 100b320:	a80f883a 	mov	r7,r21
 100b324:	a70dc83a 	sub	r6,r20,fp
 100b328:	008003c4 	movi	r2,15
 100b32c:	1180c136 	bltu	r2,r6,100b634 <_realloc_r+0x394>
 100b330:	38800117 	ldw	r2,4(r7)
 100b334:	a549883a 	add	r4,r20,r21
 100b338:	1080004c 	andi	r2,r2,1
 100b33c:	a084b03a 	or	r2,r20,r2
 100b340:	38800115 	stw	r2,4(r7)
 100b344:	20c00117 	ldw	r3,4(r4)
 100b348:	18c00054 	ori	r3,r3,1
 100b34c:	20c00115 	stw	r3,4(r4)
 100b350:	b009883a 	mov	r4,r22
 100b354:	100eab00 	call	100eab0 <__malloc_unlock>
 100b358:	8023883a 	mov	r17,r16
 100b35c:	00000606 	br	100b378 <_realloc_r+0xd8>
 100b360:	01c00404 	movi	r7,16
 100b364:	3839883a 	mov	fp,r7
 100b368:	e47fe72e 	bgeu	fp,r17,100b308 <_realloc_r+0x68>
 100b36c:	00800304 	movi	r2,12
 100b370:	0023883a 	mov	r17,zero
 100b374:	b0800015 	stw	r2,0(r22)
 100b378:	8805883a 	mov	r2,r17
 100b37c:	dfc00b17 	ldw	ra,44(sp)
 100b380:	df000a17 	ldw	fp,40(sp)
 100b384:	ddc00917 	ldw	r23,36(sp)
 100b388:	dd800817 	ldw	r22,32(sp)
 100b38c:	dd400717 	ldw	r21,28(sp)
 100b390:	dd000617 	ldw	r20,24(sp)
 100b394:	dcc00517 	ldw	r19,20(sp)
 100b398:	dc800417 	ldw	r18,16(sp)
 100b39c:	dc400317 	ldw	r17,12(sp)
 100b3a0:	dc000217 	ldw	r16,8(sp)
 100b3a4:	dec00c04 	addi	sp,sp,48
 100b3a8:	f800283a 	ret
 100b3ac:	00804074 	movhi	r2,257
 100b3b0:	1088c004 	addi	r2,r2,8960
 100b3b4:	12400217 	ldw	r9,8(r2)
 100b3b8:	84cd883a 	add	r6,r16,r19
 100b3bc:	802b883a 	mov	r21,r16
 100b3c0:	3240b926 	beq	r6,r9,100b6a8 <_realloc_r+0x408>
 100b3c4:	31400117 	ldw	r5,4(r6)
 100b3c8:	00bfff84 	movi	r2,-2
 100b3cc:	2884703a 	and	r2,r5,r2
 100b3d0:	1185883a 	add	r2,r2,r6
 100b3d4:	10c00117 	ldw	r3,4(r2)
 100b3d8:	18c0004c 	andi	r3,r3,1
 100b3dc:	1807003a 	cmpeq	r3,r3,zero
 100b3e0:	1800a326 	beq	r3,zero,100b670 <_realloc_r+0x3d0>
 100b3e4:	2908703a 	and	r4,r5,r4
 100b3e8:	9929883a 	add	r20,r19,r4
 100b3ec:	a1c0a30e 	bge	r20,r7,100b67c <_realloc_r+0x3dc>
 100b3f0:	4080004c 	andi	r2,r8,1
 100b3f4:	1000551e 	bne	r2,zero,100b54c <_realloc_r+0x2ac>
 100b3f8:	80800017 	ldw	r2,0(r16)
 100b3fc:	80afc83a 	sub	r23,r16,r2
 100b400:	b8c00117 	ldw	r3,4(r23)
 100b404:	00bfff04 	movi	r2,-4
 100b408:	1884703a 	and	r2,r3,r2
 100b40c:	30002e26 	beq	r6,zero,100b4c8 <_realloc_r+0x228>
 100b410:	3240b926 	beq	r6,r9,100b6f8 <_realloc_r+0x458>
 100b414:	98a9883a 	add	r20,r19,r2
 100b418:	2509883a 	add	r4,r4,r20
 100b41c:	d9000015 	stw	r4,0(sp)
 100b420:	21c02a16 	blt	r4,r7,100b4cc <_realloc_r+0x22c>
 100b424:	30800317 	ldw	r2,12(r6)
 100b428:	30c00217 	ldw	r3,8(r6)
 100b42c:	01400904 	movi	r5,36
 100b430:	99bfff04 	addi	r6,r19,-4
 100b434:	18800315 	stw	r2,12(r3)
 100b438:	10c00215 	stw	r3,8(r2)
 100b43c:	b9000317 	ldw	r4,12(r23)
 100b440:	b8800217 	ldw	r2,8(r23)
 100b444:	b82b883a 	mov	r21,r23
 100b448:	bc000204 	addi	r16,r23,8
 100b44c:	20800215 	stw	r2,8(r4)
 100b450:	11000315 	stw	r4,12(r2)
 100b454:	2980e436 	bltu	r5,r6,100b7e8 <_realloc_r+0x548>
 100b458:	008004c4 	movi	r2,19
 100b45c:	9009883a 	mov	r4,r18
 100b460:	8011883a 	mov	r8,r16
 100b464:	11800f2e 	bgeu	r2,r6,100b4a4 <_realloc_r+0x204>
 100b468:	90800017 	ldw	r2,0(r18)
 100b46c:	ba000404 	addi	r8,r23,16
 100b470:	91000204 	addi	r4,r18,8
 100b474:	b8800215 	stw	r2,8(r23)
 100b478:	90c00117 	ldw	r3,4(r18)
 100b47c:	008006c4 	movi	r2,27
 100b480:	b8c00315 	stw	r3,12(r23)
 100b484:	1180072e 	bgeu	r2,r6,100b4a4 <_realloc_r+0x204>
 100b488:	90c00217 	ldw	r3,8(r18)
 100b48c:	ba000604 	addi	r8,r23,24
 100b490:	91000404 	addi	r4,r18,16
 100b494:	b8c00415 	stw	r3,16(r23)
 100b498:	90800317 	ldw	r2,12(r18)
 100b49c:	b8800515 	stw	r2,20(r23)
 100b4a0:	3140e726 	beq	r6,r5,100b840 <_realloc_r+0x5a0>
 100b4a4:	20800017 	ldw	r2,0(r4)
 100b4a8:	dd000017 	ldw	r20,0(sp)
 100b4ac:	b80f883a 	mov	r7,r23
 100b4b0:	40800015 	stw	r2,0(r8)
 100b4b4:	20c00117 	ldw	r3,4(r4)
 100b4b8:	40c00115 	stw	r3,4(r8)
 100b4bc:	20800217 	ldw	r2,8(r4)
 100b4c0:	40800215 	stw	r2,8(r8)
 100b4c4:	003f9706 	br	100b324 <_realloc_r+0x84>
 100b4c8:	98a9883a 	add	r20,r19,r2
 100b4cc:	a1c01f16 	blt	r20,r7,100b54c <_realloc_r+0x2ac>
 100b4d0:	b8c00317 	ldw	r3,12(r23)
 100b4d4:	b8800217 	ldw	r2,8(r23)
 100b4d8:	99bfff04 	addi	r6,r19,-4
 100b4dc:	01400904 	movi	r5,36
 100b4e0:	b82b883a 	mov	r21,r23
 100b4e4:	18800215 	stw	r2,8(r3)
 100b4e8:	10c00315 	stw	r3,12(r2)
 100b4ec:	bc000204 	addi	r16,r23,8
 100b4f0:	2980c336 	bltu	r5,r6,100b800 <_realloc_r+0x560>
 100b4f4:	008004c4 	movi	r2,19
 100b4f8:	9009883a 	mov	r4,r18
 100b4fc:	8011883a 	mov	r8,r16
 100b500:	11800f2e 	bgeu	r2,r6,100b540 <_realloc_r+0x2a0>
 100b504:	90800017 	ldw	r2,0(r18)
 100b508:	ba000404 	addi	r8,r23,16
 100b50c:	91000204 	addi	r4,r18,8
 100b510:	b8800215 	stw	r2,8(r23)
 100b514:	90c00117 	ldw	r3,4(r18)
 100b518:	008006c4 	movi	r2,27
 100b51c:	b8c00315 	stw	r3,12(r23)
 100b520:	1180072e 	bgeu	r2,r6,100b540 <_realloc_r+0x2a0>
 100b524:	90c00217 	ldw	r3,8(r18)
 100b528:	ba000604 	addi	r8,r23,24
 100b52c:	91000404 	addi	r4,r18,16
 100b530:	b8c00415 	stw	r3,16(r23)
 100b534:	90800317 	ldw	r2,12(r18)
 100b538:	b8800515 	stw	r2,20(r23)
 100b53c:	3140c726 	beq	r6,r5,100b85c <_realloc_r+0x5bc>
 100b540:	20800017 	ldw	r2,0(r4)
 100b544:	b80f883a 	mov	r7,r23
 100b548:	003fd906 	br	100b4b0 <_realloc_r+0x210>
 100b54c:	880b883a 	mov	r5,r17
 100b550:	b009883a 	mov	r4,r22
 100b554:	1004a8c0 	call	1004a8c <_malloc_r>
 100b558:	1023883a 	mov	r17,r2
 100b55c:	10002526 	beq	r2,zero,100b5f4 <_realloc_r+0x354>
 100b560:	80800117 	ldw	r2,4(r16)
 100b564:	00ffff84 	movi	r3,-2
 100b568:	893ffe04 	addi	r4,r17,-8
 100b56c:	10c4703a 	and	r2,r2,r3
 100b570:	8085883a 	add	r2,r16,r2
 100b574:	20809526 	beq	r4,r2,100b7cc <_realloc_r+0x52c>
 100b578:	99bfff04 	addi	r6,r19,-4
 100b57c:	01c00904 	movi	r7,36
 100b580:	39804536 	bltu	r7,r6,100b698 <_realloc_r+0x3f8>
 100b584:	008004c4 	movi	r2,19
 100b588:	9009883a 	mov	r4,r18
 100b58c:	880b883a 	mov	r5,r17
 100b590:	11800f2e 	bgeu	r2,r6,100b5d0 <_realloc_r+0x330>
 100b594:	90800017 	ldw	r2,0(r18)
 100b598:	89400204 	addi	r5,r17,8
 100b59c:	91000204 	addi	r4,r18,8
 100b5a0:	88800015 	stw	r2,0(r17)
 100b5a4:	90c00117 	ldw	r3,4(r18)
 100b5a8:	008006c4 	movi	r2,27
 100b5ac:	88c00115 	stw	r3,4(r17)
 100b5b0:	1180072e 	bgeu	r2,r6,100b5d0 <_realloc_r+0x330>
 100b5b4:	90c00217 	ldw	r3,8(r18)
 100b5b8:	89400404 	addi	r5,r17,16
 100b5bc:	91000404 	addi	r4,r18,16
 100b5c0:	88c00215 	stw	r3,8(r17)
 100b5c4:	90800317 	ldw	r2,12(r18)
 100b5c8:	88800315 	stw	r2,12(r17)
 100b5cc:	31c09126 	beq	r6,r7,100b814 <_realloc_r+0x574>
 100b5d0:	20800017 	ldw	r2,0(r4)
 100b5d4:	28800015 	stw	r2,0(r5)
 100b5d8:	20c00117 	ldw	r3,4(r4)
 100b5dc:	28c00115 	stw	r3,4(r5)
 100b5e0:	20800217 	ldw	r2,8(r4)
 100b5e4:	28800215 	stw	r2,8(r5)
 100b5e8:	900b883a 	mov	r5,r18
 100b5ec:	b009883a 	mov	r4,r22
 100b5f0:	1003d540 	call	1003d54 <_free_r>
 100b5f4:	b009883a 	mov	r4,r22
 100b5f8:	100eab00 	call	100eab0 <__malloc_unlock>
 100b5fc:	003f5e06 	br	100b378 <_realloc_r+0xd8>
 100b600:	300b883a 	mov	r5,r6
 100b604:	dfc00b17 	ldw	ra,44(sp)
 100b608:	df000a17 	ldw	fp,40(sp)
 100b60c:	ddc00917 	ldw	r23,36(sp)
 100b610:	dd800817 	ldw	r22,32(sp)
 100b614:	dd400717 	ldw	r21,28(sp)
 100b618:	dd000617 	ldw	r20,24(sp)
 100b61c:	dcc00517 	ldw	r19,20(sp)
 100b620:	dc800417 	ldw	r18,16(sp)
 100b624:	dc400317 	ldw	r17,12(sp)
 100b628:	dc000217 	ldw	r16,8(sp)
 100b62c:	dec00c04 	addi	sp,sp,48
 100b630:	1004a8c1 	jmpi	1004a8c <_malloc_r>
 100b634:	38800117 	ldw	r2,4(r7)
 100b638:	e54b883a 	add	r5,fp,r21
 100b63c:	31000054 	ori	r4,r6,1
 100b640:	1080004c 	andi	r2,r2,1
 100b644:	1704b03a 	or	r2,r2,fp
 100b648:	38800115 	stw	r2,4(r7)
 100b64c:	29000115 	stw	r4,4(r5)
 100b650:	2987883a 	add	r3,r5,r6
 100b654:	18800117 	ldw	r2,4(r3)
 100b658:	29400204 	addi	r5,r5,8
 100b65c:	b009883a 	mov	r4,r22
 100b660:	10800054 	ori	r2,r2,1
 100b664:	18800115 	stw	r2,4(r3)
 100b668:	1003d540 	call	1003d54 <_free_r>
 100b66c:	003f3806 	br	100b350 <_realloc_r+0xb0>
 100b670:	000d883a 	mov	r6,zero
 100b674:	0009883a 	mov	r4,zero
 100b678:	003f5d06 	br	100b3f0 <_realloc_r+0x150>
 100b67c:	30c00217 	ldw	r3,8(r6)
 100b680:	30800317 	ldw	r2,12(r6)
 100b684:	800f883a 	mov	r7,r16
 100b688:	84000204 	addi	r16,r16,8
 100b68c:	10c00215 	stw	r3,8(r2)
 100b690:	18800315 	stw	r2,12(r3)
 100b694:	003f2306 	br	100b324 <_realloc_r+0x84>
 100b698:	8809883a 	mov	r4,r17
 100b69c:	900b883a 	mov	r5,r18
 100b6a0:	1009ed00 	call	1009ed0 <memmove>
 100b6a4:	003fd006 	br	100b5e8 <_realloc_r+0x348>
 100b6a8:	30800117 	ldw	r2,4(r6)
 100b6ac:	e0c00404 	addi	r3,fp,16
 100b6b0:	1108703a 	and	r4,r2,r4
 100b6b4:	9905883a 	add	r2,r19,r4
 100b6b8:	10ff4d16 	blt	r2,r3,100b3f0 <_realloc_r+0x150>
 100b6bc:	1705c83a 	sub	r2,r2,fp
 100b6c0:	870b883a 	add	r5,r16,fp
 100b6c4:	10800054 	ori	r2,r2,1
 100b6c8:	28800115 	stw	r2,4(r5)
 100b6cc:	80c00117 	ldw	r3,4(r16)
 100b6d0:	00804074 	movhi	r2,257
 100b6d4:	1088c004 	addi	r2,r2,8960
 100b6d8:	b009883a 	mov	r4,r22
 100b6dc:	18c0004c 	andi	r3,r3,1
 100b6e0:	e0c6b03a 	or	r3,fp,r3
 100b6e4:	11400215 	stw	r5,8(r2)
 100b6e8:	80c00115 	stw	r3,4(r16)
 100b6ec:	100eab00 	call	100eab0 <__malloc_unlock>
 100b6f0:	84400204 	addi	r17,r16,8
 100b6f4:	003f2006 	br	100b378 <_realloc_r+0xd8>
 100b6f8:	98a9883a 	add	r20,r19,r2
 100b6fc:	2509883a 	add	r4,r4,r20
 100b700:	e0800404 	addi	r2,fp,16
 100b704:	d9000115 	stw	r4,4(sp)
 100b708:	20bf7016 	blt	r4,r2,100b4cc <_realloc_r+0x22c>
 100b70c:	b8c00317 	ldw	r3,12(r23)
 100b710:	b8800217 	ldw	r2,8(r23)
 100b714:	99bfff04 	addi	r6,r19,-4
 100b718:	01400904 	movi	r5,36
 100b71c:	18800215 	stw	r2,8(r3)
 100b720:	10c00315 	stw	r3,12(r2)
 100b724:	bc400204 	addi	r17,r23,8
 100b728:	29804136 	bltu	r5,r6,100b830 <_realloc_r+0x590>
 100b72c:	008004c4 	movi	r2,19
 100b730:	9009883a 	mov	r4,r18
 100b734:	880f883a 	mov	r7,r17
 100b738:	11800f2e 	bgeu	r2,r6,100b778 <_realloc_r+0x4d8>
 100b73c:	90800017 	ldw	r2,0(r18)
 100b740:	b9c00404 	addi	r7,r23,16
 100b744:	91000204 	addi	r4,r18,8
 100b748:	b8800215 	stw	r2,8(r23)
 100b74c:	90c00117 	ldw	r3,4(r18)
 100b750:	008006c4 	movi	r2,27
 100b754:	b8c00315 	stw	r3,12(r23)
 100b758:	1180072e 	bgeu	r2,r6,100b778 <_realloc_r+0x4d8>
 100b75c:	90c00217 	ldw	r3,8(r18)
 100b760:	b9c00604 	addi	r7,r23,24
 100b764:	91000404 	addi	r4,r18,16
 100b768:	b8c00415 	stw	r3,16(r23)
 100b76c:	90800317 	ldw	r2,12(r18)
 100b770:	b8800515 	stw	r2,20(r23)
 100b774:	31404026 	beq	r6,r5,100b878 <_realloc_r+0x5d8>
 100b778:	20800017 	ldw	r2,0(r4)
 100b77c:	38800015 	stw	r2,0(r7)
 100b780:	20c00117 	ldw	r3,4(r4)
 100b784:	38c00115 	stw	r3,4(r7)
 100b788:	20800217 	ldw	r2,8(r4)
 100b78c:	38800215 	stw	r2,8(r7)
 100b790:	d8c00117 	ldw	r3,4(sp)
 100b794:	bf0b883a 	add	r5,r23,fp
 100b798:	b009883a 	mov	r4,r22
 100b79c:	1f05c83a 	sub	r2,r3,fp
 100b7a0:	10800054 	ori	r2,r2,1
 100b7a4:	28800115 	stw	r2,4(r5)
 100b7a8:	b8c00117 	ldw	r3,4(r23)
 100b7ac:	00804074 	movhi	r2,257
 100b7b0:	1088c004 	addi	r2,r2,8960
 100b7b4:	11400215 	stw	r5,8(r2)
 100b7b8:	18c0004c 	andi	r3,r3,1
 100b7bc:	e0c6b03a 	or	r3,fp,r3
 100b7c0:	b8c00115 	stw	r3,4(r23)
 100b7c4:	100eab00 	call	100eab0 <__malloc_unlock>
 100b7c8:	003eeb06 	br	100b378 <_realloc_r+0xd8>
 100b7cc:	20800117 	ldw	r2,4(r4)
 100b7d0:	00ffff04 	movi	r3,-4
 100b7d4:	800f883a 	mov	r7,r16
 100b7d8:	10c4703a 	and	r2,r2,r3
 100b7dc:	98a9883a 	add	r20,r19,r2
 100b7e0:	84000204 	addi	r16,r16,8
 100b7e4:	003ecf06 	br	100b324 <_realloc_r+0x84>
 100b7e8:	900b883a 	mov	r5,r18
 100b7ec:	8009883a 	mov	r4,r16
 100b7f0:	1009ed00 	call	1009ed0 <memmove>
 100b7f4:	dd000017 	ldw	r20,0(sp)
 100b7f8:	b80f883a 	mov	r7,r23
 100b7fc:	003ec906 	br	100b324 <_realloc_r+0x84>
 100b800:	900b883a 	mov	r5,r18
 100b804:	8009883a 	mov	r4,r16
 100b808:	1009ed00 	call	1009ed0 <memmove>
 100b80c:	b80f883a 	mov	r7,r23
 100b810:	003ec406 	br	100b324 <_realloc_r+0x84>
 100b814:	90c00417 	ldw	r3,16(r18)
 100b818:	89400604 	addi	r5,r17,24
 100b81c:	91000604 	addi	r4,r18,24
 100b820:	88c00415 	stw	r3,16(r17)
 100b824:	90800517 	ldw	r2,20(r18)
 100b828:	88800515 	stw	r2,20(r17)
 100b82c:	003f6806 	br	100b5d0 <_realloc_r+0x330>
 100b830:	900b883a 	mov	r5,r18
 100b834:	8809883a 	mov	r4,r17
 100b838:	1009ed00 	call	1009ed0 <memmove>
 100b83c:	003fd406 	br	100b790 <_realloc_r+0x4f0>
 100b840:	90c00417 	ldw	r3,16(r18)
 100b844:	91000604 	addi	r4,r18,24
 100b848:	ba000804 	addi	r8,r23,32
 100b84c:	b8c00615 	stw	r3,24(r23)
 100b850:	90800517 	ldw	r2,20(r18)
 100b854:	b8800715 	stw	r2,28(r23)
 100b858:	003f1206 	br	100b4a4 <_realloc_r+0x204>
 100b85c:	90c00417 	ldw	r3,16(r18)
 100b860:	91000604 	addi	r4,r18,24
 100b864:	ba000804 	addi	r8,r23,32
 100b868:	b8c00615 	stw	r3,24(r23)
 100b86c:	90800517 	ldw	r2,20(r18)
 100b870:	b8800715 	stw	r2,28(r23)
 100b874:	003f3206 	br	100b540 <_realloc_r+0x2a0>
 100b878:	90c00417 	ldw	r3,16(r18)
 100b87c:	91000604 	addi	r4,r18,24
 100b880:	b9c00804 	addi	r7,r23,32
 100b884:	b8c00615 	stw	r3,24(r23)
 100b888:	90800517 	ldw	r2,20(r18)
 100b88c:	b8800715 	stw	r2,28(r23)
 100b890:	003fb906 	br	100b778 <_realloc_r+0x4d8>

0100b894 <__isinfd>:
 100b894:	200d883a 	mov	r6,r4
 100b898:	0109c83a 	sub	r4,zero,r4
 100b89c:	2188b03a 	or	r4,r4,r6
 100b8a0:	2008d7fa 	srli	r4,r4,31
 100b8a4:	00a00034 	movhi	r2,32768
 100b8a8:	10bfffc4 	addi	r2,r2,-1
 100b8ac:	1144703a 	and	r2,r2,r5
 100b8b0:	2088b03a 	or	r4,r4,r2
 100b8b4:	009ffc34 	movhi	r2,32752
 100b8b8:	1105c83a 	sub	r2,r2,r4
 100b8bc:	0087c83a 	sub	r3,zero,r2
 100b8c0:	10c4b03a 	or	r2,r2,r3
 100b8c4:	1004d7fa 	srli	r2,r2,31
 100b8c8:	00c00044 	movi	r3,1
 100b8cc:	1885c83a 	sub	r2,r3,r2
 100b8d0:	f800283a 	ret

0100b8d4 <__isnand>:
 100b8d4:	200d883a 	mov	r6,r4
 100b8d8:	0109c83a 	sub	r4,zero,r4
 100b8dc:	2188b03a 	or	r4,r4,r6
 100b8e0:	2008d7fa 	srli	r4,r4,31
 100b8e4:	00a00034 	movhi	r2,32768
 100b8e8:	10bfffc4 	addi	r2,r2,-1
 100b8ec:	1144703a 	and	r2,r2,r5
 100b8f0:	2088b03a 	or	r4,r4,r2
 100b8f4:	009ffc34 	movhi	r2,32752
 100b8f8:	1105c83a 	sub	r2,r2,r4
 100b8fc:	1004d7fa 	srli	r2,r2,31
 100b900:	f800283a 	ret

0100b904 <strcmp>:
 100b904:	2144b03a 	or	r2,r4,r5
 100b908:	108000cc 	andi	r2,r2,3
 100b90c:	10001d1e 	bne	r2,zero,100b984 <strcmp+0x80>
 100b910:	200f883a 	mov	r7,r4
 100b914:	28800017 	ldw	r2,0(r5)
 100b918:	21000017 	ldw	r4,0(r4)
 100b91c:	280d883a 	mov	r6,r5
 100b920:	2080161e 	bne	r4,r2,100b97c <strcmp+0x78>
 100b924:	023fbff4 	movhi	r8,65279
 100b928:	423fbfc4 	addi	r8,r8,-257
 100b92c:	2207883a 	add	r3,r4,r8
 100b930:	01602074 	movhi	r5,32897
 100b934:	29602004 	addi	r5,r5,-32640
 100b938:	1946703a 	and	r3,r3,r5
 100b93c:	0104303a 	nor	r2,zero,r4
 100b940:	10c4703a 	and	r2,r2,r3
 100b944:	10001c1e 	bne	r2,zero,100b9b8 <strcmp+0xb4>
 100b948:	4013883a 	mov	r9,r8
 100b94c:	2811883a 	mov	r8,r5
 100b950:	00000106 	br	100b958 <strcmp+0x54>
 100b954:	1800181e 	bne	r3,zero,100b9b8 <strcmp+0xb4>
 100b958:	39c00104 	addi	r7,r7,4
 100b95c:	39000017 	ldw	r4,0(r7)
 100b960:	31800104 	addi	r6,r6,4
 100b964:	31400017 	ldw	r5,0(r6)
 100b968:	2245883a 	add	r2,r4,r9
 100b96c:	1204703a 	and	r2,r2,r8
 100b970:	0106303a 	nor	r3,zero,r4
 100b974:	1886703a 	and	r3,r3,r2
 100b978:	217ff626 	beq	r4,r5,100b954 <strcmp+0x50>
 100b97c:	3809883a 	mov	r4,r7
 100b980:	300b883a 	mov	r5,r6
 100b984:	20c00007 	ldb	r3,0(r4)
 100b988:	1800051e 	bne	r3,zero,100b9a0 <strcmp+0x9c>
 100b98c:	00000606 	br	100b9a8 <strcmp+0xa4>
 100b990:	21000044 	addi	r4,r4,1
 100b994:	20c00007 	ldb	r3,0(r4)
 100b998:	29400044 	addi	r5,r5,1
 100b99c:	18000226 	beq	r3,zero,100b9a8 <strcmp+0xa4>
 100b9a0:	28800007 	ldb	r2,0(r5)
 100b9a4:	18bffa26 	beq	r3,r2,100b990 <strcmp+0x8c>
 100b9a8:	20c00003 	ldbu	r3,0(r4)
 100b9ac:	28800003 	ldbu	r2,0(r5)
 100b9b0:	1885c83a 	sub	r2,r3,r2
 100b9b4:	f800283a 	ret
 100b9b8:	0005883a 	mov	r2,zero
 100b9bc:	f800283a 	ret

0100b9c0 <__swbuf_r>:
 100b9c0:	defffc04 	addi	sp,sp,-16
 100b9c4:	dc400215 	stw	r17,8(sp)
 100b9c8:	dc000115 	stw	r16,4(sp)
 100b9cc:	dfc00315 	stw	ra,12(sp)
 100b9d0:	2023883a 	mov	r17,r4
 100b9d4:	2821883a 	mov	r16,r5
 100b9d8:	20000226 	beq	r4,zero,100b9e4 <__swbuf_r+0x24>
 100b9dc:	20800e17 	ldw	r2,56(r4)
 100b9e0:	10002f26 	beq	r2,zero,100baa0 <__swbuf_r+0xe0>
 100b9e4:	3080030b 	ldhu	r2,12(r6)
 100b9e8:	30c00617 	ldw	r3,24(r6)
 100b9ec:	1080020c 	andi	r2,r2,8
 100b9f0:	30c00215 	stw	r3,8(r6)
 100b9f4:	10002226 	beq	r2,zero,100ba80 <__swbuf_r+0xc0>
 100b9f8:	30c00417 	ldw	r3,16(r6)
 100b9fc:	18002026 	beq	r3,zero,100ba80 <__swbuf_r+0xc0>
 100ba00:	31000017 	ldw	r4,0(r6)
 100ba04:	30800517 	ldw	r2,20(r6)
 100ba08:	20c7c83a 	sub	r3,r4,r3
 100ba0c:	18802f0e 	bge	r3,r2,100bacc <__swbuf_r+0x10c>
 100ba10:	19400044 	addi	r5,r3,1
 100ba14:	30800217 	ldw	r2,8(r6)
 100ba18:	84003fcc 	andi	r16,r16,255
 100ba1c:	20c00044 	addi	r3,r4,1
 100ba20:	10bfffc4 	addi	r2,r2,-1
 100ba24:	30800215 	stw	r2,8(r6)
 100ba28:	24000005 	stb	r16,0(r4)
 100ba2c:	30800517 	ldw	r2,20(r6)
 100ba30:	30c00015 	stw	r3,0(r6)
 100ba34:	11400c26 	beq	r2,r5,100ba68 <__swbuf_r+0xa8>
 100ba38:	3080030b 	ldhu	r2,12(r6)
 100ba3c:	1080004c 	andi	r2,r2,1
 100ba40:	1005003a 	cmpeq	r2,r2,zero
 100ba44:	10000626 	beq	r2,zero,100ba60 <__swbuf_r+0xa0>
 100ba48:	8005883a 	mov	r2,r16
 100ba4c:	dfc00317 	ldw	ra,12(sp)
 100ba50:	dc400217 	ldw	r17,8(sp)
 100ba54:	dc000117 	ldw	r16,4(sp)
 100ba58:	dec00404 	addi	sp,sp,16
 100ba5c:	f800283a 	ret
 100ba60:	00800284 	movi	r2,10
 100ba64:	80bff81e 	bne	r16,r2,100ba48 <__swbuf_r+0x88>
 100ba68:	8809883a 	mov	r4,r17
 100ba6c:	300b883a 	mov	r5,r6
 100ba70:	10035f40 	call	10035f4 <_fflush_r>
 100ba74:	103ff426 	beq	r2,zero,100ba48 <__swbuf_r+0x88>
 100ba78:	043fffc4 	movi	r16,-1
 100ba7c:	003ff206 	br	100ba48 <__swbuf_r+0x88>
 100ba80:	300b883a 	mov	r5,r6
 100ba84:	8809883a 	mov	r4,r17
 100ba88:	d9800015 	stw	r6,0(sp)
 100ba8c:	1007cc00 	call	1007cc0 <__swsetup_r>
 100ba90:	d9800017 	ldw	r6,0(sp)
 100ba94:	1000061e 	bne	r2,zero,100bab0 <__swbuf_r+0xf0>
 100ba98:	30c00417 	ldw	r3,16(r6)
 100ba9c:	003fd806 	br	100ba00 <__swbuf_r+0x40>
 100baa0:	d9800015 	stw	r6,0(sp)
 100baa4:	100388c0 	call	100388c <__sinit>
 100baa8:	d9800017 	ldw	r6,0(sp)
 100baac:	003fcd06 	br	100b9e4 <__swbuf_r+0x24>
 100bab0:	3080030b 	ldhu	r2,12(r6)
 100bab4:	00c00244 	movi	r3,9
 100bab8:	043fffc4 	movi	r16,-1
 100babc:	10801014 	ori	r2,r2,64
 100bac0:	3080030d 	sth	r2,12(r6)
 100bac4:	88c00015 	stw	r3,0(r17)
 100bac8:	003fdf06 	br	100ba48 <__swbuf_r+0x88>
 100bacc:	300b883a 	mov	r5,r6
 100bad0:	8809883a 	mov	r4,r17
 100bad4:	d9800015 	stw	r6,0(sp)
 100bad8:	10035f40 	call	10035f4 <_fflush_r>
 100badc:	d9800017 	ldw	r6,0(sp)
 100bae0:	103fe51e 	bne	r2,zero,100ba78 <__swbuf_r+0xb8>
 100bae4:	31000017 	ldw	r4,0(r6)
 100bae8:	01400044 	movi	r5,1
 100baec:	003fc906 	br	100ba14 <__swbuf_r+0x54>

0100baf0 <__swbuf>:
 100baf0:	01804074 	movhi	r6,257
 100baf4:	318e7f04 	addi	r6,r6,14844
 100baf8:	2007883a 	mov	r3,r4
 100bafc:	31000017 	ldw	r4,0(r6)
 100bb00:	280d883a 	mov	r6,r5
 100bb04:	180b883a 	mov	r5,r3
 100bb08:	100b9c01 	jmpi	100b9c0 <__swbuf_r>

0100bb0c <_calloc_r>:
 100bb0c:	defffe04 	addi	sp,sp,-8
 100bb10:	dc400015 	stw	r17,0(sp)
 100bb14:	2023883a 	mov	r17,r4
 100bb18:	2809883a 	mov	r4,r5
 100bb1c:	300b883a 	mov	r5,r6
 100bb20:	dfc00115 	stw	ra,4(sp)
 100bb24:	1002f380 	call	1002f38 <__mulsi3>
 100bb28:	100b883a 	mov	r5,r2
 100bb2c:	8809883a 	mov	r4,r17
 100bb30:	1004a8c0 	call	1004a8c <_malloc_r>
 100bb34:	1023883a 	mov	r17,r2
 100bb38:	01c00904 	movi	r7,36
 100bb3c:	10000d26 	beq	r2,zero,100bb74 <_calloc_r+0x68>
 100bb40:	10ffff17 	ldw	r3,-4(r2)
 100bb44:	1009883a 	mov	r4,r2
 100bb48:	00bfff04 	movi	r2,-4
 100bb4c:	1886703a 	and	r3,r3,r2
 100bb50:	1887883a 	add	r3,r3,r2
 100bb54:	180d883a 	mov	r6,r3
 100bb58:	000b883a 	mov	r5,zero
 100bb5c:	38c01736 	bltu	r7,r3,100bbbc <_calloc_r+0xb0>
 100bb60:	008004c4 	movi	r2,19
 100bb64:	10c00836 	bltu	r2,r3,100bb88 <_calloc_r+0x7c>
 100bb68:	20000215 	stw	zero,8(r4)
 100bb6c:	20000015 	stw	zero,0(r4)
 100bb70:	20000115 	stw	zero,4(r4)
 100bb74:	8805883a 	mov	r2,r17
 100bb78:	dfc00117 	ldw	ra,4(sp)
 100bb7c:	dc400017 	ldw	r17,0(sp)
 100bb80:	dec00204 	addi	sp,sp,8
 100bb84:	f800283a 	ret
 100bb88:	008006c4 	movi	r2,27
 100bb8c:	88000015 	stw	zero,0(r17)
 100bb90:	88000115 	stw	zero,4(r17)
 100bb94:	89000204 	addi	r4,r17,8
 100bb98:	10fff32e 	bgeu	r2,r3,100bb68 <_calloc_r+0x5c>
 100bb9c:	88000215 	stw	zero,8(r17)
 100bba0:	88000315 	stw	zero,12(r17)
 100bba4:	89000404 	addi	r4,r17,16
 100bba8:	19ffef1e 	bne	r3,r7,100bb68 <_calloc_r+0x5c>
 100bbac:	89000604 	addi	r4,r17,24
 100bbb0:	88000415 	stw	zero,16(r17)
 100bbb4:	88000515 	stw	zero,20(r17)
 100bbb8:	003feb06 	br	100bb68 <_calloc_r+0x5c>
 100bbbc:	10051cc0 	call	10051cc <memset>
 100bbc0:	8805883a 	mov	r2,r17
 100bbc4:	dfc00117 	ldw	ra,4(sp)
 100bbc8:	dc400017 	ldw	r17,0(sp)
 100bbcc:	dec00204 	addi	sp,sp,8
 100bbd0:	f800283a 	ret

0100bbd4 <__udivdi3>:
 100bbd4:	defff104 	addi	sp,sp,-60
 100bbd8:	0015883a 	mov	r10,zero
 100bbdc:	2005883a 	mov	r2,r4
 100bbe0:	3011883a 	mov	r8,r6
 100bbe4:	df000d15 	stw	fp,52(sp)
 100bbe8:	dd400a15 	stw	r21,40(sp)
 100bbec:	dcc00815 	stw	r19,32(sp)
 100bbf0:	dfc00e15 	stw	ra,56(sp)
 100bbf4:	ddc00c15 	stw	r23,48(sp)
 100bbf8:	dd800b15 	stw	r22,44(sp)
 100bbfc:	dd000915 	stw	r20,36(sp)
 100bc00:	dc800715 	stw	r18,28(sp)
 100bc04:	dc400615 	stw	r17,24(sp)
 100bc08:	dc000515 	stw	r16,20(sp)
 100bc0c:	da800315 	stw	r10,12(sp)
 100bc10:	4027883a 	mov	r19,r8
 100bc14:	1039883a 	mov	fp,r2
 100bc18:	282b883a 	mov	r21,r5
 100bc1c:	da800415 	stw	r10,16(sp)
 100bc20:	3800401e 	bne	r7,zero,100bd24 <__udivdi3+0x150>
 100bc24:	2a006536 	bltu	r5,r8,100bdbc <__udivdi3+0x1e8>
 100bc28:	4000b526 	beq	r8,zero,100bf00 <__udivdi3+0x32c>
 100bc2c:	00bfffd4 	movui	r2,65535
 100bc30:	14c0ad36 	bltu	r2,r19,100bee8 <__udivdi3+0x314>
 100bc34:	00803fc4 	movi	r2,255
 100bc38:	14c15e36 	bltu	r2,r19,100c1b4 <__udivdi3+0x5e0>
 100bc3c:	000b883a 	mov	r5,zero
 100bc40:	0005883a 	mov	r2,zero
 100bc44:	9884d83a 	srl	r2,r19,r2
 100bc48:	01004074 	movhi	r4,257
 100bc4c:	21076a04 	addi	r4,r4,7592
 100bc50:	01800804 	movi	r6,32
 100bc54:	1105883a 	add	r2,r2,r4
 100bc58:	10c00003 	ldbu	r3,0(r2)
 100bc5c:	28c7883a 	add	r3,r5,r3
 100bc60:	30e9c83a 	sub	r20,r6,r3
 100bc64:	a0010a1e 	bne	r20,zero,100c090 <__udivdi3+0x4bc>
 100bc68:	982ed43a 	srli	r23,r19,16
 100bc6c:	acebc83a 	sub	r21,r21,r19
 100bc70:	9dbfffcc 	andi	r22,r19,65535
 100bc74:	05000044 	movi	r20,1
 100bc78:	a809883a 	mov	r4,r21
 100bc7c:	b80b883a 	mov	r5,r23
 100bc80:	100db080 	call	100db08 <__udivsi3>
 100bc84:	100b883a 	mov	r5,r2
 100bc88:	b009883a 	mov	r4,r22
 100bc8c:	1021883a 	mov	r16,r2
 100bc90:	1002f380 	call	1002f38 <__mulsi3>
 100bc94:	a809883a 	mov	r4,r21
 100bc98:	b80b883a 	mov	r5,r23
 100bc9c:	1023883a 	mov	r17,r2
 100bca0:	100db100 	call	100db10 <__umodsi3>
 100bca4:	1004943a 	slli	r2,r2,16
 100bca8:	e006d43a 	srli	r3,fp,16
 100bcac:	10c4b03a 	or	r2,r2,r3
 100bcb0:	1440042e 	bgeu	r2,r17,100bcc4 <__udivdi3+0xf0>
 100bcb4:	14c5883a 	add	r2,r2,r19
 100bcb8:	843fffc4 	addi	r16,r16,-1
 100bcbc:	14c00136 	bltu	r2,r19,100bcc4 <__udivdi3+0xf0>
 100bcc0:	14415c36 	bltu	r2,r17,100c234 <__udivdi3+0x660>
 100bcc4:	1463c83a 	sub	r17,r2,r17
 100bcc8:	8809883a 	mov	r4,r17
 100bccc:	b80b883a 	mov	r5,r23
 100bcd0:	100db080 	call	100db08 <__udivsi3>
 100bcd4:	100b883a 	mov	r5,r2
 100bcd8:	b009883a 	mov	r4,r22
 100bcdc:	102b883a 	mov	r21,r2
 100bce0:	1002f380 	call	1002f38 <__mulsi3>
 100bce4:	8809883a 	mov	r4,r17
 100bce8:	b80b883a 	mov	r5,r23
 100bcec:	1025883a 	mov	r18,r2
 100bcf0:	100db100 	call	100db10 <__umodsi3>
 100bcf4:	1004943a 	slli	r2,r2,16
 100bcf8:	e0ffffcc 	andi	r3,fp,65535
 100bcfc:	10c4b03a 	or	r2,r2,r3
 100bd00:	1480042e 	bgeu	r2,r18,100bd14 <__udivdi3+0x140>
 100bd04:	9885883a 	add	r2,r19,r2
 100bd08:	ad7fffc4 	addi	r21,r21,-1
 100bd0c:	14c00136 	bltu	r2,r19,100bd14 <__udivdi3+0x140>
 100bd10:	14813c36 	bltu	r2,r18,100c204 <__udivdi3+0x630>
 100bd14:	8004943a 	slli	r2,r16,16
 100bd18:	a009883a 	mov	r4,r20
 100bd1c:	a884b03a 	or	r2,r21,r2
 100bd20:	00001506 	br	100bd78 <__udivdi3+0x1a4>
 100bd24:	380d883a 	mov	r6,r7
 100bd28:	29c06c36 	bltu	r5,r7,100bedc <__udivdi3+0x308>
 100bd2c:	00bfffd4 	movui	r2,65535
 100bd30:	11c06436 	bltu	r2,r7,100bec4 <__udivdi3+0x2f0>
 100bd34:	00803fc4 	movi	r2,255
 100bd38:	11c11836 	bltu	r2,r7,100c19c <__udivdi3+0x5c8>
 100bd3c:	000b883a 	mov	r5,zero
 100bd40:	0005883a 	mov	r2,zero
 100bd44:	3084d83a 	srl	r2,r6,r2
 100bd48:	01004074 	movhi	r4,257
 100bd4c:	21076a04 	addi	r4,r4,7592
 100bd50:	01c00804 	movi	r7,32
 100bd54:	1105883a 	add	r2,r2,r4
 100bd58:	10c00003 	ldbu	r3,0(r2)
 100bd5c:	28c7883a 	add	r3,r5,r3
 100bd60:	38edc83a 	sub	r22,r7,r3
 100bd64:	b000731e 	bne	r22,zero,100bf34 <__udivdi3+0x360>
 100bd68:	35400136 	bltu	r6,r21,100bd70 <__udivdi3+0x19c>
 100bd6c:	e4c05b36 	bltu	fp,r19,100bedc <__udivdi3+0x308>
 100bd70:	00800044 	movi	r2,1
 100bd74:	0009883a 	mov	r4,zero
 100bd78:	d8800315 	stw	r2,12(sp)
 100bd7c:	d9400317 	ldw	r5,12(sp)
 100bd80:	2007883a 	mov	r3,r4
 100bd84:	d9000415 	stw	r4,16(sp)
 100bd88:	2805883a 	mov	r2,r5
 100bd8c:	dfc00e17 	ldw	ra,56(sp)
 100bd90:	df000d17 	ldw	fp,52(sp)
 100bd94:	ddc00c17 	ldw	r23,48(sp)
 100bd98:	dd800b17 	ldw	r22,44(sp)
 100bd9c:	dd400a17 	ldw	r21,40(sp)
 100bda0:	dd000917 	ldw	r20,36(sp)
 100bda4:	dcc00817 	ldw	r19,32(sp)
 100bda8:	dc800717 	ldw	r18,28(sp)
 100bdac:	dc400617 	ldw	r17,24(sp)
 100bdb0:	dc000517 	ldw	r16,20(sp)
 100bdb4:	dec00f04 	addi	sp,sp,60
 100bdb8:	f800283a 	ret
 100bdbc:	00bfffd4 	movui	r2,65535
 100bdc0:	12005636 	bltu	r2,r8,100bf1c <__udivdi3+0x348>
 100bdc4:	00803fc4 	movi	r2,255
 100bdc8:	12010036 	bltu	r2,r8,100c1cc <__udivdi3+0x5f8>
 100bdcc:	000b883a 	mov	r5,zero
 100bdd0:	0005883a 	mov	r2,zero
 100bdd4:	9884d83a 	srl	r2,r19,r2
 100bdd8:	01004074 	movhi	r4,257
 100bddc:	21076a04 	addi	r4,r4,7592
 100bde0:	01800804 	movi	r6,32
 100bde4:	1105883a 	add	r2,r2,r4
 100bde8:	10c00003 	ldbu	r3,0(r2)
 100bdec:	28c7883a 	add	r3,r5,r3
 100bdf0:	30cbc83a 	sub	r5,r6,r3
 100bdf4:	28000626 	beq	r5,zero,100be10 <__udivdi3+0x23c>
 100bdf8:	3145c83a 	sub	r2,r6,r5
 100bdfc:	e084d83a 	srl	r2,fp,r2
 100be00:	a946983a 	sll	r3,r21,r5
 100be04:	e178983a 	sll	fp,fp,r5
 100be08:	9966983a 	sll	r19,r19,r5
 100be0c:	18aab03a 	or	r21,r3,r2
 100be10:	982ed43a 	srli	r23,r19,16
 100be14:	a809883a 	mov	r4,r21
 100be18:	9cbfffcc 	andi	r18,r19,65535
 100be1c:	b80b883a 	mov	r5,r23
 100be20:	100db080 	call	100db08 <__udivsi3>
 100be24:	100b883a 	mov	r5,r2
 100be28:	9009883a 	mov	r4,r18
 100be2c:	1021883a 	mov	r16,r2
 100be30:	1002f380 	call	1002f38 <__mulsi3>
 100be34:	a809883a 	mov	r4,r21
 100be38:	b80b883a 	mov	r5,r23
 100be3c:	1023883a 	mov	r17,r2
 100be40:	100db100 	call	100db10 <__umodsi3>
 100be44:	1004943a 	slli	r2,r2,16
 100be48:	e006d43a 	srli	r3,fp,16
 100be4c:	10c4b03a 	or	r2,r2,r3
 100be50:	1440042e 	bgeu	r2,r17,100be64 <__udivdi3+0x290>
 100be54:	14c5883a 	add	r2,r2,r19
 100be58:	843fffc4 	addi	r16,r16,-1
 100be5c:	14c00136 	bltu	r2,r19,100be64 <__udivdi3+0x290>
 100be60:	1440ea36 	bltu	r2,r17,100c20c <__udivdi3+0x638>
 100be64:	1463c83a 	sub	r17,r2,r17
 100be68:	8809883a 	mov	r4,r17
 100be6c:	b80b883a 	mov	r5,r23
 100be70:	100db080 	call	100db08 <__udivsi3>
 100be74:	100b883a 	mov	r5,r2
 100be78:	9009883a 	mov	r4,r18
 100be7c:	102b883a 	mov	r21,r2
 100be80:	1002f380 	call	1002f38 <__mulsi3>
 100be84:	8809883a 	mov	r4,r17
 100be88:	b80b883a 	mov	r5,r23
 100be8c:	1025883a 	mov	r18,r2
 100be90:	100db100 	call	100db10 <__umodsi3>
 100be94:	1004943a 	slli	r2,r2,16
 100be98:	e0ffffcc 	andi	r3,fp,65535
 100be9c:	10c4b03a 	or	r2,r2,r3
 100bea0:	1480042e 	bgeu	r2,r18,100beb4 <__udivdi3+0x2e0>
 100bea4:	9885883a 	add	r2,r19,r2
 100bea8:	ad7fffc4 	addi	r21,r21,-1
 100beac:	14c00136 	bltu	r2,r19,100beb4 <__udivdi3+0x2e0>
 100beb0:	1480d936 	bltu	r2,r18,100c218 <__udivdi3+0x644>
 100beb4:	8004943a 	slli	r2,r16,16
 100beb8:	0009883a 	mov	r4,zero
 100bebc:	a884b03a 	or	r2,r21,r2
 100bec0:	003fad06 	br	100bd78 <__udivdi3+0x1a4>
 100bec4:	00804034 	movhi	r2,256
 100bec8:	10bfffc4 	addi	r2,r2,-1
 100becc:	11c0b636 	bltu	r2,r7,100c1a8 <__udivdi3+0x5d4>
 100bed0:	01400404 	movi	r5,16
 100bed4:	2805883a 	mov	r2,r5
 100bed8:	003f9a06 	br	100bd44 <__udivdi3+0x170>
 100bedc:	0005883a 	mov	r2,zero
 100bee0:	0009883a 	mov	r4,zero
 100bee4:	003fa406 	br	100bd78 <__udivdi3+0x1a4>
 100bee8:	00804034 	movhi	r2,256
 100beec:	10bfffc4 	addi	r2,r2,-1
 100bef0:	14c0b336 	bltu	r2,r19,100c1c0 <__udivdi3+0x5ec>
 100bef4:	01400404 	movi	r5,16
 100bef8:	2805883a 	mov	r2,r5
 100befc:	003f5106 	br	100bc44 <__udivdi3+0x70>
 100bf00:	01000044 	movi	r4,1
 100bf04:	000b883a 	mov	r5,zero
 100bf08:	100db080 	call	100db08 <__udivsi3>
 100bf0c:	1027883a 	mov	r19,r2
 100bf10:	00bfffd4 	movui	r2,65535
 100bf14:	14fff436 	bltu	r2,r19,100bee8 <__udivdi3+0x314>
 100bf18:	003f4606 	br	100bc34 <__udivdi3+0x60>
 100bf1c:	00804034 	movhi	r2,256
 100bf20:	10bfffc4 	addi	r2,r2,-1
 100bf24:	1200ac36 	bltu	r2,r8,100c1d8 <__udivdi3+0x604>
 100bf28:	01400404 	movi	r5,16
 100bf2c:	2805883a 	mov	r2,r5
 100bf30:	003fa806 	br	100bdd4 <__udivdi3+0x200>
 100bf34:	3d85c83a 	sub	r2,r7,r22
 100bf38:	3588983a 	sll	r4,r6,r22
 100bf3c:	9886d83a 	srl	r3,r19,r2
 100bf40:	a8a2d83a 	srl	r17,r21,r2
 100bf44:	e084d83a 	srl	r2,fp,r2
 100bf48:	20eeb03a 	or	r23,r4,r3
 100bf4c:	b824d43a 	srli	r18,r23,16
 100bf50:	ad86983a 	sll	r3,r21,r22
 100bf54:	8809883a 	mov	r4,r17
 100bf58:	900b883a 	mov	r5,r18
 100bf5c:	1886b03a 	or	r3,r3,r2
 100bf60:	d8c00115 	stw	r3,4(sp)
 100bf64:	bc3fffcc 	andi	r16,r23,65535
 100bf68:	100db080 	call	100db08 <__udivsi3>
 100bf6c:	100b883a 	mov	r5,r2
 100bf70:	8009883a 	mov	r4,r16
 100bf74:	1029883a 	mov	r20,r2
 100bf78:	1002f380 	call	1002f38 <__mulsi3>
 100bf7c:	900b883a 	mov	r5,r18
 100bf80:	8809883a 	mov	r4,r17
 100bf84:	102b883a 	mov	r21,r2
 100bf88:	100db100 	call	100db10 <__umodsi3>
 100bf8c:	d9400117 	ldw	r5,4(sp)
 100bf90:	1004943a 	slli	r2,r2,16
 100bf94:	9da6983a 	sll	r19,r19,r22
 100bf98:	2806d43a 	srli	r3,r5,16
 100bf9c:	10c4b03a 	or	r2,r2,r3
 100bfa0:	1540032e 	bgeu	r2,r21,100bfb0 <__udivdi3+0x3dc>
 100bfa4:	15c5883a 	add	r2,r2,r23
 100bfa8:	a53fffc4 	addi	r20,r20,-1
 100bfac:	15c0912e 	bgeu	r2,r23,100c1f4 <__udivdi3+0x620>
 100bfb0:	1563c83a 	sub	r17,r2,r21
 100bfb4:	8809883a 	mov	r4,r17
 100bfb8:	900b883a 	mov	r5,r18
 100bfbc:	100db080 	call	100db08 <__udivsi3>
 100bfc0:	100b883a 	mov	r5,r2
 100bfc4:	8009883a 	mov	r4,r16
 100bfc8:	102b883a 	mov	r21,r2
 100bfcc:	1002f380 	call	1002f38 <__mulsi3>
 100bfd0:	8809883a 	mov	r4,r17
 100bfd4:	900b883a 	mov	r5,r18
 100bfd8:	1021883a 	mov	r16,r2
 100bfdc:	100db100 	call	100db10 <__umodsi3>
 100bfe0:	da800117 	ldw	r10,4(sp)
 100bfe4:	1004943a 	slli	r2,r2,16
 100bfe8:	50ffffcc 	andi	r3,r10,65535
 100bfec:	10c6b03a 	or	r3,r2,r3
 100bff0:	1c00032e 	bgeu	r3,r16,100c000 <__udivdi3+0x42c>
 100bff4:	1dc7883a 	add	r3,r3,r23
 100bff8:	ad7fffc4 	addi	r21,r21,-1
 100bffc:	1dc0792e 	bgeu	r3,r23,100c1e4 <__udivdi3+0x610>
 100c000:	a004943a 	slli	r2,r20,16
 100c004:	982ed43a 	srli	r23,r19,16
 100c008:	9cffffcc 	andi	r19,r19,65535
 100c00c:	a8a4b03a 	or	r18,r21,r2
 100c010:	947fffcc 	andi	r17,r18,65535
 100c014:	902ad43a 	srli	r21,r18,16
 100c018:	8809883a 	mov	r4,r17
 100c01c:	980b883a 	mov	r5,r19
 100c020:	1c21c83a 	sub	r16,r3,r16
 100c024:	1002f380 	call	1002f38 <__mulsi3>
 100c028:	8809883a 	mov	r4,r17
 100c02c:	b80b883a 	mov	r5,r23
 100c030:	1029883a 	mov	r20,r2
 100c034:	1002f380 	call	1002f38 <__mulsi3>
 100c038:	980b883a 	mov	r5,r19
 100c03c:	a809883a 	mov	r4,r21
 100c040:	1023883a 	mov	r17,r2
 100c044:	1002f380 	call	1002f38 <__mulsi3>
 100c048:	a809883a 	mov	r4,r21
 100c04c:	b80b883a 	mov	r5,r23
 100c050:	1027883a 	mov	r19,r2
 100c054:	1002f380 	call	1002f38 <__mulsi3>
 100c058:	1009883a 	mov	r4,r2
 100c05c:	a004d43a 	srli	r2,r20,16
 100c060:	8ce3883a 	add	r17,r17,r19
 100c064:	1447883a 	add	r3,r2,r17
 100c068:	1cc0022e 	bgeu	r3,r19,100c074 <__udivdi3+0x4a0>
 100c06c:	00800074 	movhi	r2,1
 100c070:	2089883a 	add	r4,r4,r2
 100c074:	1804d43a 	srli	r2,r3,16
 100c078:	2085883a 	add	r2,r4,r2
 100c07c:	80804436 	bltu	r16,r2,100c190 <__udivdi3+0x5bc>
 100c080:	80803e26 	beq	r16,r2,100c17c <__udivdi3+0x5a8>
 100c084:	9005883a 	mov	r2,r18
 100c088:	0009883a 	mov	r4,zero
 100c08c:	003f3a06 	br	100bd78 <__udivdi3+0x1a4>
 100c090:	9d26983a 	sll	r19,r19,r20
 100c094:	3505c83a 	sub	r2,r6,r20
 100c098:	a8a2d83a 	srl	r17,r21,r2
 100c09c:	982ed43a 	srli	r23,r19,16
 100c0a0:	e084d83a 	srl	r2,fp,r2
 100c0a4:	ad06983a 	sll	r3,r21,r20
 100c0a8:	8809883a 	mov	r4,r17
 100c0ac:	b80b883a 	mov	r5,r23
 100c0b0:	1886b03a 	or	r3,r3,r2
 100c0b4:	d8c00015 	stw	r3,0(sp)
 100c0b8:	9dbfffcc 	andi	r22,r19,65535
 100c0bc:	100db080 	call	100db08 <__udivsi3>
 100c0c0:	100b883a 	mov	r5,r2
 100c0c4:	b009883a 	mov	r4,r22
 100c0c8:	d8800215 	stw	r2,8(sp)
 100c0cc:	1002f380 	call	1002f38 <__mulsi3>
 100c0d0:	8809883a 	mov	r4,r17
 100c0d4:	b80b883a 	mov	r5,r23
 100c0d8:	102b883a 	mov	r21,r2
 100c0dc:	100db100 	call	100db10 <__umodsi3>
 100c0e0:	d9000017 	ldw	r4,0(sp)
 100c0e4:	1004943a 	slli	r2,r2,16
 100c0e8:	2006d43a 	srli	r3,r4,16
 100c0ec:	10c4b03a 	or	r2,r2,r3
 100c0f0:	1540052e 	bgeu	r2,r21,100c108 <__udivdi3+0x534>
 100c0f4:	d9400217 	ldw	r5,8(sp)
 100c0f8:	14c5883a 	add	r2,r2,r19
 100c0fc:	297fffc4 	addi	r5,r5,-1
 100c100:	d9400215 	stw	r5,8(sp)
 100c104:	14c0462e 	bgeu	r2,r19,100c220 <__udivdi3+0x64c>
 100c108:	1563c83a 	sub	r17,r2,r21
 100c10c:	8809883a 	mov	r4,r17
 100c110:	b80b883a 	mov	r5,r23
 100c114:	100db080 	call	100db08 <__udivsi3>
 100c118:	100b883a 	mov	r5,r2
 100c11c:	b009883a 	mov	r4,r22
 100c120:	1025883a 	mov	r18,r2
 100c124:	1002f380 	call	1002f38 <__mulsi3>
 100c128:	8809883a 	mov	r4,r17
 100c12c:	b80b883a 	mov	r5,r23
 100c130:	1021883a 	mov	r16,r2
 100c134:	100db100 	call	100db10 <__umodsi3>
 100c138:	da800017 	ldw	r10,0(sp)
 100c13c:	1004943a 	slli	r2,r2,16
 100c140:	50ffffcc 	andi	r3,r10,65535
 100c144:	10c6b03a 	or	r3,r2,r3
 100c148:	1c00062e 	bgeu	r3,r16,100c164 <__udivdi3+0x590>
 100c14c:	1cc7883a 	add	r3,r3,r19
 100c150:	94bfffc4 	addi	r18,r18,-1
 100c154:	1cc00336 	bltu	r3,r19,100c164 <__udivdi3+0x590>
 100c158:	1c00022e 	bgeu	r3,r16,100c164 <__udivdi3+0x590>
 100c15c:	94bfffc4 	addi	r18,r18,-1
 100c160:	1cc7883a 	add	r3,r3,r19
 100c164:	d9000217 	ldw	r4,8(sp)
 100c168:	e538983a 	sll	fp,fp,r20
 100c16c:	1c2bc83a 	sub	r21,r3,r16
 100c170:	2004943a 	slli	r2,r4,16
 100c174:	90a8b03a 	or	r20,r18,r2
 100c178:	003ebf06 	br	100bc78 <__udivdi3+0xa4>
 100c17c:	1804943a 	slli	r2,r3,16
 100c180:	e588983a 	sll	r4,fp,r22
 100c184:	a0ffffcc 	andi	r3,r20,65535
 100c188:	10c5883a 	add	r2,r2,r3
 100c18c:	20bfbd2e 	bgeu	r4,r2,100c084 <__udivdi3+0x4b0>
 100c190:	90bfffc4 	addi	r2,r18,-1
 100c194:	0009883a 	mov	r4,zero
 100c198:	003ef706 	br	100bd78 <__udivdi3+0x1a4>
 100c19c:	01400204 	movi	r5,8
 100c1a0:	2805883a 	mov	r2,r5
 100c1a4:	003ee706 	br	100bd44 <__udivdi3+0x170>
 100c1a8:	01400604 	movi	r5,24
 100c1ac:	2805883a 	mov	r2,r5
 100c1b0:	003ee406 	br	100bd44 <__udivdi3+0x170>
 100c1b4:	01400204 	movi	r5,8
 100c1b8:	2805883a 	mov	r2,r5
 100c1bc:	003ea106 	br	100bc44 <__udivdi3+0x70>
 100c1c0:	01400604 	movi	r5,24
 100c1c4:	2805883a 	mov	r2,r5
 100c1c8:	003e9e06 	br	100bc44 <__udivdi3+0x70>
 100c1cc:	01400204 	movi	r5,8
 100c1d0:	2805883a 	mov	r2,r5
 100c1d4:	003eff06 	br	100bdd4 <__udivdi3+0x200>
 100c1d8:	01400604 	movi	r5,24
 100c1dc:	2805883a 	mov	r2,r5
 100c1e0:	003efc06 	br	100bdd4 <__udivdi3+0x200>
 100c1e4:	1c3f862e 	bgeu	r3,r16,100c000 <__udivdi3+0x42c>
 100c1e8:	1dc7883a 	add	r3,r3,r23
 100c1ec:	ad7fffc4 	addi	r21,r21,-1
 100c1f0:	003f8306 	br	100c000 <__udivdi3+0x42c>
 100c1f4:	157f6e2e 	bgeu	r2,r21,100bfb0 <__udivdi3+0x3dc>
 100c1f8:	a53fffc4 	addi	r20,r20,-1
 100c1fc:	15c5883a 	add	r2,r2,r23
 100c200:	003f6b06 	br	100bfb0 <__udivdi3+0x3dc>
 100c204:	ad7fffc4 	addi	r21,r21,-1
 100c208:	003ec206 	br	100bd14 <__udivdi3+0x140>
 100c20c:	843fffc4 	addi	r16,r16,-1
 100c210:	14c5883a 	add	r2,r2,r19
 100c214:	003f1306 	br	100be64 <__udivdi3+0x290>
 100c218:	ad7fffc4 	addi	r21,r21,-1
 100c21c:	003f2506 	br	100beb4 <__udivdi3+0x2e0>
 100c220:	157fb92e 	bgeu	r2,r21,100c108 <__udivdi3+0x534>
 100c224:	297fffc4 	addi	r5,r5,-1
 100c228:	14c5883a 	add	r2,r2,r19
 100c22c:	d9400215 	stw	r5,8(sp)
 100c230:	003fb506 	br	100c108 <__udivdi3+0x534>
 100c234:	843fffc4 	addi	r16,r16,-1
 100c238:	14c5883a 	add	r2,r2,r19
 100c23c:	003ea106 	br	100bcc4 <__udivdi3+0xf0>

0100c240 <__umoddi3>:
 100c240:	defff004 	addi	sp,sp,-64
 100c244:	3011883a 	mov	r8,r6
 100c248:	000d883a 	mov	r6,zero
 100c24c:	dd400b15 	stw	r21,44(sp)
 100c250:	dcc00915 	stw	r19,36(sp)
 100c254:	dc000615 	stw	r16,24(sp)
 100c258:	dfc00f15 	stw	ra,60(sp)
 100c25c:	df000e15 	stw	fp,56(sp)
 100c260:	ddc00d15 	stw	r23,52(sp)
 100c264:	dd800c15 	stw	r22,48(sp)
 100c268:	dd000a15 	stw	r20,40(sp)
 100c26c:	dc800815 	stw	r18,32(sp)
 100c270:	dc400715 	stw	r17,28(sp)
 100c274:	2817883a 	mov	r11,r5
 100c278:	d9800415 	stw	r6,16(sp)
 100c27c:	4027883a 	mov	r19,r8
 100c280:	d9800515 	stw	r6,20(sp)
 100c284:	2021883a 	mov	r16,r4
 100c288:	282b883a 	mov	r21,r5
 100c28c:	38002c1e 	bne	r7,zero,100c340 <__umoddi3+0x100>
 100c290:	2a005636 	bltu	r5,r8,100c3ec <__umoddi3+0x1ac>
 100c294:	40009a26 	beq	r8,zero,100c500 <__umoddi3+0x2c0>
 100c298:	00bfffd4 	movui	r2,65535
 100c29c:	14c09236 	bltu	r2,r19,100c4e8 <__umoddi3+0x2a8>
 100c2a0:	00803fc4 	movi	r2,255
 100c2a4:	14c15c36 	bltu	r2,r19,100c818 <__umoddi3+0x5d8>
 100c2a8:	000b883a 	mov	r5,zero
 100c2ac:	0005883a 	mov	r2,zero
 100c2b0:	9884d83a 	srl	r2,r19,r2
 100c2b4:	01004074 	movhi	r4,257
 100c2b8:	21076a04 	addi	r4,r4,7592
 100c2bc:	01800804 	movi	r6,32
 100c2c0:	1105883a 	add	r2,r2,r4
 100c2c4:	10c00003 	ldbu	r3,0(r2)
 100c2c8:	28c7883a 	add	r3,r5,r3
 100c2cc:	30e5c83a 	sub	r18,r6,r3
 100c2d0:	9000a41e 	bne	r18,zero,100c564 <__umoddi3+0x324>
 100c2d4:	982ed43a 	srli	r23,r19,16
 100c2d8:	acebc83a 	sub	r21,r21,r19
 100c2dc:	9d3fffcc 	andi	r20,r19,65535
 100c2e0:	002d883a 	mov	r22,zero
 100c2e4:	a809883a 	mov	r4,r21
 100c2e8:	b80b883a 	mov	r5,r23
 100c2ec:	100db080 	call	100db08 <__udivsi3>
 100c2f0:	100b883a 	mov	r5,r2
 100c2f4:	a009883a 	mov	r4,r20
 100c2f8:	1002f380 	call	1002f38 <__mulsi3>
 100c2fc:	a809883a 	mov	r4,r21
 100c300:	b80b883a 	mov	r5,r23
 100c304:	1023883a 	mov	r17,r2
 100c308:	100db100 	call	100db10 <__umodsi3>
 100c30c:	1004943a 	slli	r2,r2,16
 100c310:	8006d43a 	srli	r3,r16,16
 100c314:	10c4b03a 	or	r2,r2,r3
 100c318:	1440032e 	bgeu	r2,r17,100c328 <__umoddi3+0xe8>
 100c31c:	14c5883a 	add	r2,r2,r19
 100c320:	14c00136 	bltu	r2,r19,100c328 <__umoddi3+0xe8>
 100c324:	14415836 	bltu	r2,r17,100c888 <__umoddi3+0x648>
 100c328:	1463c83a 	sub	r17,r2,r17
 100c32c:	8809883a 	mov	r4,r17
 100c330:	b80b883a 	mov	r5,r23
 100c334:	100db080 	call	100db08 <__udivsi3>
 100c338:	a009883a 	mov	r4,r20
 100c33c:	00005306 	br	100c48c <__umoddi3+0x24c>
 100c340:	380d883a 	mov	r6,r7
 100c344:	29c0132e 	bgeu	r5,r7,100c394 <__umoddi3+0x154>
 100c348:	d9000415 	stw	r4,16(sp)
 100c34c:	d9400515 	stw	r5,20(sp)
 100c350:	d9400417 	ldw	r5,16(sp)
 100c354:	5813883a 	mov	r9,r11
 100c358:	2811883a 	mov	r8,r5
 100c35c:	4005883a 	mov	r2,r8
 100c360:	4807883a 	mov	r3,r9
 100c364:	dfc00f17 	ldw	ra,60(sp)
 100c368:	df000e17 	ldw	fp,56(sp)
 100c36c:	ddc00d17 	ldw	r23,52(sp)
 100c370:	dd800c17 	ldw	r22,48(sp)
 100c374:	dd400b17 	ldw	r21,44(sp)
 100c378:	dd000a17 	ldw	r20,40(sp)
 100c37c:	dcc00917 	ldw	r19,36(sp)
 100c380:	dc800817 	ldw	r18,32(sp)
 100c384:	dc400717 	ldw	r17,28(sp)
 100c388:	dc000617 	ldw	r16,24(sp)
 100c38c:	dec01004 	addi	sp,sp,64
 100c390:	f800283a 	ret
 100c394:	00bfffd4 	movui	r2,65535
 100c398:	11c06636 	bltu	r2,r7,100c534 <__umoddi3+0x2f4>
 100c39c:	00803fc4 	movi	r2,255
 100c3a0:	11c12036 	bltu	r2,r7,100c824 <__umoddi3+0x5e4>
 100c3a4:	000b883a 	mov	r5,zero
 100c3a8:	0005883a 	mov	r2,zero
 100c3ac:	3084d83a 	srl	r2,r6,r2
 100c3b0:	01004074 	movhi	r4,257
 100c3b4:	21076a04 	addi	r4,r4,7592
 100c3b8:	01c00804 	movi	r7,32
 100c3bc:	1105883a 	add	r2,r2,r4
 100c3c0:	10c00003 	ldbu	r3,0(r2)
 100c3c4:	28c7883a 	add	r3,r5,r3
 100c3c8:	38e5c83a 	sub	r18,r7,r3
 100c3cc:	9000941e 	bne	r18,zero,100c620 <__umoddi3+0x3e0>
 100c3d0:	35405e36 	bltu	r6,r21,100c54c <__umoddi3+0x30c>
 100c3d4:	84c05d2e 	bgeu	r16,r19,100c54c <__umoddi3+0x30c>
 100c3d8:	8011883a 	mov	r8,r16
 100c3dc:	a813883a 	mov	r9,r21
 100c3e0:	dc000415 	stw	r16,16(sp)
 100c3e4:	dd400515 	stw	r21,20(sp)
 100c3e8:	003fdc06 	br	100c35c <__umoddi3+0x11c>
 100c3ec:	00bfffd4 	movui	r2,65535
 100c3f0:	12004a36 	bltu	r2,r8,100c51c <__umoddi3+0x2dc>
 100c3f4:	00803fc4 	movi	r2,255
 100c3f8:	12010d36 	bltu	r2,r8,100c830 <__umoddi3+0x5f0>
 100c3fc:	000b883a 	mov	r5,zero
 100c400:	0005883a 	mov	r2,zero
 100c404:	9884d83a 	srl	r2,r19,r2
 100c408:	01004074 	movhi	r4,257
 100c40c:	21076a04 	addi	r4,r4,7592
 100c410:	01800804 	movi	r6,32
 100c414:	1105883a 	add	r2,r2,r4
 100c418:	10c00003 	ldbu	r3,0(r2)
 100c41c:	28c7883a 	add	r3,r5,r3
 100c420:	30c7c83a 	sub	r3,r6,r3
 100c424:	1800dc1e 	bne	r3,zero,100c798 <__umoddi3+0x558>
 100c428:	002d883a 	mov	r22,zero
 100c42c:	982ed43a 	srli	r23,r19,16
 100c430:	a809883a 	mov	r4,r21
 100c434:	9cbfffcc 	andi	r18,r19,65535
 100c438:	b80b883a 	mov	r5,r23
 100c43c:	100db080 	call	100db08 <__udivsi3>
 100c440:	100b883a 	mov	r5,r2
 100c444:	9009883a 	mov	r4,r18
 100c448:	1002f380 	call	1002f38 <__mulsi3>
 100c44c:	a809883a 	mov	r4,r21
 100c450:	b80b883a 	mov	r5,r23
 100c454:	1023883a 	mov	r17,r2
 100c458:	100db100 	call	100db10 <__umodsi3>
 100c45c:	1004943a 	slli	r2,r2,16
 100c460:	8006d43a 	srli	r3,r16,16
 100c464:	10c4b03a 	or	r2,r2,r3
 100c468:	1440032e 	bgeu	r2,r17,100c478 <__umoddi3+0x238>
 100c46c:	14c5883a 	add	r2,r2,r19
 100c470:	14c00136 	bltu	r2,r19,100c478 <__umoddi3+0x238>
 100c474:	14410236 	bltu	r2,r17,100c880 <__umoddi3+0x640>
 100c478:	1463c83a 	sub	r17,r2,r17
 100c47c:	8809883a 	mov	r4,r17
 100c480:	b80b883a 	mov	r5,r23
 100c484:	100db080 	call	100db08 <__udivsi3>
 100c488:	9009883a 	mov	r4,r18
 100c48c:	100b883a 	mov	r5,r2
 100c490:	1002f380 	call	1002f38 <__mulsi3>
 100c494:	8809883a 	mov	r4,r17
 100c498:	b80b883a 	mov	r5,r23
 100c49c:	102b883a 	mov	r21,r2
 100c4a0:	100db100 	call	100db10 <__umodsi3>
 100c4a4:	1004943a 	slli	r2,r2,16
 100c4a8:	80ffffcc 	andi	r3,r16,65535
 100c4ac:	10c4b03a 	or	r2,r2,r3
 100c4b0:	1540042e 	bgeu	r2,r21,100c4c4 <__umoddi3+0x284>
 100c4b4:	14c5883a 	add	r2,r2,r19
 100c4b8:	14c00236 	bltu	r2,r19,100c4c4 <__umoddi3+0x284>
 100c4bc:	1540012e 	bgeu	r2,r21,100c4c4 <__umoddi3+0x284>
 100c4c0:	14c5883a 	add	r2,r2,r19
 100c4c4:	1545c83a 	sub	r2,r2,r21
 100c4c8:	1584d83a 	srl	r2,r2,r22
 100c4cc:	0013883a 	mov	r9,zero
 100c4d0:	d8800415 	stw	r2,16(sp)
 100c4d4:	d8c00417 	ldw	r3,16(sp)
 100c4d8:	0005883a 	mov	r2,zero
 100c4dc:	d8800515 	stw	r2,20(sp)
 100c4e0:	1811883a 	mov	r8,r3
 100c4e4:	003f9d06 	br	100c35c <__umoddi3+0x11c>
 100c4e8:	00804034 	movhi	r2,256
 100c4ec:	10bfffc4 	addi	r2,r2,-1
 100c4f0:	14c0c636 	bltu	r2,r19,100c80c <__umoddi3+0x5cc>
 100c4f4:	01400404 	movi	r5,16
 100c4f8:	2805883a 	mov	r2,r5
 100c4fc:	003f6c06 	br	100c2b0 <__umoddi3+0x70>
 100c500:	01000044 	movi	r4,1
 100c504:	000b883a 	mov	r5,zero
 100c508:	100db080 	call	100db08 <__udivsi3>
 100c50c:	1027883a 	mov	r19,r2
 100c510:	00bfffd4 	movui	r2,65535
 100c514:	14fff436 	bltu	r2,r19,100c4e8 <__umoddi3+0x2a8>
 100c518:	003f6106 	br	100c2a0 <__umoddi3+0x60>
 100c51c:	00804034 	movhi	r2,256
 100c520:	10bfffc4 	addi	r2,r2,-1
 100c524:	1200c536 	bltu	r2,r8,100c83c <__umoddi3+0x5fc>
 100c528:	01400404 	movi	r5,16
 100c52c:	2805883a 	mov	r2,r5
 100c530:	003fb406 	br	100c404 <__umoddi3+0x1c4>
 100c534:	00804034 	movhi	r2,256
 100c538:	10bfffc4 	addi	r2,r2,-1
 100c53c:	11c0c236 	bltu	r2,r7,100c848 <__umoddi3+0x608>
 100c540:	01400404 	movi	r5,16
 100c544:	2805883a 	mov	r2,r5
 100c548:	003f9806 	br	100c3ac <__umoddi3+0x16c>
 100c54c:	84c9c83a 	sub	r4,r16,r19
 100c550:	8105803a 	cmpltu	r2,r16,r4
 100c554:	a987c83a 	sub	r3,r21,r6
 100c558:	18abc83a 	sub	r21,r3,r2
 100c55c:	2021883a 	mov	r16,r4
 100c560:	003f9d06 	br	100c3d8 <__umoddi3+0x198>
 100c564:	9ca6983a 	sll	r19,r19,r18
 100c568:	3485c83a 	sub	r2,r6,r18
 100c56c:	a8a2d83a 	srl	r17,r21,r2
 100c570:	982ed43a 	srli	r23,r19,16
 100c574:	ac86983a 	sll	r3,r21,r18
 100c578:	8084d83a 	srl	r2,r16,r2
 100c57c:	8809883a 	mov	r4,r17
 100c580:	b80b883a 	mov	r5,r23
 100c584:	18b8b03a 	or	fp,r3,r2
 100c588:	9d3fffcc 	andi	r20,r19,65535
 100c58c:	100db080 	call	100db08 <__udivsi3>
 100c590:	100b883a 	mov	r5,r2
 100c594:	a009883a 	mov	r4,r20
 100c598:	1002f380 	call	1002f38 <__mulsi3>
 100c59c:	8809883a 	mov	r4,r17
 100c5a0:	b80b883a 	mov	r5,r23
 100c5a4:	102b883a 	mov	r21,r2
 100c5a8:	100db100 	call	100db10 <__umodsi3>
 100c5ac:	1004943a 	slli	r2,r2,16
 100c5b0:	e006d43a 	srli	r3,fp,16
 100c5b4:	902d883a 	mov	r22,r18
 100c5b8:	10c4b03a 	or	r2,r2,r3
 100c5bc:	1540022e 	bgeu	r2,r21,100c5c8 <__umoddi3+0x388>
 100c5c0:	14c5883a 	add	r2,r2,r19
 100c5c4:	14c0ab2e 	bgeu	r2,r19,100c874 <__umoddi3+0x634>
 100c5c8:	1563c83a 	sub	r17,r2,r21
 100c5cc:	8809883a 	mov	r4,r17
 100c5d0:	b80b883a 	mov	r5,r23
 100c5d4:	100db080 	call	100db08 <__udivsi3>
 100c5d8:	100b883a 	mov	r5,r2
 100c5dc:	a009883a 	mov	r4,r20
 100c5e0:	1002f380 	call	1002f38 <__mulsi3>
 100c5e4:	8809883a 	mov	r4,r17
 100c5e8:	b80b883a 	mov	r5,r23
 100c5ec:	102b883a 	mov	r21,r2
 100c5f0:	100db100 	call	100db10 <__umodsi3>
 100c5f4:	1004943a 	slli	r2,r2,16
 100c5f8:	e0ffffcc 	andi	r3,fp,65535
 100c5fc:	10c4b03a 	or	r2,r2,r3
 100c600:	1540042e 	bgeu	r2,r21,100c614 <__umoddi3+0x3d4>
 100c604:	14c5883a 	add	r2,r2,r19
 100c608:	14c00236 	bltu	r2,r19,100c614 <__umoddi3+0x3d4>
 100c60c:	1540012e 	bgeu	r2,r21,100c614 <__umoddi3+0x3d4>
 100c610:	14c5883a 	add	r2,r2,r19
 100c614:	84a0983a 	sll	r16,r16,r18
 100c618:	156bc83a 	sub	r21,r2,r21
 100c61c:	003f3106 	br	100c2e4 <__umoddi3+0xa4>
 100c620:	3c8fc83a 	sub	r7,r7,r18
 100c624:	3486983a 	sll	r3,r6,r18
 100c628:	99c4d83a 	srl	r2,r19,r7
 100c62c:	a9e2d83a 	srl	r17,r21,r7
 100c630:	ac8c983a 	sll	r6,r21,r18
 100c634:	18acb03a 	or	r22,r3,r2
 100c638:	b02ed43a 	srli	r23,r22,16
 100c63c:	81c4d83a 	srl	r2,r16,r7
 100c640:	8809883a 	mov	r4,r17
 100c644:	b80b883a 	mov	r5,r23
 100c648:	308cb03a 	or	r6,r6,r2
 100c64c:	d9c00315 	stw	r7,12(sp)
 100c650:	d9800215 	stw	r6,8(sp)
 100c654:	b53fffcc 	andi	r20,r22,65535
 100c658:	100db080 	call	100db08 <__udivsi3>
 100c65c:	100b883a 	mov	r5,r2
 100c660:	a009883a 	mov	r4,r20
 100c664:	1039883a 	mov	fp,r2
 100c668:	1002f380 	call	1002f38 <__mulsi3>
 100c66c:	8809883a 	mov	r4,r17
 100c670:	b80b883a 	mov	r5,r23
 100c674:	102b883a 	mov	r21,r2
 100c678:	100db100 	call	100db10 <__umodsi3>
 100c67c:	d9000217 	ldw	r4,8(sp)
 100c680:	1004943a 	slli	r2,r2,16
 100c684:	9ca6983a 	sll	r19,r19,r18
 100c688:	2006d43a 	srli	r3,r4,16
 100c68c:	84a0983a 	sll	r16,r16,r18
 100c690:	dcc00015 	stw	r19,0(sp)
 100c694:	10c4b03a 	or	r2,r2,r3
 100c698:	dc000115 	stw	r16,4(sp)
 100c69c:	1540032e 	bgeu	r2,r21,100c6ac <__umoddi3+0x46c>
 100c6a0:	1585883a 	add	r2,r2,r22
 100c6a4:	e73fffc4 	addi	fp,fp,-1
 100c6a8:	15806e2e 	bgeu	r2,r22,100c864 <__umoddi3+0x624>
 100c6ac:	1563c83a 	sub	r17,r2,r21
 100c6b0:	8809883a 	mov	r4,r17
 100c6b4:	b80b883a 	mov	r5,r23
 100c6b8:	100db080 	call	100db08 <__udivsi3>
 100c6bc:	100b883a 	mov	r5,r2
 100c6c0:	a009883a 	mov	r4,r20
 100c6c4:	1021883a 	mov	r16,r2
 100c6c8:	1002f380 	call	1002f38 <__mulsi3>
 100c6cc:	b80b883a 	mov	r5,r23
 100c6d0:	8809883a 	mov	r4,r17
 100c6d4:	1029883a 	mov	r20,r2
 100c6d8:	100db100 	call	100db10 <__umodsi3>
 100c6dc:	d9400217 	ldw	r5,8(sp)
 100c6e0:	1004943a 	slli	r2,r2,16
 100c6e4:	28ffffcc 	andi	r3,r5,65535
 100c6e8:	10c4b03a 	or	r2,r2,r3
 100c6ec:	1500032e 	bgeu	r2,r20,100c6fc <__umoddi3+0x4bc>
 100c6f0:	1585883a 	add	r2,r2,r22
 100c6f4:	843fffc4 	addi	r16,r16,-1
 100c6f8:	1580562e 	bgeu	r2,r22,100c854 <__umoddi3+0x614>
 100c6fc:	d9800017 	ldw	r6,0(sp)
 100c700:	e022943a 	slli	r17,fp,16
 100c704:	302ed43a 	srli	r23,r6,16
 100c708:	8462b03a 	or	r17,r16,r17
 100c70c:	34ffffcc 	andi	r19,r6,65535
 100c710:	882ad43a 	srli	r21,r17,16
 100c714:	8c7fffcc 	andi	r17,r17,65535
 100c718:	8809883a 	mov	r4,r17
 100c71c:	980b883a 	mov	r5,r19
 100c720:	1521c83a 	sub	r16,r2,r20
 100c724:	1002f380 	call	1002f38 <__mulsi3>
 100c728:	8809883a 	mov	r4,r17
 100c72c:	b80b883a 	mov	r5,r23
 100c730:	1029883a 	mov	r20,r2
 100c734:	1002f380 	call	1002f38 <__mulsi3>
 100c738:	980b883a 	mov	r5,r19
 100c73c:	a809883a 	mov	r4,r21
 100c740:	1023883a 	mov	r17,r2
 100c744:	1002f380 	call	1002f38 <__mulsi3>
 100c748:	a809883a 	mov	r4,r21
 100c74c:	b80b883a 	mov	r5,r23
 100c750:	1027883a 	mov	r19,r2
 100c754:	1002f380 	call	1002f38 <__mulsi3>
 100c758:	100b883a 	mov	r5,r2
 100c75c:	a004d43a 	srli	r2,r20,16
 100c760:	8ce3883a 	add	r17,r17,r19
 100c764:	1449883a 	add	r4,r2,r17
 100c768:	24c0022e 	bgeu	r4,r19,100c774 <__umoddi3+0x534>
 100c76c:	00800074 	movhi	r2,1
 100c770:	288b883a 	add	r5,r5,r2
 100c774:	2004d43a 	srli	r2,r4,16
 100c778:	2008943a 	slli	r4,r4,16
 100c77c:	a0ffffcc 	andi	r3,r20,65535
 100c780:	288d883a 	add	r6,r5,r2
 100c784:	20c9883a 	add	r4,r4,r3
 100c788:	81800b36 	bltu	r16,r6,100c7b8 <__umoddi3+0x578>
 100c78c:	81804026 	beq	r16,r6,100c890 <__umoddi3+0x650>
 100c790:	818dc83a 	sub	r6,r16,r6
 100c794:	00000f06 	br	100c7d4 <__umoddi3+0x594>
 100c798:	30c5c83a 	sub	r2,r6,r3
 100c79c:	182d883a 	mov	r22,r3
 100c7a0:	8084d83a 	srl	r2,r16,r2
 100c7a4:	a8c6983a 	sll	r3,r21,r3
 100c7a8:	9da6983a 	sll	r19,r19,r22
 100c7ac:	85a0983a 	sll	r16,r16,r22
 100c7b0:	18aab03a 	or	r21,r3,r2
 100c7b4:	003f1d06 	br	100c42c <__umoddi3+0x1ec>
 100c7b8:	d8c00017 	ldw	r3,0(sp)
 100c7bc:	20c5c83a 	sub	r2,r4,r3
 100c7c0:	2089803a 	cmpltu	r4,r4,r2
 100c7c4:	3587c83a 	sub	r3,r6,r22
 100c7c8:	1907c83a 	sub	r3,r3,r4
 100c7cc:	80cdc83a 	sub	r6,r16,r3
 100c7d0:	1009883a 	mov	r4,r2
 100c7d4:	d9400117 	ldw	r5,4(sp)
 100c7d8:	2905c83a 	sub	r2,r5,r4
 100c7dc:	2887803a 	cmpltu	r3,r5,r2
 100c7e0:	30c7c83a 	sub	r3,r6,r3
 100c7e4:	d9800317 	ldw	r6,12(sp)
 100c7e8:	1484d83a 	srl	r2,r2,r18
 100c7ec:	1988983a 	sll	r4,r3,r6
 100c7f0:	1c86d83a 	srl	r3,r3,r18
 100c7f4:	2088b03a 	or	r4,r4,r2
 100c7f8:	2011883a 	mov	r8,r4
 100c7fc:	1813883a 	mov	r9,r3
 100c800:	d9000415 	stw	r4,16(sp)
 100c804:	d8c00515 	stw	r3,20(sp)
 100c808:	003ed406 	br	100c35c <__umoddi3+0x11c>
 100c80c:	01400604 	movi	r5,24
 100c810:	2805883a 	mov	r2,r5
 100c814:	003ea606 	br	100c2b0 <__umoddi3+0x70>
 100c818:	01400204 	movi	r5,8
 100c81c:	2805883a 	mov	r2,r5
 100c820:	003ea306 	br	100c2b0 <__umoddi3+0x70>
 100c824:	01400204 	movi	r5,8
 100c828:	2805883a 	mov	r2,r5
 100c82c:	003edf06 	br	100c3ac <__umoddi3+0x16c>
 100c830:	01400204 	movi	r5,8
 100c834:	2805883a 	mov	r2,r5
 100c838:	003ef206 	br	100c404 <__umoddi3+0x1c4>
 100c83c:	01400604 	movi	r5,24
 100c840:	2805883a 	mov	r2,r5
 100c844:	003eef06 	br	100c404 <__umoddi3+0x1c4>
 100c848:	01400604 	movi	r5,24
 100c84c:	2805883a 	mov	r2,r5
 100c850:	003ed606 	br	100c3ac <__umoddi3+0x16c>
 100c854:	153fa92e 	bgeu	r2,r20,100c6fc <__umoddi3+0x4bc>
 100c858:	843fffc4 	addi	r16,r16,-1
 100c85c:	1585883a 	add	r2,r2,r22
 100c860:	003fa606 	br	100c6fc <__umoddi3+0x4bc>
 100c864:	157f912e 	bgeu	r2,r21,100c6ac <__umoddi3+0x46c>
 100c868:	e73fffc4 	addi	fp,fp,-1
 100c86c:	1585883a 	add	r2,r2,r22
 100c870:	003f8e06 	br	100c6ac <__umoddi3+0x46c>
 100c874:	157f542e 	bgeu	r2,r21,100c5c8 <__umoddi3+0x388>
 100c878:	14c5883a 	add	r2,r2,r19
 100c87c:	003f5206 	br	100c5c8 <__umoddi3+0x388>
 100c880:	14c5883a 	add	r2,r2,r19
 100c884:	003efc06 	br	100c478 <__umoddi3+0x238>
 100c888:	14c5883a 	add	r2,r2,r19
 100c88c:	003ea606 	br	100c328 <__umoddi3+0xe8>
 100c890:	d8800117 	ldw	r2,4(sp)
 100c894:	113fc836 	bltu	r2,r4,100c7b8 <__umoddi3+0x578>
 100c898:	000d883a 	mov	r6,zero
 100c89c:	003fcd06 	br	100c7d4 <__umoddi3+0x594>

0100c8a0 <_fpadd_parts>:
 100c8a0:	defff804 	addi	sp,sp,-32
 100c8a4:	dcc00315 	stw	r19,12(sp)
 100c8a8:	2027883a 	mov	r19,r4
 100c8ac:	21000017 	ldw	r4,0(r4)
 100c8b0:	00c00044 	movi	r3,1
 100c8b4:	dd400515 	stw	r21,20(sp)
 100c8b8:	dd000415 	stw	r20,16(sp)
 100c8bc:	ddc00715 	stw	r23,28(sp)
 100c8c0:	dd800615 	stw	r22,24(sp)
 100c8c4:	dc800215 	stw	r18,8(sp)
 100c8c8:	dc400115 	stw	r17,4(sp)
 100c8cc:	dc000015 	stw	r16,0(sp)
 100c8d0:	282b883a 	mov	r21,r5
 100c8d4:	3029883a 	mov	r20,r6
 100c8d8:	1900632e 	bgeu	r3,r4,100ca68 <_fpadd_parts+0x1c8>
 100c8dc:	28800017 	ldw	r2,0(r5)
 100c8e0:	1880812e 	bgeu	r3,r2,100cae8 <_fpadd_parts+0x248>
 100c8e4:	00c00104 	movi	r3,4
 100c8e8:	20c0dc26 	beq	r4,r3,100cc5c <_fpadd_parts+0x3bc>
 100c8ec:	10c07e26 	beq	r2,r3,100cae8 <_fpadd_parts+0x248>
 100c8f0:	00c00084 	movi	r3,2
 100c8f4:	10c06726 	beq	r2,r3,100ca94 <_fpadd_parts+0x1f4>
 100c8f8:	20c07b26 	beq	r4,r3,100cae8 <_fpadd_parts+0x248>
 100c8fc:	9dc00217 	ldw	r23,8(r19)
 100c900:	28c00217 	ldw	r3,8(r5)
 100c904:	9c400317 	ldw	r17,12(r19)
 100c908:	2bc00317 	ldw	r15,12(r5)
 100c90c:	b8cdc83a 	sub	r6,r23,r3
 100c910:	9c800417 	ldw	r18,16(r19)
 100c914:	2c000417 	ldw	r16,16(r5)
 100c918:	3009883a 	mov	r4,r6
 100c91c:	30009716 	blt	r6,zero,100cb7c <_fpadd_parts+0x2dc>
 100c920:	00800fc4 	movi	r2,63
 100c924:	11806b16 	blt	r2,r6,100cad4 <_fpadd_parts+0x234>
 100c928:	0100a40e 	bge	zero,r4,100cbbc <_fpadd_parts+0x31c>
 100c92c:	35bff804 	addi	r22,r6,-32
 100c930:	b000bc16 	blt	r22,zero,100cc24 <_fpadd_parts+0x384>
 100c934:	8596d83a 	srl	r11,r16,r22
 100c938:	0019883a 	mov	r12,zero
 100c93c:	0013883a 	mov	r9,zero
 100c940:	01000044 	movi	r4,1
 100c944:	0015883a 	mov	r10,zero
 100c948:	b000be16 	blt	r22,zero,100cc44 <_fpadd_parts+0x3a4>
 100c94c:	2590983a 	sll	r8,r4,r22
 100c950:	000f883a 	mov	r7,zero
 100c954:	00bfffc4 	movi	r2,-1
 100c958:	3889883a 	add	r4,r7,r2
 100c95c:	408b883a 	add	r5,r8,r2
 100c960:	21cd803a 	cmpltu	r6,r4,r7
 100c964:	314b883a 	add	r5,r6,r5
 100c968:	7904703a 	and	r2,r15,r4
 100c96c:	8146703a 	and	r3,r16,r5
 100c970:	10c4b03a 	or	r2,r2,r3
 100c974:	10000226 	beq	r2,zero,100c980 <_fpadd_parts+0xe0>
 100c978:	02400044 	movi	r9,1
 100c97c:	0015883a 	mov	r10,zero
 100c980:	5a5eb03a 	or	r15,r11,r9
 100c984:	62a0b03a 	or	r16,r12,r10
 100c988:	99400117 	ldw	r5,4(r19)
 100c98c:	a8800117 	ldw	r2,4(r21)
 100c990:	28806e26 	beq	r5,r2,100cb4c <_fpadd_parts+0x2ac>
 100c994:	28006626 	beq	r5,zero,100cb30 <_fpadd_parts+0x290>
 100c998:	7c45c83a 	sub	r2,r15,r17
 100c99c:	7889803a 	cmpltu	r4,r15,r2
 100c9a0:	8487c83a 	sub	r3,r16,r18
 100c9a4:	1909c83a 	sub	r4,r3,r4
 100c9a8:	100d883a 	mov	r6,r2
 100c9ac:	200f883a 	mov	r7,r4
 100c9b0:	38007716 	blt	r7,zero,100cb90 <_fpadd_parts+0x2f0>
 100c9b4:	a5c00215 	stw	r23,8(r20)
 100c9b8:	a1c00415 	stw	r7,16(r20)
 100c9bc:	a0000115 	stw	zero,4(r20)
 100c9c0:	a1800315 	stw	r6,12(r20)
 100c9c4:	a2000317 	ldw	r8,12(r20)
 100c9c8:	a2400417 	ldw	r9,16(r20)
 100c9cc:	00bfffc4 	movi	r2,-1
 100c9d0:	408b883a 	add	r5,r8,r2
 100c9d4:	2a09803a 	cmpltu	r4,r5,r8
 100c9d8:	488d883a 	add	r6,r9,r2
 100c9dc:	01c40034 	movhi	r7,4096
 100c9e0:	39ffffc4 	addi	r7,r7,-1
 100c9e4:	218d883a 	add	r6,r4,r6
 100c9e8:	39801736 	bltu	r7,r6,100ca48 <_fpadd_parts+0x1a8>
 100c9ec:	31c06526 	beq	r6,r7,100cb84 <_fpadd_parts+0x2e4>
 100c9f0:	a3000217 	ldw	r12,8(r20)
 100c9f4:	4209883a 	add	r4,r8,r8
 100c9f8:	00bfffc4 	movi	r2,-1
 100c9fc:	220f803a 	cmpltu	r7,r4,r8
 100ca00:	4a4b883a 	add	r5,r9,r9
 100ca04:	394f883a 	add	r7,r7,r5
 100ca08:	2095883a 	add	r10,r4,r2
 100ca0c:	3897883a 	add	r11,r7,r2
 100ca10:	510d803a 	cmpltu	r6,r10,r4
 100ca14:	6099883a 	add	r12,r12,r2
 100ca18:	32d7883a 	add	r11,r6,r11
 100ca1c:	00840034 	movhi	r2,4096
 100ca20:	10bfffc4 	addi	r2,r2,-1
 100ca24:	2011883a 	mov	r8,r4
 100ca28:	3813883a 	mov	r9,r7
 100ca2c:	a1000315 	stw	r4,12(r20)
 100ca30:	a1c00415 	stw	r7,16(r20)
 100ca34:	a3000215 	stw	r12,8(r20)
 100ca38:	12c00336 	bltu	r2,r11,100ca48 <_fpadd_parts+0x1a8>
 100ca3c:	58bfed1e 	bne	r11,r2,100c9f4 <_fpadd_parts+0x154>
 100ca40:	00bfff84 	movi	r2,-2
 100ca44:	12bfeb2e 	bgeu	r2,r10,100c9f4 <_fpadd_parts+0x154>
 100ca48:	a2800417 	ldw	r10,16(r20)
 100ca4c:	008000c4 	movi	r2,3
 100ca50:	00c80034 	movhi	r3,8192
 100ca54:	18ffffc4 	addi	r3,r3,-1
 100ca58:	a2400317 	ldw	r9,12(r20)
 100ca5c:	a0800015 	stw	r2,0(r20)
 100ca60:	1a802336 	bltu	r3,r10,100caf0 <_fpadd_parts+0x250>
 100ca64:	a027883a 	mov	r19,r20
 100ca68:	9805883a 	mov	r2,r19
 100ca6c:	ddc00717 	ldw	r23,28(sp)
 100ca70:	dd800617 	ldw	r22,24(sp)
 100ca74:	dd400517 	ldw	r21,20(sp)
 100ca78:	dd000417 	ldw	r20,16(sp)
 100ca7c:	dcc00317 	ldw	r19,12(sp)
 100ca80:	dc800217 	ldw	r18,8(sp)
 100ca84:	dc400117 	ldw	r17,4(sp)
 100ca88:	dc000017 	ldw	r16,0(sp)
 100ca8c:	dec00804 	addi	sp,sp,32
 100ca90:	f800283a 	ret
 100ca94:	20fff41e 	bne	r4,r3,100ca68 <_fpadd_parts+0x1c8>
 100ca98:	31000015 	stw	r4,0(r6)
 100ca9c:	98800117 	ldw	r2,4(r19)
 100caa0:	30800115 	stw	r2,4(r6)
 100caa4:	98c00217 	ldw	r3,8(r19)
 100caa8:	30c00215 	stw	r3,8(r6)
 100caac:	98800317 	ldw	r2,12(r19)
 100cab0:	30800315 	stw	r2,12(r6)
 100cab4:	98c00417 	ldw	r3,16(r19)
 100cab8:	30c00415 	stw	r3,16(r6)
 100cabc:	98800117 	ldw	r2,4(r19)
 100cac0:	28c00117 	ldw	r3,4(r5)
 100cac4:	3027883a 	mov	r19,r6
 100cac8:	10c4703a 	and	r2,r2,r3
 100cacc:	30800115 	stw	r2,4(r6)
 100cad0:	003fe506 	br	100ca68 <_fpadd_parts+0x1c8>
 100cad4:	1dc02616 	blt	r3,r23,100cb70 <_fpadd_parts+0x2d0>
 100cad8:	0023883a 	mov	r17,zero
 100cadc:	182f883a 	mov	r23,r3
 100cae0:	0025883a 	mov	r18,zero
 100cae4:	003fa806 	br	100c988 <_fpadd_parts+0xe8>
 100cae8:	a827883a 	mov	r19,r21
 100caec:	003fde06 	br	100ca68 <_fpadd_parts+0x1c8>
 100caf0:	01800044 	movi	r6,1
 100caf4:	500497fa 	slli	r2,r10,31
 100caf8:	4808d07a 	srli	r4,r9,1
 100cafc:	518ad83a 	srl	r5,r10,r6
 100cb00:	a2000217 	ldw	r8,8(r20)
 100cb04:	1108b03a 	or	r4,r2,r4
 100cb08:	0007883a 	mov	r3,zero
 100cb0c:	4984703a 	and	r2,r9,r6
 100cb10:	208cb03a 	or	r6,r4,r2
 100cb14:	28ceb03a 	or	r7,r5,r3
 100cb18:	42000044 	addi	r8,r8,1
 100cb1c:	a027883a 	mov	r19,r20
 100cb20:	a1c00415 	stw	r7,16(r20)
 100cb24:	a2000215 	stw	r8,8(r20)
 100cb28:	a1800315 	stw	r6,12(r20)
 100cb2c:	003fce06 	br	100ca68 <_fpadd_parts+0x1c8>
 100cb30:	8bc5c83a 	sub	r2,r17,r15
 100cb34:	8889803a 	cmpltu	r4,r17,r2
 100cb38:	9407c83a 	sub	r3,r18,r16
 100cb3c:	1909c83a 	sub	r4,r3,r4
 100cb40:	100d883a 	mov	r6,r2
 100cb44:	200f883a 	mov	r7,r4
 100cb48:	003f9906 	br	100c9b0 <_fpadd_parts+0x110>
 100cb4c:	7c45883a 	add	r2,r15,r17
 100cb50:	13c9803a 	cmpltu	r4,r2,r15
 100cb54:	8487883a 	add	r3,r16,r18
 100cb58:	20c9883a 	add	r4,r4,r3
 100cb5c:	a1400115 	stw	r5,4(r20)
 100cb60:	a5c00215 	stw	r23,8(r20)
 100cb64:	a0800315 	stw	r2,12(r20)
 100cb68:	a1000415 	stw	r4,16(r20)
 100cb6c:	003fb606 	br	100ca48 <_fpadd_parts+0x1a8>
 100cb70:	001f883a 	mov	r15,zero
 100cb74:	0021883a 	mov	r16,zero
 100cb78:	003f8306 	br	100c988 <_fpadd_parts+0xe8>
 100cb7c:	018dc83a 	sub	r6,zero,r6
 100cb80:	003f6706 	br	100c920 <_fpadd_parts+0x80>
 100cb84:	00bfff84 	movi	r2,-2
 100cb88:	117faf36 	bltu	r2,r5,100ca48 <_fpadd_parts+0x1a8>
 100cb8c:	003f9806 	br	100c9f0 <_fpadd_parts+0x150>
 100cb90:	0005883a 	mov	r2,zero
 100cb94:	1189c83a 	sub	r4,r2,r6
 100cb98:	1105803a 	cmpltu	r2,r2,r4
 100cb9c:	01cbc83a 	sub	r5,zero,r7
 100cba0:	2885c83a 	sub	r2,r5,r2
 100cba4:	01800044 	movi	r6,1
 100cba8:	a1800115 	stw	r6,4(r20)
 100cbac:	a5c00215 	stw	r23,8(r20)
 100cbb0:	a1000315 	stw	r4,12(r20)
 100cbb4:	a0800415 	stw	r2,16(r20)
 100cbb8:	003f8206 	br	100c9c4 <_fpadd_parts+0x124>
 100cbbc:	203f7226 	beq	r4,zero,100c988 <_fpadd_parts+0xe8>
 100cbc0:	35bff804 	addi	r22,r6,-32
 100cbc4:	b9af883a 	add	r23,r23,r6
 100cbc8:	b0003116 	blt	r22,zero,100cc90 <_fpadd_parts+0x3f0>
 100cbcc:	959ad83a 	srl	r13,r18,r22
 100cbd0:	001d883a 	mov	r14,zero
 100cbd4:	000f883a 	mov	r7,zero
 100cbd8:	01000044 	movi	r4,1
 100cbdc:	0011883a 	mov	r8,zero
 100cbe0:	b0002516 	blt	r22,zero,100cc78 <_fpadd_parts+0x3d8>
 100cbe4:	2594983a 	sll	r10,r4,r22
 100cbe8:	0013883a 	mov	r9,zero
 100cbec:	00bfffc4 	movi	r2,-1
 100cbf0:	4889883a 	add	r4,r9,r2
 100cbf4:	508b883a 	add	r5,r10,r2
 100cbf8:	224d803a 	cmpltu	r6,r4,r9
 100cbfc:	314b883a 	add	r5,r6,r5
 100cc00:	8904703a 	and	r2,r17,r4
 100cc04:	9146703a 	and	r3,r18,r5
 100cc08:	10c4b03a 	or	r2,r2,r3
 100cc0c:	10000226 	beq	r2,zero,100cc18 <_fpadd_parts+0x378>
 100cc10:	01c00044 	movi	r7,1
 100cc14:	0011883a 	mov	r8,zero
 100cc18:	69e2b03a 	or	r17,r13,r7
 100cc1c:	7224b03a 	or	r18,r14,r8
 100cc20:	003f5906 	br	100c988 <_fpadd_parts+0xe8>
 100cc24:	8407883a 	add	r3,r16,r16
 100cc28:	008007c4 	movi	r2,31
 100cc2c:	1185c83a 	sub	r2,r2,r6
 100cc30:	1886983a 	sll	r3,r3,r2
 100cc34:	7996d83a 	srl	r11,r15,r6
 100cc38:	8198d83a 	srl	r12,r16,r6
 100cc3c:	1ad6b03a 	or	r11,r3,r11
 100cc40:	003f3e06 	br	100c93c <_fpadd_parts+0x9c>
 100cc44:	2006d07a 	srli	r3,r4,1
 100cc48:	008007c4 	movi	r2,31
 100cc4c:	1185c83a 	sub	r2,r2,r6
 100cc50:	1890d83a 	srl	r8,r3,r2
 100cc54:	218e983a 	sll	r7,r4,r6
 100cc58:	003f3e06 	br	100c954 <_fpadd_parts+0xb4>
 100cc5c:	113f821e 	bne	r2,r4,100ca68 <_fpadd_parts+0x1c8>
 100cc60:	28c00117 	ldw	r3,4(r5)
 100cc64:	98800117 	ldw	r2,4(r19)
 100cc68:	10ff7f26 	beq	r2,r3,100ca68 <_fpadd_parts+0x1c8>
 100cc6c:	04c04074 	movhi	r19,257
 100cc70:	9cc76504 	addi	r19,r19,7572
 100cc74:	003f7c06 	br	100ca68 <_fpadd_parts+0x1c8>
 100cc78:	2006d07a 	srli	r3,r4,1
 100cc7c:	008007c4 	movi	r2,31
 100cc80:	1185c83a 	sub	r2,r2,r6
 100cc84:	1894d83a 	srl	r10,r3,r2
 100cc88:	2192983a 	sll	r9,r4,r6
 100cc8c:	003fd706 	br	100cbec <_fpadd_parts+0x34c>
 100cc90:	9487883a 	add	r3,r18,r18
 100cc94:	008007c4 	movi	r2,31
 100cc98:	1185c83a 	sub	r2,r2,r6
 100cc9c:	1886983a 	sll	r3,r3,r2
 100cca0:	899ad83a 	srl	r13,r17,r6
 100cca4:	919cd83a 	srl	r14,r18,r6
 100cca8:	1b5ab03a 	or	r13,r3,r13
 100ccac:	003fc906 	br	100cbd4 <_fpadd_parts+0x334>

0100ccb0 <__subdf3>:
 100ccb0:	deffea04 	addi	sp,sp,-88
 100ccb4:	dcc01415 	stw	r19,80(sp)
 100ccb8:	dcc00404 	addi	r19,sp,16
 100ccbc:	2011883a 	mov	r8,r4
 100ccc0:	2813883a 	mov	r9,r5
 100ccc4:	dc401315 	stw	r17,76(sp)
 100ccc8:	d809883a 	mov	r4,sp
 100cccc:	980b883a 	mov	r5,r19
 100ccd0:	dc400904 	addi	r17,sp,36
 100ccd4:	dfc01515 	stw	ra,84(sp)
 100ccd8:	da400115 	stw	r9,4(sp)
 100ccdc:	d9c00315 	stw	r7,12(sp)
 100cce0:	da000015 	stw	r8,0(sp)
 100cce4:	d9800215 	stw	r6,8(sp)
 100cce8:	100dfd00 	call	100dfd0 <__unpack_d>
 100ccec:	d9000204 	addi	r4,sp,8
 100ccf0:	880b883a 	mov	r5,r17
 100ccf4:	100dfd00 	call	100dfd0 <__unpack_d>
 100ccf8:	d8800a17 	ldw	r2,40(sp)
 100ccfc:	880b883a 	mov	r5,r17
 100cd00:	9809883a 	mov	r4,r19
 100cd04:	d9800e04 	addi	r6,sp,56
 100cd08:	1080005c 	xori	r2,r2,1
 100cd0c:	d8800a15 	stw	r2,40(sp)
 100cd10:	100c8a00 	call	100c8a0 <_fpadd_parts>
 100cd14:	1009883a 	mov	r4,r2
 100cd18:	100dcbc0 	call	100dcbc <__pack_d>
 100cd1c:	dfc01517 	ldw	ra,84(sp)
 100cd20:	dcc01417 	ldw	r19,80(sp)
 100cd24:	dc401317 	ldw	r17,76(sp)
 100cd28:	dec01604 	addi	sp,sp,88
 100cd2c:	f800283a 	ret

0100cd30 <__adddf3>:
 100cd30:	deffea04 	addi	sp,sp,-88
 100cd34:	dcc01415 	stw	r19,80(sp)
 100cd38:	dcc00404 	addi	r19,sp,16
 100cd3c:	2011883a 	mov	r8,r4
 100cd40:	2813883a 	mov	r9,r5
 100cd44:	dc401315 	stw	r17,76(sp)
 100cd48:	d809883a 	mov	r4,sp
 100cd4c:	980b883a 	mov	r5,r19
 100cd50:	dc400904 	addi	r17,sp,36
 100cd54:	dfc01515 	stw	ra,84(sp)
 100cd58:	da400115 	stw	r9,4(sp)
 100cd5c:	d9c00315 	stw	r7,12(sp)
 100cd60:	da000015 	stw	r8,0(sp)
 100cd64:	d9800215 	stw	r6,8(sp)
 100cd68:	100dfd00 	call	100dfd0 <__unpack_d>
 100cd6c:	d9000204 	addi	r4,sp,8
 100cd70:	880b883a 	mov	r5,r17
 100cd74:	100dfd00 	call	100dfd0 <__unpack_d>
 100cd78:	d9800e04 	addi	r6,sp,56
 100cd7c:	9809883a 	mov	r4,r19
 100cd80:	880b883a 	mov	r5,r17
 100cd84:	100c8a00 	call	100c8a0 <_fpadd_parts>
 100cd88:	1009883a 	mov	r4,r2
 100cd8c:	100dcbc0 	call	100dcbc <__pack_d>
 100cd90:	dfc01517 	ldw	ra,84(sp)
 100cd94:	dcc01417 	ldw	r19,80(sp)
 100cd98:	dc401317 	ldw	r17,76(sp)
 100cd9c:	dec01604 	addi	sp,sp,88
 100cda0:	f800283a 	ret

0100cda4 <__muldf3>:
 100cda4:	deffe004 	addi	sp,sp,-128
 100cda8:	dc401815 	stw	r17,96(sp)
 100cdac:	dc400404 	addi	r17,sp,16
 100cdb0:	2011883a 	mov	r8,r4
 100cdb4:	2813883a 	mov	r9,r5
 100cdb8:	dc001715 	stw	r16,92(sp)
 100cdbc:	d809883a 	mov	r4,sp
 100cdc0:	880b883a 	mov	r5,r17
 100cdc4:	dc000904 	addi	r16,sp,36
 100cdc8:	dfc01f15 	stw	ra,124(sp)
 100cdcc:	da400115 	stw	r9,4(sp)
 100cdd0:	d9c00315 	stw	r7,12(sp)
 100cdd4:	da000015 	stw	r8,0(sp)
 100cdd8:	d9800215 	stw	r6,8(sp)
 100cddc:	ddc01e15 	stw	r23,120(sp)
 100cde0:	dd801d15 	stw	r22,116(sp)
 100cde4:	dd401c15 	stw	r21,112(sp)
 100cde8:	dd001b15 	stw	r20,108(sp)
 100cdec:	dcc01a15 	stw	r19,104(sp)
 100cdf0:	dc801915 	stw	r18,100(sp)
 100cdf4:	100dfd00 	call	100dfd0 <__unpack_d>
 100cdf8:	d9000204 	addi	r4,sp,8
 100cdfc:	800b883a 	mov	r5,r16
 100ce00:	100dfd00 	call	100dfd0 <__unpack_d>
 100ce04:	d9000417 	ldw	r4,16(sp)
 100ce08:	00800044 	movi	r2,1
 100ce0c:	1100102e 	bgeu	r2,r4,100ce50 <__muldf3+0xac>
 100ce10:	d8c00917 	ldw	r3,36(sp)
 100ce14:	10c0062e 	bgeu	r2,r3,100ce30 <__muldf3+0x8c>
 100ce18:	00800104 	movi	r2,4
 100ce1c:	20800a26 	beq	r4,r2,100ce48 <__muldf3+0xa4>
 100ce20:	1880cc26 	beq	r3,r2,100d154 <__muldf3+0x3b0>
 100ce24:	00800084 	movi	r2,2
 100ce28:	20800926 	beq	r4,r2,100ce50 <__muldf3+0xac>
 100ce2c:	1880191e 	bne	r3,r2,100ce94 <__muldf3+0xf0>
 100ce30:	d8c00a17 	ldw	r3,40(sp)
 100ce34:	d8800517 	ldw	r2,20(sp)
 100ce38:	8009883a 	mov	r4,r16
 100ce3c:	10c4c03a 	cmpne	r2,r2,r3
 100ce40:	d8800a15 	stw	r2,40(sp)
 100ce44:	00000706 	br	100ce64 <__muldf3+0xc0>
 100ce48:	00800084 	movi	r2,2
 100ce4c:	1880c326 	beq	r3,r2,100d15c <__muldf3+0x3b8>
 100ce50:	d8800517 	ldw	r2,20(sp)
 100ce54:	d8c00a17 	ldw	r3,40(sp)
 100ce58:	8809883a 	mov	r4,r17
 100ce5c:	10c4c03a 	cmpne	r2,r2,r3
 100ce60:	d8800515 	stw	r2,20(sp)
 100ce64:	100dcbc0 	call	100dcbc <__pack_d>
 100ce68:	dfc01f17 	ldw	ra,124(sp)
 100ce6c:	ddc01e17 	ldw	r23,120(sp)
 100ce70:	dd801d17 	ldw	r22,116(sp)
 100ce74:	dd401c17 	ldw	r21,112(sp)
 100ce78:	dd001b17 	ldw	r20,108(sp)
 100ce7c:	dcc01a17 	ldw	r19,104(sp)
 100ce80:	dc801917 	ldw	r18,100(sp)
 100ce84:	dc401817 	ldw	r17,96(sp)
 100ce88:	dc001717 	ldw	r16,92(sp)
 100ce8c:	dec02004 	addi	sp,sp,128
 100ce90:	f800283a 	ret
 100ce94:	dd800717 	ldw	r22,28(sp)
 100ce98:	dc800c17 	ldw	r18,48(sp)
 100ce9c:	002b883a 	mov	r21,zero
 100cea0:	0023883a 	mov	r17,zero
 100cea4:	a80b883a 	mov	r5,r21
 100cea8:	b00d883a 	mov	r6,r22
 100ceac:	880f883a 	mov	r7,r17
 100ceb0:	ddc00817 	ldw	r23,32(sp)
 100ceb4:	dcc00d17 	ldw	r19,52(sp)
 100ceb8:	9009883a 	mov	r4,r18
 100cebc:	100db180 	call	100db18 <__muldi3>
 100cec0:	001b883a 	mov	r13,zero
 100cec4:	680f883a 	mov	r7,r13
 100cec8:	b009883a 	mov	r4,r22
 100cecc:	000b883a 	mov	r5,zero
 100ced0:	980d883a 	mov	r6,r19
 100ced4:	b82d883a 	mov	r22,r23
 100ced8:	002f883a 	mov	r23,zero
 100cedc:	db401615 	stw	r13,88(sp)
 100cee0:	d8801315 	stw	r2,76(sp)
 100cee4:	d8c01415 	stw	r3,80(sp)
 100cee8:	dcc01515 	stw	r19,84(sp)
 100ceec:	100db180 	call	100db18 <__muldi3>
 100cef0:	b00d883a 	mov	r6,r22
 100cef4:	000b883a 	mov	r5,zero
 100cef8:	9009883a 	mov	r4,r18
 100cefc:	b80f883a 	mov	r7,r23
 100cf00:	1021883a 	mov	r16,r2
 100cf04:	1823883a 	mov	r17,r3
 100cf08:	100db180 	call	100db18 <__muldi3>
 100cf0c:	8085883a 	add	r2,r16,r2
 100cf10:	140d803a 	cmpltu	r6,r2,r16
 100cf14:	88c7883a 	add	r3,r17,r3
 100cf18:	30cd883a 	add	r6,r6,r3
 100cf1c:	1029883a 	mov	r20,r2
 100cf20:	302b883a 	mov	r21,r6
 100cf24:	da801317 	ldw	r10,76(sp)
 100cf28:	dac01417 	ldw	r11,80(sp)
 100cf2c:	db001517 	ldw	r12,84(sp)
 100cf30:	db401617 	ldw	r13,88(sp)
 100cf34:	3440612e 	bgeu	r6,r17,100d0bc <__muldf3+0x318>
 100cf38:	0009883a 	mov	r4,zero
 100cf3c:	5105883a 	add	r2,r10,r4
 100cf40:	128d803a 	cmpltu	r6,r2,r10
 100cf44:	5d07883a 	add	r3,r11,r20
 100cf48:	30cd883a 	add	r6,r6,r3
 100cf4c:	0021883a 	mov	r16,zero
 100cf50:	04400044 	movi	r17,1
 100cf54:	1025883a 	mov	r18,r2
 100cf58:	3027883a 	mov	r19,r6
 100cf5c:	32c06236 	bltu	r6,r11,100d0e8 <__muldf3+0x344>
 100cf60:	59807a26 	beq	r11,r6,100d14c <__muldf3+0x3a8>
 100cf64:	680b883a 	mov	r5,r13
 100cf68:	b80f883a 	mov	r7,r23
 100cf6c:	6009883a 	mov	r4,r12
 100cf70:	b00d883a 	mov	r6,r22
 100cf74:	100db180 	call	100db18 <__muldi3>
 100cf78:	1009883a 	mov	r4,r2
 100cf7c:	000f883a 	mov	r7,zero
 100cf80:	1545883a 	add	r2,r2,r21
 100cf84:	1111803a 	cmpltu	r8,r2,r4
 100cf88:	19c7883a 	add	r3,r3,r7
 100cf8c:	40c7883a 	add	r3,r8,r3
 100cf90:	88cb883a 	add	r5,r17,r3
 100cf94:	d8c00617 	ldw	r3,24(sp)
 100cf98:	8089883a 	add	r4,r16,r2
 100cf9c:	d8800b17 	ldw	r2,44(sp)
 100cfa0:	18c00104 	addi	r3,r3,4
 100cfa4:	240d803a 	cmpltu	r6,r4,r16
 100cfa8:	10c7883a 	add	r3,r2,r3
 100cfac:	2013883a 	mov	r9,r4
 100cfb0:	d8800a17 	ldw	r2,40(sp)
 100cfb4:	d9000517 	ldw	r4,20(sp)
 100cfb8:	314d883a 	add	r6,r6,r5
 100cfbc:	3015883a 	mov	r10,r6
 100cfc0:	2088c03a 	cmpne	r4,r4,r2
 100cfc4:	00880034 	movhi	r2,8192
 100cfc8:	10bfffc4 	addi	r2,r2,-1
 100cfcc:	d9000f15 	stw	r4,60(sp)
 100cfd0:	d8c01015 	stw	r3,64(sp)
 100cfd4:	1180162e 	bgeu	r2,r6,100d030 <__muldf3+0x28c>
 100cfd8:	1811883a 	mov	r8,r3
 100cfdc:	101f883a 	mov	r15,r2
 100cfe0:	980497fa 	slli	r2,r19,31
 100cfe4:	9016d07a 	srli	r11,r18,1
 100cfe8:	500697fa 	slli	r3,r10,31
 100cfec:	480cd07a 	srli	r6,r9,1
 100cff0:	500ed07a 	srli	r7,r10,1
 100cff4:	12d6b03a 	or	r11,r2,r11
 100cff8:	00800044 	movi	r2,1
 100cffc:	198cb03a 	or	r6,r3,r6
 100d000:	4888703a 	and	r4,r9,r2
 100d004:	9818d07a 	srli	r12,r19,1
 100d008:	001b883a 	mov	r13,zero
 100d00c:	03a00034 	movhi	r14,32768
 100d010:	3013883a 	mov	r9,r6
 100d014:	3815883a 	mov	r10,r7
 100d018:	4091883a 	add	r8,r8,r2
 100d01c:	20000226 	beq	r4,zero,100d028 <__muldf3+0x284>
 100d020:	5b64b03a 	or	r18,r11,r13
 100d024:	63a6b03a 	or	r19,r12,r14
 100d028:	7abfed36 	bltu	r15,r10,100cfe0 <__muldf3+0x23c>
 100d02c:	da001015 	stw	r8,64(sp)
 100d030:	00840034 	movhi	r2,4096
 100d034:	10bfffc4 	addi	r2,r2,-1
 100d038:	12801436 	bltu	r2,r10,100d08c <__muldf3+0x2e8>
 100d03c:	da001017 	ldw	r8,64(sp)
 100d040:	101f883a 	mov	r15,r2
 100d044:	4a45883a 	add	r2,r9,r9
 100d048:	124d803a 	cmpltu	r6,r2,r9
 100d04c:	5287883a 	add	r3,r10,r10
 100d050:	9497883a 	add	r11,r18,r18
 100d054:	5c8f803a 	cmpltu	r7,r11,r18
 100d058:	9cd9883a 	add	r12,r19,r19
 100d05c:	01000044 	movi	r4,1
 100d060:	30cd883a 	add	r6,r6,r3
 100d064:	3b0f883a 	add	r7,r7,r12
 100d068:	423fffc4 	addi	r8,r8,-1
 100d06c:	1013883a 	mov	r9,r2
 100d070:	3015883a 	mov	r10,r6
 100d074:	111ab03a 	or	r13,r2,r4
 100d078:	98003016 	blt	r19,zero,100d13c <__muldf3+0x398>
 100d07c:	5825883a 	mov	r18,r11
 100d080:	3827883a 	mov	r19,r7
 100d084:	7abfef2e 	bgeu	r15,r10,100d044 <__muldf3+0x2a0>
 100d088:	da001015 	stw	r8,64(sp)
 100d08c:	00803fc4 	movi	r2,255
 100d090:	488e703a 	and	r7,r9,r2
 100d094:	00802004 	movi	r2,128
 100d098:	0007883a 	mov	r3,zero
 100d09c:	0011883a 	mov	r8,zero
 100d0a0:	38801826 	beq	r7,r2,100d104 <__muldf3+0x360>
 100d0a4:	008000c4 	movi	r2,3
 100d0a8:	d9000e04 	addi	r4,sp,56
 100d0ac:	da801215 	stw	r10,72(sp)
 100d0b0:	d8800e15 	stw	r2,56(sp)
 100d0b4:	da401115 	stw	r9,68(sp)
 100d0b8:	003f6a06 	br	100ce64 <__muldf3+0xc0>
 100d0bc:	89802126 	beq	r17,r6,100d144 <__muldf3+0x3a0>
 100d0c0:	0009883a 	mov	r4,zero
 100d0c4:	5105883a 	add	r2,r10,r4
 100d0c8:	128d803a 	cmpltu	r6,r2,r10
 100d0cc:	5d07883a 	add	r3,r11,r20
 100d0d0:	30cd883a 	add	r6,r6,r3
 100d0d4:	0021883a 	mov	r16,zero
 100d0d8:	0023883a 	mov	r17,zero
 100d0dc:	1025883a 	mov	r18,r2
 100d0e0:	3027883a 	mov	r19,r6
 100d0e4:	32ff9e2e 	bgeu	r6,r11,100cf60 <__muldf3+0x1bc>
 100d0e8:	00800044 	movi	r2,1
 100d0ec:	8089883a 	add	r4,r16,r2
 100d0f0:	240d803a 	cmpltu	r6,r4,r16
 100d0f4:	344d883a 	add	r6,r6,r17
 100d0f8:	2021883a 	mov	r16,r4
 100d0fc:	3023883a 	mov	r17,r6
 100d100:	003f9806 	br	100cf64 <__muldf3+0x1c0>
 100d104:	403fe71e 	bne	r8,zero,100d0a4 <__muldf3+0x300>
 100d108:	01004004 	movi	r4,256
 100d10c:	4904703a 	and	r2,r9,r4
 100d110:	10c4b03a 	or	r2,r2,r3
 100d114:	103fe31e 	bne	r2,zero,100d0a4 <__muldf3+0x300>
 100d118:	94c4b03a 	or	r2,r18,r19
 100d11c:	103fe126 	beq	r2,zero,100d0a4 <__muldf3+0x300>
 100d120:	49c5883a 	add	r2,r9,r7
 100d124:	1251803a 	cmpltu	r8,r2,r9
 100d128:	4291883a 	add	r8,r8,r10
 100d12c:	013fc004 	movi	r4,-256
 100d130:	1112703a 	and	r9,r2,r4
 100d134:	4015883a 	mov	r10,r8
 100d138:	003fda06 	br	100d0a4 <__muldf3+0x300>
 100d13c:	6813883a 	mov	r9,r13
 100d140:	003fce06 	br	100d07c <__muldf3+0x2d8>
 100d144:	143f7c36 	bltu	r2,r16,100cf38 <__muldf3+0x194>
 100d148:	003fdd06 	br	100d0c0 <__muldf3+0x31c>
 100d14c:	12bf852e 	bgeu	r2,r10,100cf64 <__muldf3+0x1c0>
 100d150:	003fe506 	br	100d0e8 <__muldf3+0x344>
 100d154:	00800084 	movi	r2,2
 100d158:	20bf351e 	bne	r4,r2,100ce30 <__muldf3+0x8c>
 100d15c:	01004074 	movhi	r4,257
 100d160:	21076504 	addi	r4,r4,7572
 100d164:	003f3f06 	br	100ce64 <__muldf3+0xc0>

0100d168 <__divdf3>:
 100d168:	deffed04 	addi	sp,sp,-76
 100d16c:	dcc01115 	stw	r19,68(sp)
 100d170:	dcc00404 	addi	r19,sp,16
 100d174:	2011883a 	mov	r8,r4
 100d178:	2813883a 	mov	r9,r5
 100d17c:	dc000e15 	stw	r16,56(sp)
 100d180:	d809883a 	mov	r4,sp
 100d184:	980b883a 	mov	r5,r19
 100d188:	dc000904 	addi	r16,sp,36
 100d18c:	dfc01215 	stw	ra,72(sp)
 100d190:	da400115 	stw	r9,4(sp)
 100d194:	d9c00315 	stw	r7,12(sp)
 100d198:	da000015 	stw	r8,0(sp)
 100d19c:	d9800215 	stw	r6,8(sp)
 100d1a0:	dc801015 	stw	r18,64(sp)
 100d1a4:	dc400f15 	stw	r17,60(sp)
 100d1a8:	100dfd00 	call	100dfd0 <__unpack_d>
 100d1ac:	d9000204 	addi	r4,sp,8
 100d1b0:	800b883a 	mov	r5,r16
 100d1b4:	100dfd00 	call	100dfd0 <__unpack_d>
 100d1b8:	d9000417 	ldw	r4,16(sp)
 100d1bc:	00800044 	movi	r2,1
 100d1c0:	11000b2e 	bgeu	r2,r4,100d1f0 <__divdf3+0x88>
 100d1c4:	d9400917 	ldw	r5,36(sp)
 100d1c8:	1140762e 	bgeu	r2,r5,100d3a4 <__divdf3+0x23c>
 100d1cc:	d8800517 	ldw	r2,20(sp)
 100d1d0:	d8c00a17 	ldw	r3,40(sp)
 100d1d4:	01800104 	movi	r6,4
 100d1d8:	10c4f03a 	xor	r2,r2,r3
 100d1dc:	d8800515 	stw	r2,20(sp)
 100d1e0:	21800226 	beq	r4,r6,100d1ec <__divdf3+0x84>
 100d1e4:	00800084 	movi	r2,2
 100d1e8:	2080141e 	bne	r4,r2,100d23c <__divdf3+0xd4>
 100d1ec:	29000926 	beq	r5,r4,100d214 <__divdf3+0xac>
 100d1f0:	9809883a 	mov	r4,r19
 100d1f4:	100dcbc0 	call	100dcbc <__pack_d>
 100d1f8:	dfc01217 	ldw	ra,72(sp)
 100d1fc:	dcc01117 	ldw	r19,68(sp)
 100d200:	dc801017 	ldw	r18,64(sp)
 100d204:	dc400f17 	ldw	r17,60(sp)
 100d208:	dc000e17 	ldw	r16,56(sp)
 100d20c:	dec01304 	addi	sp,sp,76
 100d210:	f800283a 	ret
 100d214:	01004074 	movhi	r4,257
 100d218:	21076504 	addi	r4,r4,7572
 100d21c:	100dcbc0 	call	100dcbc <__pack_d>
 100d220:	dfc01217 	ldw	ra,72(sp)
 100d224:	dcc01117 	ldw	r19,68(sp)
 100d228:	dc801017 	ldw	r18,64(sp)
 100d22c:	dc400f17 	ldw	r17,60(sp)
 100d230:	dc000e17 	ldw	r16,56(sp)
 100d234:	dec01304 	addi	sp,sp,76
 100d238:	f800283a 	ret
 100d23c:	29805b26 	beq	r5,r6,100d3ac <__divdf3+0x244>
 100d240:	28802d26 	beq	r5,r2,100d2f8 <__divdf3+0x190>
 100d244:	d8c00617 	ldw	r3,24(sp)
 100d248:	d8800b17 	ldw	r2,44(sp)
 100d24c:	d9c00817 	ldw	r7,32(sp)
 100d250:	dc400d17 	ldw	r17,52(sp)
 100d254:	188bc83a 	sub	r5,r3,r2
 100d258:	d9800717 	ldw	r6,28(sp)
 100d25c:	dc000c17 	ldw	r16,48(sp)
 100d260:	d9400615 	stw	r5,24(sp)
 100d264:	3c403836 	bltu	r7,r17,100d348 <__divdf3+0x1e0>
 100d268:	89c03626 	beq	r17,r7,100d344 <__divdf3+0x1dc>
 100d26c:	0015883a 	mov	r10,zero
 100d270:	001d883a 	mov	r14,zero
 100d274:	02c40034 	movhi	r11,4096
 100d278:	001f883a 	mov	r15,zero
 100d27c:	003f883a 	mov	ra,zero
 100d280:	04800f44 	movi	r18,61
 100d284:	00000f06 	br	100d2c4 <__divdf3+0x15c>
 100d288:	601d883a 	mov	r14,r12
 100d28c:	681f883a 	mov	r15,r13
 100d290:	400d883a 	mov	r6,r8
 100d294:	100f883a 	mov	r7,r2
 100d298:	3191883a 	add	r8,r6,r6
 100d29c:	5808d07a 	srli	r4,r11,1
 100d2a0:	4185803a 	cmpltu	r2,r8,r6
 100d2a4:	39d3883a 	add	r9,r7,r7
 100d2a8:	28c6b03a 	or	r3,r5,r3
 100d2ac:	1245883a 	add	r2,r2,r9
 100d2b0:	1815883a 	mov	r10,r3
 100d2b4:	2017883a 	mov	r11,r4
 100d2b8:	400d883a 	mov	r6,r8
 100d2bc:	100f883a 	mov	r7,r2
 100d2c0:	fc801726 	beq	ra,r18,100d320 <__divdf3+0x1b8>
 100d2c4:	580a97fa 	slli	r5,r11,31
 100d2c8:	5006d07a 	srli	r3,r10,1
 100d2cc:	ffc00044 	addi	ra,ra,1
 100d2d0:	3c7ff136 	bltu	r7,r17,100d298 <__divdf3+0x130>
 100d2d4:	3411c83a 	sub	r8,r6,r16
 100d2d8:	3205803a 	cmpltu	r2,r6,r8
 100d2dc:	3c53c83a 	sub	r9,r7,r17
 100d2e0:	7298b03a 	or	r12,r14,r10
 100d2e4:	7adab03a 	or	r13,r15,r11
 100d2e8:	4885c83a 	sub	r2,r9,r2
 100d2ec:	89ffe61e 	bne	r17,r7,100d288 <__divdf3+0x120>
 100d2f0:	343fe936 	bltu	r6,r16,100d298 <__divdf3+0x130>
 100d2f4:	003fe406 	br	100d288 <__divdf3+0x120>
 100d2f8:	9809883a 	mov	r4,r19
 100d2fc:	d9800415 	stw	r6,16(sp)
 100d300:	100dcbc0 	call	100dcbc <__pack_d>
 100d304:	dfc01217 	ldw	ra,72(sp)
 100d308:	dcc01117 	ldw	r19,68(sp)
 100d30c:	dc801017 	ldw	r18,64(sp)
 100d310:	dc400f17 	ldw	r17,60(sp)
 100d314:	dc000e17 	ldw	r16,56(sp)
 100d318:	dec01304 	addi	sp,sp,76
 100d31c:	f800283a 	ret
 100d320:	00803fc4 	movi	r2,255
 100d324:	7090703a 	and	r8,r14,r2
 100d328:	00802004 	movi	r2,128
 100d32c:	0007883a 	mov	r3,zero
 100d330:	0013883a 	mov	r9,zero
 100d334:	40800d26 	beq	r8,r2,100d36c <__divdf3+0x204>
 100d338:	dbc00815 	stw	r15,32(sp)
 100d33c:	db800715 	stw	r14,28(sp)
 100d340:	003fab06 	br	100d1f0 <__divdf3+0x88>
 100d344:	343fc92e 	bgeu	r6,r16,100d26c <__divdf3+0x104>
 100d348:	3185883a 	add	r2,r6,r6
 100d34c:	1189803a 	cmpltu	r4,r2,r6
 100d350:	39c7883a 	add	r3,r7,r7
 100d354:	20c9883a 	add	r4,r4,r3
 100d358:	297fffc4 	addi	r5,r5,-1
 100d35c:	100d883a 	mov	r6,r2
 100d360:	200f883a 	mov	r7,r4
 100d364:	d9400615 	stw	r5,24(sp)
 100d368:	003fc006 	br	100d26c <__divdf3+0x104>
 100d36c:	483ff21e 	bne	r9,zero,100d338 <__divdf3+0x1d0>
 100d370:	01004004 	movi	r4,256
 100d374:	7104703a 	and	r2,r14,r4
 100d378:	10c4b03a 	or	r2,r2,r3
 100d37c:	103fee1e 	bne	r2,zero,100d338 <__divdf3+0x1d0>
 100d380:	31c4b03a 	or	r2,r6,r7
 100d384:	103fec26 	beq	r2,zero,100d338 <__divdf3+0x1d0>
 100d388:	7205883a 	add	r2,r14,r8
 100d38c:	1391803a 	cmpltu	r8,r2,r14
 100d390:	43d1883a 	add	r8,r8,r15
 100d394:	013fc004 	movi	r4,-256
 100d398:	111c703a 	and	r14,r2,r4
 100d39c:	401f883a 	mov	r15,r8
 100d3a0:	003fe506 	br	100d338 <__divdf3+0x1d0>
 100d3a4:	8009883a 	mov	r4,r16
 100d3a8:	003f9206 	br	100d1f4 <__divdf3+0x8c>
 100d3ac:	9809883a 	mov	r4,r19
 100d3b0:	d8000715 	stw	zero,28(sp)
 100d3b4:	d8000815 	stw	zero,32(sp)
 100d3b8:	d8000615 	stw	zero,24(sp)
 100d3bc:	003f8d06 	br	100d1f4 <__divdf3+0x8c>

0100d3c0 <__eqdf2>:
 100d3c0:	deffef04 	addi	sp,sp,-68
 100d3c4:	dc400f15 	stw	r17,60(sp)
 100d3c8:	dc400404 	addi	r17,sp,16
 100d3cc:	2005883a 	mov	r2,r4
 100d3d0:	2807883a 	mov	r3,r5
 100d3d4:	dc000e15 	stw	r16,56(sp)
 100d3d8:	d809883a 	mov	r4,sp
 100d3dc:	880b883a 	mov	r5,r17
 100d3e0:	dc000904 	addi	r16,sp,36
 100d3e4:	d8c00115 	stw	r3,4(sp)
 100d3e8:	d8800015 	stw	r2,0(sp)
 100d3ec:	d9800215 	stw	r6,8(sp)
 100d3f0:	dfc01015 	stw	ra,64(sp)
 100d3f4:	d9c00315 	stw	r7,12(sp)
 100d3f8:	100dfd00 	call	100dfd0 <__unpack_d>
 100d3fc:	d9000204 	addi	r4,sp,8
 100d400:	800b883a 	mov	r5,r16
 100d404:	100dfd00 	call	100dfd0 <__unpack_d>
 100d408:	d8800417 	ldw	r2,16(sp)
 100d40c:	00c00044 	movi	r3,1
 100d410:	180d883a 	mov	r6,r3
 100d414:	1880062e 	bgeu	r3,r2,100d430 <__eqdf2+0x70>
 100d418:	d8800917 	ldw	r2,36(sp)
 100d41c:	8809883a 	mov	r4,r17
 100d420:	800b883a 	mov	r5,r16
 100d424:	1880022e 	bgeu	r3,r2,100d430 <__eqdf2+0x70>
 100d428:	100e1080 	call	100e108 <__fpcmp_parts_d>
 100d42c:	100d883a 	mov	r6,r2
 100d430:	3005883a 	mov	r2,r6
 100d434:	dfc01017 	ldw	ra,64(sp)
 100d438:	dc400f17 	ldw	r17,60(sp)
 100d43c:	dc000e17 	ldw	r16,56(sp)
 100d440:	dec01104 	addi	sp,sp,68
 100d444:	f800283a 	ret

0100d448 <__nedf2>:
 100d448:	deffef04 	addi	sp,sp,-68
 100d44c:	dc400f15 	stw	r17,60(sp)
 100d450:	dc400404 	addi	r17,sp,16
 100d454:	2005883a 	mov	r2,r4
 100d458:	2807883a 	mov	r3,r5
 100d45c:	dc000e15 	stw	r16,56(sp)
 100d460:	d809883a 	mov	r4,sp
 100d464:	880b883a 	mov	r5,r17
 100d468:	dc000904 	addi	r16,sp,36
 100d46c:	d8c00115 	stw	r3,4(sp)
 100d470:	d8800015 	stw	r2,0(sp)
 100d474:	d9800215 	stw	r6,8(sp)
 100d478:	dfc01015 	stw	ra,64(sp)
 100d47c:	d9c00315 	stw	r7,12(sp)
 100d480:	100dfd00 	call	100dfd0 <__unpack_d>
 100d484:	d9000204 	addi	r4,sp,8
 100d488:	800b883a 	mov	r5,r16
 100d48c:	100dfd00 	call	100dfd0 <__unpack_d>
 100d490:	d8800417 	ldw	r2,16(sp)
 100d494:	00c00044 	movi	r3,1
 100d498:	180d883a 	mov	r6,r3
 100d49c:	1880062e 	bgeu	r3,r2,100d4b8 <__nedf2+0x70>
 100d4a0:	d8800917 	ldw	r2,36(sp)
 100d4a4:	8809883a 	mov	r4,r17
 100d4a8:	800b883a 	mov	r5,r16
 100d4ac:	1880022e 	bgeu	r3,r2,100d4b8 <__nedf2+0x70>
 100d4b0:	100e1080 	call	100e108 <__fpcmp_parts_d>
 100d4b4:	100d883a 	mov	r6,r2
 100d4b8:	3005883a 	mov	r2,r6
 100d4bc:	dfc01017 	ldw	ra,64(sp)
 100d4c0:	dc400f17 	ldw	r17,60(sp)
 100d4c4:	dc000e17 	ldw	r16,56(sp)
 100d4c8:	dec01104 	addi	sp,sp,68
 100d4cc:	f800283a 	ret

0100d4d0 <__gtdf2>:
 100d4d0:	deffef04 	addi	sp,sp,-68
 100d4d4:	dc400f15 	stw	r17,60(sp)
 100d4d8:	dc400404 	addi	r17,sp,16
 100d4dc:	2005883a 	mov	r2,r4
 100d4e0:	2807883a 	mov	r3,r5
 100d4e4:	dc000e15 	stw	r16,56(sp)
 100d4e8:	d809883a 	mov	r4,sp
 100d4ec:	880b883a 	mov	r5,r17
 100d4f0:	dc000904 	addi	r16,sp,36
 100d4f4:	d8c00115 	stw	r3,4(sp)
 100d4f8:	d8800015 	stw	r2,0(sp)
 100d4fc:	d9800215 	stw	r6,8(sp)
 100d500:	dfc01015 	stw	ra,64(sp)
 100d504:	d9c00315 	stw	r7,12(sp)
 100d508:	100dfd00 	call	100dfd0 <__unpack_d>
 100d50c:	d9000204 	addi	r4,sp,8
 100d510:	800b883a 	mov	r5,r16
 100d514:	100dfd00 	call	100dfd0 <__unpack_d>
 100d518:	d8800417 	ldw	r2,16(sp)
 100d51c:	00c00044 	movi	r3,1
 100d520:	01bfffc4 	movi	r6,-1
 100d524:	1880062e 	bgeu	r3,r2,100d540 <__gtdf2+0x70>
 100d528:	d8800917 	ldw	r2,36(sp)
 100d52c:	8809883a 	mov	r4,r17
 100d530:	800b883a 	mov	r5,r16
 100d534:	1880022e 	bgeu	r3,r2,100d540 <__gtdf2+0x70>
 100d538:	100e1080 	call	100e108 <__fpcmp_parts_d>
 100d53c:	100d883a 	mov	r6,r2
 100d540:	3005883a 	mov	r2,r6
 100d544:	dfc01017 	ldw	ra,64(sp)
 100d548:	dc400f17 	ldw	r17,60(sp)
 100d54c:	dc000e17 	ldw	r16,56(sp)
 100d550:	dec01104 	addi	sp,sp,68
 100d554:	f800283a 	ret

0100d558 <__gedf2>:
 100d558:	deffef04 	addi	sp,sp,-68
 100d55c:	dc400f15 	stw	r17,60(sp)
 100d560:	dc400404 	addi	r17,sp,16
 100d564:	2005883a 	mov	r2,r4
 100d568:	2807883a 	mov	r3,r5
 100d56c:	dc000e15 	stw	r16,56(sp)
 100d570:	d809883a 	mov	r4,sp
 100d574:	880b883a 	mov	r5,r17
 100d578:	dc000904 	addi	r16,sp,36
 100d57c:	d8c00115 	stw	r3,4(sp)
 100d580:	d8800015 	stw	r2,0(sp)
 100d584:	d9800215 	stw	r6,8(sp)
 100d588:	dfc01015 	stw	ra,64(sp)
 100d58c:	d9c00315 	stw	r7,12(sp)
 100d590:	100dfd00 	call	100dfd0 <__unpack_d>
 100d594:	d9000204 	addi	r4,sp,8
 100d598:	800b883a 	mov	r5,r16
 100d59c:	100dfd00 	call	100dfd0 <__unpack_d>
 100d5a0:	d8800417 	ldw	r2,16(sp)
 100d5a4:	00c00044 	movi	r3,1
 100d5a8:	01bfffc4 	movi	r6,-1
 100d5ac:	1880062e 	bgeu	r3,r2,100d5c8 <__gedf2+0x70>
 100d5b0:	d8800917 	ldw	r2,36(sp)
 100d5b4:	8809883a 	mov	r4,r17
 100d5b8:	800b883a 	mov	r5,r16
 100d5bc:	1880022e 	bgeu	r3,r2,100d5c8 <__gedf2+0x70>
 100d5c0:	100e1080 	call	100e108 <__fpcmp_parts_d>
 100d5c4:	100d883a 	mov	r6,r2
 100d5c8:	3005883a 	mov	r2,r6
 100d5cc:	dfc01017 	ldw	ra,64(sp)
 100d5d0:	dc400f17 	ldw	r17,60(sp)
 100d5d4:	dc000e17 	ldw	r16,56(sp)
 100d5d8:	dec01104 	addi	sp,sp,68
 100d5dc:	f800283a 	ret

0100d5e0 <__ltdf2>:
 100d5e0:	deffef04 	addi	sp,sp,-68
 100d5e4:	dc400f15 	stw	r17,60(sp)
 100d5e8:	dc400404 	addi	r17,sp,16
 100d5ec:	2005883a 	mov	r2,r4
 100d5f0:	2807883a 	mov	r3,r5
 100d5f4:	dc000e15 	stw	r16,56(sp)
 100d5f8:	d809883a 	mov	r4,sp
 100d5fc:	880b883a 	mov	r5,r17
 100d600:	dc000904 	addi	r16,sp,36
 100d604:	d8c00115 	stw	r3,4(sp)
 100d608:	d8800015 	stw	r2,0(sp)
 100d60c:	d9800215 	stw	r6,8(sp)
 100d610:	dfc01015 	stw	ra,64(sp)
 100d614:	d9c00315 	stw	r7,12(sp)
 100d618:	100dfd00 	call	100dfd0 <__unpack_d>
 100d61c:	d9000204 	addi	r4,sp,8
 100d620:	800b883a 	mov	r5,r16
 100d624:	100dfd00 	call	100dfd0 <__unpack_d>
 100d628:	d8800417 	ldw	r2,16(sp)
 100d62c:	00c00044 	movi	r3,1
 100d630:	180d883a 	mov	r6,r3
 100d634:	1880062e 	bgeu	r3,r2,100d650 <__ltdf2+0x70>
 100d638:	d8800917 	ldw	r2,36(sp)
 100d63c:	8809883a 	mov	r4,r17
 100d640:	800b883a 	mov	r5,r16
 100d644:	1880022e 	bgeu	r3,r2,100d650 <__ltdf2+0x70>
 100d648:	100e1080 	call	100e108 <__fpcmp_parts_d>
 100d64c:	100d883a 	mov	r6,r2
 100d650:	3005883a 	mov	r2,r6
 100d654:	dfc01017 	ldw	ra,64(sp)
 100d658:	dc400f17 	ldw	r17,60(sp)
 100d65c:	dc000e17 	ldw	r16,56(sp)
 100d660:	dec01104 	addi	sp,sp,68
 100d664:	f800283a 	ret

0100d668 <__floatsidf>:
 100d668:	2006d7fa 	srli	r3,r4,31
 100d66c:	defff604 	addi	sp,sp,-40
 100d670:	008000c4 	movi	r2,3
 100d674:	dfc00915 	stw	ra,36(sp)
 100d678:	dcc00815 	stw	r19,32(sp)
 100d67c:	dc800715 	stw	r18,28(sp)
 100d680:	dc400615 	stw	r17,24(sp)
 100d684:	dc000515 	stw	r16,20(sp)
 100d688:	d8800015 	stw	r2,0(sp)
 100d68c:	d8c00115 	stw	r3,4(sp)
 100d690:	20000f1e 	bne	r4,zero,100d6d0 <__floatsidf+0x68>
 100d694:	00800084 	movi	r2,2
 100d698:	d8800015 	stw	r2,0(sp)
 100d69c:	d809883a 	mov	r4,sp
 100d6a0:	100dcbc0 	call	100dcbc <__pack_d>
 100d6a4:	1009883a 	mov	r4,r2
 100d6a8:	180b883a 	mov	r5,r3
 100d6ac:	2005883a 	mov	r2,r4
 100d6b0:	2807883a 	mov	r3,r5
 100d6b4:	dfc00917 	ldw	ra,36(sp)
 100d6b8:	dcc00817 	ldw	r19,32(sp)
 100d6bc:	dc800717 	ldw	r18,28(sp)
 100d6c0:	dc400617 	ldw	r17,24(sp)
 100d6c4:	dc000517 	ldw	r16,20(sp)
 100d6c8:	dec00a04 	addi	sp,sp,40
 100d6cc:	f800283a 	ret
 100d6d0:	00800f04 	movi	r2,60
 100d6d4:	1807003a 	cmpeq	r3,r3,zero
 100d6d8:	d8800215 	stw	r2,8(sp)
 100d6dc:	18001126 	beq	r3,zero,100d724 <__floatsidf+0xbc>
 100d6e0:	0027883a 	mov	r19,zero
 100d6e4:	2025883a 	mov	r18,r4
 100d6e8:	d9000315 	stw	r4,12(sp)
 100d6ec:	dcc00415 	stw	r19,16(sp)
 100d6f0:	100dc3c0 	call	100dc3c <__clzsi2>
 100d6f4:	11000744 	addi	r4,r2,29
 100d6f8:	013fe80e 	bge	zero,r4,100d69c <__floatsidf+0x34>
 100d6fc:	10bfff44 	addi	r2,r2,-3
 100d700:	10000c16 	blt	r2,zero,100d734 <__floatsidf+0xcc>
 100d704:	90a2983a 	sll	r17,r18,r2
 100d708:	0021883a 	mov	r16,zero
 100d70c:	d8800217 	ldw	r2,8(sp)
 100d710:	dc400415 	stw	r17,16(sp)
 100d714:	dc000315 	stw	r16,12(sp)
 100d718:	1105c83a 	sub	r2,r2,r4
 100d71c:	d8800215 	stw	r2,8(sp)
 100d720:	003fde06 	br	100d69c <__floatsidf+0x34>
 100d724:	00a00034 	movhi	r2,32768
 100d728:	20800a26 	beq	r4,r2,100d754 <__floatsidf+0xec>
 100d72c:	0109c83a 	sub	r4,zero,r4
 100d730:	003feb06 	br	100d6e0 <__floatsidf+0x78>
 100d734:	9006d07a 	srli	r3,r18,1
 100d738:	008007c4 	movi	r2,31
 100d73c:	1105c83a 	sub	r2,r2,r4
 100d740:	1886d83a 	srl	r3,r3,r2
 100d744:	9922983a 	sll	r17,r19,r4
 100d748:	9120983a 	sll	r16,r18,r4
 100d74c:	1c62b03a 	or	r17,r3,r17
 100d750:	003fee06 	br	100d70c <__floatsidf+0xa4>
 100d754:	0009883a 	mov	r4,zero
 100d758:	01707834 	movhi	r5,49632
 100d75c:	003fd306 	br	100d6ac <__floatsidf+0x44>

0100d760 <__fixdfsi>:
 100d760:	defff804 	addi	sp,sp,-32
 100d764:	2005883a 	mov	r2,r4
 100d768:	2807883a 	mov	r3,r5
 100d76c:	d809883a 	mov	r4,sp
 100d770:	d9400204 	addi	r5,sp,8
 100d774:	d8c00115 	stw	r3,4(sp)
 100d778:	d8800015 	stw	r2,0(sp)
 100d77c:	dfc00715 	stw	ra,28(sp)
 100d780:	100dfd00 	call	100dfd0 <__unpack_d>
 100d784:	d8c00217 	ldw	r3,8(sp)
 100d788:	00800084 	movi	r2,2
 100d78c:	1880051e 	bne	r3,r2,100d7a4 <__fixdfsi+0x44>
 100d790:	0007883a 	mov	r3,zero
 100d794:	1805883a 	mov	r2,r3
 100d798:	dfc00717 	ldw	ra,28(sp)
 100d79c:	dec00804 	addi	sp,sp,32
 100d7a0:	f800283a 	ret
 100d7a4:	00800044 	movi	r2,1
 100d7a8:	10fff92e 	bgeu	r2,r3,100d790 <__fixdfsi+0x30>
 100d7ac:	00800104 	movi	r2,4
 100d7b0:	18800426 	beq	r3,r2,100d7c4 <__fixdfsi+0x64>
 100d7b4:	d8c00417 	ldw	r3,16(sp)
 100d7b8:	183ff516 	blt	r3,zero,100d790 <__fixdfsi+0x30>
 100d7bc:	00800784 	movi	r2,30
 100d7c0:	10c0080e 	bge	r2,r3,100d7e4 <__fixdfsi+0x84>
 100d7c4:	d8800317 	ldw	r2,12(sp)
 100d7c8:	1000121e 	bne	r2,zero,100d814 <__fixdfsi+0xb4>
 100d7cc:	00e00034 	movhi	r3,32768
 100d7d0:	18ffffc4 	addi	r3,r3,-1
 100d7d4:	1805883a 	mov	r2,r3
 100d7d8:	dfc00717 	ldw	ra,28(sp)
 100d7dc:	dec00804 	addi	sp,sp,32
 100d7e0:	f800283a 	ret
 100d7e4:	00800f04 	movi	r2,60
 100d7e8:	10d1c83a 	sub	r8,r2,r3
 100d7ec:	40bff804 	addi	r2,r8,-32
 100d7f0:	d9800517 	ldw	r6,20(sp)
 100d7f4:	d9c00617 	ldw	r7,24(sp)
 100d7f8:	10000816 	blt	r2,zero,100d81c <__fixdfsi+0xbc>
 100d7fc:	3888d83a 	srl	r4,r7,r2
 100d800:	d8800317 	ldw	r2,12(sp)
 100d804:	2007883a 	mov	r3,r4
 100d808:	103fe226 	beq	r2,zero,100d794 <__fixdfsi+0x34>
 100d80c:	0107c83a 	sub	r3,zero,r4
 100d810:	003fe006 	br	100d794 <__fixdfsi+0x34>
 100d814:	00e00034 	movhi	r3,32768
 100d818:	003fde06 	br	100d794 <__fixdfsi+0x34>
 100d81c:	39c7883a 	add	r3,r7,r7
 100d820:	008007c4 	movi	r2,31
 100d824:	1205c83a 	sub	r2,r2,r8
 100d828:	1886983a 	sll	r3,r3,r2
 100d82c:	3208d83a 	srl	r4,r6,r8
 100d830:	1908b03a 	or	r4,r3,r4
 100d834:	003ff206 	br	100d800 <__fixdfsi+0xa0>

0100d838 <__floatunsidf>:
 100d838:	defff204 	addi	sp,sp,-56
 100d83c:	dfc00d15 	stw	ra,52(sp)
 100d840:	ddc00c15 	stw	r23,48(sp)
 100d844:	dd800b15 	stw	r22,44(sp)
 100d848:	dd400a15 	stw	r21,40(sp)
 100d84c:	dd000915 	stw	r20,36(sp)
 100d850:	dcc00815 	stw	r19,32(sp)
 100d854:	dc800715 	stw	r18,28(sp)
 100d858:	dc400615 	stw	r17,24(sp)
 100d85c:	dc000515 	stw	r16,20(sp)
 100d860:	d8000115 	stw	zero,4(sp)
 100d864:	20000f1e 	bne	r4,zero,100d8a4 <__floatunsidf+0x6c>
 100d868:	00800084 	movi	r2,2
 100d86c:	d8800015 	stw	r2,0(sp)
 100d870:	d809883a 	mov	r4,sp
 100d874:	100dcbc0 	call	100dcbc <__pack_d>
 100d878:	dfc00d17 	ldw	ra,52(sp)
 100d87c:	ddc00c17 	ldw	r23,48(sp)
 100d880:	dd800b17 	ldw	r22,44(sp)
 100d884:	dd400a17 	ldw	r21,40(sp)
 100d888:	dd000917 	ldw	r20,36(sp)
 100d88c:	dcc00817 	ldw	r19,32(sp)
 100d890:	dc800717 	ldw	r18,28(sp)
 100d894:	dc400617 	ldw	r17,24(sp)
 100d898:	dc000517 	ldw	r16,20(sp)
 100d89c:	dec00e04 	addi	sp,sp,56
 100d8a0:	f800283a 	ret
 100d8a4:	008000c4 	movi	r2,3
 100d8a8:	00c00f04 	movi	r3,60
 100d8ac:	002f883a 	mov	r23,zero
 100d8b0:	202d883a 	mov	r22,r4
 100d8b4:	d8800015 	stw	r2,0(sp)
 100d8b8:	d8c00215 	stw	r3,8(sp)
 100d8bc:	d9000315 	stw	r4,12(sp)
 100d8c0:	ddc00415 	stw	r23,16(sp)
 100d8c4:	100dc3c0 	call	100dc3c <__clzsi2>
 100d8c8:	12400744 	addi	r9,r2,29
 100d8cc:	48000b16 	blt	r9,zero,100d8fc <__floatunsidf+0xc4>
 100d8d0:	483fe726 	beq	r9,zero,100d870 <__floatunsidf+0x38>
 100d8d4:	10bfff44 	addi	r2,r2,-3
 100d8d8:	10002e16 	blt	r2,zero,100d994 <__floatunsidf+0x15c>
 100d8dc:	b0a2983a 	sll	r17,r22,r2
 100d8e0:	0021883a 	mov	r16,zero
 100d8e4:	d8800217 	ldw	r2,8(sp)
 100d8e8:	dc400415 	stw	r17,16(sp)
 100d8ec:	dc000315 	stw	r16,12(sp)
 100d8f0:	1245c83a 	sub	r2,r2,r9
 100d8f4:	d8800215 	stw	r2,8(sp)
 100d8f8:	003fdd06 	br	100d870 <__floatunsidf+0x38>
 100d8fc:	0255c83a 	sub	r10,zero,r9
 100d900:	51bff804 	addi	r6,r10,-32
 100d904:	30001b16 	blt	r6,zero,100d974 <__floatunsidf+0x13c>
 100d908:	b9a8d83a 	srl	r20,r23,r6
 100d90c:	002b883a 	mov	r21,zero
 100d910:	000f883a 	mov	r7,zero
 100d914:	01000044 	movi	r4,1
 100d918:	0011883a 	mov	r8,zero
 100d91c:	30002516 	blt	r6,zero,100d9b4 <__floatunsidf+0x17c>
 100d920:	21a6983a 	sll	r19,r4,r6
 100d924:	0025883a 	mov	r18,zero
 100d928:	00bfffc4 	movi	r2,-1
 100d92c:	9089883a 	add	r4,r18,r2
 100d930:	988b883a 	add	r5,r19,r2
 100d934:	248d803a 	cmpltu	r6,r4,r18
 100d938:	314b883a 	add	r5,r6,r5
 100d93c:	b104703a 	and	r2,r22,r4
 100d940:	b946703a 	and	r3,r23,r5
 100d944:	10c4b03a 	or	r2,r2,r3
 100d948:	10000226 	beq	r2,zero,100d954 <__floatunsidf+0x11c>
 100d94c:	01c00044 	movi	r7,1
 100d950:	0011883a 	mov	r8,zero
 100d954:	d9000217 	ldw	r4,8(sp)
 100d958:	a1c4b03a 	or	r2,r20,r7
 100d95c:	aa06b03a 	or	r3,r21,r8
 100d960:	2249c83a 	sub	r4,r4,r9
 100d964:	d8c00415 	stw	r3,16(sp)
 100d968:	d9000215 	stw	r4,8(sp)
 100d96c:	d8800315 	stw	r2,12(sp)
 100d970:	003fbf06 	br	100d870 <__floatunsidf+0x38>
 100d974:	bdc7883a 	add	r3,r23,r23
 100d978:	008007c4 	movi	r2,31
 100d97c:	1285c83a 	sub	r2,r2,r10
 100d980:	1886983a 	sll	r3,r3,r2
 100d984:	b2a8d83a 	srl	r20,r22,r10
 100d988:	baaad83a 	srl	r21,r23,r10
 100d98c:	1d28b03a 	or	r20,r3,r20
 100d990:	003fdf06 	br	100d910 <__floatunsidf+0xd8>
 100d994:	b006d07a 	srli	r3,r22,1
 100d998:	008007c4 	movi	r2,31
 100d99c:	1245c83a 	sub	r2,r2,r9
 100d9a0:	1886d83a 	srl	r3,r3,r2
 100d9a4:	ba62983a 	sll	r17,r23,r9
 100d9a8:	b260983a 	sll	r16,r22,r9
 100d9ac:	1c62b03a 	or	r17,r3,r17
 100d9b0:	003fcc06 	br	100d8e4 <__floatunsidf+0xac>
 100d9b4:	2006d07a 	srli	r3,r4,1
 100d9b8:	008007c4 	movi	r2,31
 100d9bc:	1285c83a 	sub	r2,r2,r10
 100d9c0:	18a6d83a 	srl	r19,r3,r2
 100d9c4:	22a4983a 	sll	r18,r4,r10
 100d9c8:	003fd706 	br	100d928 <__floatunsidf+0xf0>

0100d9cc <udivmodsi4>:
 100d9cc:	29001b2e 	bgeu	r5,r4,100da3c <udivmodsi4+0x70>
 100d9d0:	28001a16 	blt	r5,zero,100da3c <udivmodsi4+0x70>
 100d9d4:	00800044 	movi	r2,1
 100d9d8:	0007883a 	mov	r3,zero
 100d9dc:	01c007c4 	movi	r7,31
 100d9e0:	00000306 	br	100d9f0 <udivmodsi4+0x24>
 100d9e4:	19c01326 	beq	r3,r7,100da34 <udivmodsi4+0x68>
 100d9e8:	18c00044 	addi	r3,r3,1
 100d9ec:	28000416 	blt	r5,zero,100da00 <udivmodsi4+0x34>
 100d9f0:	294b883a 	add	r5,r5,r5
 100d9f4:	1085883a 	add	r2,r2,r2
 100d9f8:	293ffa36 	bltu	r5,r4,100d9e4 <udivmodsi4+0x18>
 100d9fc:	10000d26 	beq	r2,zero,100da34 <udivmodsi4+0x68>
 100da00:	0007883a 	mov	r3,zero
 100da04:	21400236 	bltu	r4,r5,100da10 <udivmodsi4+0x44>
 100da08:	2149c83a 	sub	r4,r4,r5
 100da0c:	1886b03a 	or	r3,r3,r2
 100da10:	1004d07a 	srli	r2,r2,1
 100da14:	280ad07a 	srli	r5,r5,1
 100da18:	103ffa1e 	bne	r2,zero,100da04 <udivmodsi4+0x38>
 100da1c:	30000226 	beq	r6,zero,100da28 <udivmodsi4+0x5c>
 100da20:	2005883a 	mov	r2,r4
 100da24:	f800283a 	ret
 100da28:	1809883a 	mov	r4,r3
 100da2c:	2005883a 	mov	r2,r4
 100da30:	f800283a 	ret
 100da34:	0007883a 	mov	r3,zero
 100da38:	003ff806 	br	100da1c <udivmodsi4+0x50>
 100da3c:	00800044 	movi	r2,1
 100da40:	0007883a 	mov	r3,zero
 100da44:	003fef06 	br	100da04 <udivmodsi4+0x38>

0100da48 <__divsi3>:
 100da48:	defffe04 	addi	sp,sp,-8
 100da4c:	dc000015 	stw	r16,0(sp)
 100da50:	dfc00115 	stw	ra,4(sp)
 100da54:	0021883a 	mov	r16,zero
 100da58:	20000c16 	blt	r4,zero,100da8c <__divsi3+0x44>
 100da5c:	000d883a 	mov	r6,zero
 100da60:	28000e16 	blt	r5,zero,100da9c <__divsi3+0x54>
 100da64:	100d9cc0 	call	100d9cc <udivmodsi4>
 100da68:	1007883a 	mov	r3,r2
 100da6c:	8005003a 	cmpeq	r2,r16,zero
 100da70:	1000011e 	bne	r2,zero,100da78 <__divsi3+0x30>
 100da74:	00c7c83a 	sub	r3,zero,r3
 100da78:	1805883a 	mov	r2,r3
 100da7c:	dfc00117 	ldw	ra,4(sp)
 100da80:	dc000017 	ldw	r16,0(sp)
 100da84:	dec00204 	addi	sp,sp,8
 100da88:	f800283a 	ret
 100da8c:	0109c83a 	sub	r4,zero,r4
 100da90:	04000044 	movi	r16,1
 100da94:	000d883a 	mov	r6,zero
 100da98:	283ff20e 	bge	r5,zero,100da64 <__divsi3+0x1c>
 100da9c:	014bc83a 	sub	r5,zero,r5
 100daa0:	8021003a 	cmpeq	r16,r16,zero
 100daa4:	003fef06 	br	100da64 <__divsi3+0x1c>

0100daa8 <__modsi3>:
 100daa8:	deffff04 	addi	sp,sp,-4
 100daac:	dfc00015 	stw	ra,0(sp)
 100dab0:	01800044 	movi	r6,1
 100dab4:	2807883a 	mov	r3,r5
 100dab8:	20000416 	blt	r4,zero,100dacc <__modsi3+0x24>
 100dabc:	28000c16 	blt	r5,zero,100daf0 <__modsi3+0x48>
 100dac0:	dfc00017 	ldw	ra,0(sp)
 100dac4:	dec00104 	addi	sp,sp,4
 100dac8:	100d9cc1 	jmpi	100d9cc <udivmodsi4>
 100dacc:	0109c83a 	sub	r4,zero,r4
 100dad0:	28000b16 	blt	r5,zero,100db00 <__modsi3+0x58>
 100dad4:	180b883a 	mov	r5,r3
 100dad8:	01800044 	movi	r6,1
 100dadc:	100d9cc0 	call	100d9cc <udivmodsi4>
 100dae0:	0085c83a 	sub	r2,zero,r2
 100dae4:	dfc00017 	ldw	ra,0(sp)
 100dae8:	dec00104 	addi	sp,sp,4
 100daec:	f800283a 	ret
 100daf0:	014bc83a 	sub	r5,zero,r5
 100daf4:	dfc00017 	ldw	ra,0(sp)
 100daf8:	dec00104 	addi	sp,sp,4
 100dafc:	100d9cc1 	jmpi	100d9cc <udivmodsi4>
 100db00:	0147c83a 	sub	r3,zero,r5
 100db04:	003ff306 	br	100dad4 <__modsi3+0x2c>

0100db08 <__udivsi3>:
 100db08:	000d883a 	mov	r6,zero
 100db0c:	100d9cc1 	jmpi	100d9cc <udivmodsi4>

0100db10 <__umodsi3>:
 100db10:	01800044 	movi	r6,1
 100db14:	100d9cc1 	jmpi	100d9cc <udivmodsi4>

0100db18 <__muldi3>:
 100db18:	defff204 	addi	sp,sp,-56
 100db1c:	df000c15 	stw	fp,48(sp)
 100db20:	3038d43a 	srli	fp,r6,16
 100db24:	dd000815 	stw	r20,32(sp)
 100db28:	dc400515 	stw	r17,20(sp)
 100db2c:	2028d43a 	srli	r20,r4,16
 100db30:	247fffcc 	andi	r17,r4,65535
 100db34:	dc000415 	stw	r16,16(sp)
 100db38:	343fffcc 	andi	r16,r6,65535
 100db3c:	dcc00715 	stw	r19,28(sp)
 100db40:	d9000015 	stw	r4,0(sp)
 100db44:	2827883a 	mov	r19,r5
 100db48:	8809883a 	mov	r4,r17
 100db4c:	d9400115 	stw	r5,4(sp)
 100db50:	800b883a 	mov	r5,r16
 100db54:	d9800215 	stw	r6,8(sp)
 100db58:	dfc00d15 	stw	ra,52(sp)
 100db5c:	d9c00315 	stw	r7,12(sp)
 100db60:	dd800a15 	stw	r22,40(sp)
 100db64:	dd400915 	stw	r21,36(sp)
 100db68:	302d883a 	mov	r22,r6
 100db6c:	ddc00b15 	stw	r23,44(sp)
 100db70:	dc800615 	stw	r18,24(sp)
 100db74:	1002f380 	call	1002f38 <__mulsi3>
 100db78:	8809883a 	mov	r4,r17
 100db7c:	e00b883a 	mov	r5,fp
 100db80:	102b883a 	mov	r21,r2
 100db84:	1002f380 	call	1002f38 <__mulsi3>
 100db88:	800b883a 	mov	r5,r16
 100db8c:	a009883a 	mov	r4,r20
 100db90:	1023883a 	mov	r17,r2
 100db94:	1002f380 	call	1002f38 <__mulsi3>
 100db98:	a009883a 	mov	r4,r20
 100db9c:	e00b883a 	mov	r5,fp
 100dba0:	1021883a 	mov	r16,r2
 100dba4:	1002f380 	call	1002f38 <__mulsi3>
 100dba8:	a8ffffcc 	andi	r3,r21,65535
 100dbac:	a82ad43a 	srli	r21,r21,16
 100dbb0:	8c23883a 	add	r17,r17,r16
 100dbb4:	1011883a 	mov	r8,r2
 100dbb8:	ac6b883a 	add	r21,r21,r17
 100dbbc:	a804943a 	slli	r2,r21,16
 100dbc0:	b009883a 	mov	r4,r22
 100dbc4:	980b883a 	mov	r5,r19
 100dbc8:	10c7883a 	add	r3,r2,r3
 100dbcc:	a812d43a 	srli	r9,r21,16
 100dbd0:	180d883a 	mov	r6,r3
 100dbd4:	ac00022e 	bgeu	r21,r16,100dbe0 <__muldi3+0xc8>
 100dbd8:	00800074 	movhi	r2,1
 100dbdc:	4091883a 	add	r8,r8,r2
 100dbe0:	4267883a 	add	r19,r8,r9
 100dbe4:	302d883a 	mov	r22,r6
 100dbe8:	1002f380 	call	1002f38 <__mulsi3>
 100dbec:	d9400317 	ldw	r5,12(sp)
 100dbf0:	d9000017 	ldw	r4,0(sp)
 100dbf4:	1023883a 	mov	r17,r2
 100dbf8:	1002f380 	call	1002f38 <__mulsi3>
 100dbfc:	14cb883a 	add	r5,r2,r19
 100dc00:	894b883a 	add	r5,r17,r5
 100dc04:	b005883a 	mov	r2,r22
 100dc08:	2807883a 	mov	r3,r5
 100dc0c:	dfc00d17 	ldw	ra,52(sp)
 100dc10:	df000c17 	ldw	fp,48(sp)
 100dc14:	ddc00b17 	ldw	r23,44(sp)
 100dc18:	dd800a17 	ldw	r22,40(sp)
 100dc1c:	dd400917 	ldw	r21,36(sp)
 100dc20:	dd000817 	ldw	r20,32(sp)
 100dc24:	dcc00717 	ldw	r19,28(sp)
 100dc28:	dc800617 	ldw	r18,24(sp)
 100dc2c:	dc400517 	ldw	r17,20(sp)
 100dc30:	dc000417 	ldw	r16,16(sp)
 100dc34:	dec00e04 	addi	sp,sp,56
 100dc38:	f800283a 	ret

0100dc3c <__clzsi2>:
 100dc3c:	00bfffd4 	movui	r2,65535
 100dc40:	11000e36 	bltu	r2,r4,100dc7c <__clzsi2+0x40>
 100dc44:	00803fc4 	movi	r2,255
 100dc48:	01400204 	movi	r5,8
 100dc4c:	0007883a 	mov	r3,zero
 100dc50:	11001036 	bltu	r2,r4,100dc94 <__clzsi2+0x58>
 100dc54:	000b883a 	mov	r5,zero
 100dc58:	20c6d83a 	srl	r3,r4,r3
 100dc5c:	00804074 	movhi	r2,257
 100dc60:	10876a04 	addi	r2,r2,7592
 100dc64:	1887883a 	add	r3,r3,r2
 100dc68:	18800003 	ldbu	r2,0(r3)
 100dc6c:	00c00804 	movi	r3,32
 100dc70:	2885883a 	add	r2,r5,r2
 100dc74:	1885c83a 	sub	r2,r3,r2
 100dc78:	f800283a 	ret
 100dc7c:	01400404 	movi	r5,16
 100dc80:	00804034 	movhi	r2,256
 100dc84:	10bfffc4 	addi	r2,r2,-1
 100dc88:	2807883a 	mov	r3,r5
 100dc8c:	113ff22e 	bgeu	r2,r4,100dc58 <__clzsi2+0x1c>
 100dc90:	01400604 	movi	r5,24
 100dc94:	2807883a 	mov	r3,r5
 100dc98:	20c6d83a 	srl	r3,r4,r3
 100dc9c:	00804074 	movhi	r2,257
 100dca0:	10876a04 	addi	r2,r2,7592
 100dca4:	1887883a 	add	r3,r3,r2
 100dca8:	18800003 	ldbu	r2,0(r3)
 100dcac:	00c00804 	movi	r3,32
 100dcb0:	2885883a 	add	r2,r5,r2
 100dcb4:	1885c83a 	sub	r2,r3,r2
 100dcb8:	f800283a 	ret

0100dcbc <__pack_d>:
 100dcbc:	20c00017 	ldw	r3,0(r4)
 100dcc0:	defffd04 	addi	sp,sp,-12
 100dcc4:	dc000015 	stw	r16,0(sp)
 100dcc8:	dc800215 	stw	r18,8(sp)
 100dccc:	dc400115 	stw	r17,4(sp)
 100dcd0:	00800044 	movi	r2,1
 100dcd4:	22000317 	ldw	r8,12(r4)
 100dcd8:	001f883a 	mov	r15,zero
 100dcdc:	22400417 	ldw	r9,16(r4)
 100dce0:	24000117 	ldw	r16,4(r4)
 100dce4:	10c0552e 	bgeu	r2,r3,100de3c <__pack_d+0x180>
 100dce8:	00800104 	movi	r2,4
 100dcec:	18804f26 	beq	r3,r2,100de2c <__pack_d+0x170>
 100dcf0:	00800084 	movi	r2,2
 100dcf4:	18800226 	beq	r3,r2,100dd00 <__pack_d+0x44>
 100dcf8:	4244b03a 	or	r2,r8,r9
 100dcfc:	10001a1e 	bne	r2,zero,100dd68 <__pack_d+0xac>
 100dd00:	000d883a 	mov	r6,zero
 100dd04:	000f883a 	mov	r7,zero
 100dd08:	0011883a 	mov	r8,zero
 100dd0c:	00800434 	movhi	r2,16
 100dd10:	10bfffc4 	addi	r2,r2,-1
 100dd14:	301d883a 	mov	r14,r6
 100dd18:	3884703a 	and	r2,r7,r2
 100dd1c:	400a953a 	slli	r5,r8,20
 100dd20:	79bffc2c 	andhi	r6,r15,65520
 100dd24:	308cb03a 	or	r6,r6,r2
 100dd28:	00e00434 	movhi	r3,32784
 100dd2c:	18ffffc4 	addi	r3,r3,-1
 100dd30:	800497fa 	slli	r2,r16,31
 100dd34:	30c6703a 	and	r3,r6,r3
 100dd38:	1946b03a 	or	r3,r3,r5
 100dd3c:	01600034 	movhi	r5,32768
 100dd40:	297fffc4 	addi	r5,r5,-1
 100dd44:	194a703a 	and	r5,r3,r5
 100dd48:	288ab03a 	or	r5,r5,r2
 100dd4c:	2807883a 	mov	r3,r5
 100dd50:	7005883a 	mov	r2,r14
 100dd54:	dc800217 	ldw	r18,8(sp)
 100dd58:	dc400117 	ldw	r17,4(sp)
 100dd5c:	dc000017 	ldw	r16,0(sp)
 100dd60:	dec00304 	addi	sp,sp,12
 100dd64:	f800283a 	ret
 100dd68:	21000217 	ldw	r4,8(r4)
 100dd6c:	00bf0084 	movi	r2,-1022
 100dd70:	20803f16 	blt	r4,r2,100de70 <__pack_d+0x1b4>
 100dd74:	0080ffc4 	movi	r2,1023
 100dd78:	11002c16 	blt	r2,r4,100de2c <__pack_d+0x170>
 100dd7c:	00803fc4 	movi	r2,255
 100dd80:	408c703a 	and	r6,r8,r2
 100dd84:	00802004 	movi	r2,128
 100dd88:	0007883a 	mov	r3,zero
 100dd8c:	000f883a 	mov	r7,zero
 100dd90:	2280ffc4 	addi	r10,r4,1023
 100dd94:	30801e26 	beq	r6,r2,100de10 <__pack_d+0x154>
 100dd98:	00801fc4 	movi	r2,127
 100dd9c:	4089883a 	add	r4,r8,r2
 100dda0:	220d803a 	cmpltu	r6,r4,r8
 100dda4:	324d883a 	add	r6,r6,r9
 100dda8:	2011883a 	mov	r8,r4
 100ddac:	3013883a 	mov	r9,r6
 100ddb0:	00880034 	movhi	r2,8192
 100ddb4:	10bfffc4 	addi	r2,r2,-1
 100ddb8:	12400d36 	bltu	r2,r9,100ddf0 <__pack_d+0x134>
 100ddbc:	4804963a 	slli	r2,r9,24
 100ddc0:	400cd23a 	srli	r6,r8,8
 100ddc4:	480ed23a 	srli	r7,r9,8
 100ddc8:	013fffc4 	movi	r4,-1
 100ddcc:	118cb03a 	or	r6,r2,r6
 100ddd0:	01400434 	movhi	r5,16
 100ddd4:	297fffc4 	addi	r5,r5,-1
 100ddd8:	3104703a 	and	r2,r6,r4
 100dddc:	3946703a 	and	r3,r7,r5
 100dde0:	5201ffcc 	andi	r8,r10,2047
 100dde4:	100d883a 	mov	r6,r2
 100dde8:	180f883a 	mov	r7,r3
 100ddec:	003fc706 	br	100dd0c <__pack_d+0x50>
 100ddf0:	480897fa 	slli	r4,r9,31
 100ddf4:	4004d07a 	srli	r2,r8,1
 100ddf8:	4806d07a 	srli	r3,r9,1
 100ddfc:	52800044 	addi	r10,r10,1
 100de00:	2084b03a 	or	r2,r4,r2
 100de04:	1011883a 	mov	r8,r2
 100de08:	1813883a 	mov	r9,r3
 100de0c:	003feb06 	br	100ddbc <__pack_d+0x100>
 100de10:	383fe11e 	bne	r7,zero,100dd98 <__pack_d+0xdc>
 100de14:	01004004 	movi	r4,256
 100de18:	4104703a 	and	r2,r8,r4
 100de1c:	10c4b03a 	or	r2,r2,r3
 100de20:	103fe326 	beq	r2,zero,100ddb0 <__pack_d+0xf4>
 100de24:	3005883a 	mov	r2,r6
 100de28:	003fdc06 	br	100dd9c <__pack_d+0xe0>
 100de2c:	000d883a 	mov	r6,zero
 100de30:	000f883a 	mov	r7,zero
 100de34:	0201ffc4 	movi	r8,2047
 100de38:	003fb406 	br	100dd0c <__pack_d+0x50>
 100de3c:	0005883a 	mov	r2,zero
 100de40:	00c00234 	movhi	r3,8
 100de44:	408cb03a 	or	r6,r8,r2
 100de48:	48ceb03a 	or	r7,r9,r3
 100de4c:	013fffc4 	movi	r4,-1
 100de50:	01400434 	movhi	r5,16
 100de54:	297fffc4 	addi	r5,r5,-1
 100de58:	3104703a 	and	r2,r6,r4
 100de5c:	3946703a 	and	r3,r7,r5
 100de60:	100d883a 	mov	r6,r2
 100de64:	180f883a 	mov	r7,r3
 100de68:	0201ffc4 	movi	r8,2047
 100de6c:	003fa706 	br	100dd0c <__pack_d+0x50>
 100de70:	1109c83a 	sub	r4,r2,r4
 100de74:	00800e04 	movi	r2,56
 100de78:	11004316 	blt	r2,r4,100df88 <__pack_d+0x2cc>
 100de7c:	21fff804 	addi	r7,r4,-32
 100de80:	38004516 	blt	r7,zero,100df98 <__pack_d+0x2dc>
 100de84:	49d8d83a 	srl	r12,r9,r7
 100de88:	001b883a 	mov	r13,zero
 100de8c:	0023883a 	mov	r17,zero
 100de90:	01400044 	movi	r5,1
 100de94:	0025883a 	mov	r18,zero
 100de98:	38004716 	blt	r7,zero,100dfb8 <__pack_d+0x2fc>
 100de9c:	29d6983a 	sll	r11,r5,r7
 100dea0:	0015883a 	mov	r10,zero
 100dea4:	00bfffc4 	movi	r2,-1
 100dea8:	5089883a 	add	r4,r10,r2
 100deac:	588b883a 	add	r5,r11,r2
 100deb0:	228d803a 	cmpltu	r6,r4,r10
 100deb4:	314b883a 	add	r5,r6,r5
 100deb8:	4104703a 	and	r2,r8,r4
 100debc:	4946703a 	and	r3,r9,r5
 100dec0:	10c4b03a 	or	r2,r2,r3
 100dec4:	10000226 	beq	r2,zero,100ded0 <__pack_d+0x214>
 100dec8:	04400044 	movi	r17,1
 100decc:	0025883a 	mov	r18,zero
 100ded0:	00803fc4 	movi	r2,255
 100ded4:	644eb03a 	or	r7,r12,r17
 100ded8:	3892703a 	and	r9,r7,r2
 100dedc:	00802004 	movi	r2,128
 100dee0:	6c90b03a 	or	r8,r13,r18
 100dee4:	0015883a 	mov	r10,zero
 100dee8:	48801626 	beq	r9,r2,100df44 <__pack_d+0x288>
 100deec:	01001fc4 	movi	r4,127
 100def0:	3905883a 	add	r2,r7,r4
 100def4:	11cd803a 	cmpltu	r6,r2,r7
 100def8:	320d883a 	add	r6,r6,r8
 100defc:	100f883a 	mov	r7,r2
 100df00:	00840034 	movhi	r2,4096
 100df04:	10bfffc4 	addi	r2,r2,-1
 100df08:	3011883a 	mov	r8,r6
 100df0c:	0007883a 	mov	r3,zero
 100df10:	11801b36 	bltu	r2,r6,100df80 <__pack_d+0x2c4>
 100df14:	4004963a 	slli	r2,r8,24
 100df18:	3808d23a 	srli	r4,r7,8
 100df1c:	400ad23a 	srli	r5,r8,8
 100df20:	1813883a 	mov	r9,r3
 100df24:	1108b03a 	or	r4,r2,r4
 100df28:	00bfffc4 	movi	r2,-1
 100df2c:	00c00434 	movhi	r3,16
 100df30:	18ffffc4 	addi	r3,r3,-1
 100df34:	208c703a 	and	r6,r4,r2
 100df38:	28ce703a 	and	r7,r5,r3
 100df3c:	4a01ffcc 	andi	r8,r9,2047
 100df40:	003f7206 	br	100dd0c <__pack_d+0x50>
 100df44:	503fe91e 	bne	r10,zero,100deec <__pack_d+0x230>
 100df48:	01004004 	movi	r4,256
 100df4c:	3904703a 	and	r2,r7,r4
 100df50:	0007883a 	mov	r3,zero
 100df54:	10c4b03a 	or	r2,r2,r3
 100df58:	10000626 	beq	r2,zero,100df74 <__pack_d+0x2b8>
 100df5c:	3a45883a 	add	r2,r7,r9
 100df60:	11cd803a 	cmpltu	r6,r2,r7
 100df64:	320d883a 	add	r6,r6,r8
 100df68:	100f883a 	mov	r7,r2
 100df6c:	3011883a 	mov	r8,r6
 100df70:	0007883a 	mov	r3,zero
 100df74:	00840034 	movhi	r2,4096
 100df78:	10bfffc4 	addi	r2,r2,-1
 100df7c:	123fe52e 	bgeu	r2,r8,100df14 <__pack_d+0x258>
 100df80:	00c00044 	movi	r3,1
 100df84:	003fe306 	br	100df14 <__pack_d+0x258>
 100df88:	0009883a 	mov	r4,zero
 100df8c:	0013883a 	mov	r9,zero
 100df90:	000b883a 	mov	r5,zero
 100df94:	003fe406 	br	100df28 <__pack_d+0x26c>
 100df98:	4a47883a 	add	r3,r9,r9
 100df9c:	008007c4 	movi	r2,31
 100dfa0:	1105c83a 	sub	r2,r2,r4
 100dfa4:	1886983a 	sll	r3,r3,r2
 100dfa8:	4118d83a 	srl	r12,r8,r4
 100dfac:	491ad83a 	srl	r13,r9,r4
 100dfb0:	1b18b03a 	or	r12,r3,r12
 100dfb4:	003fb506 	br	100de8c <__pack_d+0x1d0>
 100dfb8:	2806d07a 	srli	r3,r5,1
 100dfbc:	008007c4 	movi	r2,31
 100dfc0:	1105c83a 	sub	r2,r2,r4
 100dfc4:	1896d83a 	srl	r11,r3,r2
 100dfc8:	2914983a 	sll	r10,r5,r4
 100dfcc:	003fb506 	br	100dea4 <__pack_d+0x1e8>

0100dfd0 <__unpack_d>:
 100dfd0:	20c00117 	ldw	r3,4(r4)
 100dfd4:	22400017 	ldw	r9,0(r4)
 100dfd8:	00800434 	movhi	r2,16
 100dfdc:	10bfffc4 	addi	r2,r2,-1
 100dfe0:	1808d53a 	srli	r4,r3,20
 100dfe4:	180cd7fa 	srli	r6,r3,31
 100dfe8:	1894703a 	and	r10,r3,r2
 100dfec:	2201ffcc 	andi	r8,r4,2047
 100dff0:	281b883a 	mov	r13,r5
 100dff4:	4817883a 	mov	r11,r9
 100dff8:	29800115 	stw	r6,4(r5)
 100dffc:	5019883a 	mov	r12,r10
 100e000:	40001e1e 	bne	r8,zero,100e07c <__unpack_d+0xac>
 100e004:	4a84b03a 	or	r2,r9,r10
 100e008:	10001926 	beq	r2,zero,100e070 <__unpack_d+0xa0>
 100e00c:	4804d63a 	srli	r2,r9,24
 100e010:	500c923a 	slli	r6,r10,8
 100e014:	013f0084 	movi	r4,-1022
 100e018:	00c40034 	movhi	r3,4096
 100e01c:	18ffffc4 	addi	r3,r3,-1
 100e020:	118cb03a 	or	r6,r2,r6
 100e024:	008000c4 	movi	r2,3
 100e028:	480a923a 	slli	r5,r9,8
 100e02c:	68800015 	stw	r2,0(r13)
 100e030:	69000215 	stw	r4,8(r13)
 100e034:	19800b36 	bltu	r3,r6,100e064 <__unpack_d+0x94>
 100e038:	200f883a 	mov	r7,r4
 100e03c:	1811883a 	mov	r8,r3
 100e040:	2945883a 	add	r2,r5,r5
 100e044:	1149803a 	cmpltu	r4,r2,r5
 100e048:	3187883a 	add	r3,r6,r6
 100e04c:	20c9883a 	add	r4,r4,r3
 100e050:	100b883a 	mov	r5,r2
 100e054:	200d883a 	mov	r6,r4
 100e058:	39ffffc4 	addi	r7,r7,-1
 100e05c:	413ff82e 	bgeu	r8,r4,100e040 <__unpack_d+0x70>
 100e060:	69c00215 	stw	r7,8(r13)
 100e064:	69800415 	stw	r6,16(r13)
 100e068:	69400315 	stw	r5,12(r13)
 100e06c:	f800283a 	ret
 100e070:	00800084 	movi	r2,2
 100e074:	28800015 	stw	r2,0(r5)
 100e078:	f800283a 	ret
 100e07c:	0081ffc4 	movi	r2,2047
 100e080:	40800f26 	beq	r8,r2,100e0c0 <__unpack_d+0xf0>
 100e084:	480cd63a 	srli	r6,r9,24
 100e088:	5006923a 	slli	r3,r10,8
 100e08c:	4804923a 	slli	r2,r9,8
 100e090:	0009883a 	mov	r4,zero
 100e094:	30c6b03a 	or	r3,r6,r3
 100e098:	01440034 	movhi	r5,4096
 100e09c:	110cb03a 	or	r6,r2,r4
 100e0a0:	423f0044 	addi	r8,r8,-1023
 100e0a4:	194eb03a 	or	r7,r3,r5
 100e0a8:	008000c4 	movi	r2,3
 100e0ac:	69c00415 	stw	r7,16(r13)
 100e0b0:	6a000215 	stw	r8,8(r13)
 100e0b4:	68800015 	stw	r2,0(r13)
 100e0b8:	69800315 	stw	r6,12(r13)
 100e0bc:	f800283a 	ret
 100e0c0:	4a84b03a 	or	r2,r9,r10
 100e0c4:	1000031e 	bne	r2,zero,100e0d4 <__unpack_d+0x104>
 100e0c8:	00800104 	movi	r2,4
 100e0cc:	28800015 	stw	r2,0(r5)
 100e0d0:	f800283a 	ret
 100e0d4:	0009883a 	mov	r4,zero
 100e0d8:	01400234 	movhi	r5,8
 100e0dc:	4904703a 	and	r2,r9,r4
 100e0e0:	5146703a 	and	r3,r10,r5
 100e0e4:	10c4b03a 	or	r2,r2,r3
 100e0e8:	10000526 	beq	r2,zero,100e100 <__unpack_d+0x130>
 100e0ec:	00800044 	movi	r2,1
 100e0f0:	68800015 	stw	r2,0(r13)
 100e0f4:	6b000415 	stw	r12,16(r13)
 100e0f8:	6ac00315 	stw	r11,12(r13)
 100e0fc:	f800283a 	ret
 100e100:	68000015 	stw	zero,0(r13)
 100e104:	003ffb06 	br	100e0f4 <__unpack_d+0x124>

0100e108 <__fpcmp_parts_d>:
 100e108:	21800017 	ldw	r6,0(r4)
 100e10c:	00c00044 	movi	r3,1
 100e110:	19800a2e 	bgeu	r3,r6,100e13c <__fpcmp_parts_d+0x34>
 100e114:	28800017 	ldw	r2,0(r5)
 100e118:	1880082e 	bgeu	r3,r2,100e13c <__fpcmp_parts_d+0x34>
 100e11c:	00c00104 	movi	r3,4
 100e120:	30c02626 	beq	r6,r3,100e1bc <__fpcmp_parts_d+0xb4>
 100e124:	10c02226 	beq	r2,r3,100e1b0 <__fpcmp_parts_d+0xa8>
 100e128:	00c00084 	movi	r3,2
 100e12c:	30c00526 	beq	r6,r3,100e144 <__fpcmp_parts_d+0x3c>
 100e130:	10c0071e 	bne	r2,r3,100e150 <__fpcmp_parts_d+0x48>
 100e134:	20800117 	ldw	r2,4(r4)
 100e138:	1000091e 	bne	r2,zero,100e160 <__fpcmp_parts_d+0x58>
 100e13c:	00800044 	movi	r2,1
 100e140:	f800283a 	ret
 100e144:	10c01a1e 	bne	r2,r3,100e1b0 <__fpcmp_parts_d+0xa8>
 100e148:	0005883a 	mov	r2,zero
 100e14c:	f800283a 	ret
 100e150:	22000117 	ldw	r8,4(r4)
 100e154:	28800117 	ldw	r2,4(r5)
 100e158:	40800326 	beq	r8,r2,100e168 <__fpcmp_parts_d+0x60>
 100e15c:	403ff726 	beq	r8,zero,100e13c <__fpcmp_parts_d+0x34>
 100e160:	00bfffc4 	movi	r2,-1
 100e164:	f800283a 	ret
 100e168:	20c00217 	ldw	r3,8(r4)
 100e16c:	28800217 	ldw	r2,8(r5)
 100e170:	10fffa16 	blt	r2,r3,100e15c <__fpcmp_parts_d+0x54>
 100e174:	18800916 	blt	r3,r2,100e19c <__fpcmp_parts_d+0x94>
 100e178:	21c00417 	ldw	r7,16(r4)
 100e17c:	28c00417 	ldw	r3,16(r5)
 100e180:	21800317 	ldw	r6,12(r4)
 100e184:	28800317 	ldw	r2,12(r5)
 100e188:	19fff436 	bltu	r3,r7,100e15c <__fpcmp_parts_d+0x54>
 100e18c:	38c00526 	beq	r7,r3,100e1a4 <__fpcmp_parts_d+0x9c>
 100e190:	38c00236 	bltu	r7,r3,100e19c <__fpcmp_parts_d+0x94>
 100e194:	19ffec1e 	bne	r3,r7,100e148 <__fpcmp_parts_d+0x40>
 100e198:	30bfeb2e 	bgeu	r6,r2,100e148 <__fpcmp_parts_d+0x40>
 100e19c:	403fe71e 	bne	r8,zero,100e13c <__fpcmp_parts_d+0x34>
 100e1a0:	003fef06 	br	100e160 <__fpcmp_parts_d+0x58>
 100e1a4:	11bffa2e 	bgeu	r2,r6,100e190 <__fpcmp_parts_d+0x88>
 100e1a8:	403fe426 	beq	r8,zero,100e13c <__fpcmp_parts_d+0x34>
 100e1ac:	003fec06 	br	100e160 <__fpcmp_parts_d+0x58>
 100e1b0:	28800117 	ldw	r2,4(r5)
 100e1b4:	103fe11e 	bne	r2,zero,100e13c <__fpcmp_parts_d+0x34>
 100e1b8:	003fe906 	br	100e160 <__fpcmp_parts_d+0x58>
 100e1bc:	11bfdd1e 	bne	r2,r6,100e134 <__fpcmp_parts_d+0x2c>
 100e1c0:	28c00117 	ldw	r3,4(r5)
 100e1c4:	20800117 	ldw	r2,4(r4)
 100e1c8:	1885c83a 	sub	r2,r3,r2
 100e1cc:	f800283a 	ret

0100e1d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100e1d0:	defff804 	addi	sp,sp,-32
 100e1d4:	dfc00715 	stw	ra,28(sp)
 100e1d8:	df000615 	stw	fp,24(sp)
 100e1dc:	df000604 	addi	fp,sp,24
 100e1e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100e1e4:	e0bffc17 	ldw	r2,-16(fp)
 100e1e8:	1004803a 	cmplt	r2,r2,zero
 100e1ec:	1000091e 	bne	r2,zero,100e214 <close+0x44>
 100e1f0:	e13ffc17 	ldw	r4,-16(fp)
 100e1f4:	01400304 	movi	r5,12
 100e1f8:	1002f380 	call	1002f38 <__mulsi3>
 100e1fc:	1007883a 	mov	r3,r2
 100e200:	00804074 	movhi	r2,257
 100e204:	1089cf04 	addi	r2,r2,10044
 100e208:	1887883a 	add	r3,r3,r2
 100e20c:	e0ffff15 	stw	r3,-4(fp)
 100e210:	00000106 	br	100e218 <close+0x48>
 100e214:	e03fff15 	stw	zero,-4(fp)
 100e218:	e0bfff17 	ldw	r2,-4(fp)
 100e21c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100e220:	e0bffb17 	ldw	r2,-20(fp)
 100e224:	1005003a 	cmpeq	r2,r2,zero
 100e228:	10001d1e 	bne	r2,zero,100e2a0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100e22c:	e0bffb17 	ldw	r2,-20(fp)
 100e230:	10800017 	ldw	r2,0(r2)
 100e234:	10800417 	ldw	r2,16(r2)
 100e238:	1005003a 	cmpeq	r2,r2,zero
 100e23c:	1000071e 	bne	r2,zero,100e25c <close+0x8c>
 100e240:	e0bffb17 	ldw	r2,-20(fp)
 100e244:	10800017 	ldw	r2,0(r2)
 100e248:	10800417 	ldw	r2,16(r2)
 100e24c:	e13ffb17 	ldw	r4,-20(fp)
 100e250:	103ee83a 	callr	r2
 100e254:	e0bffe15 	stw	r2,-8(fp)
 100e258:	00000106 	br	100e260 <close+0x90>
 100e25c:	e03ffe15 	stw	zero,-8(fp)
 100e260:	e0bffe17 	ldw	r2,-8(fp)
 100e264:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100e268:	e13ffc17 	ldw	r4,-16(fp)
 100e26c:	100ef380 	call	100ef38 <alt_release_fd>
    if (rval < 0)
 100e270:	e0bffa17 	ldw	r2,-24(fp)
 100e274:	1004403a 	cmpge	r2,r2,zero
 100e278:	1000071e 	bne	r2,zero,100e298 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100e27c:	100e2d00 	call	100e2d0 <alt_get_errno>
 100e280:	e0fffa17 	ldw	r3,-24(fp)
 100e284:	00c7c83a 	sub	r3,zero,r3
 100e288:	10c00015 	stw	r3,0(r2)
      return -1;
 100e28c:	00bfffc4 	movi	r2,-1
 100e290:	e0bffd15 	stw	r2,-12(fp)
 100e294:	00000806 	br	100e2b8 <close+0xe8>
    }
    return 0;
 100e298:	e03ffd15 	stw	zero,-12(fp)
 100e29c:	00000606 	br	100e2b8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e2a0:	100e2d00 	call	100e2d0 <alt_get_errno>
 100e2a4:	1007883a 	mov	r3,r2
 100e2a8:	00801444 	movi	r2,81
 100e2ac:	18800015 	stw	r2,0(r3)
    return -1;
 100e2b0:	00bfffc4 	movi	r2,-1
 100e2b4:	e0bffd15 	stw	r2,-12(fp)
 100e2b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100e2bc:	e037883a 	mov	sp,fp
 100e2c0:	dfc00117 	ldw	ra,4(sp)
 100e2c4:	df000017 	ldw	fp,0(sp)
 100e2c8:	dec00204 	addi	sp,sp,8
 100e2cc:	f800283a 	ret

0100e2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e2d0:	defffd04 	addi	sp,sp,-12
 100e2d4:	dfc00215 	stw	ra,8(sp)
 100e2d8:	df000115 	stw	fp,4(sp)
 100e2dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e2e0:	00804074 	movhi	r2,257
 100e2e4:	108e8a04 	addi	r2,r2,14888
 100e2e8:	10800017 	ldw	r2,0(r2)
 100e2ec:	1005003a 	cmpeq	r2,r2,zero
 100e2f0:	1000061e 	bne	r2,zero,100e30c <alt_get_errno+0x3c>
 100e2f4:	00804074 	movhi	r2,257
 100e2f8:	108e8a04 	addi	r2,r2,14888
 100e2fc:	10800017 	ldw	r2,0(r2)
 100e300:	103ee83a 	callr	r2
 100e304:	e0bfff15 	stw	r2,-4(fp)
 100e308:	00000306 	br	100e318 <alt_get_errno+0x48>
 100e30c:	00804074 	movhi	r2,257
 100e310:	10956804 	addi	r2,r2,21920
 100e314:	e0bfff15 	stw	r2,-4(fp)
 100e318:	e0bfff17 	ldw	r2,-4(fp)
}
 100e31c:	e037883a 	mov	sp,fp
 100e320:	dfc00117 	ldw	ra,4(sp)
 100e324:	df000017 	ldw	fp,0(sp)
 100e328:	dec00204 	addi	sp,sp,8
 100e32c:	f800283a 	ret

0100e330 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100e330:	defffc04 	addi	sp,sp,-16
 100e334:	df000315 	stw	fp,12(sp)
 100e338:	df000304 	addi	fp,sp,12
 100e33c:	e13ffd15 	stw	r4,-12(fp)
 100e340:	e17ffe15 	stw	r5,-8(fp)
 100e344:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100e348:	e0bfff17 	ldw	r2,-4(fp)
}
 100e34c:	e037883a 	mov	sp,fp
 100e350:	df000017 	ldw	fp,0(sp)
 100e354:	dec00104 	addi	sp,sp,4
 100e358:	f800283a 	ret

0100e35c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100e35c:	defffd04 	addi	sp,sp,-12
 100e360:	df000215 	stw	fp,8(sp)
 100e364:	df000204 	addi	fp,sp,8
 100e368:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100e36c:	e0bfff17 	ldw	r2,-4(fp)
 100e370:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100e374:	e0bffe17 	ldw	r2,-8(fp)
 100e378:	1005003a 	cmpeq	r2,r2,zero
 100e37c:	1000021e 	bne	r2,zero,100e388 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100e380:	002af070 	cmpltui	zero,zero,43969
 100e384:	00000106 	br	100e38c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100e388:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100e38c:	e037883a 	mov	sp,fp
 100e390:	df000017 	ldw	fp,0(sp)
 100e394:	dec00104 	addi	sp,sp,4
 100e398:	f800283a 	ret

0100e39c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100e39c:	defffd04 	addi	sp,sp,-12
 100e3a0:	dfc00215 	stw	ra,8(sp)
 100e3a4:	df000115 	stw	fp,4(sp)
 100e3a8:	df000104 	addi	fp,sp,4
 100e3ac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100e3b0:	e13fff17 	ldw	r4,-4(fp)
 100e3b4:	100e35c0 	call	100e35c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  printf("Exited main process\n");
 100e3b8:	01004074 	movhi	r4,257
 100e3bc:	2107ad04 	addi	r4,r4,7860
 100e3c0:	10054180 	call	1005418 <puts>
  while (1);
 100e3c4:	003fff06 	br	100e3c4 <_exit+0x28>

0100e3c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100e3c8:	defff904 	addi	sp,sp,-28
 100e3cc:	dfc00615 	stw	ra,24(sp)
 100e3d0:	df000515 	stw	fp,20(sp)
 100e3d4:	df000504 	addi	fp,sp,20
 100e3d8:	e13ffc15 	stw	r4,-16(fp)
 100e3dc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e3e0:	e0bffc17 	ldw	r2,-16(fp)
 100e3e4:	1004803a 	cmplt	r2,r2,zero
 100e3e8:	1000091e 	bne	r2,zero,100e410 <fstat+0x48>
 100e3ec:	e13ffc17 	ldw	r4,-16(fp)
 100e3f0:	01400304 	movi	r5,12
 100e3f4:	1002f380 	call	1002f38 <__mulsi3>
 100e3f8:	1007883a 	mov	r3,r2
 100e3fc:	00804074 	movhi	r2,257
 100e400:	1089cf04 	addi	r2,r2,10044
 100e404:	1887883a 	add	r3,r3,r2
 100e408:	e0ffff15 	stw	r3,-4(fp)
 100e40c:	00000106 	br	100e414 <fstat+0x4c>
 100e410:	e03fff15 	stw	zero,-4(fp)
 100e414:	e0bfff17 	ldw	r2,-4(fp)
 100e418:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100e41c:	e0bffb17 	ldw	r2,-20(fp)
 100e420:	1005003a 	cmpeq	r2,r2,zero
 100e424:	1000121e 	bne	r2,zero,100e470 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100e428:	e0bffb17 	ldw	r2,-20(fp)
 100e42c:	10800017 	ldw	r2,0(r2)
 100e430:	10800817 	ldw	r2,32(r2)
 100e434:	1005003a 	cmpeq	r2,r2,zero
 100e438:	1000081e 	bne	r2,zero,100e45c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100e43c:	e0bffb17 	ldw	r2,-20(fp)
 100e440:	10800017 	ldw	r2,0(r2)
 100e444:	10800817 	ldw	r2,32(r2)
 100e448:	e13ffb17 	ldw	r4,-20(fp)
 100e44c:	e17ffd17 	ldw	r5,-12(fp)
 100e450:	103ee83a 	callr	r2
 100e454:	e0bffe15 	stw	r2,-8(fp)
 100e458:	00000b06 	br	100e488 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100e45c:	e0fffd17 	ldw	r3,-12(fp)
 100e460:	00880004 	movi	r2,8192
 100e464:	18800115 	stw	r2,4(r3)
      return 0;
 100e468:	e03ffe15 	stw	zero,-8(fp)
 100e46c:	00000606 	br	100e488 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e470:	100e4a00 	call	100e4a0 <alt_get_errno>
 100e474:	1007883a 	mov	r3,r2
 100e478:	00801444 	movi	r2,81
 100e47c:	18800015 	stw	r2,0(r3)
    return -1;
 100e480:	00bfffc4 	movi	r2,-1
 100e484:	e0bffe15 	stw	r2,-8(fp)
 100e488:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100e48c:	e037883a 	mov	sp,fp
 100e490:	dfc00117 	ldw	ra,4(sp)
 100e494:	df000017 	ldw	fp,0(sp)
 100e498:	dec00204 	addi	sp,sp,8
 100e49c:	f800283a 	ret

0100e4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e4a0:	defffd04 	addi	sp,sp,-12
 100e4a4:	dfc00215 	stw	ra,8(sp)
 100e4a8:	df000115 	stw	fp,4(sp)
 100e4ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e4b0:	00804074 	movhi	r2,257
 100e4b4:	108e8a04 	addi	r2,r2,14888
 100e4b8:	10800017 	ldw	r2,0(r2)
 100e4bc:	1005003a 	cmpeq	r2,r2,zero
 100e4c0:	1000061e 	bne	r2,zero,100e4dc <alt_get_errno+0x3c>
 100e4c4:	00804074 	movhi	r2,257
 100e4c8:	108e8a04 	addi	r2,r2,14888
 100e4cc:	10800017 	ldw	r2,0(r2)
 100e4d0:	103ee83a 	callr	r2
 100e4d4:	e0bfff15 	stw	r2,-4(fp)
 100e4d8:	00000306 	br	100e4e8 <alt_get_errno+0x48>
 100e4dc:	00804074 	movhi	r2,257
 100e4e0:	10956804 	addi	r2,r2,21920
 100e4e4:	e0bfff15 	stw	r2,-4(fp)
 100e4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 100e4ec:	e037883a 	mov	sp,fp
 100e4f0:	dfc00117 	ldw	ra,4(sp)
 100e4f4:	df000017 	ldw	fp,0(sp)
 100e4f8:	dec00204 	addi	sp,sp,8
 100e4fc:	f800283a 	ret

0100e500 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 100e500:	deffff04 	addi	sp,sp,-4
 100e504:	df000015 	stw	fp,0(sp)
 100e508:	d839883a 	mov	fp,sp
  return 0;
 100e50c:	0005883a 	mov	r2,zero
}
 100e510:	e037883a 	mov	sp,fp
 100e514:	df000017 	ldw	fp,0(sp)
 100e518:	dec00104 	addi	sp,sp,4
 100e51c:	f800283a 	ret

0100e520 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100e520:	deffeb04 	addi	sp,sp,-84
 100e524:	dfc01415 	stw	ra,80(sp)
 100e528:	df001315 	stw	fp,76(sp)
 100e52c:	df001304 	addi	fp,sp,76
 100e530:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e534:	e0bffd17 	ldw	r2,-12(fp)
 100e538:	1004803a 	cmplt	r2,r2,zero
 100e53c:	1000091e 	bne	r2,zero,100e564 <isatty+0x44>
 100e540:	e13ffd17 	ldw	r4,-12(fp)
 100e544:	01400304 	movi	r5,12
 100e548:	1002f380 	call	1002f38 <__mulsi3>
 100e54c:	1007883a 	mov	r3,r2
 100e550:	00804074 	movhi	r2,257
 100e554:	1089cf04 	addi	r2,r2,10044
 100e558:	1887883a 	add	r3,r3,r2
 100e55c:	e0ffff15 	stw	r3,-4(fp)
 100e560:	00000106 	br	100e568 <isatty+0x48>
 100e564:	e03fff15 	stw	zero,-4(fp)
 100e568:	e0bfff17 	ldw	r2,-4(fp)
 100e56c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100e570:	e0bfed17 	ldw	r2,-76(fp)
 100e574:	1005003a 	cmpeq	r2,r2,zero
 100e578:	10000f1e 	bne	r2,zero,100e5b8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100e57c:	e0bfed17 	ldw	r2,-76(fp)
 100e580:	10800017 	ldw	r2,0(r2)
 100e584:	10800817 	ldw	r2,32(r2)
 100e588:	1004c03a 	cmpne	r2,r2,zero
 100e58c:	1000031e 	bne	r2,zero,100e59c <isatty+0x7c>
    {
      return 1;
 100e590:	00800044 	movi	r2,1
 100e594:	e0bffe15 	stw	r2,-8(fp)
 100e598:	00000c06 	br	100e5cc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100e59c:	e17fee04 	addi	r5,fp,-72
 100e5a0:	e13ffd17 	ldw	r4,-12(fp)
 100e5a4:	100e3c80 	call	100e3c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100e5a8:	e0bfef17 	ldw	r2,-68(fp)
 100e5ac:	10880020 	cmpeqi	r2,r2,8192
 100e5b0:	e0bffe15 	stw	r2,-8(fp)
 100e5b4:	00000506 	br	100e5cc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e5b8:	100e5e40 	call	100e5e4 <alt_get_errno>
 100e5bc:	1007883a 	mov	r3,r2
 100e5c0:	00801444 	movi	r2,81
 100e5c4:	18800015 	stw	r2,0(r3)
    return 0;
 100e5c8:	e03ffe15 	stw	zero,-8(fp)
 100e5cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100e5d0:	e037883a 	mov	sp,fp
 100e5d4:	dfc00117 	ldw	ra,4(sp)
 100e5d8:	df000017 	ldw	fp,0(sp)
 100e5dc:	dec00204 	addi	sp,sp,8
 100e5e0:	f800283a 	ret

0100e5e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e5e4:	defffd04 	addi	sp,sp,-12
 100e5e8:	dfc00215 	stw	ra,8(sp)
 100e5ec:	df000115 	stw	fp,4(sp)
 100e5f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e5f4:	00804074 	movhi	r2,257
 100e5f8:	108e8a04 	addi	r2,r2,14888
 100e5fc:	10800017 	ldw	r2,0(r2)
 100e600:	1005003a 	cmpeq	r2,r2,zero
 100e604:	1000061e 	bne	r2,zero,100e620 <alt_get_errno+0x3c>
 100e608:	00804074 	movhi	r2,257
 100e60c:	108e8a04 	addi	r2,r2,14888
 100e610:	10800017 	ldw	r2,0(r2)
 100e614:	103ee83a 	callr	r2
 100e618:	e0bfff15 	stw	r2,-4(fp)
 100e61c:	00000306 	br	100e62c <alt_get_errno+0x48>
 100e620:	00804074 	movhi	r2,257
 100e624:	10956804 	addi	r2,r2,21920
 100e628:	e0bfff15 	stw	r2,-4(fp)
 100e62c:	e0bfff17 	ldw	r2,-4(fp)
}
 100e630:	e037883a 	mov	sp,fp
 100e634:	dfc00117 	ldw	ra,4(sp)
 100e638:	df000017 	ldw	fp,0(sp)
 100e63c:	dec00204 	addi	sp,sp,8
 100e640:	f800283a 	ret

0100e644 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 100e644:	defffa04 	addi	sp,sp,-24
 100e648:	dfc00515 	stw	ra,20(sp)
 100e64c:	df000415 	stw	fp,16(sp)
 100e650:	df000404 	addi	fp,sp,16
 100e654:	e13ffd15 	stw	r4,-12(fp)
 100e658:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 100e65c:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 100e660:	e0bffd17 	ldw	r2,-12(fp)
 100e664:	10800048 	cmpgei	r2,r2,1
 100e668:	1000301e 	bne	r2,zero,100e72c <kill+0xe8>
  {
    switch (sig)
 100e66c:	e0bffe17 	ldw	r2,-8(fp)
 100e670:	10800828 	cmpgeui	r2,r2,32
 100e674:	10002a1e 	bne	r2,zero,100e720 <kill+0xdc>
 100e678:	e0bffe17 	ldw	r2,-8(fp)
 100e67c:	1085883a 	add	r2,r2,r2
 100e680:	1087883a 	add	r3,r2,r2
 100e684:	00804074 	movhi	r2,257
 100e688:	10b9a604 	addi	r2,r2,-6504
 100e68c:	1885883a 	add	r2,r3,r2
 100e690:	10800017 	ldw	r2,0(r2)
 100e694:	1000683a 	jmp	r2
 100e698:	0100e740 	call	100e74 <__alt_mem_onchip_memory2_0+0x100e74>
 100e69c:	0100e720 	cmpeqi	r4,zero,924
 100e6a0:	0100e720 	cmpeqi	r4,zero,924
 100e6a4:	0100e718 	cmpnei	r4,zero,924
 100e6a8:	0100e718 	cmpnei	r4,zero,924
 100e6ac:	0100e718 	cmpnei	r4,zero,924
 100e6b0:	0100e718 	cmpnei	r4,zero,924
 100e6b4:	0100e720 	cmpeqi	r4,zero,924
 100e6b8:	0100e718 	cmpnei	r4,zero,924
 100e6bc:	0100e718 	cmpnei	r4,zero,924
 100e6c0:	0100e718 	cmpnei	r4,zero,924
 100e6c4:	0100e718 	cmpnei	r4,zero,924
 100e6c8:	0100e718 	cmpnei	r4,zero,924
 100e6cc:	0100e718 	cmpnei	r4,zero,924
 100e6d0:	0100e718 	cmpnei	r4,zero,924
 100e6d4:	0100e718 	cmpnei	r4,zero,924
 100e6d8:	0100e740 	call	100e74 <__alt_mem_onchip_memory2_0+0x100e74>
 100e6dc:	0100e720 	cmpeqi	r4,zero,924
 100e6e0:	0100e720 	cmpeqi	r4,zero,924
 100e6e4:	0100e720 	cmpeqi	r4,zero,924
 100e6e8:	0100e740 	call	100e74 <__alt_mem_onchip_memory2_0+0x100e74>
 100e6ec:	0100e720 	cmpeqi	r4,zero,924
 100e6f0:	0100e720 	cmpeqi	r4,zero,924
 100e6f4:	0100e718 	cmpnei	r4,zero,924
 100e6f8:	0100e718 	cmpnei	r4,zero,924
 100e6fc:	0100e718 	cmpnei	r4,zero,924
 100e700:	0100e718 	cmpnei	r4,zero,924
 100e704:	0100e718 	cmpnei	r4,zero,924
 100e708:	0100e720 	cmpeqi	r4,zero,924
 100e70c:	0100e720 	cmpeqi	r4,zero,924
 100e710:	0100e718 	cmpnei	r4,zero,924
 100e714:	0100e718 	cmpnei	r4,zero,924
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 100e718:	0009883a 	mov	r4,zero
 100e71c:	100e39c0 	call	100e39c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 100e720:	00800584 	movi	r2,22
 100e724:	e0bffc15 	stw	r2,-16(fp)
 100e728:	00000506 	br	100e740 <kill+0xfc>
    }
  }

  else if (pid > 0)
 100e72c:	e0bffd17 	ldw	r2,-12(fp)
 100e730:	10800050 	cmplti	r2,r2,1
 100e734:	1000021e 	bne	r2,zero,100e740 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 100e738:	008000c4 	movi	r2,3
 100e73c:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 100e740:	e0bffc17 	ldw	r2,-16(fp)
 100e744:	1005003a 	cmpeq	r2,r2,zero
 100e748:	1000071e 	bne	r2,zero,100e768 <kill+0x124>
  {
    ALT_ERRNO = status;
 100e74c:	100e7840 	call	100e784 <alt_get_errno>
 100e750:	1007883a 	mov	r3,r2
 100e754:	e0bffc17 	ldw	r2,-16(fp)
 100e758:	18800015 	stw	r2,0(r3)
    return -1;
 100e75c:	00bfffc4 	movi	r2,-1
 100e760:	e0bfff15 	stw	r2,-4(fp)
 100e764:	00000106 	br	100e76c <kill+0x128>
  }

  return 0;
 100e768:	e03fff15 	stw	zero,-4(fp)
 100e76c:	e0bfff17 	ldw	r2,-4(fp)
}
 100e770:	e037883a 	mov	sp,fp
 100e774:	dfc00117 	ldw	ra,4(sp)
 100e778:	df000017 	ldw	fp,0(sp)
 100e77c:	dec00204 	addi	sp,sp,8
 100e780:	f800283a 	ret

0100e784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e784:	defffd04 	addi	sp,sp,-12
 100e788:	dfc00215 	stw	ra,8(sp)
 100e78c:	df000115 	stw	fp,4(sp)
 100e790:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e794:	00804074 	movhi	r2,257
 100e798:	108e8a04 	addi	r2,r2,14888
 100e79c:	10800017 	ldw	r2,0(r2)
 100e7a0:	1005003a 	cmpeq	r2,r2,zero
 100e7a4:	1000061e 	bne	r2,zero,100e7c0 <alt_get_errno+0x3c>
 100e7a8:	00804074 	movhi	r2,257
 100e7ac:	108e8a04 	addi	r2,r2,14888
 100e7b0:	10800017 	ldw	r2,0(r2)
 100e7b4:	103ee83a 	callr	r2
 100e7b8:	e0bfff15 	stw	r2,-4(fp)
 100e7bc:	00000306 	br	100e7cc <alt_get_errno+0x48>
 100e7c0:	00804074 	movhi	r2,257
 100e7c4:	10956804 	addi	r2,r2,21920
 100e7c8:	e0bfff15 	stw	r2,-4(fp)
 100e7cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100e7d0:	e037883a 	mov	sp,fp
 100e7d4:	dfc00117 	ldw	ra,4(sp)
 100e7d8:	df000017 	ldw	fp,0(sp)
 100e7dc:	dec00204 	addi	sp,sp,8
 100e7e0:	f800283a 	ret

0100e7e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100e7e4:	defffe04 	addi	sp,sp,-8
 100e7e8:	dfc00115 	stw	ra,4(sp)
 100e7ec:	df000015 	stw	fp,0(sp)
 100e7f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100e7f4:	01004074 	movhi	r4,257
 100e7f8:	210e8f04 	addi	r4,r4,14908
 100e7fc:	01404074 	movhi	r5,257
 100e800:	2947c004 	addi	r5,r5,7936
 100e804:	01804074 	movhi	r6,257
 100e808:	318e8f04 	addi	r6,r6,14908
 100e80c:	100e8640 	call	100e864 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100e810:	01004034 	movhi	r4,256
 100e814:	21000804 	addi	r4,r4,32
 100e818:	01404034 	movhi	r5,256
 100e81c:	29400804 	addi	r5,r5,32
 100e820:	01804034 	movhi	r6,256
 100e824:	31806d04 	addi	r6,r6,436
 100e828:	100e8640 	call	100e864 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100e82c:	01004074 	movhi	r4,257
 100e830:	2105d804 	addi	r4,r4,5984
 100e834:	01404074 	movhi	r5,257
 100e838:	2945d804 	addi	r5,r5,5984
 100e83c:	01804074 	movhi	r6,257
 100e840:	3187c004 	addi	r6,r6,7936
 100e844:	100e8640 	call	100e864 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100e848:	10108b40 	call	10108b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100e84c:	1010d300 	call	1010d30 <alt_icache_flush_all>
}
 100e850:	e037883a 	mov	sp,fp
 100e854:	dfc00117 	ldw	ra,4(sp)
 100e858:	df000017 	ldw	fp,0(sp)
 100e85c:	dec00204 	addi	sp,sp,8
 100e860:	f800283a 	ret

0100e864 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100e864:	defffc04 	addi	sp,sp,-16
 100e868:	df000315 	stw	fp,12(sp)
 100e86c:	df000304 	addi	fp,sp,12
 100e870:	e13ffd15 	stw	r4,-12(fp)
 100e874:	e17ffe15 	stw	r5,-8(fp)
 100e878:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100e87c:	e0fffe17 	ldw	r3,-8(fp)
 100e880:	e0bffd17 	ldw	r2,-12(fp)
 100e884:	18800e26 	beq	r3,r2,100e8c0 <alt_load_section+0x5c>
  {
    while( to != end )
 100e888:	00000a06 	br	100e8b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100e88c:	e0bffd17 	ldw	r2,-12(fp)
 100e890:	10c00017 	ldw	r3,0(r2)
 100e894:	e0bffe17 	ldw	r2,-8(fp)
 100e898:	10c00015 	stw	r3,0(r2)
 100e89c:	e0bffe17 	ldw	r2,-8(fp)
 100e8a0:	10800104 	addi	r2,r2,4
 100e8a4:	e0bffe15 	stw	r2,-8(fp)
 100e8a8:	e0bffd17 	ldw	r2,-12(fp)
 100e8ac:	10800104 	addi	r2,r2,4
 100e8b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100e8b4:	e0fffe17 	ldw	r3,-8(fp)
 100e8b8:	e0bfff17 	ldw	r2,-4(fp)
 100e8bc:	18bff31e 	bne	r3,r2,100e88c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100e8c0:	e037883a 	mov	sp,fp
 100e8c4:	df000017 	ldw	fp,0(sp)
 100e8c8:	dec00104 	addi	sp,sp,4
 100e8cc:	f800283a 	ret

0100e8d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100e8d0:	defff804 	addi	sp,sp,-32
 100e8d4:	dfc00715 	stw	ra,28(sp)
 100e8d8:	df000615 	stw	fp,24(sp)
 100e8dc:	df000604 	addi	fp,sp,24
 100e8e0:	e13ffc15 	stw	r4,-16(fp)
 100e8e4:	e17ffd15 	stw	r5,-12(fp)
 100e8e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100e8ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e8f0:	e0bffc17 	ldw	r2,-16(fp)
 100e8f4:	1004803a 	cmplt	r2,r2,zero
 100e8f8:	1000091e 	bne	r2,zero,100e920 <lseek+0x50>
 100e8fc:	e13ffc17 	ldw	r4,-16(fp)
 100e900:	01400304 	movi	r5,12
 100e904:	1002f380 	call	1002f38 <__mulsi3>
 100e908:	1007883a 	mov	r3,r2
 100e90c:	00804074 	movhi	r2,257
 100e910:	1089cf04 	addi	r2,r2,10044
 100e914:	1887883a 	add	r3,r3,r2
 100e918:	e0ffff15 	stw	r3,-4(fp)
 100e91c:	00000106 	br	100e924 <lseek+0x54>
 100e920:	e03fff15 	stw	zero,-4(fp)
 100e924:	e0bfff17 	ldw	r2,-4(fp)
 100e928:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100e92c:	e0bffb17 	ldw	r2,-20(fp)
 100e930:	1005003a 	cmpeq	r2,r2,zero
 100e934:	1000111e 	bne	r2,zero,100e97c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100e938:	e0bffb17 	ldw	r2,-20(fp)
 100e93c:	10800017 	ldw	r2,0(r2)
 100e940:	10800717 	ldw	r2,28(r2)
 100e944:	1005003a 	cmpeq	r2,r2,zero
 100e948:	1000091e 	bne	r2,zero,100e970 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100e94c:	e0bffb17 	ldw	r2,-20(fp)
 100e950:	10800017 	ldw	r2,0(r2)
 100e954:	10800717 	ldw	r2,28(r2)
 100e958:	e13ffb17 	ldw	r4,-20(fp)
 100e95c:	e17ffd17 	ldw	r5,-12(fp)
 100e960:	e1bffe17 	ldw	r6,-8(fp)
 100e964:	103ee83a 	callr	r2
 100e968:	e0bffa15 	stw	r2,-24(fp)
 100e96c:	00000506 	br	100e984 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100e970:	00bfde84 	movi	r2,-134
 100e974:	e0bffa15 	stw	r2,-24(fp)
 100e978:	00000206 	br	100e984 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100e97c:	00bfebc4 	movi	r2,-81
 100e980:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100e984:	e0bffa17 	ldw	r2,-24(fp)
 100e988:	1004403a 	cmpge	r2,r2,zero
 100e98c:	1000071e 	bne	r2,zero,100e9ac <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100e990:	100e9c40 	call	100e9c4 <alt_get_errno>
 100e994:	1007883a 	mov	r3,r2
 100e998:	e0bffa17 	ldw	r2,-24(fp)
 100e99c:	0085c83a 	sub	r2,zero,r2
 100e9a0:	18800015 	stw	r2,0(r3)
    rc = -1;
 100e9a4:	00bfffc4 	movi	r2,-1
 100e9a8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100e9ac:	e0bffa17 	ldw	r2,-24(fp)
}
 100e9b0:	e037883a 	mov	sp,fp
 100e9b4:	dfc00117 	ldw	ra,4(sp)
 100e9b8:	df000017 	ldw	fp,0(sp)
 100e9bc:	dec00204 	addi	sp,sp,8
 100e9c0:	f800283a 	ret

0100e9c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e9c4:	defffd04 	addi	sp,sp,-12
 100e9c8:	dfc00215 	stw	ra,8(sp)
 100e9cc:	df000115 	stw	fp,4(sp)
 100e9d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e9d4:	00804074 	movhi	r2,257
 100e9d8:	108e8a04 	addi	r2,r2,14888
 100e9dc:	10800017 	ldw	r2,0(r2)
 100e9e0:	1005003a 	cmpeq	r2,r2,zero
 100e9e4:	1000061e 	bne	r2,zero,100ea00 <alt_get_errno+0x3c>
 100e9e8:	00804074 	movhi	r2,257
 100e9ec:	108e8a04 	addi	r2,r2,14888
 100e9f0:	10800017 	ldw	r2,0(r2)
 100e9f4:	103ee83a 	callr	r2
 100e9f8:	e0bfff15 	stw	r2,-4(fp)
 100e9fc:	00000306 	br	100ea0c <alt_get_errno+0x48>
 100ea00:	00804074 	movhi	r2,257
 100ea04:	10956804 	addi	r2,r2,21920
 100ea08:	e0bfff15 	stw	r2,-4(fp)
 100ea0c:	e0bfff17 	ldw	r2,-4(fp)
}
 100ea10:	e037883a 	mov	sp,fp
 100ea14:	dfc00117 	ldw	ra,4(sp)
 100ea18:	df000017 	ldw	fp,0(sp)
 100ea1c:	dec00204 	addi	sp,sp,8
 100ea20:	f800283a 	ret

0100ea24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100ea24:	defffd04 	addi	sp,sp,-12
 100ea28:	dfc00215 	stw	ra,8(sp)
 100ea2c:	df000115 	stw	fp,4(sp)
 100ea30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100ea34:	0009883a 	mov	r4,zero
 100ea38:	100f1f00 	call	100f1f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ea3c:	100f2240 	call	100f224 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ea40:	01004074 	movhi	r4,257
 100ea44:	2107b204 	addi	r4,r4,7880
 100ea48:	01404074 	movhi	r5,257
 100ea4c:	2947b204 	addi	r5,r5,7880
 100ea50:	01804074 	movhi	r6,257
 100ea54:	3187b204 	addi	r6,r6,7880
 100ea58:	10110f00 	call	10110f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ea5c:	10109e40 	call	10109e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ea60:	01004074 	movhi	r4,257
 100ea64:	21029204 	addi	r4,r4,2632
 100ea68:	101132c0 	call	101132c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ea6c:	d126f717 	ldw	r4,-25636(gp)
 100ea70:	d166f817 	ldw	r5,-25632(gp)
 100ea74:	d1a6f917 	ldw	r6,-25628(gp)
 100ea78:	10015f80 	call	10015f8 <main>
 100ea7c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ea80:	01000044 	movi	r4,1
 100ea84:	100e1d00 	call	100e1d0 <close>
  exit (result);
 100ea88:	e13fff17 	ldw	r4,-4(fp)
 100ea8c:	10113400 	call	1011340 <exit>

0100ea90 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100ea90:	defffe04 	addi	sp,sp,-8
 100ea94:	df000115 	stw	fp,4(sp)
 100ea98:	df000104 	addi	fp,sp,4
 100ea9c:	e13fff15 	stw	r4,-4(fp)
}
 100eaa0:	e037883a 	mov	sp,fp
 100eaa4:	df000017 	ldw	fp,0(sp)
 100eaa8:	dec00104 	addi	sp,sp,4
 100eaac:	f800283a 	ret

0100eab0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100eab0:	defffe04 	addi	sp,sp,-8
 100eab4:	df000115 	stw	fp,4(sp)
 100eab8:	df000104 	addi	fp,sp,4
 100eabc:	e13fff15 	stw	r4,-4(fp)
}
 100eac0:	e037883a 	mov	sp,fp
 100eac4:	df000017 	ldw	fp,0(sp)
 100eac8:	dec00104 	addi	sp,sp,4
 100eacc:	f800283a 	ret

0100ead0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100ead0:	defffa04 	addi	sp,sp,-24
 100ead4:	dfc00515 	stw	ra,20(sp)
 100ead8:	df000415 	stw	fp,16(sp)
 100eadc:	dc000315 	stw	r16,12(sp)
 100eae0:	df000304 	addi	fp,sp,12
 100eae4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100eae8:	e0bffe17 	ldw	r2,-8(fp)
 100eaec:	10800217 	ldw	r2,8(r2)
 100eaf0:	10d00034 	orhi	r3,r2,16384
 100eaf4:	e0bffe17 	ldw	r2,-8(fp)
 100eaf8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100eafc:	e03ffd15 	stw	zero,-12(fp)
 100eb00:	00002306 	br	100eb90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100eb04:	e13ffd17 	ldw	r4,-12(fp)
 100eb08:	04004074 	movhi	r16,257
 100eb0c:	8409cf04 	addi	r16,r16,10044
 100eb10:	01400304 	movi	r5,12
 100eb14:	1002f380 	call	1002f38 <__mulsi3>
 100eb18:	1405883a 	add	r2,r2,r16
 100eb1c:	10c00017 	ldw	r3,0(r2)
 100eb20:	e0bffe17 	ldw	r2,-8(fp)
 100eb24:	10800017 	ldw	r2,0(r2)
 100eb28:	1880161e 	bne	r3,r2,100eb84 <alt_file_locked+0xb4>
 100eb2c:	e13ffd17 	ldw	r4,-12(fp)
 100eb30:	04004074 	movhi	r16,257
 100eb34:	8409cf04 	addi	r16,r16,10044
 100eb38:	01400304 	movi	r5,12
 100eb3c:	1002f380 	call	1002f38 <__mulsi3>
 100eb40:	1405883a 	add	r2,r2,r16
 100eb44:	10800204 	addi	r2,r2,8
 100eb48:	10800017 	ldw	r2,0(r2)
 100eb4c:	1004403a 	cmpge	r2,r2,zero
 100eb50:	10000c1e 	bne	r2,zero,100eb84 <alt_file_locked+0xb4>
 100eb54:	e13ffd17 	ldw	r4,-12(fp)
 100eb58:	01400304 	movi	r5,12
 100eb5c:	1002f380 	call	1002f38 <__mulsi3>
 100eb60:	1007883a 	mov	r3,r2
 100eb64:	00804074 	movhi	r2,257
 100eb68:	1089cf04 	addi	r2,r2,10044
 100eb6c:	1887883a 	add	r3,r3,r2
 100eb70:	e0bffe17 	ldw	r2,-8(fp)
 100eb74:	18800326 	beq	r3,r2,100eb84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100eb78:	00bffcc4 	movi	r2,-13
 100eb7c:	e0bfff15 	stw	r2,-4(fp)
 100eb80:	00000a06 	br	100ebac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100eb84:	e0bffd17 	ldw	r2,-12(fp)
 100eb88:	10800044 	addi	r2,r2,1
 100eb8c:	e0bffd15 	stw	r2,-12(fp)
 100eb90:	00804074 	movhi	r2,257
 100eb94:	108e8904 	addi	r2,r2,14884
 100eb98:	10800017 	ldw	r2,0(r2)
 100eb9c:	1007883a 	mov	r3,r2
 100eba0:	e0bffd17 	ldw	r2,-12(fp)
 100eba4:	18bfd72e 	bgeu	r3,r2,100eb04 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100eba8:	e03fff15 	stw	zero,-4(fp)
 100ebac:	e0bfff17 	ldw	r2,-4(fp)
}
 100ebb0:	e037883a 	mov	sp,fp
 100ebb4:	dfc00217 	ldw	ra,8(sp)
 100ebb8:	df000117 	ldw	fp,4(sp)
 100ebbc:	dc000017 	ldw	r16,0(sp)
 100ebc0:	dec00304 	addi	sp,sp,12
 100ebc4:	f800283a 	ret

0100ebc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100ebc8:	defff404 	addi	sp,sp,-48
 100ebcc:	dfc00b15 	stw	ra,44(sp)
 100ebd0:	df000a15 	stw	fp,40(sp)
 100ebd4:	df000a04 	addi	fp,sp,40
 100ebd8:	e13ffb15 	stw	r4,-20(fp)
 100ebdc:	e17ffc15 	stw	r5,-16(fp)
 100ebe0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100ebe4:	00bfffc4 	movi	r2,-1
 100ebe8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100ebec:	00bffb44 	movi	r2,-19
 100ebf0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100ebf4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100ebf8:	e13ffb17 	ldw	r4,-20(fp)
 100ebfc:	01404074 	movhi	r5,257
 100ec00:	294e8704 	addi	r5,r5,14876
 100ec04:	1010aac0 	call	1010aac <alt_find_dev>
 100ec08:	e0bffa15 	stw	r2,-24(fp)
 100ec0c:	e0bffa17 	ldw	r2,-24(fp)
 100ec10:	1004c03a 	cmpne	r2,r2,zero
 100ec14:	1000051e 	bne	r2,zero,100ec2c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100ec18:	e13ffb17 	ldw	r4,-20(fp)
 100ec1c:	1010b400 	call	1010b40 <alt_find_file>
 100ec20:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100ec24:	00800044 	movi	r2,1
 100ec28:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100ec2c:	e0bffa17 	ldw	r2,-24(fp)
 100ec30:	1005003a 	cmpeq	r2,r2,zero
 100ec34:	1000311e 	bne	r2,zero,100ecfc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100ec38:	e13ffa17 	ldw	r4,-24(fp)
 100ec3c:	1010c600 	call	1010c60 <alt_get_fd>
 100ec40:	e0bff815 	stw	r2,-32(fp)
 100ec44:	e0bff817 	ldw	r2,-32(fp)
 100ec48:	1004403a 	cmpge	r2,r2,zero
 100ec4c:	1000031e 	bne	r2,zero,100ec5c <open+0x94>
    {
      status = index;
 100ec50:	e0bff817 	ldw	r2,-32(fp)
 100ec54:	e0bff715 	stw	r2,-36(fp)
 100ec58:	00002a06 	br	100ed04 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 100ec5c:	e13ff817 	ldw	r4,-32(fp)
 100ec60:	01400304 	movi	r5,12
 100ec64:	1002f380 	call	1002f38 <__mulsi3>
 100ec68:	1007883a 	mov	r3,r2
 100ec6c:	00804074 	movhi	r2,257
 100ec70:	1089cf04 	addi	r2,r2,10044
 100ec74:	1885883a 	add	r2,r3,r2
 100ec78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100ec7c:	e0fffc17 	ldw	r3,-16(fp)
 100ec80:	00900034 	movhi	r2,16384
 100ec84:	10bfffc4 	addi	r2,r2,-1
 100ec88:	1886703a 	and	r3,r3,r2
 100ec8c:	e0bff917 	ldw	r2,-28(fp)
 100ec90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100ec94:	e0bff617 	ldw	r2,-40(fp)
 100ec98:	1004c03a 	cmpne	r2,r2,zero
 100ec9c:	1000061e 	bne	r2,zero,100ecb8 <open+0xf0>
 100eca0:	e13ff917 	ldw	r4,-28(fp)
 100eca4:	100ead00 	call	100ead0 <alt_file_locked>
 100eca8:	e0bff715 	stw	r2,-36(fp)
 100ecac:	e0bff717 	ldw	r2,-36(fp)
 100ecb0:	1004803a 	cmplt	r2,r2,zero
 100ecb4:	1000131e 	bne	r2,zero,100ed04 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100ecb8:	e0bffa17 	ldw	r2,-24(fp)
 100ecbc:	10800317 	ldw	r2,12(r2)
 100ecc0:	1005003a 	cmpeq	r2,r2,zero
 100ecc4:	1000091e 	bne	r2,zero,100ecec <open+0x124>
 100ecc8:	e0bffa17 	ldw	r2,-24(fp)
 100eccc:	10800317 	ldw	r2,12(r2)
 100ecd0:	e13ff917 	ldw	r4,-28(fp)
 100ecd4:	e17ffb17 	ldw	r5,-20(fp)
 100ecd8:	e1bffc17 	ldw	r6,-16(fp)
 100ecdc:	e1fffd17 	ldw	r7,-12(fp)
 100ece0:	103ee83a 	callr	r2
 100ece4:	e0bfff15 	stw	r2,-4(fp)
 100ece8:	00000106 	br	100ecf0 <open+0x128>
 100ecec:	e03fff15 	stw	zero,-4(fp)
 100ecf0:	e0bfff17 	ldw	r2,-4(fp)
 100ecf4:	e0bff715 	stw	r2,-36(fp)
 100ecf8:	00000206 	br	100ed04 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100ecfc:	00bffb44 	movi	r2,-19
 100ed00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100ed04:	e0bff717 	ldw	r2,-36(fp)
 100ed08:	1004403a 	cmpge	r2,r2,zero
 100ed0c:	1000091e 	bne	r2,zero,100ed34 <open+0x16c>
  {
    alt_release_fd (index);  
 100ed10:	e13ff817 	ldw	r4,-32(fp)
 100ed14:	100ef380 	call	100ef38 <alt_release_fd>
    ALT_ERRNO = -status;
 100ed18:	100ed540 	call	100ed54 <alt_get_errno>
 100ed1c:	e0fff717 	ldw	r3,-36(fp)
 100ed20:	00c7c83a 	sub	r3,zero,r3
 100ed24:	10c00015 	stw	r3,0(r2)
    return -1;
 100ed28:	00bfffc4 	movi	r2,-1
 100ed2c:	e0bffe15 	stw	r2,-8(fp)
 100ed30:	00000206 	br	100ed3c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 100ed34:	e0bff817 	ldw	r2,-32(fp)
 100ed38:	e0bffe15 	stw	r2,-8(fp)
 100ed3c:	e0bffe17 	ldw	r2,-8(fp)
}
 100ed40:	e037883a 	mov	sp,fp
 100ed44:	dfc00117 	ldw	ra,4(sp)
 100ed48:	df000017 	ldw	fp,0(sp)
 100ed4c:	dec00204 	addi	sp,sp,8
 100ed50:	f800283a 	ret

0100ed54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ed54:	defffd04 	addi	sp,sp,-12
 100ed58:	dfc00215 	stw	ra,8(sp)
 100ed5c:	df000115 	stw	fp,4(sp)
 100ed60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ed64:	00804074 	movhi	r2,257
 100ed68:	108e8a04 	addi	r2,r2,14888
 100ed6c:	10800017 	ldw	r2,0(r2)
 100ed70:	1005003a 	cmpeq	r2,r2,zero
 100ed74:	1000061e 	bne	r2,zero,100ed90 <alt_get_errno+0x3c>
 100ed78:	00804074 	movhi	r2,257
 100ed7c:	108e8a04 	addi	r2,r2,14888
 100ed80:	10800017 	ldw	r2,0(r2)
 100ed84:	103ee83a 	callr	r2
 100ed88:	e0bfff15 	stw	r2,-4(fp)
 100ed8c:	00000306 	br	100ed9c <alt_get_errno+0x48>
 100ed90:	00804074 	movhi	r2,257
 100ed94:	10956804 	addi	r2,r2,21920
 100ed98:	e0bfff15 	stw	r2,-4(fp)
 100ed9c:	e0bfff17 	ldw	r2,-4(fp)
}
 100eda0:	e037883a 	mov	sp,fp
 100eda4:	dfc00117 	ldw	ra,4(sp)
 100eda8:	df000017 	ldw	fp,0(sp)
 100edac:	dec00204 	addi	sp,sp,8
 100edb0:	f800283a 	ret

0100edb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100edb4:	defff704 	addi	sp,sp,-36
 100edb8:	dfc00815 	stw	ra,32(sp)
 100edbc:	df000715 	stw	fp,28(sp)
 100edc0:	df000704 	addi	fp,sp,28
 100edc4:	e13ffb15 	stw	r4,-20(fp)
 100edc8:	e17ffc15 	stw	r5,-16(fp)
 100edcc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100edd0:	e0bffb17 	ldw	r2,-20(fp)
 100edd4:	1004803a 	cmplt	r2,r2,zero
 100edd8:	1000091e 	bne	r2,zero,100ee00 <read+0x4c>
 100eddc:	e13ffb17 	ldw	r4,-20(fp)
 100ede0:	01400304 	movi	r5,12
 100ede4:	1002f380 	call	1002f38 <__mulsi3>
 100ede8:	1007883a 	mov	r3,r2
 100edec:	00804074 	movhi	r2,257
 100edf0:	1089cf04 	addi	r2,r2,10044
 100edf4:	1887883a 	add	r3,r3,r2
 100edf8:	e0ffff15 	stw	r3,-4(fp)
 100edfc:	00000106 	br	100ee04 <read+0x50>
 100ee00:	e03fff15 	stw	zero,-4(fp)
 100ee04:	e0bfff17 	ldw	r2,-4(fp)
 100ee08:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100ee0c:	e0bffa17 	ldw	r2,-24(fp)
 100ee10:	1005003a 	cmpeq	r2,r2,zero
 100ee14:	1000241e 	bne	r2,zero,100eea8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100ee18:	e0bffa17 	ldw	r2,-24(fp)
 100ee1c:	10800217 	ldw	r2,8(r2)
 100ee20:	108000cc 	andi	r2,r2,3
 100ee24:	10800060 	cmpeqi	r2,r2,1
 100ee28:	10001a1e 	bne	r2,zero,100ee94 <read+0xe0>
 100ee2c:	e0bffa17 	ldw	r2,-24(fp)
 100ee30:	10800017 	ldw	r2,0(r2)
 100ee34:	10800517 	ldw	r2,20(r2)
 100ee38:	1005003a 	cmpeq	r2,r2,zero
 100ee3c:	1000151e 	bne	r2,zero,100ee94 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100ee40:	e0bffa17 	ldw	r2,-24(fp)
 100ee44:	10800017 	ldw	r2,0(r2)
 100ee48:	10800517 	ldw	r2,20(r2)
 100ee4c:	e17ffc17 	ldw	r5,-16(fp)
 100ee50:	e1bffd17 	ldw	r6,-12(fp)
 100ee54:	e13ffa17 	ldw	r4,-24(fp)
 100ee58:	103ee83a 	callr	r2
 100ee5c:	e0bff915 	stw	r2,-28(fp)
 100ee60:	e0bff917 	ldw	r2,-28(fp)
 100ee64:	1004403a 	cmpge	r2,r2,zero
 100ee68:	1000071e 	bne	r2,zero,100ee88 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100ee6c:	100eed80 	call	100eed8 <alt_get_errno>
 100ee70:	e0fff917 	ldw	r3,-28(fp)
 100ee74:	00c7c83a 	sub	r3,zero,r3
 100ee78:	10c00015 	stw	r3,0(r2)
          return -1;
 100ee7c:	00bfffc4 	movi	r2,-1
 100ee80:	e0bffe15 	stw	r2,-8(fp)
 100ee84:	00000e06 	br	100eec0 <read+0x10c>
        }
        return rval;
 100ee88:	e0bff917 	ldw	r2,-28(fp)
 100ee8c:	e0bffe15 	stw	r2,-8(fp)
 100ee90:	00000b06 	br	100eec0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100ee94:	100eed80 	call	100eed8 <alt_get_errno>
 100ee98:	1007883a 	mov	r3,r2
 100ee9c:	00800344 	movi	r2,13
 100eea0:	18800015 	stw	r2,0(r3)
 100eea4:	00000406 	br	100eeb8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100eea8:	100eed80 	call	100eed8 <alt_get_errno>
 100eeac:	1007883a 	mov	r3,r2
 100eeb0:	00801444 	movi	r2,81
 100eeb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100eeb8:	00bfffc4 	movi	r2,-1
 100eebc:	e0bffe15 	stw	r2,-8(fp)
 100eec0:	e0bffe17 	ldw	r2,-8(fp)
}
 100eec4:	e037883a 	mov	sp,fp
 100eec8:	dfc00117 	ldw	ra,4(sp)
 100eecc:	df000017 	ldw	fp,0(sp)
 100eed0:	dec00204 	addi	sp,sp,8
 100eed4:	f800283a 	ret

0100eed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100eed8:	defffd04 	addi	sp,sp,-12
 100eedc:	dfc00215 	stw	ra,8(sp)
 100eee0:	df000115 	stw	fp,4(sp)
 100eee4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100eee8:	00804074 	movhi	r2,257
 100eeec:	108e8a04 	addi	r2,r2,14888
 100eef0:	10800017 	ldw	r2,0(r2)
 100eef4:	1005003a 	cmpeq	r2,r2,zero
 100eef8:	1000061e 	bne	r2,zero,100ef14 <alt_get_errno+0x3c>
 100eefc:	00804074 	movhi	r2,257
 100ef00:	108e8a04 	addi	r2,r2,14888
 100ef04:	10800017 	ldw	r2,0(r2)
 100ef08:	103ee83a 	callr	r2
 100ef0c:	e0bfff15 	stw	r2,-4(fp)
 100ef10:	00000306 	br	100ef20 <alt_get_errno+0x48>
 100ef14:	00804074 	movhi	r2,257
 100ef18:	10956804 	addi	r2,r2,21920
 100ef1c:	e0bfff15 	stw	r2,-4(fp)
 100ef20:	e0bfff17 	ldw	r2,-4(fp)
}
 100ef24:	e037883a 	mov	sp,fp
 100ef28:	dfc00117 	ldw	ra,4(sp)
 100ef2c:	df000017 	ldw	fp,0(sp)
 100ef30:	dec00204 	addi	sp,sp,8
 100ef34:	f800283a 	ret

0100ef38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100ef38:	defffc04 	addi	sp,sp,-16
 100ef3c:	dfc00315 	stw	ra,12(sp)
 100ef40:	df000215 	stw	fp,8(sp)
 100ef44:	dc000115 	stw	r16,4(sp)
 100ef48:	df000104 	addi	fp,sp,4
 100ef4c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100ef50:	e0bfff17 	ldw	r2,-4(fp)
 100ef54:	108000d0 	cmplti	r2,r2,3
 100ef58:	10000f1e 	bne	r2,zero,100ef98 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100ef5c:	e13fff17 	ldw	r4,-4(fp)
 100ef60:	04004074 	movhi	r16,257
 100ef64:	8409cf04 	addi	r16,r16,10044
 100ef68:	01400304 	movi	r5,12
 100ef6c:	1002f380 	call	1002f38 <__mulsi3>
 100ef70:	1405883a 	add	r2,r2,r16
 100ef74:	10800204 	addi	r2,r2,8
 100ef78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100ef7c:	e13fff17 	ldw	r4,-4(fp)
 100ef80:	04004074 	movhi	r16,257
 100ef84:	8409cf04 	addi	r16,r16,10044
 100ef88:	01400304 	movi	r5,12
 100ef8c:	1002f380 	call	1002f38 <__mulsi3>
 100ef90:	1405883a 	add	r2,r2,r16
 100ef94:	10000015 	stw	zero,0(r2)
  }
}
 100ef98:	e037883a 	mov	sp,fp
 100ef9c:	dfc00217 	ldw	ra,8(sp)
 100efa0:	df000117 	ldw	fp,4(sp)
 100efa4:	dc000017 	ldw	r16,0(sp)
 100efa8:	dec00304 	addi	sp,sp,12
 100efac:	f800283a 	ret

0100efb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100efb0:	defff804 	addi	sp,sp,-32
 100efb4:	df000715 	stw	fp,28(sp)
 100efb8:	df000704 	addi	fp,sp,28
 100efbc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100efc0:	0005303a 	rdctl	r2,status
 100efc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100efc8:	e0fffb17 	ldw	r3,-20(fp)
 100efcc:	00bfff84 	movi	r2,-2
 100efd0:	1884703a 	and	r2,r3,r2
 100efd4:	1001703a 	wrctl	status,r2
  
  return context;
 100efd8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100efdc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100efe0:	d0a01317 	ldw	r2,-32692(gp)
 100efe4:	10c000c4 	addi	r3,r2,3
 100efe8:	00bfff04 	movi	r2,-4
 100efec:	1884703a 	and	r2,r3,r2
 100eff0:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100eff4:	d0e01317 	ldw	r3,-32692(gp)
 100eff8:	e0bffe17 	ldw	r2,-8(fp)
 100effc:	1887883a 	add	r3,r3,r2
 100f000:	00806034 	movhi	r2,384
 100f004:	10800004 	addi	r2,r2,0
 100f008:	10c0072e 	bgeu	r2,r3,100f028 <sbrk+0x78>
 100f00c:	e0bffd17 	ldw	r2,-12(fp)
 100f010:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f014:	e0bffa17 	ldw	r2,-24(fp)
 100f018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100f01c:	00bfffc4 	movi	r2,-1
 100f020:	e0bfff15 	stw	r2,-4(fp)
 100f024:	00000c06 	br	100f058 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100f028:	d0a01317 	ldw	r2,-32692(gp)
 100f02c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100f030:	d0e01317 	ldw	r3,-32692(gp)
 100f034:	e0bffe17 	ldw	r2,-8(fp)
 100f038:	1885883a 	add	r2,r3,r2
 100f03c:	d0a01315 	stw	r2,-32692(gp)
 100f040:	e0bffd17 	ldw	r2,-12(fp)
 100f044:	e0bff915 	stw	r2,-28(fp)
 100f048:	e0bff917 	ldw	r2,-28(fp)
 100f04c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100f050:	e0bffc17 	ldw	r2,-16(fp)
 100f054:	e0bfff15 	stw	r2,-4(fp)
 100f058:	e0bfff17 	ldw	r2,-4(fp)
} 
 100f05c:	e037883a 	mov	sp,fp
 100f060:	df000017 	ldw	fp,0(sp)
 100f064:	dec00104 	addi	sp,sp,4
 100f068:	f800283a 	ret

0100f06c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100f06c:	defff704 	addi	sp,sp,-36
 100f070:	dfc00815 	stw	ra,32(sp)
 100f074:	df000715 	stw	fp,28(sp)
 100f078:	df000704 	addi	fp,sp,28
 100f07c:	e13ffb15 	stw	r4,-20(fp)
 100f080:	e17ffc15 	stw	r5,-16(fp)
 100f084:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f088:	e0bffb17 	ldw	r2,-20(fp)
 100f08c:	1004803a 	cmplt	r2,r2,zero
 100f090:	1000091e 	bne	r2,zero,100f0b8 <write+0x4c>
 100f094:	e13ffb17 	ldw	r4,-20(fp)
 100f098:	01400304 	movi	r5,12
 100f09c:	1002f380 	call	1002f38 <__mulsi3>
 100f0a0:	1007883a 	mov	r3,r2
 100f0a4:	00804074 	movhi	r2,257
 100f0a8:	1089cf04 	addi	r2,r2,10044
 100f0ac:	1887883a 	add	r3,r3,r2
 100f0b0:	e0ffff15 	stw	r3,-4(fp)
 100f0b4:	00000106 	br	100f0bc <write+0x50>
 100f0b8:	e03fff15 	stw	zero,-4(fp)
 100f0bc:	e0bfff17 	ldw	r2,-4(fp)
 100f0c0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100f0c4:	e0bffa17 	ldw	r2,-24(fp)
 100f0c8:	1005003a 	cmpeq	r2,r2,zero
 100f0cc:	1000241e 	bne	r2,zero,100f160 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100f0d0:	e0bffa17 	ldw	r2,-24(fp)
 100f0d4:	10800217 	ldw	r2,8(r2)
 100f0d8:	108000cc 	andi	r2,r2,3
 100f0dc:	1005003a 	cmpeq	r2,r2,zero
 100f0e0:	10001a1e 	bne	r2,zero,100f14c <write+0xe0>
 100f0e4:	e0bffa17 	ldw	r2,-24(fp)
 100f0e8:	10800017 	ldw	r2,0(r2)
 100f0ec:	10800617 	ldw	r2,24(r2)
 100f0f0:	1005003a 	cmpeq	r2,r2,zero
 100f0f4:	1000151e 	bne	r2,zero,100f14c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100f0f8:	e0bffa17 	ldw	r2,-24(fp)
 100f0fc:	10800017 	ldw	r2,0(r2)
 100f100:	10800617 	ldw	r2,24(r2)
 100f104:	e17ffc17 	ldw	r5,-16(fp)
 100f108:	e1bffd17 	ldw	r6,-12(fp)
 100f10c:	e13ffa17 	ldw	r4,-24(fp)
 100f110:	103ee83a 	callr	r2
 100f114:	e0bff915 	stw	r2,-28(fp)
 100f118:	e0bff917 	ldw	r2,-28(fp)
 100f11c:	1004403a 	cmpge	r2,r2,zero
 100f120:	1000071e 	bne	r2,zero,100f140 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100f124:	100f1900 	call	100f190 <alt_get_errno>
 100f128:	e0fff917 	ldw	r3,-28(fp)
 100f12c:	00c7c83a 	sub	r3,zero,r3
 100f130:	10c00015 	stw	r3,0(r2)
        return -1;
 100f134:	00bfffc4 	movi	r2,-1
 100f138:	e0bffe15 	stw	r2,-8(fp)
 100f13c:	00000e06 	br	100f178 <write+0x10c>
      }
      return rval;
 100f140:	e0bff917 	ldw	r2,-28(fp)
 100f144:	e0bffe15 	stw	r2,-8(fp)
 100f148:	00000b06 	br	100f178 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100f14c:	100f1900 	call	100f190 <alt_get_errno>
 100f150:	1007883a 	mov	r3,r2
 100f154:	00800344 	movi	r2,13
 100f158:	18800015 	stw	r2,0(r3)
 100f15c:	00000406 	br	100f170 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100f160:	100f1900 	call	100f190 <alt_get_errno>
 100f164:	1007883a 	mov	r3,r2
 100f168:	00801444 	movi	r2,81
 100f16c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100f170:	00bfffc4 	movi	r2,-1
 100f174:	e0bffe15 	stw	r2,-8(fp)
 100f178:	e0bffe17 	ldw	r2,-8(fp)
}
 100f17c:	e037883a 	mov	sp,fp
 100f180:	dfc00117 	ldw	ra,4(sp)
 100f184:	df000017 	ldw	fp,0(sp)
 100f188:	dec00204 	addi	sp,sp,8
 100f18c:	f800283a 	ret

0100f190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f190:	defffd04 	addi	sp,sp,-12
 100f194:	dfc00215 	stw	ra,8(sp)
 100f198:	df000115 	stw	fp,4(sp)
 100f19c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f1a0:	00804074 	movhi	r2,257
 100f1a4:	108e8a04 	addi	r2,r2,14888
 100f1a8:	10800017 	ldw	r2,0(r2)
 100f1ac:	1005003a 	cmpeq	r2,r2,zero
 100f1b0:	1000061e 	bne	r2,zero,100f1cc <alt_get_errno+0x3c>
 100f1b4:	00804074 	movhi	r2,257
 100f1b8:	108e8a04 	addi	r2,r2,14888
 100f1bc:	10800017 	ldw	r2,0(r2)
 100f1c0:	103ee83a 	callr	r2
 100f1c4:	e0bfff15 	stw	r2,-4(fp)
 100f1c8:	00000306 	br	100f1d8 <alt_get_errno+0x48>
 100f1cc:	00804074 	movhi	r2,257
 100f1d0:	10956804 	addi	r2,r2,21920
 100f1d4:	e0bfff15 	stw	r2,-4(fp)
 100f1d8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1dc:	e037883a 	mov	sp,fp
 100f1e0:	dfc00117 	ldw	ra,4(sp)
 100f1e4:	df000017 	ldw	fp,0(sp)
 100f1e8:	dec00204 	addi	sp,sp,8
 100f1ec:	f800283a 	ret

0100f1f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100f1f0:	defffd04 	addi	sp,sp,-12
 100f1f4:	dfc00215 	stw	ra,8(sp)
 100f1f8:	df000115 	stw	fp,4(sp)
 100f1fc:	df000104 	addi	fp,sp,4
 100f200:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 100f204:	101130c0 	call	101130c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100f208:	00800044 	movi	r2,1
 100f20c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100f210:	e037883a 	mov	sp,fp
 100f214:	dfc00117 	ldw	ra,4(sp)
 100f218:	df000017 	ldw	fp,0(sp)
 100f21c:	dec00204 	addi	sp,sp,8
 100f220:	f800283a 	ret

0100f224 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100f224:	defffe04 	addi	sp,sp,-8
 100f228:	dfc00115 	stw	ra,4(sp)
 100f22c:	df000015 	stw	fp,0(sp)
 100f230:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100f234:	01004074 	movhi	r4,257
 100f238:	210a3904 	addi	r4,r4,10468
 100f23c:	000b883a 	mov	r5,zero
 100f240:	000d883a 	mov	r6,zero
 100f244:	100f4080 	call	100f408 <altera_avalon_jtag_uart_init>
 100f248:	01004074 	movhi	r4,257
 100f24c:	210a2f04 	addi	r4,r4,10428
 100f250:	100f2880 	call	100f288 <alt_dev_reg>
    FIFOED_AVALON_UART_INIT ( ESP8266, esp8266);
 100f254:	01004074 	movhi	r4,257
 100f258:	210e5104 	addi	r4,r4,14660
 100f25c:	000b883a 	mov	r5,zero
 100f260:	01800084 	movi	r6,2
 100f264:	10104a80 	call	10104a8 <fifoed_avalon_uart_init>
 100f268:	01004074 	movhi	r4,257
 100f26c:	210e4704 	addi	r4,r4,14620
 100f270:	100f2880 	call	100f288 <alt_dev_reg>
}
 100f274:	e037883a 	mov	sp,fp
 100f278:	dfc00117 	ldw	ra,4(sp)
 100f27c:	df000017 	ldw	fp,0(sp)
 100f280:	dec00204 	addi	sp,sp,8
 100f284:	f800283a 	ret

0100f288 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100f288:	defffd04 	addi	sp,sp,-12
 100f28c:	dfc00215 	stw	ra,8(sp)
 100f290:	df000115 	stw	fp,4(sp)
 100f294:	df000104 	addi	fp,sp,4
 100f298:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100f29c:	e13fff17 	ldw	r4,-4(fp)
 100f2a0:	01404074 	movhi	r5,257
 100f2a4:	294e8704 	addi	r5,r5,14876
 100f2a8:	10108d00 	call	10108d0 <alt_dev_llist_insert>
}
 100f2ac:	e037883a 	mov	sp,fp
 100f2b0:	dfc00117 	ldw	ra,4(sp)
 100f2b4:	df000017 	ldw	fp,0(sp)
 100f2b8:	dec00204 	addi	sp,sp,8
 100f2bc:	f800283a 	ret

0100f2c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100f2c0:	defffa04 	addi	sp,sp,-24
 100f2c4:	dfc00515 	stw	ra,20(sp)
 100f2c8:	df000415 	stw	fp,16(sp)
 100f2cc:	df000404 	addi	fp,sp,16
 100f2d0:	e13ffd15 	stw	r4,-12(fp)
 100f2d4:	e17ffe15 	stw	r5,-8(fp)
 100f2d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f2dc:	e0bffd17 	ldw	r2,-12(fp)
 100f2e0:	10800017 	ldw	r2,0(r2)
 100f2e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100f2e8:	e0bffc17 	ldw	r2,-16(fp)
 100f2ec:	11000a04 	addi	r4,r2,40
 100f2f0:	e0bffd17 	ldw	r2,-12(fp)
 100f2f4:	11c00217 	ldw	r7,8(r2)
 100f2f8:	e17ffe17 	ldw	r5,-8(fp)
 100f2fc:	e1bfff17 	ldw	r6,-4(fp)
 100f300:	100f9080 	call	100f908 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100f304:	e037883a 	mov	sp,fp
 100f308:	dfc00117 	ldw	ra,4(sp)
 100f30c:	df000017 	ldw	fp,0(sp)
 100f310:	dec00204 	addi	sp,sp,8
 100f314:	f800283a 	ret

0100f318 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100f318:	defffa04 	addi	sp,sp,-24
 100f31c:	dfc00515 	stw	ra,20(sp)
 100f320:	df000415 	stw	fp,16(sp)
 100f324:	df000404 	addi	fp,sp,16
 100f328:	e13ffd15 	stw	r4,-12(fp)
 100f32c:	e17ffe15 	stw	r5,-8(fp)
 100f330:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f334:	e0bffd17 	ldw	r2,-12(fp)
 100f338:	10800017 	ldw	r2,0(r2)
 100f33c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100f340:	e0bffc17 	ldw	r2,-16(fp)
 100f344:	11000a04 	addi	r4,r2,40
 100f348:	e0bffd17 	ldw	r2,-12(fp)
 100f34c:	11c00217 	ldw	r7,8(r2)
 100f350:	e17ffe17 	ldw	r5,-8(fp)
 100f354:	e1bfff17 	ldw	r6,-4(fp)
 100f358:	100fb2c0 	call	100fb2c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100f35c:	e037883a 	mov	sp,fp
 100f360:	dfc00117 	ldw	ra,4(sp)
 100f364:	df000017 	ldw	fp,0(sp)
 100f368:	dec00204 	addi	sp,sp,8
 100f36c:	f800283a 	ret

0100f370 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100f370:	defffc04 	addi	sp,sp,-16
 100f374:	dfc00315 	stw	ra,12(sp)
 100f378:	df000215 	stw	fp,8(sp)
 100f37c:	df000204 	addi	fp,sp,8
 100f380:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f384:	e0bfff17 	ldw	r2,-4(fp)
 100f388:	10800017 	ldw	r2,0(r2)
 100f38c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100f390:	e0bffe17 	ldw	r2,-8(fp)
 100f394:	11000a04 	addi	r4,r2,40
 100f398:	e0bfff17 	ldw	r2,-4(fp)
 100f39c:	11400217 	ldw	r5,8(r2)
 100f3a0:	100f7a00 	call	100f7a0 <altera_avalon_jtag_uart_close>
}
 100f3a4:	e037883a 	mov	sp,fp
 100f3a8:	dfc00117 	ldw	ra,4(sp)
 100f3ac:	df000017 	ldw	fp,0(sp)
 100f3b0:	dec00204 	addi	sp,sp,8
 100f3b4:	f800283a 	ret

0100f3b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100f3b8:	defffa04 	addi	sp,sp,-24
 100f3bc:	dfc00515 	stw	ra,20(sp)
 100f3c0:	df000415 	stw	fp,16(sp)
 100f3c4:	df000404 	addi	fp,sp,16
 100f3c8:	e13ffd15 	stw	r4,-12(fp)
 100f3cc:	e17ffe15 	stw	r5,-8(fp)
 100f3d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100f3d4:	e0bffd17 	ldw	r2,-12(fp)
 100f3d8:	10800017 	ldw	r2,0(r2)
 100f3dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100f3e0:	e0bffc17 	ldw	r2,-16(fp)
 100f3e4:	11000a04 	addi	r4,r2,40
 100f3e8:	e17ffe17 	ldw	r5,-8(fp)
 100f3ec:	e1bfff17 	ldw	r6,-4(fp)
 100f3f0:	100f8140 	call	100f814 <altera_avalon_jtag_uart_ioctl>
}
 100f3f4:	e037883a 	mov	sp,fp
 100f3f8:	dfc00117 	ldw	ra,4(sp)
 100f3fc:	df000017 	ldw	fp,0(sp)
 100f400:	dec00204 	addi	sp,sp,8
 100f404:	f800283a 	ret

0100f408 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100f408:	defffa04 	addi	sp,sp,-24
 100f40c:	dfc00515 	stw	ra,20(sp)
 100f410:	df000415 	stw	fp,16(sp)
 100f414:	df000404 	addi	fp,sp,16
 100f418:	e13ffd15 	stw	r4,-12(fp)
 100f41c:	e17ffe15 	stw	r5,-8(fp)
 100f420:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f424:	e0fffd17 	ldw	r3,-12(fp)
 100f428:	00800044 	movi	r2,1
 100f42c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100f430:	e0bffd17 	ldw	r2,-12(fp)
 100f434:	10800017 	ldw	r2,0(r2)
 100f438:	11000104 	addi	r4,r2,4
 100f43c:	e0bffd17 	ldw	r2,-12(fp)
 100f440:	10800817 	ldw	r2,32(r2)
 100f444:	1007883a 	mov	r3,r2
 100f448:	2005883a 	mov	r2,r4
 100f44c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100f450:	e13ffe17 	ldw	r4,-8(fp)
 100f454:	e17fff17 	ldw	r5,-4(fp)
 100f458:	d8000015 	stw	zero,0(sp)
 100f45c:	01804074 	movhi	r6,257
 100f460:	31bd3204 	addi	r6,r6,-2872
 100f464:	e1fffd17 	ldw	r7,-12(fp)
 100f468:	1010d4c0 	call	1010d4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100f46c:	e0bffd17 	ldw	r2,-12(fp)
 100f470:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100f474:	e0bffd17 	ldw	r2,-12(fp)
 100f478:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100f47c:	00804074 	movhi	r2,257
 100f480:	10957304 	addi	r2,r2,21964
 100f484:	10800017 	ldw	r2,0(r2)
 100f488:	100b883a 	mov	r5,r2
 100f48c:	01804074 	movhi	r6,257
 100f490:	31bdbc04 	addi	r6,r6,-2320
 100f494:	e1fffd17 	ldw	r7,-12(fp)
 100f498:	10107600 	call	1010760 <alt_alarm_start>
 100f49c:	1004403a 	cmpge	r2,r2,zero
 100f4a0:	1000041e 	bne	r2,zero,100f4b4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100f4a4:	e0fffd17 	ldw	r3,-12(fp)
 100f4a8:	00a00034 	movhi	r2,32768
 100f4ac:	10bfffc4 	addi	r2,r2,-1
 100f4b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100f4b4:	e037883a 	mov	sp,fp
 100f4b8:	dfc00117 	ldw	ra,4(sp)
 100f4bc:	df000017 	ldw	fp,0(sp)
 100f4c0:	dec00204 	addi	sp,sp,8
 100f4c4:	f800283a 	ret

0100f4c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100f4c8:	defff804 	addi	sp,sp,-32
 100f4cc:	df000715 	stw	fp,28(sp)
 100f4d0:	df000704 	addi	fp,sp,28
 100f4d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100f4d8:	e0bfff17 	ldw	r2,-4(fp)
 100f4dc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100f4e0:	e0bffe17 	ldw	r2,-8(fp)
 100f4e4:	10800017 	ldw	r2,0(r2)
 100f4e8:	e0bffd15 	stw	r2,-12(fp)
 100f4ec:	00000006 	br	100f4f0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f4f0:	e0bffd17 	ldw	r2,-12(fp)
 100f4f4:	10800104 	addi	r2,r2,4
 100f4f8:	10800037 	ldwio	r2,0(r2)
 100f4fc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100f500:	e0bffc17 	ldw	r2,-16(fp)
 100f504:	1080c00c 	andi	r2,r2,768
 100f508:	1005003a 	cmpeq	r2,r2,zero
 100f50c:	1000741e 	bne	r2,zero,100f6e0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100f510:	e0bffc17 	ldw	r2,-16(fp)
 100f514:	1080400c 	andi	r2,r2,256
 100f518:	1005003a 	cmpeq	r2,r2,zero
 100f51c:	1000351e 	bne	r2,zero,100f5f4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100f520:	00800074 	movhi	r2,1
 100f524:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f528:	e0bffe17 	ldw	r2,-8(fp)
 100f52c:	10800a17 	ldw	r2,40(r2)
 100f530:	10800044 	addi	r2,r2,1
 100f534:	1081ffcc 	andi	r2,r2,2047
 100f538:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100f53c:	e0bffe17 	ldw	r2,-8(fp)
 100f540:	10c00b17 	ldw	r3,44(r2)
 100f544:	e0bffa17 	ldw	r2,-24(fp)
 100f548:	18801626 	beq	r3,r2,100f5a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100f54c:	e0bffd17 	ldw	r2,-12(fp)
 100f550:	10800037 	ldwio	r2,0(r2)
 100f554:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100f558:	e0bffb17 	ldw	r2,-20(fp)
 100f55c:	10a0000c 	andi	r2,r2,32768
 100f560:	1005003a 	cmpeq	r2,r2,zero
 100f564:	10000f1e 	bne	r2,zero,100f5a4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100f568:	e0bffe17 	ldw	r2,-8(fp)
 100f56c:	10c00a17 	ldw	r3,40(r2)
 100f570:	e0bffb17 	ldw	r2,-20(fp)
 100f574:	1009883a 	mov	r4,r2
 100f578:	e0bffe17 	ldw	r2,-8(fp)
 100f57c:	1885883a 	add	r2,r3,r2
 100f580:	10800e04 	addi	r2,r2,56
 100f584:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f588:	e0bffe17 	ldw	r2,-8(fp)
 100f58c:	10800a17 	ldw	r2,40(r2)
 100f590:	10800044 	addi	r2,r2,1
 100f594:	10c1ffcc 	andi	r3,r2,2047
 100f598:	e0bffe17 	ldw	r2,-8(fp)
 100f59c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100f5a0:	003fe106 	br	100f528 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100f5a4:	e0bffb17 	ldw	r2,-20(fp)
 100f5a8:	10bfffec 	andhi	r2,r2,65535
 100f5ac:	1005003a 	cmpeq	r2,r2,zero
 100f5b0:	1000101e 	bne	r2,zero,100f5f4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f5b4:	e0bffe17 	ldw	r2,-8(fp)
 100f5b8:	10c00817 	ldw	r3,32(r2)
 100f5bc:	00bfff84 	movi	r2,-2
 100f5c0:	1886703a 	and	r3,r3,r2
 100f5c4:	e0bffe17 	ldw	r2,-8(fp)
 100f5c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100f5cc:	e0bffd17 	ldw	r2,-12(fp)
 100f5d0:	11000104 	addi	r4,r2,4
 100f5d4:	e0bffe17 	ldw	r2,-8(fp)
 100f5d8:	10800817 	ldw	r2,32(r2)
 100f5dc:	1007883a 	mov	r3,r2
 100f5e0:	2005883a 	mov	r2,r4
 100f5e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f5e8:	e0bffd17 	ldw	r2,-12(fp)
 100f5ec:	10800104 	addi	r2,r2,4
 100f5f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100f5f4:	e0bffc17 	ldw	r2,-16(fp)
 100f5f8:	1080800c 	andi	r2,r2,512
 100f5fc:	1005003a 	cmpeq	r2,r2,zero
 100f600:	103fbb1e 	bne	r2,zero,100f4f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100f604:	e0bffc17 	ldw	r2,-16(fp)
 100f608:	10bfffec 	andhi	r2,r2,65535
 100f60c:	1004d43a 	srli	r2,r2,16
 100f610:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f614:	00001506 	br	100f66c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100f618:	e13ffd17 	ldw	r4,-12(fp)
 100f61c:	e0bffe17 	ldw	r2,-8(fp)
 100f620:	10c00d17 	ldw	r3,52(r2)
 100f624:	e0bffe17 	ldw	r2,-8(fp)
 100f628:	1885883a 	add	r2,r3,r2
 100f62c:	10820e04 	addi	r2,r2,2104
 100f630:	10800003 	ldbu	r2,0(r2)
 100f634:	10c03fcc 	andi	r3,r2,255
 100f638:	18c0201c 	xori	r3,r3,128
 100f63c:	18ffe004 	addi	r3,r3,-128
 100f640:	2005883a 	mov	r2,r4
 100f644:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f648:	e0bffe17 	ldw	r2,-8(fp)
 100f64c:	10800d17 	ldw	r2,52(r2)
 100f650:	10800044 	addi	r2,r2,1
 100f654:	10c1ffcc 	andi	r3,r2,2047
 100f658:	e0bffe17 	ldw	r2,-8(fp)
 100f65c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100f660:	e0bff917 	ldw	r2,-28(fp)
 100f664:	10bfffc4 	addi	r2,r2,-1
 100f668:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f66c:	e0bff917 	ldw	r2,-28(fp)
 100f670:	1005003a 	cmpeq	r2,r2,zero
 100f674:	1000051e 	bne	r2,zero,100f68c <altera_avalon_jtag_uart_irq+0x1c4>
 100f678:	e0bffe17 	ldw	r2,-8(fp)
 100f67c:	10c00d17 	ldw	r3,52(r2)
 100f680:	e0bffe17 	ldw	r2,-8(fp)
 100f684:	10800c17 	ldw	r2,48(r2)
 100f688:	18bfe31e 	bne	r3,r2,100f618 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100f68c:	e0bff917 	ldw	r2,-28(fp)
 100f690:	1005003a 	cmpeq	r2,r2,zero
 100f694:	103f961e 	bne	r2,zero,100f4f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100f698:	e0bffe17 	ldw	r2,-8(fp)
 100f69c:	10c00817 	ldw	r3,32(r2)
 100f6a0:	00bfff44 	movi	r2,-3
 100f6a4:	1886703a 	and	r3,r3,r2
 100f6a8:	e0bffe17 	ldw	r2,-8(fp)
 100f6ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f6b0:	e0bffe17 	ldw	r2,-8(fp)
 100f6b4:	10800017 	ldw	r2,0(r2)
 100f6b8:	11000104 	addi	r4,r2,4
 100f6bc:	e0bffe17 	ldw	r2,-8(fp)
 100f6c0:	10800817 	ldw	r2,32(r2)
 100f6c4:	1007883a 	mov	r3,r2
 100f6c8:	2005883a 	mov	r2,r4
 100f6cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f6d0:	e0bffd17 	ldw	r2,-12(fp)
 100f6d4:	10800104 	addi	r2,r2,4
 100f6d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100f6dc:	003f8406 	br	100f4f0 <altera_avalon_jtag_uart_irq+0x28>
}
 100f6e0:	e037883a 	mov	sp,fp
 100f6e4:	df000017 	ldw	fp,0(sp)
 100f6e8:	dec00104 	addi	sp,sp,4
 100f6ec:	f800283a 	ret

0100f6f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100f6f0:	defffc04 	addi	sp,sp,-16
 100f6f4:	df000315 	stw	fp,12(sp)
 100f6f8:	df000304 	addi	fp,sp,12
 100f6fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100f700:	e0bfff17 	ldw	r2,-4(fp)
 100f704:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100f708:	e0bffe17 	ldw	r2,-8(fp)
 100f70c:	10800017 	ldw	r2,0(r2)
 100f710:	10800104 	addi	r2,r2,4
 100f714:	10800037 	ldwio	r2,0(r2)
 100f718:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100f71c:	e0bffd17 	ldw	r2,-12(fp)
 100f720:	1081000c 	andi	r2,r2,1024
 100f724:	1005003a 	cmpeq	r2,r2,zero
 100f728:	10000c1e 	bne	r2,zero,100f75c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100f72c:	e0bffe17 	ldw	r2,-8(fp)
 100f730:	10800017 	ldw	r2,0(r2)
 100f734:	11000104 	addi	r4,r2,4
 100f738:	e0bffe17 	ldw	r2,-8(fp)
 100f73c:	10800817 	ldw	r2,32(r2)
 100f740:	10810014 	ori	r2,r2,1024
 100f744:	1007883a 	mov	r3,r2
 100f748:	2005883a 	mov	r2,r4
 100f74c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100f750:	e0bffe17 	ldw	r2,-8(fp)
 100f754:	10000915 	stw	zero,36(r2)
 100f758:	00000a06 	br	100f784 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100f75c:	e0bffe17 	ldw	r2,-8(fp)
 100f760:	10c00917 	ldw	r3,36(r2)
 100f764:	00a00034 	movhi	r2,32768
 100f768:	10bfff04 	addi	r2,r2,-4
 100f76c:	10c00536 	bltu	r2,r3,100f784 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100f770:	e0bffe17 	ldw	r2,-8(fp)
 100f774:	10800917 	ldw	r2,36(r2)
 100f778:	10c00044 	addi	r3,r2,1
 100f77c:	e0bffe17 	ldw	r2,-8(fp)
 100f780:	10c00915 	stw	r3,36(r2)
 100f784:	00804074 	movhi	r2,257
 100f788:	10957304 	addi	r2,r2,21964
 100f78c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100f790:	e037883a 	mov	sp,fp
 100f794:	df000017 	ldw	fp,0(sp)
 100f798:	dec00104 	addi	sp,sp,4
 100f79c:	f800283a 	ret

0100f7a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100f7a0:	defffc04 	addi	sp,sp,-16
 100f7a4:	df000315 	stw	fp,12(sp)
 100f7a8:	df000304 	addi	fp,sp,12
 100f7ac:	e13ffd15 	stw	r4,-12(fp)
 100f7b0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f7b4:	00000706 	br	100f7d4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100f7b8:	e0bffe17 	ldw	r2,-8(fp)
 100f7bc:	1090000c 	andi	r2,r2,16384
 100f7c0:	1005003a 	cmpeq	r2,r2,zero
 100f7c4:	1000031e 	bne	r2,zero,100f7d4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100f7c8:	00bffd44 	movi	r2,-11
 100f7cc:	e0bfff15 	stw	r2,-4(fp)
 100f7d0:	00000b06 	br	100f800 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f7d4:	e0bffd17 	ldw	r2,-12(fp)
 100f7d8:	10c00d17 	ldw	r3,52(r2)
 100f7dc:	e0bffd17 	ldw	r2,-12(fp)
 100f7e0:	10800c17 	ldw	r2,48(r2)
 100f7e4:	18800526 	beq	r3,r2,100f7fc <altera_avalon_jtag_uart_close+0x5c>
 100f7e8:	e0bffd17 	ldw	r2,-12(fp)
 100f7ec:	10c00917 	ldw	r3,36(r2)
 100f7f0:	e0bffd17 	ldw	r2,-12(fp)
 100f7f4:	10800117 	ldw	r2,4(r2)
 100f7f8:	18bfef36 	bltu	r3,r2,100f7b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100f7fc:	e03fff15 	stw	zero,-4(fp)
 100f800:	e0bfff17 	ldw	r2,-4(fp)
}
 100f804:	e037883a 	mov	sp,fp
 100f808:	df000017 	ldw	fp,0(sp)
 100f80c:	dec00104 	addi	sp,sp,4
 100f810:	f800283a 	ret

0100f814 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100f814:	defff804 	addi	sp,sp,-32
 100f818:	df000715 	stw	fp,28(sp)
 100f81c:	df000704 	addi	fp,sp,28
 100f820:	e13ffb15 	stw	r4,-20(fp)
 100f824:	e17ffc15 	stw	r5,-16(fp)
 100f828:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100f82c:	00bff9c4 	movi	r2,-25
 100f830:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100f834:	e0bffc17 	ldw	r2,-16(fp)
 100f838:	e0bfff15 	stw	r2,-4(fp)
 100f83c:	e0ffff17 	ldw	r3,-4(fp)
 100f840:	189a8060 	cmpeqi	r2,r3,27137
 100f844:	1000041e 	bne	r2,zero,100f858 <altera_avalon_jtag_uart_ioctl+0x44>
 100f848:	e0ffff17 	ldw	r3,-4(fp)
 100f84c:	189a80a0 	cmpeqi	r2,r3,27138
 100f850:	10001b1e 	bne	r2,zero,100f8c0 <altera_avalon_jtag_uart_ioctl+0xac>
 100f854:	00002706 	br	100f8f4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100f858:	e0bffb17 	ldw	r2,-20(fp)
 100f85c:	10c00117 	ldw	r3,4(r2)
 100f860:	00a00034 	movhi	r2,32768
 100f864:	10bfffc4 	addi	r2,r2,-1
 100f868:	18802226 	beq	r3,r2,100f8f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100f86c:	e0bffd17 	ldw	r2,-12(fp)
 100f870:	10800017 	ldw	r2,0(r2)
 100f874:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100f878:	e0bff917 	ldw	r2,-28(fp)
 100f87c:	10800090 	cmplti	r2,r2,2
 100f880:	1000071e 	bne	r2,zero,100f8a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f884:	e0fff917 	ldw	r3,-28(fp)
 100f888:	00a00034 	movhi	r2,32768
 100f88c:	10bfffc4 	addi	r2,r2,-1
 100f890:	18800326 	beq	r3,r2,100f8a0 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f894:	e0bff917 	ldw	r2,-28(fp)
 100f898:	e0bffe15 	stw	r2,-8(fp)
 100f89c:	00000306 	br	100f8ac <altera_avalon_jtag_uart_ioctl+0x98>
 100f8a0:	00e00034 	movhi	r3,32768
 100f8a4:	18ffff84 	addi	r3,r3,-2
 100f8a8:	e0fffe15 	stw	r3,-8(fp)
 100f8ac:	e0bffb17 	ldw	r2,-20(fp)
 100f8b0:	e0fffe17 	ldw	r3,-8(fp)
 100f8b4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100f8b8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100f8bc:	00000d06 	br	100f8f4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100f8c0:	e0bffb17 	ldw	r2,-20(fp)
 100f8c4:	10c00117 	ldw	r3,4(r2)
 100f8c8:	00a00034 	movhi	r2,32768
 100f8cc:	10bfffc4 	addi	r2,r2,-1
 100f8d0:	18800826 	beq	r3,r2,100f8f4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100f8d4:	e13ffd17 	ldw	r4,-12(fp)
 100f8d8:	e0bffb17 	ldw	r2,-20(fp)
 100f8dc:	10c00917 	ldw	r3,36(r2)
 100f8e0:	e0bffb17 	ldw	r2,-20(fp)
 100f8e4:	10800117 	ldw	r2,4(r2)
 100f8e8:	1885803a 	cmpltu	r2,r3,r2
 100f8ec:	20800015 	stw	r2,0(r4)
      rc = 0;
 100f8f0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100f8f4:	e0bffa17 	ldw	r2,-24(fp)
}
 100f8f8:	e037883a 	mov	sp,fp
 100f8fc:	df000017 	ldw	fp,0(sp)
 100f900:	dec00104 	addi	sp,sp,4
 100f904:	f800283a 	ret

0100f908 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100f908:	defff204 	addi	sp,sp,-56
 100f90c:	dfc00d15 	stw	ra,52(sp)
 100f910:	df000c15 	stw	fp,48(sp)
 100f914:	df000c04 	addi	fp,sp,48
 100f918:	e13ffb15 	stw	r4,-20(fp)
 100f91c:	e17ffc15 	stw	r5,-16(fp)
 100f920:	e1bffd15 	stw	r6,-12(fp)
 100f924:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100f928:	e0bffc17 	ldw	r2,-16(fp)
 100f92c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f930:	00004806 	br	100fa54 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100f934:	e0bffb17 	ldw	r2,-20(fp)
 100f938:	10800a17 	ldw	r2,40(r2)
 100f93c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100f940:	e0bffb17 	ldw	r2,-20(fp)
 100f944:	10800b17 	ldw	r2,44(r2)
 100f948:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100f94c:	e0fff717 	ldw	r3,-36(fp)
 100f950:	e0bff617 	ldw	r2,-40(fp)
 100f954:	18800536 	bltu	r3,r2,100f96c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100f958:	e0bff717 	ldw	r2,-36(fp)
 100f95c:	e0fff617 	ldw	r3,-40(fp)
 100f960:	10c5c83a 	sub	r2,r2,r3
 100f964:	e0bff815 	stw	r2,-32(fp)
 100f968:	00000406 	br	100f97c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100f96c:	00820004 	movi	r2,2048
 100f970:	e0fff617 	ldw	r3,-40(fp)
 100f974:	10c5c83a 	sub	r2,r2,r3
 100f978:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100f97c:	e0bff817 	ldw	r2,-32(fp)
 100f980:	1005003a 	cmpeq	r2,r2,zero
 100f984:	10001f1e 	bne	r2,zero,100fa04 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100f988:	e0fffd17 	ldw	r3,-12(fp)
 100f98c:	e0bff817 	ldw	r2,-32(fp)
 100f990:	1880022e 	bgeu	r3,r2,100f99c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100f994:	e0bffd17 	ldw	r2,-12(fp)
 100f998:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100f99c:	e0bffb17 	ldw	r2,-20(fp)
 100f9a0:	10c00e04 	addi	r3,r2,56
 100f9a4:	e0bff617 	ldw	r2,-40(fp)
 100f9a8:	1887883a 	add	r3,r3,r2
 100f9ac:	e0bffa17 	ldw	r2,-24(fp)
 100f9b0:	1009883a 	mov	r4,r2
 100f9b4:	180b883a 	mov	r5,r3
 100f9b8:	e1bff817 	ldw	r6,-32(fp)
 100f9bc:	1009e300 	call	1009e30 <memcpy>
      ptr   += n;
 100f9c0:	e0fff817 	ldw	r3,-32(fp)
 100f9c4:	e0bffa17 	ldw	r2,-24(fp)
 100f9c8:	10c5883a 	add	r2,r2,r3
 100f9cc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100f9d0:	e0fffd17 	ldw	r3,-12(fp)
 100f9d4:	e0bff817 	ldw	r2,-32(fp)
 100f9d8:	1885c83a 	sub	r2,r3,r2
 100f9dc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f9e0:	e0fff617 	ldw	r3,-40(fp)
 100f9e4:	e0bff817 	ldw	r2,-32(fp)
 100f9e8:	1885883a 	add	r2,r3,r2
 100f9ec:	10c1ffcc 	andi	r3,r2,2047
 100f9f0:	e0bffb17 	ldw	r2,-20(fp)
 100f9f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100f9f8:	e0bffd17 	ldw	r2,-12(fp)
 100f9fc:	10800048 	cmpgei	r2,r2,1
 100fa00:	103fcc1e 	bne	r2,zero,100f934 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100fa04:	e0fffa17 	ldw	r3,-24(fp)
 100fa08:	e0bffc17 	ldw	r2,-16(fp)
 100fa0c:	1880141e 	bne	r3,r2,100fa60 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100fa10:	e0bffe17 	ldw	r2,-8(fp)
 100fa14:	1090000c 	andi	r2,r2,16384
 100fa18:	1004c03a 	cmpne	r2,r2,zero
 100fa1c:	1000101e 	bne	r2,zero,100fa60 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100fa20:	e0bffb17 	ldw	r2,-20(fp)
 100fa24:	10c00a17 	ldw	r3,40(r2)
 100fa28:	e0bff717 	ldw	r2,-36(fp)
 100fa2c:	1880051e 	bne	r3,r2,100fa44 <altera_avalon_jtag_uart_read+0x13c>
 100fa30:	e0bffb17 	ldw	r2,-20(fp)
 100fa34:	10c00917 	ldw	r3,36(r2)
 100fa38:	e0bffb17 	ldw	r2,-20(fp)
 100fa3c:	10800117 	ldw	r2,4(r2)
 100fa40:	18bff736 	bltu	r3,r2,100fa20 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100fa44:	e0bffb17 	ldw	r2,-20(fp)
 100fa48:	10c00a17 	ldw	r3,40(r2)
 100fa4c:	e0bff717 	ldw	r2,-36(fp)
 100fa50:	18800326 	beq	r3,r2,100fa60 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100fa54:	e0bffd17 	ldw	r2,-12(fp)
 100fa58:	10800048 	cmpgei	r2,r2,1
 100fa5c:	103fb51e 	bne	r2,zero,100f934 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100fa60:	e0fffa17 	ldw	r3,-24(fp)
 100fa64:	e0bffc17 	ldw	r2,-16(fp)
 100fa68:	18801926 	beq	r3,r2,100fad0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fa6c:	0005303a 	rdctl	r2,status
 100fa70:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fa74:	e0fff517 	ldw	r3,-44(fp)
 100fa78:	00bfff84 	movi	r2,-2
 100fa7c:	1884703a 	and	r2,r3,r2
 100fa80:	1001703a 	wrctl	status,r2
  
  return context;
 100fa84:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100fa88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100fa8c:	e0bffb17 	ldw	r2,-20(fp)
 100fa90:	10800817 	ldw	r2,32(r2)
 100fa94:	10c00054 	ori	r3,r2,1
 100fa98:	e0bffb17 	ldw	r2,-20(fp)
 100fa9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100faa0:	e0bffb17 	ldw	r2,-20(fp)
 100faa4:	10800017 	ldw	r2,0(r2)
 100faa8:	11000104 	addi	r4,r2,4
 100faac:	e0bffb17 	ldw	r2,-20(fp)
 100fab0:	10800817 	ldw	r2,32(r2)
 100fab4:	1007883a 	mov	r3,r2
 100fab8:	2005883a 	mov	r2,r4
 100fabc:	10c00035 	stwio	r3,0(r2)
 100fac0:	e0bff917 	ldw	r2,-28(fp)
 100fac4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fac8:	e0bff417 	ldw	r2,-48(fp)
 100facc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100fad0:	e0fffa17 	ldw	r3,-24(fp)
 100fad4:	e0bffc17 	ldw	r2,-16(fp)
 100fad8:	18800526 	beq	r3,r2,100faf0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100fadc:	e0fffa17 	ldw	r3,-24(fp)
 100fae0:	e0bffc17 	ldw	r2,-16(fp)
 100fae4:	1887c83a 	sub	r3,r3,r2
 100fae8:	e0ffff15 	stw	r3,-4(fp)
 100faec:	00000906 	br	100fb14 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100faf0:	e0bffe17 	ldw	r2,-8(fp)
 100faf4:	1090000c 	andi	r2,r2,16384
 100faf8:	1005003a 	cmpeq	r2,r2,zero
 100fafc:	1000031e 	bne	r2,zero,100fb0c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100fb00:	00bffd44 	movi	r2,-11
 100fb04:	e0bfff15 	stw	r2,-4(fp)
 100fb08:	00000206 	br	100fb14 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100fb0c:	00bffec4 	movi	r2,-5
 100fb10:	e0bfff15 	stw	r2,-4(fp)
 100fb14:	e0bfff17 	ldw	r2,-4(fp)
}
 100fb18:	e037883a 	mov	sp,fp
 100fb1c:	dfc00117 	ldw	ra,4(sp)
 100fb20:	df000017 	ldw	fp,0(sp)
 100fb24:	dec00204 	addi	sp,sp,8
 100fb28:	f800283a 	ret

0100fb2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100fb2c:	defff204 	addi	sp,sp,-56
 100fb30:	dfc00d15 	stw	ra,52(sp)
 100fb34:	df000c15 	stw	fp,48(sp)
 100fb38:	df000c04 	addi	fp,sp,48
 100fb3c:	e13ffb15 	stw	r4,-20(fp)
 100fb40:	e17ffc15 	stw	r5,-16(fp)
 100fb44:	e1bffd15 	stw	r6,-12(fp)
 100fb48:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100fb4c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100fb50:	e0bffc17 	ldw	r2,-16(fp)
 100fb54:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fb58:	00003a06 	br	100fc44 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100fb5c:	e0bffb17 	ldw	r2,-20(fp)
 100fb60:	10800c17 	ldw	r2,48(r2)
 100fb64:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100fb68:	e0bffb17 	ldw	r2,-20(fp)
 100fb6c:	10800d17 	ldw	r2,52(r2)
 100fb70:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100fb74:	e0fffa17 	ldw	r3,-24(fp)
 100fb78:	e0bff917 	ldw	r2,-28(fp)
 100fb7c:	1880062e 	bgeu	r3,r2,100fb98 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100fb80:	e0fff917 	ldw	r3,-28(fp)
 100fb84:	e0bffa17 	ldw	r2,-24(fp)
 100fb88:	1885c83a 	sub	r2,r3,r2
 100fb8c:	10bfffc4 	addi	r2,r2,-1
 100fb90:	e0bff815 	stw	r2,-32(fp)
 100fb94:	00000c06 	br	100fbc8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100fb98:	e0bff917 	ldw	r2,-28(fp)
 100fb9c:	1005003a 	cmpeq	r2,r2,zero
 100fba0:	1000051e 	bne	r2,zero,100fbb8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100fba4:	00820004 	movi	r2,2048
 100fba8:	e0fffa17 	ldw	r3,-24(fp)
 100fbac:	10c5c83a 	sub	r2,r2,r3
 100fbb0:	e0bff815 	stw	r2,-32(fp)
 100fbb4:	00000406 	br	100fbc8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100fbb8:	0081ffc4 	movi	r2,2047
 100fbbc:	e0fffa17 	ldw	r3,-24(fp)
 100fbc0:	10c5c83a 	sub	r2,r2,r3
 100fbc4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100fbc8:	e0bff817 	ldw	r2,-32(fp)
 100fbcc:	1005003a 	cmpeq	r2,r2,zero
 100fbd0:	10001f1e 	bne	r2,zero,100fc50 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100fbd4:	e0fffd17 	ldw	r3,-12(fp)
 100fbd8:	e0bff817 	ldw	r2,-32(fp)
 100fbdc:	1880022e 	bgeu	r3,r2,100fbe8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100fbe0:	e0bffd17 	ldw	r2,-12(fp)
 100fbe4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100fbe8:	e0bffb17 	ldw	r2,-20(fp)
 100fbec:	10c20e04 	addi	r3,r2,2104
 100fbf0:	e0bffa17 	ldw	r2,-24(fp)
 100fbf4:	1885883a 	add	r2,r3,r2
 100fbf8:	e0fffc17 	ldw	r3,-16(fp)
 100fbfc:	1009883a 	mov	r4,r2
 100fc00:	180b883a 	mov	r5,r3
 100fc04:	e1bff817 	ldw	r6,-32(fp)
 100fc08:	1009e300 	call	1009e30 <memcpy>
      ptr   += n;
 100fc0c:	e0fff817 	ldw	r3,-32(fp)
 100fc10:	e0bffc17 	ldw	r2,-16(fp)
 100fc14:	10c5883a 	add	r2,r2,r3
 100fc18:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100fc1c:	e0fffd17 	ldw	r3,-12(fp)
 100fc20:	e0bff817 	ldw	r2,-32(fp)
 100fc24:	1885c83a 	sub	r2,r3,r2
 100fc28:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100fc2c:	e0fffa17 	ldw	r3,-24(fp)
 100fc30:	e0bff817 	ldw	r2,-32(fp)
 100fc34:	1885883a 	add	r2,r3,r2
 100fc38:	10c1ffcc 	andi	r3,r2,2047
 100fc3c:	e0bffb17 	ldw	r2,-20(fp)
 100fc40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fc44:	e0bffd17 	ldw	r2,-12(fp)
 100fc48:	10800048 	cmpgei	r2,r2,1
 100fc4c:	103fc31e 	bne	r2,zero,100fb5c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fc50:	0005303a 	rdctl	r2,status
 100fc54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fc58:	e0fff517 	ldw	r3,-44(fp)
 100fc5c:	00bfff84 	movi	r2,-2
 100fc60:	1884703a 	and	r2,r3,r2
 100fc64:	1001703a 	wrctl	status,r2
  
  return context;
 100fc68:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100fc6c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100fc70:	e0bffb17 	ldw	r2,-20(fp)
 100fc74:	10800817 	ldw	r2,32(r2)
 100fc78:	10c00094 	ori	r3,r2,2
 100fc7c:	e0bffb17 	ldw	r2,-20(fp)
 100fc80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100fc84:	e0bffb17 	ldw	r2,-20(fp)
 100fc88:	10800017 	ldw	r2,0(r2)
 100fc8c:	11000104 	addi	r4,r2,4
 100fc90:	e0bffb17 	ldw	r2,-20(fp)
 100fc94:	10800817 	ldw	r2,32(r2)
 100fc98:	1007883a 	mov	r3,r2
 100fc9c:	2005883a 	mov	r2,r4
 100fca0:	10c00035 	stwio	r3,0(r2)
 100fca4:	e0bff717 	ldw	r2,-36(fp)
 100fca8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fcac:	e0bff417 	ldw	r2,-48(fp)
 100fcb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100fcb4:	e0bffd17 	ldw	r2,-12(fp)
 100fcb8:	10800050 	cmplti	r2,r2,1
 100fcbc:	1000111e 	bne	r2,zero,100fd04 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100fcc0:	e0bffe17 	ldw	r2,-8(fp)
 100fcc4:	1090000c 	andi	r2,r2,16384
 100fcc8:	1004c03a 	cmpne	r2,r2,zero
 100fccc:	1000101e 	bne	r2,zero,100fd10 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100fcd0:	e0bffb17 	ldw	r2,-20(fp)
 100fcd4:	10c00d17 	ldw	r3,52(r2)
 100fcd8:	e0bff917 	ldw	r2,-28(fp)
 100fcdc:	1880051e 	bne	r3,r2,100fcf4 <altera_avalon_jtag_uart_write+0x1c8>
 100fce0:	e0bffb17 	ldw	r2,-20(fp)
 100fce4:	10c00917 	ldw	r3,36(r2)
 100fce8:	e0bffb17 	ldw	r2,-20(fp)
 100fcec:	10800117 	ldw	r2,4(r2)
 100fcf0:	18bff736 	bltu	r3,r2,100fcd0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100fcf4:	e0bffb17 	ldw	r2,-20(fp)
 100fcf8:	10c00d17 	ldw	r3,52(r2)
 100fcfc:	e0bff917 	ldw	r2,-28(fp)
 100fd00:	18800326 	beq	r3,r2,100fd10 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100fd04:	e0bffd17 	ldw	r2,-12(fp)
 100fd08:	10800048 	cmpgei	r2,r2,1
 100fd0c:	103fcd1e 	bne	r2,zero,100fc44 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100fd10:	e0fffc17 	ldw	r3,-16(fp)
 100fd14:	e0bff617 	ldw	r2,-40(fp)
 100fd18:	18800526 	beq	r3,r2,100fd30 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100fd1c:	e0fffc17 	ldw	r3,-16(fp)
 100fd20:	e0bff617 	ldw	r2,-40(fp)
 100fd24:	1887c83a 	sub	r3,r3,r2
 100fd28:	e0ffff15 	stw	r3,-4(fp)
 100fd2c:	00000906 	br	100fd54 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100fd30:	e0bffe17 	ldw	r2,-8(fp)
 100fd34:	1090000c 	andi	r2,r2,16384
 100fd38:	1005003a 	cmpeq	r2,r2,zero
 100fd3c:	1000031e 	bne	r2,zero,100fd4c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100fd40:	00bffd44 	movi	r2,-11
 100fd44:	e0bfff15 	stw	r2,-4(fp)
 100fd48:	00000206 	br	100fd54 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100fd4c:	00bffec4 	movi	r2,-5
 100fd50:	e0bfff15 	stw	r2,-4(fp)
 100fd54:	e0bfff17 	ldw	r2,-4(fp)
}
 100fd58:	e037883a 	mov	sp,fp
 100fd5c:	dfc00117 	ldw	ra,4(sp)
 100fd60:	df000017 	ldw	fp,0(sp)
 100fd64:	dec00204 	addi	sp,sp,8
 100fd68:	f800283a 	ret

0100fd6c <fifoed_avalon_uart_read>:
 * transfered from a circular buffer. The interrupt handler is then responsible
 * for copying data from the device into this buffer.
 */

int fifoed_avalon_uart_read (fifoed_avalon_uart_state* sp, char* ptr, int len, int flags)
{
 100fd6c:	defff304 	addi	sp,sp,-52
 100fd70:	dfc00c15 	stw	ra,48(sp)
 100fd74:	df000b15 	stw	fp,44(sp)
 100fd78:	df000b04 	addi	fp,sp,44
 100fd7c:	e13ffc15 	stw	r4,-16(fp)
 100fd80:	e17ffd15 	stw	r5,-12(fp)
 100fd84:	e1bffe15 	stw	r6,-8(fp)
 100fd88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
 // alt_u32         next; //9.3.1 patch

  int count                = 0;
 100fd8c:	e03ff915 	stw	zero,-28(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 100fd90:	e0bfff17 	ldw	r2,-4(fp)
 100fd94:	1090000c 	andi	r2,r2,16384
 100fd98:	1005003a 	cmpeq	r2,r2,zero
 100fd9c:	e0bffa15 	stw	r2,-24(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100fda0:	00001906 	br	100fe08 <fifoed_avalon_uart_read+0x9c>
    {
      count++;
 100fda4:	e0bff917 	ldw	r2,-28(fp)
 100fda8:	10800044 	addi	r2,r2,1
 100fdac:	e0bff915 	stw	r2,-28(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 100fdb0:	e0bffc17 	ldw	r2,-16(fp)
 100fdb4:	10c00217 	ldw	r3,8(r2)
 100fdb8:	e0bffc17 	ldw	r2,-16(fp)
 100fdbc:	1885883a 	add	r2,r3,r2
 100fdc0:	10800704 	addi	r2,r2,28
 100fdc4:	10800003 	ldbu	r2,0(r2)
 100fdc8:	1007883a 	mov	r3,r2
 100fdcc:	e0bffd17 	ldw	r2,-12(fp)
 100fdd0:	10c00005 	stb	r3,0(r2)
 100fdd4:	e0bffd17 	ldw	r2,-12(fp)
 100fdd8:	10800044 	addi	r2,r2,1
 100fddc:	e0bffd15 	stw	r2,-12(fp)
      
  //  9.3.1 patch  sp->rx_start = (++sp->rx_start) & FIFOED_AVALON_UART_BUF_MSK;
      ++sp->rx_start;
 100fde0:	e0bffc17 	ldw	r2,-16(fp)
 100fde4:	10800217 	ldw	r2,8(r2)
 100fde8:	10c00044 	addi	r3,r2,1
 100fdec:	e0bffc17 	ldw	r2,-16(fp)
 100fdf0:	10c00215 	stw	r3,8(r2)
      sp->rx_start = sp->rx_start & FIFOED_AVALON_UART_BUF_MSK; 
 100fdf4:	e0bffc17 	ldw	r2,-16(fp)
 100fdf8:	10800217 	ldw	r2,8(r2)
 100fdfc:	10c00fcc 	andi	r3,r2,63
 100fe00:	e0bffc17 	ldw	r2,-16(fp)
 100fe04:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100fe08:	e0fff917 	ldw	r3,-28(fp)
 100fe0c:	e0bffe17 	ldw	r2,-8(fp)
 100fe10:	1880050e 	bge	r3,r2,100fe28 <fifoed_avalon_uart_read+0xbc>
 100fe14:	e0bffc17 	ldw	r2,-16(fp)
 100fe18:	10c00217 	ldw	r3,8(r2)
 100fe1c:	e0bffc17 	ldw	r2,-16(fp)
 100fe20:	10800317 	ldw	r2,12(r2)
 100fe24:	18bfdf1e 	bne	r3,r2,100fda4 <fifoed_avalon_uart_read+0x38>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 100fe28:	e0bff917 	ldw	r2,-28(fp)
 100fe2c:	1004c03a 	cmpne	r2,r2,zero
 100fe30:	1000261e 	bne	r2,zero,100fecc <fifoed_avalon_uart_read+0x160>
 100fe34:	e0bffc17 	ldw	r2,-16(fp)
 100fe38:	10c00217 	ldw	r3,8(r2)
 100fe3c:	e0bffc17 	ldw	r2,-16(fp)
 100fe40:	10800317 	ldw	r2,12(r2)
 100fe44:	1880211e 	bne	r3,r2,100fecc <fifoed_avalon_uart_read+0x160>
    {
      if (!block)
 100fe48:	e0bffa17 	ldw	r2,-24(fp)
 100fe4c:	1004c03a 	cmpne	r2,r2,zero
 100fe50:	1000051e 	bne	r2,zero,100fe68 <fifoed_avalon_uart_read+0xfc>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 100fe54:	100ff600 	call	100ff60 <alt_get_errno>
 100fe58:	1007883a 	mov	r3,r2
 100fe5c:	008002c4 	movi	r2,11
 100fe60:	18800015 	stw	r2,0(r3)
        break;
 100fe64:	00001f06 	br	100fee4 <fifoed_avalon_uart_read+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fe68:	0005303a 	rdctl	r2,status
 100fe6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fe70:	e0fff817 	ldw	r3,-32(fp)
 100fe74:	00bfff84 	movi	r2,-2
 100fe78:	1884703a 	and	r2,r3,r2
 100fe7c:	1001703a 	wrctl	status,r2
  
  return context;
 100fe80:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 100fe84:	e0bffb15 	stw	r2,-20(fp)
       sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 100fe88:	e0bffc17 	ldw	r2,-16(fp)
 100fe8c:	10800117 	ldw	r2,4(r2)
 100fe90:	10c02014 	ori	r3,r2,128
 100fe94:	e0bffc17 	ldw	r2,-16(fp)
 100fe98:	10c00115 	stw	r3,4(r2)
       IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100fe9c:	e0bffc17 	ldw	r2,-16(fp)
 100fea0:	10800017 	ldw	r2,0(r2)
 100fea4:	11000304 	addi	r4,r2,12
 100fea8:	e0bffc17 	ldw	r2,-16(fp)
 100feac:	10800117 	ldw	r2,4(r2)
 100feb0:	1007883a 	mov	r3,r2
 100feb4:	2005883a 	mov	r2,r4
 100feb8:	10c00035 	stwio	r3,0(r2)
 100febc:	e0bffb17 	ldw	r2,-20(fp)
 100fec0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fec4:	e0bff717 	ldw	r2,-36(fp)
 100fec8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 100fecc:	e0bff917 	ldw	r2,-28(fp)
 100fed0:	1004c03a 	cmpne	r2,r2,zero
 100fed4:	1000031e 	bne	r2,zero,100fee4 <fifoed_avalon_uart_read+0x178>
 100fed8:	e0bffe17 	ldw	r2,-8(fp)
 100fedc:	1004c03a 	cmpne	r2,r2,zero
 100fee0:	103fc91e 	bne	r2,zero,100fe08 <fifoed_avalon_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fee4:	0005303a 	rdctl	r2,status
 100fee8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100feec:	e0fff617 	ldw	r3,-40(fp)
 100fef0:	00bfff84 	movi	r2,-2
 100fef4:	1884703a 	and	r2,r3,r2
 100fef8:	1001703a 	wrctl	status,r2
  
  return context;
 100fefc:	e0bff617 	ldw	r2,-40(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 100ff00:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 100ff04:	e0bffc17 	ldw	r2,-16(fp)
 100ff08:	10800117 	ldw	r2,4(r2)
 100ff0c:	10c02014 	ori	r3,r2,128
 100ff10:	e0bffc17 	ldw	r2,-16(fp)
 100ff14:	10c00115 	stw	r3,4(r2)
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100ff18:	e0bffc17 	ldw	r2,-16(fp)
 100ff1c:	10800017 	ldw	r2,0(r2)
 100ff20:	11000304 	addi	r4,r2,12
 100ff24:	e0bffc17 	ldw	r2,-16(fp)
 100ff28:	10800117 	ldw	r2,4(r2)
 100ff2c:	1007883a 	mov	r3,r2
 100ff30:	2005883a 	mov	r2,r4
 100ff34:	10c00035 	stwio	r3,0(r2)
 100ff38:	e0bffb17 	ldw	r2,-20(fp)
 100ff3c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ff40:	e0bff517 	ldw	r2,-44(fp)
 100ff44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
 100ff48:	e0bff917 	ldw	r2,-28(fp)
}
 100ff4c:	e037883a 	mov	sp,fp
 100ff50:	dfc00117 	ldw	ra,4(sp)
 100ff54:	df000017 	ldw	fp,0(sp)
 100ff58:	dec00204 	addi	sp,sp,8
 100ff5c:	f800283a 	ret

0100ff60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ff60:	defffd04 	addi	sp,sp,-12
 100ff64:	dfc00215 	stw	ra,8(sp)
 100ff68:	df000115 	stw	fp,4(sp)
 100ff6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ff70:	00804074 	movhi	r2,257
 100ff74:	108e8a04 	addi	r2,r2,14888
 100ff78:	10800017 	ldw	r2,0(r2)
 100ff7c:	1005003a 	cmpeq	r2,r2,zero
 100ff80:	1000061e 	bne	r2,zero,100ff9c <alt_get_errno+0x3c>
 100ff84:	00804074 	movhi	r2,257
 100ff88:	108e8a04 	addi	r2,r2,14888
 100ff8c:	10800017 	ldw	r2,0(r2)
 100ff90:	103ee83a 	callr	r2
 100ff94:	e0bfff15 	stw	r2,-4(fp)
 100ff98:	00000306 	br	100ffa8 <alt_get_errno+0x48>
 100ff9c:	00804074 	movhi	r2,257
 100ffa0:	10956804 	addi	r2,r2,21920
 100ffa4:	e0bfff15 	stw	r2,-4(fp)
 100ffa8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ffac:	e037883a 	mov	sp,fp
 100ffb0:	dfc00117 	ldw	ra,4(sp)
 100ffb4:	df000017 	ldw	fp,0(sp)
 100ffb8:	dec00204 	addi	sp,sp,8
 100ffbc:	f800283a 	ret

0100ffc0 <fifoed_avalon_uart_write>:
 * transfered to a circular buffer. The interrupt handler is then responsible
 * for copying data from this buffer into the device.
 */

int fifoed_avalon_uart_write (fifoed_avalon_uart_state* sp, const char* ptr, int len, int flags)
{
 100ffc0:	defff204 	addi	sp,sp,-56
 100ffc4:	dfc00d15 	stw	ra,52(sp)
 100ffc8:	df000c15 	stw	fp,48(sp)
 100ffcc:	df000c04 	addi	fp,sp,48
 100ffd0:	e13ffc15 	stw	r4,-16(fp)
 100ffd4:	e17ffd15 	stw	r5,-12(fp)
 100ffd8:	e1bffe15 	stw	r6,-8(fp)
 100ffdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int count                = len;
 100ffe0:	e0bffe17 	ldw	r2,-8(fp)
 100ffe4:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 100ffe8:	e0bfff17 	ldw	r2,-4(fp)
 100ffec:	1090000c 	andi	r2,r2,16384
 100fff0:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 100fff4:	00004006 	br	10100f8 <fifoed_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 100fff8:	e0bffc17 	ldw	r2,-16(fp)
 100fffc:	10800517 	ldw	r2,20(r2)
 1010000:	10800044 	addi	r2,r2,1
 1010004:	10800fcc 	andi	r2,r2,63
 1010008:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 101000c:	e0bffc17 	ldw	r2,-16(fp)
 1010010:	10c00417 	ldw	r3,16(r2)
 1010014:	e0bff917 	ldw	r2,-28(fp)
 1010018:	1880251e 	bne	r3,r2,10100b0 <fifoed_avalon_uart_write+0xf0>
    {
      if (no_block)
 101001c:	e0bffa17 	ldw	r2,-24(fp)
 1010020:	1005003a 	cmpeq	r2,r2,zero
 1010024:	1000051e 	bne	r2,zero,101003c <fifoed_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 1010028:	100ff600 	call	100ff60 <alt_get_errno>
 101002c:	1007883a 	mov	r3,r2
 1010030:	008002c4 	movi	r2,11
 1010034:	18800015 	stw	r2,0(r3)
        break;
 1010038:	00003206 	br	1010104 <fifoed_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101003c:	0005303a 	rdctl	r2,status
 1010040:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010044:	e0fff717 	ldw	r3,-36(fp)
 1010048:	00bfff84 	movi	r2,-2
 101004c:	1884703a 	and	r2,r3,r2
 1010050:	1001703a 	wrctl	status,r2
  
  return context;
 1010054:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 1010058:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 101005c:	e0bffc17 	ldw	r2,-16(fp)
 1010060:	10800117 	ldw	r2,4(r2)
 1010064:	10c11014 	ori	r3,r2,1088
 1010068:	e0bffc17 	ldw	r2,-16(fp)
 101006c:	10c00115 	stw	r3,4(r2)
                        FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1010070:	e0bffc17 	ldw	r2,-16(fp)
 1010074:	10800017 	ldw	r2,0(r2)
 1010078:	11000304 	addi	r4,r2,12
 101007c:	e0bffc17 	ldw	r2,-16(fp)
 1010080:	10800117 	ldw	r2,4(r2)
 1010084:	1007883a 	mov	r3,r2
 1010088:	2005883a 	mov	r2,r4
 101008c:	10c00035 	stwio	r3,0(r2)
 1010090:	e0bffb17 	ldw	r2,-20(fp)
 1010094:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010098:	e0bff617 	ldw	r2,-40(fp)
 101009c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events,
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 10100a0:	e0bffc17 	ldw	r2,-16(fp)
 10100a4:	10c00417 	ldw	r3,16(r2)
 10100a8:	e0bff917 	ldw	r2,-28(fp)
 10100ac:	18bffc26 	beq	r3,r2,10100a0 <fifoed_avalon_uart_write+0xe0>
      }
    }

    count--;
 10100b0:	e0bff817 	ldw	r2,-32(fp)
 10100b4:	10bfffc4 	addi	r2,r2,-1
 10100b8:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 10100bc:	e0bffc17 	ldw	r2,-16(fp)
 10100c0:	10c00517 	ldw	r3,20(r2)
 10100c4:	e0bffd17 	ldw	r2,-12(fp)
 10100c8:	10800003 	ldbu	r2,0(r2)
 10100cc:	1009883a 	mov	r4,r2
 10100d0:	e0bffc17 	ldw	r2,-16(fp)
 10100d4:	1885883a 	add	r2,r3,r2
 10100d8:	10801704 	addi	r2,r2,92
 10100dc:	11000005 	stb	r4,0(r2)
 10100e0:	e0bffd17 	ldw	r2,-12(fp)
 10100e4:	10800044 	addi	r2,r2,1
 10100e8:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 10100ec:	e0fffc17 	ldw	r3,-16(fp)
 10100f0:	e0bff917 	ldw	r2,-28(fp)
 10100f4:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 10100f8:	e0bff817 	ldw	r2,-32(fp)
 10100fc:	1004c03a 	cmpne	r2,r2,zero
 1010100:	103fbd1e 	bne	r2,zero,100fff8 <fifoed_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010104:	0005303a 	rdctl	r2,status
 1010108:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101010c:	e0fff517 	ldw	r3,-44(fp)
 1010110:	00bfff84 	movi	r2,-2
 1010114:	1884703a 	and	r2,r3,r2
 1010118:	1001703a 	wrctl	status,r2
  
  return context;
 101011c:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 1010120:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 1010124:	e0bffc17 	ldw	r2,-16(fp)
 1010128:	10800117 	ldw	r2,4(r2)
 101012c:	10c11014 	ori	r3,r2,1088
 1010130:	e0bffc17 	ldw	r2,-16(fp)
 1010134:	10c00115 	stw	r3,4(r2)
                 FIFOED_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1010138:	e0bffc17 	ldw	r2,-16(fp)
 101013c:	10800017 	ldw	r2,0(r2)
 1010140:	11000304 	addi	r4,r2,12
 1010144:	e0bffc17 	ldw	r2,-16(fp)
 1010148:	10800117 	ldw	r2,4(r2)
 101014c:	1007883a 	mov	r3,r2
 1010150:	2005883a 	mov	r2,r4
 1010154:	10c00035 	stwio	r3,0(r2)
 1010158:	e0bffb17 	ldw	r2,-20(fp)
 101015c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010160:	e0bff417 	ldw	r2,-48(fp)
 1010164:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 1010168:	e0fffe17 	ldw	r3,-8(fp)
 101016c:	e0bff817 	ldw	r2,-32(fp)
 1010170:	1885c83a 	sub	r2,r3,r2
}
 1010174:	e037883a 	mov	sp,fp
 1010178:	dfc00117 	ldw	ra,4(sp)
 101017c:	df000017 	ldw	fp,0(sp)
 1010180:	dec00204 	addi	sp,sp,8
 1010184:	f800283a 	ret

01010188 <fifoed_avalon_uart_rxirq>:
 * dat ready to be processed.
 */

static void fifoed_avalon_uart_rxirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
 1010188:	defffc04 	addi	sp,sp,-16
 101018c:	df000315 	stw	fp,12(sp)
 1010190:	df000304 	addi	fp,sp,12
 1010194:	e13ffe15 	stw	r4,-8(fp)
 1010198:	e17fff15 	stw	r5,-4(fp)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
 101019c:	00002f06 	br	101025c <fifoed_avalon_uart_rxirq+0xd4>
  if (sp->rx_end == sp->rx_start)
 10101a0:	e0bffe17 	ldw	r2,-8(fp)
 10101a4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 10101a8:	e0bffe17 	ldw	r2,-8(fp)
 10101ac:	10800317 	ldw	r2,12(r2)
 10101b0:	10800044 	addi	r2,r2,1
 10101b4:	10800fcc 	andi	r2,r2,63
 10101b8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_FIFOED_AVALON_UART_RXDATA(sp->base);
 10101bc:	e0bffe17 	ldw	r2,-8(fp)
 10101c0:	11000317 	ldw	r4,12(r2)
 10101c4:	e0bffe17 	ldw	r2,-8(fp)
 10101c8:	10800017 	ldw	r2,0(r2)
 10101cc:	10800037 	ldwio	r2,0(r2)
 10101d0:	1007883a 	mov	r3,r2
 10101d4:	e0bffe17 	ldw	r2,-8(fp)
 10101d8:	2085883a 	add	r2,r4,r2
 10101dc:	10800704 	addi	r2,r2,28
 10101e0:	10c00005 	stb	r3,0(r2)
  /* If there was an error, discard the data */

// i have left this in tack but it is not necissarily right.
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
 10101e4:	e0bfff17 	ldw	r2,-4(fp)
 10101e8:	108000cc 	andi	r2,r2,3
 10101ec:	1004c03a 	cmpne	r2,r2,zero
 10101f0:	1000211e 	bne	r2,zero,1010278 <fifoed_avalon_uart_rxirq+0xf0>
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  }

  sp->rx_end = next;
 10101f4:	e0fffe17 	ldw	r3,-8(fp)
 10101f8:	e0bffd17 	ldw	r2,-12(fp)
 10101fc:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 1010200:	e0bffe17 	ldw	r2,-8(fp)
 1010204:	10800317 	ldw	r2,12(r2)
 1010208:	10800044 	addi	r2,r2,1
 101020c:	10800fcc 	andi	r2,r2,63
 1010210:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 1010214:	e0bffe17 	ldw	r2,-8(fp)
 1010218:	10c00217 	ldw	r3,8(r2)
 101021c:	e0bffd17 	ldw	r2,-12(fp)
 1010220:	18800e1e 	bne	r3,r2,101025c <fifoed_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 1010224:	e0bffe17 	ldw	r2,-8(fp)
 1010228:	10c00117 	ldw	r3,4(r2)
 101022c:	00bfdfc4 	movi	r2,-129
 1010230:	1886703a 	and	r3,r3,r2
 1010234:	e0bffe17 	ldw	r2,-8(fp)
 1010238:	10c00115 	stw	r3,4(r2)
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 101023c:	e0bffe17 	ldw	r2,-8(fp)
 1010240:	10800017 	ldw	r2,0(r2)
 1010244:	11000304 	addi	r4,r2,12
 1010248:	e0bffe17 	ldw	r2,-8(fp)
 101024c:	10800117 	ldw	r2,4(r2)
 1010250:	1007883a 	mov	r3,r2
 1010254:	2005883a 	mov	r2,r4
 1010258:	10c00035 	stwio	r3,0(r2)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
 101025c:	e0bffe17 	ldw	r2,-8(fp)
 1010260:	10800017 	ldw	r2,0(r2)
 1010264:	10800204 	addi	r2,r2,8
 1010268:	10800037 	ldwio	r2,0(r2)
 101026c:	1080200c 	andi	r2,r2,128
 1010270:	1004c03a 	cmpne	r2,r2,zero
 1010274:	103fca1e 	bne	r2,zero,10101a0 <fifoed_avalon_uart_rxirq+0x18>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  }   
}
}
 1010278:	e037883a 	mov	sp,fp
 101027c:	df000017 	ldw	fp,0(sp)
 1010280:	dec00104 	addi	sp,sp,4
 1010284:	f800283a 	ret

01010288 <fifoed_avalon_uart_txirq>:
 * data ready to be processed.
 */

static void fifoed_avalon_uart_txirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
 1010288:	defffd04 	addi	sp,sp,-12
 101028c:	df000215 	stw	fp,8(sp)
 1010290:	df000204 	addi	fp,sp,8
 1010294:	e13ffe15 	stw	r4,-8(fp)
 1010298:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 101029c:	e0bffe17 	ldw	r2,-8(fp)
 10102a0:	10c00417 	ldw	r3,16(r2)
 10102a4:	e0bffe17 	ldw	r2,-8(fp)
 10102a8:	10800517 	ldw	r2,20(r2)
 10102ac:	18804326 	beq	r3,r2,10103bc <fifoed_avalon_uart_txirq+0x134>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
 10102b0:	e0bffe17 	ldw	r2,-8(fp)
 10102b4:	10800617 	ldw	r2,24(r2)
 10102b8:	1080008c 	andi	r2,r2,2
 10102bc:	1005003a 	cmpeq	r2,r2,zero
 10102c0:	1000041e 	bne	r2,zero,10102d4 <fifoed_avalon_uart_txirq+0x4c>
 10102c4:	e0bfff17 	ldw	r2,-4(fp)
 10102c8:	1082000c 	andi	r2,r2,2048
 10102cc:	1005003a 	cmpeq	r2,r2,zero
 10102d0:	10002b1e 	bne	r2,zero,1010380 <fifoed_avalon_uart_txirq+0xf8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK))
 10102d4:	e0bffe17 	ldw	r2,-8(fp)
 10102d8:	10800417 	ldw	r2,16(r2)
 10102dc:	00001606 	br	1010338 <fifoed_avalon_uart_txirq+0xb0>
      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
          {
              IOWR_FIFOED_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 10102e0:	e0bffe17 	ldw	r2,-8(fp)
 10102e4:	10800017 	ldw	r2,0(r2)
 10102e8:	11000104 	addi	r4,r2,4
 10102ec:	e0bffe17 	ldw	r2,-8(fp)
 10102f0:	10c00417 	ldw	r3,16(r2)
 10102f4:	e0bffe17 	ldw	r2,-8(fp)
 10102f8:	1885883a 	add	r2,r3,r2
 10102fc:	10801704 	addi	r2,r2,92
 1010300:	10800003 	ldbu	r2,0(r2)
 1010304:	10c03fcc 	andi	r3,r2,255
 1010308:	2005883a 	mov	r2,r4
 101030c:	10c00035 	stwio	r3,0(r2)

              sp->tx_start = (++sp->tx_start) & FIFOED_AVALON_UART_BUF_MSK;
 1010310:	e0bffe17 	ldw	r2,-8(fp)
 1010314:	10800417 	ldw	r2,16(r2)
 1010318:	10c00044 	addi	r3,r2,1
 101031c:	e0bffe17 	ldw	r2,-8(fp)
 1010320:	10c00415 	stw	r3,16(r2)
 1010324:	e0bffe17 	ldw	r2,-8(fp)
 1010328:	10800417 	ldw	r2,16(r2)
 101032c:	10c00fcc 	andi	r3,r2,63
 1010330:	e0bffe17 	ldw	r2,-8(fp)
 1010334:	10c00415 	stw	r3,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
 1010338:	e0bffe17 	ldw	r2,-8(fp)
 101033c:	10c00417 	ldw	r3,16(r2)
 1010340:	e0bffe17 	ldw	r2,-8(fp)
 1010344:	10800517 	ldw	r2,20(r2)
 1010348:	18800726 	beq	r3,r2,1010368 <fifoed_avalon_uart_txirq+0xe0>
 101034c:	e0bffe17 	ldw	r2,-8(fp)
 1010350:	10800017 	ldw	r2,0(r2)
 1010354:	10800204 	addi	r2,r2,8
 1010358:	10800037 	ldwio	r2,0(r2)
 101035c:	1080100c 	andi	r2,r2,64
 1010360:	1004c03a 	cmpne	r2,r2,zero
 1010364:	103fde1e 	bne	r2,zero,10102e0 <fifoed_avalon_uart_txirq+0x58>
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
 1010368:	e0bffe17 	ldw	r2,-8(fp)
 101036c:	10800117 	ldw	r2,4(r2)
 1010370:	10c01014 	ori	r3,r2,64
 1010374:	e0bffe17 	ldw	r2,-8(fp)
 1010378:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
 101037c:	00000f06 	br	10103bc <fifoed_avalon_uart_txirq+0x134>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_FIFOED_AVALON_UART_STATUS(sp->base);
 1010380:	e0bffe17 	ldw	r2,-8(fp)
 1010384:	10800017 	ldw	r2,0(r2)
 1010388:	10800204 	addi	r2,r2,8
 101038c:	10800037 	ldwio	r2,0(r2)
 1010390:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
 1010394:	e0bfff17 	ldw	r2,-4(fp)
 1010398:	1082000c 	andi	r2,r2,2048
 101039c:	1004c03a 	cmpne	r2,r2,zero
 10103a0:	1000061e 	bne	r2,zero,10103bc <fifoed_avalon_uart_txirq+0x134>
      {
        sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
 10103a4:	e0bffe17 	ldw	r2,-8(fp)
 10103a8:	10c00117 	ldw	r3,4(r2)
 10103ac:	00bfefc4 	movi	r2,-65
 10103b0:	1886703a 	and	r3,r3,r2
 10103b4:	e0bffe17 	ldw	r2,-8(fp)
 10103b8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 10103bc:	e0bffe17 	ldw	r2,-8(fp)
 10103c0:	10c00417 	ldw	r3,16(r2)
 10103c4:	e0bffe17 	ldw	r2,-8(fp)
 10103c8:	10800517 	ldw	r2,20(r2)
 10103cc:	1880061e 	bne	r3,r2,10103e8 <fifoed_avalon_uart_txirq+0x160>
  {
    sp->ctrl &= ~(FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 10103d0:	e0bffe17 	ldw	r2,-8(fp)
 10103d4:	10c00117 	ldw	r3,4(r2)
 10103d8:	00beefc4 	movi	r2,-1089
 10103dc:	1886703a 	and	r3,r3,r2
 10103e0:	e0bffe17 	ldw	r2,-8(fp)
 10103e4:	10c00115 	stw	r3,4(r2)
                    FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 10103e8:	e0bffe17 	ldw	r2,-8(fp)
 10103ec:	10800017 	ldw	r2,0(r2)
 10103f0:	11000304 	addi	r4,r2,12
 10103f4:	e0bffe17 	ldw	r2,-8(fp)
 10103f8:	10800117 	ldw	r2,4(r2)
 10103fc:	1007883a 	mov	r3,r2
 1010400:	2005883a 	mov	r2,r4
 1010404:	10c00035 	stwio	r3,0(r2)
}
 1010408:	e037883a 	mov	sp,fp
 101040c:	df000017 	ldw	fp,0(sp)
 1010410:	dec00104 	addi	sp,sp,4
 1010414:	f800283a 	ret

01010418 <fifoed_avalon_uart_irq>:
 #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void fifoed_avalon_uart_irq(void* context)
#else
static void fifoed_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 1010418:	defffa04 	addi	sp,sp,-24
 101041c:	dfc00515 	stw	ra,20(sp)
 1010420:	df000415 	stw	fp,16(sp)
 1010424:	df000404 	addi	fp,sp,16
 1010428:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  fifoed_avalon_uart_state* sp = (fifoed_avalon_uart_state*) context;
 101042c:	e0bfff17 	ldw	r2,-4(fp)
 1010430:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 1010434:	e0bffd17 	ldw	r2,-12(fp)
 1010438:	10800017 	ldw	r2,0(r2)
 101043c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_FIFOED_AVALON_UART_STATUS(base);
 1010440:	e0bffc17 	ldw	r2,-16(fp)
 1010444:	10800204 	addi	r2,r2,8
 1010448:	10800037 	ldwio	r2,0(r2)
 101044c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */

  IOWR_FIFOED_AVALON_UART_STATUS(base, 0);
 1010450:	e0bffc17 	ldw	r2,-16(fp)
 1010454:	10800204 	addi	r2,r2,8
 1010458:	10000035 	stwio	zero,0(r2)

  /* process a read irq */
 
  if (status & FIFOED_AVALON_UART_STATUS_RRDY_MSK)
 101045c:	e0bffe17 	ldw	r2,-8(fp)
 1010460:	1080200c 	andi	r2,r2,128
 1010464:	1005003a 	cmpeq	r2,r2,zero
 1010468:	1000031e 	bne	r2,zero,1010478 <fifoed_avalon_uart_irq+0x60>
  {
    fifoed_avalon_uart_rxirq (sp, status);
 101046c:	e13ffd17 	ldw	r4,-12(fp)
 1010470:	e17ffe17 	ldw	r5,-8(fp)
 1010474:	10101880 	call	1010188 <fifoed_avalon_uart_rxirq>
  }

  /* process a write irq */

  if (status & (FIFOED_AVALON_UART_STATUS_TRDY_MSK | 
 1010478:	e0bffe17 	ldw	r2,-8(fp)
 101047c:	1081100c 	andi	r2,r2,1088
 1010480:	1005003a 	cmpeq	r2,r2,zero
 1010484:	1000031e 	bne	r2,zero,1010494 <fifoed_avalon_uart_irq+0x7c>
                  FIFOED_AVALON_UART_STATUS_DCTS_MSK))
  {
    fifoed_avalon_uart_txirq (sp, status);
 1010488:	e13ffd17 	ldw	r4,-12(fp)
 101048c:	e17ffe17 	ldw	r5,-8(fp)
 1010490:	10102880 	call	1010288 <fifoed_avalon_uart_txirq>
  }
}
 1010494:	e037883a 	mov	sp,fp
 1010498:	dfc00117 	ldw	ra,4(sp)
 101049c:	df000017 	ldw	fp,0(sp)
 10104a0:	dec00204 	addi	sp,sp,8
 10104a4:	f800283a 	ret

010104a8 <fifoed_avalon_uart_init>:
 * through a call to alt_dev_reg().
 */

void fifoed_avalon_uart_init (fifoed_avalon_uart_state* sp,alt_u32 irq_controller_id,
      alt_u32 irq)
{
 10104a8:	defff704 	addi	sp,sp,-36
 10104ac:	dfc00815 	stw	ra,32(sp)
 10104b0:	df000715 	stw	fp,28(sp)
 10104b4:	df000704 	addi	fp,sp,28
 10104b8:	e13ffc15 	stw	r4,-16(fp)
 10104bc:	e17ffd15 	stw	r5,-12(fp)
 10104c0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 10104c4:	e0bffc17 	ldw	r2,-16(fp)
 10104c8:	10800017 	ldw	r2,0(r2)
 10104cc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 10104d0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
 10104d4:	1004c03a 	cmpne	r2,r2,zero
 10104d8:	1000061e 	bne	r2,zero,10104f4 <fifoed_avalon_uart_init+0x4c>
 10104dc:	0005883a 	mov	r2,zero
 10104e0:	1004c03a 	cmpne	r2,r2,zero
 10104e4:	1000031e 	bne	r2,zero,10104f4 <fifoed_avalon_uart_init+0x4c>
 10104e8:	0005883a 	mov	r2,zero
 10104ec:	1005003a 	cmpeq	r2,r2,zero
 10104f0:	1000031e 	bne	r2,zero,1010500 <fifoed_avalon_uart_init+0x58>
 10104f4:	00800044 	movi	r2,1
 10104f8:	e0bfff15 	stw	r2,-4(fp)
 10104fc:	00000106 	br	1010504 <fifoed_avalon_uart_init+0x5c>
 1010500:	e03fff15 	stw	zero,-4(fp)
 1010504:	e0bfff17 	ldw	r2,-4(fp)
 1010508:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 101050c:	e0bffa17 	ldw	r2,-24(fp)
 1010510:	1004c03a 	cmpne	r2,r2,zero
 1010514:	1000111e 	bne	r2,zero,101055c <fifoed_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */

    sp->ctrl = FIFOED_AVALON_UART_CONTROL_RTS_MSK  |
 1010518:	e0fffc17 	ldw	r3,-16(fp)
 101051c:	00832004 	movi	r2,3200
 1010520:	18800115 	stw	r2,4(r3)
                FIFOED_AVALON_UART_CONTROL_RRDY_MSK |
                FIFOED_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_FIFOED_AVALON_UART_CONTROL(base, sp->ctrl);
 1010524:	e0bffb17 	ldw	r2,-20(fp)
 1010528:	11000304 	addi	r4,r2,12
 101052c:	e0bffc17 	ldw	r2,-16(fp)
 1010530:	10800117 	ldw	r2,4(r2)
 1010534:	1007883a 	mov	r3,r2
 1010538:	2005883a 	mov	r2,r4
 101053c:	10c00035 	stwio	r3,0(r2)

    /* register the interrupt handler */

//    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, fifoed_avalon_uart_irq, sp,
 1010540:	d8000015 	stw	zero,0(sp)
 1010544:	e13ffd17 	ldw	r4,-12(fp)
 1010548:	e17ffe17 	ldw	r5,-8(fp)
 101054c:	01804074 	movhi	r6,257
 1010550:	31810604 	addi	r6,r6,1048
 1010554:	e1fffc17 	ldw	r7,-16(fp)
 1010558:	1010d4c0 	call	1010d4c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#endif
  }
}
 101055c:	e037883a 	mov	sp,fp
 1010560:	dfc00117 	ldw	ra,4(sp)
 1010564:	df000017 	ldw	fp,0(sp)
 1010568:	dec00204 	addi	sp,sp,8
 101056c:	f800283a 	ret

01010570 <fifoed_avalon_uart_classic_read>:
extern int fifoed_avalon_uart_ioctl(fifoed_avalon_uart_state* sp,
  int req, void* arg);

int fifoed_avalon_uart_classic_read(fifoed_avalon_uart_state* sp,
  char* buffer, int space, int flags)
  {
 1010570:	defffa04 	addi	sp,sp,-24
 1010574:	dfc00515 	stw	ra,20(sp)
 1010578:	df000415 	stw	fp,16(sp)
 101057c:	df000404 	addi	fp,sp,16
 1010580:	e13ffc15 	stw	r4,-16(fp)
 1010584:	e17ffd15 	stw	r5,-12(fp)
 1010588:	e1bffe15 	stw	r6,-8(fp)
 101058c:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_read( sp,
 1010590:	e13ffc17 	ldw	r4,-16(fp)
 1010594:	e17ffd17 	ldw	r5,-12(fp)
 1010598:	e1bffe17 	ldw	r6,-8(fp)
 101059c:	e1ffff17 	ldw	r7,-4(fp)
 10105a0:	100fd6c0 	call	100fd6c <fifoed_avalon_uart_read>
  buffer, space,  flags);
  }
 10105a4:	e037883a 	mov	sp,fp
 10105a8:	dfc00117 	ldw	ra,4(sp)
 10105ac:	df000017 	ldw	fp,0(sp)
 10105b0:	dec00204 	addi	sp,sp,8
 10105b4:	f800283a 	ret

010105b8 <fifoed_avalon_uart_classic_write>:

  int fifoed_avalon_uart_classic_write(fifoed_avalon_uart_state* sp,
  const char* ptr, int count, int flags)
  {
 10105b8:	defffa04 	addi	sp,sp,-24
 10105bc:	dfc00515 	stw	ra,20(sp)
 10105c0:	df000415 	stw	fp,16(sp)
 10105c4:	df000404 	addi	fp,sp,16
 10105c8:	e13ffc15 	stw	r4,-16(fp)
 10105cc:	e17ffd15 	stw	r5,-12(fp)
 10105d0:	e1bffe15 	stw	r6,-8(fp)
 10105d4:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_write( sp,
 10105d8:	e13ffc17 	ldw	r4,-16(fp)
 10105dc:	e17ffd17 	ldw	r5,-12(fp)
 10105e0:	e1bffe17 	ldw	r6,-8(fp)
 10105e4:	e1ffff17 	ldw	r7,-4(fp)
 10105e8:	100ffc00 	call	100ffc0 <fifoed_avalon_uart_write>
  ptr, count,  flags);
  }
 10105ec:	e037883a 	mov	sp,fp
 10105f0:	dfc00117 	ldw	ra,4(sp)
 10105f4:	df000017 	ldw	fp,0(sp)
 10105f8:	dec00204 	addi	sp,sp,8
 10105fc:	f800283a 	ret

01010600 <fifoed_avalon_uart_read_fd>:
 *
 */

int
fifoed_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1010600:	defffa04 	addi	sp,sp,-24
 1010604:	dfc00515 	stw	ra,20(sp)
 1010608:	df000415 	stw	fp,16(sp)
 101060c:	df000404 	addi	fp,sp,16
 1010610:	e13ffd15 	stw	r4,-12(fp)
 1010614:	e17ffe15 	stw	r5,-8(fp)
 1010618:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 101061c:	e0bffd17 	ldw	r2,-12(fp)
 1010620:	10800017 	ldw	r2,0(r2)
 1010624:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
 1010628:	e0bffc17 	ldw	r2,-16(fp)
 101062c:	11000a04 	addi	r4,r2,40
 1010630:	e0bffd17 	ldw	r2,-12(fp)
 1010634:	11c00217 	ldw	r7,8(r2)
 1010638:	e17ffe17 	ldw	r5,-8(fp)
 101063c:	e1bfff17 	ldw	r6,-4(fp)
 1010640:	100fd6c0 	call	100fd6c <fifoed_avalon_uart_read>
      fd->fd_flags);
}
 1010644:	e037883a 	mov	sp,fp
 1010648:	dfc00117 	ldw	ra,4(sp)
 101064c:	df000017 	ldw	fp,0(sp)
 1010650:	dec00204 	addi	sp,sp,8
 1010654:	f800283a 	ret

01010658 <fifoed_avalon_uart_write_fd>:

int
fifoed_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1010658:	defffa04 	addi	sp,sp,-24
 101065c:	dfc00515 	stw	ra,20(sp)
 1010660:	df000415 	stw	fp,16(sp)
 1010664:	df000404 	addi	fp,sp,16
 1010668:	e13ffd15 	stw	r4,-12(fp)
 101066c:	e17ffe15 	stw	r5,-8(fp)
 1010670:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 1010674:	e0bffd17 	ldw	r2,-12(fp)
 1010678:	10800017 	ldw	r2,0(r2)
 101067c:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
 1010680:	e0bffc17 	ldw	r2,-16(fp)
 1010684:	11000a04 	addi	r4,r2,40
 1010688:	e0bffd17 	ldw	r2,-12(fp)
 101068c:	11c00217 	ldw	r7,8(r2)
 1010690:	e17ffe17 	ldw	r5,-8(fp)
 1010694:	e1bfff17 	ldw	r6,-4(fp)
 1010698:	100ffc00 	call	100ffc0 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
 101069c:	e037883a 	mov	sp,fp
 10106a0:	dfc00117 	ldw	ra,4(sp)
 10106a4:	df000017 	ldw	fp,0(sp)
 10106a8:	dec00204 	addi	sp,sp,8
 10106ac:	f800283a 	ret

010106b0 <fifoed_avalon_uart_classic_read_fd>:
int
 fifoed_avalon_uart_classic_read_fd(alt_fd* fd, char* buffer, int space)
{
 10106b0:	defffa04 	addi	sp,sp,-24
 10106b4:	dfc00515 	stw	ra,20(sp)
 10106b8:	df000415 	stw	fp,16(sp)
 10106bc:	df000404 	addi	fp,sp,16
 10106c0:	e13ffd15 	stw	r4,-12(fp)
 10106c4:	e17ffe15 	stw	r5,-8(fp)
 10106c8:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 10106cc:	e0bffd17 	ldw	r2,-12(fp)
 10106d0:	10800017 	ldw	r2,0(r2)
 10106d4:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
 10106d8:	e0bffc17 	ldw	r2,-16(fp)
 10106dc:	11000a04 	addi	r4,r2,40
 10106e0:	e0bffd17 	ldw	r2,-12(fp)
 10106e4:	11c00217 	ldw	r7,8(r2)
 10106e8:	e17ffe17 	ldw	r5,-8(fp)
 10106ec:	e1bfff17 	ldw	r6,-4(fp)
 10106f0:	100fd6c0 	call	100fd6c <fifoed_avalon_uart_read>
      fd->fd_flags);
}
 10106f4:	e037883a 	mov	sp,fp
 10106f8:	dfc00117 	ldw	ra,4(sp)
 10106fc:	df000017 	ldw	fp,0(sp)
 1010700:	dec00204 	addi	sp,sp,8
 1010704:	f800283a 	ret

01010708 <fifoed_avalon_uart_classic_write_fd>:

int
fifoed_avalon_uart_classic_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1010708:	defffa04 	addi	sp,sp,-24
 101070c:	dfc00515 	stw	ra,20(sp)
 1010710:	df000415 	stw	fp,16(sp)
 1010714:	df000404 	addi	fp,sp,16
 1010718:	e13ffd15 	stw	r4,-12(fp)
 101071c:	e17ffe15 	stw	r5,-8(fp)
 1010720:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 1010724:	e0bffd17 	ldw	r2,-12(fp)
 1010728:	10800017 	ldw	r2,0(r2)
 101072c:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
 1010730:	e0bffc17 	ldw	r2,-16(fp)
 1010734:	11000a04 	addi	r4,r2,40
 1010738:	e0bffd17 	ldw	r2,-12(fp)
 101073c:	11c00217 	ldw	r7,8(r2)
 1010740:	e17ffe17 	ldw	r5,-8(fp)
 1010744:	e1bfff17 	ldw	r6,-4(fp)
 1010748:	100ffc00 	call	100ffc0 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
 101074c:	e037883a 	mov	sp,fp
 1010750:	dfc00117 	ldw	ra,4(sp)
 1010754:	df000017 	ldw	fp,0(sp)
 1010758:	dec00204 	addi	sp,sp,8
 101075c:	f800283a 	ret

01010760 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1010760:	defff404 	addi	sp,sp,-48
 1010764:	df000b15 	stw	fp,44(sp)
 1010768:	df000b04 	addi	fp,sp,44
 101076c:	e13ffb15 	stw	r4,-20(fp)
 1010770:	e17ffc15 	stw	r5,-16(fp)
 1010774:	e1bffd15 	stw	r6,-12(fp)
 1010778:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 101077c:	e03ff915 	stw	zero,-28(fp)
 1010780:	00804074 	movhi	r2,257
 1010784:	10957304 	addi	r2,r2,21964
 1010788:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 101078c:	1005003a 	cmpeq	r2,r2,zero
 1010790:	1000411e 	bne	r2,zero,1010898 <alt_alarm_start+0x138>
  {
    if (alarm)
 1010794:	e0bffb17 	ldw	r2,-20(fp)
 1010798:	1005003a 	cmpeq	r2,r2,zero
 101079c:	10003b1e 	bne	r2,zero,101088c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10107a0:	e0fffb17 	ldw	r3,-20(fp)
 10107a4:	e0bffd17 	ldw	r2,-12(fp)
 10107a8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10107ac:	e0fffb17 	ldw	r3,-20(fp)
 10107b0:	e0bffe17 	ldw	r2,-8(fp)
 10107b4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10107b8:	0005303a 	rdctl	r2,status
 10107bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10107c0:	e0fff817 	ldw	r3,-32(fp)
 10107c4:	00bfff84 	movi	r2,-2
 10107c8:	1884703a 	and	r2,r3,r2
 10107cc:	1001703a 	wrctl	status,r2
  
  return context;
 10107d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10107d4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10107d8:	00804074 	movhi	r2,257
 10107dc:	10957404 	addi	r2,r2,21968
 10107e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10107e4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10107e8:	e0fffc17 	ldw	r3,-16(fp)
 10107ec:	e0bff917 	ldw	r2,-28(fp)
 10107f0:	1885883a 	add	r2,r3,r2
 10107f4:	10c00044 	addi	r3,r2,1
 10107f8:	e0bffb17 	ldw	r2,-20(fp)
 10107fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010800:	e0bffb17 	ldw	r2,-20(fp)
 1010804:	10c00217 	ldw	r3,8(r2)
 1010808:	e0bff917 	ldw	r2,-28(fp)
 101080c:	1880042e 	bgeu	r3,r2,1010820 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1010810:	e0fffb17 	ldw	r3,-20(fp)
 1010814:	00800044 	movi	r2,1
 1010818:	18800405 	stb	r2,16(r3)
 101081c:	00000206 	br	1010828 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1010820:	e0bffb17 	ldw	r2,-20(fp)
 1010824:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010828:	e0fffb17 	ldw	r3,-20(fp)
 101082c:	00804074 	movhi	r2,257
 1010830:	108e8d04 	addi	r2,r2,14900
 1010834:	e0bff615 	stw	r2,-40(fp)
 1010838:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101083c:	e0fff717 	ldw	r3,-36(fp)
 1010840:	e0bff617 	ldw	r2,-40(fp)
 1010844:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010848:	e0bff617 	ldw	r2,-40(fp)
 101084c:	10c00017 	ldw	r3,0(r2)
 1010850:	e0bff717 	ldw	r2,-36(fp)
 1010854:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010858:	e0bff617 	ldw	r2,-40(fp)
 101085c:	10c00017 	ldw	r3,0(r2)
 1010860:	e0bff717 	ldw	r2,-36(fp)
 1010864:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010868:	e0fff617 	ldw	r3,-40(fp)
 101086c:	e0bff717 	ldw	r2,-36(fp)
 1010870:	18800015 	stw	r2,0(r3)
 1010874:	e0bffa17 	ldw	r2,-24(fp)
 1010878:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101087c:	e0bff517 	ldw	r2,-44(fp)
 1010880:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1010884:	e03fff15 	stw	zero,-4(fp)
 1010888:	00000506 	br	10108a0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 101088c:	00bffa84 	movi	r2,-22
 1010890:	e0bfff15 	stw	r2,-4(fp)
 1010894:	00000206 	br	10108a0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1010898:	00bfde84 	movi	r2,-134
 101089c:	e0bfff15 	stw	r2,-4(fp)
 10108a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10108a4:	e037883a 	mov	sp,fp
 10108a8:	df000017 	ldw	fp,0(sp)
 10108ac:	dec00104 	addi	sp,sp,4
 10108b0:	f800283a 	ret

010108b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10108b4:	deffff04 	addi	sp,sp,-4
 10108b8:	df000015 	stw	fp,0(sp)
 10108bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10108c0:	e037883a 	mov	sp,fp
 10108c4:	df000017 	ldw	fp,0(sp)
 10108c8:	dec00104 	addi	sp,sp,4
 10108cc:	f800283a 	ret

010108d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10108d0:	defff904 	addi	sp,sp,-28
 10108d4:	dfc00615 	stw	ra,24(sp)
 10108d8:	df000515 	stw	fp,20(sp)
 10108dc:	df000504 	addi	fp,sp,20
 10108e0:	e13ffd15 	stw	r4,-12(fp)
 10108e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10108e8:	e0bffd17 	ldw	r2,-12(fp)
 10108ec:	1005003a 	cmpeq	r2,r2,zero
 10108f0:	1000041e 	bne	r2,zero,1010904 <alt_dev_llist_insert+0x34>
 10108f4:	e0bffd17 	ldw	r2,-12(fp)
 10108f8:	10800217 	ldw	r2,8(r2)
 10108fc:	1004c03a 	cmpne	r2,r2,zero
 1010900:	1000071e 	bne	r2,zero,1010920 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1010904:	10109840 	call	1010984 <alt_get_errno>
 1010908:	1007883a 	mov	r3,r2
 101090c:	00800584 	movi	r2,22
 1010910:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1010914:	00bffa84 	movi	r2,-22
 1010918:	e0bfff15 	stw	r2,-4(fp)
 101091c:	00001306 	br	101096c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1010920:	e0fffd17 	ldw	r3,-12(fp)
 1010924:	e0bffe17 	ldw	r2,-8(fp)
 1010928:	e0bffb15 	stw	r2,-20(fp)
 101092c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010930:	e0fffc17 	ldw	r3,-16(fp)
 1010934:	e0bffb17 	ldw	r2,-20(fp)
 1010938:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101093c:	e0bffb17 	ldw	r2,-20(fp)
 1010940:	10c00017 	ldw	r3,0(r2)
 1010944:	e0bffc17 	ldw	r2,-16(fp)
 1010948:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101094c:	e0bffb17 	ldw	r2,-20(fp)
 1010950:	10c00017 	ldw	r3,0(r2)
 1010954:	e0bffc17 	ldw	r2,-16(fp)
 1010958:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101095c:	e0fffb17 	ldw	r3,-20(fp)
 1010960:	e0bffc17 	ldw	r2,-16(fp)
 1010964:	18800015 	stw	r2,0(r3)

  return 0;  
 1010968:	e03fff15 	stw	zero,-4(fp)
 101096c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010970:	e037883a 	mov	sp,fp
 1010974:	dfc00117 	ldw	ra,4(sp)
 1010978:	df000017 	ldw	fp,0(sp)
 101097c:	dec00204 	addi	sp,sp,8
 1010980:	f800283a 	ret

01010984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010984:	defffd04 	addi	sp,sp,-12
 1010988:	dfc00215 	stw	ra,8(sp)
 101098c:	df000115 	stw	fp,4(sp)
 1010990:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010994:	00804074 	movhi	r2,257
 1010998:	108e8a04 	addi	r2,r2,14888
 101099c:	10800017 	ldw	r2,0(r2)
 10109a0:	1005003a 	cmpeq	r2,r2,zero
 10109a4:	1000061e 	bne	r2,zero,10109c0 <alt_get_errno+0x3c>
 10109a8:	00804074 	movhi	r2,257
 10109ac:	108e8a04 	addi	r2,r2,14888
 10109b0:	10800017 	ldw	r2,0(r2)
 10109b4:	103ee83a 	callr	r2
 10109b8:	e0bfff15 	stw	r2,-4(fp)
 10109bc:	00000306 	br	10109cc <alt_get_errno+0x48>
 10109c0:	00804074 	movhi	r2,257
 10109c4:	10956804 	addi	r2,r2,21920
 10109c8:	e0bfff15 	stw	r2,-4(fp)
 10109cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10109d0:	e037883a 	mov	sp,fp
 10109d4:	dfc00117 	ldw	ra,4(sp)
 10109d8:	df000017 	ldw	fp,0(sp)
 10109dc:	dec00204 	addi	sp,sp,8
 10109e0:	f800283a 	ret

010109e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10109e4:	defffd04 	addi	sp,sp,-12
 10109e8:	dfc00215 	stw	ra,8(sp)
 10109ec:	df000115 	stw	fp,4(sp)
 10109f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10109f4:	00bfff04 	movi	r2,-4
 10109f8:	00c04074 	movhi	r3,257
 10109fc:	18c5d804 	addi	r3,r3,5984
 1010a00:	1885883a 	add	r2,r3,r2
 1010a04:	e0bfff15 	stw	r2,-4(fp)
 1010a08:	00000606 	br	1010a24 <_do_ctors+0x40>
        (*ctor) (); 
 1010a0c:	e0bfff17 	ldw	r2,-4(fp)
 1010a10:	10800017 	ldw	r2,0(r2)
 1010a14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010a18:	e0bfff17 	ldw	r2,-4(fp)
 1010a1c:	10bfff04 	addi	r2,r2,-4
 1010a20:	e0bfff15 	stw	r2,-4(fp)
 1010a24:	e0ffff17 	ldw	r3,-4(fp)
 1010a28:	00804074 	movhi	r2,257
 1010a2c:	1085d604 	addi	r2,r2,5976
 1010a30:	18bff62e 	bgeu	r3,r2,1010a0c <_do_ctors+0x28>
        (*ctor) (); 
}
 1010a34:	e037883a 	mov	sp,fp
 1010a38:	dfc00117 	ldw	ra,4(sp)
 1010a3c:	df000017 	ldw	fp,0(sp)
 1010a40:	dec00204 	addi	sp,sp,8
 1010a44:	f800283a 	ret

01010a48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010a48:	defffd04 	addi	sp,sp,-12
 1010a4c:	dfc00215 	stw	ra,8(sp)
 1010a50:	df000115 	stw	fp,4(sp)
 1010a54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010a58:	00bfff04 	movi	r2,-4
 1010a5c:	00c04074 	movhi	r3,257
 1010a60:	18c5d804 	addi	r3,r3,5984
 1010a64:	1885883a 	add	r2,r3,r2
 1010a68:	e0bfff15 	stw	r2,-4(fp)
 1010a6c:	00000606 	br	1010a88 <_do_dtors+0x40>
        (*dtor) (); 
 1010a70:	e0bfff17 	ldw	r2,-4(fp)
 1010a74:	10800017 	ldw	r2,0(r2)
 1010a78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010a7c:	e0bfff17 	ldw	r2,-4(fp)
 1010a80:	10bfff04 	addi	r2,r2,-4
 1010a84:	e0bfff15 	stw	r2,-4(fp)
 1010a88:	e0ffff17 	ldw	r3,-4(fp)
 1010a8c:	00804074 	movhi	r2,257
 1010a90:	1085d804 	addi	r2,r2,5984
 1010a94:	18bff62e 	bgeu	r3,r2,1010a70 <_do_dtors+0x28>
        (*dtor) (); 
}
 1010a98:	e037883a 	mov	sp,fp
 1010a9c:	dfc00117 	ldw	ra,4(sp)
 1010aa0:	df000017 	ldw	fp,0(sp)
 1010aa4:	dec00204 	addi	sp,sp,8
 1010aa8:	f800283a 	ret

01010aac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1010aac:	defff904 	addi	sp,sp,-28
 1010ab0:	dfc00615 	stw	ra,24(sp)
 1010ab4:	df000515 	stw	fp,20(sp)
 1010ab8:	df000504 	addi	fp,sp,20
 1010abc:	e13ffd15 	stw	r4,-12(fp)
 1010ac0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1010ac4:	e0bffe17 	ldw	r2,-8(fp)
 1010ac8:	10800017 	ldw	r2,0(r2)
 1010acc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1010ad0:	e13ffd17 	ldw	r4,-12(fp)
 1010ad4:	1005c940 	call	1005c94 <strlen>
 1010ad8:	10800044 	addi	r2,r2,1
 1010adc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010ae0:	00000d06 	br	1010b18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1010ae4:	e0bffc17 	ldw	r2,-16(fp)
 1010ae8:	11000217 	ldw	r4,8(r2)
 1010aec:	e1bffb17 	ldw	r6,-20(fp)
 1010af0:	e17ffd17 	ldw	r5,-12(fp)
 1010af4:	10113780 	call	1011378 <memcmp>
 1010af8:	1004c03a 	cmpne	r2,r2,zero
 1010afc:	1000031e 	bne	r2,zero,1010b0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1010b00:	e0bffc17 	ldw	r2,-16(fp)
 1010b04:	e0bfff15 	stw	r2,-4(fp)
 1010b08:	00000706 	br	1010b28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1010b0c:	e0bffc17 	ldw	r2,-16(fp)
 1010b10:	10800017 	ldw	r2,0(r2)
 1010b14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010b18:	e0fffe17 	ldw	r3,-8(fp)
 1010b1c:	e0bffc17 	ldw	r2,-16(fp)
 1010b20:	10fff01e 	bne	r2,r3,1010ae4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1010b24:	e03fff15 	stw	zero,-4(fp)
 1010b28:	e0bfff17 	ldw	r2,-4(fp)
}
 1010b2c:	e037883a 	mov	sp,fp
 1010b30:	dfc00117 	ldw	ra,4(sp)
 1010b34:	df000017 	ldw	fp,0(sp)
 1010b38:	dec00204 	addi	sp,sp,8
 1010b3c:	f800283a 	ret

01010b40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1010b40:	defffa04 	addi	sp,sp,-24
 1010b44:	dfc00515 	stw	ra,20(sp)
 1010b48:	df000415 	stw	fp,16(sp)
 1010b4c:	df000404 	addi	fp,sp,16
 1010b50:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1010b54:	00804074 	movhi	r2,257
 1010b58:	108e8504 	addi	r2,r2,14868
 1010b5c:	10800017 	ldw	r2,0(r2)
 1010b60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010b64:	00003306 	br	1010c34 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1010b68:	e0bffd17 	ldw	r2,-12(fp)
 1010b6c:	11000217 	ldw	r4,8(r2)
 1010b70:	1005c940 	call	1005c94 <strlen>
 1010b74:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1010b78:	e0bffd17 	ldw	r2,-12(fp)
 1010b7c:	10c00217 	ldw	r3,8(r2)
 1010b80:	e0bffc17 	ldw	r2,-16(fp)
 1010b84:	1885883a 	add	r2,r3,r2
 1010b88:	10bfffc4 	addi	r2,r2,-1
 1010b8c:	10800003 	ldbu	r2,0(r2)
 1010b90:	10803fcc 	andi	r2,r2,255
 1010b94:	1080201c 	xori	r2,r2,128
 1010b98:	10bfe004 	addi	r2,r2,-128
 1010b9c:	10800bd8 	cmpnei	r2,r2,47
 1010ba0:	1000031e 	bne	r2,zero,1010bb0 <alt_find_file+0x70>
    {
      len -= 1;
 1010ba4:	e0bffc17 	ldw	r2,-16(fp)
 1010ba8:	10bfffc4 	addi	r2,r2,-1
 1010bac:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1010bb0:	e0bffc17 	ldw	r2,-16(fp)
 1010bb4:	1007883a 	mov	r3,r2
 1010bb8:	e0bffe17 	ldw	r2,-8(fp)
 1010bbc:	1885883a 	add	r2,r3,r2
 1010bc0:	10800003 	ldbu	r2,0(r2)
 1010bc4:	10803fcc 	andi	r2,r2,255
 1010bc8:	1080201c 	xori	r2,r2,128
 1010bcc:	10bfe004 	addi	r2,r2,-128
 1010bd0:	10800be0 	cmpeqi	r2,r2,47
 1010bd4:	10000a1e 	bne	r2,zero,1010c00 <alt_find_file+0xc0>
 1010bd8:	e0bffc17 	ldw	r2,-16(fp)
 1010bdc:	1007883a 	mov	r3,r2
 1010be0:	e0bffe17 	ldw	r2,-8(fp)
 1010be4:	1885883a 	add	r2,r3,r2
 1010be8:	10800003 	ldbu	r2,0(r2)
 1010bec:	10803fcc 	andi	r2,r2,255
 1010bf0:	1080201c 	xori	r2,r2,128
 1010bf4:	10bfe004 	addi	r2,r2,-128
 1010bf8:	1004c03a 	cmpne	r2,r2,zero
 1010bfc:	10000a1e 	bne	r2,zero,1010c28 <alt_find_file+0xe8>
 1010c00:	e0bffd17 	ldw	r2,-12(fp)
 1010c04:	11000217 	ldw	r4,8(r2)
 1010c08:	e1bffc17 	ldw	r6,-16(fp)
 1010c0c:	e17ffe17 	ldw	r5,-8(fp)
 1010c10:	10113780 	call	1011378 <memcmp>
 1010c14:	1004c03a 	cmpne	r2,r2,zero
 1010c18:	1000031e 	bne	r2,zero,1010c28 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1010c1c:	e0bffd17 	ldw	r2,-12(fp)
 1010c20:	e0bfff15 	stw	r2,-4(fp)
 1010c24:	00000806 	br	1010c48 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1010c28:	e0bffd17 	ldw	r2,-12(fp)
 1010c2c:	10800017 	ldw	r2,0(r2)
 1010c30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010c34:	00c04074 	movhi	r3,257
 1010c38:	18ce8504 	addi	r3,r3,14868
 1010c3c:	e0bffd17 	ldw	r2,-12(fp)
 1010c40:	10ffc91e 	bne	r2,r3,1010b68 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1010c44:	e03fff15 	stw	zero,-4(fp)
 1010c48:	e0bfff17 	ldw	r2,-4(fp)
}
 1010c4c:	e037883a 	mov	sp,fp
 1010c50:	dfc00117 	ldw	ra,4(sp)
 1010c54:	df000017 	ldw	fp,0(sp)
 1010c58:	dec00204 	addi	sp,sp,8
 1010c5c:	f800283a 	ret

01010c60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1010c60:	defffa04 	addi	sp,sp,-24
 1010c64:	dfc00515 	stw	ra,20(sp)
 1010c68:	df000415 	stw	fp,16(sp)
 1010c6c:	dc000315 	stw	r16,12(sp)
 1010c70:	df000304 	addi	fp,sp,12
 1010c74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1010c78:	00bffa04 	movi	r2,-24
 1010c7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010c80:	e03ffe15 	stw	zero,-8(fp)
 1010c84:	00002006 	br	1010d08 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1010c88:	e13ffe17 	ldw	r4,-8(fp)
 1010c8c:	04004074 	movhi	r16,257
 1010c90:	8409cf04 	addi	r16,r16,10044
 1010c94:	01400304 	movi	r5,12
 1010c98:	1002f380 	call	1002f38 <__mulsi3>
 1010c9c:	1405883a 	add	r2,r2,r16
 1010ca0:	10800017 	ldw	r2,0(r2)
 1010ca4:	1004c03a 	cmpne	r2,r2,zero
 1010ca8:	1000141e 	bne	r2,zero,1010cfc <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1010cac:	e13ffe17 	ldw	r4,-8(fp)
 1010cb0:	04004074 	movhi	r16,257
 1010cb4:	8409cf04 	addi	r16,r16,10044
 1010cb8:	01400304 	movi	r5,12
 1010cbc:	1002f380 	call	1002f38 <__mulsi3>
 1010cc0:	1407883a 	add	r3,r2,r16
 1010cc4:	e0bfff17 	ldw	r2,-4(fp)
 1010cc8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1010ccc:	00804074 	movhi	r2,257
 1010cd0:	108e8904 	addi	r2,r2,14884
 1010cd4:	10c00017 	ldw	r3,0(r2)
 1010cd8:	e0bffe17 	ldw	r2,-8(fp)
 1010cdc:	1880040e 	bge	r3,r2,1010cf0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1010ce0:	00c04074 	movhi	r3,257
 1010ce4:	18ce8904 	addi	r3,r3,14884
 1010ce8:	e0bffe17 	ldw	r2,-8(fp)
 1010cec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1010cf0:	e0bffe17 	ldw	r2,-8(fp)
 1010cf4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1010cf8:	00000606 	br	1010d14 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010cfc:	e0bffe17 	ldw	r2,-8(fp)
 1010d00:	10800044 	addi	r2,r2,1
 1010d04:	e0bffe15 	stw	r2,-8(fp)
 1010d08:	e0bffe17 	ldw	r2,-8(fp)
 1010d0c:	10800810 	cmplti	r2,r2,32
 1010d10:	103fdd1e 	bne	r2,zero,1010c88 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1010d14:	e0bffd17 	ldw	r2,-12(fp)
}
 1010d18:	e037883a 	mov	sp,fp
 1010d1c:	dfc00217 	ldw	ra,8(sp)
 1010d20:	df000117 	ldw	fp,4(sp)
 1010d24:	dc000017 	ldw	r16,0(sp)
 1010d28:	dec00304 	addi	sp,sp,12
 1010d2c:	f800283a 	ret

01010d30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010d30:	deffff04 	addi	sp,sp,-4
 1010d34:	df000015 	stw	fp,0(sp)
 1010d38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1010d3c:	e037883a 	mov	sp,fp
 1010d40:	df000017 	ldw	fp,0(sp)
 1010d44:	dec00104 	addi	sp,sp,4
 1010d48:	f800283a 	ret

01010d4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010d4c:	defff904 	addi	sp,sp,-28
 1010d50:	dfc00615 	stw	ra,24(sp)
 1010d54:	df000515 	stw	fp,20(sp)
 1010d58:	df000504 	addi	fp,sp,20
 1010d5c:	e13ffc15 	stw	r4,-16(fp)
 1010d60:	e17ffd15 	stw	r5,-12(fp)
 1010d64:	e1bffe15 	stw	r6,-8(fp)
 1010d68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010d6c:	e0800217 	ldw	r2,8(fp)
 1010d70:	d8800015 	stw	r2,0(sp)
 1010d74:	e13ffc17 	ldw	r4,-16(fp)
 1010d78:	e17ffd17 	ldw	r5,-12(fp)
 1010d7c:	e1bffe17 	ldw	r6,-8(fp)
 1010d80:	e1ffff17 	ldw	r7,-4(fp)
 1010d84:	1010f200 	call	1010f20 <alt_iic_isr_register>
}  
 1010d88:	e037883a 	mov	sp,fp
 1010d8c:	dfc00117 	ldw	ra,4(sp)
 1010d90:	df000017 	ldw	fp,0(sp)
 1010d94:	dec00204 	addi	sp,sp,8
 1010d98:	f800283a 	ret

01010d9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1010d9c:	defff904 	addi	sp,sp,-28
 1010da0:	df000615 	stw	fp,24(sp)
 1010da4:	df000604 	addi	fp,sp,24
 1010da8:	e13ffe15 	stw	r4,-8(fp)
 1010dac:	e17fff15 	stw	r5,-4(fp)
 1010db0:	e0bfff17 	ldw	r2,-4(fp)
 1010db4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010db8:	0005303a 	rdctl	r2,status
 1010dbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010dc0:	e0fffb17 	ldw	r3,-20(fp)
 1010dc4:	00bfff84 	movi	r2,-2
 1010dc8:	1884703a 	and	r2,r3,r2
 1010dcc:	1001703a 	wrctl	status,r2
  
  return context;
 1010dd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010dd4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1010dd8:	e0fffc17 	ldw	r3,-16(fp)
 1010ddc:	00800044 	movi	r2,1
 1010de0:	10c4983a 	sll	r2,r2,r3
 1010de4:	1007883a 	mov	r3,r2
 1010de8:	00804074 	movhi	r2,257
 1010dec:	10957204 	addi	r2,r2,21960
 1010df0:	10800017 	ldw	r2,0(r2)
 1010df4:	1886b03a 	or	r3,r3,r2
 1010df8:	00804074 	movhi	r2,257
 1010dfc:	10957204 	addi	r2,r2,21960
 1010e00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010e04:	00804074 	movhi	r2,257
 1010e08:	10957204 	addi	r2,r2,21960
 1010e0c:	10800017 	ldw	r2,0(r2)
 1010e10:	100170fa 	wrctl	ienable,r2
 1010e14:	e0bffd17 	ldw	r2,-12(fp)
 1010e18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010e1c:	e0bffa17 	ldw	r2,-24(fp)
 1010e20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010e24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1010e28:	e037883a 	mov	sp,fp
 1010e2c:	df000017 	ldw	fp,0(sp)
 1010e30:	dec00104 	addi	sp,sp,4
 1010e34:	f800283a 	ret

01010e38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010e38:	defff904 	addi	sp,sp,-28
 1010e3c:	df000615 	stw	fp,24(sp)
 1010e40:	df000604 	addi	fp,sp,24
 1010e44:	e13ffe15 	stw	r4,-8(fp)
 1010e48:	e17fff15 	stw	r5,-4(fp)
 1010e4c:	e0bfff17 	ldw	r2,-4(fp)
 1010e50:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e54:	0005303a 	rdctl	r2,status
 1010e58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e5c:	e0fffb17 	ldw	r3,-20(fp)
 1010e60:	00bfff84 	movi	r2,-2
 1010e64:	1884703a 	and	r2,r3,r2
 1010e68:	1001703a 	wrctl	status,r2
  
  return context;
 1010e6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010e70:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1010e74:	e0fffc17 	ldw	r3,-16(fp)
 1010e78:	00800044 	movi	r2,1
 1010e7c:	10c4983a 	sll	r2,r2,r3
 1010e80:	0084303a 	nor	r2,zero,r2
 1010e84:	1007883a 	mov	r3,r2
 1010e88:	00804074 	movhi	r2,257
 1010e8c:	10957204 	addi	r2,r2,21960
 1010e90:	10800017 	ldw	r2,0(r2)
 1010e94:	1886703a 	and	r3,r3,r2
 1010e98:	00804074 	movhi	r2,257
 1010e9c:	10957204 	addi	r2,r2,21960
 1010ea0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010ea4:	00804074 	movhi	r2,257
 1010ea8:	10957204 	addi	r2,r2,21960
 1010eac:	10800017 	ldw	r2,0(r2)
 1010eb0:	100170fa 	wrctl	ienable,r2
 1010eb4:	e0bffd17 	ldw	r2,-12(fp)
 1010eb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010ebc:	e0bffa17 	ldw	r2,-24(fp)
 1010ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010ec4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1010ec8:	e037883a 	mov	sp,fp
 1010ecc:	df000017 	ldw	fp,0(sp)
 1010ed0:	dec00104 	addi	sp,sp,4
 1010ed4:	f800283a 	ret

01010ed8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1010ed8:	defffc04 	addi	sp,sp,-16
 1010edc:	df000315 	stw	fp,12(sp)
 1010ee0:	df000304 	addi	fp,sp,12
 1010ee4:	e13ffe15 	stw	r4,-8(fp)
 1010ee8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1010eec:	000530fa 	rdctl	r2,ienable
 1010ef0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010ef4:	e0ffff17 	ldw	r3,-4(fp)
 1010ef8:	00800044 	movi	r2,1
 1010efc:	10c4983a 	sll	r2,r2,r3
 1010f00:	1007883a 	mov	r3,r2
 1010f04:	e0bffd17 	ldw	r2,-12(fp)
 1010f08:	1884703a 	and	r2,r3,r2
 1010f0c:	1004c03a 	cmpne	r2,r2,zero
}
 1010f10:	e037883a 	mov	sp,fp
 1010f14:	df000017 	ldw	fp,0(sp)
 1010f18:	dec00104 	addi	sp,sp,4
 1010f1c:	f800283a 	ret

01010f20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010f20:	defff404 	addi	sp,sp,-48
 1010f24:	dfc00b15 	stw	ra,44(sp)
 1010f28:	df000a15 	stw	fp,40(sp)
 1010f2c:	df000a04 	addi	fp,sp,40
 1010f30:	e13ffb15 	stw	r4,-20(fp)
 1010f34:	e17ffc15 	stw	r5,-16(fp)
 1010f38:	e1bffd15 	stw	r6,-12(fp)
 1010f3c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1010f40:	00bffa84 	movi	r2,-22
 1010f44:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010f48:	e0bffc17 	ldw	r2,-16(fp)
 1010f4c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010f50:	e0bff917 	ldw	r2,-28(fp)
 1010f54:	10800808 	cmpgei	r2,r2,32
 1010f58:	1000291e 	bne	r2,zero,1011000 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010f5c:	0005303a 	rdctl	r2,status
 1010f60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010f64:	e0fff717 	ldw	r3,-36(fp)
 1010f68:	00bfff84 	movi	r2,-2
 1010f6c:	1884703a 	and	r2,r3,r2
 1010f70:	1001703a 	wrctl	status,r2
  
  return context;
 1010f74:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010f78:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1010f7c:	e0bff917 	ldw	r2,-28(fp)
 1010f80:	00c04074 	movhi	r3,257
 1010f84:	18d78404 	addi	r3,r3,24080
 1010f88:	100490fa 	slli	r2,r2,3
 1010f8c:	10c7883a 	add	r3,r2,r3
 1010f90:	e0bffd17 	ldw	r2,-12(fp)
 1010f94:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1010f98:	e0bff917 	ldw	r2,-28(fp)
 1010f9c:	00c04074 	movhi	r3,257
 1010fa0:	18d78404 	addi	r3,r3,24080
 1010fa4:	100490fa 	slli	r2,r2,3
 1010fa8:	10c5883a 	add	r2,r2,r3
 1010fac:	10c00104 	addi	r3,r2,4
 1010fb0:	e0bffe17 	ldw	r2,-8(fp)
 1010fb4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1010fb8:	e0bffd17 	ldw	r2,-12(fp)
 1010fbc:	1005003a 	cmpeq	r2,r2,zero
 1010fc0:	1000051e 	bne	r2,zero,1010fd8 <alt_iic_isr_register+0xb8>
 1010fc4:	e17ff917 	ldw	r5,-28(fp)
 1010fc8:	e13ffb17 	ldw	r4,-20(fp)
 1010fcc:	1010d9c0 	call	1010d9c <alt_ic_irq_enable>
 1010fd0:	e0bfff15 	stw	r2,-4(fp)
 1010fd4:	00000406 	br	1010fe8 <alt_iic_isr_register+0xc8>
 1010fd8:	e17ff917 	ldw	r5,-28(fp)
 1010fdc:	e13ffb17 	ldw	r4,-20(fp)
 1010fe0:	1010e380 	call	1010e38 <alt_ic_irq_disable>
 1010fe4:	e0bfff15 	stw	r2,-4(fp)
 1010fe8:	e0bfff17 	ldw	r2,-4(fp)
 1010fec:	e0bffa15 	stw	r2,-24(fp)
 1010ff0:	e0bff817 	ldw	r2,-32(fp)
 1010ff4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010ff8:	e0bff617 	ldw	r2,-40(fp)
 1010ffc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1011000:	e0bffa17 	ldw	r2,-24(fp)
}
 1011004:	e037883a 	mov	sp,fp
 1011008:	dfc00117 	ldw	ra,4(sp)
 101100c:	df000017 	ldw	fp,0(sp)
 1011010:	dec00204 	addi	sp,sp,8
 1011014:	f800283a 	ret

01011018 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1011018:	defff804 	addi	sp,sp,-32
 101101c:	dfc00715 	stw	ra,28(sp)
 1011020:	df000615 	stw	fp,24(sp)
 1011024:	dc000515 	stw	r16,20(sp)
 1011028:	df000504 	addi	fp,sp,20
 101102c:	e13ffc15 	stw	r4,-16(fp)
 1011030:	e17ffd15 	stw	r5,-12(fp)
 1011034:	e1bffe15 	stw	r6,-8(fp)
 1011038:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101103c:	e13ffd17 	ldw	r4,-12(fp)
 1011040:	e17ffe17 	ldw	r5,-8(fp)
 1011044:	e1bfff17 	ldw	r6,-4(fp)
 1011048:	100ebc80 	call	100ebc8 <open>
 101104c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1011050:	e0bffb17 	ldw	r2,-20(fp)
 1011054:	1004803a 	cmplt	r2,r2,zero
 1011058:	10001f1e 	bne	r2,zero,10110d8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101105c:	e13ffb17 	ldw	r4,-20(fp)
 1011060:	04004074 	movhi	r16,257
 1011064:	8409cf04 	addi	r16,r16,10044
 1011068:	01400304 	movi	r5,12
 101106c:	1002f380 	call	1002f38 <__mulsi3>
 1011070:	1405883a 	add	r2,r2,r16
 1011074:	10c00017 	ldw	r3,0(r2)
 1011078:	e0bffc17 	ldw	r2,-16(fp)
 101107c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1011080:	e13ffb17 	ldw	r4,-20(fp)
 1011084:	04004074 	movhi	r16,257
 1011088:	8409cf04 	addi	r16,r16,10044
 101108c:	01400304 	movi	r5,12
 1011090:	1002f380 	call	1002f38 <__mulsi3>
 1011094:	1405883a 	add	r2,r2,r16
 1011098:	10800104 	addi	r2,r2,4
 101109c:	10c00017 	ldw	r3,0(r2)
 10110a0:	e0bffc17 	ldw	r2,-16(fp)
 10110a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10110a8:	e13ffb17 	ldw	r4,-20(fp)
 10110ac:	04004074 	movhi	r16,257
 10110b0:	8409cf04 	addi	r16,r16,10044
 10110b4:	01400304 	movi	r5,12
 10110b8:	1002f380 	call	1002f38 <__mulsi3>
 10110bc:	1405883a 	add	r2,r2,r16
 10110c0:	10800204 	addi	r2,r2,8
 10110c4:	10c00017 	ldw	r3,0(r2)
 10110c8:	e0bffc17 	ldw	r2,-16(fp)
 10110cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10110d0:	e13ffb17 	ldw	r4,-20(fp)
 10110d4:	100ef380 	call	100ef38 <alt_release_fd>
  }
} 
 10110d8:	e037883a 	mov	sp,fp
 10110dc:	dfc00217 	ldw	ra,8(sp)
 10110e0:	df000117 	ldw	fp,4(sp)
 10110e4:	dc000017 	ldw	r16,0(sp)
 10110e8:	dec00304 	addi	sp,sp,12
 10110ec:	f800283a 	ret

010110f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10110f0:	defffb04 	addi	sp,sp,-20
 10110f4:	dfc00415 	stw	ra,16(sp)
 10110f8:	df000315 	stw	fp,12(sp)
 10110fc:	df000304 	addi	fp,sp,12
 1011100:	e13ffd15 	stw	r4,-12(fp)
 1011104:	e17ffe15 	stw	r5,-8(fp)
 1011108:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101110c:	01004074 	movhi	r4,257
 1011110:	2109d204 	addi	r4,r4,10056
 1011114:	e17ffd17 	ldw	r5,-12(fp)
 1011118:	01800044 	movi	r6,1
 101111c:	01c07fc4 	movi	r7,511
 1011120:	10110180 	call	1011018 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1011124:	01004074 	movhi	r4,257
 1011128:	2109cf04 	addi	r4,r4,10044
 101112c:	e17ffe17 	ldw	r5,-8(fp)
 1011130:	000d883a 	mov	r6,zero
 1011134:	01c07fc4 	movi	r7,511
 1011138:	10110180 	call	1011018 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101113c:	01004074 	movhi	r4,257
 1011140:	2109d504 	addi	r4,r4,10068
 1011144:	e17fff17 	ldw	r5,-4(fp)
 1011148:	01800044 	movi	r6,1
 101114c:	01c07fc4 	movi	r7,511
 1011150:	10110180 	call	1011018 <alt_open_fd>
}  
 1011154:	e037883a 	mov	sp,fp
 1011158:	dfc00117 	ldw	ra,4(sp)
 101115c:	df000017 	ldw	fp,0(sp)
 1011160:	dec00204 	addi	sp,sp,8
 1011164:	f800283a 	ret

01011168 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011168:	defffa04 	addi	sp,sp,-24
 101116c:	df000515 	stw	fp,20(sp)
 1011170:	df000504 	addi	fp,sp,20
 1011174:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011178:	0005303a 	rdctl	r2,status
 101117c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011180:	e0fffd17 	ldw	r3,-12(fp)
 1011184:	00bfff84 	movi	r2,-2
 1011188:	1884703a 	and	r2,r3,r2
 101118c:	1001703a 	wrctl	status,r2
  
  return context;
 1011190:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1011194:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1011198:	e0bfff17 	ldw	r2,-4(fp)
 101119c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10111a0:	e0bffc17 	ldw	r2,-16(fp)
 10111a4:	10c00017 	ldw	r3,0(r2)
 10111a8:	e0bffc17 	ldw	r2,-16(fp)
 10111ac:	10800117 	ldw	r2,4(r2)
 10111b0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10111b4:	e0bffc17 	ldw	r2,-16(fp)
 10111b8:	10c00117 	ldw	r3,4(r2)
 10111bc:	e0bffc17 	ldw	r2,-16(fp)
 10111c0:	10800017 	ldw	r2,0(r2)
 10111c4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10111c8:	e0fffc17 	ldw	r3,-16(fp)
 10111cc:	e0bffc17 	ldw	r2,-16(fp)
 10111d0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10111d4:	e0fffc17 	ldw	r3,-16(fp)
 10111d8:	e0bffc17 	ldw	r2,-16(fp)
 10111dc:	18800015 	stw	r2,0(r3)
 10111e0:	e0bffe17 	ldw	r2,-8(fp)
 10111e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10111e8:	e0bffb17 	ldw	r2,-20(fp)
 10111ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10111f0:	e037883a 	mov	sp,fp
 10111f4:	df000017 	ldw	fp,0(sp)
 10111f8:	dec00104 	addi	sp,sp,4
 10111fc:	f800283a 	ret

01011200 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1011200:	defffb04 	addi	sp,sp,-20
 1011204:	dfc00415 	stw	ra,16(sp)
 1011208:	df000315 	stw	fp,12(sp)
 101120c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1011210:	d0a01517 	ldw	r2,-32684(gp)
 1011214:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1011218:	d0a6fc17 	ldw	r2,-25616(gp)
 101121c:	10800044 	addi	r2,r2,1
 1011220:	d0a6fc15 	stw	r2,-25616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011224:	00003106 	br	10112ec <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1011228:	e0bffe17 	ldw	r2,-8(fp)
 101122c:	10800017 	ldw	r2,0(r2)
 1011230:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011234:	e0bffe17 	ldw	r2,-8(fp)
 1011238:	10800403 	ldbu	r2,16(r2)
 101123c:	10803fcc 	andi	r2,r2,255
 1011240:	1005003a 	cmpeq	r2,r2,zero
 1011244:	1000051e 	bne	r2,zero,101125c <alt_tick+0x5c>
 1011248:	d0a6fc17 	ldw	r2,-25616(gp)
 101124c:	1004c03a 	cmpne	r2,r2,zero
 1011250:	1000021e 	bne	r2,zero,101125c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1011254:	e0bffe17 	ldw	r2,-8(fp)
 1011258:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 101125c:	e0bffe17 	ldw	r2,-8(fp)
 1011260:	10c00217 	ldw	r3,8(r2)
 1011264:	d0a6fc17 	ldw	r2,-25616(gp)
 1011268:	10c01e36 	bltu	r2,r3,10112e4 <alt_tick+0xe4>
 101126c:	e0bffe17 	ldw	r2,-8(fp)
 1011270:	10800403 	ldbu	r2,16(r2)
 1011274:	10803fcc 	andi	r2,r2,255
 1011278:	1004c03a 	cmpne	r2,r2,zero
 101127c:	1000191e 	bne	r2,zero,10112e4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011280:	e0bffe17 	ldw	r2,-8(fp)
 1011284:	10c00317 	ldw	r3,12(r2)
 1011288:	e0bffe17 	ldw	r2,-8(fp)
 101128c:	11000517 	ldw	r4,20(r2)
 1011290:	183ee83a 	callr	r3
 1011294:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1011298:	e0bffd17 	ldw	r2,-12(fp)
 101129c:	1004c03a 	cmpne	r2,r2,zero
 10112a0:	1000031e 	bne	r2,zero,10112b0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10112a4:	e13ffe17 	ldw	r4,-8(fp)
 10112a8:	10111680 	call	1011168 <alt_alarm_stop>
 10112ac:	00000d06 	br	10112e4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10112b0:	e0bffe17 	ldw	r2,-8(fp)
 10112b4:	10c00217 	ldw	r3,8(r2)
 10112b8:	e0bffd17 	ldw	r2,-12(fp)
 10112bc:	1887883a 	add	r3,r3,r2
 10112c0:	e0bffe17 	ldw	r2,-8(fp)
 10112c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10112c8:	e0bffe17 	ldw	r2,-8(fp)
 10112cc:	10c00217 	ldw	r3,8(r2)
 10112d0:	d0a6fc17 	ldw	r2,-25616(gp)
 10112d4:	1880032e 	bgeu	r3,r2,10112e4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10112d8:	e0fffe17 	ldw	r3,-8(fp)
 10112dc:	00800044 	movi	r2,1
 10112e0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10112e4:	e0bfff17 	ldw	r2,-4(fp)
 10112e8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10112ec:	d0e01504 	addi	r3,gp,-32684
 10112f0:	e0bffe17 	ldw	r2,-8(fp)
 10112f4:	10ffcc1e 	bne	r2,r3,1011228 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10112f8:	e037883a 	mov	sp,fp
 10112fc:	dfc00117 	ldw	ra,4(sp)
 1011300:	df000017 	ldw	fp,0(sp)
 1011304:	dec00204 	addi	sp,sp,8
 1011308:	f800283a 	ret

0101130c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101130c:	deffff04 	addi	sp,sp,-4
 1011310:	df000015 	stw	fp,0(sp)
 1011314:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011318:	000170fa 	wrctl	ienable,zero
}
 101131c:	e037883a 	mov	sp,fp
 1011320:	df000017 	ldw	fp,0(sp)
 1011324:	dec00104 	addi	sp,sp,4
 1011328:	f800283a 	ret

0101132c <atexit>:
 101132c:	200b883a 	mov	r5,r4
 1011330:	000d883a 	mov	r6,zero
 1011334:	0009883a 	mov	r4,zero
 1011338:	000f883a 	mov	r7,zero
 101133c:	10113ec1 	jmpi	10113ec <__register_exitproc>

01011340 <exit>:
 1011340:	defffe04 	addi	sp,sp,-8
 1011344:	000b883a 	mov	r5,zero
 1011348:	dc000015 	stw	r16,0(sp)
 101134c:	dfc00115 	stw	ra,4(sp)
 1011350:	2021883a 	mov	r16,r4
 1011354:	10115240 	call	1011524 <__call_exitprocs>
 1011358:	00804074 	movhi	r2,257
 101135c:	108e8004 	addi	r2,r2,14848
 1011360:	11000017 	ldw	r4,0(r2)
 1011364:	20800f17 	ldw	r2,60(r4)
 1011368:	10000126 	beq	r2,zero,1011370 <exit+0x30>
 101136c:	103ee83a 	callr	r2
 1011370:	8009883a 	mov	r4,r16
 1011374:	100e39c0 	call	100e39c <_exit>

01011378 <memcmp>:
 1011378:	00c000c4 	movi	r3,3
 101137c:	1980032e 	bgeu	r3,r6,101138c <memcmp+0x14>
 1011380:	2144b03a 	or	r2,r4,r5
 1011384:	10c4703a 	and	r2,r2,r3
 1011388:	10000f26 	beq	r2,zero,10113c8 <memcmp+0x50>
 101138c:	31ffffc4 	addi	r7,r6,-1
 1011390:	3000061e 	bne	r6,zero,10113ac <memcmp+0x34>
 1011394:	00000a06 	br	10113c0 <memcmp+0x48>
 1011398:	39ffffc4 	addi	r7,r7,-1
 101139c:	00bfffc4 	movi	r2,-1
 10113a0:	21000044 	addi	r4,r4,1
 10113a4:	29400044 	addi	r5,r5,1
 10113a8:	38800526 	beq	r7,r2,10113c0 <memcmp+0x48>
 10113ac:	20c00003 	ldbu	r3,0(r4)
 10113b0:	28800003 	ldbu	r2,0(r5)
 10113b4:	18bff826 	beq	r3,r2,1011398 <memcmp+0x20>
 10113b8:	1885c83a 	sub	r2,r3,r2
 10113bc:	f800283a 	ret
 10113c0:	0005883a 	mov	r2,zero
 10113c4:	f800283a 	ret
 10113c8:	180f883a 	mov	r7,r3
 10113cc:	20c00017 	ldw	r3,0(r4)
 10113d0:	28800017 	ldw	r2,0(r5)
 10113d4:	18bfed1e 	bne	r3,r2,101138c <memcmp+0x14>
 10113d8:	31bfff04 	addi	r6,r6,-4
 10113dc:	21000104 	addi	r4,r4,4
 10113e0:	29400104 	addi	r5,r5,4
 10113e4:	39bff936 	bltu	r7,r6,10113cc <memcmp+0x54>
 10113e8:	003fe806 	br	101138c <memcmp+0x14>

010113ec <__register_exitproc>:
 10113ec:	defffa04 	addi	sp,sp,-24
 10113f0:	00804074 	movhi	r2,257
 10113f4:	108e8004 	addi	r2,r2,14848
 10113f8:	dc000015 	stw	r16,0(sp)
 10113fc:	14000017 	ldw	r16,0(r2)
 1011400:	dd000415 	stw	r20,16(sp)
 1011404:	2829883a 	mov	r20,r5
 1011408:	81405217 	ldw	r5,328(r16)
 101140c:	dcc00315 	stw	r19,12(sp)
 1011410:	dc800215 	stw	r18,8(sp)
 1011414:	dc400115 	stw	r17,4(sp)
 1011418:	dfc00515 	stw	ra,20(sp)
 101141c:	2023883a 	mov	r17,r4
 1011420:	3027883a 	mov	r19,r6
 1011424:	3825883a 	mov	r18,r7
 1011428:	28002526 	beq	r5,zero,10114c0 <__register_exitproc+0xd4>
 101142c:	29000117 	ldw	r4,4(r5)
 1011430:	008007c4 	movi	r2,31
 1011434:	11002716 	blt	r2,r4,10114d4 <__register_exitproc+0xe8>
 1011438:	8800101e 	bne	r17,zero,101147c <__register_exitproc+0x90>
 101143c:	2105883a 	add	r2,r4,r4
 1011440:	1085883a 	add	r2,r2,r2
 1011444:	20c00044 	addi	r3,r4,1
 1011448:	1145883a 	add	r2,r2,r5
 101144c:	0009883a 	mov	r4,zero
 1011450:	15000215 	stw	r20,8(r2)
 1011454:	28c00115 	stw	r3,4(r5)
 1011458:	2005883a 	mov	r2,r4
 101145c:	dfc00517 	ldw	ra,20(sp)
 1011460:	dd000417 	ldw	r20,16(sp)
 1011464:	dcc00317 	ldw	r19,12(sp)
 1011468:	dc800217 	ldw	r18,8(sp)
 101146c:	dc400117 	ldw	r17,4(sp)
 1011470:	dc000017 	ldw	r16,0(sp)
 1011474:	dec00604 	addi	sp,sp,24
 1011478:	f800283a 	ret
 101147c:	29802204 	addi	r6,r5,136
 1011480:	00800044 	movi	r2,1
 1011484:	110e983a 	sll	r7,r2,r4
 1011488:	30c04017 	ldw	r3,256(r6)
 101148c:	2105883a 	add	r2,r4,r4
 1011490:	1085883a 	add	r2,r2,r2
 1011494:	1185883a 	add	r2,r2,r6
 1011498:	19c6b03a 	or	r3,r3,r7
 101149c:	14802015 	stw	r18,128(r2)
 10114a0:	14c00015 	stw	r19,0(r2)
 10114a4:	00800084 	movi	r2,2
 10114a8:	30c04015 	stw	r3,256(r6)
 10114ac:	88bfe31e 	bne	r17,r2,101143c <__register_exitproc+0x50>
 10114b0:	30804117 	ldw	r2,260(r6)
 10114b4:	11c4b03a 	or	r2,r2,r7
 10114b8:	30804115 	stw	r2,260(r6)
 10114bc:	003fdf06 	br	101143c <__register_exitproc+0x50>
 10114c0:	00804074 	movhi	r2,257
 10114c4:	1097c404 	addi	r2,r2,24336
 10114c8:	100b883a 	mov	r5,r2
 10114cc:	80805215 	stw	r2,328(r16)
 10114d0:	003fd606 	br	101142c <__register_exitproc+0x40>
 10114d4:	00804034 	movhi	r2,256
 10114d8:	10929e04 	addi	r2,r2,19064
 10114dc:	1000021e 	bne	r2,zero,10114e8 <__register_exitproc+0xfc>
 10114e0:	013fffc4 	movi	r4,-1
 10114e4:	003fdc06 	br	1011458 <__register_exitproc+0x6c>
 10114e8:	01006404 	movi	r4,400
 10114ec:	103ee83a 	callr	r2
 10114f0:	1007883a 	mov	r3,r2
 10114f4:	103ffa26 	beq	r2,zero,10114e0 <__register_exitproc+0xf4>
 10114f8:	80805217 	ldw	r2,328(r16)
 10114fc:	180b883a 	mov	r5,r3
 1011500:	18000115 	stw	zero,4(r3)
 1011504:	18800015 	stw	r2,0(r3)
 1011508:	80c05215 	stw	r3,328(r16)
 101150c:	18006215 	stw	zero,392(r3)
 1011510:	18006315 	stw	zero,396(r3)
 1011514:	0009883a 	mov	r4,zero
 1011518:	883fc826 	beq	r17,zero,101143c <__register_exitproc+0x50>
 101151c:	003fd706 	br	101147c <__register_exitproc+0x90>

01011520 <register_fini>:
 1011520:	f800283a 	ret

01011524 <__call_exitprocs>:
 1011524:	00804074 	movhi	r2,257
 1011528:	108e8004 	addi	r2,r2,14848
 101152c:	10800017 	ldw	r2,0(r2)
 1011530:	defff304 	addi	sp,sp,-52
 1011534:	df000b15 	stw	fp,44(sp)
 1011538:	d8800115 	stw	r2,4(sp)
 101153c:	00804034 	movhi	r2,256
 1011540:	10929904 	addi	r2,r2,19044
 1011544:	1005003a 	cmpeq	r2,r2,zero
 1011548:	d8800215 	stw	r2,8(sp)
 101154c:	d8800117 	ldw	r2,4(sp)
 1011550:	dd400815 	stw	r21,32(sp)
 1011554:	dd000715 	stw	r20,28(sp)
 1011558:	10805204 	addi	r2,r2,328
 101155c:	dfc00c15 	stw	ra,48(sp)
 1011560:	ddc00a15 	stw	r23,40(sp)
 1011564:	dd800915 	stw	r22,36(sp)
 1011568:	dcc00615 	stw	r19,24(sp)
 101156c:	dc800515 	stw	r18,20(sp)
 1011570:	dc400415 	stw	r17,16(sp)
 1011574:	dc000315 	stw	r16,12(sp)
 1011578:	282b883a 	mov	r21,r5
 101157c:	2039883a 	mov	fp,r4
 1011580:	d8800015 	stw	r2,0(sp)
 1011584:	2829003a 	cmpeq	r20,r5,zero
 1011588:	d8800117 	ldw	r2,4(sp)
 101158c:	14405217 	ldw	r17,328(r2)
 1011590:	88001026 	beq	r17,zero,10115d4 <__call_exitprocs+0xb0>
 1011594:	ddc00017 	ldw	r23,0(sp)
 1011598:	88800117 	ldw	r2,4(r17)
 101159c:	8c802204 	addi	r18,r17,136
 10115a0:	143fffc4 	addi	r16,r2,-1
 10115a4:	80000916 	blt	r16,zero,10115cc <__call_exitprocs+0xa8>
 10115a8:	05bfffc4 	movi	r22,-1
 10115ac:	a000151e 	bne	r20,zero,1011604 <__call_exitprocs+0xe0>
 10115b0:	8409883a 	add	r4,r16,r16
 10115b4:	2105883a 	add	r2,r4,r4
 10115b8:	1485883a 	add	r2,r2,r18
 10115bc:	10c02017 	ldw	r3,128(r2)
 10115c0:	a8c01126 	beq	r21,r3,1011608 <__call_exitprocs+0xe4>
 10115c4:	843fffc4 	addi	r16,r16,-1
 10115c8:	85bff81e 	bne	r16,r22,10115ac <__call_exitprocs+0x88>
 10115cc:	d8800217 	ldw	r2,8(sp)
 10115d0:	10003126 	beq	r2,zero,1011698 <__call_exitprocs+0x174>
 10115d4:	dfc00c17 	ldw	ra,48(sp)
 10115d8:	df000b17 	ldw	fp,44(sp)
 10115dc:	ddc00a17 	ldw	r23,40(sp)
 10115e0:	dd800917 	ldw	r22,36(sp)
 10115e4:	dd400817 	ldw	r21,32(sp)
 10115e8:	dd000717 	ldw	r20,28(sp)
 10115ec:	dcc00617 	ldw	r19,24(sp)
 10115f0:	dc800517 	ldw	r18,20(sp)
 10115f4:	dc400417 	ldw	r17,16(sp)
 10115f8:	dc000317 	ldw	r16,12(sp)
 10115fc:	dec00d04 	addi	sp,sp,52
 1011600:	f800283a 	ret
 1011604:	8409883a 	add	r4,r16,r16
 1011608:	88c00117 	ldw	r3,4(r17)
 101160c:	2105883a 	add	r2,r4,r4
 1011610:	1445883a 	add	r2,r2,r17
 1011614:	18ffffc4 	addi	r3,r3,-1
 1011618:	11800217 	ldw	r6,8(r2)
 101161c:	1c001526 	beq	r3,r16,1011674 <__call_exitprocs+0x150>
 1011620:	10000215 	stw	zero,8(r2)
 1011624:	303fe726 	beq	r6,zero,10115c4 <__call_exitprocs+0xa0>
 1011628:	00c00044 	movi	r3,1
 101162c:	1c06983a 	sll	r3,r3,r16
 1011630:	90804017 	ldw	r2,256(r18)
 1011634:	8cc00117 	ldw	r19,4(r17)
 1011638:	1884703a 	and	r2,r3,r2
 101163c:	10001426 	beq	r2,zero,1011690 <__call_exitprocs+0x16c>
 1011640:	90804117 	ldw	r2,260(r18)
 1011644:	1884703a 	and	r2,r3,r2
 1011648:	10000c1e 	bne	r2,zero,101167c <__call_exitprocs+0x158>
 101164c:	2105883a 	add	r2,r4,r4
 1011650:	1485883a 	add	r2,r2,r18
 1011654:	11400017 	ldw	r5,0(r2)
 1011658:	e009883a 	mov	r4,fp
 101165c:	303ee83a 	callr	r6
 1011660:	88800117 	ldw	r2,4(r17)
 1011664:	98bfc81e 	bne	r19,r2,1011588 <__call_exitprocs+0x64>
 1011668:	b8800017 	ldw	r2,0(r23)
 101166c:	147fd526 	beq	r2,r17,10115c4 <__call_exitprocs+0xa0>
 1011670:	003fc506 	br	1011588 <__call_exitprocs+0x64>
 1011674:	8c000115 	stw	r16,4(r17)
 1011678:	003fea06 	br	1011624 <__call_exitprocs+0x100>
 101167c:	2105883a 	add	r2,r4,r4
 1011680:	1485883a 	add	r2,r2,r18
 1011684:	11000017 	ldw	r4,0(r2)
 1011688:	303ee83a 	callr	r6
 101168c:	003ff406 	br	1011660 <__call_exitprocs+0x13c>
 1011690:	303ee83a 	callr	r6
 1011694:	003ff206 	br	1011660 <__call_exitprocs+0x13c>
 1011698:	88800117 	ldw	r2,4(r17)
 101169c:	1000081e 	bne	r2,zero,10116c0 <__call_exitprocs+0x19c>
 10116a0:	89000017 	ldw	r4,0(r17)
 10116a4:	20000726 	beq	r4,zero,10116c4 <__call_exitprocs+0x1a0>
 10116a8:	b9000015 	stw	r4,0(r23)
 10116ac:	8809883a 	mov	r4,r17
 10116b0:	1004a640 	call	1004a64 <free>
 10116b4:	bc400017 	ldw	r17,0(r23)
 10116b8:	883fb71e 	bne	r17,zero,1011598 <__call_exitprocs+0x74>
 10116bc:	003fc506 	br	10115d4 <__call_exitprocs+0xb0>
 10116c0:	89000017 	ldw	r4,0(r17)
 10116c4:	882f883a 	mov	r23,r17
 10116c8:	2023883a 	mov	r17,r4
 10116cc:	883fb21e 	bne	r17,zero,1011598 <__call_exitprocs+0x74>
 10116d0:	003fc006 	br	10115d4 <__call_exitprocs+0xb0>
 10116d4:	0201ffff 	0x201ffff
 10116d8:	ffff0000 	call	ffff000 <__alt_data_end+0xe7ff000>
 10116dc:	00000201 	jmpi	20 <__alt_mem_onchip_memory2_0+0x20>
 10116e0:	010d0bff 	0x10d0bff
 10116e4:	7f010002 	0x7f010002
 10116e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116ec:	01011aa0 	cmpeqi	r4,zero,1130
 10116f0:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0>
 10116f4:	010d0bff 	0x10d0bff
 10116f8:	01000004 	movi	r4,0
 10116fc:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 1011700:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011704:	010d0bff 	0x10d0bff
 1011708:	01000004 	movi	r4,0
 101170c:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 1011710:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011714:	010d0bff 	0x10d0bff
 1011718:	01000004 	movi	r4,0
 101171c:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 1011720:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011724:	010d0bff 	0x10d0bff
 1011728:	7f010002 	0x7f010002
 101172c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011730:	01011aa0 	cmpeqi	r4,zero,1130
 1011734:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0>
 1011738:	01090bff 	0x1090bff
 101173c:	7f010002 	0x7f010002
	...
 1011748:	01090bff 	0x1090bff
 101174c:	7f010002 	0x7f010002
	...
 1011758:	01000250 	cmplti	r4,zero,9
 101175c:	01011520 	cmpeqi	r4,zero,1108
