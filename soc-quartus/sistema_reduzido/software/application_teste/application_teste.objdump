
application_teste.elf:     file format elf32-littlenios2
application_teste.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000014cc memsz 0x000014cc flags r-x
    LOAD off    0x000024ec vaddr 0x000054ec paddr 0x000057ec align 2**12
         filesz 0x00000300 memsz 0x00000300 flags rw-
    LOAD off    0x00002aec vaddr 0x00005aec paddr 0x00005aec align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001484  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  000054a4  000054a4  000024a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000300  000054ec  000057ec  000024ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00005aec  00005aec  00002aec  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000588  00000000  00000000  00002818  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000077a  00000000  00000000  00002da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000886b  00000000  00000000  0000351a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000282a  00000000  00000000  0000bd85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006c18  00000000  00000000  0000e5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007b8  00000000  00000000  000151c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001687  00000000  00000000  00015980  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001642  00000000  00000000  00017007  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0001864c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00018690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00019fa5  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00019fa8  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00019fb4  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00019fb5  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00019fb6  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00019fc1  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00019fcc  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000014  00000000  00000000  00019fd7  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002e  00000000  00000000  00019feb  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00035375  00000000  00000000  0001a019  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
000054a4 l    d  .rodata	00000000 .rodata
000054ec l    d  .rwdata	00000000 .rwdata
00005aec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0000409c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000042f8 l     F .text	0000000c alt_dev_reg
000054ec l     O .rwdata	0000002c jtag_uart_0
00005518 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000045c0 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004680 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000477c l     F .text	00000088 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000056ec l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005074 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005234 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
000053cc l     F .text	00000020 alt_get_errno
00004128 g     F .text	00000060 alt_main
000057ec g       *ABS*	00000000 __flash_rwdata_start
000042e0 g     F .text	00000014 alt_putstr
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005af8 g     O .bss	00000004 errno
00005af0 g     O .bss	00000004 alt_argv
0000d7cc g       *ABS*	00000000 _gp
000042f4 g     F .text	00000004 usleep
0000556c g     O .rwdata	00000180 alt_fd_list
00004a70 g     F .text	00000070 alt_find_dev
00004804 g     F .text	0000008c alt_io_redirect
000054a4 g       *ABS*	00000000 __DTOR_END__
0000436c g     F .text	00000060 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005370 g     F .text	00000008 __udivsi3
000057dc g     O .rwdata	00000004 alt_max_fd
000057e8 g     O .rwdata	00000004 _global_impure_ptr
00005b88 g       *ABS*	00000000 __bss_end
00005544 g     O .rwdata	00000028 alt_dev_null
0000467c g     F .text	00000004 alt_dcache_flush_all
000057ec g       *ABS*	00000000 __ram_rwdata_end
000057d4 g     O .rwdata	00000008 alt_dev_list
000053ec g     F .text	000000b4 write
00004dfc g     F .text	00000074 _putc_r
000054ec g       *ABS*	00000000 __ram_rodata_end
00005378 g     F .text	00000008 __umodsi3
00005b88 g       *ABS*	00000000 end
000044a0 g     F .text	00000094 altera_avalon_uart_write
000054a0 g       *ABS*	00000000 __CTOR_LIST__
00006328 g       *ABS*	00000000 __alt_stack_pointer
00004400 g     F .text	00000010 altera_avalon_uart_write_fd
000043cc g     F .text	00000034 altera_avalon_jtag_uart_write
00004188 g     F .text	00000144 alt_printf
00005078 g     F .text	000001bc __call_exitprocs
00004020 g     F .text	0000003c _start
00004304 g     F .text	00000028 alt_sys_init
00004f08 g     F .text	0000016c __register_exitproc
00005380 g     F .text	00000038 __mulsi3
000054ec g       *ABS*	00000000 __ram_rwdata_start
000054a4 g       *ABS*	00000000 __ram_rodata_start
0000435c g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00004b7c g     F .text	0000005c alt_get_fd
00004534 g     F .text	0000008c alt_busy_sleep
00004d50 g     F .text	0000003c memcmp
00005b88 g       *ABS*	00000000 __alt_stack_base
00004ae0 g     F .text	0000009c alt_find_file
00004688 g     F .text	00000070 alt_dev_llist_insert
00004c94 g     F .text	000000bc __sfvwrite_small_dev
00005aec g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000040 main
00005af4 g     O .bss	00000004 alt_envp
0000434c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00005afc g     O .bss	0000008c _atexit0
000057e0 g     O .rwdata	00000004 alt_errno
00004d8c g     F .text	00000070 putc
000052b0 g     F .text	00000060 __divsi3
000054a4 g       *ABS*	00000000 __CTOR_END__
000054a4 g       *ABS*	00000000 __flash_rodata_start
000054a4 g       *ABS*	00000000 __DTOR_LIST__
0000432c g     F .text	00000020 alt_irq_init
00004a0c g     F .text	0000005c alt_release_fd
00004bd8 g     F .text	00000014 atexit
00004e90 g     F .text	00000078 _write_r
000057e4 g     O .rwdata	00000004 _impure_ptr
00005aec g     O .bss	00000004 alt_argc
00004738 g     F .text	00000040 _do_dtors
000057cc g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000057ec g       *ABS*	00000000 _edata
00004410 g     F .text	00000010 altera_avalon_uart_read_fd
00005b88 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004a68 g     F .text	00000008 altera_nios2_qsys_irq_init
00004bec g     F .text	00000020 exit
00005310 g     F .text	00000060 __modsi3
00006328 g       *ABS*	00000000 __alt_data_end
000053b8 g     F .text	00000014 _exit
00004e70 g     F .text	00000020 strlen
00004890 g     F .text	0000017c open
000042cc g     F .text	00000014 alt_putchar
00004778 g     F .text	00000004 alt_icache_flush_all
00004c0c g     F .text	00000088 fputs
00004420 g     F .text	00000080 altera_avalon_uart_read
000046f8 g     F .text	00000040 _do_ctors
000045e0 g     F .text	0000009c close
000040bc g     F .text	0000006c alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	ded8ca14 	ori	sp,sp,25384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b5f314 	ori	gp,gp,55244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1096bb14 	ori	r2,r2,23276

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d6e214 	ori	r3,r3,23432

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00040bc0 	call	40bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041280 	call	4128 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include "sys/alt_stdio.h"
#define matrixAddress 9038
#define fftAddress 9028

int main()
{
    405c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    4060:	01000034 	movhi	r4,0
    4064:	21152904 	addi	r4,r4,21668
#include "sys/alt_stdio.h"
#define matrixAddress 9038
#define fftAddress 9028

int main()
{
    4068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    406c:	00042e00 	call	42e0 <alt_putstr>
  volatile unsigned int *data;
  unsigned int x;
  data = fftAddress;

  *data = 12345;
    4070:	00cc0e44 	movi	r3,12345
    4074:	0088d104 	movi	r2,9028
  usleep(300);
    4078:	01004b04 	movi	r4,300
  alt_putstr("Hello from Nios II!\n");
  volatile unsigned int *data;
  unsigned int x;
  data = fftAddress;

  *data = 12345;
    407c:	10c00015 	stw	r3,0(r2)
  usleep(300);
    4080:	00042f40 	call	42f4 <usleep>
  x = *(data+4);
    4084:	0088d504 	movi	r2,9044
    4088:	11400017 	ldw	r5,0(r2)
  alt_printf("%d",x);
    408c:	01000034 	movhi	r4,0
    4090:	21152f04 	addi	r4,r4,21692
    4094:	00041880 	call	4188 <alt_printf>
    4098:	003fff06 	br	4098 <main+0x3c>

0000409c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    409c:	2900051e 	bne	r5,r4,40b4 <alt_load_section+0x18>
    40a0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    40a4:	20800017 	ldw	r2,0(r4)
    40a8:	21000104 	addi	r4,r4,4
    40ac:	28800015 	stw	r2,0(r5)
    40b0:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    40b4:	29bffb1e 	bne	r5,r6,40a4 <alt_load_section+0x8>
    40b8:	f800283a 	ret

000040bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    40bc:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    40c0:	01000034 	movhi	r4,0
    40c4:	2115fb04 	addi	r4,r4,22508
    40c8:	01400034 	movhi	r5,0
    40cc:	29553b04 	addi	r5,r5,21740
    40d0:	01800034 	movhi	r6,0
    40d4:	3195fb04 	addi	r6,r6,22508
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    40d8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    40dc:	000409c0 	call	409c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    40e0:	01000034 	movhi	r4,0
    40e4:	21100804 	addi	r4,r4,16416
    40e8:	01400034 	movhi	r5,0
    40ec:	29500804 	addi	r5,r5,16416
    40f0:	01800034 	movhi	r6,0
    40f4:	31900804 	addi	r6,r6,16416
    40f8:	000409c0 	call	409c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    40fc:	01000034 	movhi	r4,0
    4100:	21152904 	addi	r4,r4,21668
    4104:	01400034 	movhi	r5,0
    4108:	29552904 	addi	r5,r5,21668
    410c:	01800034 	movhi	r6,0
    4110:	31953b04 	addi	r6,r6,21740
    4114:	000409c0 	call	409c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4118:	000467c0 	call	467c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    411c:	dfc00017 	ldw	ra,0(sp)
    4120:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4124:	00047781 	jmpi	4778 <alt_icache_flush_all>

00004128 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4128:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    412c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4130:	dfc00115 	stw	ra,4(sp)
    4134:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4138:	000432c0 	call	432c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    413c:	00043040 	call	4304 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4140:	01000034 	movhi	r4,0
    4144:	21153004 	addi	r4,r4,21696
    4148:	200b883a 	mov	r5,r4
    414c:	200d883a 	mov	r6,r4
    4150:	00048040 	call	4804 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4154:	00046f80 	call	46f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4158:	01000034 	movhi	r4,0
    415c:	2111ce04 	addi	r4,r4,18232
    4160:	0004bd80 	call	4bd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4164:	d120c817 	ldw	r4,-31968(gp)
    4168:	d160c917 	ldw	r5,-31964(gp)
    416c:	d1a0ca17 	ldw	r6,-31960(gp)
    4170:	000405c0 	call	405c <main>
    4174:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    4178:	01000044 	movi	r4,1
    417c:	00045e00 	call	45e0 <close>
  exit (result);
    4180:	8009883a 	mov	r4,r16
    4184:	0004bec0 	call	4bec <exit>

00004188 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    4188:	defff804 	addi	sp,sp,-32
    418c:	dfc00415 	stw	ra,16(sp)
    4190:	dc800315 	stw	r18,12(sp)
    4194:	dc400215 	stw	r17,8(sp)
    4198:	dc000115 	stw	r16,4(sp)
    419c:	d9400515 	stw	r5,20(sp)
    41a0:	d9800615 	stw	r6,24(sp)
    41a4:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    41a8:	d8800504 	addi	r2,sp,20
    41ac:	2025883a 	mov	r18,r4
    41b0:	d8800015 	stw	r2,0(sp)
    41b4:	00003d06 	br	42ac <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    41b8:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    41bc:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    41c0:	18800226 	beq	r3,r2,41cc <alt_printf+0x44>
        {
            alt_putchar(c);
    41c4:	1809883a 	mov	r4,r3
    41c8:	00000a06 	br	41f4 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    41cc:	91000007 	ldb	r4,0(r18)
    41d0:	94800044 	addi	r18,r18,1
    41d4:	20003726 	beq	r4,zero,42b4 <alt_printf+0x12c>
            {
                if (c == '%')
    41d8:	20c00626 	beq	r4,r3,41f4 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    41dc:	008018c4 	movi	r2,99
    41e0:	2080061e 	bne	r4,r2,41fc <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    41e4:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    41e8:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    41ec:	10800104 	addi	r2,r2,4
    41f0:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    41f4:	00042cc0 	call	42cc <alt_putchar>
    41f8:	00002c06 	br	42ac <alt_printf+0x124>
                }
                else if (c == 'x')
    41fc:	00801e04 	movi	r2,120
    4200:	20801e1e 	bne	r4,r2,427c <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    4204:	d8800017 	ldw	r2,0(sp)
    4208:	14400017 	ldw	r17,0(r2)
    420c:	10800104 	addi	r2,r2,4
    4210:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    4214:	88000226 	beq	r17,zero,4220 <alt_printf+0x98>
    4218:	04000704 	movi	r16,28
    421c:	00000306 	br	422c <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    4220:	01000c04 	movi	r4,48
    4224:	003ff306 	br	41f4 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    4228:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    422c:	008003c4 	movi	r2,15
    4230:	1404983a 	sll	r2,r2,r16
    4234:	8884703a 	and	r2,r17,r2
    4238:	103ffb26 	beq	r2,zero,4228 <alt_printf+0xa0>
    423c:	00000b06 	br	426c <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    4240:	8884703a 	and	r2,r17,r2
    4244:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    4248:	00800244 	movi	r2,9
                            c = '0' + digit;
    424c:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    4250:	10c0012e 	bgeu	r2,r3,4258 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    4254:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    4258:	21003fcc 	andi	r4,r4,255
    425c:	2100201c 	xori	r4,r4,128
    4260:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4264:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    4268:	00042cc0 	call	42cc <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    426c:	008003c4 	movi	r2,15
    4270:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4274:	803ff20e 	bge	r16,zero,4240 <alt_printf+0xb8>
    4278:	00000c06 	br	42ac <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    427c:	00801cc4 	movi	r2,115
    4280:	20800a1e 	bne	r4,r2,42ac <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    4284:	d8800017 	ldw	r2,0(sp)
    4288:	14000017 	ldw	r16,0(r2)
    428c:	10800104 	addi	r2,r2,4
    4290:	d8800015 	stw	r2,0(sp)
    4294:	00000106 	br	429c <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    4298:	00042cc0 	call	42cc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    429c:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    42a0:	84000044 	addi	r16,r16,1
    42a4:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    42a8:	103ffb1e 	bne	r2,zero,4298 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    42ac:	90c00007 	ldb	r3,0(r18)
    42b0:	183fc11e 	bne	r3,zero,41b8 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    42b4:	dfc00417 	ldw	ra,16(sp)
    42b8:	dc800317 	ldw	r18,12(sp)
    42bc:	dc400217 	ldw	r17,8(sp)
    42c0:	dc000117 	ldw	r16,4(sp)
    42c4:	dec00804 	addi	sp,sp,32
    42c8:	f800283a 	ret

000042cc <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    42cc:	00800034 	movhi	r2,0
    42d0:	1095f904 	addi	r2,r2,22500
    42d4:	10800017 	ldw	r2,0(r2)
    42d8:	11400217 	ldw	r5,8(r2)
    42dc:	0004d8c1 	jmpi	4d8c <putc>

000042e0 <alt_putstr>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    42e0:	00800034 	movhi	r2,0
    42e4:	1095f904 	addi	r2,r2,22500
    42e8:	10800017 	ldw	r2,0(r2)
    42ec:	11400217 	ldw	r5,8(r2)
    42f0:	0004c0c1 	jmpi	4c0c <fputs>

000042f4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    42f4:	00045341 	jmpi	4534 <alt_busy_sleep>

000042f8 <alt_dev_reg>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    42f8:	01400034 	movhi	r5,0
    42fc:	2955f504 	addi	r5,r5,22484
    4300:	00046881 	jmpi	4688 <alt_dev_llist_insert>

00004304 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4304:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    4308:	01000034 	movhi	r4,0
    430c:	21153b04 	addi	r4,r4,21740
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4310:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    4314:	00042f80 	call	42f8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    4318:	01000034 	movhi	r4,0
    431c:	21154604 	addi	r4,r4,21784
}
    4320:	dfc00017 	ldw	ra,0(sp)
    4324:	dec00104 	addi	sp,sp,4
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    4328:	00042f81 	jmpi	42f8 <alt_dev_reg>

0000432c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    432c:	deffff04 	addi	sp,sp,-4
    4330:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    4334:	0004a680 	call	4a68 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4338:	00800044 	movi	r2,1
    433c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4340:	dfc00017 	ldw	ra,0(sp)
    4344:	dec00104 	addi	sp,sp,4
    4348:	f800283a 	ret

0000434c <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    434c:	20800017 	ldw	r2,0(r4)
    4350:	21c00217 	ldw	r7,8(r4)
    4354:	11000a04 	addi	r4,r2,40
    4358:	00043cc1 	jmpi	43cc <altera_avalon_jtag_uart_write>

0000435c <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    435c:	20800017 	ldw	r2,0(r4)
    4360:	21c00217 	ldw	r7,8(r4)
    4364:	11000a04 	addi	r4,r2,40
    4368:	000436c1 	jmpi	436c <altera_avalon_jtag_uart_read>

0000436c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    436c:	21000017 	ldw	r4,0(r4)
    4370:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
    4374:	2993883a 	add	r9,r5,r6
    4378:	1010c03a 	cmpne	r8,r2,zero
    437c:	2807883a 	mov	r3,r5
    4380:	00000806 	br	43a4 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4384:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    4388:	30a0000c 	andi	r2,r6,32768
    438c:	10000326 	beq	r2,zero,439c <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4390:	19800005 	stb	r6,0(r3)
    4394:	18c00044 	addi	r3,r3,1
    4398:	00000206 	br	43a4 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
    439c:	1940031e 	bne	r3,r5,43ac <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
    43a0:	4000081e 	bne	r8,zero,43c4 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    43a4:	1a7ff736 	bltu	r3,r9,4384 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    43a8:	19400226 	beq	r3,r5,43b4 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
    43ac:	1945c83a 	sub	r2,r3,r5
    43b0:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    43b4:	3890000c 	andi	r2,r7,16384
    43b8:	1000021e 	bne	r2,zero,43c4 <altera_avalon_jtag_uart_read+0x58>
    43bc:	00bffec4 	movi	r2,-5
    43c0:	f800283a 	ret
    43c4:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    43c8:	f800283a 	ret

000043cc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    43cc:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    43d0:	298f883a 	add	r7,r5,r6
    43d4:	20c00104 	addi	r3,r4,4
    43d8:	00000606 	br	43f4 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    43dc:	18800037 	ldwio	r2,0(r3)
    43e0:	10bfffec 	andhi	r2,r2,65535
    43e4:	10000326 	beq	r2,zero,43f4 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    43e8:	28800007 	ldb	r2,0(r5)
    43ec:	29400044 	addi	r5,r5,1
    43f0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    43f4:	29fff936 	bltu	r5,r7,43dc <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    43f8:	3005883a 	mov	r2,r6
    43fc:	f800283a 	ret

00004400 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    4400:	20800017 	ldw	r2,0(r4)
    4404:	21c00217 	ldw	r7,8(r4)
    4408:	11000a04 	addi	r4,r2,40
    440c:	00044a01 	jmpi	44a0 <altera_avalon_uart_write>

00004410 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    4410:	20800017 	ldw	r2,0(r4)
    4414:	21c00217 	ldw	r7,8(r4)
    4418:	11000a04 	addi	r4,r2,40
    441c:	00044201 	jmpi	4420 <altera_avalon_uart_read>

00004420 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    4420:	deffff04 	addi	sp,sp,-4
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    4424:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    4428:	dfc00015 	stw	ra,0(sp)
    442c:	380f003a 	cmpeq	r7,r7,zero

  block = !(flags & O_NONBLOCK);

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    4430:	20800017 	ldw	r2,0(r4)
    4434:	10c00237 	ldwio	r3,8(r2)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    4438:	10000235 	stwio	zero,8(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    443c:	1880200c 	andi	r2,r3,128
    4440:	10000526 	beq	r2,zero,4458 <altera_avalon_uart_read+0x38>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    4444:	20800017 	ldw	r2,0(r4)
    4448:	10800037 	ldwio	r2,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    444c:	18c000cc 	andi	r3,r3,3

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    4450:	28800005 	stb	r2,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    4454:	18000826 	beq	r3,zero,4478 <altera_avalon_uart_read+0x58>
      {
        return 1;
      }
    }
  }
  while (block);
    4458:	383ff51e 	bne	r7,zero,4430 <altera_avalon_uart_read+0x10>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    445c:	00800034 	movhi	r2,0
    4460:	1095f804 	addi	r2,r2,22496
    4464:	10800017 	ldw	r2,0(r2)
    4468:	1000051e 	bne	r2,zero,4480 <altera_avalon_uart_read+0x60>
    446c:	00c00034 	movhi	r3,0
    4470:	18d6be04 	addi	r3,r3,23288
    4474:	00000406 	br	4488 <altera_avalon_uart_read+0x68>

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    4478:	00800044 	movi	r2,1
    447c:	00000506 	br	4494 <altera_avalon_uart_read+0x74>
    4480:	103ee83a 	callr	r2
    4484:	1007883a 	mov	r3,r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
    4488:	008002c4 	movi	r2,11
    448c:	18800015 	stw	r2,0(r3)
    4490:	0005883a 	mov	r2,zero
 
  return 0;
}
    4494:	dfc00017 	ldw	ra,0(sp)
    4498:	dec00104 	addi	sp,sp,4
    449c:	f800283a 	ret

000044a0 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    44a0:	defffd04 	addi	sp,sp,-12
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    44a4:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    44a8:	dc400115 	stw	r17,4(sp)
    44ac:	dc000015 	stw	r16,0(sp)
    44b0:	dfc00215 	stw	ra,8(sp)
    44b4:	3023883a 	mov	r17,r6
    44b8:	380ec03a 	cmpne	r7,r7,zero
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    44bc:	3021883a 	mov	r16,r6
  count = len;

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    44c0:	20c00017 	ldw	r3,0(r4)
    44c4:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    44c8:	1080100c 	andi	r2,r2,64
    44cc:	10000426 	beq	r2,zero,44e0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    44d0:	28800007 	ldb	r2,0(r5)
    44d4:	29400044 	addi	r5,r5,1
    44d8:	18800135 	stwio	r2,4(r3)
      count--;
    44dc:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
    44e0:	3800021e 	bne	r7,zero,44ec <altera_avalon_uart_write+0x4c>
    44e4:	80000d26 	beq	r16,zero,451c <altera_avalon_uart_write+0x7c>
    44e8:	003ff506 	br	44c0 <altera_avalon_uart_write+0x20>

  if (count)
    44ec:	80000b26 	beq	r16,zero,451c <altera_avalon_uart_write+0x7c>
    44f0:	00800034 	movhi	r2,0
    44f4:	1095f804 	addi	r2,r2,22496
    44f8:	10800017 	ldw	r2,0(r2)
    44fc:	1000031e 	bne	r2,zero,450c <altera_avalon_uart_write+0x6c>
    4500:	00c00034 	movhi	r3,0
    4504:	18d6be04 	addi	r3,r3,23288
    4508:	00000206 	br	4514 <altera_avalon_uart_write+0x74>
    450c:	103ee83a 	callr	r2
    4510:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EWOULDBLOCK;
    4514:	008002c4 	movi	r2,11
    4518:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
}
    451c:	8c05c83a 	sub	r2,r17,r16
    4520:	dfc00217 	ldw	ra,8(sp)
    4524:	dc400117 	ldw	r17,4(sp)
    4528:	dc000017 	ldw	r16,0(sp)
    452c:	dec00304 	addi	sp,sp,12
    4530:	f800283a 	ret

00004534 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4534:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4538:	014666b4 	movhi	r5,6554
    453c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4540:	dc000015 	stw	r16,0(sp)
    4544:	dfc00115 	stw	ra,4(sp)
    4548:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    454c:	00053700 	call	5370 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4550:	10001126 	beq	r2,zero,4598 <alt_busy_sleep+0x64>
    4554:	0007883a 	mov	r3,zero
    4558:	01200034 	movhi	r4,32768
    455c:	213fffc4 	addi	r4,r4,-1
    4560:	017999b4 	movhi	r5,58982
    4564:	295999c4 	addi	r5,r5,26215
    4568:	00000406 	br	457c <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    456c:	213fffc4 	addi	r4,r4,-1
    4570:	203ffe1e 	bne	r4,zero,456c <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4574:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4578:	18c00044 	addi	r3,r3,1
    457c:	18bffb16 	blt	r3,r2,456c <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4580:	8009883a 	mov	r4,r16
    4584:	01400144 	movi	r5,5
    4588:	00053800 	call	5380 <__mulsi3>
    458c:	10bfffc4 	addi	r2,r2,-1
    4590:	103ffe1e 	bne	r2,zero,458c <alt_busy_sleep+0x58>
    4594:	00000506 	br	45ac <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4598:	8009883a 	mov	r4,r16
    459c:	01400144 	movi	r5,5
    45a0:	00053800 	call	5380 <__mulsi3>
    45a4:	10bfffc4 	addi	r2,r2,-1
    45a8:	00bffe16 	blt	zero,r2,45a4 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    45ac:	0005883a 	mov	r2,zero
    45b0:	dfc00117 	ldw	ra,4(sp)
    45b4:	dc000017 	ldw	r16,0(sp)
    45b8:	dec00204 	addi	sp,sp,8
    45bc:	f800283a 	ret

000045c0 <alt_get_errno>:
    45c0:	00800034 	movhi	r2,0
    45c4:	1095f804 	addi	r2,r2,22496
    45c8:	10c00017 	ldw	r3,0(r2)
}
    45cc:	00800034 	movhi	r2,0
    45d0:	1096be04 	addi	r2,r2,23288

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    45d4:	18000126 	beq	r3,zero,45dc <alt_get_errno+0x1c>
    45d8:	1800683a 	jmp	r3
}
    45dc:	f800283a 	ret

000045e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    45e0:	defffd04 	addi	sp,sp,-12
    45e4:	dc000015 	stw	r16,0(sp)
    45e8:	dfc00215 	stw	ra,8(sp)
    45ec:	dc400115 	stw	r17,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    45f0:	01400304 	movi	r5,12
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    45f4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    45f8:	20001216 	blt	r4,zero,4644 <close+0x64>
    45fc:	00053800 	call	5380 <__mulsi3>
    4600:	00c00034 	movhi	r3,0
    4604:	18d55b04 	addi	r3,r3,21868
    4608:	10c9883a 	add	r4,r2,r3

  if (fd)
    460c:	20000d26 	beq	r4,zero,4644 <close+0x64>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4610:	20800017 	ldw	r2,0(r4)
    4614:	10800417 	ldw	r2,16(r2)
    4618:	10000f26 	beq	r2,zero,4658 <close+0x78>
    461c:	103ee83a 	callr	r2
    4620:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4624:	8009883a 	mov	r4,r16
    4628:	0004a0c0 	call	4a0c <alt_release_fd>
    if (rval < 0)
    462c:	0009883a 	mov	r4,zero
    4630:	88000c0e 	bge	r17,zero,4664 <close+0x84>
    {
      ALT_ERRNO = -rval;
    4634:	00045c00 	call	45c0 <alt_get_errno>
    4638:	0447c83a 	sub	r3,zero,r17
    463c:	013fffc4 	movi	r4,-1
    4640:	00000306 	br	4650 <close+0x70>
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4644:	00045c00 	call	45c0 <alt_get_errno>
    4648:	013fffc4 	movi	r4,-1
    464c:	00c01444 	movi	r3,81
    4650:	10c00015 	stw	r3,0(r2)
    4654:	00000306 	br	4664 <close+0x84>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4658:	8009883a 	mov	r4,r16
    465c:	0004a0c0 	call	4a0c <alt_release_fd>
    4660:	0009883a 	mov	r4,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    4664:	2005883a 	mov	r2,r4
    4668:	dfc00217 	ldw	ra,8(sp)
    466c:	dc400117 	ldw	r17,4(sp)
    4670:	dc000017 	ldw	r16,0(sp)
    4674:	dec00304 	addi	sp,sp,12
    4678:	f800283a 	ret

0000467c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    467c:	f800283a 	ret

00004680 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    4680:	3005883a 	mov	r2,r6
    4684:	f800283a 	ret

00004688 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4688:	deffff04 	addi	sp,sp,-4
    468c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4690:	20000326 	beq	r4,zero,46a0 <alt_dev_llist_insert+0x18>
    4694:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
    4698:	000d883a 	mov	r6,zero
    469c:	10000c1e 	bne	r2,zero,46d0 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    46a0:	00800034 	movhi	r2,0
    46a4:	1095f804 	addi	r2,r2,22496
    46a8:	10800017 	ldw	r2,0(r2)
    46ac:	00c00034 	movhi	r3,0
    46b0:	18d6be04 	addi	r3,r3,23288
    46b4:	10000226 	beq	r2,zero,46c0 <alt_dev_llist_insert+0x38>
    46b8:	103ee83a 	callr	r2
    46bc:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    46c0:	00800584 	movi	r2,22
    46c4:	01bffa84 	movi	r6,-22
    46c8:	18800015 	stw	r2,0(r3)
    46cc:	00000606 	br	46e8 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    46d0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    46d4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    46d8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    46dc:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
    46e0:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    46e4:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    46e8:	3005883a 	mov	r2,r6
    46ec:	dfc00017 	ldw	ra,0(sp)
    46f0:	dec00104 	addi	sp,sp,4
    46f4:	f800283a 	ret

000046f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    46f8:	defffe04 	addi	sp,sp,-8
    46fc:	dc000015 	stw	r16,0(sp)
    4700:	04000034 	movhi	r16,0
    4704:	84152804 	addi	r16,r16,21664
    4708:	dfc00115 	stw	ra,4(sp)
    470c:	00000306 	br	471c <_do_ctors+0x24>
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
        (*ctor) (); 
    4710:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4714:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    4718:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    471c:	00800034 	movhi	r2,0
    4720:	10952804 	addi	r2,r2,21664
    4724:	80bffa2e 	bgeu	r16,r2,4710 <_do_ctors+0x18>
        (*ctor) (); 
}
    4728:	dfc00117 	ldw	ra,4(sp)
    472c:	dc000017 	ldw	r16,0(sp)
    4730:	dec00204 	addi	sp,sp,8
    4734:	f800283a 	ret

00004738 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4738:	defffe04 	addi	sp,sp,-8
    473c:	dc000015 	stw	r16,0(sp)
    4740:	04000034 	movhi	r16,0
    4744:	84152804 	addi	r16,r16,21664
    4748:	dfc00115 	stw	ra,4(sp)
    474c:	00000306 	br	475c <_do_dtors+0x24>
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
        (*dtor) (); 
    4750:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4754:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    4758:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    475c:	00800034 	movhi	r2,0
    4760:	10952904 	addi	r2,r2,21668
    4764:	80bffa2e 	bgeu	r16,r2,4750 <_do_dtors+0x18>
        (*dtor) (); 
}
    4768:	dfc00117 	ldw	ra,4(sp)
    476c:	dc000017 	ldw	r16,0(sp)
    4770:	dec00204 	addi	sp,sp,8
    4774:	f800283a 	ret

00004778 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4778:	f800283a 	ret

0000477c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    477c:	defffd04 	addi	sp,sp,-12
    4780:	dc400115 	stw	r17,4(sp)
    4784:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
    4788:	2809883a 	mov	r4,r5
    478c:	300b883a 	mov	r5,r6
    4790:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4794:	dc000015 	stw	r16,0(sp)
    4798:	dfc00215 	stw	ra,8(sp)
  int old;

  old = open (name, flags, mode);
    479c:	00048900 	call	4890 <open>
    47a0:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    47a4:	1009883a 	mov	r4,r2
    47a8:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
    47ac:	10001016 	blt	r2,zero,47f0 <alt_open_fd+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
    47b0:	00053800 	call	5380 <__mulsi3>
    47b4:	00c00034 	movhi	r3,0
    47b8:	18d55b04 	addi	r3,r3,21868
    47bc:	10c5883a 	add	r2,r2,r3
    47c0:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    47c4:	10c00217 	ldw	r3,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    47c8:	10800117 	ldw	r2,4(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    47cc:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    47d0:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    47d4:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    47d8:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
    47dc:	dfc00217 	ldw	ra,8(sp)
    47e0:	dc400117 	ldw	r17,4(sp)
    47e4:	dc000017 	ldw	r16,0(sp)
    47e8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    47ec:	0004a0c1 	jmpi	4a0c <alt_release_fd>
  }
} 
    47f0:	dfc00217 	ldw	ra,8(sp)
    47f4:	dc400117 	ldw	r17,4(sp)
    47f8:	dc000017 	ldw	r16,0(sp)
    47fc:	dec00304 	addi	sp,sp,12
    4800:	f800283a 	ret

00004804 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4804:	defffa04 	addi	sp,sp,-24
    4808:	dcc00315 	stw	r19,12(sp)
    480c:	dc400115 	stw	r17,4(sp)
    4810:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4814:	04407fc4 	movi	r17,511
    4818:	04000034 	movhi	r16,0
    481c:	84155e04 	addi	r16,r16,21880
    4820:	04c00044 	movi	r19,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4824:	dd000415 	stw	r20,16(sp)
    4828:	dc800215 	stw	r18,8(sp)
    482c:	3029883a 	mov	r20,r6
    4830:	2825883a 	mov	r18,r5
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4834:	980d883a 	mov	r6,r19
    4838:	200b883a 	mov	r5,r4
    483c:	880f883a 	mov	r7,r17
    4840:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4844:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4848:	000477c0 	call	477c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    484c:	900b883a 	mov	r5,r18
    4850:	813ffd04 	addi	r4,r16,-12
    4854:	880f883a 	mov	r7,r17
    4858:	000d883a 	mov	r6,zero
    485c:	000477c0 	call	477c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4860:	81000304 	addi	r4,r16,12
    4864:	a00b883a 	mov	r5,r20
    4868:	980d883a 	mov	r6,r19
    486c:	880f883a 	mov	r7,r17
}  
    4870:	dfc00517 	ldw	ra,20(sp)
    4874:	dd000417 	ldw	r20,16(sp)
    4878:	dcc00317 	ldw	r19,12(sp)
    487c:	dc800217 	ldw	r18,8(sp)
    4880:	dc400117 	ldw	r17,4(sp)
    4884:	dc000017 	ldw	r16,0(sp)
    4888:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    488c:	000477c1 	jmpi	477c <alt_open_fd>

00004890 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4890:	defff904 	addi	sp,sp,-28
    4894:	dd000415 	stw	r20,16(sp)
    4898:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    489c:	01400034 	movhi	r5,0
    48a0:	2955f504 	addi	r5,r5,22484
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    48a4:	dd400515 	stw	r21,20(sp)
    48a8:	dcc00315 	stw	r19,12(sp)
    48ac:	dc000015 	stw	r16,0(sp)
    48b0:	dfc00615 	stw	ra,24(sp)
    48b4:	dc800215 	stw	r18,8(sp)
    48b8:	dc400115 	stw	r17,4(sp)
    48bc:	302b883a 	mov	r21,r6
    48c0:	2027883a 	mov	r19,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    48c4:	0004a700 	call	4a70 <alt_find_dev>
    48c8:	1021883a 	mov	r16,r2
    48cc:	10000226 	beq	r2,zero,48d8 <open+0x48>
    48d0:	0025883a 	mov	r18,zero
    48d4:	00000a06 	br	4900 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    48d8:	9809883a 	mov	r4,r19
    48dc:	0004ae00 	call	4ae0 <alt_find_file>
    48e0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    48e4:	1000051e 	bne	r2,zero,48fc <open+0x6c>
    48e8:	047fffc4 	movi	r17,-1
    48ec:	043ffb44 	movi	r16,-19
    48f0:	00002b06 	br	49a0 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    48f4:	043ffcc4 	movi	r16,-13
    48f8:	00002906 	br	49a0 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    48fc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    4900:	8009883a 	mov	r4,r16
    4904:	0004b7c0 	call	4b7c <alt_get_fd>
    4908:	1023883a 	mov	r17,r2
    490c:	10003316 	blt	r2,zero,49dc <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    4910:	1009883a 	mov	r4,r2
    4914:	01400304 	movi	r5,12
    4918:	00053800 	call	5380 <__mulsi3>
    491c:	01400034 	movhi	r5,0
    4920:	29555b04 	addi	r5,r5,21868
    4924:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4928:	00900034 	movhi	r2,16384
    492c:	10bfffc4 	addi	r2,r2,-1
    4930:	a086703a 	and	r3,r20,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4934:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4938:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    493c:	1000101e 	bne	r2,zero,4980 <open+0xf0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4940:	00800034 	movhi	r2,0
    4944:	1095f704 	addi	r2,r2,22492
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4948:	21800017 	ldw	r6,0(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    494c:	11c00017 	ldw	r7,0(r2)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4950:	18900034 	orhi	r2,r3,16384
    4954:	20800215 	stw	r2,8(r4)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4958:	2807883a 	mov	r3,r5
    495c:	000b883a 	mov	r5,zero
    4960:	18800017 	ldw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4964:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4968:	1180031e 	bne	r2,r6,4978 <open+0xe8>
    496c:	18800217 	ldw	r2,8(r3)
    4970:	1000010e 	bge	r2,zero,4978 <open+0xe8>
    4974:	193fdf1e 	bne	r3,r4,48f4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4978:	18c00304 	addi	r3,r3,12
    497c:	397ff82e 	bgeu	r7,r5,4960 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4980:	80800317 	ldw	r2,12(r16)
    4984:	10001726 	beq	r2,zero,49e4 <open+0x154>
    4988:	980b883a 	mov	r5,r19
    498c:	a00d883a 	mov	r6,r20
    4990:	a80f883a 	mov	r7,r21
    4994:	103ee83a 	callr	r2
    4998:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    499c:	1000110e 	bge	r2,zero,49e4 <open+0x154>
  {
    alt_release_fd (index);  
    49a0:	8809883a 	mov	r4,r17
    49a4:	0004a0c0 	call	4a0c <alt_release_fd>
    49a8:	00800034 	movhi	r2,0
    49ac:	1095f804 	addi	r2,r2,22496
    49b0:	10800017 	ldw	r2,0(r2)
    49b4:	1000031e 	bne	r2,zero,49c4 <open+0x134>
    49b8:	00c00034 	movhi	r3,0
    49bc:	18d6be04 	addi	r3,r3,23288
    49c0:	00000206 	br	49cc <open+0x13c>
    49c4:	103ee83a 	callr	r2
    49c8:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    49cc:	0405c83a 	sub	r2,zero,r16
    49d0:	047fffc4 	movi	r17,-1
    49d4:	18800015 	stw	r2,0(r3)
    49d8:	00000206 	br	49e4 <open+0x154>
    49dc:	1021883a 	mov	r16,r2
    49e0:	003fef06 	br	49a0 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
    49e4:	8805883a 	mov	r2,r17
    49e8:	dfc00617 	ldw	ra,24(sp)
    49ec:	dd400517 	ldw	r21,20(sp)
    49f0:	dd000417 	ldw	r20,16(sp)
    49f4:	dcc00317 	ldw	r19,12(sp)
    49f8:	dc800217 	ldw	r18,8(sp)
    49fc:	dc400117 	ldw	r17,4(sp)
    4a00:	dc000017 	ldw	r16,0(sp)
    4a04:	dec00704 	addi	sp,sp,28
    4a08:	f800283a 	ret

00004a0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4a0c:	defffd04 	addi	sp,sp,-12
  if (fd > 2)
    4a10:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4a14:	dc400115 	stw	r17,4(sp)
    4a18:	dc000015 	stw	r16,0(sp)
    4a1c:	dfc00215 	stw	ra,8(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    4a20:	01400304 	movi	r5,12
    4a24:	04400034 	movhi	r17,0
    4a28:	8c555b04 	addi	r17,r17,21868
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4a2c:	2021883a 	mov	r16,r4
  if (fd > 2)
    4a30:	1100080e 	bge	r2,r4,4a54 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
    4a34:	00053800 	call	5380 <__mulsi3>
    4a38:	1445883a 	add	r2,r2,r17
    alt_fd_list[fd].dev      = 0;
    4a3c:	8009883a 	mov	r4,r16
    4a40:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    4a44:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    4a48:	00053800 	call	5380 <__mulsi3>
    4a4c:	1445883a 	add	r2,r2,r17
    4a50:	10000015 	stw	zero,0(r2)
  }
}
    4a54:	dfc00217 	ldw	ra,8(sp)
    4a58:	dc400117 	ldw	r17,4(sp)
    4a5c:	dc000017 	ldw	r16,0(sp)
    4a60:	dec00304 	addi	sp,sp,12
    4a64:	f800283a 	ret

00004a68 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4a68:	000170fa 	wrctl	ienable,zero
}
    4a6c:	f800283a 	ret

00004a70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4a70:	defffb04 	addi	sp,sp,-20
    4a74:	dcc00315 	stw	r19,12(sp)
    4a78:	dc800215 	stw	r18,8(sp)
    4a7c:	dc400115 	stw	r17,4(sp)
    4a80:	dc000015 	stw	r16,0(sp)
    4a84:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    4a88:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4a8c:	2823883a 	mov	r17,r5
    4a90:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    4a94:	0004e700 	call	4e70 <strlen>
    4a98:	14800044 	addi	r18,r2,1
    4a9c:	00000406 	br	4ab0 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4aa0:	81000217 	ldw	r4,8(r16)
    4aa4:	0004d500 	call	4d50 <memcmp>
    4aa8:	10000526 	beq	r2,zero,4ac0 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    4aac:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4ab0:	980b883a 	mov	r5,r19
    4ab4:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4ab8:	847ff91e 	bne	r16,r17,4aa0 <alt_find_dev+0x30>
    4abc:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
    4ac0:	8005883a 	mov	r2,r16
    4ac4:	dfc00417 	ldw	ra,16(sp)
    4ac8:	dcc00317 	ldw	r19,12(sp)
    4acc:	dc800217 	ldw	r18,8(sp)
    4ad0:	dc400117 	ldw	r17,4(sp)
    4ad4:	dc000017 	ldw	r16,0(sp)
    4ad8:	dec00504 	addi	sp,sp,20
    4adc:	f800283a 	ret

00004ae0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4ae0:	defffc04 	addi	sp,sp,-16
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4ae4:	00800034 	movhi	r2,0
    4ae8:	1095f304 	addi	r2,r2,22476
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4aec:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4af0:	14400017 	ldw	r17,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4af4:	dc800215 	stw	r18,8(sp)
    4af8:	2025883a 	mov	r18,r4
    4afc:	dfc00315 	stw	ra,12(sp)
    4b00:	dc000015 	stw	r16,0(sp)
    4b04:	00001206 	br	4b50 <alt_find_file+0x70>
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    4b08:	8c000217 	ldw	r16,8(r17)
    4b0c:	8009883a 	mov	r4,r16
    4b10:	0004e700 	call	4e70 <strlen>
    4b14:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    4b18:	8085883a 	add	r2,r16,r2
    4b1c:	10bfffc7 	ldb	r2,-1(r2)
    4b20:	00c00bc4 	movi	r3,47
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4b24:	8009883a 	mov	r4,r16
    4b28:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    4b2c:	10c0011e 	bne	r2,r3,4b34 <alt_find_file+0x54>
    {
      len -= 1;
    4b30:	31bfffc4 	addi	r6,r6,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4b34:	9185883a 	add	r2,r18,r6
    4b38:	10800007 	ldb	r2,0(r2)
    4b3c:	10c00126 	beq	r2,r3,4b44 <alt_find_file+0x64>
    4b40:	1000021e 	bne	r2,zero,4b4c <alt_find_file+0x6c>
    4b44:	0004d500 	call	4d50 <memcmp>
    4b48:	10000526 	beq	r2,zero,4b60 <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    4b4c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4b50:	00800034 	movhi	r2,0
    4b54:	1095f304 	addi	r2,r2,22476
    4b58:	88bfeb1e 	bne	r17,r2,4b08 <alt_find_file+0x28>
    4b5c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    4b60:	8805883a 	mov	r2,r17
    4b64:	dfc00317 	ldw	ra,12(sp)
    4b68:	dc800217 	ldw	r18,8(sp)
    4b6c:	dc400117 	ldw	r17,4(sp)
    4b70:	dc000017 	ldw	r16,0(sp)
    4b74:	dec00404 	addi	sp,sp,16
    4b78:	f800283a 	ret

00004b7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4b7c:	01400034 	movhi	r5,0
    4b80:	29555b04 	addi	r5,r5,21868
    4b84:	0007883a 	mov	r3,zero
    4b88:	280d883a 	mov	r6,r5
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    4b8c:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4b90:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
    4b94:	10000a1e 	bne	r2,zero,4bc0 <alt_get_fd+0x44>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
    4b98:	01400034 	movhi	r5,0
    4b9c:	2955f704 	addi	r5,r5,22492
    4ba0:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    4ba4:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
    4ba8:	10c00216 	blt	r2,r3,4bb4 <alt_get_fd+0x38>
    4bac:	1805883a 	mov	r2,r3
    4bb0:	f800283a 	ret
      {
        alt_max_fd = i;
    4bb4:	1805883a 	mov	r2,r3
    4bb8:	28c00015 	stw	r3,0(r5)
    4bbc:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4bc0:	18c00044 	addi	r3,r3,1
    4bc4:	00800804 	movi	r2,32
    4bc8:	31800304 	addi	r6,r6,12
    4bcc:	18bfef1e 	bne	r3,r2,4b8c <alt_get_fd+0x10>
    4bd0:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    4bd4:	f800283a 	ret

00004bd8 <atexit>:
    4bd8:	200b883a 	mov	r5,r4
    4bdc:	000d883a 	mov	r6,zero
    4be0:	0009883a 	mov	r4,zero
    4be4:	000f883a 	mov	r7,zero
    4be8:	0004f081 	jmpi	4f08 <__register_exitproc>

00004bec <exit>:
    4bec:	defffe04 	addi	sp,sp,-8
    4bf0:	dc400015 	stw	r17,0(sp)
    4bf4:	000b883a 	mov	r5,zero
    4bf8:	2023883a 	mov	r17,r4
    4bfc:	dfc00115 	stw	ra,4(sp)
    4c00:	00050780 	call	5078 <__call_exitprocs>
    4c04:	8809883a 	mov	r4,r17
    4c08:	00053b80 	call	53b8 <_exit>

00004c0c <fputs>:
    4c0c:	defffd04 	addi	sp,sp,-12
    4c10:	dfc00215 	stw	ra,8(sp)
    4c14:	dcc00115 	stw	r19,4(sp)
    4c18:	dc400015 	stw	r17,0(sp)
    4c1c:	2027883a 	mov	r19,r4
    4c20:	2823883a 	mov	r17,r5
    4c24:	0004e700 	call	4e70 <strlen>
    4c28:	00c00034 	movhi	r3,0
    4c2c:	18d5f904 	addi	r3,r3,22500
    4c30:	19000017 	ldw	r4,0(r3)
    4c34:	01400034 	movhi	r5,0
    4c38:	29532504 	addi	r5,r5,19604
    4c3c:	89400115 	stw	r5,4(r17)
    4c40:	980d883a 	mov	r6,r19
    4c44:	880b883a 	mov	r5,r17
    4c48:	100f883a 	mov	r7,r2
    4c4c:	0004c940 	call	4c94 <__sfvwrite_small_dev>
    4c50:	1007883a 	mov	r3,r2
    4c54:	00bfffc4 	movi	r2,-1
    4c58:	0009883a 	mov	r4,zero
    4c5c:	18800626 	beq	r3,r2,4c78 <fputs+0x6c>
    4c60:	2005883a 	mov	r2,r4
    4c64:	dfc00217 	ldw	ra,8(sp)
    4c68:	dcc00117 	ldw	r19,4(sp)
    4c6c:	dc400017 	ldw	r17,0(sp)
    4c70:	dec00304 	addi	sp,sp,12
    4c74:	f800283a 	ret
    4c78:	1809883a 	mov	r4,r3
    4c7c:	2005883a 	mov	r2,r4
    4c80:	dfc00217 	ldw	ra,8(sp)
    4c84:	dcc00117 	ldw	r19,4(sp)
    4c88:	dc400017 	ldw	r17,0(sp)
    4c8c:	dec00304 	addi	sp,sp,12
    4c90:	f800283a 	ret

00004c94 <__sfvwrite_small_dev>:
    4c94:	2880000b 	ldhu	r2,0(r5)
    4c98:	defffa04 	addi	sp,sp,-24
    4c9c:	dcc00315 	stw	r19,12(sp)
    4ca0:	1080020c 	andi	r2,r2,8
    4ca4:	dc800215 	stw	r18,8(sp)
    4ca8:	dc400115 	stw	r17,4(sp)
    4cac:	dfc00515 	stw	ra,20(sp)
    4cb0:	dd000415 	stw	r20,16(sp)
    4cb4:	dc000015 	stw	r16,0(sp)
    4cb8:	2825883a 	mov	r18,r5
    4cbc:	2027883a 	mov	r19,r4
    4cc0:	3023883a 	mov	r17,r6
    4cc4:	10002026 	beq	r2,zero,4d48 <__sfvwrite_small_dev+0xb4>
    4cc8:	2940008f 	ldh	r5,2(r5)
    4ccc:	28000f16 	blt	r5,zero,4d0c <__sfvwrite_small_dev+0x78>
    4cd0:	01c01b0e 	bge	zero,r7,4d40 <__sfvwrite_small_dev+0xac>
    4cd4:	3821883a 	mov	r16,r7
    4cd8:	05010004 	movi	r20,1024
    4cdc:	00000206 	br	4ce8 <__sfvwrite_small_dev+0x54>
    4ce0:	0400170e 	bge	zero,r16,4d40 <__sfvwrite_small_dev+0xac>
    4ce4:	9140008f 	ldh	r5,2(r18)
    4ce8:	880d883a 	mov	r6,r17
    4cec:	9809883a 	mov	r4,r19
    4cf0:	800f883a 	mov	r7,r16
    4cf4:	a400010e 	bge	r20,r16,4cfc <__sfvwrite_small_dev+0x68>
    4cf8:	01c10004 	movi	r7,1024
    4cfc:	0004e900 	call	4e90 <_write_r>
    4d00:	88a3883a 	add	r17,r17,r2
    4d04:	80a1c83a 	sub	r16,r16,r2
    4d08:	00bff516 	blt	zero,r2,4ce0 <__sfvwrite_small_dev+0x4c>
    4d0c:	9080000b 	ldhu	r2,0(r18)
    4d10:	00ffffc4 	movi	r3,-1
    4d14:	10801014 	ori	r2,r2,64
    4d18:	9080000d 	sth	r2,0(r18)
    4d1c:	1805883a 	mov	r2,r3
    4d20:	dfc00517 	ldw	ra,20(sp)
    4d24:	dd000417 	ldw	r20,16(sp)
    4d28:	dcc00317 	ldw	r19,12(sp)
    4d2c:	dc800217 	ldw	r18,8(sp)
    4d30:	dc400117 	ldw	r17,4(sp)
    4d34:	dc000017 	ldw	r16,0(sp)
    4d38:	dec00604 	addi	sp,sp,24
    4d3c:	f800283a 	ret
    4d40:	0007883a 	mov	r3,zero
    4d44:	003ff506 	br	4d1c <__sfvwrite_small_dev+0x88>
    4d48:	00ffffc4 	movi	r3,-1
    4d4c:	003ff306 	br	4d1c <__sfvwrite_small_dev+0x88>

00004d50 <memcmp>:
    4d50:	31ffffc4 	addi	r7,r6,-1
    4d54:	3000061e 	bne	r6,zero,4d70 <memcmp+0x20>
    4d58:	00000a06 	br	4d84 <memcmp+0x34>
    4d5c:	39ffffc4 	addi	r7,r7,-1
    4d60:	00bfffc4 	movi	r2,-1
    4d64:	21000044 	addi	r4,r4,1
    4d68:	29400044 	addi	r5,r5,1
    4d6c:	38800526 	beq	r7,r2,4d84 <memcmp+0x34>
    4d70:	20c00003 	ldbu	r3,0(r4)
    4d74:	28800003 	ldbu	r2,0(r5)
    4d78:	18bff826 	beq	r3,r2,4d5c <memcmp+0xc>
    4d7c:	1885c83a 	sub	r2,r3,r2
    4d80:	f800283a 	ret
    4d84:	0005883a 	mov	r2,zero
    4d88:	f800283a 	ret

00004d8c <putc>:
    4d8c:	defffd04 	addi	sp,sp,-12
    4d90:	00800034 	movhi	r2,0
    4d94:	1095f904 	addi	r2,r2,22500
    4d98:	dc000115 	stw	r16,4(sp)
    4d9c:	2021883a 	mov	r16,r4
    4da0:	11000017 	ldw	r4,0(r2)
    4da4:	dc000005 	stb	r16,0(sp)
    4da8:	00800034 	movhi	r2,0
    4dac:	10932504 	addi	r2,r2,19604
    4db0:	dfc00215 	stw	ra,8(sp)
    4db4:	28800115 	stw	r2,4(r5)
    4db8:	d80d883a 	mov	r6,sp
    4dbc:	01c00044 	movi	r7,1
    4dc0:	103ee83a 	callr	r2
    4dc4:	1007883a 	mov	r3,r2
    4dc8:	00bfffc4 	movi	r2,-1
    4dcc:	18800526 	beq	r3,r2,4de4 <putc+0x58>
    4dd0:	8005883a 	mov	r2,r16
    4dd4:	dfc00217 	ldw	ra,8(sp)
    4dd8:	dc000117 	ldw	r16,4(sp)
    4ddc:	dec00304 	addi	sp,sp,12
    4de0:	f800283a 	ret
    4de4:	1821883a 	mov	r16,r3
    4de8:	8005883a 	mov	r2,r16
    4dec:	dfc00217 	ldw	ra,8(sp)
    4df0:	dc000117 	ldw	r16,4(sp)
    4df4:	dec00304 	addi	sp,sp,12
    4df8:	f800283a 	ret

00004dfc <_putc_r>:
    4dfc:	00800034 	movhi	r2,0
    4e00:	1095f904 	addi	r2,r2,22500
    4e04:	defffd04 	addi	sp,sp,-12
    4e08:	11000017 	ldw	r4,0(r2)
    4e0c:	00800034 	movhi	r2,0
    4e10:	10932504 	addi	r2,r2,19604
    4e14:	30800115 	stw	r2,4(r6)
    4e18:	dc000115 	stw	r16,4(sp)
    4e1c:	2821883a 	mov	r16,r5
    4e20:	dfc00215 	stw	ra,8(sp)
    4e24:	300b883a 	mov	r5,r6
    4e28:	01c00044 	movi	r7,1
    4e2c:	d80d883a 	mov	r6,sp
    4e30:	dc000005 	stb	r16,0(sp)
    4e34:	103ee83a 	callr	r2
    4e38:	1007883a 	mov	r3,r2
    4e3c:	00bfffc4 	movi	r2,-1
    4e40:	18800526 	beq	r3,r2,4e58 <_putc_r+0x5c>
    4e44:	8005883a 	mov	r2,r16
    4e48:	dfc00217 	ldw	ra,8(sp)
    4e4c:	dc000117 	ldw	r16,4(sp)
    4e50:	dec00304 	addi	sp,sp,12
    4e54:	f800283a 	ret
    4e58:	1821883a 	mov	r16,r3
    4e5c:	8005883a 	mov	r2,r16
    4e60:	dfc00217 	ldw	ra,8(sp)
    4e64:	dc000117 	ldw	r16,4(sp)
    4e68:	dec00304 	addi	sp,sp,12
    4e6c:	f800283a 	ret

00004e70 <strlen>:
    4e70:	20800007 	ldb	r2,0(r4)
    4e74:	10000526 	beq	r2,zero,4e8c <strlen+0x1c>
    4e78:	2007883a 	mov	r3,r4
    4e7c:	18c00044 	addi	r3,r3,1
    4e80:	18800007 	ldb	r2,0(r3)
    4e84:	103ffd1e 	bne	r2,zero,4e7c <strlen+0xc>
    4e88:	1905c83a 	sub	r2,r3,r4
    4e8c:	f800283a 	ret

00004e90 <_write_r>:
    4e90:	defffd04 	addi	sp,sp,-12
    4e94:	dc000015 	stw	r16,0(sp)
    4e98:	04000034 	movhi	r16,0
    4e9c:	8416be04 	addi	r16,r16,23288
    4ea0:	dc400115 	stw	r17,4(sp)
    4ea4:	80000015 	stw	zero,0(r16)
    4ea8:	2023883a 	mov	r17,r4
    4eac:	2809883a 	mov	r4,r5
    4eb0:	300b883a 	mov	r5,r6
    4eb4:	380d883a 	mov	r6,r7
    4eb8:	dfc00215 	stw	ra,8(sp)
    4ebc:	00053ec0 	call	53ec <write>
    4ec0:	1007883a 	mov	r3,r2
    4ec4:	00bfffc4 	movi	r2,-1
    4ec8:	18800626 	beq	r3,r2,4ee4 <_write_r+0x54>
    4ecc:	1805883a 	mov	r2,r3
    4ed0:	dfc00217 	ldw	ra,8(sp)
    4ed4:	dc400117 	ldw	r17,4(sp)
    4ed8:	dc000017 	ldw	r16,0(sp)
    4edc:	dec00304 	addi	sp,sp,12
    4ee0:	f800283a 	ret
    4ee4:	80800017 	ldw	r2,0(r16)
    4ee8:	103ff826 	beq	r2,zero,4ecc <_write_r+0x3c>
    4eec:	88800015 	stw	r2,0(r17)
    4ef0:	1805883a 	mov	r2,r3
    4ef4:	dfc00217 	ldw	ra,8(sp)
    4ef8:	dc400117 	ldw	r17,4(sp)
    4efc:	dc000017 	ldw	r16,0(sp)
    4f00:	dec00304 	addi	sp,sp,12
    4f04:	f800283a 	ret

00004f08 <__register_exitproc>:
    4f08:	defff904 	addi	sp,sp,-28
    4f0c:	00800034 	movhi	r2,0
    4f10:	1095fa04 	addi	r2,r2,22504
    4f14:	dc400115 	stw	r17,4(sp)
    4f18:	14400017 	ldw	r17,0(r2)
    4f1c:	dc000015 	stw	r16,0(sp)
    4f20:	dd400515 	stw	r21,20(sp)
    4f24:	8c000c17 	ldw	r16,48(r17)
    4f28:	dd000415 	stw	r20,16(sp)
    4f2c:	dcc00315 	stw	r19,12(sp)
    4f30:	dc800215 	stw	r18,8(sp)
    4f34:	dfc00615 	stw	ra,24(sp)
    4f38:	2025883a 	mov	r18,r4
    4f3c:	282b883a 	mov	r21,r5
    4f40:	3029883a 	mov	r20,r6
    4f44:	3827883a 	mov	r19,r7
    4f48:	80002626 	beq	r16,zero,4fe4 <__register_exitproc+0xdc>
    4f4c:	81400117 	ldw	r5,4(r16)
    4f50:	008007c4 	movi	r2,31
    4f54:	11403716 	blt	r2,r5,5034 <__register_exitproc+0x12c>
    4f58:	90002026 	beq	r18,zero,4fdc <__register_exitproc+0xd4>
    4f5c:	81802217 	ldw	r6,136(r16)
    4f60:	30002926 	beq	r6,zero,5008 <__register_exitproc+0x100>
    4f64:	81400117 	ldw	r5,4(r16)
    4f68:	00c00044 	movi	r3,1
    4f6c:	31004017 	ldw	r4,256(r6)
    4f70:	1946983a 	sll	r3,r3,r5
    4f74:	2945883a 	add	r2,r5,r5
    4f78:	1085883a 	add	r2,r2,r2
    4f7c:	1185883a 	add	r2,r2,r6
    4f80:	20c8b03a 	or	r4,r4,r3
    4f84:	14c02015 	stw	r19,128(r2)
    4f88:	15000015 	stw	r20,0(r2)
    4f8c:	00800084 	movi	r2,2
    4f90:	31004015 	stw	r4,256(r6)
    4f94:	90801826 	beq	r18,r2,4ff8 <__register_exitproc+0xf0>
    4f98:	2945883a 	add	r2,r5,r5
    4f9c:	1085883a 	add	r2,r2,r2
    4fa0:	1405883a 	add	r2,r2,r16
    4fa4:	28c00044 	addi	r3,r5,1
    4fa8:	0009883a 	mov	r4,zero
    4fac:	15400215 	stw	r21,8(r2)
    4fb0:	80c00115 	stw	r3,4(r16)
    4fb4:	2005883a 	mov	r2,r4
    4fb8:	dfc00617 	ldw	ra,24(sp)
    4fbc:	dd400517 	ldw	r21,20(sp)
    4fc0:	dd000417 	ldw	r20,16(sp)
    4fc4:	dcc00317 	ldw	r19,12(sp)
    4fc8:	dc800217 	ldw	r18,8(sp)
    4fcc:	dc400117 	ldw	r17,4(sp)
    4fd0:	dc000017 	ldw	r16,0(sp)
    4fd4:	dec00704 	addi	sp,sp,28
    4fd8:	f800283a 	ret
    4fdc:	81400117 	ldw	r5,4(r16)
    4fe0:	003fed06 	br	4f98 <__register_exitproc+0x90>
    4fe4:	00800034 	movhi	r2,0
    4fe8:	1096bf04 	addi	r2,r2,23292
    4fec:	1021883a 	mov	r16,r2
    4ff0:	88800c15 	stw	r2,48(r17)
    4ff4:	003fd506 	br	4f4c <__register_exitproc+0x44>
    4ff8:	30804117 	ldw	r2,260(r6)
    4ffc:	10c4b03a 	or	r2,r2,r3
    5000:	30804115 	stw	r2,260(r6)
    5004:	003fe406 	br	4f98 <__register_exitproc+0x90>
    5008:	00800034 	movhi	r2,0
    500c:	10800004 	addi	r2,r2,0
    5010:	10000b26 	beq	r2,zero,5040 <__register_exitproc+0x138>
    5014:	01004204 	movi	r4,264
    5018:	103ee83a 	callr	r2
    501c:	10000826 	beq	r2,zero,5040 <__register_exitproc+0x138>
    5020:	100d883a 	mov	r6,r2
    5024:	10004015 	stw	zero,256(r2)
    5028:	10004115 	stw	zero,260(r2)
    502c:	80802215 	stw	r2,136(r16)
    5030:	003fcc06 	br	4f64 <__register_exitproc+0x5c>
    5034:	00800034 	movhi	r2,0
    5038:	10800004 	addi	r2,r2,0
    503c:	1000021e 	bne	r2,zero,5048 <__register_exitproc+0x140>
    5040:	013fffc4 	movi	r4,-1
    5044:	003fdb06 	br	4fb4 <__register_exitproc+0xac>
    5048:	01002304 	movi	r4,140
    504c:	103ee83a 	callr	r2
    5050:	1007883a 	mov	r3,r2
    5054:	103ffa26 	beq	r2,zero,5040 <__register_exitproc+0x138>
    5058:	88800c17 	ldw	r2,48(r17)
    505c:	1821883a 	mov	r16,r3
    5060:	18000115 	stw	zero,4(r3)
    5064:	18800015 	stw	r2,0(r3)
    5068:	88c00c15 	stw	r3,48(r17)
    506c:	903fdb26 	beq	r18,zero,4fdc <__register_exitproc+0xd4>
    5070:	003fba06 	br	4f5c <__register_exitproc+0x54>

00005074 <register_fini>:
    5074:	f800283a 	ret

00005078 <__call_exitprocs>:
    5078:	defff304 	addi	sp,sp,-52
    507c:	00800034 	movhi	r2,0
    5080:	1095fa04 	addi	r2,r2,22504
    5084:	df000b15 	stw	fp,44(sp)
    5088:	17000017 	ldw	fp,0(r2)
    508c:	00800034 	movhi	r2,0
    5090:	10800004 	addi	r2,r2,0
    5094:	1005003a 	cmpeq	r2,r2,zero
    5098:	d8800215 	stw	r2,8(sp)
    509c:	e0800c04 	addi	r2,fp,48
    50a0:	dd800915 	stw	r22,36(sp)
    50a4:	dd400815 	stw	r21,32(sp)
    50a8:	dfc00c15 	stw	ra,48(sp)
    50ac:	ddc00a15 	stw	r23,40(sp)
    50b0:	dd000715 	stw	r20,28(sp)
    50b4:	dcc00615 	stw	r19,24(sp)
    50b8:	dc800515 	stw	r18,20(sp)
    50bc:	dc400415 	stw	r17,16(sp)
    50c0:	dc000315 	stw	r16,12(sp)
    50c4:	282d883a 	mov	r22,r5
    50c8:	d9000115 	stw	r4,4(sp)
    50cc:	d8800015 	stw	r2,0(sp)
    50d0:	282b003a 	cmpeq	r21,r5,zero
    50d4:	e4400c17 	ldw	r17,48(fp)
    50d8:	88001226 	beq	r17,zero,5124 <__call_exitprocs+0xac>
    50dc:	ddc00017 	ldw	r23,0(sp)
    50e0:	88800117 	ldw	r2,4(r17)
    50e4:	8c802217 	ldw	r18,136(r17)
    50e8:	143fffc4 	addi	r16,r2,-1
    50ec:	80000b16 	blt	r16,zero,511c <__call_exitprocs+0xa4>
    50f0:	9027003a 	cmpeq	r19,r18,zero
    50f4:	a800171e 	bne	r21,zero,5154 <__call_exitprocs+0xdc>
    50f8:	9800051e 	bne	r19,zero,5110 <__call_exitprocs+0x98>
    50fc:	8409883a 	add	r4,r16,r16
    5100:	2105883a 	add	r2,r4,r4
    5104:	1485883a 	add	r2,r2,r18
    5108:	10c02017 	ldw	r3,128(r2)
    510c:	b0c01226 	beq	r22,r3,5158 <__call_exitprocs+0xe0>
    5110:	843fffc4 	addi	r16,r16,-1
    5114:	00bfffc4 	movi	r2,-1
    5118:	80bff61e 	bne	r16,r2,50f4 <__call_exitprocs+0x7c>
    511c:	d8800217 	ldw	r2,8(sp)
    5120:	10003226 	beq	r2,zero,51ec <__call_exitprocs+0x174>
    5124:	dfc00c17 	ldw	ra,48(sp)
    5128:	df000b17 	ldw	fp,44(sp)
    512c:	ddc00a17 	ldw	r23,40(sp)
    5130:	dd800917 	ldw	r22,36(sp)
    5134:	dd400817 	ldw	r21,32(sp)
    5138:	dd000717 	ldw	r20,28(sp)
    513c:	dcc00617 	ldw	r19,24(sp)
    5140:	dc800517 	ldw	r18,20(sp)
    5144:	dc400417 	ldw	r17,16(sp)
    5148:	dc000317 	ldw	r16,12(sp)
    514c:	dec00d04 	addi	sp,sp,52
    5150:	f800283a 	ret
    5154:	8409883a 	add	r4,r16,r16
    5158:	88c00117 	ldw	r3,4(r17)
    515c:	2105883a 	add	r2,r4,r4
    5160:	1445883a 	add	r2,r2,r17
    5164:	18ffffc4 	addi	r3,r3,-1
    5168:	11800217 	ldw	r6,8(r2)
    516c:	1c001826 	beq	r3,r16,51d0 <__call_exitprocs+0x158>
    5170:	10000215 	stw	zero,8(r2)
    5174:	303fe626 	beq	r6,zero,5110 <__call_exitprocs+0x98>
    5178:	8d000117 	ldw	r20,4(r17)
    517c:	9800121e 	bne	r19,zero,51c8 <__call_exitprocs+0x150>
    5180:	00c00044 	movi	r3,1
    5184:	1c06983a 	sll	r3,r3,r16
    5188:	90804017 	ldw	r2,256(r18)
    518c:	1884703a 	and	r2,r3,r2
    5190:	10000d26 	beq	r2,zero,51c8 <__call_exitprocs+0x150>
    5194:	90804117 	ldw	r2,260(r18)
    5198:	1884703a 	and	r2,r3,r2
    519c:	10000e1e 	bne	r2,zero,51d8 <__call_exitprocs+0x160>
    51a0:	2105883a 	add	r2,r4,r4
    51a4:	1485883a 	add	r2,r2,r18
    51a8:	11400017 	ldw	r5,0(r2)
    51ac:	d9000117 	ldw	r4,4(sp)
    51b0:	303ee83a 	callr	r6
    51b4:	88800117 	ldw	r2,4(r17)
    51b8:	a0bfc61e 	bne	r20,r2,50d4 <__call_exitprocs+0x5c>
    51bc:	b8800017 	ldw	r2,0(r23)
    51c0:	147fd326 	beq	r2,r17,5110 <__call_exitprocs+0x98>
    51c4:	003fc306 	br	50d4 <__call_exitprocs+0x5c>
    51c8:	303ee83a 	callr	r6
    51cc:	003ff906 	br	51b4 <__call_exitprocs+0x13c>
    51d0:	8c000115 	stw	r16,4(r17)
    51d4:	003fe706 	br	5174 <__call_exitprocs+0xfc>
    51d8:	2105883a 	add	r2,r4,r4
    51dc:	1485883a 	add	r2,r2,r18
    51e0:	11000017 	ldw	r4,0(r2)
    51e4:	303ee83a 	callr	r6
    51e8:	003ff206 	br	51b4 <__call_exitprocs+0x13c>
    51ec:	88800117 	ldw	r2,4(r17)
    51f0:	10000b1e 	bne	r2,zero,5220 <__call_exitprocs+0x1a8>
    51f4:	89000017 	ldw	r4,0(r17)
    51f8:	20000a26 	beq	r4,zero,5224 <__call_exitprocs+0x1ac>
    51fc:	b9000015 	stw	r4,0(r23)
    5200:	90000226 	beq	r18,zero,520c <__call_exitprocs+0x194>
    5204:	9009883a 	mov	r4,r18
    5208:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    520c:	8809883a 	mov	r4,r17
    5210:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5214:	bc400017 	ldw	r17,0(r23)
    5218:	883fb11e 	bne	r17,zero,50e0 <__call_exitprocs+0x68>
    521c:	003fc106 	br	5124 <__call_exitprocs+0xac>
    5220:	89000017 	ldw	r4,0(r17)
    5224:	882f883a 	mov	r23,r17
    5228:	2023883a 	mov	r17,r4
    522c:	883fac1e 	bne	r17,zero,50e0 <__call_exitprocs+0x68>
    5230:	003fbc06 	br	5124 <__call_exitprocs+0xac>

00005234 <udivmodsi4>:
    5234:	29001b2e 	bgeu	r5,r4,52a4 <udivmodsi4+0x70>
    5238:	28001a16 	blt	r5,zero,52a4 <udivmodsi4+0x70>
    523c:	00800044 	movi	r2,1
    5240:	0007883a 	mov	r3,zero
    5244:	01c007c4 	movi	r7,31
    5248:	00000306 	br	5258 <udivmodsi4+0x24>
    524c:	19c01326 	beq	r3,r7,529c <udivmodsi4+0x68>
    5250:	18c00044 	addi	r3,r3,1
    5254:	28000416 	blt	r5,zero,5268 <udivmodsi4+0x34>
    5258:	294b883a 	add	r5,r5,r5
    525c:	1085883a 	add	r2,r2,r2
    5260:	293ffa36 	bltu	r5,r4,524c <udivmodsi4+0x18>
    5264:	10000d26 	beq	r2,zero,529c <udivmodsi4+0x68>
    5268:	0007883a 	mov	r3,zero
    526c:	21400236 	bltu	r4,r5,5278 <udivmodsi4+0x44>
    5270:	2149c83a 	sub	r4,r4,r5
    5274:	1886b03a 	or	r3,r3,r2
    5278:	1004d07a 	srli	r2,r2,1
    527c:	280ad07a 	srli	r5,r5,1
    5280:	103ffa1e 	bne	r2,zero,526c <udivmodsi4+0x38>
    5284:	30000226 	beq	r6,zero,5290 <udivmodsi4+0x5c>
    5288:	2005883a 	mov	r2,r4
    528c:	f800283a 	ret
    5290:	1809883a 	mov	r4,r3
    5294:	2005883a 	mov	r2,r4
    5298:	f800283a 	ret
    529c:	0007883a 	mov	r3,zero
    52a0:	003ff806 	br	5284 <udivmodsi4+0x50>
    52a4:	00800044 	movi	r2,1
    52a8:	0007883a 	mov	r3,zero
    52ac:	003fef06 	br	526c <udivmodsi4+0x38>

000052b0 <__divsi3>:
    52b0:	defffe04 	addi	sp,sp,-8
    52b4:	dc000015 	stw	r16,0(sp)
    52b8:	dfc00115 	stw	ra,4(sp)
    52bc:	0021883a 	mov	r16,zero
    52c0:	20000c16 	blt	r4,zero,52f4 <__divsi3+0x44>
    52c4:	000d883a 	mov	r6,zero
    52c8:	28000e16 	blt	r5,zero,5304 <__divsi3+0x54>
    52cc:	00052340 	call	5234 <udivmodsi4>
    52d0:	1007883a 	mov	r3,r2
    52d4:	8005003a 	cmpeq	r2,r16,zero
    52d8:	1000011e 	bne	r2,zero,52e0 <__divsi3+0x30>
    52dc:	00c7c83a 	sub	r3,zero,r3
    52e0:	1805883a 	mov	r2,r3
    52e4:	dfc00117 	ldw	ra,4(sp)
    52e8:	dc000017 	ldw	r16,0(sp)
    52ec:	dec00204 	addi	sp,sp,8
    52f0:	f800283a 	ret
    52f4:	0109c83a 	sub	r4,zero,r4
    52f8:	04000044 	movi	r16,1
    52fc:	000d883a 	mov	r6,zero
    5300:	283ff20e 	bge	r5,zero,52cc <__divsi3+0x1c>
    5304:	014bc83a 	sub	r5,zero,r5
    5308:	8021003a 	cmpeq	r16,r16,zero
    530c:	003fef06 	br	52cc <__divsi3+0x1c>

00005310 <__modsi3>:
    5310:	deffff04 	addi	sp,sp,-4
    5314:	dfc00015 	stw	ra,0(sp)
    5318:	01800044 	movi	r6,1
    531c:	2807883a 	mov	r3,r5
    5320:	20000416 	blt	r4,zero,5334 <__modsi3+0x24>
    5324:	28000c16 	blt	r5,zero,5358 <__modsi3+0x48>
    5328:	dfc00017 	ldw	ra,0(sp)
    532c:	dec00104 	addi	sp,sp,4
    5330:	00052341 	jmpi	5234 <udivmodsi4>
    5334:	0109c83a 	sub	r4,zero,r4
    5338:	28000b16 	blt	r5,zero,5368 <__modsi3+0x58>
    533c:	180b883a 	mov	r5,r3
    5340:	01800044 	movi	r6,1
    5344:	00052340 	call	5234 <udivmodsi4>
    5348:	0085c83a 	sub	r2,zero,r2
    534c:	dfc00017 	ldw	ra,0(sp)
    5350:	dec00104 	addi	sp,sp,4
    5354:	f800283a 	ret
    5358:	014bc83a 	sub	r5,zero,r5
    535c:	dfc00017 	ldw	ra,0(sp)
    5360:	dec00104 	addi	sp,sp,4
    5364:	00052341 	jmpi	5234 <udivmodsi4>
    5368:	0147c83a 	sub	r3,zero,r5
    536c:	003ff306 	br	533c <__modsi3+0x2c>

00005370 <__udivsi3>:
    5370:	000d883a 	mov	r6,zero
    5374:	00052341 	jmpi	5234 <udivmodsi4>

00005378 <__umodsi3>:
    5378:	01800044 	movi	r6,1
    537c:	00052341 	jmpi	5234 <udivmodsi4>

00005380 <__mulsi3>:
    5380:	20000a26 	beq	r4,zero,53ac <__mulsi3+0x2c>
    5384:	0007883a 	mov	r3,zero
    5388:	2080004c 	andi	r2,r4,1
    538c:	1005003a 	cmpeq	r2,r2,zero
    5390:	2008d07a 	srli	r4,r4,1
    5394:	1000011e 	bne	r2,zero,539c <__mulsi3+0x1c>
    5398:	1947883a 	add	r3,r3,r5
    539c:	294b883a 	add	r5,r5,r5
    53a0:	203ff91e 	bne	r4,zero,5388 <__mulsi3+0x8>
    53a4:	1805883a 	mov	r2,r3
    53a8:	f800283a 	ret
    53ac:	0007883a 	mov	r3,zero
    53b0:	1805883a 	mov	r2,r3
    53b4:	f800283a 	ret

000053b8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    53b8:	20000226 	beq	r4,zero,53c4 <_exit+0xc>
    ALT_SIM_FAIL();
    53bc:	002af070 	cmpltui	zero,zero,43969
    53c0:	00000106 	br	53c8 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    53c4:	002af0b0 	cmpltui	zero,zero,43970
    53c8:	003fff06 	br	53c8 <_exit+0x10>

000053cc <alt_get_errno>:
    53cc:	00800034 	movhi	r2,0
    53d0:	1095f804 	addi	r2,r2,22496
    53d4:	10c00017 	ldw	r3,0(r2)
}
    53d8:	00800034 	movhi	r2,0
    53dc:	1096be04 	addi	r2,r2,23288

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    53e0:	18000126 	beq	r3,zero,53e8 <alt_get_errno+0x1c>
    53e4:	1800683a 	jmp	r3
}
    53e8:	f800283a 	ret

000053ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    53ec:	defffc04 	addi	sp,sp,-16
    53f0:	dc800215 	stw	r18,8(sp)
    53f4:	dc400115 	stw	r17,4(sp)
    53f8:	dfc00315 	stw	ra,12(sp)
    53fc:	2823883a 	mov	r17,r5
    5400:	dc000015 	stw	r16,0(sp)
    5404:	3025883a 	mov	r18,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5408:	01400304 	movi	r5,12
    540c:	20001916 	blt	r4,zero,5474 <write+0x88>
    5410:	00053800 	call	5380 <__mulsi3>
    5414:	00c00034 	movhi	r3,0
    5418:	18d55b04 	addi	r3,r3,21868
    541c:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    5420:	20001426 	beq	r4,zero,5474 <write+0x88>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5424:	20800217 	ldw	r2,8(r4)
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5428:	043fffc4 	movi	r16,-1
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    542c:	108000cc 	andi	r2,r2,3
    5430:	10000c26 	beq	r2,zero,5464 <write+0x78>
    5434:	20800017 	ldw	r2,0(r4)
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5438:	880b883a 	mov	r5,r17
    543c:	900d883a 	mov	r6,r18
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5440:	10800617 	ldw	r2,24(r2)
    5444:	10000726 	beq	r2,zero,5464 <write+0x78>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5448:	103ee83a 	callr	r2
    544c:	1021883a 	mov	r16,r2
    5450:	10000c0e 	bge	r2,zero,5484 <write+0x98>
      {
        ALT_ERRNO = -rval;
    5454:	00053cc0 	call	53cc <alt_get_errno>
    5458:	0407c83a 	sub	r3,zero,r16
    545c:	043fffc4 	movi	r16,-1
    5460:	00000206 	br	546c <write+0x80>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5464:	00053cc0 	call	53cc <alt_get_errno>
    5468:	00c00344 	movi	r3,13
    546c:	10c00015 	stw	r3,0(r2)
    5470:	00000406 	br	5484 <write+0x98>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5474:	00053cc0 	call	53cc <alt_get_errno>
    5478:	00c01444 	movi	r3,81
    547c:	10c00015 	stw	r3,0(r2)
    5480:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    5484:	8005883a 	mov	r2,r16
    5488:	dfc00317 	ldw	ra,12(sp)
    548c:	dc800217 	ldw	r18,8(sp)
    5490:	dc400117 	ldw	r17,4(sp)
    5494:	dc000017 	ldw	r16,0(sp)
    5498:	dec00404 	addi	sp,sp,16
    549c:	f800283a 	ret
    54a0:	00005074 	movhi	zero,321
