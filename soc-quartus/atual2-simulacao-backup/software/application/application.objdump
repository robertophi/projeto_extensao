
application.elf:     file format elf32-littlenios2
application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00011e8c memsz 0x00011e8c flags r-x
    LOAD off    0x00012eac vaddr 0x01011eac paddr 0x010139e8 align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x00015524 vaddr 0x01015524 paddr 0x01015524 align 2**12
         filesz 0x00000000 memsz 0x00000b28 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011574  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000784  01011728  01011728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  01011eac  010139e8  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b28  01015524  01015524  00015524  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000149e8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001190  00000000  00000000  00014a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000025e8  00000000  00000000  00015ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00039fc1  00000000  00000000  00018188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cf74  00000000  00000000  00052149  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d7a5  00000000  00000000  0005f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002ba4  00000000  00000000  0007c864  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000441b  00000000  00000000  0007f408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fa38  00000000  00000000  00083823  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0009325c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c40  00000000  00000000  00093270  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009921d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00099220  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00099225  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00099226  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00099227  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00099232  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009923d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00099248  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  00099253  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003d883  00000000  00000000  00099280  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01011728 l    d  .rodata	00000000 .rodata
01011eac l    d  .rwdata	00000000 .rwdata
01015524 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 app.cpp
01000250 l     F .text	00000030 _GLOBAL__I__ZN3App6motorsE
010001f0 l     F .text	00000060 _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 fft.cpp
00000000 l    df *ABS*	00000000 motors.cpp
00000000 l    df *ABS*	00000000 wifi.cpp
00000000 l    df *ABS*	00000000 test.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
01001750 l     F .text	00000030 _Z12read_uleb128PKhPj
01001780 l     F .text	00000054 _Z12read_sleb128PKhPi
010017d4 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
01001870 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
01001a44 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
01001ad4 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
01001bd4 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
01001c58 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_globals.cc
01015538 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
01015594 l     O .bss	00000800 emergency_buffer
01015544 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 eh_throw.cc
010028ec l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
01015548 l     O .bss	00000004 fc_static
01003004 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0100311c l     F .text	000000cc _Unwind_RaiseException_Phase2
010031e8 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010037f8 l     F .text	00000058 std
01003904 l     F .text	00000008 __fp_lock
0100390c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
01011eac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
010055c4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01005cdc l     F .text	00000058 __sprint_r
01011bce l     O .rodata	00000010 blanks.3452
01011bbe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
01007e40 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
010139bc l     O .rwdata	00000004 charset
01011c00 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
01011d48 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100c874 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100d9a0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100e2a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100e304 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100e330 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0100e468 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100e5ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0100e74c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100e82c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100e98c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0100ea98 l     F .text	000000f8 alt_file_locked
0100ed1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0100eea0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010139d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100f158 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01012868 l     O .rwdata	00001060 jtag_uart_0
0100f250 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100f490 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100f6b8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 fifoed_avalon_uart.c
0100ff28 l     F .text	00000060 alt_get_errno
01010150 l     F .text	00000100 fifoed_avalon_uart_rxirq
01010250 l     F .text	00000190 fifoed_avalon_uart_txirq
010103e0 l     F .text	00000090 fifoed_avalon_uart_irq
00000000 l    df *ABS*	00000000 fifoed_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101094c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010fe0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010114e8 l     F .text	00000004 register_fini
01000c8c g     F .text	00000040 _ZN6Motors18write_to_next_lineEv
01002690 g     F .text	00000040 __cxa_free_exception
01005328 g     F .text	0000001c putchar
01002ebc g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0100a390 g     F .text	00000094 _mprec_log10
01002440 g     F .text	00000018 _ZSt10unexpectedv
0100a47c g     F .text	00000088 __any_on
01009b74 g     F .text	00000070 _isatty_r
01011d20 g     O .rodata	00000028 __mprec_tinytens
0100e9ec g     F .text	0000006c alt_main
01005bdc g     F .text	0000008c strcpy
01001598 g     F .text	00000034 _ZN4WiFiD2Ev
0100534c g     F .text	000000a0 _puts_r
01015dbc g     O .bss	00000100 alt_irq
01009ca8 g     F .text	00000078 _lseek_r
01002fb4 g     F .text	00000014 _Unwind_GetIPInfo
010139e8 g       *ABS*	00000000 __flash_rwdata_start
01009638 g     F .text	000000a0 __sflags
0100d394 g     F .text	00000088 __eqdf2
01002804 g     F .text	00000074 __cxa_rethrow
01002f54 g     F .text	0000000c _Unwind_SjLj_Unregister
01002360 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
01002fa4 g     F .text	00000010 _Unwind_GetIP
0101604c g       *ABS*	00000000 __alt_heap_start
0100598c g     F .text	00000074 _kill_r
01002680 g     F .text	00000010 _ZNSt9bad_allocD2Ev
010052b0 g     F .text	00000044 printf
01002db8 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
010058cc g     F .text	000000a0 _signal_r
01005a08 g     F .text	00000068 __sseek
01003860 g     F .text	000000a4 __sinit
0100b994 g     F .text	00000130 __swbuf_r
01002da8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
01009c08 g     F .text	00000084 _setlocale_r
01011af4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
01003960 g     F .text	0000009c __sfmoreglue
0100ea78 g     F .text	00000020 __malloc_unlock
01002954 g     F .text	00000020 _ZSt18uncaught_exceptionv
01009ea4 g     F .text	000000e0 memmove
010025cc g     F .text	00000010 _ZNSt9exceptionD2Ev
01003950 g     F .text	00000010 _cleanup
0100a504 g     F .text	000000bc _Balloc
01000d0c g     F .text	00000038 _ZN6MotorsC2Ev
01000d44 g     F .text	00000038 _ZN6MotorsC1Ev
0100d4a4 g     F .text	00000088 __gtdf2
010119e4  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
010106d0 g     F .text	00000058 fifoed_avalon_uart_classic_write_fd
01000000 g     F .entry	0000000c __reset
01000904 g     F .text	00000028 _ZN3FFTC2Ev
01002fe4 g     F .text	00000008 _Unwind_GetRegionStart
01000020 g       *ABS*	00000000 __flash_exceptions_start
01000f70 g     F .text	00000064 _ZN4WiFiC1Ev
0100449c g     F .text	00000074 _fstat_r
01002458 g     F .text	00000100 _Znwm
0101554c g     O .bss	00000004 errno
0100562c g     F .text	00000014 __srget
010033b4 g     F .text	00000080 _Unwind_Backtrace
0101556c g     O .bss	00000004 alt_argv
0101b98c g       *ABS*	00000000 _gp
01000b68 g     F .text	00000050 _ZN6Motors11write_delayEjjj
010105c8 g     F .text	00000058 fifoed_avalon_uart_read_fd
0100e4c8 g     F .text	00000020 getpid
01015528 g     O .bss	00000004 _ZN3App3fftE
01001cdc g     F .text	00000180 __cxa_call_unexpected
0100294c g     F .text	00000008 __cxa_get_exception_ptr
010126e8 g     O .rwdata	00000180 alt_fd_list
01004814 g     F .text	00000090 _getc_r
0100477c g     F .text	00000098 getc
01005344 g     F .text	00000008 _putchar_r
01003364 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
01002f78 g     F .text	00000014 _Unwind_GetCFA
0100234c g     F .text	00000014 _ZSt13set_terminatePFvvE
01010a74 g     F .text	00000094 alt_find_dev
01009e04 g     F .text	000000a0 memcpy
010010b4 g     F .text	000001d0 _ZN4WiFi7receiveEPhPj
01003944 g     F .text	0000000c _cleanup_r
0100d63c g     F .text	000000f8 __floatsidf
010110b8 g     F .text	00000078 alt_io_redirect
0100d5b4 g     F .text	00000088 __ltdf2
01010678 g     F .text	00000058 fifoed_avalon_uart_classic_read_fd
01011728 g       *ABS*	00000000 __DTOR_END__
01000710 g     F .text	00000038 _ZN3AppC1Ev
01002bf0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
010053ec g     F .text	00000014 puts
01000c58 g     F .text	00000034 _ZN6Motors5writeEj
0100a2e0 g     F .text	000000b0 __ratio
0100f8d0 g     F .text	00000224 altera_avalon_jtag_uart_read
01004a4c g     F .text	00000014 malloc
010052f4 g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100dadc g     F .text	00000008 __udivsi3
0100e4e8 g     F .text	000000c4 isatty
010056b0 g     F .text	000000cc _raise_r
01011c30 g     O .rodata	000000c8 __mprec_tens
01009be4 g     F .text	00000008 __locale_charset
01015550 g     O .bss	00000004 __malloc_top_pad
01005988 g     F .text	00000004 _getpid_r
010139b8 g     O .rwdata	00000004 __mb_cur_max
01009bec g     F .text	0000000c _localeconv_r
0100ac68 g     F .text	0000003c __i2b
010096d8 g     F .text	0000049c __sfvwrite_r
01002c10 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
01005804 g     F .text	000000b4 __sigtramp_r
01005640 g     F .text	00000070 _sbrk_r
01000a1c g     F .text	00000058 _ZN3FFT5writeEPh
01011b28  w    O .rodata	00000020 _ZTVSt9type_info
0100b1fc g     F .text	00000078 _read_r
0100259c g     F .text	00000010 _ZNKSt9exception4whatEv
010126b4 g     O .rwdata	0000000c __lc_ctype
010139d0 g     O .rwdata	00000004 alt_max_fd
01000868  w    F .text	00000028 _ZN3App6Buffer6lengthEv
0100dfa4 g     F .text	00000138 __unpack_d
010034a4 g     F .text	00000110 _fclose_r
01011a60  w    O .rodata	0000000c _ZTISt9bad_alloc
010037c4 g     F .text	00000034 fflush
01015554 g     O .bss	00000004 __malloc_max_sbrked_mem
0100cd04 g     F .text	00000074 __adddf3
01011ac8  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0100a1c0 g     F .text	00000120 __b2d
0100c214 g     F .text	00000660 __umoddi3
0100e898 g     F .text	000000f4 lseek
01002c70 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
01001744 g     F .text	0000000c _ZdlPv
010139ac g     O .rwdata	00000004 _global_impure_ptr
0100b274 g     F .text	000005f4 _realloc_r
0101604c g       *ABS*	00000000 __bss_end
01010ee8 g     F .text	000000f8 alt_iic_isr_register
010111c8 g     F .text	0000010c alt_tick
01002f44 g     F .text	00000010 _Unwind_SjLj_Register
0100bba8 g     F .text	0000066c __udivdi3
01011cf8 g     O .rodata	00000028 __mprec_bigtens
0100aef0 g     F .text	00000120 __s2b
0100348c g     F .text	00000018 abort
0100d80c g     F .text	00000194 __floatunsidf
01010580 g     F .text	00000048 fifoed_avalon_uart_classic_write
0100a0e0 g     F .text	00000060 __mcmp
01000da8 g     F .text	00000054 _ZN6Motors12getSingletonEv
01000fd4 g     F .text	00000064 _ZN4WiFiC2Ev
01002974 g     F .text	000000a4 __cxa_end_catch
0100392c g     F .text	00000018 __fp_lock_all
01010ea0 g     F .text	00000048 alt_ic_irq_enabled
01002620 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
01011130 g     F .text	00000098 alt_alarm_stop
01015574 g     O .bss	00000004 alt_irq_active
01002418 g     F .text	00000018 _ZSt9terminatev
010000ec g     F .exceptions	000000c8 alt_irq_handler
010126c0 g     O .rwdata	00000028 alt_dev_null
01011a98  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
01000c08 g     F .text	00000050 _ZN6Motors11write_powerEjjj
0101087c g     F .text	0000001c alt_dcache_flush_all
01009fac g     F .text	00000070 __hi0bits
0101398c  w    O .rwdata	00000008 _ZTISt9exception
0100d734 g     F .text	000000d8 __fixdfsi
010139e8 g       *ABS*	00000000 __ram_rwdata_end
01002eec g     F .text	00000010 _ZNSt9type_infoD1Ev
010139c8 g     O .rwdata	00000008 alt_dev_list
01015540 g     O .bss	00000004 __new_handler
0100f034 g     F .text	00000124 write
0100b114 g     F .text	000000e8 _putc_r
01002edc g     F .text	00000010 _ZNSt9type_infoD0Ev
01011eac g       *ABS*	00000000 __ram_rodata_end
0100e390 g     F .text	000000d8 fstat
010006dc g     F .text	00000034 _ZN3AppD2Ev
0100e60c g     F .text	00000140 kill
01005b4c g     F .text	00000090 strcat
0100add0 g     F .text	00000120 __pow5mult
0101555c g     O .bss	00000004 __nlocale_changed
0100dae4 g     F .text	00000008 __umodsi3
01002ed4 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0101604c g       *ABS*	00000000 end
01000974 g     F .text	00000020 _ZN3FFTD1Ev
01003104 g     F .text	00000018 _Unwind_DeleteException
01004478 g     F .text	00000024 fseek
0100f3d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
01011720 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100dc10 g     F .text	00000080 __clzsi2
01002b30 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0100faf4 g     F .text	00000240 altera_avalon_jtag_uart_write
01003850 g     F .text	00000004 __sfp_lock_acquire
01011a0c  w    O .rodata	00000012 _ZTSSt13bad_exception
01009d20 g     F .text	000000e4 memchr
01005d34 g     F .text	00001ec4 ___vfprintf_internal_r
01000954 g     F .text	00000020 _ZN3FFTD2Ev
01003d28 g     F .text	00000314 _free_r
010114ec g     F .text	000001b0 __call_exitprocs
010055e0 g     F .text	0000004c __srget_r
01000ae8 g     F .text	00000020 _ZN6MotorsD1Ev
01015560 g     O .bss	00000004 __mlocale_changed
010139b4 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
01015578 g     O .bss	00000004 _alt_tick_rate
01011b48  w    O .rodata	0000000d _ZTSSt9type_info
0100a8c8 g     F .text	0000014c __lshift
01000a74 g     F .text	00000054 _ZN3FFT12getSingletonEv
01011a3c  w    O .rodata	00000014 _ZTVSt9bad_alloc
0101557c g     O .bss	00000004 _alt_nticks
0100596c g     F .text	0000001c signal
0100ed7c g     F .text	00000124 read
0100f1ec g     F .text	00000064 alt_sys_init
01005238 g     F .text	00000078 _open_r
010113b4 g     F .text	00000134 __register_exitproc
01011a50  w    O .rodata	0000000d _ZTSSt9bad_alloc
0100aa14 g     F .text	00000254 __multiply
0100f768 g     F .text	00000074 altera_avalon_jtag_uart_close
0100092c g     F .text	00000028 _ZN3FFTC1Ev
01002f0c g     F .text	00000038 __mulsi3
01011eac g       *ABS*	00000000 __ram_rwdata_start
0100326c g     F .text	000000f8 _Unwind_SjLj_RaiseException
01011728 g       *ABS*	00000000 __ram_rodata_start
01015d94 g     O .bss	00000028 __malloc_current_mallinfo
01003210 g     F .text	0000005c _Unwind_SjLj_Resume
0100a5c0 g     F .text	0000017c __d2b
01002efc g     F .text	00000010 _ZNSt9type_infoD2Ev
01002cec g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
01010538 g     F .text	00000048 fifoed_avalon_uart_classic_read
0100f288 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01010c28 g     F .text	000000d0 alt_get_fd
01000dfc g     F .text	00000048 _ZN4WiFi5writeEPci
0100e0dc g     F .text	000000c8 __fpcmp_parts_d
0100fd34 g     F .text	000001f4 fifoed_avalon_uart_read
01007dd0 g     F .text	00000070 _close_r
01011340 g     F .text	00000074 memcmp
0100f338 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0101604c g       *ABS*	00000000 __alt_stack_base
0100f380 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01004690 g     F .text	000000ac _fwrite_r
0100263c g     F .text	00000034 _ZNSt9bad_allocD0Ev
01002d98 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
01007c94 g     F .text	0000013c __swsetup_r
01003434 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0100d13c g     F .text	00000258 __divdf3
010039fc g     F .text	000000f0 __sfp
01015524 g     O .bss	00000004 _ZN3App6motorsE
0100a424 g     F .text	00000058 __copybits
01002eb4 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
01000ec0 g     F .text	000000b0 _ZN4WiFi10stopServerEv
010122ac g     O .rwdata	00000408 __malloc_av_
0100385c g     F .text	00000004 __sinit_lock_release
0100cd78 g     F .text	000003c4 __muldf3
01005aec g     F .text	00000060 __sread
010119f8  w    O .rodata	00000014 _ZTVSt9exception
01010b08 g     F .text	00000120 alt_find_file
01002b9c g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
01010898 g     F .text	000000b4 alt_dev_llist_insert
0100ea58 g     F .text	00000020 __malloc_lock
0100ef78 g     F .text	000000bc sbrk
01011a6c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
01002878 g     F .text	00000074 __cxa_throw
010035c8 g     F .text	000001fc _fflush_r
01002fc8 g     F .text	00000010 _Unwind_SetIP
0100bae0 g     F .text	000000c8 _calloc_r
01003be0 g     F .text	0000001c fopen
01015524 g       *ABS*	00000000 __bss_start
010051a0 g     F .text	00000098 memset
010015cc g     F .text	000000d8 main
01000ccc g     F .text	00000040 _ZN6Motors21write_to_next_collummEv
0101552c g     O .bss	00000004 _ZN3FFT3fftE
01015570 g     O .bss	00000004 alt_envp
01015558 g     O .bss	00000004 __malloc_max_total_mem
0100f2e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100bac4 g     F .text	0000001c __swbuf
0100233c g     F .text	00000008 __cxa_get_globals_fast
01005a00 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010035b4 g     F .text	00000014 fclose
0100ff88 g     F .text	000001c8 fifoed_avalon_uart_write
01015ebc g     O .bss	00000190 _atexit0
01008084 g     F .text	000015b4 _dtoa_r
01004a60 g     F .text	00000740 _malloc_r
010139d4 g     O .rwdata	00000004 alt_errno
010057f4 g     F .text	00000010 _init_signal
01011abc  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
010045d8 g     F .text	000000b8 _fwalk
01002610 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0100b010 g     F .text	00000104 putc
0100da1c g     F .text	00000060 __divsi3
01011d54 g     O .rodata	00000014 __thenan_df
01003bfc g     F .text	0000012c _malloc_trim_r
01011728 g       *ABS*	00000000 __CTOR_END__
0100b8d8 g     F .text	000000bc strcmp
01000334 g     F .text	0000005c _ZN3App14writeGyroscopeEii
01011728 g       *ABS*	00000000 __flash_rodata_start
01011728 g       *ABS*	00000000 __DTOR_LIST__
01010620 g     F .text	00000058 fifoed_avalon_uart_write_fd
0100d41c g     F .text	00000088 __nedf2
0100f1b8 g     F .text	00000034 alt_irq_init
0100ef00 g     F .text	00000078 alt_release_fd
01000d7c g     F .text	0000002c _ZN6Motors4readEv
01001564 g     F .text	00000034 _ZN4WiFiD1Ev
01002d64 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
01011d68 g     O .rodata	00000100 __clz_tab
01015564 g     O .bss	00000004 _PathLocale
010112f4 g     F .text	00000014 atexit
01007c1c g     F .text	00000078 _write_r
01009c8c g     F .text	0000001c setlocale
01002ffc g     F .text	00000008 _Unwind_GetTextRelBase
01002558 g     F .text	00000044 __cxa_call_terminate
01000780  w    F .text	000000e8 _ZN3App6Buffer3popEv
010139a8 g     O .rwdata	00000004 _impure_ptr
01015568 g     O .bss	00000004 alt_argc
01015534 g     O .bss	00000004 _ZN4WiFi4wifiE
01010a10 g     F .text	00000064 _do_dtors
01000390 g     F .text	00000220 _ZN3App3runEv
0100403c g     F .text	0000043c _fseek_r
01000280 g     F .text	000000b4 _ZN3App12writeCompassEh
01005400 g     F .text	000001c4 __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
010005b0 g     F .text	0000009c _ZN3App10fftHandlerEj
0100a140 g     F .text	00000080 __ulp
0100b868 g     F .text	00000040 __isinfd
01002fec g     F .text	00000008 _Unwind_FindEnclosingFunction
01003914 g     F .text	00000018 __fp_unlock_all
010016a4 g     F .text	000000a0 _Znam
010139c0 g     O .rwdata	00000008 alt_fs_list
01002fd8 g     F .text	0000000c _Unwind_GetLanguageSpecificData
01000bb8 g     F .text	00000050 _ZN6Motors15write_variationEjjj
01002a18 g     F .text	00000118 __cxa_begin_catch
01002c00 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
01002430 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000b08 g     F .text	00000060 _ZN6Motors5writeEjjjj
01009bf8 g     F .text	00000010 localeconv
010025dc g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
01013998 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
01015530 g     O .bss	00000004 _ZN6Motors6motorsE
01010d14 g     F .text	00000050 alt_ic_isr_register
010026d0 g     F .text	00000134 __cxa_allocate_exception
0100473c g     F .text	00000040 fwrite
01011b1c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
01002630 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
010139e8 g       *ABS*	00000000 _edata
0101604c g       *ABS*	00000000 _end
01013994 g     O .rwdata	00000001 _ZSt7nothrow
010006a8 g     F .text	00000034 _ZN3AppD1Ev
01001e5c g     F .text	000004e0 __gxx_personality_sj0
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100f7dc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01002ca0 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
01001038 g     F .text	0000007c _ZN4WiFi11startServerEv
010025bc g     F .text	00000010 _ZNSt9exceptionD1Ev
01010e00 g     F .text	000000a0 alt_ic_irq_disable
01000e44 g     F .text	0000007c _ZN4WiFi15sendInstructionEPc
01005a70 g     F .text	0000007c __swrite
010139b0 g     O .rwdata	00000004 __malloc_trim_threshold
010112d4 g     F .text	00000020 altera_nios2_qsys_irq_init
01011308 g     F .text	00000038 exit
01002f8c g     F .text	00000018 _Unwind_SetGR
01004510 g     F .text	000000c8 _fwalk_reent
01000890  w    F .text	00000074 _ZN3App6BufferC1Ev
0100a73c g     F .text	0000018c __mdiff
01002374 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
01001440 g     F .text	00000124 _ZN4WiFi12getSingletonEv
010009c4 g     F .text	0000002c _ZN3FFT4readEv
0100da7c g     F .text	00000060 __modsi3
01002670 g     F .text	00000010 _ZNSt9bad_allocD1Ev
01015580 g     O .bss	00000014 _ZN3App6bufferE
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01003854 g     F .text	00000004 __sfp_lock_release
01002dec g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
01011a20  w    O .rodata	0000000c _ZTISt13bad_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
01000748 g     F .text	00000038 _ZN3AppC2Ev
010138c8 g     O .rwdata	000000c4 esp8266
01003aec g     F .text	000000f4 _fopen_r
0100b8a8 g     F .text	00000030 __isnand
0100e370 g     F .text	00000020 _exit
01010728 g     F .text	00000154 alt_alarm_start
0100daec g     F .text	00000124 __muldi3
01002f60 g     F .text	00000018 _Unwind_GetGR
01002344 g     F .text	00000008 __cxa_get_globals
010048a4 g     F .text	00000194 __smakebuf_r
0101399c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
01005c68 g     F .text	00000074 strlen
01005790 g     F .text	00000064 _init_signal_r
010139a0  w    O .rwdata	00000008 _ZTISt9type_info
0100eb90 g     F .text	0000018c open
0100d52c g     F .text	00000088 __gedf2
01011a2c  w    O .rodata	0000000d _ZTSSt9exception
010025ac g     F .text	00000010 _ZNSt9exceptionD0Ev
01010cf8 g     F .text	0000001c alt_icache_flush_all
01002ff4 g     F .text	00000008 _Unwind_GetDataRelBase
010139dc g     O .rwdata	00000004 alt_priority_mask
0100064c g     F .text	0000005c _ZN3App5setupEv
01010d64 g     F .text	0000009c alt_ic_irq_enable
01007bf8 g     F .text	00000024 __vfprintf_internal
010009f0 g     F .text	0000002c _ZN3FFT12isProcessingEv
0100cc84 g     F .text	00000080 __subdf3
01000994 g     F .text	00000030 _ZN3FFT19setInterruptHandlerEPFvjE
0100a01c g     F .text	000000c4 __lo0bits
010139e0 g     O .rwdata	00000008 alt_alarm_list
010109ac g     F .text	00000064 _do_ctors
010058b8 g     F .text	00000014 __sigtramp
01001284 g     F .text	000001bc _ZN4WiFi6configEPcS0_
0100e1a4 g     F .text	00000100 close
0100e7ac g     F .text	00000080 alt_load
0100dc90 g     F .text	00000314 __pack_d
01002ec4 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
01010470 g     F .text	000000c8 fifoed_avalon_uart_init
01000ac8 g     F .text	00000020 _ZN6MotorsD2Ev
0100577c g     F .text	00000014 raise
01004a38 g     F .text	00000014 free
01003858 g     F .text	00000004 __sinit_lock_acquire
0100aca4 g     F .text	0000012c __multadd
01002bbc g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
01009f84 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18d76f04 	addi	r3,r3,23996
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18d76f04 	addi	r3,r3,23996
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d6ae6314 	ori	gp,gp,47500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10954914 	ori	r2,r2,21796

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18d81314 	ori	r3,r3,24652

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100e7ac0 	call	100e7ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100e9ec0 	call	100e9ec <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <_Z41__static_initialization_and_destruction_0ii>:
			printf("%s\n", data);
		}
			break;
		}
	}
}
 10001f0:	defffc04 	addi	sp,sp,-16
 10001f4:	dfc00315 	stw	ra,12(sp)
 10001f8:	df000215 	stw	fp,8(sp)
 10001fc:	df000204 	addi	fp,sp,8
 1000200:	e13ffe15 	stw	r4,-8(fp)
 1000204:	e17fff15 	stw	r5,-4(fp)
 1000208:	e0bffe17 	ldw	r2,-8(fp)
 100020c:	10800058 	cmpnei	r2,r2,1
 1000210:	10000a1e 	bne	r2,zero,100023c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 1000214:	e0ffff17 	ldw	r3,-4(fp)
 1000218:	00bfffd4 	movui	r2,65535
 100021c:	1880071e 	bne	r3,r2,100023c <_Z41__static_initialization_and_destruction_0ii+0x4c>
#define SSID "ColeteWifi"
#define PASSWORD "12345678"
//Senha não pode ter menos de 8 caracteres

/*Static*/
Motors	*App::motors = Motors::getSingleton();
 1000220:	1000da80 	call	1000da8 <_ZN6Motors12getSingletonEv>
 1000224:	d0a6e615 	stw	r2,-25704(gp)
FFT	*App::fft = FFT::getSingleton();
 1000228:	1000a740 	call	1000a74 <_ZN3FFT12getSingletonEv>
 100022c:	d0a6e715 	stw	r2,-25700(gp)
App::Buffer	App::buffer;
 1000230:	01004074 	movhi	r4,257
 1000234:	21156004 	addi	r4,r4,21888
 1000238:	10008900 	call	1000890 <_ZN3App6BufferC1Ev>
			printf("%s\n", data);
		}
			break;
		}
	}
}
 100023c:	e037883a 	mov	sp,fp
 1000240:	dfc00117 	ldw	ra,4(sp)
 1000244:	df000017 	ldw	fp,0(sp)
 1000248:	dec00204 	addi	sp,sp,8
 100024c:	f800283a 	ret

01000250 <_GLOBAL__I__ZN3App6motorsE>:
 1000250:	defffe04 	addi	sp,sp,-8
 1000254:	dfc00115 	stw	ra,4(sp)
 1000258:	df000015 	stw	fp,0(sp)
 100025c:	d839883a 	mov	fp,sp
 1000260:	01000044 	movi	r4,1
 1000264:	017fffd4 	movui	r5,65535
 1000268:	10001f00 	call	10001f0 <_Z41__static_initialization_and_destruction_0ii>
 100026c:	e037883a 	mov	sp,fp
 1000270:	dfc00117 	ldw	ra,4(sp)
 1000274:	df000017 	ldw	fp,0(sp)
 1000278:	dec00204 	addi	sp,sp,8
 100027c:	f800283a 	ret

01000280 <_ZN3App12writeCompassEh>:

	if(buffer.length() > 0)
		fft->write(buffer.pop());
}

void App::writeCompass(unsigned char direction) {
 1000280:	defffb04 	addi	sp,sp,-20
 1000284:	dfc00415 	stw	ra,16(sp)
 1000288:	df000315 	stw	fp,12(sp)
 100028c:	df000304 	addi	fp,sp,12
 1000290:	e13ffd15 	stw	r4,-12(fp)
 1000294:	e17ffe05 	stb	r5,-8(fp)
	switch(direction) {
 1000298:	e0bffe03 	ldbu	r2,-8(fp)
 100029c:	e0bfff15 	stw	r2,-4(fp)
 10002a0:	e0ffff17 	ldw	r3,-4(fp)
 10002a4:	188013a0 	cmpeqi	r2,r3,78
 10002a8:	10000e1e 	bne	r2,zero,10002e4 <_ZN3App12writeCompassEh+0x64>
 10002ac:	e0ffff17 	ldw	r3,-4(fp)
 10002b0:	188013c8 	cmpgei	r2,r3,79
 10002b4:	1000041e 	bne	r2,zero,10002c8 <_ZN3App12writeCompassEh+0x48>
 10002b8:	e0ffff17 	ldw	r3,-4(fp)
 10002bc:	18801160 	cmpeqi	r2,r3,69
 10002c0:	1000101e 	bne	r2,zero,1000304 <_ZN3App12writeCompassEh+0x84>
 10002c4:	00001606 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
 10002c8:	e0ffff17 	ldw	r3,-4(fp)
 10002cc:	188014e0 	cmpeqi	r2,r3,83
 10002d0:	1000101e 	bne	r2,zero,1000314 <_ZN3App12writeCompassEh+0x94>
 10002d4:	e0ffff17 	ldw	r3,-4(fp)
 10002d8:	188015e0 	cmpeqi	r2,r3,87
 10002dc:	1000051e 	bne	r2,zero,10002f4 <_ZN3App12writeCompassEh+0x74>
 10002e0:	00000f06 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'N':
			printf("Sending direction as North.\n");
 10002e4:	01004074 	movhi	r4,257
 10002e8:	2105ca04 	addi	r4,r4,5928
 10002ec:	10053ec0 	call	10053ec <puts>
			break;
 10002f0:	00000b06 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'W':
			printf("Sending direction as West.\n");
 10002f4:	01004074 	movhi	r4,257
 10002f8:	2105d104 	addi	r4,r4,5956
 10002fc:	10053ec0 	call	10053ec <puts>
			break;
 1000300:	00000706 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'E':
			printf("Sending direction as East.\n");
 1000304:	01004074 	movhi	r4,257
 1000308:	2105d804 	addi	r4,r4,5984
 100030c:	10053ec0 	call	10053ec <puts>
			break;
 1000310:	00000306 	br	1000320 <_ZN3App12writeCompassEh+0xa0>
		case 'S':
			printf("Sending direction as South.\n");
 1000314:	01004074 	movhi	r4,257
 1000318:	2105df04 	addi	r4,r4,6012
 100031c:	10053ec0 	call	10053ec <puts>
			break;
	}
}
 1000320:	e037883a 	mov	sp,fp
 1000324:	dfc00117 	ldw	ra,4(sp)
 1000328:	df000017 	ldw	fp,0(sp)
 100032c:	dec00204 	addi	sp,sp,8
 1000330:	f800283a 	ret

01000334 <_ZN3App14writeGyroscopeEii>:

void App::writeGyroscope(int xAngle, int yAngle) {
 1000334:	defffb04 	addi	sp,sp,-20
 1000338:	dfc00415 	stw	ra,16(sp)
 100033c:	df000315 	stw	fp,12(sp)
 1000340:	df000304 	addi	fp,sp,12
 1000344:	e13ffd15 	stw	r4,-12(fp)
 1000348:	e17ffe15 	stw	r5,-8(fp)
 100034c:	e1bfff15 	stw	r6,-4(fp)
	printf("Sending angle to vest.\n");
 1000350:	01004074 	movhi	r4,257
 1000354:	2105e604 	addi	r4,r4,6040
 1000358:	10053ec0 	call	10053ec <puts>
	printf("%i\n", xAngle);
 100035c:	01004074 	movhi	r4,257
 1000360:	2105ec04 	addi	r4,r4,6064
 1000364:	e17ffe17 	ldw	r5,-8(fp)
 1000368:	10052b00 	call	10052b0 <printf>
	printf("%i\n", yAngle);
 100036c:	01004074 	movhi	r4,257
 1000370:	2105ec04 	addi	r4,r4,6064
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	10052b00 	call	10052b0 <printf>
}
 100037c:	e037883a 	mov	sp,fp
 1000380:	dfc00117 	ldw	ra,4(sp)
 1000384:	df000017 	ldw	fp,0(sp)
 1000388:	dec00204 	addi	sp,sp,8
 100038c:	f800283a 	ret

01000390 <_ZN3App3runEv>:

void App::run() {
 1000390:	defff204 	addi	sp,sp,-56
 1000394:	dfc00d15 	stw	ra,52(sp)
 1000398:	df000c15 	stw	fp,48(sp)
 100039c:	df000c04 	addi	fp,sp,48
 10003a0:	e13ffe15 	stw	r4,-8(fp)
	unsigned char *data;
	unsigned int *size;


	motors->write((1<<24)|(255<<16)|(255<<8)|(10));
 10003a4:	d126e617 	ldw	r4,-25704(gp)
 10003a8:	01408034 	movhi	r5,512
 10003ac:	297fc284 	addi	r5,r5,-246
 10003b0:	1000c580 	call	1000c58 <_ZN6Motors5writeEj>
	motors->write((2<<24)|(255<<16)|(255<<8)|(15));
 10003b4:	d126e617 	ldw	r4,-25704(gp)
 10003b8:	0140c034 	movhi	r5,768
 10003bc:	297fc3c4 	addi	r5,r5,-241
 10003c0:	1000c580 	call	1000c58 <_ZN6Motors5writeEj>
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));
 10003c4:	d126e617 	ldw	r4,-25704(gp)
 10003c8:	01404034 	movhi	r5,256
 10003cc:	297fffc4 	addi	r5,r5,-1
 10003d0:	1000c580 	call	1000c58 <_ZN6Motors5writeEj>
 10003d4:	00000006 	br	10003d8 <_ZN3App3runEv+0x48>

	while (1) {
		printf("Waiting for data...\n");
 10003d8:	01004074 	movhi	r4,257
 10003dc:	2105ed04 	addi	r4,r4,6068
 10003e0:	10053ec0 	call	10053ec <puts>

		wifi->receive(data, size);
 10003e4:	e0bffe17 	ldw	r2,-8(fp)
 10003e8:	11000017 	ldw	r4,0(r2)
 10003ec:	e17ffd17 	ldw	r5,-12(fp)
 10003f0:	e1bffc17 	ldw	r6,-16(fp)
 10003f4:	10010b40 	call	10010b4 <_ZN4WiFi7receiveEPhPj>
		char type = data[0];
 10003f8:	e0bffd17 	ldw	r2,-12(fp)
 10003fc:	10800003 	ldbu	r2,0(r2)
 1000400:	e0bffb05 	stb	r2,-20(fp)
		switch (type) {
 1000404:	e0bffb07 	ldb	r2,-20(fp)
 1000408:	e0bfff15 	stw	r2,-4(fp)
 100040c:	e0ffff17 	ldw	r3,-4(fp)
 1000410:	188018e0 	cmpeqi	r2,r3,99
 1000414:	1000441e 	bne	r2,zero,1000528 <_ZN3App3runEv+0x198>
 1000418:	e0ffff17 	ldw	r3,-4(fp)
 100041c:	18801908 	cmpgei	r2,r3,100
 1000420:	1000041e 	bne	r2,zero,1000434 <_ZN3App3runEv+0xa4>
 1000424:	e0ffff17 	ldw	r3,-4(fp)
 1000428:	18801860 	cmpeqi	r2,r3,97
 100042c:	1000381e 	bne	r2,zero,1000510 <_ZN3App3runEv+0x180>
 1000430:	00005906 	br	1000598 <_ZN3App3runEv+0x208>
 1000434:	e0ffff17 	ldw	r3,-4(fp)
 1000438:	188019e0 	cmpeqi	r2,r3,103
 100043c:	1000461e 	bne	r2,zero,1000558 <_ZN3App3runEv+0x1c8>
 1000440:	e0ffff17 	ldw	r3,-4(fp)
 1000444:	18801b60 	cmpeqi	r2,r3,109
 1000448:	1000011e 	bne	r2,zero,1000450 <_ZN3App3runEv+0xc0>
 100044c:	00005206 	br	1000598 <_ZN3App3runEv+0x208>
		case 'm': { /* motors */
			int cmd = (int)(data[1]);
 1000450:	e0bffd17 	ldw	r2,-12(fp)
 1000454:	10800044 	addi	r2,r2,1
 1000458:	10800003 	ldbu	r2,0(r2)
 100045c:	10803fcc 	andi	r2,r2,255
 1000460:	e0bffa15 	stw	r2,-24(fp)
			int linha = (int)(data[2]);
 1000464:	e0bffd17 	ldw	r2,-12(fp)
 1000468:	10800084 	addi	r2,r2,2
 100046c:	10800003 	ldbu	r2,0(r2)
 1000470:	10803fcc 	andi	r2,r2,255
 1000474:	e0bff915 	stw	r2,-28(fp)
			int coluna = (int)(data[3]);
 1000478:	e0bffd17 	ldw	r2,-12(fp)
 100047c:	108000c4 	addi	r2,r2,3
 1000480:	10800003 	ldbu	r2,0(r2)
 1000484:	10803fcc 	andi	r2,r2,255
 1000488:	e0bff815 	stw	r2,-32(fp)
			int valor = (int)(data[4]);
 100048c:	e0bffd17 	ldw	r2,-12(fp)
 1000490:	10800104 	addi	r2,r2,4
 1000494:	10800003 	ldbu	r2,0(r2)
 1000498:	10803fcc 	andi	r2,r2,255
 100049c:	e0bff715 	stw	r2,-36(fp)
			printf("Motors received. Sending it to the motors...\n");
 10004a0:	01004074 	movhi	r4,257
 10004a4:	2105f204 	addi	r4,r4,6088
 10004a8:	10053ec0 	call	10053ec <puts>
			int command = (  (cmd << 24) | (linha << 16) | (coluna << 8) | (valor) );
 10004ac:	e0bffa17 	ldw	r2,-24(fp)
 10004b0:	1006963a 	slli	r3,r2,24
 10004b4:	e0bff917 	ldw	r2,-28(fp)
 10004b8:	1004943a 	slli	r2,r2,16
 10004bc:	1886b03a 	or	r3,r3,r2
 10004c0:	e0bff817 	ldw	r2,-32(fp)
 10004c4:	1004923a 	slli	r2,r2,8
 10004c8:	1886b03a 	or	r3,r3,r2
 10004cc:	e0bff717 	ldw	r2,-36(fp)
 10004d0:	1884b03a 	or	r2,r3,r2
 10004d4:	e0bff615 	stw	r2,-40(fp)
			printf("Comando: %d %d %d %d = %d\n" ,cmd, linha, coluna, valor, command );
 10004d8:	e0bff717 	ldw	r2,-36(fp)
 10004dc:	d8800015 	stw	r2,0(sp)
 10004e0:	e0bff617 	ldw	r2,-40(fp)
 10004e4:	d8800115 	stw	r2,4(sp)
 10004e8:	01004074 	movhi	r4,257
 10004ec:	2105fe04 	addi	r4,r4,6136
 10004f0:	e17ffa17 	ldw	r5,-24(fp)
 10004f4:	e1bff917 	ldw	r6,-28(fp)
 10004f8:	e1fff817 	ldw	r7,-32(fp)
 10004fc:	10052b00 	call	10052b0 <printf>
			motors->write(command);
 1000500:	d126e617 	ldw	r4,-25704(gp)
 1000504:	e17ff617 	ldw	r5,-40(fp)
 1000508:	1000c580 	call	1000c58 <_ZN6Motors5writeEj>
		}
			break;
 100050c:	003fb206 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'a': { /*audio*/
			printf("Audio received. Sending it to the FFT...\n");
 1000510:	01004074 	movhi	r4,257
 1000514:	21060504 	addi	r4,r4,6164
 1000518:	10053ec0 	call	10053ec <puts>
			printf("%s\n", data);
 100051c:	e13ffd17 	ldw	r4,-12(fp)
 1000520:	10053ec0 	call	10053ec <puts>

			//if(!fft->isProcessing()) {
			//	fft->write(buffer.pop());
			//}
		}
			break;
 1000524:	003fac06 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'c': { /*compass*/
			printf("Compass received. Sending to the motors...\n");
 1000528:	01004074 	movhi	r4,257
 100052c:	21061004 	addi	r4,r4,6208
 1000530:	10053ec0 	call	10053ec <puts>
			printf("%s\n", data);
 1000534:	e13ffd17 	ldw	r4,-12(fp)
 1000538:	10053ec0 	call	10053ec <puts>
			writeCompass(data[1]);
 100053c:	e0bffd17 	ldw	r2,-12(fp)
 1000540:	10800044 	addi	r2,r2,1
 1000544:	10800003 	ldbu	r2,0(r2)
 1000548:	11403fcc 	andi	r5,r2,255
 100054c:	e13ffe17 	ldw	r4,-8(fp)
 1000550:	10002800 	call	1000280 <_ZN3App12writeCompassEh>
		}
			break;
 1000554:	003fa006 	br	10003d8 <_ZN3App3runEv+0x48>
		case 'g': { /*gyroscope*/
			printf("Gyroscope received. Sending to the motors...\n");
 1000558:	01004074 	movhi	r4,257
 100055c:	21061b04 	addi	r4,r4,6252
 1000560:	10053ec0 	call	10053ec <puts>
			printf("%s\n", data);
 1000564:	e13ffd17 	ldw	r4,-12(fp)
 1000568:	10053ec0 	call	10053ec <puts>
			writeGyroscope(int(data[1]), int(data[2]));
 100056c:	e0bffd17 	ldw	r2,-12(fp)
 1000570:	10800044 	addi	r2,r2,1
 1000574:	10800003 	ldbu	r2,0(r2)
 1000578:	11403fcc 	andi	r5,r2,255
 100057c:	e0bffd17 	ldw	r2,-12(fp)
 1000580:	10800084 	addi	r2,r2,2
 1000584:	10800003 	ldbu	r2,0(r2)
 1000588:	11803fcc 	andi	r6,r2,255
 100058c:	e13ffe17 	ldw	r4,-8(fp)
 1000590:	10003340 	call	1000334 <_ZN3App14writeGyroscopeEii>
		}
			break;
 1000594:	003f9006 	br	10003d8 <_ZN3App3runEv+0x48>
		default: {
			printf("Some data received. Don't know what to do...\n");
 1000598:	01004074 	movhi	r4,257
 100059c:	21062704 	addi	r4,r4,6300
 10005a0:	10053ec0 	call	10053ec <puts>
			printf("%s\n", data);
 10005a4:	e13ffd17 	ldw	r4,-12(fp)
 10005a8:	10053ec0 	call	10053ec <puts>

	motors->write((1<<24)|(255<<16)|(255<<8)|(10));
	motors->write((2<<24)|(255<<16)|(255<<8)|(15));
	motors->write((0<<24)|(255<<16)|(255<<8)|(255));

	while (1) {
 10005ac:	003f8a06 	br	10003d8 <_ZN3App3runEv+0x48>

010005b0 <_ZN3App10fftHandlerEj>:
	wifi->startServer();
	printf("Setup done\n");
	//fft->setInterruptHandler(App::fftHandler);
}

void App::fftHandler(unsigned int output) {
 10005b0:	defffc04 	addi	sp,sp,-16
 10005b4:	dfc00315 	stw	ra,12(sp)
 10005b8:	df000215 	stw	fp,8(sp)
 10005bc:	dc000115 	stw	r16,4(sp)
 10005c0:	df000104 	addi	fp,sp,4
 10005c4:	e13fff15 	stw	r4,-4(fp)
	printf("Got FFT output %d\n", output);
 10005c8:	01004074 	movhi	r4,257
 10005cc:	21063304 	addi	r4,r4,6348
 10005d0:	e17fff17 	ldw	r5,-4(fp)
 10005d4:	10052b00 	call	10052b0 <printf>

	//	motors->write(output);
	printf("%i\n", buffer.length());
 10005d8:	01004074 	movhi	r4,257
 10005dc:	21156004 	addi	r4,r4,21888
 10005e0:	10008680 	call	1000868 <_ZN3App6Buffer6lengthEv>
 10005e4:	100b883a 	mov	r5,r2
 10005e8:	01004074 	movhi	r4,257
 10005ec:	2105ec04 	addi	r4,r4,6064
 10005f0:	10052b00 	call	10052b0 <printf>
	fft->read();
 10005f4:	d126e717 	ldw	r4,-25700(gp)
 10005f8:	10009c40 	call	10009c4 <_ZN3FFT4readEv>

	if(buffer.length() > 0)
 10005fc:	01004074 	movhi	r4,257
 1000600:	21156004 	addi	r4,r4,21888
 1000604:	10008680 	call	1000868 <_ZN3App6Buffer6lengthEv>
 1000608:	10800048 	cmpgei	r2,r2,1
 100060c:	10803fcc 	andi	r2,r2,255
 1000610:	1005003a 	cmpeq	r2,r2,zero
 1000614:	1000071e 	bne	r2,zero,1000634 <_ZN3App10fftHandlerEj+0x84>
		fft->write(buffer.pop());
 1000618:	d426e717 	ldw	r16,-25700(gp)
 100061c:	01004074 	movhi	r4,257
 1000620:	21156004 	addi	r4,r4,21888
 1000624:	10007800 	call	1000780 <_ZN3App6Buffer3popEv>
 1000628:	100b883a 	mov	r5,r2
 100062c:	8009883a 	mov	r4,r16
 1000630:	1000a1c0 	call	1000a1c <_ZN3FFT5writeEPh>
}
 1000634:	e037883a 	mov	sp,fp
 1000638:	dfc00217 	ldw	ra,8(sp)
 100063c:	df000117 	ldw	fp,4(sp)
 1000640:	dc000017 	ldw	r16,0(sp)
 1000644:	dec00304 	addi	sp,sp,12
 1000648:	f800283a 	ret

0100064c <_ZN3App5setupEv>:

App::~App() {
	wifi->stopServer();
}

void App::setup() {
 100064c:	defffd04 	addi	sp,sp,-12
 1000650:	dfc00215 	stw	ra,8(sp)
 1000654:	df000115 	stw	fp,4(sp)
 1000658:	df000104 	addi	fp,sp,4
 100065c:	e13fff15 	stw	r4,-4(fp)
	wifi->config(SSID, PASSWORD);
 1000660:	e0bfff17 	ldw	r2,-4(fp)
 1000664:	11000017 	ldw	r4,0(r2)
 1000668:	01404074 	movhi	r5,257
 100066c:	29463804 	addi	r5,r5,6368
 1000670:	01804074 	movhi	r6,257
 1000674:	31863b04 	addi	r6,r6,6380
 1000678:	10012840 	call	1001284 <_ZN4WiFi6configEPcS0_>
	wifi->startServer();
 100067c:	e0bfff17 	ldw	r2,-4(fp)
 1000680:	11000017 	ldw	r4,0(r2)
 1000684:	10010380 	call	1001038 <_ZN4WiFi11startServerEv>
	printf("Setup done\n");
 1000688:	01004074 	movhi	r4,257
 100068c:	21063e04 	addi	r4,r4,6392
 1000690:	10053ec0 	call	10053ec <puts>
	//fft->setInterruptHandler(App::fftHandler);
}
 1000694:	e037883a 	mov	sp,fp
 1000698:	dfc00117 	ldw	ra,4(sp)
 100069c:	df000017 	ldw	fp,0(sp)
 10006a0:	dec00204 	addi	sp,sp,8
 10006a4:	f800283a 	ret

010006a8 <_ZN3AppD1Ev>:

App::App() {
	wifi = WiFi::getSingleton();
}

App::~App() {
 10006a8:	defffd04 	addi	sp,sp,-12
 10006ac:	dfc00215 	stw	ra,8(sp)
 10006b0:	df000115 	stw	fp,4(sp)
 10006b4:	df000104 	addi	fp,sp,4
 10006b8:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
 10006bc:	e0bfff17 	ldw	r2,-4(fp)
 10006c0:	11000017 	ldw	r4,0(r2)
 10006c4:	1000ec00 	call	1000ec0 <_ZN4WiFi10stopServerEv>
}
 10006c8:	e037883a 	mov	sp,fp
 10006cc:	dfc00117 	ldw	ra,4(sp)
 10006d0:	df000017 	ldw	fp,0(sp)
 10006d4:	dec00204 	addi	sp,sp,8
 10006d8:	f800283a 	ret

010006dc <_ZN3AppD2Ev>:

App::App() {
	wifi = WiFi::getSingleton();
}

App::~App() {
 10006dc:	defffd04 	addi	sp,sp,-12
 10006e0:	dfc00215 	stw	ra,8(sp)
 10006e4:	df000115 	stw	fp,4(sp)
 10006e8:	df000104 	addi	fp,sp,4
 10006ec:	e13fff15 	stw	r4,-4(fp)
	wifi->stopServer();
 10006f0:	e0bfff17 	ldw	r2,-4(fp)
 10006f4:	11000017 	ldw	r4,0(r2)
 10006f8:	1000ec00 	call	1000ec0 <_ZN4WiFi10stopServerEv>
}
 10006fc:	e037883a 	mov	sp,fp
 1000700:	dfc00117 	ldw	ra,4(sp)
 1000704:	df000017 	ldw	fp,0(sp)
 1000708:	dec00204 	addi	sp,sp,8
 100070c:	f800283a 	ret

01000710 <_ZN3AppC1Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
 1000710:	defffd04 	addi	sp,sp,-12
 1000714:	dfc00215 	stw	ra,8(sp)
 1000718:	df000115 	stw	fp,4(sp)
 100071c:	df000104 	addi	fp,sp,4
 1000720:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
 1000724:	10014400 	call	1001440 <_ZN4WiFi12getSingletonEv>
 1000728:	1007883a 	mov	r3,r2
 100072c:	e0bfff17 	ldw	r2,-4(fp)
 1000730:	10c00015 	stw	r3,0(r2)
}
 1000734:	e037883a 	mov	sp,fp
 1000738:	dfc00117 	ldw	ra,4(sp)
 100073c:	df000017 	ldw	fp,0(sp)
 1000740:	dec00204 	addi	sp,sp,8
 1000744:	f800283a 	ret

01000748 <_ZN3AppC2Ev>:
/*Static*/
Motors	*App::motors = Motors::getSingleton();
FFT	*App::fft = FFT::getSingleton();
App::Buffer	App::buffer;

App::App() {
 1000748:	defffd04 	addi	sp,sp,-12
 100074c:	dfc00215 	stw	ra,8(sp)
 1000750:	df000115 	stw	fp,4(sp)
 1000754:	df000104 	addi	fp,sp,4
 1000758:	e13fff15 	stw	r4,-4(fp)
	wifi = WiFi::getSingleton();
 100075c:	10014400 	call	1001440 <_ZN4WiFi12getSingletonEv>
 1000760:	1007883a 	mov	r3,r2
 1000764:	e0bfff17 	ldw	r2,-4(fp)
 1000768:	10c00015 	stw	r3,0(r2)
}
 100076c:	e037883a 	mov	sp,fp
 1000770:	dfc00117 	ldw	ra,4(sp)
 1000774:	df000017 	ldw	fp,0(sp)
 1000778:	dec00204 	addi	sp,sp,8
 100077c:	f800283a 	ret

01000780 <_ZN3App6Buffer3popEv>:

				len = ++len%size;
				end %= size;
			}

			unsigned char * pop() {
 1000780:	defffd04 	addi	sp,sp,-12
 1000784:	df000215 	stw	fp,8(sp)
 1000788:	df000204 	addi	fp,sp,8
 100078c:	e13ffe15 	stw	r4,-8(fp)
				if(begin == -1)
 1000790:	e0bffe17 	ldw	r2,-8(fp)
 1000794:	10800217 	ldw	r2,8(r2)
 1000798:	10bfffd8 	cmpnei	r2,r2,-1
 100079c:	1000021e 	bne	r2,zero,10007a8 <_ZN3App6Buffer3popEv+0x28>
					return NULL;
 10007a0:	e03fff15 	stw	zero,-4(fp)
 10007a4:	00002b06 	br	1000854 <_ZN3App6Buffer3popEv+0xd4>

				begin = ++begin&size;
 10007a8:	e0bffe17 	ldw	r2,-8(fp)
 10007ac:	10800217 	ldw	r2,8(r2)
 10007b0:	10c00044 	addi	r3,r2,1
 10007b4:	e0bffe17 	ldw	r2,-8(fp)
 10007b8:	10c00215 	stw	r3,8(r2)
 10007bc:	e0bffe17 	ldw	r2,-8(fp)
 10007c0:	10800217 	ldw	r2,8(r2)
 10007c4:	1007883a 	mov	r3,r2
 10007c8:	e0bffe17 	ldw	r2,-8(fp)
 10007cc:	10800017 	ldw	r2,0(r2)
 10007d0:	1884703a 	and	r2,r3,r2
 10007d4:	1007883a 	mov	r3,r2
 10007d8:	e0bffe17 	ldw	r2,-8(fp)
 10007dc:	10c00215 	stw	r3,8(r2)

				if(begin == end) {
 10007e0:	e0bffe17 	ldw	r2,-8(fp)
 10007e4:	10c00217 	ldw	r3,8(r2)
 10007e8:	e0bffe17 	ldw	r2,-8(fp)
 10007ec:	10800317 	ldw	r2,12(r2)
 10007f0:	1880091e 	bne	r3,r2,1000818 <_ZN3App6Buffer3popEv+0x98>
					end = 0;
 10007f4:	e0bffe17 	ldw	r2,-8(fp)
 10007f8:	10000315 	stw	zero,12(r2)
					begin = -1;
 10007fc:	e0fffe17 	ldw	r3,-8(fp)
 1000800:	00bfffc4 	movi	r2,-1
 1000804:	18800215 	stw	r2,8(r3)
					len = 0;
 1000808:	e0bffe17 	ldw	r2,-8(fp)
 100080c:	10000115 	stw	zero,4(r2)
					return NULL;;
 1000810:	e03fff15 	stw	zero,-4(fp)
 1000814:	00000f06 	br	1000854 <_ZN3App6Buffer3popEv+0xd4>
				}

				len--;
 1000818:	e0bffe17 	ldw	r2,-8(fp)
 100081c:	10800117 	ldw	r2,4(r2)
 1000820:	10ffffc4 	addi	r3,r2,-1
 1000824:	e0bffe17 	ldw	r2,-8(fp)
 1000828:	10c00115 	stw	r3,4(r2)

				return buffer[(begin - 1)];
 100082c:	e0bffe17 	ldw	r2,-8(fp)
 1000830:	10c00417 	ldw	r3,16(r2)
 1000834:	e0bffe17 	ldw	r2,-8(fp)
 1000838:	10800217 	ldw	r2,8(r2)
 100083c:	1085883a 	add	r2,r2,r2
 1000840:	1085883a 	add	r2,r2,r2
 1000844:	1885883a 	add	r2,r3,r2
 1000848:	10bfff04 	addi	r2,r2,-4
 100084c:	10800017 	ldw	r2,0(r2)
 1000850:	e0bfff15 	stw	r2,-4(fp)
 1000854:	e0bfff17 	ldw	r2,-4(fp)
			}
 1000858:	e037883a 	mov	sp,fp
 100085c:	df000017 	ldw	fp,0(sp)
 1000860:	dec00104 	addi	sp,sp,4
 1000864:	f800283a 	ret

01000868 <_ZN3App6Buffer6lengthEv>:

			int length() {
 1000868:	defffe04 	addi	sp,sp,-8
 100086c:	df000115 	stw	fp,4(sp)
 1000870:	df000104 	addi	fp,sp,4
 1000874:	e13fff15 	stw	r4,-4(fp)
				return len;
 1000878:	e0bfff17 	ldw	r2,-4(fp)
 100087c:	10800117 	ldw	r2,4(r2)
			}
 1000880:	e037883a 	mov	sp,fp
 1000884:	df000017 	ldw	fp,0(sp)
 1000888:	dec00104 	addi	sp,sp,4
 100088c:	f800283a 	ret

01000890 <_ZN3App6BufferC1Ev>:
	void run();

private:
	class Buffer {
		public:
			Buffer(){
 1000890:	defffd04 	addi	sp,sp,-12
 1000894:	dfc00215 	stw	ra,8(sp)
 1000898:	df000115 	stw	fp,4(sp)
 100089c:	df000104 	addi	fp,sp,4
 10008a0:	e13fff15 	stw	r4,-4(fp)
				size = 10;
 10008a4:	e0ffff17 	ldw	r3,-4(fp)
 10008a8:	00800284 	movi	r2,10
 10008ac:	18800015 	stw	r2,0(r3)
				buffer = new unsigned char*[size];
 10008b0:	e0bfff17 	ldw	r2,-4(fp)
 10008b4:	10800017 	ldw	r2,0(r2)
 10008b8:	1085883a 	add	r2,r2,r2
 10008bc:	1085883a 	add	r2,r2,r2
 10008c0:	1009883a 	mov	r4,r2
 10008c4:	10016a40 	call	10016a4 <_Znam>
 10008c8:	1007883a 	mov	r3,r2
 10008cc:	e0bfff17 	ldw	r2,-4(fp)
 10008d0:	10c00415 	stw	r3,16(r2)
				begin = -1;
 10008d4:	e0ffff17 	ldw	r3,-4(fp)
 10008d8:	00bfffc4 	movi	r2,-1
 10008dc:	18800215 	stw	r2,8(r3)
				end = 0;
 10008e0:	e0bfff17 	ldw	r2,-4(fp)
 10008e4:	10000315 	stw	zero,12(r2)
				len = 0;
 10008e8:	e0bfff17 	ldw	r2,-4(fp)
 10008ec:	10000115 	stw	zero,4(r2)
			}
 10008f0:	e037883a 	mov	sp,fp
 10008f4:	dfc00117 	ldw	ra,4(sp)
 10008f8:	df000017 	ldw	fp,0(sp)
 10008fc:	dec00204 	addi	sp,sp,8
 1000900:	f800283a 	ret

01000904 <_ZN3FFTC2Ev>:

/* static */
FFT *FFT::fft = NULL;

/* public */
FFT::FFT() {
 1000904:	defffe04 	addi	sp,sp,-8
 1000908:	df000115 	stw	fp,4(sp)
 100090c:	df000104 	addi	fp,sp,4
 1000910:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 1000914:	e0bfff17 	ldw	r2,-4(fp)
 1000918:	10000105 	stb	zero,4(r2)
}
 100091c:	e037883a 	mov	sp,fp
 1000920:	df000017 	ldw	fp,0(sp)
 1000924:	dec00104 	addi	sp,sp,4
 1000928:	f800283a 	ret

0100092c <_ZN3FFTC1Ev>:

/* static */
FFT *FFT::fft = NULL;

/* public */
FFT::FFT() {
 100092c:	defffe04 	addi	sp,sp,-8
 1000930:	df000115 	stw	fp,4(sp)
 1000934:	df000104 	addi	fp,sp,4
 1000938:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 100093c:	e0bfff17 	ldw	r2,-4(fp)
 1000940:	10000105 	stb	zero,4(r2)
}
 1000944:	e037883a 	mov	sp,fp
 1000948:	df000017 	ldw	fp,0(sp)
 100094c:	dec00104 	addi	sp,sp,4
 1000950:	f800283a 	ret

01000954 <_ZN3FFTD2Ev>:

FFT::~FFT() {
 1000954:	defffe04 	addi	sp,sp,-8
 1000958:	df000115 	stw	fp,4(sp)
 100095c:	df000104 	addi	fp,sp,4
 1000960:	e13fff15 	stw	r4,-4(fp)
}
 1000964:	e037883a 	mov	sp,fp
 1000968:	df000017 	ldw	fp,0(sp)
 100096c:	dec00104 	addi	sp,sp,4
 1000970:	f800283a 	ret

01000974 <_ZN3FFTD1Ev>:
/* public */
FFT::FFT() {
	processing = false;
}

FFT::~FFT() {
 1000974:	defffe04 	addi	sp,sp,-8
 1000978:	df000115 	stw	fp,4(sp)
 100097c:	df000104 	addi	fp,sp,4
 1000980:	e13fff15 	stw	r4,-4(fp)
}
 1000984:	e037883a 	mov	sp,fp
 1000988:	df000017 	ldw	fp,0(sp)
 100098c:	dec00104 	addi	sp,sp,4
 1000990:	f800283a 	ret

01000994 <_ZN3FFT19setInterruptHandlerEPFvjE>:
	if (fft == NULL)
		fft = new FFT();
	return fft;
}

void FFT::setInterruptHandler(handler h) {
 1000994:	defffd04 	addi	sp,sp,-12
 1000998:	df000215 	stw	fp,8(sp)
 100099c:	df000204 	addi	fp,sp,8
 10009a0:	e13ffe15 	stw	r4,-8(fp)
 10009a4:	e17fff15 	stw	r5,-4(fp)
	int_handler = h;
 10009a8:	e0fffe17 	ldw	r3,-8(fp)
 10009ac:	e0bfff17 	ldw	r2,-4(fp)
 10009b0:	18800015 	stw	r2,0(r3)
}
 10009b4:	e037883a 	mov	sp,fp
 10009b8:	df000017 	ldw	fp,0(sp)
 10009bc:	dec00104 	addi	sp,sp,4
 10009c0:	f800283a 	ret

010009c4 <_ZN3FFT4readEv>:
	int_handler(3);

	delete input;
}

unsigned int FFT::read() {
 10009c4:	defffe04 	addi	sp,sp,-8
 10009c8:	df000115 	stw	fp,4(sp)
 10009cc:	df000104 	addi	fp,sp,4
 10009d0:	e13fff15 	stw	r4,-4(fp)
	processing = false;
 10009d4:	e0bfff17 	ldw	r2,-4(fp)
 10009d8:	10000105 	stb	zero,4(r2)
	return 0;
 10009dc:	0005883a 	mov	r2,zero
}
 10009e0:	e037883a 	mov	sp,fp
 10009e4:	df000017 	ldw	fp,0(sp)
 10009e8:	dec00104 	addi	sp,sp,4
 10009ec:	f800283a 	ret

010009f0 <_ZN3FFT12isProcessingEv>:

bool FFT::isProcessing() {
 10009f0:	defffe04 	addi	sp,sp,-8
 10009f4:	df000115 	stw	fp,4(sp)
 10009f8:	df000104 	addi	fp,sp,4
 10009fc:	e13fff15 	stw	r4,-4(fp)
	return processing;
 1000a00:	e0bfff17 	ldw	r2,-4(fp)
 1000a04:	10800103 	ldbu	r2,4(r2)
 1000a08:	10803fcc 	andi	r2,r2,255
}
 1000a0c:	e037883a 	mov	sp,fp
 1000a10:	df000017 	ldw	fp,0(sp)
 1000a14:	dec00104 	addi	sp,sp,4
 1000a18:	f800283a 	ret

01000a1c <_ZN3FFT5writeEPh>:

void FFT::setInterruptHandler(handler h) {
	int_handler = h;
}

void FFT::write(unsigned char *input) {
 1000a1c:	defffc04 	addi	sp,sp,-16
 1000a20:	dfc00315 	stw	ra,12(sp)
 1000a24:	df000215 	stw	fp,8(sp)
 1000a28:	df000204 	addi	fp,sp,8
 1000a2c:	e13ffe15 	stw	r4,-8(fp)
 1000a30:	e17fff15 	stw	r5,-4(fp)
	printf("%s\n", input);
 1000a34:	e13fff17 	ldw	r4,-4(fp)
 1000a38:	10053ec0 	call	10053ec <puts>

	processing = true;
 1000a3c:	e0fffe17 	ldw	r3,-8(fp)
 1000a40:	00800044 	movi	r2,1
 1000a44:	18800105 	stb	r2,4(r3)
	int_handler(3);
 1000a48:	e0bffe17 	ldw	r2,-8(fp)
 1000a4c:	10800017 	ldw	r2,0(r2)
 1000a50:	010000c4 	movi	r4,3
 1000a54:	103ee83a 	callr	r2

	delete input;
 1000a58:	e13fff17 	ldw	r4,-4(fp)
 1000a5c:	10017440 	call	1001744 <_ZdlPv>
}
 1000a60:	e037883a 	mov	sp,fp
 1000a64:	dfc00117 	ldw	ra,4(sp)
 1000a68:	df000017 	ldw	fp,0(sp)
 1000a6c:	dec00204 	addi	sp,sp,8
 1000a70:	f800283a 	ret

01000a74 <_ZN3FFT12getSingletonEv>:
}

FFT::~FFT() {
}

FFT *FFT::getSingleton() {
 1000a74:	defffd04 	addi	sp,sp,-12
 1000a78:	dfc00215 	stw	ra,8(sp)
 1000a7c:	df000115 	stw	fp,4(sp)
 1000a80:	dc000015 	stw	r16,0(sp)
 1000a84:	d839883a 	mov	fp,sp
	if (fft == NULL)
 1000a88:	d0a6e817 	ldw	r2,-25696(gp)
 1000a8c:	1004c03a 	cmpne	r2,r2,zero
 1000a90:	1000061e 	bne	r2,zero,1000aac <_ZN3FFT12getSingletonEv+0x38>
		fft = new FFT();
 1000a94:	01000204 	movi	r4,8
 1000a98:	10024580 	call	1002458 <_Znwm>
 1000a9c:	1021883a 	mov	r16,r2
 1000aa0:	8009883a 	mov	r4,r16
 1000aa4:	100092c0 	call	100092c <_ZN3FFTC1Ev>
 1000aa8:	d426e815 	stw	r16,-25696(gp)
	return fft;
 1000aac:	d0a6e817 	ldw	r2,-25696(gp)
}
 1000ab0:	e037883a 	mov	sp,fp
 1000ab4:	dfc00217 	ldw	ra,8(sp)
 1000ab8:	df000117 	ldw	fp,4(sp)
 1000abc:	dc000017 	ldw	r16,0(sp)
 1000ac0:	dec00304 	addi	sp,sp,12
 1000ac4:	f800283a 	ret

01000ac8 <_ZN6MotorsD2Ev>:

/* static */
Motors *Motors::motors = NULL;

/* public */
Motors::~Motors() {
 1000ac8:	defffe04 	addi	sp,sp,-8
 1000acc:	df000115 	stw	fp,4(sp)
 1000ad0:	df000104 	addi	fp,sp,4
 1000ad4:	e13fff15 	stw	r4,-4(fp)
}
 1000ad8:	e037883a 	mov	sp,fp
 1000adc:	df000017 	ldw	fp,0(sp)
 1000ae0:	dec00104 	addi	sp,sp,4
 1000ae4:	f800283a 	ret

01000ae8 <_ZN6MotorsD1Ev>:

/* static */
Motors *Motors::motors = NULL;

/* public */
Motors::~Motors() {
 1000ae8:	defffe04 	addi	sp,sp,-8
 1000aec:	df000115 	stw	fp,4(sp)
 1000af0:	df000104 	addi	fp,sp,4
 1000af4:	e13fff15 	stw	r4,-4(fp)
}
 1000af8:	e037883a 	mov	sp,fp
 1000afc:	df000017 	ldw	fp,0(sp)
 1000b00:	dec00104 	addi	sp,sp,4
 1000b04:	f800283a 	ret

01000b08 <_ZN6Motors5writeEjjjj>:
		unsigned int valor) {
	write(4, line, column, valor);
}

void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
 1000b08:	defffb04 	addi	sp,sp,-20
 1000b0c:	df000415 	stw	fp,16(sp)
 1000b10:	df000404 	addi	fp,sp,16
 1000b14:	e13ffc15 	stw	r4,-16(fp)
 1000b18:	e17ffd15 	stw	r5,-12(fp)
 1000b1c:	e1bffe15 	stw	r6,-8(fp)
 1000b20:	e1ffff15 	stw	r7,-4(fp)
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
 1000b24:	e0bffc17 	ldw	r2,-16(fp)
 1000b28:	11000017 	ldw	r4,0(r2)
 1000b2c:	e0bffd17 	ldw	r2,-12(fp)
 1000b30:	1006963a 	slli	r3,r2,24
 1000b34:	e0bffe17 	ldw	r2,-8(fp)
 1000b38:	1004943a 	slli	r2,r2,16
 1000b3c:	1887883a 	add	r3,r3,r2
 1000b40:	e0bfff17 	ldw	r2,-4(fp)
 1000b44:	1004923a 	slli	r2,r2,8
 1000b48:	1887883a 	add	r3,r3,r2
 1000b4c:	e0800117 	ldw	r2,4(fp)
 1000b50:	1885883a 	add	r2,r3,r2
 1000b54:	20800015 	stw	r2,0(r4)
}
 1000b58:	e037883a 	mov	sp,fp
 1000b5c:	df000017 	ldw	fp,0(sp)
 1000b60:	dec00104 	addi	sp,sp,4
 1000b64:	f800283a 	ret

01000b68 <_ZN6Motors11write_delayEjjj>:
		unsigned int valor) {
	write(2, line, column, valor);
}

void Motors::write_delay(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000b68:	defff904 	addi	sp,sp,-28
 1000b6c:	dfc00615 	stw	ra,24(sp)
 1000b70:	df000515 	stw	fp,20(sp)
 1000b74:	df000504 	addi	fp,sp,20
 1000b78:	e13ffc15 	stw	r4,-16(fp)
 1000b7c:	e17ffd15 	stw	r5,-12(fp)
 1000b80:	e1bffe15 	stw	r6,-8(fp)
 1000b84:	e1ffff15 	stw	r7,-4(fp)
	write(4, line, column, valor);
 1000b88:	e0bfff17 	ldw	r2,-4(fp)
 1000b8c:	d8800015 	stw	r2,0(sp)
 1000b90:	e13ffc17 	ldw	r4,-16(fp)
 1000b94:	01400104 	movi	r5,4
 1000b98:	e1bffd17 	ldw	r6,-12(fp)
 1000b9c:	e1fffe17 	ldw	r7,-8(fp)
 1000ba0:	1000b080 	call	1000b08 <_ZN6Motors5writeEjjjj>
}
 1000ba4:	e037883a 	mov	sp,fp
 1000ba8:	dfc00117 	ldw	ra,4(sp)
 1000bac:	df000017 	ldw	fp,0(sp)
 1000bb0:	dec00204 	addi	sp,sp,8
 1000bb4:	f800283a 	ret

01000bb8 <_ZN6Motors15write_variationEjjj>:
		unsigned int valor) {
	write(1, line, column, valor);
}

void Motors::write_variation(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000bb8:	defff904 	addi	sp,sp,-28
 1000bbc:	dfc00615 	stw	ra,24(sp)
 1000bc0:	df000515 	stw	fp,20(sp)
 1000bc4:	df000504 	addi	fp,sp,20
 1000bc8:	e13ffc15 	stw	r4,-16(fp)
 1000bcc:	e17ffd15 	stw	r5,-12(fp)
 1000bd0:	e1bffe15 	stw	r6,-8(fp)
 1000bd4:	e1ffff15 	stw	r7,-4(fp)
	write(2, line, column, valor);
 1000bd8:	e0bfff17 	ldw	r2,-4(fp)
 1000bdc:	d8800015 	stw	r2,0(sp)
 1000be0:	e13ffc17 	ldw	r4,-16(fp)
 1000be4:	01400084 	movi	r5,2
 1000be8:	e1bffd17 	ldw	r6,-12(fp)
 1000bec:	e1fffe17 	ldw	r7,-8(fp)
 1000bf0:	1000b080 	call	1000b08 <_ZN6Motors5writeEjjjj>
}
 1000bf4:	e037883a 	mov	sp,fp
 1000bf8:	dfc00117 	ldw	ra,4(sp)
 1000bfc:	df000017 	ldw	fp,0(sp)
 1000c00:	dec00204 	addi	sp,sp,8
 1000c04:	f800283a 	ret

01000c08 <_ZN6Motors11write_powerEjjj>:
		motors = new Motors();
	return motors;
}

void Motors::write_power(unsigned int line, unsigned int column,
		unsigned int valor) {
 1000c08:	defff904 	addi	sp,sp,-28
 1000c0c:	dfc00615 	stw	ra,24(sp)
 1000c10:	df000515 	stw	fp,20(sp)
 1000c14:	df000504 	addi	fp,sp,20
 1000c18:	e13ffc15 	stw	r4,-16(fp)
 1000c1c:	e17ffd15 	stw	r5,-12(fp)
 1000c20:	e1bffe15 	stw	r6,-8(fp)
 1000c24:	e1ffff15 	stw	r7,-4(fp)
	write(1, line, column, valor);
 1000c28:	e0bfff17 	ldw	r2,-4(fp)
 1000c2c:	d8800015 	stw	r2,0(sp)
 1000c30:	e13ffc17 	ldw	r4,-16(fp)
 1000c34:	01400044 	movi	r5,1
 1000c38:	e1bffd17 	ldw	r6,-12(fp)
 1000c3c:	e1fffe17 	ldw	r7,-8(fp)
 1000c40:	1000b080 	call	1000b08 <_ZN6Motors5writeEjjjj>
}
 1000c44:	e037883a 	mov	sp,fp
 1000c48:	dfc00117 	ldw	ra,4(sp)
 1000c4c:	df000017 	ldw	fp,0(sp)
 1000c50:	dec00204 	addi	sp,sp,8
 1000c54:	f800283a 	ret

01000c58 <_ZN6Motors5writeEj>:
void Motors::write(unsigned int op, unsigned int line, unsigned int column,
		unsigned int valor) {
	*data = (op << 24) + (line << 16) + (column << 8) + valor;
}

void Motors::write(unsigned int valor) {
 1000c58:	defffd04 	addi	sp,sp,-12
 1000c5c:	df000215 	stw	fp,8(sp)
 1000c60:	df000204 	addi	fp,sp,8
 1000c64:	e13ffe15 	stw	r4,-8(fp)
 1000c68:	e17fff15 	stw	r5,-4(fp)
	*data = valor;
 1000c6c:	e0bffe17 	ldw	r2,-8(fp)
 1000c70:	10c00017 	ldw	r3,0(r2)
 1000c74:	e0bfff17 	ldw	r2,-4(fp)
 1000c78:	18800015 	stw	r2,0(r3)
}
 1000c7c:	e037883a 	mov	sp,fp
 1000c80:	df000017 	ldw	fp,0(sp)
 1000c84:	dec00104 	addi	sp,sp,4
 1000c88:	f800283a 	ret

01000c8c <_ZN6Motors18write_to_next_lineEv>:

void Motors::write_to_next_line() {
 1000c8c:	defffc04 	addi	sp,sp,-16
 1000c90:	dfc00315 	stw	ra,12(sp)
 1000c94:	df000215 	stw	fp,8(sp)
 1000c98:	df000204 	addi	fp,sp,8
 1000c9c:	e13fff15 	stw	r4,-4(fp)
	write(8, 0, 0, 0);
 1000ca0:	d8000015 	stw	zero,0(sp)
 1000ca4:	e13fff17 	ldw	r4,-4(fp)
 1000ca8:	01400204 	movi	r5,8
 1000cac:	000d883a 	mov	r6,zero
 1000cb0:	000f883a 	mov	r7,zero
 1000cb4:	1000b080 	call	1000b08 <_ZN6Motors5writeEjjjj>
}
 1000cb8:	e037883a 	mov	sp,fp
 1000cbc:	dfc00117 	ldw	ra,4(sp)
 1000cc0:	df000017 	ldw	fp,0(sp)
 1000cc4:	dec00204 	addi	sp,sp,8
 1000cc8:	f800283a 	ret

01000ccc <_ZN6Motors21write_to_next_collummEv>:

void Motors::write_to_next_collumm() {
 1000ccc:	defffc04 	addi	sp,sp,-16
 1000cd0:	dfc00315 	stw	ra,12(sp)
 1000cd4:	df000215 	stw	fp,8(sp)
 1000cd8:	df000204 	addi	fp,sp,8
 1000cdc:	e13fff15 	stw	r4,-4(fp)
	write(16, 0, 0, 0);
 1000ce0:	d8000015 	stw	zero,0(sp)
 1000ce4:	e13fff17 	ldw	r4,-4(fp)
 1000ce8:	01400404 	movi	r5,16
 1000cec:	000d883a 	mov	r6,zero
 1000cf0:	000f883a 	mov	r7,zero
 1000cf4:	1000b080 	call	1000b08 <_ZN6Motors5writeEjjjj>
}
 1000cf8:	e037883a 	mov	sp,fp
 1000cfc:	dfc00117 	ldw	ra,4(sp)
 1000d00:	df000017 	ldw	fp,0(sp)
 1000d04:	dec00204 	addi	sp,sp,8
 1000d08:	f800283a 	ret

01000d0c <_ZN6MotorsC2Ev>:

/* private */
Motors::Motors() {
 1000d0c:	defffe04 	addi	sp,sp,-8
 1000d10:	df000115 	stw	fp,4(sp)
 1000d14:	df000104 	addi	fp,sp,4
 1000d18:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
 1000d1c:	e0ffff17 	ldw	r3,-4(fp)
 1000d20:	00881a04 	movi	r2,8296
 1000d24:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
 1000d28:	e0ffff17 	ldw	r3,-4(fp)
 1000d2c:	00881b04 	movi	r2,8300
 1000d30:	18800115 	stw	r2,4(r3)
}
 1000d34:	e037883a 	mov	sp,fp
 1000d38:	df000017 	ldw	fp,0(sp)
 1000d3c:	dec00104 	addi	sp,sp,4
 1000d40:	f800283a 	ret

01000d44 <_ZN6MotorsC1Ev>:
void Motors::write_to_next_collumm() {
	write(16, 0, 0, 0);
}

/* private */
Motors::Motors() {
 1000d44:	defffe04 	addi	sp,sp,-8
 1000d48:	df000115 	stw	fp,4(sp)
 1000d4c:	df000104 	addi	fp,sp,4
 1000d50:	e13fff15 	stw	r4,-4(fp)
	data = (unsigned int *) MATRIX_ADDRESS;
 1000d54:	e0ffff17 	ldw	r3,-4(fp)
 1000d58:	00881a04 	movi	r2,8296
 1000d5c:	18800015 	stw	r2,0(r3)
	status = (unsigned int *) (MATRIX_ADDRESS + 4);
 1000d60:	e0ffff17 	ldw	r3,-4(fp)
 1000d64:	00881b04 	movi	r2,8300
 1000d68:	18800115 	stw	r2,4(r3)
}
 1000d6c:	e037883a 	mov	sp,fp
 1000d70:	df000017 	ldw	fp,0(sp)
 1000d74:	dec00104 	addi	sp,sp,4
 1000d78:	f800283a 	ret

01000d7c <_ZN6Motors4readEv>:

unsigned int Motors::read() {
 1000d7c:	defffe04 	addi	sp,sp,-8
 1000d80:	df000115 	stw	fp,4(sp)
 1000d84:	df000104 	addi	fp,sp,4
 1000d88:	e13fff15 	stw	r4,-4(fp)
	return *status;
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	10800117 	ldw	r2,4(r2)
 1000d94:	10800017 	ldw	r2,0(r2)
}
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <_ZN6Motors12getSingletonEv>:

/* public */
Motors::~Motors() {
}

Motors *Motors::getSingleton() {
 1000da8:	defffd04 	addi	sp,sp,-12
 1000dac:	dfc00215 	stw	ra,8(sp)
 1000db0:	df000115 	stw	fp,4(sp)
 1000db4:	dc000015 	stw	r16,0(sp)
 1000db8:	d839883a 	mov	fp,sp
	if (motors == NULL)
 1000dbc:	d0a6e917 	ldw	r2,-25692(gp)
 1000dc0:	1004c03a 	cmpne	r2,r2,zero
 1000dc4:	1000061e 	bne	r2,zero,1000de0 <_ZN6Motors12getSingletonEv+0x38>
		motors = new Motors();
 1000dc8:	01000204 	movi	r4,8
 1000dcc:	10024580 	call	1002458 <_Znwm>
 1000dd0:	1021883a 	mov	r16,r2
 1000dd4:	8009883a 	mov	r4,r16
 1000dd8:	1000d440 	call	1000d44 <_ZN6MotorsC1Ev>
 1000ddc:	d426e915 	stw	r16,-25692(gp)
	return motors;
 1000de0:	d0a6e917 	ldw	r2,-25692(gp)
}
 1000de4:	e037883a 	mov	sp,fp
 1000de8:	dfc00217 	ldw	ra,8(sp)
 1000dec:	df000117 	ldw	fp,4(sp)
 1000df0:	dc000017 	ldw	r16,0(sp)
 1000df4:	dec00304 	addi	sp,sp,12
 1000df8:	f800283a 	ret

01000dfc <_ZN4WiFi5writeEPci>:
		k = getc(file);
		printf("%c",k);
	} while (k != 'K');
}

void WiFi::write(char * msg, int size = -1) {
 1000dfc:	defffb04 	addi	sp,sp,-20
 1000e00:	dfc00415 	stw	ra,16(sp)
 1000e04:	df000315 	stw	fp,12(sp)
 1000e08:	df000304 	addi	fp,sp,12
 1000e0c:	e13ffd15 	stw	r4,-12(fp)
 1000e10:	e17ffe15 	stw	r5,-8(fp)
 1000e14:	e1bfff15 	stw	r6,-4(fp)
	fwrite(msg, 1, size, file);
 1000e18:	e1bfff17 	ldw	r6,-4(fp)
 1000e1c:	e0bffd17 	ldw	r2,-12(fp)
 1000e20:	11c00017 	ldw	r7,0(r2)
 1000e24:	e13ffe17 	ldw	r4,-8(fp)
 1000e28:	01400044 	movi	r5,1
 1000e2c:	100473c0 	call	100473c <fwrite>
}
 1000e30:	e037883a 	mov	sp,fp
 1000e34:	dfc00117 	ldw	ra,4(sp)
 1000e38:	df000017 	ldw	fp,0(sp)
 1000e3c:	dec00204 	addi	sp,sp,8
 1000e40:	f800283a 	ret

01000e44 <_ZN4WiFi15sendInstructionEPc>:
	if (!file) {
		printf("Error opening UART.\n");
	}
}

void WiFi::sendInstruction(char * instruction) {
 1000e44:	defffb04 	addi	sp,sp,-20
 1000e48:	dfc00415 	stw	ra,16(sp)
 1000e4c:	df000315 	stw	fp,12(sp)
 1000e50:	df000304 	addi	fp,sp,12
 1000e54:	e13ffe15 	stw	r4,-8(fp)
 1000e58:	e17fff15 	stw	r5,-4(fp)
	write(instruction, strlen(instruction));
 1000e5c:	e13fff17 	ldw	r4,-4(fp)
 1000e60:	1005c680 	call	1005c68 <strlen>
 1000e64:	100d883a 	mov	r6,r2
 1000e68:	e13ffe17 	ldw	r4,-8(fp)
 1000e6c:	e17fff17 	ldw	r5,-4(fp)
 1000e70:	1000dfc0 	call	1000dfc <_ZN4WiFi5writeEPci>
	write("\r\n", 2);
 1000e74:	e13ffe17 	ldw	r4,-8(fp)
 1000e78:	01404074 	movhi	r5,257
 1000e7c:	29464104 	addi	r5,r5,6404
 1000e80:	01800084 	movi	r6,2
 1000e84:	1000dfc0 	call	1000dfc <_ZN4WiFi5writeEPci>

	char k;
	do {
		k = getc(file);
 1000e88:	e0bffe17 	ldw	r2,-8(fp)
 1000e8c:	11000017 	ldw	r4,0(r2)
 1000e90:	100477c0 	call	100477c <getc>
 1000e94:	e0bffd05 	stb	r2,-12(fp)
		printf("%c",k);
 1000e98:	e13ffd07 	ldb	r4,-12(fp)
 1000e9c:	10053280 	call	1005328 <putchar>
void WiFi::sendInstruction(char * instruction) {
	write(instruction, strlen(instruction));
	write("\r\n", 2);

	char k;
	do {
 1000ea0:	e0bffd07 	ldb	r2,-12(fp)
 1000ea4:	108012d8 	cmpnei	r2,r2,75
 1000ea8:	103ff71e 	bne	r2,zero,1000e88 <_ZN4WiFi15sendInstructionEPc+0x44>
		k = getc(file);
		printf("%c",k);
	} while (k != 'K');
}
 1000eac:	e037883a 	mov	sp,fp
 1000eb0:	dfc00117 	ldw	ra,4(sp)
 1000eb4:	df000017 	ldw	fp,0(sp)
 1000eb8:	dec00204 	addi	sp,sp,8
 1000ebc:	f800283a 	ret

01000ec0 <_ZN4WiFi10stopServerEv>:
	sendInstruction(server);

	printf("Done!\n");
}

void WiFi::stopServer() {
 1000ec0:	defff704 	addi	sp,sp,-36
 1000ec4:	dfc00815 	stw	ra,32(sp)
 1000ec8:	df000715 	stw	fp,28(sp)
 1000ecc:	df000704 	addi	fp,sp,28
 1000ed0:	e13fff15 	stw	r4,-4(fp)
	char stop[] = "AT+CIPSERVER=0";
 1000ed4:	00c04074 	movhi	r3,257
 1000ed8:	18c64204 	addi	r3,r3,6408
 1000edc:	18800017 	ldw	r2,0(r3)
 1000ee0:	e0bff915 	stw	r2,-28(fp)
 1000ee4:	18800117 	ldw	r2,4(r3)
 1000ee8:	e0bffa15 	stw	r2,-24(fp)
 1000eec:	18800217 	ldw	r2,8(r3)
 1000ef0:	e0bffb15 	stw	r2,-20(fp)
 1000ef4:	1880030b 	ldhu	r2,12(r3)
 1000ef8:	e0bffc0d 	sth	r2,-16(fp)
 1000efc:	18800383 	ldbu	r2,14(r3)
 1000f00:	e0bffc85 	stb	r2,-14(fp)
	char rst[] = "AT+RST";
 1000f04:	00c04074 	movhi	r3,257
 1000f08:	18c64604 	addi	r3,r3,6424
 1000f0c:	18800003 	ldbu	r2,0(r3)
 1000f10:	e0bffcc5 	stb	r2,-13(fp)
 1000f14:	18800043 	ldbu	r2,1(r3)
 1000f18:	e0bffd05 	stb	r2,-12(fp)
 1000f1c:	18800083 	ldbu	r2,2(r3)
 1000f20:	e0bffd45 	stb	r2,-11(fp)
 1000f24:	188000c3 	ldbu	r2,3(r3)
 1000f28:	e0bffd85 	stb	r2,-10(fp)
 1000f2c:	18800103 	ldbu	r2,4(r3)
 1000f30:	e0bffdc5 	stb	r2,-9(fp)
 1000f34:	18800143 	ldbu	r2,5(r3)
 1000f38:	e0bffe05 	stb	r2,-8(fp)
 1000f3c:	18800183 	ldbu	r2,6(r3)
 1000f40:	e0bffe45 	stb	r2,-7(fp)
	sendInstruction(stop);
 1000f44:	e13fff17 	ldw	r4,-4(fp)
 1000f48:	e17ff904 	addi	r5,fp,-28
 1000f4c:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>
	sendInstruction(rst);
 1000f50:	e17ffcc4 	addi	r5,fp,-13
 1000f54:	e13fff17 	ldw	r4,-4(fp)
 1000f58:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>
}
 1000f5c:	e037883a 	mov	sp,fp
 1000f60:	dfc00117 	ldw	ra,4(sp)
 1000f64:	df000017 	ldw	fp,0(sp)
 1000f68:	dec00204 	addi	sp,sp,8
 1000f6c:	f800283a 	ret

01000f70 <_ZN4WiFiC1Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
 1000f70:	defffd04 	addi	sp,sp,-12
 1000f74:	dfc00215 	stw	ra,8(sp)
 1000f78:	df000115 	stw	fp,4(sp)
 1000f7c:	df000104 	addi	fp,sp,4
 1000f80:	e13fff15 	stw	r4,-4(fp)
	file = fopen("/dev/esp8266", "r+");
 1000f84:	01004074 	movhi	r4,257
 1000f88:	21064804 	addi	r4,r4,6432
 1000f8c:	01404074 	movhi	r5,257
 1000f90:	29464c04 	addi	r5,r5,6448
 1000f94:	1003be00 	call	1003be0 <fopen>
 1000f98:	1007883a 	mov	r3,r2
 1000f9c:	e0bfff17 	ldw	r2,-4(fp)
 1000fa0:	10c00015 	stw	r3,0(r2)
	if (!file) {
 1000fa4:	e0bfff17 	ldw	r2,-4(fp)
 1000fa8:	10800017 	ldw	r2,0(r2)
 1000fac:	1004c03a 	cmpne	r2,r2,zero
 1000fb0:	1000031e 	bne	r2,zero,1000fc0 <_ZN4WiFiC1Ev+0x50>
		printf("Error opening UART.\n");
 1000fb4:	01004074 	movhi	r4,257
 1000fb8:	21064d04 	addi	r4,r4,6452
 1000fbc:	10053ec0 	call	10053ec <puts>
	}
}
 1000fc0:	e037883a 	mov	sp,fp
 1000fc4:	dfc00117 	ldw	ra,4(sp)
 1000fc8:	df000017 	ldw	fp,0(sp)
 1000fcc:	dec00204 	addi	sp,sp,8
 1000fd0:	f800283a 	ret

01000fd4 <_ZN4WiFiC2Ev>:
	data[j] = '\0';
}


/* private */
WiFi::WiFi() {
 1000fd4:	defffd04 	addi	sp,sp,-12
 1000fd8:	dfc00215 	stw	ra,8(sp)
 1000fdc:	df000115 	stw	fp,4(sp)
 1000fe0:	df000104 	addi	fp,sp,4
 1000fe4:	e13fff15 	stw	r4,-4(fp)
	file = fopen("/dev/esp8266", "r+");
 1000fe8:	01004074 	movhi	r4,257
 1000fec:	21064804 	addi	r4,r4,6432
 1000ff0:	01404074 	movhi	r5,257
 1000ff4:	29464c04 	addi	r5,r5,6448
 1000ff8:	1003be00 	call	1003be0 <fopen>
 1000ffc:	1007883a 	mov	r3,r2
 1001000:	e0bfff17 	ldw	r2,-4(fp)
 1001004:	10c00015 	stw	r3,0(r2)
	if (!file) {
 1001008:	e0bfff17 	ldw	r2,-4(fp)
 100100c:	10800017 	ldw	r2,0(r2)
 1001010:	1004c03a 	cmpne	r2,r2,zero
 1001014:	1000031e 	bne	r2,zero,1001024 <_ZN4WiFiC2Ev+0x50>
		printf("Error opening UART.\n");
 1001018:	01004074 	movhi	r4,257
 100101c:	21064d04 	addi	r4,r4,6452
 1001020:	10053ec0 	call	10053ec <puts>
	}
}
 1001024:	e037883a 	mov	sp,fp
 1001028:	dfc00117 	ldw	ra,4(sp)
 100102c:	df000017 	ldw	fp,0(sp)
 1001030:	dec00204 	addi	sp,sp,8
 1001034:	f800283a 	ret

01001038 <_ZN4WiFi11startServerEv>:
	sendInstruction(ip);

	printf("Done!\n");
}

void WiFi::startServer() {
 1001038:	defff804 	addi	sp,sp,-32
 100103c:	dfc00715 	stw	ra,28(sp)
 1001040:	df000615 	stw	fp,24(sp)
 1001044:	df000604 	addi	fp,sp,24
 1001048:	e13fff15 	stw	r4,-4(fp)
	printf("Starting Server...\n");
 100104c:	01004074 	movhi	r4,257
 1001050:	21065204 	addi	r4,r4,6472
 1001054:	10053ec0 	call	10053ec <puts>

	char server[] = "AT+CIPSERVER=1,80";
 1001058:	00c04074 	movhi	r3,257
 100105c:	18c65904 	addi	r3,r3,6500
 1001060:	18800017 	ldw	r2,0(r3)
 1001064:	e0bffa15 	stw	r2,-24(fp)
 1001068:	18800117 	ldw	r2,4(r3)
 100106c:	e0bffb15 	stw	r2,-20(fp)
 1001070:	18800217 	ldw	r2,8(r3)
 1001074:	e0bffc15 	stw	r2,-16(fp)
 1001078:	18800317 	ldw	r2,12(r3)
 100107c:	e0bffd15 	stw	r2,-12(fp)
 1001080:	1880040b 	ldhu	r2,16(r3)
 1001084:	e0bffe0d 	sth	r2,-8(fp)
	sendInstruction(server);
 1001088:	e13fff17 	ldw	r4,-4(fp)
 100108c:	e17ffa04 	addi	r5,fp,-24
 1001090:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>

	printf("Done!\n");
 1001094:	01004074 	movhi	r4,257
 1001098:	21065704 	addi	r4,r4,6492
 100109c:	10053ec0 	call	10053ec <puts>
}
 10010a0:	e037883a 	mov	sp,fp
 10010a4:	dfc00117 	ldw	ra,4(sp)
 10010a8:	df000017 	ldw	fp,0(sp)
 10010ac:	dec00204 	addi	sp,sp,8
 10010b0:	f800283a 	ret

010010b4 <_ZN4WiFi7receiveEPhPj>:
	char rst[] = "AT+RST";
	sendInstruction(stop);
	sendInstruction(rst);
}

void WiFi::receive(unsigned char* data, unsigned int *size) {
 10010b4:	defff604 	addi	sp,sp,-40
 10010b8:	dfc00915 	stw	ra,36(sp)
 10010bc:	df000815 	stw	fp,32(sp)
 10010c0:	dc000715 	stw	r16,28(sp)
 10010c4:	df000704 	addi	fp,sp,28
 10010c8:	e13ffd15 	stw	r4,-12(fp)
 10010cc:	e17ffe15 	stw	r5,-8(fp)
 10010d0:	e1bfff15 	stw	r6,-4(fp)
	char c;
	unsigned int i;
	i=0;
 10010d4:	e03ffb15 	stw	zero,-20(fp)

	do {
		c = getc(file);
 10010d8:	e0bffd17 	ldw	r2,-12(fp)
 10010dc:	11000017 	ldw	r4,0(r2)
 10010e0:	100477c0 	call	100477c <getc>
 10010e4:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 10010e8:	e0bffb17 	ldw	r2,-20(fp)
 10010ec:	10800044 	addi	r2,r2,1
 10010f0:	e0bffb15 	stw	r2,-20(fp)
void WiFi::receive(unsigned char* data, unsigned int *size) {
	char c;
	unsigned int i;
	i=0;

	do {
 10010f4:	e0bffc07 	ldb	r2,-16(fp)
 10010f8:	10800ae0 	cmpeqi	r2,r2,43
 10010fc:	1000031e 	bne	r2,zero,100110c <_ZN4WiFi7receiveEPhPj+0x58>
 1001100:	e0bffb17 	ldw	r2,-20(fp)
 1001104:	10810030 	cmpltui	r2,r2,1024
 1001108:	103ff31e 	bne	r2,zero,10010d8 <_ZN4WiFi7receiveEPhPj+0x24>
		c = getc(file);
		i=i+1;
	} while (c != '+' and i<1024);
	do {
		c = getc(file);
 100110c:	e0bffd17 	ldw	r2,-12(fp)
 1001110:	11000017 	ldw	r4,0(r2)
 1001114:	100477c0 	call	100477c <getc>
 1001118:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 100111c:	e0bffb17 	ldw	r2,-20(fp)
 1001120:	10800044 	addi	r2,r2,1
 1001124:	e0bffb15 	stw	r2,-20(fp)

	do {
		c = getc(file);
		i=i+1;
	} while (c != '+' and i<1024);
	do {
 1001128:	e0bffc07 	ldb	r2,-16(fp)
 100112c:	10800b20 	cmpeqi	r2,r2,44
 1001130:	1000031e 	bne	r2,zero,1001140 <_ZN4WiFi7receiveEPhPj+0x8c>
 1001134:	e0bffb17 	ldw	r2,-20(fp)
 1001138:	10810030 	cmpltui	r2,r2,1024
 100113c:	103ff31e 	bne	r2,zero,100110c <_ZN4WiFi7receiveEPhPj+0x58>
		c = getc(file);
		i=i+1;
	} while (c != ',' and i<1024);

	do {
		c = getc(file);
 1001140:	e0bffd17 	ldw	r2,-12(fp)
 1001144:	11000017 	ldw	r4,0(r2)
 1001148:	100477c0 	call	100477c <getc>
 100114c:	e0bffc05 	stb	r2,-16(fp)
		i=1+i;
 1001150:	e0bffb17 	ldw	r2,-20(fp)
 1001154:	10800044 	addi	r2,r2,1
 1001158:	e0bffb15 	stw	r2,-20(fp)
	do {
		c = getc(file);
		i=i+1;
	} while (c != ',' and i<1024);

	do {
 100115c:	e0bffc07 	ldb	r2,-16(fp)
 1001160:	10800b20 	cmpeqi	r2,r2,44
 1001164:	1000031e 	bne	r2,zero,1001174 <_ZN4WiFi7receiveEPhPj+0xc0>
 1001168:	e0bffb17 	ldw	r2,-20(fp)
 100116c:	10810030 	cmpltui	r2,r2,1024
 1001170:	103ff31e 	bne	r2,zero,1001140 <_ZN4WiFi7receiveEPhPj+0x8c>
		c = getc(file);
		i=1+i;
	} while (c != ',' and i<1024);

	*size = 0;
 1001174:	e0bfff17 	ldw	r2,-4(fp)
 1001178:	10000015 	stw	zero,0(r2)

	c = getc(file);
 100117c:	e0bffd17 	ldw	r2,-12(fp)
 1001180:	11000017 	ldw	r4,0(r2)
 1001184:	100477c0 	call	100477c <getc>
 1001188:	e0bffc05 	stb	r2,-16(fp)

	while (c != ':' and i<1024) {
 100118c:	00001106 	br	10011d4 <_ZN4WiFi7receiveEPhPj+0x120>
		*size = *size * 10 + c - '0';
 1001190:	e0bfff17 	ldw	r2,-4(fp)
 1001194:	11000017 	ldw	r4,0(r2)
 1001198:	01400284 	movi	r5,10
 100119c:	1002f0c0 	call	1002f0c <__mulsi3>
 10011a0:	1007883a 	mov	r3,r2
 10011a4:	e0bffc07 	ldb	r2,-16(fp)
 10011a8:	1885883a 	add	r2,r3,r2
 10011ac:	10fff404 	addi	r3,r2,-48
 10011b0:	e0bfff17 	ldw	r2,-4(fp)
 10011b4:	10c00015 	stw	r3,0(r2)
		c = getc(file);
 10011b8:	e0bffd17 	ldw	r2,-12(fp)
 10011bc:	11000017 	ldw	r4,0(r2)
 10011c0:	100477c0 	call	100477c <getc>
 10011c4:	e0bffc05 	stb	r2,-16(fp)
		i=i+1;
 10011c8:	e0bffb17 	ldw	r2,-20(fp)
 10011cc:	10800044 	addi	r2,r2,1
 10011d0:	e0bffb15 	stw	r2,-20(fp)

	*size = 0;

	c = getc(file);

	while (c != ':' and i<1024) {
 10011d4:	e0bffc07 	ldb	r2,-16(fp)
 10011d8:	10800ea0 	cmpeqi	r2,r2,58
 10011dc:	1000031e 	bne	r2,zero,10011ec <_ZN4WiFi7receiveEPhPj+0x138>
 10011e0:	e0bffb17 	ldw	r2,-20(fp)
 10011e4:	10810030 	cmpltui	r2,r2,1024
 10011e8:	103fe91e 	bne	r2,zero,1001190 <_ZN4WiFi7receiveEPhPj+0xdc>
		*size = *size * 10 + c - '0';
		c = getc(file);
		i=i+1;
	}
	unsigned int j,max;
	j = 0;
 10011ec:	e03ffa15 	stw	zero,-24(fp)
	max= *size;
 10011f0:	e0bfff17 	ldw	r2,-4(fp)
 10011f4:	10800017 	ldw	r2,0(r2)
 10011f8:	e0bff915 	stw	r2,-28(fp)
	if(max>2048){
 10011fc:	e0bff917 	ldw	r2,-28(fp)
 1001200:	10820070 	cmpltui	r2,r2,2049
 1001204:	1000021e 	bne	r2,zero,1001210 <_ZN4WiFi7receiveEPhPj+0x15c>
		max = 2048;
 1001208:	00820004 	movi	r2,2048
 100120c:	e0bff915 	stw	r2,-28(fp)
	}
	printf("Size final = %d\n",max);
 1001210:	01004074 	movhi	r4,257
 1001214:	21065e04 	addi	r4,r4,6520
 1001218:	e17ff917 	ldw	r5,-28(fp)
 100121c:	10052b00 	call	10052b0 <printf>
	for(j=0;j < max;j+=1){
 1001220:	e03ffa15 	stw	zero,-24(fp)
 1001224:	00000a06 	br	1001250 <_ZN4WiFi7receiveEPhPj+0x19c>
		//printf("Size: %d\n",*size);
		data[j] = getc(file);
 1001228:	e0fffa17 	ldw	r3,-24(fp)
 100122c:	e0bffe17 	ldw	r2,-8(fp)
 1001230:	18a1883a 	add	r16,r3,r2
 1001234:	e0bffd17 	ldw	r2,-12(fp)
 1001238:	11000017 	ldw	r4,0(r2)
 100123c:	100477c0 	call	100477c <getc>
 1001240:	80800005 	stb	r2,0(r16)
	max= *size;
	if(max>2048){
		max = 2048;
	}
	printf("Size final = %d\n",max);
	for(j=0;j < max;j+=1){
 1001244:	e0bffa17 	ldw	r2,-24(fp)
 1001248:	10800044 	addi	r2,r2,1
 100124c:	e0bffa15 	stw	r2,-24(fp)
 1001250:	e0fffa17 	ldw	r3,-24(fp)
 1001254:	e0bff917 	ldw	r2,-28(fp)
 1001258:	18bff336 	bltu	r3,r2,1001228 <_ZN4WiFi7receiveEPhPj+0x174>
	//Finalmente. Função getc(file) estava mudando o valor de *size durante o loop
	//Alocar as condições de laço para j,max antes de iniciar resolveu

	//Outro problema: transmissão do audio / imagem: As vezes o size explode por algum motivo
	//Então coloquei um valor máximo para max (2048 ok? )
	data[j] = '\0';
 100125c:	e0bffa17 	ldw	r2,-24(fp)
 1001260:	e0fffe17 	ldw	r3,-8(fp)
 1001264:	10c5883a 	add	r2,r2,r3
 1001268:	10000005 	stb	zero,0(r2)
}
 100126c:	e037883a 	mov	sp,fp
 1001270:	dfc00217 	ldw	ra,8(sp)
 1001274:	df000117 	ldw	fp,4(sp)
 1001278:	dc000017 	ldw	r16,0(sp)
 100127c:	dec00304 	addi	sp,sp,12
 1001280:	f800283a 	ret

01001284 <_ZN4WiFi6configEPcS0_>:
	if (wifi == NULL)
		wifi = new WiFi();
	return wifi;
}

void WiFi::config(char* name, char* password) {
 1001284:	deffec04 	addi	sp,sp,-80
 1001288:	dfc01315 	stw	ra,76(sp)
 100128c:	df001215 	stw	fp,72(sp)
 1001290:	dc001115 	stw	r16,68(sp)
 1001294:	df001104 	addi	fp,sp,68
 1001298:	e13ffd15 	stw	r4,-12(fp)
 100129c:	e17ffe15 	stw	r5,-8(fp)
 10012a0:	e1bfff15 	stw	r6,-4(fp)
	printf("Configuring AP, wait......\n");
 10012a4:	01004074 	movhi	r4,257
 10012a8:	21066304 	addi	r4,r4,6540
 10012ac:	10053ec0 	call	10053ec <puts>
	//char rst[] = "AT+RST";
	//sendInstruction(rst);

	char modeConfig[] = "AT+CWMODE=2";
 10012b0:	00c04074 	movhi	r3,257
 10012b4:	18c66d04 	addi	r3,r3,6580
 10012b8:	18800017 	ldw	r2,0(r3)
 10012bc:	e0bff115 	stw	r2,-60(fp)
 10012c0:	18800117 	ldw	r2,4(r3)
 10012c4:	e0bff215 	stw	r2,-56(fp)
 10012c8:	18800217 	ldw	r2,8(r3)
 10012cc:	e0bff315 	stw	r2,-52(fp)
	sendInstruction(modeConfig);
 10012d0:	e17ff104 	addi	r5,fp,-60
 10012d4:	e13ffd17 	ldw	r4,-12(fp)
 10012d8:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>

	char *apConfig;
	int apSize = 18 + strlen(name) + strlen(password);
 10012dc:	e13ffe17 	ldw	r4,-8(fp)
 10012e0:	1005c680 	call	1005c68 <strlen>
 10012e4:	1021883a 	mov	r16,r2
 10012e8:	e13fff17 	ldw	r4,-4(fp)
 10012ec:	1005c680 	call	1005c68 <strlen>
 10012f0:	8085883a 	add	r2,r16,r2
 10012f4:	10800484 	addi	r2,r2,18
 10012f8:	e0bfef15 	stw	r2,-68(fp)
	apConfig = new char[apSize];
 10012fc:	e13fef17 	ldw	r4,-68(fp)
 1001300:	10016a40 	call	10016a4 <_Znam>
 1001304:	e0bff015 	stw	r2,-64(fp)
	strcpy(apConfig, "AT+CWSAP=\"");
 1001308:	e0fff017 	ldw	r3,-64(fp)
 100130c:	00801044 	movi	r2,65
 1001310:	18800005 	stb	r2,0(r3)
 1001314:	00801504 	movi	r2,84
 1001318:	18800045 	stb	r2,1(r3)
 100131c:	00800ac4 	movi	r2,43
 1001320:	18800085 	stb	r2,2(r3)
 1001324:	008010c4 	movi	r2,67
 1001328:	188000c5 	stb	r2,3(r3)
 100132c:	008015c4 	movi	r2,87
 1001330:	18800105 	stb	r2,4(r3)
 1001334:	008014c4 	movi	r2,83
 1001338:	18800145 	stb	r2,5(r3)
 100133c:	00801044 	movi	r2,65
 1001340:	18800185 	stb	r2,6(r3)
 1001344:	00801404 	movi	r2,80
 1001348:	188001c5 	stb	r2,7(r3)
 100134c:	00800f44 	movi	r2,61
 1001350:	18800205 	stb	r2,8(r3)
 1001354:	00800884 	movi	r2,34
 1001358:	18800245 	stb	r2,9(r3)
 100135c:	18000285 	stb	zero,10(r3)
	strcat(apConfig, name);
 1001360:	e13ff017 	ldw	r4,-64(fp)
 1001364:	e17ffe17 	ldw	r5,-8(fp)
 1001368:	1005b4c0 	call	1005b4c <strcat>
	strcat(apConfig, "\",\"");
 100136c:	e13ff017 	ldw	r4,-64(fp)
 1001370:	01404074 	movhi	r5,257
 1001374:	29466a04 	addi	r5,r5,6568
 1001378:	1005b4c0 	call	1005b4c <strcat>
	strcat(apConfig, password);
 100137c:	e13ff017 	ldw	r4,-64(fp)
 1001380:	e17fff17 	ldw	r5,-4(fp)
 1001384:	1005b4c0 	call	1005b4c <strcat>
	strcat(apConfig, "\",5,3");
 1001388:	e13ff017 	ldw	r4,-64(fp)
 100138c:	01404074 	movhi	r5,257
 1001390:	29466b04 	addi	r5,r5,6572
 1001394:	1005b4c0 	call	1005b4c <strcat>
	sendInstruction(apConfig);
 1001398:	e13ffd17 	ldw	r4,-12(fp)
 100139c:	e17ff017 	ldw	r5,-64(fp)
 10013a0:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>

	char mux[] = "AT+CIPMUX=1";
 10013a4:	00c04074 	movhi	r3,257
 10013a8:	18c67004 	addi	r3,r3,6592
 10013ac:	18800017 	ldw	r2,0(r3)
 10013b0:	e0bff415 	stw	r2,-48(fp)
 10013b4:	18800117 	ldw	r2,4(r3)
 10013b8:	e0bff515 	stw	r2,-44(fp)
 10013bc:	18800217 	ldw	r2,8(r3)
 10013c0:	e0bff615 	stw	r2,-40(fp)
	sendInstruction(mux);
 10013c4:	e17ff404 	addi	r5,fp,-48
 10013c8:	e13ffd17 	ldw	r4,-12(fp)
 10013cc:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>

	char ip[] = "AT+CIPAP=\"192.168.4.1\"";
 10013d0:	00c04074 	movhi	r3,257
 10013d4:	18c67304 	addi	r3,r3,6604
 10013d8:	18800017 	ldw	r2,0(r3)
 10013dc:	e0bff715 	stw	r2,-36(fp)
 10013e0:	18800117 	ldw	r2,4(r3)
 10013e4:	e0bff815 	stw	r2,-32(fp)
 10013e8:	18800217 	ldw	r2,8(r3)
 10013ec:	e0bff915 	stw	r2,-28(fp)
 10013f0:	18800317 	ldw	r2,12(r3)
 10013f4:	e0bffa15 	stw	r2,-24(fp)
 10013f8:	18800417 	ldw	r2,16(r3)
 10013fc:	e0bffb15 	stw	r2,-20(fp)
 1001400:	1880050b 	ldhu	r2,20(r3)
 1001404:	e0bffc0d 	sth	r2,-16(fp)
 1001408:	18800583 	ldbu	r2,22(r3)
 100140c:	e0bffc85 	stb	r2,-14(fp)
	sendInstruction(ip);
 1001410:	e17ff704 	addi	r5,fp,-36
 1001414:	e13ffd17 	ldw	r4,-12(fp)
 1001418:	1000e440 	call	1000e44 <_ZN4WiFi15sendInstructionEPc>

	printf("Done!\n");
 100141c:	01004074 	movhi	r4,257
 1001420:	21065704 	addi	r4,r4,6492
 1001424:	10053ec0 	call	10053ec <puts>
}
 1001428:	e037883a 	mov	sp,fp
 100142c:	dfc00217 	ldw	ra,8(sp)
 1001430:	df000117 	ldw	fp,4(sp)
 1001434:	dc000017 	ldw	r16,0(sp)
 1001438:	dec00304 	addi	sp,sp,12
 100143c:	f800283a 	ret

01001440 <_ZN4WiFi12getSingletonEv>:
/* public */
WiFi::~WiFi() {
	fclose(file);
}

WiFi *WiFi::getSingleton() {
 1001440:	deffe504 	addi	sp,sp,-108
 1001444:	dfc01a15 	stw	ra,104(sp)
 1001448:	df001915 	stw	fp,100(sp)
 100144c:	ddc01815 	stw	r23,96(sp)
 1001450:	dd801715 	stw	r22,92(sp)
 1001454:	dd401615 	stw	r21,88(sp)
 1001458:	dd001515 	stw	r20,84(sp)
 100145c:	dcc01415 	stw	r19,80(sp)
 1001460:	dc801315 	stw	r18,76(sp)
 1001464:	dc401215 	stw	r17,72(sp)
 1001468:	dc001115 	stw	r16,68(sp)
 100146c:	df001104 	addi	fp,sp,68
 1001470:	00804034 	movhi	r2,256
 1001474:	10879704 	addi	r2,r2,7772
 1001478:	e0bff515 	stw	r2,-44(fp)
 100147c:	00804074 	movhi	r2,257
 1001480:	1085a704 	addi	r2,r2,5788
 1001484:	e0bff615 	stw	r2,-40(fp)
 1001488:	e0bff704 	addi	r2,fp,-36
 100148c:	e0ffef04 	addi	r3,fp,-68
 1001490:	10c00015 	stw	r3,0(r2)
 1001494:	00c04034 	movhi	r3,256
 1001498:	18c53a04 	addi	r3,r3,5352
 100149c:	10c00115 	stw	r3,4(r2)
 10014a0:	16c00215 	stw	sp,8(r2)
 10014a4:	e13fef04 	addi	r4,fp,-68
 10014a8:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
	if (wifi == NULL)
 10014ac:	d0a6ea17 	ldw	r2,-25688(gp)
 10014b0:	1004c03a 	cmpne	r2,r2,zero
 10014b4:	1000191e 	bne	r2,zero,100151c <_ZN4WiFi12getSingletonEv+0xdc>
		wifi = new WiFi();
 10014b8:	00bfffc4 	movi	r2,-1
 10014bc:	e0bff015 	stw	r2,-64(fp)
 10014c0:	01000104 	movi	r4,4
 10014c4:	10024580 	call	1002458 <_Znwm>
 10014c8:	e0bffd15 	stw	r2,-12(fp)
 10014cc:	00800044 	movi	r2,1
 10014d0:	e0bff015 	stw	r2,-64(fp)
 10014d4:	e13ffd17 	ldw	r4,-12(fp)
 10014d8:	1000f700 	call	1000f70 <_ZN4WiFiC1Ev>
 10014dc:	e0bffd17 	ldw	r2,-12(fp)
 10014e0:	d0a6ea15 	stw	r2,-25688(gp)
 10014e4:	00000d06 	br	100151c <_ZN4WiFi12getSingletonEv+0xdc>
 10014e8:	e7001104 	addi	fp,fp,68
 10014ec:	e0fff117 	ldw	r3,-60(fp)
 10014f0:	e0ffff15 	stw	r3,-4(fp)
 10014f4:	e0bfff17 	ldw	r2,-4(fp)
 10014f8:	e0bffc15 	stw	r2,-16(fp)
 10014fc:	e13ffd17 	ldw	r4,-12(fp)
 1001500:	10017440 	call	1001744 <_ZdlPv>
 1001504:	e0fffc17 	ldw	r3,-16(fp)
 1001508:	e0ffff15 	stw	r3,-4(fp)
 100150c:	00bfffc4 	movi	r2,-1
 1001510:	e0bff015 	stw	r2,-64(fp)
 1001514:	e13fff17 	ldw	r4,-4(fp)
 1001518:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
	return wifi;
 100151c:	d0a6ea17 	ldw	r2,-25688(gp)
 1001520:	e0bffe15 	stw	r2,-8(fp)
 1001524:	e13fef04 	addi	r4,fp,-68
 1001528:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
}
 100152c:	e0bffe17 	ldw	r2,-8(fp)
 1001530:	e037883a 	mov	sp,fp
 1001534:	dfc00917 	ldw	ra,36(sp)
 1001538:	df000817 	ldw	fp,32(sp)
 100153c:	ddc00717 	ldw	r23,28(sp)
 1001540:	dd800617 	ldw	r22,24(sp)
 1001544:	dd400517 	ldw	r21,20(sp)
 1001548:	dd000417 	ldw	r20,16(sp)
 100154c:	dcc00317 	ldw	r19,12(sp)
 1001550:	dc800217 	ldw	r18,8(sp)
 1001554:	dc400117 	ldw	r17,4(sp)
 1001558:	dc000017 	ldw	r16,0(sp)
 100155c:	dec00a04 	addi	sp,sp,40
 1001560:	f800283a 	ret

01001564 <_ZN4WiFiD1Ev>:

/* static */
WiFi *WiFi::wifi = NULL;

/* public */
WiFi::~WiFi() {
 1001564:	defffd04 	addi	sp,sp,-12
 1001568:	dfc00215 	stw	ra,8(sp)
 100156c:	df000115 	stw	fp,4(sp)
 1001570:	df000104 	addi	fp,sp,4
 1001574:	e13fff15 	stw	r4,-4(fp)
	fclose(file);
 1001578:	e0bfff17 	ldw	r2,-4(fp)
 100157c:	11000017 	ldw	r4,0(r2)
 1001580:	10035b40 	call	10035b4 <fclose>
}
 1001584:	e037883a 	mov	sp,fp
 1001588:	dfc00117 	ldw	ra,4(sp)
 100158c:	df000017 	ldw	fp,0(sp)
 1001590:	dec00204 	addi	sp,sp,8
 1001594:	f800283a 	ret

01001598 <_ZN4WiFiD2Ev>:

/* static */
WiFi *WiFi::wifi = NULL;

/* public */
WiFi::~WiFi() {
 1001598:	defffd04 	addi	sp,sp,-12
 100159c:	dfc00215 	stw	ra,8(sp)
 10015a0:	df000115 	stw	fp,4(sp)
 10015a4:	df000104 	addi	fp,sp,4
 10015a8:	e13fff15 	stw	r4,-4(fp)
	fclose(file);
 10015ac:	e0bfff17 	ldw	r2,-4(fp)
 10015b0:	11000017 	ldw	r4,0(r2)
 10015b4:	10035b40 	call	10035b4 <fclose>
}
 10015b8:	e037883a 	mov	sp,fp
 10015bc:	dfc00117 	ldw	ra,4(sp)
 10015c0:	df000017 	ldw	fp,0(sp)
 10015c4:	dec00204 	addi	sp,sp,8
 10015c8:	f800283a 	ret

010015cc <main>:
#include "system.h"
#include "app.h"

int main()
 10015cc:	deffe604 	addi	sp,sp,-104
 10015d0:	dfc01915 	stw	ra,100(sp)
 10015d4:	df001815 	stw	fp,96(sp)
 10015d8:	ddc01715 	stw	r23,92(sp)
 10015dc:	dd801615 	stw	r22,88(sp)
 10015e0:	dd401515 	stw	r21,84(sp)
 10015e4:	dd001415 	stw	r20,80(sp)
 10015e8:	dcc01315 	stw	r19,76(sp)
 10015ec:	dc801215 	stw	r18,72(sp)
 10015f0:	dc401115 	stw	r17,68(sp)
 10015f4:	dc001015 	stw	r16,64(sp)
 10015f8:	df001004 	addi	fp,sp,64
 10015fc:	00804034 	movhi	r2,256
 1001600:	10879704 	addi	r2,r2,7772
 1001604:	e0bff715 	stw	r2,-36(fp)
 1001608:	00804074 	movhi	r2,257
 100160c:	1085a884 	addi	r2,r2,5794
 1001610:	e0bff815 	stw	r2,-32(fp)
 1001614:	e0bff904 	addi	r2,fp,-28
 1001618:	e0fff004 	addi	r3,fp,-64
 100161c:	10c00015 	stw	r3,0(r2)
 1001620:	00c04034 	movhi	r3,256
 1001624:	18c59b04 	addi	r3,r3,5740
 1001628:	10c00115 	stw	r3,4(r2)
 100162c:	16c00215 	stw	sp,8(r2)
 1001630:	e13ff104 	addi	r4,fp,-60
 1001634:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
{
	App app;
 1001638:	00bfffc4 	movi	r2,-1
 100163c:	e0bff215 	stw	r2,-56(fp)
 1001640:	e13ff004 	addi	r4,fp,-64
 1001644:	10007100 	call	1000710 <_ZN3AppC1Ev>

	app.setup();
 1001648:	00800044 	movi	r2,1
 100164c:	e0bff215 	stw	r2,-56(fp)
 1001650:	e13ff004 	addi	r4,fp,-64
 1001654:	100064c0 	call	100064c <_ZN3App5setupEv>
	while(1){

		app.run();
 1001658:	00800044 	movi	r2,1
 100165c:	e0bff215 	stw	r2,-56(fp)
 1001660:	e13ff004 	addi	r4,fp,-64
 1001664:	10003900 	call	1000390 <_ZN3App3runEv>
int main()
{
	App app;

	app.setup();
	while(1){
 1001668:	003ffb06 	br	1001658 <main+0x8c>
 100166c:	e7001004 	addi	fp,fp,64
 1001670:	e0bff317 	ldw	r2,-52(fp)
 1001674:	e0bfff15 	stw	r2,-4(fp)
 1001678:	e0ffff17 	ldw	r3,-4(fp)
 100167c:	e0fffe15 	stw	r3,-8(fp)

		app.run();
	}

	return 0;
 1001680:	e03ff215 	stw	zero,-56(fp)
 1001684:	e13ff004 	addi	r4,fp,-64
 1001688:	10006a80 	call	10006a8 <_ZN3AppD1Ev>
 100168c:	e0bffe17 	ldw	r2,-8(fp)
 1001690:	e0bfff15 	stw	r2,-4(fp)
 1001694:	00bfffc4 	movi	r2,-1
 1001698:	e0bff215 	stw	r2,-56(fp)
 100169c:	e13fff17 	ldw	r4,-4(fp)
 10016a0:	10032100 	call	1003210 <_Unwind_SjLj_Resume>

010016a4 <_Znam>:
 10016a4:	deffee04 	addi	sp,sp,-72
 10016a8:	00804034 	movhi	r2,256
 10016ac:	10879704 	addi	r2,r2,7772
 10016b0:	d8800615 	stw	r2,24(sp)
 10016b4:	00c04074 	movhi	r3,257
 10016b8:	18c5aa04 	addi	r3,r3,5800
 10016bc:	00804034 	movhi	r2,256
 10016c0:	1085c804 	addi	r2,r2,5920
 10016c4:	d9000e15 	stw	r4,56(sp)
 10016c8:	d809883a 	mov	r4,sp
 10016cc:	d8800915 	stw	r2,36(sp)
 10016d0:	dfc01115 	stw	ra,68(sp)
 10016d4:	df001015 	stw	fp,64(sp)
 10016d8:	ddc00f15 	stw	r23,60(sp)
 10016dc:	d8c00715 	stw	r3,28(sp)
 10016e0:	dec00815 	stw	sp,32(sp)
 10016e4:	dec00a15 	stw	sp,40(sp)
 10016e8:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 10016ec:	00800044 	movi	r2,1
 10016f0:	d8800115 	stw	r2,4(sp)
 10016f4:	d9000e17 	ldw	r4,56(sp)
 10016f8:	10024580 	call	1002458 <_Znwm>
 10016fc:	d809883a 	mov	r4,sp
 1001700:	d8800d15 	stw	r2,52(sp)
 1001704:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 1001708:	d8800d17 	ldw	r2,52(sp)
 100170c:	dfc01117 	ldw	ra,68(sp)
 1001710:	df001017 	ldw	fp,64(sp)
 1001714:	ddc00f17 	ldw	r23,60(sp)
 1001718:	dec01204 	addi	sp,sp,72
 100171c:	f800283a 	ret
 1001720:	d8800317 	ldw	r2,12(sp)
 1001724:	00ffffc4 	movi	r3,-1
 1001728:	d9000217 	ldw	r4,8(sp)
 100172c:	10c00226 	beq	r2,r3,1001738 <_Znam+0x94>
 1001730:	d8c00115 	stw	r3,4(sp)
 1001734:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 1001738:	00bfffc4 	movi	r2,-1
 100173c:	d8800115 	stw	r2,4(sp)
 1001740:	1001cdc0 	call	1001cdc <__cxa_call_unexpected>

01001744 <_ZdlPv>:
 1001744:	20000126 	beq	r4,zero,100174c <_ZdlPv+0x8>
 1001748:	1004a381 	jmpi	1004a38 <free>
 100174c:	f800283a 	ret

01001750 <_Z12read_uleb128PKhPj>:
 1001750:	000d883a 	mov	r6,zero
 1001754:	000f883a 	mov	r7,zero
 1001758:	20c00007 	ldb	r3,0(r4)
 100175c:	21000044 	addi	r4,r4,1
 1001760:	18801fcc 	andi	r2,r3,127
 1001764:	1184983a 	sll	r2,r2,r6
 1001768:	318001c4 	addi	r6,r6,7
 100176c:	388eb03a 	or	r7,r7,r2
 1001770:	183ff916 	blt	r3,zero,1001758 <_Z12read_uleb128PKhPj+0x8>
 1001774:	2005883a 	mov	r2,r4
 1001778:	29c00015 	stw	r7,0(r5)
 100177c:	f800283a 	ret

01001780 <_Z12read_sleb128PKhPi>:
 1001780:	000f883a 	mov	r7,zero
 1001784:	0011883a 	mov	r8,zero
 1001788:	20c00007 	ldb	r3,0(r4)
 100178c:	21000044 	addi	r4,r4,1
 1001790:	19803fcc 	andi	r6,r3,255
 1001794:	30801fcc 	andi	r2,r6,127
 1001798:	11c4983a 	sll	r2,r2,r7
 100179c:	39c001c4 	addi	r7,r7,7
 10017a0:	4090b03a 	or	r8,r8,r2
 10017a4:	183ff816 	blt	r3,zero,1001788 <_Z12read_sleb128PKhPi+0x8>
 10017a8:	008007c4 	movi	r2,31
 10017ac:	11c00636 	bltu	r2,r7,10017c8 <_Z12read_sleb128PKhPi+0x48>
 10017b0:	3080100c 	andi	r2,r6,64
 10017b4:	10000426 	beq	r2,zero,10017c8 <_Z12read_sleb128PKhPi+0x48>
 10017b8:	00800044 	movi	r2,1
 10017bc:	11c4983a 	sll	r2,r2,r7
 10017c0:	0085c83a 	sub	r2,zero,r2
 10017c4:	4090b03a 	or	r8,r8,r2
 10017c8:	2005883a 	mov	r2,r4
 10017cc:	2a000015 	stw	r8,0(r5)
 10017d0:	f800283a 	ret

010017d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 10017d4:	28800017 	ldw	r2,0(r5)
 10017d8:	defffb04 	addi	sp,sp,-20
 10017dc:	30c00017 	ldw	r3,0(r6)
 10017e0:	dc400215 	stw	r17,8(sp)
 10017e4:	2823883a 	mov	r17,r5
 10017e8:	11400217 	ldw	r5,8(r2)
 10017ec:	dc800315 	stw	r18,12(sp)
 10017f0:	dc000115 	stw	r16,4(sp)
 10017f4:	dfc00415 	stw	ra,16(sp)
 10017f8:	2021883a 	mov	r16,r4
 10017fc:	d8c00015 	stw	r3,0(sp)
 1001800:	8809883a 	mov	r4,r17
 1001804:	3025883a 	mov	r18,r6
 1001808:	283ee83a 	callr	r5
 100180c:	10803fcc 	andi	r2,r2,255
 1001810:	880b883a 	mov	r5,r17
 1001814:	8009883a 	mov	r4,r16
 1001818:	d80d883a 	mov	r6,sp
 100181c:	01c00044 	movi	r7,1
 1001820:	10000326 	beq	r2,zero,1001830 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 1001824:	d8800017 	ldw	r2,0(sp)
 1001828:	10c00017 	ldw	r3,0(r2)
 100182c:	d8c00015 	stw	r3,0(sp)
 1001830:	80800017 	ldw	r2,0(r16)
 1001834:	10c00417 	ldw	r3,16(r2)
 1001838:	183ee83a 	callr	r3
 100183c:	10803fcc 	andi	r2,r2,255
 1001840:	0007883a 	mov	r3,zero
 1001844:	10000326 	beq	r2,zero,1001854 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 1001848:	d8800017 	ldw	r2,0(sp)
 100184c:	00c00044 	movi	r3,1
 1001850:	90800015 	stw	r2,0(r18)
 1001854:	1805883a 	mov	r2,r3
 1001858:	dfc00417 	ldw	ra,16(sp)
 100185c:	dc800317 	ldw	r18,12(sp)
 1001860:	dc400217 	ldw	r17,8(sp)
 1001864:	dc000117 	ldw	r16,4(sp)
 1001868:	dec00504 	addi	sp,sp,20
 100186c:	f800283a 	ret

01001870 <_Z28read_encoded_value_with_basehjPKhPj>:
 1001870:	defff904 	addi	sp,sp,-28
 1001874:	dc400215 	stw	r17,8(sp)
 1001878:	00801404 	movi	r2,80
 100187c:	24403fcc 	andi	r17,r4,255
 1001880:	dd000515 	stw	r20,20(sp)
 1001884:	dcc00415 	stw	r19,16(sp)
 1001888:	dc800315 	stw	r18,12(sp)
 100188c:	dc000115 	stw	r16,4(sp)
 1001890:	dfc00615 	stw	ra,24(sp)
 1001894:	2025883a 	mov	r18,r4
 1001898:	2829883a 	mov	r20,r5
 100189c:	3021883a 	mov	r16,r6
 10018a0:	3827883a 	mov	r19,r7
 10018a4:	88801826 	beq	r17,r2,1001908 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 10018a8:	88c003cc 	andi	r3,r17,15
 10018ac:	00800304 	movi	r2,12
 10018b0:	10c0012e 	bgeu	r2,r3,10018b8 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 10018b4:	100348c0 	call	100348c <abort>
 10018b8:	18c5883a 	add	r2,r3,r3
 10018bc:	1085883a 	add	r2,r2,r2
 10018c0:	00c04034 	movhi	r3,256
 10018c4:	18c63504 	addi	r3,r3,6356
 10018c8:	10c5883a 	add	r2,r2,r3
 10018cc:	11000017 	ldw	r4,0(r2)
 10018d0:	2000683a 	jmp	r4
 10018d4:	01001944 	movi	r4,101
 10018d8:	01001a2c 	andhi	r4,zero,104
 10018dc:	010019d8 	cmpnei	r4,zero,103
 10018e0:	01001944 	movi	r4,101
 10018e4:	0100199c 	xori	r4,zero,102
 10018e8:	010018b4 	movhi	r4,98
 10018ec:	010018b4 	movhi	r4,98
 10018f0:	010018b4 	movhi	r4,98
 10018f4:	010018b4 	movhi	r4,98
 10018f8:	01001a14 	movui	r4,104
 10018fc:	010019f0 	cmpltui	r4,zero,103
 1001900:	01001944 	movi	r4,101
 1001904:	0100199c 	xori	r4,zero,102
 1001908:	308000c4 	addi	r2,r6,3
 100190c:	00ffff04 	movi	r3,-4
 1001910:	10c4703a 	and	r2,r2,r3
 1001914:	11000017 	ldw	r4,0(r2)
 1001918:	11400104 	addi	r5,r2,4
 100191c:	2805883a 	mov	r2,r5
 1001920:	99000015 	stw	r4,0(r19)
 1001924:	dfc00617 	ldw	ra,24(sp)
 1001928:	dd000517 	ldw	r20,20(sp)
 100192c:	dcc00417 	ldw	r19,16(sp)
 1001930:	dc800317 	ldw	r18,12(sp)
 1001934:	dc400217 	ldw	r17,8(sp)
 1001938:	dc000117 	ldw	r16,4(sp)
 100193c:	dec00704 	addi	sp,sp,28
 1001940:	f800283a 	ret
 1001944:	30800043 	ldbu	r2,1(r6)
 1001948:	30c00083 	ldbu	r3,2(r6)
 100194c:	310000c3 	ldbu	r4,3(r6)
 1001950:	31400003 	ldbu	r5,0(r6)
 1001954:	1004923a 	slli	r2,r2,8
 1001958:	1806943a 	slli	r3,r3,16
 100195c:	2008963a 	slli	r4,r4,24
 1001960:	1144b03a 	or	r2,r2,r5
 1001964:	1886b03a 	or	r3,r3,r2
 1001968:	20c8b03a 	or	r4,r4,r3
 100196c:	31400104 	addi	r5,r6,4
 1001970:	203fea26 	beq	r4,zero,100191c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1001974:	88c01c0c 	andi	r3,r17,112
 1001978:	00800404 	movi	r2,16
 100197c:	18801426 	beq	r3,r2,10019d0 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 1001980:	90803fcc 	andi	r2,r18,255
 1001984:	1080201c 	xori	r2,r2,128
 1001988:	10bfe004 	addi	r2,r2,-128
 100198c:	2509883a 	add	r4,r4,r20
 1001990:	103fe20e 	bge	r2,zero,100191c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 1001994:	21000017 	ldw	r4,0(r4)
 1001998:	003fe006 	br	100191c <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 100199c:	30800043 	ldbu	r2,1(r6)
 10019a0:	31800083 	ldbu	r6,2(r6)
 10019a4:	820000c3 	ldbu	r8,3(r16)
 10019a8:	1004923a 	slli	r2,r2,8
 10019ac:	82400003 	ldbu	r9,0(r16)
 10019b0:	300c943a 	slli	r6,r6,16
 10019b4:	4010963a 	slli	r8,r8,24
 10019b8:	1244b03a 	or	r2,r2,r9
 10019bc:	308cb03a 	or	r6,r6,r2
 10019c0:	4184b03a 	or	r2,r8,r6
 10019c4:	1009883a 	mov	r4,r2
 10019c8:	81400204 	addi	r5,r16,8
 10019cc:	003fe806 	br	1001970 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 10019d0:	8029883a 	mov	r20,r16
 10019d4:	003fea06 	br	1001980 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 10019d8:	30800043 	ldbu	r2,1(r6)
 10019dc:	30c00003 	ldbu	r3,0(r6)
 10019e0:	31400084 	addi	r5,r6,2
 10019e4:	1004923a 	slli	r2,r2,8
 10019e8:	10c8b03a 	or	r4,r2,r3
 10019ec:	003fe006 	br	1001970 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 10019f0:	30800043 	ldbu	r2,1(r6)
 10019f4:	30c00003 	ldbu	r3,0(r6)
 10019f8:	31400084 	addi	r5,r6,2
 10019fc:	1004923a 	slli	r2,r2,8
 1001a00:	10c4b03a 	or	r2,r2,r3
 1001a04:	113fffcc 	andi	r4,r2,65535
 1001a08:	2120001c 	xori	r4,r4,32768
 1001a0c:	21200004 	addi	r4,r4,-32768
 1001a10:	003fd706 	br	1001970 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1001a14:	3009883a 	mov	r4,r6
 1001a18:	d80b883a 	mov	r5,sp
 1001a1c:	10017800 	call	1001780 <_Z12read_sleb128PKhPi>
 1001a20:	d9000017 	ldw	r4,0(sp)
 1001a24:	100b883a 	mov	r5,r2
 1001a28:	003fd106 	br	1001970 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 1001a2c:	3009883a 	mov	r4,r6
 1001a30:	d80b883a 	mov	r5,sp
 1001a34:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 1001a38:	d9000017 	ldw	r4,0(sp)
 1001a3c:	100b883a 	mov	r5,r2
 1001a40:	003fcb06 	br	1001970 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

01001a44 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 1001a44:	deffff04 	addi	sp,sp,-4
 1001a48:	21003fcc 	andi	r4,r4,255
 1001a4c:	00803fc4 	movi	r2,255
 1001a50:	dfc00015 	stw	ra,0(sp)
 1001a54:	20800c26 	beq	r4,r2,1001a88 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001a58:	21001c0c 	andi	r4,r4,112
 1001a5c:	00800804 	movi	r2,32
 1001a60:	20800d26 	beq	r4,r2,1001a98 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 1001a64:	1100070e 	bge	r2,r4,1001a84 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 1001a68:	00801004 	movi	r2,64
 1001a6c:	20801126 	beq	r4,r2,1001ab4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 1001a70:	00801404 	movi	r2,80
 1001a74:	20800426 	beq	r4,r2,1001a88 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001a78:	00800c04 	movi	r2,48
 1001a7c:	20801126 	beq	r4,r2,1001ac4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 1001a80:	100348c0 	call	100348c <abort>
 1001a84:	2000081e 	bne	r4,zero,1001aa8 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 1001a88:	0005883a 	mov	r2,zero
 1001a8c:	dfc00017 	ldw	ra,0(sp)
 1001a90:	dec00104 	addi	sp,sp,4
 1001a94:	f800283a 	ret
 1001a98:	2809883a 	mov	r4,r5
 1001a9c:	dfc00017 	ldw	ra,0(sp)
 1001aa0:	dec00104 	addi	sp,sp,4
 1001aa4:	1002ffc1 	jmpi	1002ffc <_Unwind_GetTextRelBase>
 1001aa8:	00800404 	movi	r2,16
 1001aac:	20bff626 	beq	r4,r2,1001a88 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 1001ab0:	100348c0 	call	100348c <abort>
 1001ab4:	2809883a 	mov	r4,r5
 1001ab8:	dfc00017 	ldw	ra,0(sp)
 1001abc:	dec00104 	addi	sp,sp,4
 1001ac0:	1002fe41 	jmpi	1002fe4 <_Unwind_GetRegionStart>
 1001ac4:	2809883a 	mov	r4,r5
 1001ac8:	dfc00017 	ldw	ra,0(sp)
 1001acc:	dec00104 	addi	sp,sp,4
 1001ad0:	1002ff41 	jmpi	1002ff4 <_Unwind_GetDataRelBase>

01001ad4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 1001ad4:	defffa04 	addi	sp,sp,-24
 1001ad8:	dc800415 	stw	r18,16(sp)
 1001adc:	dc400315 	stw	r17,12(sp)
 1001ae0:	dc000215 	stw	r16,8(sp)
 1001ae4:	dfc00515 	stw	ra,20(sp)
 1001ae8:	2021883a 	mov	r16,r4
 1001aec:	000f883a 	mov	r7,zero
 1001af0:	3023883a 	mov	r17,r6
 1001af4:	2825883a 	mov	r18,r5
 1001af8:	20000226 	beq	r4,zero,1001b04 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 1001afc:	1002fe40 	call	1002fe4 <_Unwind_GetRegionStart>
 1001b00:	100f883a 	mov	r7,r2
 1001b04:	89c00015 	stw	r7,0(r17)
 1001b08:	90c00003 	ldbu	r3,0(r18)
 1001b0c:	800b883a 	mov	r5,r16
 1001b10:	00803fc4 	movi	r2,255
 1001b14:	1c003fcc 	andi	r16,r3,255
 1001b18:	91800044 	addi	r6,r18,1
 1001b1c:	8009883a 	mov	r4,r16
 1001b20:	18802226 	beq	r3,r2,1001bac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 1001b24:	d9800115 	stw	r6,4(sp)
 1001b28:	1001a440 	call	1001a44 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1001b2c:	d9800117 	ldw	r6,4(sp)
 1001b30:	8009883a 	mov	r4,r16
 1001b34:	100b883a 	mov	r5,r2
 1001b38:	89c00104 	addi	r7,r17,4
 1001b3c:	10018700 	call	1001870 <_Z28read_encoded_value_with_basehjPKhPj>
 1001b40:	100d883a 	mov	r6,r2
 1001b44:	30800003 	ldbu	r2,0(r6)
 1001b48:	31c00044 	addi	r7,r6,1
 1001b4c:	00c03fc4 	movi	r3,255
 1001b50:	d80b883a 	mov	r5,sp
 1001b54:	3809883a 	mov	r4,r7
 1001b58:	88800505 	stb	r2,20(r17)
 1001b5c:	10c01b26 	beq	r2,r3,1001bcc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 1001b60:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 1001b64:	100f883a 	mov	r7,r2
 1001b68:	d8800017 	ldw	r2,0(sp)
 1001b6c:	3885883a 	add	r2,r7,r2
 1001b70:	88800315 	stw	r2,12(r17)
 1001b74:	38800003 	ldbu	r2,0(r7)
 1001b78:	39000044 	addi	r4,r7,1
 1001b7c:	d80b883a 	mov	r5,sp
 1001b80:	88800545 	stb	r2,21(r17)
 1001b84:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 1001b88:	d8c00017 	ldw	r3,0(sp)
 1001b8c:	10c9883a 	add	r4,r2,r3
 1001b90:	89000415 	stw	r4,16(r17)
 1001b94:	dfc00517 	ldw	ra,20(sp)
 1001b98:	dc800417 	ldw	r18,16(sp)
 1001b9c:	dc400317 	ldw	r17,12(sp)
 1001ba0:	dc000217 	ldw	r16,8(sp)
 1001ba4:	dec00604 	addi	sp,sp,24
 1001ba8:	f800283a 	ret
 1001bac:	89c00115 	stw	r7,4(r17)
 1001bb0:	30800003 	ldbu	r2,0(r6)
 1001bb4:	31c00044 	addi	r7,r6,1
 1001bb8:	00c03fc4 	movi	r3,255
 1001bbc:	d80b883a 	mov	r5,sp
 1001bc0:	3809883a 	mov	r4,r7
 1001bc4:	88800505 	stb	r2,20(r17)
 1001bc8:	10ffe51e 	bne	r2,r3,1001b60 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 1001bcc:	88000315 	stw	zero,12(r17)
 1001bd0:	003fe806 	br	1001b74 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

01001bd4 <_Z15get_ttype_entryP16lsda_header_infoj>:
 1001bd4:	defffe04 	addi	sp,sp,-8
 1001bd8:	dfc00115 	stw	ra,4(sp)
 1001bdc:	21c00503 	ldbu	r7,20(r4)
 1001be0:	00803fc4 	movi	r2,255
 1001be4:	38801a26 	beq	r7,r2,1001c50 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 1001be8:	38c001cc 	andi	r3,r7,7
 1001bec:	00800084 	movi	r2,2
 1001bf0:	18801326 	beq	r3,r2,1001c40 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 1001bf4:	10c0050e 	bge	r2,r3,1001c0c <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 1001bf8:	008000c4 	movi	r2,3
 1001bfc:	18800426 	beq	r3,r2,1001c10 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 1001c00:	00800104 	movi	r2,4
 1001c04:	18801026 	beq	r3,r2,1001c48 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 1001c08:	100348c0 	call	100348c <abort>
 1001c0c:	183ffe1e 	bne	r3,zero,1001c08 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 1001c10:	2945883a 	add	r2,r5,r5
 1001c14:	1085883a 	add	r2,r2,r2
 1001c18:	21800317 	ldw	r6,12(r4)
 1001c1c:	21400217 	ldw	r5,8(r4)
 1001c20:	3809883a 	mov	r4,r7
 1001c24:	308dc83a 	sub	r6,r6,r2
 1001c28:	d80f883a 	mov	r7,sp
 1001c2c:	10018700 	call	1001870 <_Z28read_encoded_value_with_basehjPKhPj>
 1001c30:	d8800017 	ldw	r2,0(sp)
 1001c34:	dfc00117 	ldw	ra,4(sp)
 1001c38:	dec00204 	addi	sp,sp,8
 1001c3c:	f800283a 	ret
 1001c40:	2945883a 	add	r2,r5,r5
 1001c44:	003ff406 	br	1001c18 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 1001c48:	280490fa 	slli	r2,r5,3
 1001c4c:	003ff206 	br	1001c18 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 1001c50:	0005883a 	mov	r2,zero
 1001c54:	003ff006 	br	1001c18 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

01001c58 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 1001c58:	20800317 	ldw	r2,12(r4)
 1001c5c:	defffa04 	addi	sp,sp,-24
 1001c60:	dc800415 	stw	r18,16(sp)
 1001c64:	11c5c83a 	sub	r2,r2,r7
 1001c68:	dc400315 	stw	r17,12(sp)
 1001c6c:	dc000215 	stw	r16,8(sp)
 1001c70:	dfc00515 	stw	ra,20(sp)
 1001c74:	2023883a 	mov	r17,r4
 1001c78:	d9800115 	stw	r6,4(sp)
 1001c7c:	2825883a 	mov	r18,r5
 1001c80:	143fffc4 	addi	r16,r2,-1
 1001c84:	8009883a 	mov	r4,r16
 1001c88:	d80b883a 	mov	r5,sp
 1001c8c:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 1001c90:	1021883a 	mov	r16,r2
 1001c94:	d8800017 	ldw	r2,0(sp)
 1001c98:	8809883a 	mov	r4,r17
 1001c9c:	100b883a 	mov	r5,r2
 1001ca0:	10000826 	beq	r2,zero,1001cc4 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 1001ca4:	1001bd40 	call	1001bd4 <_Z15get_ttype_entryP16lsda_header_infoj>
 1001ca8:	1009883a 	mov	r4,r2
 1001cac:	900b883a 	mov	r5,r18
 1001cb0:	d9800104 	addi	r6,sp,4
 1001cb4:	10017d40 	call	10017d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 1001cb8:	10803fcc 	andi	r2,r2,255
 1001cbc:	103ff126 	beq	r2,zero,1001c84 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 1001cc0:	00800044 	movi	r2,1
 1001cc4:	dfc00517 	ldw	ra,20(sp)
 1001cc8:	dc800417 	ldw	r18,16(sp)
 1001ccc:	dc400317 	ldw	r17,12(sp)
 1001cd0:	dc000217 	ldw	r16,8(sp)
 1001cd4:	dec00604 	addi	sp,sp,24
 1001cd8:	f800283a 	ret

01001cdc <__cxa_call_unexpected>:
 1001cdc:	deffe204 	addi	sp,sp,-120
 1001ce0:	00804034 	movhi	r2,256
 1001ce4:	10879704 	addi	r2,r2,7772
 1001ce8:	00c04074 	movhi	r3,257
 1001cec:	18c5af04 	addi	r3,r3,5820
 1001cf0:	d8800c15 	stw	r2,48(sp)
 1001cf4:	d9001815 	stw	r4,96(sp)
 1001cf8:	00804034 	movhi	r2,256
 1001cfc:	10875904 	addi	r2,r2,7524
 1001d00:	d9000604 	addi	r4,sp,24
 1001d04:	d8c00d15 	stw	r3,52(sp)
 1001d08:	dfc01d15 	stw	ra,116(sp)
 1001d0c:	d8800f15 	stw	r2,60(sp)
 1001d10:	df001c15 	stw	fp,112(sp)
 1001d14:	ddc01b15 	stw	r23,108(sp)
 1001d18:	dec00e15 	stw	sp,56(sp)
 1001d1c:	dec01015 	stw	sp,64(sp)
 1001d20:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 1001d24:	d9001817 	ldw	r4,96(sp)
 1001d28:	1002a180 	call	1002a18 <__cxa_begin_catch>
 1001d2c:	d8801817 	ldw	r2,96(sp)
 1001d30:	10fff504 	addi	r3,r2,-44
 1001d34:	18800917 	ldw	r2,36(r3)
 1001d38:	19400617 	ldw	r5,24(r3)
 1001d3c:	19000217 	ldw	r4,8(r3)
 1001d40:	d8800215 	stw	r2,8(sp)
 1001d44:	18800817 	ldw	r2,32(r3)
 1001d48:	18c00317 	ldw	r3,12(r3)
 1001d4c:	d9401615 	stw	r5,88(sp)
 1001d50:	d8801715 	stw	r2,92(sp)
 1001d54:	00800084 	movi	r2,2
 1001d58:	d8c01515 	stw	r3,84(sp)
 1001d5c:	d8800715 	stw	r2,28(sp)
 1001d60:	10024300 	call	1002430 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 1001d64:	d8800717 	ldw	r2,28(sp)
 1001d68:	d8c00817 	ldw	r3,32(sp)
 1001d6c:	d8801a15 	stw	r2,104(sp)
 1001d70:	d9401a17 	ldw	r5,104(sp)
 1001d74:	00800044 	movi	r2,1
 1001d78:	d8c01915 	stw	r3,100(sp)
 1001d7c:	28800826 	beq	r5,r2,1001da0 <__cxa_call_unexpected+0xc4>
 1001d80:	d8000715 	stw	zero,28(sp)
 1001d84:	10029740 	call	1002974 <__cxa_end_catch>
 1001d88:	d8000715 	stw	zero,28(sp)
 1001d8c:	10029740 	call	1002974 <__cxa_end_catch>
 1001d90:	d9001917 	ldw	r4,100(sp)
 1001d94:	00bfffc4 	movi	r2,-1
 1001d98:	d8800715 	stw	r2,28(sp)
 1001d9c:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 1001da0:	d9001917 	ldw	r4,100(sp)
 1001da4:	1002a180 	call	1002a18 <__cxa_begin_catch>
 1001da8:	100233c0 	call	100233c <__cxa_get_globals_fast>
 1001dac:	10800017 	ldw	r2,0(r2)
 1001db0:	d8c01a17 	ldw	r3,104(sp)
 1001db4:	0009883a 	mov	r4,zero
 1001db8:	11401004 	addi	r5,r2,64
 1001dbc:	d9401315 	stw	r5,76(sp)
 1001dc0:	d8801415 	stw	r2,80(sp)
 1001dc4:	d8c00715 	stw	r3,28(sp)
 1001dc8:	d9401717 	ldw	r5,92(sp)
 1001dcc:	d80d883a 	mov	r6,sp
 1001dd0:	1001ad40 	call	1001ad4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1001dd4:	d8801417 	ldw	r2,80(sp)
 1001dd8:	d809883a 	mov	r4,sp
 1001ddc:	d9801317 	ldw	r6,76(sp)
 1001de0:	11400017 	ldw	r5,0(r2)
 1001de4:	d9c01617 	ldw	r7,88(sp)
 1001de8:	1001c580 	call	1001c58 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1001dec:	10803fcc 	andi	r2,r2,255
 1001df0:	1000151e 	bne	r2,zero,1001e48 <__cxa_call_unexpected+0x16c>
 1001df4:	d8c01a17 	ldw	r3,104(sp)
 1001df8:	d809883a 	mov	r4,sp
 1001dfc:	01404074 	movhi	r5,257
 1001e00:	29468804 	addi	r5,r5,6688
 1001e04:	d8c00715 	stw	r3,28(sp)
 1001e08:	000d883a 	mov	r6,zero
 1001e0c:	d9c01617 	ldw	r7,88(sp)
 1001e10:	1001c580 	call	1001c58 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 1001e14:	10803fcc 	andi	r2,r2,255
 1001e18:	10000c26 	beq	r2,zero,1001e4c <__cxa_call_unexpected+0x170>
 1001e1c:	01000104 	movi	r4,4
 1001e20:	10026d00 	call	10026d0 <__cxa_allocate_exception>
 1001e24:	1009883a 	mov	r4,r2
 1001e28:	00804074 	movhi	r2,257
 1001e2c:	10867b04 	addi	r2,r2,6636
 1001e30:	20800015 	stw	r2,0(r4)
 1001e34:	01404074 	movhi	r5,257
 1001e38:	29468804 	addi	r5,r5,6688
 1001e3c:	01804034 	movhi	r6,256
 1001e40:	31898404 	addi	r6,r6,9744
 1001e44:	10028780 	call	1002878 <__cxa_throw>
 1001e48:	10028040 	call	1002804 <__cxa_rethrow>
 1001e4c:	d9401a17 	ldw	r5,104(sp)
 1001e50:	d9001517 	ldw	r4,84(sp)
 1001e54:	d9400715 	stw	r5,28(sp)
 1001e58:	10023740 	call	1002374 <_ZN10__cxxabiv111__terminateEPFvvE>

01001e5c <__gxx_personality_sj0>:
 1001e5c:	deffd304 	addi	sp,sp,-180
 1001e60:	00804034 	movhi	r2,256
 1001e64:	1088be04 	addi	r2,r2,8952
 1001e68:	00c04074 	movhi	r3,257
 1001e6c:	18c5b304 	addi	r3,r3,5836
 1001e70:	d8801315 	stw	r2,76(sp)
 1001e74:	d9002315 	stw	r4,140(sp)
 1001e78:	00804034 	movhi	r2,256
 1001e7c:	10879704 	addi	r2,r2,7772
 1001e80:	d9000a04 	addi	r4,sp,40
 1001e84:	d8801015 	stw	r2,64(sp)
 1001e88:	d8c01115 	stw	r3,68(sp)
 1001e8c:	dfc02c15 	stw	ra,176(sp)
 1001e90:	df002b15 	stw	fp,172(sp)
 1001e94:	ddc02a15 	stw	r23,168(sp)
 1001e98:	dec01215 	stw	sp,72(sp)
 1001e9c:	dec01415 	stw	sp,80(sp)
 1001ea0:	d9802515 	stw	r6,148(sp)
 1001ea4:	d9402415 	stw	r5,144(sp)
 1001ea8:	d9c02615 	stw	r7,152(sp)
 1001eac:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 1001eb0:	d8c02317 	ldw	r3,140(sp)
 1001eb4:	00800044 	movi	r2,1
 1001eb8:	18800a26 	beq	r3,r2,1001ee4 <__gxx_personality_sj0+0x88>
 1001ebc:	010000c4 	movi	r4,3
 1001ec0:	d9002215 	stw	r4,136(sp)
 1001ec4:	d9000a04 	addi	r4,sp,40
 1001ec8:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 1001ecc:	d8802217 	ldw	r2,136(sp)
 1001ed0:	dfc02c17 	ldw	ra,176(sp)
 1001ed4:	df002b17 	ldw	fp,172(sp)
 1001ed8:	ddc02a17 	ldw	r23,168(sp)
 1001edc:	dec02d04 	addi	sp,sp,180
 1001ee0:	f800283a 	ret
 1001ee4:	d9402d17 	ldw	r5,180(sp)
 1001ee8:	d9002517 	ldw	r4,148(sp)
 1001eec:	0007883a 	mov	r3,zero
 1001ef0:	28800504 	addi	r2,r5,20
 1001ef4:	d8800015 	stw	r2,0(sp)
 1001ef8:	28bff504 	addi	r2,r5,-44
 1001efc:	d8801a15 	stw	r2,104(sp)
 1001f00:	0090caf4 	movhi	r2,17195
 1001f04:	108ac004 	addi	r2,r2,11008
 1001f08:	2080ad26 	beq	r4,r2,10021c0 <__gxx_personality_sj0+0x364>
 1001f0c:	d8c02105 	stb	r3,132(sp)
 1001f10:	d8c02417 	ldw	r3,144(sp)
 1001f14:	00800184 	movi	r2,6
 1001f18:	1880281e 	bne	r3,r2,1001fbc <__gxx_personality_sj0+0x160>
 1001f1c:	d8802103 	ldbu	r2,132(sp)
 1001f20:	10002626 	beq	r2,zero,1001fbc <__gxx_personality_sj0+0x160>
 1001f24:	d9001a17 	ldw	r4,104(sp)
 1001f28:	d9401a17 	ldw	r5,104(sp)
 1001f2c:	d8801a17 	ldw	r2,104(sp)
 1001f30:	21000917 	ldw	r4,36(r4)
 1001f34:	29400617 	ldw	r5,24(r5)
 1001f38:	10800817 	ldw	r2,32(r2)
 1001f3c:	d9001d15 	stw	r4,116(sp)
 1001f40:	d9401b15 	stw	r5,108(sp)
 1001f44:	d8802015 	stw	r2,128(sp)
 1001f48:	2000ad1e 	bne	r4,zero,1002200 <__gxx_personality_sj0+0x3a4>
 1001f4c:	01000044 	movi	r4,1
 1001f50:	00800044 	movi	r2,1
 1001f54:	2080e126 	beq	r4,r2,10022dc <__gxx_personality_sj0+0x480>
 1001f58:	d8801b17 	ldw	r2,108(sp)
 1001f5c:	1000d316 	blt	r2,zero,10022ac <__gxx_personality_sj0+0x450>
 1001f60:	d9802d17 	ldw	r6,180(sp)
 1001f64:	d9002e17 	ldw	r4,184(sp)
 1001f68:	00bfffc4 	movi	r2,-1
 1001f6c:	000b883a 	mov	r5,zero
 1001f70:	d8800b15 	stw	r2,44(sp)
 1001f74:	1002f8c0 	call	1002f8c <_Unwind_SetGR>
 1001f78:	d9801b17 	ldw	r6,108(sp)
 1001f7c:	d9002e17 	ldw	r4,184(sp)
 1001f80:	01400044 	movi	r5,1
 1001f84:	1002f8c0 	call	1002f8c <_Unwind_SetGR>
 1001f88:	d9002e17 	ldw	r4,184(sp)
 1001f8c:	d9401d17 	ldw	r5,116(sp)
 1001f90:	1002fc80 	call	1002fc8 <_Unwind_SetIP>
 1001f94:	010001c4 	movi	r4,7
 1001f98:	d9002215 	stw	r4,136(sp)
 1001f9c:	d9000a04 	addi	r4,sp,40
 1001fa0:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 1001fa4:	d8802217 	ldw	r2,136(sp)
 1001fa8:	dfc02c17 	ldw	ra,176(sp)
 1001fac:	df002b17 	ldw	fp,172(sp)
 1001fb0:	ddc02a17 	ldw	r23,168(sp)
 1001fb4:	dec02d04 	addi	sp,sp,180
 1001fb8:	f800283a 	ret
 1001fbc:	d9002e17 	ldw	r4,184(sp)
 1001fc0:	00ffffc4 	movi	r3,-1
 1001fc4:	d8c00b15 	stw	r3,44(sp)
 1001fc8:	1002fd80 	call	1002fd8 <_Unwind_GetLanguageSpecificData>
 1001fcc:	10007226 	beq	r2,zero,1002198 <__gxx_personality_sj0+0x33c>
 1001fd0:	d9002e17 	ldw	r4,184(sp)
 1001fd4:	d9800404 	addi	r6,sp,16
 1001fd8:	100b883a 	mov	r5,r2
 1001fdc:	d8802015 	stw	r2,128(sp)
 1001fe0:	1001ad40 	call	1001ad4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 1001fe4:	d9000903 	ldbu	r4,36(sp)
 1001fe8:	d9402e17 	ldw	r5,184(sp)
 1001fec:	d8801e15 	stw	r2,120(sp)
 1001ff0:	1001a440 	call	1001a44 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 1001ff4:	d9002e17 	ldw	r4,184(sp)
 1001ff8:	d8800615 	stw	r2,24(sp)
 1001ffc:	1002fa40 	call	1002fa4 <_Unwind_GetIP>
 1002000:	10bfffc4 	addi	r2,r2,-1
 1002004:	d8801c15 	stw	r2,112(sp)
 1002008:	10006316 	blt	r2,zero,1002198 <__gxx_personality_sj0+0x33c>
 100200c:	10001b1e 	bne	r2,zero,100207c <__gxx_personality_sj0+0x220>
 1002010:	01000044 	movi	r4,1
 1002014:	d8001f15 	stw	zero,124(sp)
 1002018:	d8001d15 	stw	zero,116(sp)
 100201c:	d8001b15 	stw	zero,108(sp)
 1002020:	d9402417 	ldw	r5,144(sp)
 1002024:	00c00044 	movi	r3,1
 1002028:	28c4703a 	and	r2,r5,r3
 100202c:	1005003a 	cmpeq	r2,r2,zero
 1002030:	10006a1e 	bne	r2,zero,10021dc <__gxx_personality_sj0+0x380>
 1002034:	00800084 	movi	r2,2
 1002038:	20805726 	beq	r4,r2,1002198 <__gxx_personality_sj0+0x33c>
 100203c:	d8802103 	ldbu	r2,132(sp)
 1002040:	10008626 	beq	r2,zero,100225c <__gxx_personality_sj0+0x400>
 1002044:	d9001a17 	ldw	r4,104(sp)
 1002048:	d9401d17 	ldw	r5,116(sp)
 100204c:	d8801b17 	ldw	r2,108(sp)
 1002050:	00c00184 	movi	r3,6
 1002054:	d8c02215 	stw	r3,136(sp)
 1002058:	21400915 	stw	r5,36(r4)
 100205c:	20800615 	stw	r2,24(r4)
 1002060:	d8c01f17 	ldw	r3,124(sp)
 1002064:	d9402017 	ldw	r5,128(sp)
 1002068:	d8800017 	ldw	r2,0(sp)
 100206c:	20c00715 	stw	r3,28(r4)
 1002070:	21400815 	stw	r5,32(r4)
 1002074:	20800a15 	stw	r2,40(r4)
 1002078:	003f9206 	br	1001ec4 <__gxx_personality_sj0+0x68>
 100207c:	d9001e17 	ldw	r4,120(sp)
 1002080:	d9400204 	addi	r5,sp,8
 1002084:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 1002088:	d9401c17 	ldw	r5,112(sp)
 100208c:	1009883a 	mov	r4,r2
 1002090:	297fffc4 	addi	r5,r5,-1
 1002094:	d9401c15 	stw	r5,112(sp)
 1002098:	d9400104 	addi	r5,sp,4
 100209c:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 10020a0:	d8801e15 	stw	r2,120(sp)
 10020a4:	d8801c17 	ldw	r2,112(sp)
 10020a8:	103ff41e 	bne	r2,zero,100207c <__gxx_personality_sj0+0x220>
 10020ac:	d8800217 	ldw	r2,8(sp)
 10020b0:	d8c00117 	ldw	r3,4(sp)
 10020b4:	01000044 	movi	r4,1
 10020b8:	1105883a 	add	r2,r2,r4
 10020bc:	d8801d15 	stw	r2,116(sp)
 10020c0:	1800541e 	bne	r3,zero,1002214 <__gxx_personality_sj0+0x3b8>
 10020c4:	d8001f15 	stw	zero,124(sp)
 10020c8:	d8c01d17 	ldw	r3,116(sp)
 10020cc:	18003226 	beq	r3,zero,1002198 <__gxx_personality_sj0+0x33c>
 10020d0:	d9001f17 	ldw	r4,124(sp)
 10020d4:	20007226 	beq	r4,zero,10022a0 <__gxx_personality_sj0+0x444>
 10020d8:	d9402417 	ldw	r5,144(sp)
 10020dc:	2880020c 	andi	r2,r5,8
 10020e0:	10006a1e 	bne	r2,zero,100228c <__gxx_personality_sj0+0x430>
 10020e4:	d8802103 	ldbu	r2,132(sp)
 10020e8:	10006826 	beq	r2,zero,100228c <__gxx_personality_sj0+0x430>
 10020ec:	d8801a17 	ldw	r2,104(sp)
 10020f0:	10800017 	ldw	r2,0(r2)
 10020f4:	d8801915 	stw	r2,100(sp)
 10020f8:	d8c01917 	ldw	r3,100(sp)
 10020fc:	d8001805 	stb	zero,96(sp)
 1002100:	1807003a 	cmpeq	r3,r3,zero
 1002104:	d8c02715 	stw	r3,156(sp)
 1002108:	00000706 	br	1002128 <__gxx_personality_sj0+0x2cc>
 100210c:	01000044 	movi	r4,1
 1002110:	d9001805 	stb	r4,96(sp)
 1002114:	d8800217 	ldw	r2,8(sp)
 1002118:	10005e26 	beq	r2,zero,1002294 <__gxx_personality_sj0+0x438>
 100211c:	d8c01717 	ldw	r3,92(sp)
 1002120:	1885883a 	add	r2,r3,r2
 1002124:	d8801f15 	stw	r2,124(sp)
 1002128:	d9001f17 	ldw	r4,124(sp)
 100212c:	d9400104 	addi	r5,sp,4
 1002130:	10017800 	call	1001780 <_Z12read_sleb128PKhPi>
 1002134:	1009883a 	mov	r4,r2
 1002138:	d9400204 	addi	r5,sp,8
 100213c:	d8801715 	stw	r2,92(sp)
 1002140:	10017800 	call	1001780 <_Z12read_sleb128PKhPi>
 1002144:	d8800117 	ldw	r2,4(sp)
 1002148:	103ff026 	beq	r2,zero,100210c <__gxx_personality_sj0+0x2b0>
 100214c:	0080360e 	bge	zero,r2,1002228 <__gxx_personality_sj0+0x3cc>
 1002150:	017fffc4 	movi	r5,-1
 1002154:	d9400b15 	stw	r5,44(sp)
 1002158:	d9000404 	addi	r4,sp,16
 100215c:	100b883a 	mov	r5,r2
 1002160:	1001bd40 	call	1001bd4 <_Z15get_ttype_entryP16lsda_header_infoj>
 1002164:	10000826 	beq	r2,zero,1002188 <__gxx_personality_sj0+0x32c>
 1002168:	d8c02717 	ldw	r3,156(sp)
 100216c:	183fe91e 	bne	r3,zero,1002114 <__gxx_personality_sj0+0x2b8>
 1002170:	d9401917 	ldw	r5,100(sp)
 1002174:	1009883a 	mov	r4,r2
 1002178:	d80d883a 	mov	r6,sp
 100217c:	10017d40 	call	10017d4 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 1002180:	10803fcc 	andi	r2,r2,255
 1002184:	103fe326 	beq	r2,zero,1002114 <__gxx_personality_sj0+0x2b8>
 1002188:	d9000117 	ldw	r4,4(sp)
 100218c:	d9001b15 	stw	r4,108(sp)
 1002190:	010000c4 	movi	r4,3
 1002194:	003fa206 	br	1002020 <__gxx_personality_sj0+0x1c4>
 1002198:	01400204 	movi	r5,8
 100219c:	d9000a04 	addi	r4,sp,40
 10021a0:	d9402215 	stw	r5,136(sp)
 10021a4:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 10021a8:	d8802217 	ldw	r2,136(sp)
 10021ac:	dfc02c17 	ldw	ra,176(sp)
 10021b0:	df002b17 	ldw	fp,172(sp)
 10021b4:	ddc02a17 	ldw	r23,168(sp)
 10021b8:	dec02d04 	addi	sp,sp,180
 10021bc:	f800283a 	ret
 10021c0:	d9402617 	ldw	r5,152(sp)
 10021c4:	0091d3b4 	movhi	r2,18254
 10021c8:	109550c4 	addi	r2,r2,21827
 10021cc:	28bf4f1e 	bne	r5,r2,1001f0c <__gxx_personality_sj0+0xb0>
 10021d0:	d8802317 	ldw	r2,140(sp)
 10021d4:	1007883a 	mov	r3,r2
 10021d8:	003f4c06 	br	1001f0c <__gxx_personality_sj0+0xb0>
 10021dc:	d9402417 	ldw	r5,144(sp)
 10021e0:	2880020c 	andi	r2,r5,8
 10021e4:	10000826 	beq	r2,zero,1002208 <__gxx_personality_sj0+0x3ac>
 10021e8:	20c04026 	beq	r4,r3,10022ec <__gxx_personality_sj0+0x490>
 10021ec:	d8801b17 	ldw	r2,108(sp)
 10021f0:	103f5b0e 	bge	r2,zero,1001f60 <__gxx_personality_sj0+0x104>
 10021f4:	00800084 	movi	r2,2
 10021f8:	d8800b15 	stw	r2,44(sp)
 10021fc:	10024400 	call	1002440 <_ZSt10unexpectedv>
 1002200:	010000c4 	movi	r4,3
 1002204:	003f5206 	br	1001f50 <__gxx_personality_sj0+0xf4>
 1002208:	d8802103 	ldbu	r2,132(sp)
 100220c:	103f501e 	bne	r2,zero,1001f50 <__gxx_personality_sj0+0xf4>
 1002210:	003ff506 	br	10021e8 <__gxx_personality_sj0+0x38c>
 1002214:	d8800817 	ldw	r2,32(sp)
 1002218:	1885883a 	add	r2,r3,r2
 100221c:	1105c83a 	sub	r2,r2,r4
 1002220:	d8801f15 	stw	r2,124(sp)
 1002224:	003fa806 	br	10020c8 <__gxx_personality_sj0+0x26c>
 1002228:	d9002717 	ldw	r4,156(sp)
 100222c:	20000e1e 	bne	r4,zero,1002268 <__gxx_personality_sj0+0x40c>
 1002230:	017fffc4 	movi	r5,-1
 1002234:	d9400b15 	stw	r5,44(sp)
 1002238:	d9800017 	ldw	r6,0(sp)
 100223c:	d9401917 	ldw	r5,100(sp)
 1002240:	100f883a 	mov	r7,r2
 1002244:	d9000404 	addi	r4,sp,16
 1002248:	1001c580 	call	1001c58 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 100224c:	1080005c 	xori	r2,r2,1
 1002250:	10803fcc 	andi	r2,r2,255
 1002254:	103faf26 	beq	r2,zero,1002114 <__gxx_personality_sj0+0x2b8>
 1002258:	003fcb06 	br	1002188 <__gxx_personality_sj0+0x32c>
 100225c:	00800184 	movi	r2,6
 1002260:	d8802215 	stw	r2,136(sp)
 1002264:	003f1706 	br	1001ec4 <__gxx_personality_sj0+0x68>
 1002268:	d9000717 	ldw	r4,28(sp)
 100226c:	d9400304 	addi	r5,sp,12
 1002270:	2089c83a 	sub	r4,r4,r2
 1002274:	213fffc4 	addi	r4,r4,-1
 1002278:	10017500 	call	1001750 <_Z12read_uleb128PKhPj>
 100227c:	d8c00317 	ldw	r3,12(sp)
 1002280:	1807003a 	cmpeq	r3,r3,zero
 1002284:	1805883a 	mov	r2,r3
 1002288:	003ff106 	br	1002250 <__gxx_personality_sj0+0x3f4>
 100228c:	d8001915 	stw	zero,100(sp)
 1002290:	003f9906 	br	10020f8 <__gxx_personality_sj0+0x29c>
 1002294:	d8801803 	ldbu	r2,96(sp)
 1002298:	1004c03a 	cmpne	r2,r2,zero
 100229c:	103fbe26 	beq	r2,zero,1002198 <__gxx_personality_sj0+0x33c>
 10022a0:	01000084 	movi	r4,2
 10022a4:	d8001b15 	stw	zero,108(sp)
 10022a8:	003f5d06 	br	1002020 <__gxx_personality_sj0+0x1c4>
 10022ac:	d9402017 	ldw	r5,128(sp)
 10022b0:	d9002e17 	ldw	r4,184(sp)
 10022b4:	00bfffc4 	movi	r2,-1
 10022b8:	d9800404 	addi	r6,sp,16
 10022bc:	d8800b15 	stw	r2,44(sp)
 10022c0:	1001ad40 	call	1001ad4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 10022c4:	d9000903 	ldbu	r4,36(sp)
 10022c8:	d9402e17 	ldw	r5,184(sp)
 10022cc:	1001a440 	call	1001a44 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 10022d0:	d8c01a17 	ldw	r3,104(sp)
 10022d4:	18800915 	stw	r2,36(r3)
 10022d8:	003f2106 	br	1001f60 <__gxx_personality_sj0+0x104>
 10022dc:	d9002d17 	ldw	r4,180(sp)
 10022e0:	00bfffc4 	movi	r2,-1
 10022e4:	d8800b15 	stw	r2,44(sp)
 10022e8:	10025580 	call	1002558 <__cxa_call_terminate>
 10022ec:	00bfffc4 	movi	r2,-1
 10022f0:	d8800b15 	stw	r2,44(sp)
 10022f4:	10024180 	call	1002418 <_ZSt9terminatev>
 10022f8:	d9000b17 	ldw	r4,44(sp)
 10022fc:	d9400c17 	ldw	r5,48(sp)
 1002300:	00800044 	movi	r2,1
 1002304:	d9002915 	stw	r4,164(sp)
 1002308:	d9402815 	stw	r5,160(sp)
 100230c:	20800626 	beq	r4,r2,1002328 <__gxx_personality_sj0+0x4cc>
 1002310:	d8000b15 	stw	zero,44(sp)
 1002314:	10029740 	call	1002974 <__cxa_end_catch>
 1002318:	d9002817 	ldw	r4,160(sp)
 100231c:	00bfffc4 	movi	r2,-1
 1002320:	d8800b15 	stw	r2,44(sp)
 1002324:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 1002328:	d9002817 	ldw	r4,160(sp)
 100232c:	1002a180 	call	1002a18 <__cxa_begin_catch>
 1002330:	d8c02917 	ldw	r3,164(sp)
 1002334:	d8c00b15 	stw	r3,44(sp)
 1002338:	10024180 	call	1002418 <_ZSt9terminatev>

0100233c <__cxa_get_globals_fast>:
 100233c:	d0a6eb04 	addi	r2,gp,-25684
 1002340:	f800283a 	ret

01002344 <__cxa_get_globals>:
 1002344:	d0a6eb04 	addi	r2,gp,-25684
 1002348:	f800283a 	ret

0100234c <_ZSt13set_terminatePFvvE>:
 100234c:	00c04074 	movhi	r3,257
 1002350:	18ce6604 	addi	r3,r3,14744
 1002354:	18800017 	ldw	r2,0(r3)
 1002358:	19000015 	stw	r4,0(r3)
 100235c:	f800283a 	ret

01002360 <_ZSt14set_unexpectedPFvvE>:
 1002360:	00c04074 	movhi	r3,257
 1002364:	18ce6704 	addi	r3,r3,14748
 1002368:	18800017 	ldw	r2,0(r3)
 100236c:	19000015 	stw	r4,0(r3)
 1002370:	f800283a 	ret

01002374 <_ZN10__cxxabiv111__terminateEPFvvE>:
 1002374:	deffed04 	addi	sp,sp,-76
 1002378:	00804034 	movhi	r2,256
 100237c:	10879704 	addi	r2,r2,7772
 1002380:	d8800615 	stw	r2,24(sp)
 1002384:	00c04074 	movhi	r3,257
 1002388:	18c5b704 	addi	r3,r3,5852
 100238c:	00804034 	movhi	r2,256
 1002390:	1088f404 	addi	r2,r2,9168
 1002394:	d9000d15 	stw	r4,52(sp)
 1002398:	d809883a 	mov	r4,sp
 100239c:	d8800915 	stw	r2,36(sp)
 10023a0:	dfc01215 	stw	ra,72(sp)
 10023a4:	df001115 	stw	fp,68(sp)
 10023a8:	ddc01015 	stw	r23,64(sp)
 10023ac:	d8c00715 	stw	r3,28(sp)
 10023b0:	dec00815 	stw	sp,32(sp)
 10023b4:	dec00a15 	stw	sp,40(sp)
 10023b8:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 10023bc:	00800084 	movi	r2,2
 10023c0:	d8800115 	stw	r2,4(sp)
 10023c4:	d8800d17 	ldw	r2,52(sp)
 10023c8:	103ee83a 	callr	r2
 10023cc:	100348c0 	call	100348c <abort>
 10023d0:	d8800117 	ldw	r2,4(sp)
 10023d4:	d8c00217 	ldw	r3,8(sp)
 10023d8:	d8800f15 	stw	r2,60(sp)
 10023dc:	d8c00e15 	stw	r3,56(sp)
 10023e0:	d8c00f17 	ldw	r3,60(sp)
 10023e4:	00800044 	movi	r2,1
 10023e8:	18800626 	beq	r3,r2,1002404 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 10023ec:	d8000115 	stw	zero,4(sp)
 10023f0:	10029740 	call	1002974 <__cxa_end_catch>
 10023f4:	d9000e17 	ldw	r4,56(sp)
 10023f8:	00bfffc4 	movi	r2,-1
 10023fc:	d8800115 	stw	r2,4(sp)
 1002400:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 1002404:	d9000e17 	ldw	r4,56(sp)
 1002408:	1002a180 	call	1002a18 <__cxa_begin_catch>
 100240c:	d8c00f17 	ldw	r3,60(sp)
 1002410:	d8c00115 	stw	r3,4(sp)
 1002414:	100348c0 	call	100348c <abort>

01002418 <_ZSt9terminatev>:
 1002418:	00804074 	movhi	r2,257
 100241c:	108e6604 	addi	r2,r2,14744
 1002420:	11000017 	ldw	r4,0(r2)
 1002424:	deffff04 	addi	sp,sp,-4
 1002428:	dfc00015 	stw	ra,0(sp)
 100242c:	10023740 	call	1002374 <_ZN10__cxxabiv111__terminateEPFvvE>

01002430 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 1002430:	deffff04 	addi	sp,sp,-4
 1002434:	dfc00015 	stw	ra,0(sp)
 1002438:	203ee83a 	callr	r4
 100243c:	10024180 	call	1002418 <_ZSt9terminatev>

01002440 <_ZSt10unexpectedv>:
 1002440:	00804074 	movhi	r2,257
 1002444:	108e6704 	addi	r2,r2,14748
 1002448:	11000017 	ldw	r4,0(r2)
 100244c:	deffff04 	addi	sp,sp,-4
 1002450:	dfc00015 	stw	ra,0(sp)
 1002454:	10024300 	call	1002430 <_ZN10__cxxabiv112__unexpectedEPFvvE>

01002458 <_Znwm>:
 1002458:	deffee04 	addi	sp,sp,-72
 100245c:	00804034 	movhi	r2,256
 1002460:	10879704 	addi	r2,r2,7772
 1002464:	d8800615 	stw	r2,24(sp)
 1002468:	00c04074 	movhi	r3,257
 100246c:	18c5bb04 	addi	r3,r3,5868
 1002470:	00804034 	movhi	r2,256
 1002474:	10894d04 	addi	r2,r2,9524
 1002478:	d9000e15 	stw	r4,56(sp)
 100247c:	d809883a 	mov	r4,sp
 1002480:	d8800915 	stw	r2,36(sp)
 1002484:	dfc01115 	stw	ra,68(sp)
 1002488:	df001015 	stw	fp,64(sp)
 100248c:	ddc00f15 	stw	r23,60(sp)
 1002490:	d8c00715 	stw	r3,28(sp)
 1002494:	dec00815 	stw	sp,32(sp)
 1002498:	dec00a15 	stw	sp,40(sp)
 100249c:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 10024a0:	d8800e17 	ldw	r2,56(sp)
 10024a4:	10000a1e 	bne	r2,zero,10024d0 <_Znwm+0x78>
 10024a8:	00800044 	movi	r2,1
 10024ac:	d8800e15 	stw	r2,56(sp)
 10024b0:	00000706 	br	10024d0 <_Znwm+0x78>
 10024b4:	00804074 	movhi	r2,257
 10024b8:	10955004 	addi	r2,r2,21824
 10024bc:	10c00017 	ldw	r3,0(r2)
 10024c0:	18000f26 	beq	r3,zero,1002500 <_Znwm+0xa8>
 10024c4:	00800044 	movi	r2,1
 10024c8:	d8800115 	stw	r2,4(sp)
 10024cc:	183ee83a 	callr	r3
 10024d0:	d9000e17 	ldw	r4,56(sp)
 10024d4:	1004a4c0 	call	1004a4c <malloc>
 10024d8:	d8800d15 	stw	r2,52(sp)
 10024dc:	103ff526 	beq	r2,zero,10024b4 <_Znwm+0x5c>
 10024e0:	d809883a 	mov	r4,sp
 10024e4:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 10024e8:	d8800d17 	ldw	r2,52(sp)
 10024ec:	dfc01117 	ldw	ra,68(sp)
 10024f0:	df001017 	ldw	fp,64(sp)
 10024f4:	ddc00f17 	ldw	r23,60(sp)
 10024f8:	dec01204 	addi	sp,sp,72
 10024fc:	f800283a 	ret
 1002500:	01000104 	movi	r4,4
 1002504:	10026d00 	call	10026d0 <__cxa_allocate_exception>
 1002508:	1009883a 	mov	r4,r2
 100250c:	00804074 	movhi	r2,257
 1002510:	10869104 	addi	r2,r2,6724
 1002514:	20800015 	stw	r2,0(r4)
 1002518:	00c00044 	movi	r3,1
 100251c:	d8c00115 	stw	r3,4(sp)
 1002520:	01404074 	movhi	r5,257
 1002524:	29469804 	addi	r5,r5,6752
 1002528:	01804034 	movhi	r6,256
 100252c:	31899c04 	addi	r6,r6,9840
 1002530:	10028780 	call	1002878 <__cxa_throw>
 1002534:	d8800317 	ldw	r2,12(sp)
 1002538:	00ffffc4 	movi	r3,-1
 100253c:	d9000217 	ldw	r4,8(sp)
 1002540:	10c00226 	beq	r2,r3,100254c <_Znwm+0xf4>
 1002544:	d8c00115 	stw	r3,4(sp)
 1002548:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 100254c:	00bfffc4 	movi	r2,-1
 1002550:	d8800115 	stw	r2,4(sp)
 1002554:	1001cdc0 	call	1001cdc <__cxa_call_unexpected>

01002558 <__cxa_call_terminate>:
 1002558:	defffe04 	addi	sp,sp,-8
 100255c:	dc000015 	stw	r16,0(sp)
 1002560:	dfc00115 	stw	ra,4(sp)
 1002564:	2021883a 	mov	r16,r4
 1002568:	20000626 	beq	r4,zero,1002584 <__cxa_call_terminate+0x2c>
 100256c:	1002a180 	call	1002a18 <__cxa_begin_catch>
 1002570:	80c00017 	ldw	r3,0(r16)
 1002574:	0090caf4 	movhi	r2,17195
 1002578:	108ac004 	addi	r2,r2,11008
 100257c:	81000117 	ldw	r4,4(r16)
 1002580:	18800126 	beq	r3,r2,1002588 <__cxa_call_terminate+0x30>
 1002584:	10024180 	call	1002418 <_ZSt9terminatev>
 1002588:	0091d3b4 	movhi	r2,18254
 100258c:	109550c4 	addi	r2,r2,21827
 1002590:	20bffc1e 	bne	r4,r2,1002584 <__cxa_call_terminate+0x2c>
 1002594:	813ff817 	ldw	r4,-32(r16)
 1002598:	10023740 	call	1002374 <_ZN10__cxxabiv111__terminateEPFvvE>

0100259c <_ZNKSt9exception4whatEv>:
 100259c:	20800017 	ldw	r2,0(r4)
 10025a0:	10ffff17 	ldw	r3,-4(r2)
 10025a4:	18800117 	ldw	r2,4(r3)
 10025a8:	f800283a 	ret

010025ac <_ZNSt9exceptionD0Ev>:
 10025ac:	00804074 	movhi	r2,257
 10025b0:	10868004 	addi	r2,r2,6656
 10025b4:	20800015 	stw	r2,0(r4)
 10025b8:	10017441 	jmpi	1001744 <_ZdlPv>

010025bc <_ZNSt9exceptionD1Ev>:
 10025bc:	00804074 	movhi	r2,257
 10025c0:	10868004 	addi	r2,r2,6656
 10025c4:	20800015 	stw	r2,0(r4)
 10025c8:	f800283a 	ret

010025cc <_ZNSt9exceptionD2Ev>:
 10025cc:	00804074 	movhi	r2,257
 10025d0:	10868004 	addi	r2,r2,6656
 10025d4:	20800015 	stw	r2,0(r4)
 10025d8:	f800283a 	ret

010025dc <_ZNSt13bad_exceptionD0Ev>:
 10025dc:	defffe04 	addi	sp,sp,-8
 10025e0:	00804074 	movhi	r2,257
 10025e4:	10867b04 	addi	r2,r2,6636
 10025e8:	dc400015 	stw	r17,0(sp)
 10025ec:	20800015 	stw	r2,0(r4)
 10025f0:	2023883a 	mov	r17,r4
 10025f4:	dfc00115 	stw	ra,4(sp)
 10025f8:	10025cc0 	call	10025cc <_ZNSt9exceptionD2Ev>
 10025fc:	8809883a 	mov	r4,r17
 1002600:	dfc00117 	ldw	ra,4(sp)
 1002604:	dc400017 	ldw	r17,0(sp)
 1002608:	dec00204 	addi	sp,sp,8
 100260c:	10017441 	jmpi	1001744 <_ZdlPv>

01002610 <_ZNSt13bad_exceptionD1Ev>:
 1002610:	00804074 	movhi	r2,257
 1002614:	10867b04 	addi	r2,r2,6636
 1002618:	20800015 	stw	r2,0(r4)
 100261c:	10025cc1 	jmpi	10025cc <_ZNSt9exceptionD2Ev>

01002620 <_ZNSt13bad_exceptionD2Ev>:
 1002620:	00804074 	movhi	r2,257
 1002624:	10867b04 	addi	r2,r2,6636
 1002628:	20800015 	stw	r2,0(r4)
 100262c:	10025cc1 	jmpi	10025cc <_ZNSt9exceptionD2Ev>

01002630 <_ZSt15set_new_handlerPFvvE>:
 1002630:	d0a6ed17 	ldw	r2,-25676(gp)
 1002634:	d126ed15 	stw	r4,-25676(gp)
 1002638:	f800283a 	ret

0100263c <_ZNSt9bad_allocD0Ev>:
 100263c:	defffe04 	addi	sp,sp,-8
 1002640:	00804074 	movhi	r2,257
 1002644:	10869104 	addi	r2,r2,6724
 1002648:	dc400015 	stw	r17,0(sp)
 100264c:	20800015 	stw	r2,0(r4)
 1002650:	2023883a 	mov	r17,r4
 1002654:	dfc00115 	stw	ra,4(sp)
 1002658:	10025cc0 	call	10025cc <_ZNSt9exceptionD2Ev>
 100265c:	8809883a 	mov	r4,r17
 1002660:	dfc00117 	ldw	ra,4(sp)
 1002664:	dc400017 	ldw	r17,0(sp)
 1002668:	dec00204 	addi	sp,sp,8
 100266c:	10017441 	jmpi	1001744 <_ZdlPv>

01002670 <_ZNSt9bad_allocD1Ev>:
 1002670:	00804074 	movhi	r2,257
 1002674:	10869104 	addi	r2,r2,6724
 1002678:	20800015 	stw	r2,0(r4)
 100267c:	10025cc1 	jmpi	10025cc <_ZNSt9exceptionD2Ev>

01002680 <_ZNSt9bad_allocD2Ev>:
 1002680:	00804074 	movhi	r2,257
 1002684:	10869104 	addi	r2,r2,6724
 1002688:	20800015 	stw	r2,0(r4)
 100268c:	10025cc1 	jmpi	10025cc <_ZNSt9exceptionD2Ev>

01002690 <__cxa_free_exception>:
 1002690:	2007883a 	mov	r3,r4
 1002694:	00804074 	movhi	r2,257
 1002698:	10956504 	addi	r2,r2,21908
 100269c:	213ff004 	addi	r4,r4,-64
 10026a0:	11420004 	addi	r5,r2,2048
 10026a4:	18800336 	bltu	r3,r2,10026b4 <__cxa_free_exception+0x24>
 10026a8:	1885c83a 	sub	r2,r3,r2
 10026ac:	1004d27a 	srli	r2,r2,9
 10026b0:	19400136 	bltu	r3,r5,10026b8 <__cxa_free_exception+0x28>
 10026b4:	1004a381 	jmpi	1004a38 <free>
 10026b8:	00ffff84 	movi	r3,-2
 10026bc:	1886183a 	rol	r3,r3,r2
 10026c0:	d0a6ee17 	ldw	r2,-25672(gp)
 10026c4:	10c4703a 	and	r2,r2,r3
 10026c8:	d0a6ee15 	stw	r2,-25672(gp)
 10026cc:	f800283a 	ret

010026d0 <__cxa_allocate_exception>:
 10026d0:	deffed04 	addi	sp,sp,-76
 10026d4:	00804034 	movhi	r2,256
 10026d8:	10879704 	addi	r2,r2,7772
 10026dc:	21001004 	addi	r4,r4,64
 10026e0:	00c04074 	movhi	r3,257
 10026e4:	18c5c004 	addi	r3,r3,5888
 10026e8:	d8800615 	stw	r2,24(sp)
 10026ec:	d9000d15 	stw	r4,52(sp)
 10026f0:	00804034 	movhi	r2,256
 10026f4:	1089f804 	addi	r2,r2,10208
 10026f8:	d809883a 	mov	r4,sp
 10026fc:	dfc01215 	stw	ra,72(sp)
 1002700:	d8c00715 	stw	r3,28(sp)
 1002704:	d8800915 	stw	r2,36(sp)
 1002708:	df001115 	stw	fp,68(sp)
 100270c:	ddc01015 	stw	r23,64(sp)
 1002710:	dec00815 	stw	sp,32(sp)
 1002714:	dec00a15 	stw	sp,40(sp)
 1002718:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 100271c:	d9000d17 	ldw	r4,52(sp)
 1002720:	1004a4c0 	call	1004a4c <malloc>
 1002724:	d8800e15 	stw	r2,56(sp)
 1002728:	1000171e 	bne	r2,zero,1002788 <__cxa_allocate_exception+0xb8>
 100272c:	d8c00d17 	ldw	r3,52(sp)
 1002730:	00808004 	movi	r2,512
 1002734:	d1e6ee17 	ldw	r7,-25672(gp)
 1002738:	10c02636 	bltu	r2,r3,10027d4 <__cxa_allocate_exception+0x104>
 100273c:	3807883a 	mov	r3,r7
 1002740:	01400044 	movi	r5,1
 1002744:	1944703a 	and	r2,r3,r5
 1002748:	0009883a 	mov	r4,zero
 100274c:	01800104 	movi	r6,4
 1002750:	10000526 	beq	r2,zero,1002768 <__cxa_allocate_exception+0x98>
 1002754:	2149883a 	add	r4,r4,r5
 1002758:	21801e26 	beq	r4,r6,10027d4 <__cxa_allocate_exception+0x104>
 100275c:	1806d07a 	srli	r3,r3,1
 1002760:	1944703a 	and	r2,r3,r5
 1002764:	103ffb1e 	bne	r2,zero,1002754 <__cxa_allocate_exception+0x84>
 1002768:	2904983a 	sll	r2,r5,r4
 100276c:	2008927a 	slli	r4,r4,9
 1002770:	00c04074 	movhi	r3,257
 1002774:	18d56504 	addi	r3,r3,21908
 1002778:	3884b03a 	or	r2,r7,r2
 100277c:	20c9883a 	add	r4,r4,r3
 1002780:	d9000e15 	stw	r4,56(sp)
 1002784:	d0a6ee15 	stw	r2,-25672(gp)
 1002788:	10023440 	call	1002344 <__cxa_get_globals>
 100278c:	10c00117 	ldw	r3,4(r2)
 1002790:	d9000e17 	ldw	r4,56(sp)
 1002794:	000b883a 	mov	r5,zero
 1002798:	18c00044 	addi	r3,r3,1
 100279c:	10c00115 	stw	r3,4(r2)
 10027a0:	01801004 	movi	r6,64
 10027a4:	10051a00 	call	10051a0 <memset>
 10027a8:	d8800e17 	ldw	r2,56(sp)
 10027ac:	d809883a 	mov	r4,sp
 10027b0:	10801004 	addi	r2,r2,64
 10027b4:	d8800f15 	stw	r2,60(sp)
 10027b8:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 10027bc:	d8800f17 	ldw	r2,60(sp)
 10027c0:	dfc01217 	ldw	ra,72(sp)
 10027c4:	df001117 	ldw	fp,68(sp)
 10027c8:	ddc01017 	ldw	r23,64(sp)
 10027cc:	dec01304 	addi	sp,sp,76
 10027d0:	f800283a 	ret
 10027d4:	00800044 	movi	r2,1
 10027d8:	d8800115 	stw	r2,4(sp)
 10027dc:	10024180 	call	1002418 <_ZSt9terminatev>
 10027e0:	d8800317 	ldw	r2,12(sp)
 10027e4:	00ffffc4 	movi	r3,-1
 10027e8:	d9000217 	ldw	r4,8(sp)
 10027ec:	10c00226 	beq	r2,r3,10027f8 <__cxa_allocate_exception+0x128>
 10027f0:	d8c00115 	stw	r3,4(sp)
 10027f4:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 10027f8:	00bfffc4 	movi	r2,-1
 10027fc:	d8800115 	stw	r2,4(sp)
 1002800:	1001cdc0 	call	1001cdc <__cxa_call_unexpected>

01002804 <__cxa_rethrow>:
 1002804:	defffe04 	addi	sp,sp,-8
 1002808:	dc400015 	stw	r17,0(sp)
 100280c:	dfc00115 	stw	ra,4(sp)
 1002810:	10023440 	call	1002344 <__cxa_get_globals>
 1002814:	100b883a 	mov	r5,r2
 1002818:	10800117 	ldw	r2,4(r2)
 100281c:	2c400017 	ldw	r17,0(r5)
 1002820:	10800044 	addi	r2,r2,1
 1002824:	28800115 	stw	r2,4(r5)
 1002828:	88000b26 	beq	r17,zero,1002858 <__cxa_rethrow+0x54>
 100282c:	88c00b17 	ldw	r3,44(r17)
 1002830:	0090caf4 	movhi	r2,17195
 1002834:	108ac004 	addi	r2,r2,11008
 1002838:	89000c17 	ldw	r4,48(r17)
 100283c:	18800726 	beq	r3,r2,100285c <__cxa_rethrow+0x58>
 1002840:	28000015 	stw	zero,0(r5)
 1002844:	8c400b04 	addi	r17,r17,44
 1002848:	8809883a 	mov	r4,r17
 100284c:	10034340 	call	1003434 <_Unwind_SjLj_Resume_or_Rethrow>
 1002850:	8809883a 	mov	r4,r17
 1002854:	1002a180 	call	1002a18 <__cxa_begin_catch>
 1002858:	10024180 	call	1002418 <_ZSt9terminatev>
 100285c:	0091d3b4 	movhi	r2,18254
 1002860:	109550c4 	addi	r2,r2,21827
 1002864:	20bff61e 	bne	r4,r2,1002840 <__cxa_rethrow+0x3c>
 1002868:	88800517 	ldw	r2,20(r17)
 100286c:	0085c83a 	sub	r2,zero,r2
 1002870:	88800515 	stw	r2,20(r17)
 1002874:	003ff306 	br	1002844 <__cxa_rethrow+0x40>

01002878 <__cxa_throw>:
 1002878:	00804074 	movhi	r2,257
 100287c:	108e6704 	addi	r2,r2,14748
 1002880:	00c04074 	movhi	r3,257
 1002884:	18ce6604 	addi	r3,r3,14744
 1002888:	12000017 	ldw	r8,0(r2)
 100288c:	19c00017 	ldw	r7,0(r3)
 1002890:	defffe04 	addi	sp,sp,-8
 1002894:	213ff004 	addi	r4,r4,-64
 1002898:	dfc00115 	stw	ra,4(sp)
 100289c:	dc400015 	stw	r17,0(sp)
 10028a0:	0090caf4 	movhi	r2,17195
 10028a4:	108ac004 	addi	r2,r2,11008
 10028a8:	20800b15 	stw	r2,44(r4)
 10028ac:	00d1d3b4 	movhi	r3,18254
 10028b0:	18d550c4 	addi	r3,r3,21827
 10028b4:	24400b04 	addi	r17,r4,44
 10028b8:	00804034 	movhi	r2,256
 10028bc:	108a3b04 	addi	r2,r2,10476
 10028c0:	21400015 	stw	r5,0(r4)
 10028c4:	21800115 	stw	r6,4(r4)
 10028c8:	22000215 	stw	r8,8(r4)
 10028cc:	21c00315 	stw	r7,12(r4)
 10028d0:	20c00c15 	stw	r3,48(r4)
 10028d4:	20800d15 	stw	r2,52(r4)
 10028d8:	8809883a 	mov	r4,r17
 10028dc:	100326c0 	call	100326c <_Unwind_SjLj_RaiseException>
 10028e0:	8809883a 	mov	r4,r17
 10028e4:	1002a180 	call	1002a18 <__cxa_begin_catch>
 10028e8:	10024180 	call	1002418 <_ZSt9terminatev>

010028ec <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 10028ec:	defffe04 	addi	sp,sp,-8
 10028f0:	00800044 	movi	r2,1
 10028f4:	dfc00115 	stw	ra,4(sp)
 10028f8:	dc000015 	stw	r16,0(sp)
 10028fc:	28fff504 	addi	r3,r5,-44
 1002900:	11001036 	bltu	r2,r4,1002944 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 1002904:	18800117 	ldw	r2,4(r3)
 1002908:	10000826 	beq	r2,zero,100292c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 100290c:	2c000504 	addi	r16,r5,20
 1002910:	8009883a 	mov	r4,r16
 1002914:	103ee83a 	callr	r2
 1002918:	8009883a 	mov	r4,r16
 100291c:	dfc00117 	ldw	ra,4(sp)
 1002920:	dc000017 	ldw	r16,0(sp)
 1002924:	dec00204 	addi	sp,sp,8
 1002928:	10026901 	jmpi	1002690 <__cxa_free_exception>
 100292c:	2c000504 	addi	r16,r5,20
 1002930:	8009883a 	mov	r4,r16
 1002934:	dfc00117 	ldw	ra,4(sp)
 1002938:	dc000017 	ldw	r16,0(sp)
 100293c:	dec00204 	addi	sp,sp,8
 1002940:	10026901 	jmpi	1002690 <__cxa_free_exception>
 1002944:	19000317 	ldw	r4,12(r3)
 1002948:	10023740 	call	1002374 <_ZN10__cxxabiv111__terminateEPFvvE>

0100294c <__cxa_get_exception_ptr>:
 100294c:	20bfff17 	ldw	r2,-4(r4)
 1002950:	f800283a 	ret

01002954 <_ZSt18uncaught_exceptionv>:
 1002954:	deffff04 	addi	sp,sp,-4
 1002958:	dfc00015 	stw	ra,0(sp)
 100295c:	10023440 	call	1002344 <__cxa_get_globals>
 1002960:	10800117 	ldw	r2,4(r2)
 1002964:	1004c03a 	cmpne	r2,r2,zero
 1002968:	dfc00017 	ldw	ra,0(sp)
 100296c:	dec00104 	addi	sp,sp,4
 1002970:	f800283a 	ret

01002974 <__cxa_end_catch>:
 1002974:	deffff04 	addi	sp,sp,-4
 1002978:	dfc00015 	stw	ra,0(sp)
 100297c:	100233c0 	call	100233c <__cxa_get_globals_fast>
 1002980:	11000017 	ldw	r4,0(r2)
 1002984:	1007883a 	mov	r3,r2
 1002988:	20001326 	beq	r4,zero,10029d8 <__cxa_end_catch+0x64>
 100298c:	21400b17 	ldw	r5,44(r4)
 1002990:	0090caf4 	movhi	r2,17195
 1002994:	108ac004 	addi	r2,r2,11008
 1002998:	21800c17 	ldw	r6,48(r4)
 100299c:	28800526 	beq	r5,r2,10029b4 <__cxa_end_catch+0x40>
 10029a0:	21000b04 	addi	r4,r4,44
 10029a4:	18000015 	stw	zero,0(r3)
 10029a8:	dfc00017 	ldw	ra,0(sp)
 10029ac:	dec00104 	addi	sp,sp,4
 10029b0:	10031041 	jmpi	1003104 <_Unwind_DeleteException>
 10029b4:	0091d3b4 	movhi	r2,18254
 10029b8:	109550c4 	addi	r2,r2,21827
 10029bc:	30bff81e 	bne	r6,r2,10029a0 <__cxa_end_catch+0x2c>
 10029c0:	20800517 	ldw	r2,20(r4)
 10029c4:	10000e16 	blt	r2,zero,1002a00 <__cxa_end_catch+0x8c>
 10029c8:	117fffc4 	addi	r5,r2,-1
 10029cc:	28000526 	beq	r5,zero,10029e4 <__cxa_end_catch+0x70>
 10029d0:	28000a16 	blt	r5,zero,10029fc <__cxa_end_catch+0x88>
 10029d4:	21400515 	stw	r5,20(r4)
 10029d8:	dfc00017 	ldw	ra,0(sp)
 10029dc:	dec00104 	addi	sp,sp,4
 10029e0:	f800283a 	ret
 10029e4:	20800417 	ldw	r2,16(r4)
 10029e8:	21000b04 	addi	r4,r4,44
 10029ec:	18800015 	stw	r2,0(r3)
 10029f0:	dfc00017 	ldw	ra,0(sp)
 10029f4:	dec00104 	addi	sp,sp,4
 10029f8:	10031041 	jmpi	1003104 <_Unwind_DeleteException>
 10029fc:	10024180 	call	1002418 <_ZSt9terminatev>
 1002a00:	11400044 	addi	r5,r2,1
 1002a04:	283ff31e 	bne	r5,zero,10029d4 <__cxa_end_catch+0x60>
 1002a08:	20800417 	ldw	r2,16(r4)
 1002a0c:	21400515 	stw	r5,20(r4)
 1002a10:	18800015 	stw	r2,0(r3)
 1002a14:	003ff006 	br	10029d8 <__cxa_end_catch+0x64>

01002a18 <__cxa_begin_catch>:
 1002a18:	deffee04 	addi	sp,sp,-72
 1002a1c:	00804034 	movhi	r2,256
 1002a20:	10879704 	addi	r2,r2,7772
 1002a24:	00c04074 	movhi	r3,257
 1002a28:	18c5c404 	addi	r3,r3,5904
 1002a2c:	d8800615 	stw	r2,24(sp)
 1002a30:	d9000e15 	stw	r4,56(sp)
 1002a34:	00804034 	movhi	r2,256
 1002a38:	108ac304 	addi	r2,r2,11020
 1002a3c:	d809883a 	mov	r4,sp
 1002a40:	d8c00715 	stw	r3,28(sp)
 1002a44:	dfc01115 	stw	ra,68(sp)
 1002a48:	d8800915 	stw	r2,36(sp)
 1002a4c:	df001015 	stw	fp,64(sp)
 1002a50:	ddc00f15 	stw	r23,60(sp)
 1002a54:	dec00815 	stw	sp,32(sp)
 1002a58:	dec00a15 	stw	sp,40(sp)
 1002a5c:	1002f440 	call	1002f44 <_Unwind_SjLj_Register>
 1002a60:	10023440 	call	1002344 <__cxa_get_globals>
 1002a64:	100d883a 	mov	r6,r2
 1002a68:	d8800e17 	ldw	r2,56(sp)
 1002a6c:	31c00017 	ldw	r7,0(r6)
 1002a70:	117ff504 	addi	r5,r2,-44
 1002a74:	28c00b17 	ldw	r3,44(r5)
 1002a78:	0090caf4 	movhi	r2,17195
 1002a7c:	108ac004 	addi	r2,r2,11008
 1002a80:	29000c17 	ldw	r4,48(r5)
 1002a84:	18800b26 	beq	r3,r2,1002ab4 <__cxa_begin_catch+0x9c>
 1002a88:	38001d1e 	bne	r7,zero,1002b00 <__cxa_begin_catch+0xe8>
 1002a8c:	d8000d15 	stw	zero,52(sp)
 1002a90:	31400015 	stw	r5,0(r6)
 1002a94:	d809883a 	mov	r4,sp
 1002a98:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 1002a9c:	d8800d17 	ldw	r2,52(sp)
 1002aa0:	dfc01117 	ldw	ra,68(sp)
 1002aa4:	df001017 	ldw	fp,64(sp)
 1002aa8:	ddc00f17 	ldw	r23,60(sp)
 1002aac:	dec01204 	addi	sp,sp,72
 1002ab0:	f800283a 	ret
 1002ab4:	0091d3b4 	movhi	r2,18254
 1002ab8:	109550c4 	addi	r2,r2,21827
 1002abc:	20bff21e 	bne	r4,r2,1002a88 <__cxa_begin_catch+0x70>
 1002ac0:	28c00517 	ldw	r3,20(r5)
 1002ac4:	18000b16 	blt	r3,zero,1002af4 <__cxa_begin_catch+0xdc>
 1002ac8:	18800044 	addi	r2,r3,1
 1002acc:	28800515 	stw	r2,20(r5)
 1002ad0:	30800117 	ldw	r2,4(r6)
 1002ad4:	10bfffc4 	addi	r2,r2,-1
 1002ad8:	30800115 	stw	r2,4(r6)
 1002adc:	39400226 	beq	r7,r5,1002ae8 <__cxa_begin_catch+0xd0>
 1002ae0:	29c00415 	stw	r7,16(r5)
 1002ae4:	31400015 	stw	r5,0(r6)
 1002ae8:	29400a17 	ldw	r5,40(r5)
 1002aec:	d9400d15 	stw	r5,52(sp)
 1002af0:	003fe806 	br	1002a94 <__cxa_begin_catch+0x7c>
 1002af4:	00800044 	movi	r2,1
 1002af8:	10c5c83a 	sub	r2,r2,r3
 1002afc:	003ff306 	br	1002acc <__cxa_begin_catch+0xb4>
 1002b00:	00800044 	movi	r2,1
 1002b04:	d8800115 	stw	r2,4(sp)
 1002b08:	10024180 	call	1002418 <_ZSt9terminatev>
 1002b0c:	d8800317 	ldw	r2,12(sp)
 1002b10:	00ffffc4 	movi	r3,-1
 1002b14:	d9000217 	ldw	r4,8(sp)
 1002b18:	10c00226 	beq	r2,r3,1002b24 <__cxa_begin_catch+0x10c>
 1002b1c:	d8c00115 	stw	r3,4(sp)
 1002b20:	10032100 	call	1003210 <_Unwind_SjLj_Resume>
 1002b24:	00bfffc4 	movi	r2,-1
 1002b28:	d8800115 	stw	r2,4(sp)
 1002b2c:	1001cdc0 	call	1001cdc <__cxa_call_unexpected>

01002b30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 1002b30:	20c00017 	ldw	r3,0(r4)
 1002b34:	defffa04 	addi	sp,sp,-24
 1002b38:	dc000415 	stw	r16,16(sp)
 1002b3c:	1a000617 	ldw	r8,24(r3)
 1002b40:	3021883a 	mov	r16,r6
 1002b44:	31800017 	ldw	r6,0(r6)
 1002b48:	00800404 	movi	r2,16
 1002b4c:	dfc00515 	stw	ra,20(sp)
 1002b50:	d8800215 	stw	r2,8(sp)
 1002b54:	d8000015 	stw	zero,0(sp)
 1002b58:	d8000115 	stw	zero,4(sp)
 1002b5c:	d8000315 	stw	zero,12(sp)
 1002b60:	d80f883a 	mov	r7,sp
 1002b64:	403ee83a 	callr	r8
 1002b68:	d8800117 	ldw	r2,4(sp)
 1002b6c:	00c00184 	movi	r3,6
 1002b70:	0009883a 	mov	r4,zero
 1002b74:	1080018c 	andi	r2,r2,6
 1002b78:	10c0031e 	bne	r2,r3,1002b88 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 1002b7c:	d8800017 	ldw	r2,0(sp)
 1002b80:	01000044 	movi	r4,1
 1002b84:	80800015 	stw	r2,0(r16)
 1002b88:	2005883a 	mov	r2,r4
 1002b8c:	dfc00517 	ldw	ra,20(sp)
 1002b90:	dc000417 	ldw	r16,16(sp)
 1002b94:	dec00604 	addi	sp,sp,24
 1002b98:	f800283a 	ret

01002b9c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 1002b9c:	d8800017 	ldw	r2,0(sp)
 1002ba0:	00c00184 	movi	r3,6
 1002ba4:	1180021e 	bne	r2,r6,1002bb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 1002ba8:	1805883a 	mov	r2,r3
 1002bac:	f800283a 	ret
 1002bb0:	00c00044 	movi	r3,1
 1002bb4:	1805883a 	mov	r2,r3
 1002bb8:	f800283a 	ret

01002bbc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 1002bbc:	defffe04 	addi	sp,sp,-8
 1002bc0:	00804074 	movhi	r2,257
 1002bc4:	10869d04 	addi	r2,r2,6772
 1002bc8:	dc400015 	stw	r17,0(sp)
 1002bcc:	20800015 	stw	r2,0(r4)
 1002bd0:	2023883a 	mov	r17,r4
 1002bd4:	dfc00115 	stw	ra,4(sp)
 1002bd8:	1002efc0 	call	1002efc <_ZNSt9type_infoD2Ev>
 1002bdc:	8809883a 	mov	r4,r17
 1002be0:	dfc00117 	ldw	ra,4(sp)
 1002be4:	dc400017 	ldw	r17,0(sp)
 1002be8:	dec00204 	addi	sp,sp,8
 1002bec:	10017441 	jmpi	1001744 <_ZdlPv>

01002bf0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 1002bf0:	00804074 	movhi	r2,257
 1002bf4:	10869d04 	addi	r2,r2,6772
 1002bf8:	20800015 	stw	r2,0(r4)
 1002bfc:	1002efc1 	jmpi	1002efc <_ZNSt9type_infoD2Ev>

01002c00 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 1002c00:	00804074 	movhi	r2,257
 1002c04:	10869d04 	addi	r2,r2,6772
 1002c08:	20800015 	stw	r2,0(r4)
 1002c0c:	1002efc1 	jmpi	1002efc <_ZNSt9type_infoD2Ev>

01002c10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 1002c10:	2811883a 	mov	r8,r5
 1002c14:	20c00117 	ldw	r3,4(r4)
 1002c18:	40800117 	ldw	r2,4(r8)
 1002c1c:	deffff04 	addi	sp,sp,-4
 1002c20:	dfc00015 	stw	ra,0(sp)
 1002c24:	200b883a 	mov	r5,r4
 1002c28:	02400044 	movi	r9,1
 1002c2c:	18800426 	beq	r3,r2,1002c40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 1002c30:	008000c4 	movi	r2,3
 1002c34:	4009883a 	mov	r4,r8
 1002c38:	0013883a 	mov	r9,zero
 1002c3c:	11c0042e 	bgeu	r2,r7,1002c50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 1002c40:	4805883a 	mov	r2,r9
 1002c44:	dfc00017 	ldw	ra,0(sp)
 1002c48:	dec00104 	addi	sp,sp,4
 1002c4c:	f800283a 	ret
 1002c50:	40800017 	ldw	r2,0(r8)
 1002c54:	10c00517 	ldw	r3,20(r2)
 1002c58:	183ee83a 	callr	r3
 1002c5c:	12403fcc 	andi	r9,r2,255
 1002c60:	4805883a 	mov	r2,r9
 1002c64:	dfc00017 	ldw	ra,0(sp)
 1002c68:	dec00104 	addi	sp,sp,4
 1002c6c:	f800283a 	ret

01002c70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 1002c70:	20c00117 	ldw	r3,4(r4)
 1002c74:	28800117 	ldw	r2,4(r5)
 1002c78:	0009883a 	mov	r4,zero
 1002c7c:	1880061e 	bne	r3,r2,1002c98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 1002c80:	00800184 	movi	r2,6
 1002c84:	38800115 	stw	r2,4(r7)
 1002c88:	00800204 	movi	r2,8
 1002c8c:	39800015 	stw	r6,0(r7)
 1002c90:	38800315 	stw	r2,12(r7)
 1002c94:	01000044 	movi	r4,1
 1002c98:	2005883a 	mov	r2,r4
 1002c9c:	f800283a 	ret

01002ca0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 1002ca0:	da000017 	ldw	r8,0(sp)
 1002ca4:	d8800217 	ldw	r2,8(sp)
 1002ca8:	d9400317 	ldw	r5,12(sp)
 1002cac:	40800926 	beq	r8,r2,1002cd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 1002cb0:	21000117 	ldw	r4,4(r4)
 1002cb4:	38800117 	ldw	r2,4(r7)
 1002cb8:	2080041e 	bne	r4,r2,1002ccc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 1002cbc:	00800044 	movi	r2,1
 1002cc0:	28800315 	stw	r2,12(r5)
 1002cc4:	2a000015 	stw	r8,0(r5)
 1002cc8:	29800115 	stw	r6,4(r5)
 1002ccc:	0005883a 	mov	r2,zero
 1002cd0:	f800283a 	ret
 1002cd4:	d8800117 	ldw	r2,4(sp)
 1002cd8:	21000117 	ldw	r4,4(r4)
 1002cdc:	10c00117 	ldw	r3,4(r2)
 1002ce0:	20fff41e 	bne	r4,r3,1002cb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 1002ce4:	29800215 	stw	r6,8(r5)
 1002ce8:	003ff806 	br	1002ccc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

01002cec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 1002cec:	defffb04 	addi	sp,sp,-20
 1002cf0:	dd400315 	stw	r21,12(sp)
 1002cf4:	dcc00215 	stw	r19,8(sp)
 1002cf8:	dc400115 	stw	r17,4(sp)
 1002cfc:	dc000015 	stw	r16,0(sp)
 1002d00:	2823883a 	mov	r17,r5
 1002d04:	3027883a 	mov	r19,r6
 1002d08:	382b883a 	mov	r21,r7
 1002d0c:	dfc00415 	stw	ra,16(sp)
 1002d10:	2021883a 	mov	r16,r4
 1002d14:	1002c700 	call	1002c70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 1002d18:	10803fcc 	andi	r2,r2,255
 1002d1c:	880b883a 	mov	r5,r17
 1002d20:	980d883a 	mov	r6,r19
 1002d24:	a80f883a 	mov	r7,r21
 1002d28:	00c00044 	movi	r3,1
 1002d2c:	1000051e 	bne	r2,zero,1002d44 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 1002d30:	81000217 	ldw	r4,8(r16)
 1002d34:	20800017 	ldw	r2,0(r4)
 1002d38:	10c00617 	ldw	r3,24(r2)
 1002d3c:	183ee83a 	callr	r3
 1002d40:	10c03fcc 	andi	r3,r2,255
 1002d44:	1805883a 	mov	r2,r3
 1002d48:	dfc00417 	ldw	ra,16(sp)
 1002d4c:	dd400317 	ldw	r21,12(sp)
 1002d50:	dcc00217 	ldw	r19,8(sp)
 1002d54:	dc400117 	ldw	r17,4(sp)
 1002d58:	dc000017 	ldw	r16,0(sp)
 1002d5c:	dec00504 	addi	sp,sp,20
 1002d60:	f800283a 	ret

01002d64 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 1002d64:	defffe04 	addi	sp,sp,-8
 1002d68:	00804074 	movhi	r2,257
 1002d6c:	1086b404 	addi	r2,r2,6864
 1002d70:	dc400015 	stw	r17,0(sp)
 1002d74:	20800015 	stw	r2,0(r4)
 1002d78:	2023883a 	mov	r17,r4
 1002d7c:	dfc00115 	stw	ra,4(sp)
 1002d80:	1002c000 	call	1002c00 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 1002d84:	8809883a 	mov	r4,r17
 1002d88:	dfc00117 	ldw	ra,4(sp)
 1002d8c:	dc400017 	ldw	r17,0(sp)
 1002d90:	dec00204 	addi	sp,sp,8
 1002d94:	10017441 	jmpi	1001744 <_ZdlPv>

01002d98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 1002d98:	00804074 	movhi	r2,257
 1002d9c:	1086b404 	addi	r2,r2,6864
 1002da0:	20800015 	stw	r2,0(r4)
 1002da4:	1002c001 	jmpi	1002c00 <_ZN10__cxxabiv117__class_type_infoD2Ev>

01002da8 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 1002da8:	00804074 	movhi	r2,257
 1002dac:	1086b404 	addi	r2,r2,6864
 1002db0:	20800015 	stw	r2,0(r4)
 1002db4:	1002c001 	jmpi	1002c00 <_ZN10__cxxabiv117__class_type_infoD2Ev>

01002db8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 1002db8:	da400017 	ldw	r9,0(sp)
 1002dbc:	2011883a 	mov	r8,r4
 1002dc0:	49800526 	beq	r9,r6,1002dd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 1002dc4:	41000217 	ldw	r4,8(r8)
 1002dc8:	20800017 	ldw	r2,0(r4)
 1002dcc:	da400015 	stw	r9,0(sp)
 1002dd0:	10c00817 	ldw	r3,32(r2)
 1002dd4:	1800683a 	jmp	r3
 1002dd8:	39000117 	ldw	r4,4(r7)
 1002ddc:	40c00117 	ldw	r3,4(r8)
 1002de0:	00800184 	movi	r2,6
 1002de4:	193ff71e 	bne	r3,r4,1002dc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 1002de8:	f800283a 	ret

01002dec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 1002dec:	20c00117 	ldw	r3,4(r4)
 1002df0:	38800117 	ldw	r2,4(r7)
 1002df4:	defffb04 	addi	sp,sp,-20
 1002df8:	dfc00415 	stw	ra,16(sp)
 1002dfc:	da000517 	ldw	r8,20(sp)
 1002e00:	dac00617 	ldw	r11,24(sp)
 1002e04:	da400717 	ldw	r9,28(sp)
 1002e08:	da800817 	ldw	r10,32(sp)
 1002e0c:	18800c1e 	bne	r3,r2,1002e40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 1002e10:	51800115 	stw	r6,4(r10)
 1002e14:	52000015 	stw	r8,0(r10)
 1002e18:	28001c16 	blt	r5,zero,1002e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 1002e1c:	4145883a 	add	r2,r8,r5
 1002e20:	48801e26 	beq	r9,r2,1002e9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 1002e24:	00800044 	movi	r2,1
 1002e28:	0007883a 	mov	r3,zero
 1002e2c:	50800315 	stw	r2,12(r10)
 1002e30:	1805883a 	mov	r2,r3
 1002e34:	dfc00417 	ldw	ra,16(sp)
 1002e38:	dec00504 	addi	sp,sp,20
 1002e3c:	f800283a 	ret
 1002e40:	42400d26 	beq	r8,r9,1002e78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 1002e44:	21000217 	ldw	r4,8(r4)
 1002e48:	20800017 	ldw	r2,0(r4)
 1002e4c:	da000015 	stw	r8,0(sp)
 1002e50:	dac00115 	stw	r11,4(sp)
 1002e54:	da400215 	stw	r9,8(sp)
 1002e58:	da800315 	stw	r10,12(sp)
 1002e5c:	10c00717 	ldw	r3,28(r2)
 1002e60:	183ee83a 	callr	r3
 1002e64:	10c03fcc 	andi	r3,r2,255
 1002e68:	1805883a 	mov	r2,r3
 1002e6c:	dfc00417 	ldw	ra,16(sp)
 1002e70:	dec00504 	addi	sp,sp,20
 1002e74:	f800283a 	ret
 1002e78:	58800117 	ldw	r2,4(r11)
 1002e7c:	18bff11e 	bne	r3,r2,1002e44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 1002e80:	0007883a 	mov	r3,zero
 1002e84:	51800215 	stw	r6,8(r10)
 1002e88:	003fe906 	br	1002e30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1002e8c:	00bfff84 	movi	r2,-2
 1002e90:	28800426 	beq	r5,r2,1002ea4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 1002e94:	0007883a 	mov	r3,zero
 1002e98:	003fe506 	br	1002e30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 1002e9c:	00800184 	movi	r2,6
 1002ea0:	003fe106 	br	1002e28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 1002ea4:	00800044 	movi	r2,1
 1002ea8:	0007883a 	mov	r3,zero
 1002eac:	50800315 	stw	r2,12(r10)
 1002eb0:	003fdf06 	br	1002e30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

01002eb4 <_ZNKSt9type_info14__is_pointer_pEv>:
 1002eb4:	0005883a 	mov	r2,zero
 1002eb8:	f800283a 	ret

01002ebc <_ZNKSt9type_info15__is_function_pEv>:
 1002ebc:	0005883a 	mov	r2,zero
 1002ec0:	f800283a 	ret

01002ec4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 1002ec4:	20c00117 	ldw	r3,4(r4)
 1002ec8:	28800117 	ldw	r2,4(r5)
 1002ecc:	1885003a 	cmpeq	r2,r3,r2
 1002ed0:	f800283a 	ret

01002ed4 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 1002ed4:	0005883a 	mov	r2,zero
 1002ed8:	f800283a 	ret

01002edc <_ZNSt9type_infoD0Ev>:
 1002edc:	00804074 	movhi	r2,257
 1002ee0:	1086cc04 	addi	r2,r2,6960
 1002ee4:	20800015 	stw	r2,0(r4)
 1002ee8:	10017441 	jmpi	1001744 <_ZdlPv>

01002eec <_ZNSt9type_infoD1Ev>:
 1002eec:	00804074 	movhi	r2,257
 1002ef0:	1086cc04 	addi	r2,r2,6960
 1002ef4:	20800015 	stw	r2,0(r4)
 1002ef8:	f800283a 	ret

01002efc <_ZNSt9type_infoD2Ev>:
 1002efc:	00804074 	movhi	r2,257
 1002f00:	1086cc04 	addi	r2,r2,6960
 1002f04:	20800015 	stw	r2,0(r4)
 1002f08:	f800283a 	ret

01002f0c <__mulsi3>:
 1002f0c:	20000a26 	beq	r4,zero,1002f38 <__mulsi3+0x2c>
 1002f10:	0007883a 	mov	r3,zero
 1002f14:	2080004c 	andi	r2,r4,1
 1002f18:	1005003a 	cmpeq	r2,r2,zero
 1002f1c:	2008d07a 	srli	r4,r4,1
 1002f20:	1000011e 	bne	r2,zero,1002f28 <__mulsi3+0x1c>
 1002f24:	1947883a 	add	r3,r3,r5
 1002f28:	294b883a 	add	r5,r5,r5
 1002f2c:	203ff91e 	bne	r4,zero,1002f14 <__mulsi3+0x8>
 1002f30:	1805883a 	mov	r2,r3
 1002f34:	f800283a 	ret
 1002f38:	0007883a 	mov	r3,zero
 1002f3c:	1805883a 	mov	r2,r3
 1002f40:	f800283a 	ret

01002f44 <_Unwind_SjLj_Register>:
 1002f44:	d0a6ef17 	ldw	r2,-25668(gp)
 1002f48:	20800015 	stw	r2,0(r4)
 1002f4c:	d126ef15 	stw	r4,-25668(gp)
 1002f50:	f800283a 	ret

01002f54 <_Unwind_SjLj_Unregister>:
 1002f54:	20800017 	ldw	r2,0(r4)
 1002f58:	d0a6ef15 	stw	r2,-25668(gp)
 1002f5c:	f800283a 	ret

01002f60 <_Unwind_GetGR>:
 1002f60:	20800017 	ldw	r2,0(r4)
 1002f64:	294b883a 	add	r5,r5,r5
 1002f68:	294b883a 	add	r5,r5,r5
 1002f6c:	288b883a 	add	r5,r5,r2
 1002f70:	28800217 	ldw	r2,8(r5)
 1002f74:	f800283a 	ret

01002f78 <_Unwind_GetCFA>:
 1002f78:	21000017 	ldw	r4,0(r4)
 1002f7c:	0005883a 	mov	r2,zero
 1002f80:	20000126 	beq	r4,zero,1002f88 <_Unwind_GetCFA+0x10>
 1002f84:	20800a17 	ldw	r2,40(r4)
 1002f88:	f800283a 	ret

01002f8c <_Unwind_SetGR>:
 1002f8c:	20800017 	ldw	r2,0(r4)
 1002f90:	294b883a 	add	r5,r5,r5
 1002f94:	294b883a 	add	r5,r5,r5
 1002f98:	288b883a 	add	r5,r5,r2
 1002f9c:	29800215 	stw	r6,8(r5)
 1002fa0:	f800283a 	ret

01002fa4 <_Unwind_GetIP>:
 1002fa4:	20c00017 	ldw	r3,0(r4)
 1002fa8:	18800117 	ldw	r2,4(r3)
 1002fac:	10800044 	addi	r2,r2,1
 1002fb0:	f800283a 	ret

01002fb4 <_Unwind_GetIPInfo>:
 1002fb4:	20c00017 	ldw	r3,0(r4)
 1002fb8:	28000015 	stw	zero,0(r5)
 1002fbc:	18800117 	ldw	r2,4(r3)
 1002fc0:	10800044 	addi	r2,r2,1
 1002fc4:	f800283a 	ret

01002fc8 <_Unwind_SetIP>:
 1002fc8:	20800017 	ldw	r2,0(r4)
 1002fcc:	297fffc4 	addi	r5,r5,-1
 1002fd0:	11400115 	stw	r5,4(r2)
 1002fd4:	f800283a 	ret

01002fd8 <_Unwind_GetLanguageSpecificData>:
 1002fd8:	20c00017 	ldw	r3,0(r4)
 1002fdc:	18800717 	ldw	r2,28(r3)
 1002fe0:	f800283a 	ret

01002fe4 <_Unwind_GetRegionStart>:
 1002fe4:	0005883a 	mov	r2,zero
 1002fe8:	f800283a 	ret

01002fec <_Unwind_FindEnclosingFunction>:
 1002fec:	0005883a 	mov	r2,zero
 1002ff0:	f800283a 	ret

01002ff4 <_Unwind_GetDataRelBase>:
 1002ff4:	0005883a 	mov	r2,zero
 1002ff8:	f800283a 	ret

01002ffc <_Unwind_GetTextRelBase>:
 1002ffc:	0005883a 	mov	r2,zero
 1003000:	f800283a 	ret

01003004 <_Unwind_ForcedUnwind_Phase2>:
 1003004:	defff604 	addi	sp,sp,-40
 1003008:	dd400815 	stw	r21,32(sp)
 100300c:	dd000715 	stw	r20,28(sp)
 1003010:	25400317 	ldw	r21,12(r4)
 1003014:	25000417 	ldw	r20,16(r4)
 1003018:	28800017 	ldw	r2,0(r5)
 100301c:	dc800515 	stw	r18,20(sp)
 1003020:	dc000315 	stw	r16,12(sp)
 1003024:	2825883a 	mov	r18,r5
 1003028:	2021883a 	mov	r16,r4
 100302c:	dfc00915 	stw	ra,36(sp)
 1003030:	dcc00615 	stw	r19,24(sp)
 1003034:	dc400415 	stw	r17,16(sp)
 1003038:	00001406 	br	100308c <_Unwind_ForcedUnwind_Phase2+0x88>
 100303c:	00800144 	movi	r2,5
 1003040:	88802626 	beq	r17,r2,10030dc <_Unwind_ForcedUnwind_Phase2+0xd8>
 1003044:	98000c26 	beq	r19,zero,1003078 <_Unwind_ForcedUnwind_Phase2+0x74>
 1003048:	82000017 	ldw	r8,0(r16)
 100304c:	dc000015 	stw	r16,0(sp)
 1003050:	dc800115 	stw	r18,4(sp)
 1003054:	82400117 	ldw	r9,4(r16)
 1003058:	400d883a 	mov	r6,r8
 100305c:	480f883a 	mov	r7,r9
 1003060:	983ee83a 	callr	r19
 1003064:	1023883a 	mov	r17,r2
 1003068:	008001c4 	movi	r2,7
 100306c:	88801b26 	beq	r17,r2,10030dc <_Unwind_ForcedUnwind_Phase2+0xd8>
 1003070:	00800204 	movi	r2,8
 1003074:	8880181e 	bne	r17,r2,10030d8 <_Unwind_ForcedUnwind_Phase2+0xd4>
 1003078:	91000017 	ldw	r4,0(r18)
 100307c:	1002f540 	call	1002f54 <_Unwind_SjLj_Unregister>
 1003080:	90800017 	ldw	r2,0(r18)
 1003084:	10800017 	ldw	r2,0(r2)
 1003088:	90800015 	stw	r2,0(r18)
 100308c:	01400684 	movi	r5,26
 1003090:	04400144 	movi	r17,5
 1003094:	0027883a 	mov	r19,zero
 1003098:	10000326 	beq	r2,zero,10030a8 <_Unwind_ForcedUnwind_Phase2+0xa4>
 100309c:	14c00617 	ldw	r19,24(r2)
 10030a0:	0023883a 	mov	r17,zero
 10030a4:	01400284 	movi	r5,10
 10030a8:	dc000015 	stw	r16,0(sp)
 10030ac:	dc800115 	stw	r18,4(sp)
 10030b0:	80800017 	ldw	r2,0(r16)
 10030b4:	dd000215 	stw	r20,8(sp)
 10030b8:	80c00117 	ldw	r3,4(r16)
 10030bc:	01000044 	movi	r4,1
 10030c0:	100d883a 	mov	r6,r2
 10030c4:	180f883a 	mov	r7,r3
 10030c8:	a83ee83a 	callr	r21
 10030cc:	01400284 	movi	r5,10
 10030d0:	01000044 	movi	r4,1
 10030d4:	103fd926 	beq	r2,zero,100303c <_Unwind_ForcedUnwind_Phase2+0x38>
 10030d8:	04400084 	movi	r17,2
 10030dc:	8805883a 	mov	r2,r17
 10030e0:	dfc00917 	ldw	ra,36(sp)
 10030e4:	dd400817 	ldw	r21,32(sp)
 10030e8:	dd000717 	ldw	r20,28(sp)
 10030ec:	dcc00617 	ldw	r19,24(sp)
 10030f0:	dc800517 	ldw	r18,20(sp)
 10030f4:	dc400417 	ldw	r17,16(sp)
 10030f8:	dc000317 	ldw	r16,12(sp)
 10030fc:	dec00a04 	addi	sp,sp,40
 1003100:	f800283a 	ret

01003104 <_Unwind_DeleteException>:
 1003104:	20800217 	ldw	r2,8(r4)
 1003108:	200b883a 	mov	r5,r4
 100310c:	01000044 	movi	r4,1
 1003110:	10000126 	beq	r2,zero,1003118 <_Unwind_DeleteException+0x14>
 1003114:	1000683a 	jmp	r2
 1003118:	f800283a 	ret

0100311c <_Unwind_RaiseException_Phase2>:
 100311c:	defffa04 	addi	sp,sp,-24
 1003120:	dc800415 	stw	r18,16(sp)
 1003124:	2825883a 	mov	r18,r5
 1003128:	29400017 	ldw	r5,0(r5)
 100312c:	dc400315 	stw	r17,12(sp)
 1003130:	dfc00515 	stw	ra,20(sp)
 1003134:	dc000215 	stw	r16,8(sp)
 1003138:	2023883a 	mov	r17,r4
 100313c:	28001b26 	beq	r5,zero,10031ac <_Unwind_RaiseException_Phase2+0x90>
 1003140:	88800417 	ldw	r2,16(r17)
 1003144:	0007883a 	mov	r3,zero
 1003148:	2a000617 	ldw	r8,24(r5)
 100314c:	28a1003a 	cmpeq	r16,r5,r2
 1003150:	802090ba 	slli	r16,r16,2
 1003154:	18001b1e 	bne	r3,zero,10031c4 <_Unwind_RaiseException_Phase2+0xa8>
 1003158:	40000e26 	beq	r8,zero,1003194 <_Unwind_RaiseException_Phase2+0x78>
 100315c:	88800017 	ldw	r2,0(r17)
 1003160:	dc400015 	stw	r17,0(sp)
 1003164:	dc800115 	stw	r18,4(sp)
 1003168:	88c00117 	ldw	r3,4(r17)
 100316c:	01000044 	movi	r4,1
 1003170:	81400094 	ori	r5,r16,2
 1003174:	180f883a 	mov	r7,r3
 1003178:	100d883a 	mov	r6,r2
 100317c:	403ee83a 	callr	r8
 1003180:	1007883a 	mov	r3,r2
 1003184:	008001c4 	movi	r2,7
 1003188:	18800f26 	beq	r3,r2,10031c8 <_Unwind_RaiseException_Phase2+0xac>
 100318c:	00800204 	movi	r2,8
 1003190:	18800c1e 	bne	r3,r2,10031c4 <_Unwind_RaiseException_Phase2+0xa8>
 1003194:	8000131e 	bne	r16,zero,10031e4 <_Unwind_RaiseException_Phase2+0xc8>
 1003198:	91400017 	ldw	r5,0(r18)
 100319c:	28800017 	ldw	r2,0(r5)
 10031a0:	100b883a 	mov	r5,r2
 10031a4:	90800015 	stw	r2,0(r18)
 10031a8:	283fe51e 	bne	r5,zero,1003140 <_Unwind_RaiseException_Phase2+0x24>
 10031ac:	88800417 	ldw	r2,16(r17)
 10031b0:	00c00144 	movi	r3,5
 10031b4:	0011883a 	mov	r8,zero
 10031b8:	28a1003a 	cmpeq	r16,r5,r2
 10031bc:	802090ba 	slli	r16,r16,2
 10031c0:	183fe526 	beq	r3,zero,1003158 <_Unwind_RaiseException_Phase2+0x3c>
 10031c4:	00c00084 	movi	r3,2
 10031c8:	1805883a 	mov	r2,r3
 10031cc:	dfc00517 	ldw	ra,20(sp)
 10031d0:	dc800417 	ldw	r18,16(sp)
 10031d4:	dc400317 	ldw	r17,12(sp)
 10031d8:	dc000217 	ldw	r16,8(sp)
 10031dc:	dec00604 	addi	sp,sp,24
 10031e0:	f800283a 	ret
 10031e4:	100348c0 	call	100348c <abort>

010031e8 <uw_install_context>:
 10031e8:	28800017 	ldw	r2,0(r5)
 10031ec:	deffff04 	addi	sp,sp,-4
 10031f0:	df000015 	stw	fp,0(sp)
 10031f4:	10c00804 	addi	r3,r2,32
 10031f8:	d839883a 	mov	fp,sp
 10031fc:	d0a6ef15 	stw	r2,-25668(gp)
 1003200:	19000117 	ldw	r4,4(r3)
 1003204:	1f000017 	ldw	fp,0(r3)
 1003208:	1ec00217 	ldw	sp,8(r3)
 100320c:	2000683a 	jmp	r4

01003210 <_Unwind_SjLj_Resume>:
 1003210:	d0e6ef17 	ldw	r3,-25668(gp)
 1003214:	20800317 	ldw	r2,12(r4)
 1003218:	defffc04 	addi	sp,sp,-16
 100321c:	dfc00315 	stw	ra,12(sp)
 1003220:	dc000215 	stw	r16,8(sp)
 1003224:	d8c00015 	stw	r3,0(sp)
 1003228:	d8c00115 	stw	r3,4(sp)
 100322c:	1000071e 	bne	r2,zero,100324c <_Unwind_SjLj_Resume+0x3c>
 1003230:	dc000104 	addi	r16,sp,4
 1003234:	800b883a 	mov	r5,r16
 1003238:	100311c0 	call	100311c <_Unwind_RaiseException_Phase2>
 100323c:	1007883a 	mov	r3,r2
 1003240:	008001c4 	movi	r2,7
 1003244:	18800626 	beq	r3,r2,1003260 <_Unwind_SjLj_Resume+0x50>
 1003248:	100348c0 	call	100348c <abort>
 100324c:	dc000104 	addi	r16,sp,4
 1003250:	800b883a 	mov	r5,r16
 1003254:	10030040 	call	1003004 <_Unwind_ForcedUnwind_Phase2>
 1003258:	1007883a 	mov	r3,r2
 100325c:	003ff806 	br	1003240 <_Unwind_SjLj_Resume+0x30>
 1003260:	800b883a 	mov	r5,r16
 1003264:	d809883a 	mov	r4,sp
 1003268:	10031e80 	call	10031e8 <uw_install_context>

0100326c <_Unwind_SjLj_RaiseException>:
 100326c:	d0a6ef17 	ldw	r2,-25668(gp)
 1003270:	defff804 	addi	sp,sp,-32
 1003274:	dc000415 	stw	r16,16(sp)
 1003278:	dfc00715 	stw	ra,28(sp)
 100327c:	dc800615 	stw	r18,24(sp)
 1003280:	dc400515 	stw	r17,20(sp)
 1003284:	2021883a 	mov	r16,r4
 1003288:	d8800215 	stw	r2,8(sp)
 100328c:	d8800315 	stw	r2,12(sp)
 1003290:	10001626 	beq	r2,zero,10032ec <_Unwind_SjLj_RaiseException+0x80>
 1003294:	dc400304 	addi	r17,sp,12
 1003298:	04800184 	movi	r18,6
 100329c:	00000106 	br	10032a4 <_Unwind_SjLj_RaiseException+0x38>
 10032a0:	d8800315 	stw	r2,12(sp)
 10032a4:	12000617 	ldw	r8,24(r2)
 10032a8:	40000d26 	beq	r8,zero,10032e0 <_Unwind_SjLj_RaiseException+0x74>
 10032ac:	80800017 	ldw	r2,0(r16)
 10032b0:	dc000015 	stw	r16,0(sp)
 10032b4:	80c00117 	ldw	r3,4(r16)
 10032b8:	01000044 	movi	r4,1
 10032bc:	dc400115 	stw	r17,4(sp)
 10032c0:	180f883a 	mov	r7,r3
 10032c4:	200b883a 	mov	r5,r4
 10032c8:	100d883a 	mov	r6,r2
 10032cc:	403ee83a 	callr	r8
 10032d0:	1007883a 	mov	r3,r2
 10032d4:	14800d26 	beq	r2,r18,100330c <_Unwind_SjLj_RaiseException+0xa0>
 10032d8:	00800204 	movi	r2,8
 10032dc:	1880191e 	bne	r3,r2,1003344 <_Unwind_SjLj_RaiseException+0xd8>
 10032e0:	d8800317 	ldw	r2,12(sp)
 10032e4:	10800017 	ldw	r2,0(r2)
 10032e8:	103fed1e 	bne	r2,zero,10032a0 <_Unwind_SjLj_RaiseException+0x34>
 10032ec:	00c00144 	movi	r3,5
 10032f0:	1805883a 	mov	r2,r3
 10032f4:	dfc00717 	ldw	ra,28(sp)
 10032f8:	dc800617 	ldw	r18,24(sp)
 10032fc:	dc400517 	ldw	r17,20(sp)
 1003300:	dc000417 	ldw	r16,16(sp)
 1003304:	dec00804 	addi	sp,sp,32
 1003308:	f800283a 	ret
 100330c:	d8800317 	ldw	r2,12(sp)
 1003310:	80000315 	stw	zero,12(r16)
 1003314:	8009883a 	mov	r4,r16
 1003318:	80800415 	stw	r2,16(r16)
 100331c:	d8800217 	ldw	r2,8(sp)
 1003320:	880b883a 	mov	r5,r17
 1003324:	d8800315 	stw	r2,12(sp)
 1003328:	100311c0 	call	100311c <_Unwind_RaiseException_Phase2>
 100332c:	1007883a 	mov	r3,r2
 1003330:	008001c4 	movi	r2,7
 1003334:	18bfee1e 	bne	r3,r2,10032f0 <_Unwind_SjLj_RaiseException+0x84>
 1003338:	880b883a 	mov	r5,r17
 100333c:	d9000204 	addi	r4,sp,8
 1003340:	10031e80 	call	10031e8 <uw_install_context>
 1003344:	00c000c4 	movi	r3,3
 1003348:	1805883a 	mov	r2,r3
 100334c:	dfc00717 	ldw	ra,28(sp)
 1003350:	dc800617 	ldw	r18,24(sp)
 1003354:	dc400517 	ldw	r17,20(sp)
 1003358:	dc000417 	ldw	r16,16(sp)
 100335c:	dec00804 	addi	sp,sp,32
 1003360:	f800283a 	ret

01003364 <_Unwind_SjLj_ForcedUnwind>:
 1003364:	defffc04 	addi	sp,sp,-16
 1003368:	d0a6ef17 	ldw	r2,-25668(gp)
 100336c:	dc000215 	stw	r16,8(sp)
 1003370:	dc000104 	addi	r16,sp,4
 1003374:	21400315 	stw	r5,12(r4)
 1003378:	21800415 	stw	r6,16(r4)
 100337c:	800b883a 	mov	r5,r16
 1003380:	dfc00315 	stw	ra,12(sp)
 1003384:	d8800015 	stw	r2,0(sp)
 1003388:	d8800115 	stw	r2,4(sp)
 100338c:	10030040 	call	1003004 <_Unwind_ForcedUnwind_Phase2>
 1003390:	00c001c4 	movi	r3,7
 1003394:	10c00426 	beq	r2,r3,10033a8 <_Unwind_SjLj_ForcedUnwind+0x44>
 1003398:	dfc00317 	ldw	ra,12(sp)
 100339c:	dc000217 	ldw	r16,8(sp)
 10033a0:	dec00404 	addi	sp,sp,16
 10033a4:	f800283a 	ret
 10033a8:	800b883a 	mov	r5,r16
 10033ac:	d809883a 	mov	r4,sp
 10033b0:	10031e80 	call	10031e8 <uw_install_context>

010033b4 <_Unwind_Backtrace>:
 10033b4:	d0a6ef17 	ldw	r2,-25668(gp)
 10033b8:	defffa04 	addi	sp,sp,-24
 10033bc:	dcc00415 	stw	r19,16(sp)
 10033c0:	dc800315 	stw	r18,12(sp)
 10033c4:	dc400215 	stw	r17,8(sp)
 10033c8:	2025883a 	mov	r18,r4
 10033cc:	2823883a 	mov	r17,r5
 10033d0:	04c00144 	movi	r19,5
 10033d4:	dfc00515 	stw	ra,20(sp)
 10033d8:	dc000115 	stw	r16,4(sp)
 10033dc:	d8800015 	stw	r2,0(sp)
 10033e0:	00000406 	br	10033f4 <_Unwind_Backtrace+0x40>
 10033e4:	84c00b26 	beq	r16,r19,1003414 <_Unwind_Backtrace+0x60>
 10033e8:	d8800017 	ldw	r2,0(sp)
 10033ec:	10800017 	ldw	r2,0(r2)
 10033f0:	d8800015 	stw	r2,0(sp)
 10033f4:	04000144 	movi	r16,5
 10033f8:	10000126 	beq	r2,zero,1003400 <_Unwind_Backtrace+0x4c>
 10033fc:	0021883a 	mov	r16,zero
 1003400:	d809883a 	mov	r4,sp
 1003404:	880b883a 	mov	r5,r17
 1003408:	903ee83a 	callr	r18
 100340c:	103ff526 	beq	r2,zero,10033e4 <_Unwind_Backtrace+0x30>
 1003410:	040000c4 	movi	r16,3
 1003414:	8005883a 	mov	r2,r16
 1003418:	dfc00517 	ldw	ra,20(sp)
 100341c:	dcc00417 	ldw	r19,16(sp)
 1003420:	dc800317 	ldw	r18,12(sp)
 1003424:	dc400217 	ldw	r17,8(sp)
 1003428:	dc000117 	ldw	r16,4(sp)
 100342c:	dec00604 	addi	sp,sp,24
 1003430:	f800283a 	ret

01003434 <_Unwind_SjLj_Resume_or_Rethrow>:
 1003434:	20800317 	ldw	r2,12(r4)
 1003438:	defffc04 	addi	sp,sp,-16
 100343c:	dfc00315 	stw	ra,12(sp)
 1003440:	dc000215 	stw	r16,8(sp)
 1003444:	10000926 	beq	r2,zero,100346c <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 1003448:	d0a6ef17 	ldw	r2,-25668(gp)
 100344c:	dc000104 	addi	r16,sp,4
 1003450:	800b883a 	mov	r5,r16
 1003454:	d8800015 	stw	r2,0(sp)
 1003458:	d8800115 	stw	r2,4(sp)
 100345c:	10030040 	call	1003004 <_Unwind_ForcedUnwind_Phase2>
 1003460:	00c001c4 	movi	r3,7
 1003464:	10c00626 	beq	r2,r3,1003480 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 1003468:	100348c0 	call	100348c <abort>
 100346c:	100326c0 	call	100326c <_Unwind_SjLj_RaiseException>
 1003470:	dfc00317 	ldw	ra,12(sp)
 1003474:	dc000217 	ldw	r16,8(sp)
 1003478:	dec00404 	addi	sp,sp,16
 100347c:	f800283a 	ret
 1003480:	800b883a 	mov	r5,r16
 1003484:	d809883a 	mov	r4,sp
 1003488:	10031e80 	call	10031e8 <uw_install_context>

0100348c <abort>:
 100348c:	deffff04 	addi	sp,sp,-4
 1003490:	01000184 	movi	r4,6
 1003494:	dfc00015 	stw	ra,0(sp)
 1003498:	100577c0 	call	100577c <raise>
 100349c:	01000044 	movi	r4,1
 10034a0:	100e3700 	call	100e370 <_exit>

010034a4 <_fclose_r>:
 10034a4:	defffc04 	addi	sp,sp,-16
 10034a8:	dc400115 	stw	r17,4(sp)
 10034ac:	dc000015 	stw	r16,0(sp)
 10034b0:	dfc00315 	stw	ra,12(sp)
 10034b4:	dc800215 	stw	r18,8(sp)
 10034b8:	2821883a 	mov	r16,r5
 10034bc:	2023883a 	mov	r17,r4
 10034c0:	28002926 	beq	r5,zero,1003568 <_fclose_r+0xc4>
 10034c4:	10038500 	call	1003850 <__sfp_lock_acquire>
 10034c8:	88000226 	beq	r17,zero,10034d4 <_fclose_r+0x30>
 10034cc:	88800e17 	ldw	r2,56(r17)
 10034d0:	10002d26 	beq	r2,zero,1003588 <_fclose_r+0xe4>
 10034d4:	8080030f 	ldh	r2,12(r16)
 10034d8:	10002226 	beq	r2,zero,1003564 <_fclose_r+0xc0>
 10034dc:	8809883a 	mov	r4,r17
 10034e0:	800b883a 	mov	r5,r16
 10034e4:	10035c80 	call	10035c8 <_fflush_r>
 10034e8:	1025883a 	mov	r18,r2
 10034ec:	80800b17 	ldw	r2,44(r16)
 10034f0:	10000426 	beq	r2,zero,1003504 <_fclose_r+0x60>
 10034f4:	81400717 	ldw	r5,28(r16)
 10034f8:	8809883a 	mov	r4,r17
 10034fc:	103ee83a 	callr	r2
 1003500:	10002a16 	blt	r2,zero,10035ac <_fclose_r+0x108>
 1003504:	8080030b 	ldhu	r2,12(r16)
 1003508:	1080200c 	andi	r2,r2,128
 100350c:	1000231e 	bne	r2,zero,100359c <_fclose_r+0xf8>
 1003510:	81400c17 	ldw	r5,48(r16)
 1003514:	28000526 	beq	r5,zero,100352c <_fclose_r+0x88>
 1003518:	80801004 	addi	r2,r16,64
 100351c:	28800226 	beq	r5,r2,1003528 <_fclose_r+0x84>
 1003520:	8809883a 	mov	r4,r17
 1003524:	1003d280 	call	1003d28 <_free_r>
 1003528:	80000c15 	stw	zero,48(r16)
 100352c:	81401117 	ldw	r5,68(r16)
 1003530:	28000326 	beq	r5,zero,1003540 <_fclose_r+0x9c>
 1003534:	8809883a 	mov	r4,r17
 1003538:	1003d280 	call	1003d28 <_free_r>
 100353c:	80001115 	stw	zero,68(r16)
 1003540:	8000030d 	sth	zero,12(r16)
 1003544:	10038540 	call	1003854 <__sfp_lock_release>
 1003548:	9005883a 	mov	r2,r18
 100354c:	dfc00317 	ldw	ra,12(sp)
 1003550:	dc800217 	ldw	r18,8(sp)
 1003554:	dc400117 	ldw	r17,4(sp)
 1003558:	dc000017 	ldw	r16,0(sp)
 100355c:	dec00404 	addi	sp,sp,16
 1003560:	f800283a 	ret
 1003564:	10038540 	call	1003854 <__sfp_lock_release>
 1003568:	0025883a 	mov	r18,zero
 100356c:	9005883a 	mov	r2,r18
 1003570:	dfc00317 	ldw	ra,12(sp)
 1003574:	dc800217 	ldw	r18,8(sp)
 1003578:	dc400117 	ldw	r17,4(sp)
 100357c:	dc000017 	ldw	r16,0(sp)
 1003580:	dec00404 	addi	sp,sp,16
 1003584:	f800283a 	ret
 1003588:	8809883a 	mov	r4,r17
 100358c:	10038600 	call	1003860 <__sinit>
 1003590:	8080030f 	ldh	r2,12(r16)
 1003594:	103fd11e 	bne	r2,zero,10034dc <_fclose_r+0x38>
 1003598:	003ff206 	br	1003564 <_fclose_r+0xc0>
 100359c:	81400417 	ldw	r5,16(r16)
 10035a0:	8809883a 	mov	r4,r17
 10035a4:	1003d280 	call	1003d28 <_free_r>
 10035a8:	003fd906 	br	1003510 <_fclose_r+0x6c>
 10035ac:	04bfffc4 	movi	r18,-1
 10035b0:	003fd406 	br	1003504 <_fclose_r+0x60>

010035b4 <fclose>:
 10035b4:	00804074 	movhi	r2,257
 10035b8:	108e6a04 	addi	r2,r2,14760
 10035bc:	200b883a 	mov	r5,r4
 10035c0:	11000017 	ldw	r4,0(r2)
 10035c4:	10034a41 	jmpi	10034a4 <_fclose_r>

010035c8 <_fflush_r>:
 10035c8:	defffb04 	addi	sp,sp,-20
 10035cc:	dcc00315 	stw	r19,12(sp)
 10035d0:	dc800215 	stw	r18,8(sp)
 10035d4:	dfc00415 	stw	ra,16(sp)
 10035d8:	dc400115 	stw	r17,4(sp)
 10035dc:	dc000015 	stw	r16,0(sp)
 10035e0:	2027883a 	mov	r19,r4
 10035e4:	2825883a 	mov	r18,r5
 10035e8:	20000226 	beq	r4,zero,10035f4 <_fflush_r+0x2c>
 10035ec:	20800e17 	ldw	r2,56(r4)
 10035f0:	10005626 	beq	r2,zero,100374c <_fflush_r+0x184>
 10035f4:	9100030b 	ldhu	r4,12(r18)
 10035f8:	20ffffcc 	andi	r3,r4,65535
 10035fc:	18e0001c 	xori	r3,r3,32768
 1003600:	18e00004 	addi	r3,r3,-32768
 1003604:	1880020c 	andi	r2,r3,8
 1003608:	1000261e 	bne	r2,zero,10036a4 <_fflush_r+0xdc>
 100360c:	90c00117 	ldw	r3,4(r18)
 1003610:	20820014 	ori	r2,r4,2048
 1003614:	9080030d 	sth	r2,12(r18)
 1003618:	1009883a 	mov	r4,r2
 100361c:	00c0400e 	bge	zero,r3,1003720 <_fflush_r+0x158>
 1003620:	92000a17 	ldw	r8,40(r18)
 1003624:	40004026 	beq	r8,zero,1003728 <_fflush_r+0x160>
 1003628:	2084000c 	andi	r2,r4,4096
 100362c:	10005326 	beq	r2,zero,100377c <_fflush_r+0x1b4>
 1003630:	94001417 	ldw	r16,80(r18)
 1003634:	9080030b 	ldhu	r2,12(r18)
 1003638:	1080010c 	andi	r2,r2,4
 100363c:	1000481e 	bne	r2,zero,1003760 <_fflush_r+0x198>
 1003640:	91400717 	ldw	r5,28(r18)
 1003644:	9809883a 	mov	r4,r19
 1003648:	800d883a 	mov	r6,r16
 100364c:	000f883a 	mov	r7,zero
 1003650:	403ee83a 	callr	r8
 1003654:	8080261e 	bne	r16,r2,10036f0 <_fflush_r+0x128>
 1003658:	9080030b 	ldhu	r2,12(r18)
 100365c:	91000417 	ldw	r4,16(r18)
 1003660:	90000115 	stw	zero,4(r18)
 1003664:	10bdffcc 	andi	r2,r2,63487
 1003668:	10ffffcc 	andi	r3,r2,65535
 100366c:	18c4000c 	andi	r3,r3,4096
 1003670:	9080030d 	sth	r2,12(r18)
 1003674:	91000015 	stw	r4,0(r18)
 1003678:	18002b26 	beq	r3,zero,1003728 <_fflush_r+0x160>
 100367c:	0007883a 	mov	r3,zero
 1003680:	1805883a 	mov	r2,r3
 1003684:	94001415 	stw	r16,80(r18)
 1003688:	dfc00417 	ldw	ra,16(sp)
 100368c:	dcc00317 	ldw	r19,12(sp)
 1003690:	dc800217 	ldw	r18,8(sp)
 1003694:	dc400117 	ldw	r17,4(sp)
 1003698:	dc000017 	ldw	r16,0(sp)
 100369c:	dec00504 	addi	sp,sp,20
 10036a0:	f800283a 	ret
 10036a4:	94400417 	ldw	r17,16(r18)
 10036a8:	88001f26 	beq	r17,zero,1003728 <_fflush_r+0x160>
 10036ac:	90800017 	ldw	r2,0(r18)
 10036b0:	18c000cc 	andi	r3,r3,3
 10036b4:	94400015 	stw	r17,0(r18)
 10036b8:	1461c83a 	sub	r16,r2,r17
 10036bc:	18002526 	beq	r3,zero,1003754 <_fflush_r+0x18c>
 10036c0:	0005883a 	mov	r2,zero
 10036c4:	90800215 	stw	r2,8(r18)
 10036c8:	0400170e 	bge	zero,r16,1003728 <_fflush_r+0x160>
 10036cc:	90c00917 	ldw	r3,36(r18)
 10036d0:	91400717 	ldw	r5,28(r18)
 10036d4:	880d883a 	mov	r6,r17
 10036d8:	800f883a 	mov	r7,r16
 10036dc:	9809883a 	mov	r4,r19
 10036e0:	183ee83a 	callr	r3
 10036e4:	88a3883a 	add	r17,r17,r2
 10036e8:	80a1c83a 	sub	r16,r16,r2
 10036ec:	00bff616 	blt	zero,r2,10036c8 <_fflush_r+0x100>
 10036f0:	9080030b 	ldhu	r2,12(r18)
 10036f4:	00ffffc4 	movi	r3,-1
 10036f8:	10801014 	ori	r2,r2,64
 10036fc:	9080030d 	sth	r2,12(r18)
 1003700:	1805883a 	mov	r2,r3
 1003704:	dfc00417 	ldw	ra,16(sp)
 1003708:	dcc00317 	ldw	r19,12(sp)
 100370c:	dc800217 	ldw	r18,8(sp)
 1003710:	dc400117 	ldw	r17,4(sp)
 1003714:	dc000017 	ldw	r16,0(sp)
 1003718:	dec00504 	addi	sp,sp,20
 100371c:	f800283a 	ret
 1003720:	90800f17 	ldw	r2,60(r18)
 1003724:	00bfbe16 	blt	zero,r2,1003620 <_fflush_r+0x58>
 1003728:	0007883a 	mov	r3,zero
 100372c:	1805883a 	mov	r2,r3
 1003730:	dfc00417 	ldw	ra,16(sp)
 1003734:	dcc00317 	ldw	r19,12(sp)
 1003738:	dc800217 	ldw	r18,8(sp)
 100373c:	dc400117 	ldw	r17,4(sp)
 1003740:	dc000017 	ldw	r16,0(sp)
 1003744:	dec00504 	addi	sp,sp,20
 1003748:	f800283a 	ret
 100374c:	10038600 	call	1003860 <__sinit>
 1003750:	003fa806 	br	10035f4 <_fflush_r+0x2c>
 1003754:	90800517 	ldw	r2,20(r18)
 1003758:	90800215 	stw	r2,8(r18)
 100375c:	003fda06 	br	10036c8 <_fflush_r+0x100>
 1003760:	90800117 	ldw	r2,4(r18)
 1003764:	90c00c17 	ldw	r3,48(r18)
 1003768:	80a1c83a 	sub	r16,r16,r2
 100376c:	183fb426 	beq	r3,zero,1003640 <_fflush_r+0x78>
 1003770:	90800f17 	ldw	r2,60(r18)
 1003774:	80a1c83a 	sub	r16,r16,r2
 1003778:	003fb106 	br	1003640 <_fflush_r+0x78>
 100377c:	91400717 	ldw	r5,28(r18)
 1003780:	9809883a 	mov	r4,r19
 1003784:	000d883a 	mov	r6,zero
 1003788:	01c00044 	movi	r7,1
 100378c:	403ee83a 	callr	r8
 1003790:	1021883a 	mov	r16,r2
 1003794:	00bfffc4 	movi	r2,-1
 1003798:	80800226 	beq	r16,r2,10037a4 <_fflush_r+0x1dc>
 100379c:	92000a17 	ldw	r8,40(r18)
 10037a0:	003fa406 	br	1003634 <_fflush_r+0x6c>
 10037a4:	98c00017 	ldw	r3,0(r19)
 10037a8:	00800744 	movi	r2,29
 10037ac:	18bfde26 	beq	r3,r2,1003728 <_fflush_r+0x160>
 10037b0:	9080030b 	ldhu	r2,12(r18)
 10037b4:	8007883a 	mov	r3,r16
 10037b8:	10801014 	ori	r2,r2,64
 10037bc:	9080030d 	sth	r2,12(r18)
 10037c0:	003fcf06 	br	1003700 <_fflush_r+0x138>

010037c4 <fflush>:
 10037c4:	01404034 	movhi	r5,256
 10037c8:	294d7204 	addi	r5,r5,13768
 10037cc:	2007883a 	mov	r3,r4
 10037d0:	20000526 	beq	r4,zero,10037e8 <fflush+0x24>
 10037d4:	00804074 	movhi	r2,257
 10037d8:	108e6a04 	addi	r2,r2,14760
 10037dc:	11000017 	ldw	r4,0(r2)
 10037e0:	180b883a 	mov	r5,r3
 10037e4:	10035c81 	jmpi	10035c8 <_fflush_r>
 10037e8:	00804074 	movhi	r2,257
 10037ec:	108e6b04 	addi	r2,r2,14764
 10037f0:	11000017 	ldw	r4,0(r2)
 10037f4:	10045101 	jmpi	1004510 <_fwalk_reent>

010037f8 <std>:
 10037f8:	00804034 	movhi	r2,256
 10037fc:	10968004 	addi	r2,r2,23040
 1003800:	20800b15 	stw	r2,44(r4)
 1003804:	00804034 	movhi	r2,256
 1003808:	1096bb04 	addi	r2,r2,23276
 100380c:	20800815 	stw	r2,32(r4)
 1003810:	00c04034 	movhi	r3,256
 1003814:	18d69c04 	addi	r3,r3,23152
 1003818:	00804034 	movhi	r2,256
 100381c:	10968204 	addi	r2,r2,23048
 1003820:	2140030d 	sth	r5,12(r4)
 1003824:	2180038d 	sth	r6,14(r4)
 1003828:	20c00915 	stw	r3,36(r4)
 100382c:	20800a15 	stw	r2,40(r4)
 1003830:	20000015 	stw	zero,0(r4)
 1003834:	20000115 	stw	zero,4(r4)
 1003838:	20000215 	stw	zero,8(r4)
 100383c:	20000415 	stw	zero,16(r4)
 1003840:	20000515 	stw	zero,20(r4)
 1003844:	20000615 	stw	zero,24(r4)
 1003848:	21000715 	stw	r4,28(r4)
 100384c:	f800283a 	ret

01003850 <__sfp_lock_acquire>:
 1003850:	f800283a 	ret

01003854 <__sfp_lock_release>:
 1003854:	f800283a 	ret

01003858 <__sinit_lock_acquire>:
 1003858:	f800283a 	ret

0100385c <__sinit_lock_release>:
 100385c:	f800283a 	ret

01003860 <__sinit>:
 1003860:	20800e17 	ldw	r2,56(r4)
 1003864:	defffd04 	addi	sp,sp,-12
 1003868:	dc400115 	stw	r17,4(sp)
 100386c:	dc000015 	stw	r16,0(sp)
 1003870:	dfc00215 	stw	ra,8(sp)
 1003874:	04400044 	movi	r17,1
 1003878:	01400104 	movi	r5,4
 100387c:	000d883a 	mov	r6,zero
 1003880:	2021883a 	mov	r16,r4
 1003884:	2200bb04 	addi	r8,r4,748
 1003888:	200f883a 	mov	r7,r4
 100388c:	10000526 	beq	r2,zero,10038a4 <__sinit+0x44>
 1003890:	dfc00217 	ldw	ra,8(sp)
 1003894:	dc400117 	ldw	r17,4(sp)
 1003898:	dc000017 	ldw	r16,0(sp)
 100389c:	dec00304 	addi	sp,sp,12
 10038a0:	f800283a 	ret
 10038a4:	21000117 	ldw	r4,4(r4)
 10038a8:	00804034 	movhi	r2,256
 10038ac:	108e5104 	addi	r2,r2,14660
 10038b0:	00c000c4 	movi	r3,3
 10038b4:	80800f15 	stw	r2,60(r16)
 10038b8:	80c0b915 	stw	r3,740(r16)
 10038bc:	8200ba15 	stw	r8,744(r16)
 10038c0:	84400e15 	stw	r17,56(r16)
 10038c4:	8000b815 	stw	zero,736(r16)
 10038c8:	10037f80 	call	10037f8 <std>
 10038cc:	81000217 	ldw	r4,8(r16)
 10038d0:	880d883a 	mov	r6,r17
 10038d4:	800f883a 	mov	r7,r16
 10038d8:	01400284 	movi	r5,10
 10038dc:	10037f80 	call	10037f8 <std>
 10038e0:	81000317 	ldw	r4,12(r16)
 10038e4:	800f883a 	mov	r7,r16
 10038e8:	01400484 	movi	r5,18
 10038ec:	01800084 	movi	r6,2
 10038f0:	dfc00217 	ldw	ra,8(sp)
 10038f4:	dc400117 	ldw	r17,4(sp)
 10038f8:	dc000017 	ldw	r16,0(sp)
 10038fc:	dec00304 	addi	sp,sp,12
 1003900:	10037f81 	jmpi	10037f8 <std>

01003904 <__fp_lock>:
 1003904:	0005883a 	mov	r2,zero
 1003908:	f800283a 	ret

0100390c <__fp_unlock>:
 100390c:	0005883a 	mov	r2,zero
 1003910:	f800283a 	ret

01003914 <__fp_unlock_all>:
 1003914:	00804074 	movhi	r2,257
 1003918:	108e6a04 	addi	r2,r2,14760
 100391c:	11000017 	ldw	r4,0(r2)
 1003920:	01404034 	movhi	r5,256
 1003924:	294e4304 	addi	r5,r5,14604
 1003928:	10045d81 	jmpi	10045d8 <_fwalk>

0100392c <__fp_lock_all>:
 100392c:	00804074 	movhi	r2,257
 1003930:	108e6a04 	addi	r2,r2,14760
 1003934:	11000017 	ldw	r4,0(r2)
 1003938:	01404034 	movhi	r5,256
 100393c:	294e4104 	addi	r5,r5,14596
 1003940:	10045d81 	jmpi	10045d8 <_fwalk>

01003944 <_cleanup_r>:
 1003944:	01404034 	movhi	r5,256
 1003948:	294d6d04 	addi	r5,r5,13748
 100394c:	10045d81 	jmpi	10045d8 <_fwalk>

01003950 <_cleanup>:
 1003950:	00804074 	movhi	r2,257
 1003954:	108e6b04 	addi	r2,r2,14764
 1003958:	11000017 	ldw	r4,0(r2)
 100395c:	10039441 	jmpi	1003944 <_cleanup_r>

01003960 <__sfmoreglue>:
 1003960:	defffc04 	addi	sp,sp,-16
 1003964:	dc000015 	stw	r16,0(sp)
 1003968:	2821883a 	mov	r16,r5
 100396c:	dc400115 	stw	r17,4(sp)
 1003970:	01401704 	movi	r5,92
 1003974:	2023883a 	mov	r17,r4
 1003978:	8009883a 	mov	r4,r16
 100397c:	dfc00315 	stw	ra,12(sp)
 1003980:	dcc00215 	stw	r19,8(sp)
 1003984:	1002f0c0 	call	1002f0c <__mulsi3>
 1003988:	11400304 	addi	r5,r2,12
 100398c:	8809883a 	mov	r4,r17
 1003990:	1027883a 	mov	r19,r2
 1003994:	1004a600 	call	1004a60 <_malloc_r>
 1003998:	10c00304 	addi	r3,r2,12
 100399c:	1023883a 	mov	r17,r2
 10039a0:	1809883a 	mov	r4,r3
 10039a4:	980d883a 	mov	r6,r19
 10039a8:	000b883a 	mov	r5,zero
 10039ac:	10000b26 	beq	r2,zero,10039dc <__sfmoreglue+0x7c>
 10039b0:	14000115 	stw	r16,4(r2)
 10039b4:	10c00215 	stw	r3,8(r2)
 10039b8:	10000015 	stw	zero,0(r2)
 10039bc:	10051a00 	call	10051a0 <memset>
 10039c0:	8805883a 	mov	r2,r17
 10039c4:	dfc00317 	ldw	ra,12(sp)
 10039c8:	dcc00217 	ldw	r19,8(sp)
 10039cc:	dc400117 	ldw	r17,4(sp)
 10039d0:	dc000017 	ldw	r16,0(sp)
 10039d4:	dec00404 	addi	sp,sp,16
 10039d8:	f800283a 	ret
 10039dc:	0023883a 	mov	r17,zero
 10039e0:	8805883a 	mov	r2,r17
 10039e4:	dfc00317 	ldw	ra,12(sp)
 10039e8:	dcc00217 	ldw	r19,8(sp)
 10039ec:	dc400117 	ldw	r17,4(sp)
 10039f0:	dc000017 	ldw	r16,0(sp)
 10039f4:	dec00404 	addi	sp,sp,16
 10039f8:	f800283a 	ret

010039fc <__sfp>:
 10039fc:	defffd04 	addi	sp,sp,-12
 1003a00:	00804074 	movhi	r2,257
 1003a04:	108e6b04 	addi	r2,r2,14764
 1003a08:	dc000015 	stw	r16,0(sp)
 1003a0c:	14000017 	ldw	r16,0(r2)
 1003a10:	dc400115 	stw	r17,4(sp)
 1003a14:	dfc00215 	stw	ra,8(sp)
 1003a18:	80800e17 	ldw	r2,56(r16)
 1003a1c:	2023883a 	mov	r17,r4
 1003a20:	10002626 	beq	r2,zero,1003abc <__sfp+0xc0>
 1003a24:	8400b804 	addi	r16,r16,736
 1003a28:	80800117 	ldw	r2,4(r16)
 1003a2c:	81000217 	ldw	r4,8(r16)
 1003a30:	10ffffc4 	addi	r3,r2,-1
 1003a34:	18000916 	blt	r3,zero,1003a5c <__sfp+0x60>
 1003a38:	2080030f 	ldh	r2,12(r4)
 1003a3c:	10000b26 	beq	r2,zero,1003a6c <__sfp+0x70>
 1003a40:	017fffc4 	movi	r5,-1
 1003a44:	00000206 	br	1003a50 <__sfp+0x54>
 1003a48:	2080030f 	ldh	r2,12(r4)
 1003a4c:	10000726 	beq	r2,zero,1003a6c <__sfp+0x70>
 1003a50:	18ffffc4 	addi	r3,r3,-1
 1003a54:	21001704 	addi	r4,r4,92
 1003a58:	197ffb1e 	bne	r3,r5,1003a48 <__sfp+0x4c>
 1003a5c:	80800017 	ldw	r2,0(r16)
 1003a60:	10001926 	beq	r2,zero,1003ac8 <__sfp+0xcc>
 1003a64:	1021883a 	mov	r16,r2
 1003a68:	003fef06 	br	1003a28 <__sfp+0x2c>
 1003a6c:	00bfffc4 	movi	r2,-1
 1003a70:	00c00044 	movi	r3,1
 1003a74:	2080038d 	sth	r2,14(r4)
 1003a78:	20c0030d 	sth	r3,12(r4)
 1003a7c:	20000015 	stw	zero,0(r4)
 1003a80:	20000215 	stw	zero,8(r4)
 1003a84:	20000115 	stw	zero,4(r4)
 1003a88:	20000415 	stw	zero,16(r4)
 1003a8c:	20000515 	stw	zero,20(r4)
 1003a90:	20000615 	stw	zero,24(r4)
 1003a94:	20000c15 	stw	zero,48(r4)
 1003a98:	20000d15 	stw	zero,52(r4)
 1003a9c:	20001115 	stw	zero,68(r4)
 1003aa0:	20001215 	stw	zero,72(r4)
 1003aa4:	2005883a 	mov	r2,r4
 1003aa8:	dfc00217 	ldw	ra,8(sp)
 1003aac:	dc400117 	ldw	r17,4(sp)
 1003ab0:	dc000017 	ldw	r16,0(sp)
 1003ab4:	dec00304 	addi	sp,sp,12
 1003ab8:	f800283a 	ret
 1003abc:	8009883a 	mov	r4,r16
 1003ac0:	10038600 	call	1003860 <__sinit>
 1003ac4:	003fd706 	br	1003a24 <__sfp+0x28>
 1003ac8:	8809883a 	mov	r4,r17
 1003acc:	01400104 	movi	r5,4
 1003ad0:	10039600 	call	1003960 <__sfmoreglue>
 1003ad4:	80800015 	stw	r2,0(r16)
 1003ad8:	103fe21e 	bne	r2,zero,1003a64 <__sfp+0x68>
 1003adc:	00800304 	movi	r2,12
 1003ae0:	0009883a 	mov	r4,zero
 1003ae4:	88800015 	stw	r2,0(r17)
 1003ae8:	003fee06 	br	1003aa4 <__sfp+0xa8>

01003aec <_fopen_r>:
 1003aec:	defffa04 	addi	sp,sp,-24
 1003af0:	dcc00415 	stw	r19,16(sp)
 1003af4:	2827883a 	mov	r19,r5
 1003af8:	300b883a 	mov	r5,r6
 1003afc:	d80d883a 	mov	r6,sp
 1003b00:	dc800315 	stw	r18,12(sp)
 1003b04:	dc400215 	stw	r17,8(sp)
 1003b08:	dc000115 	stw	r16,4(sp)
 1003b0c:	dfc00515 	stw	ra,20(sp)
 1003b10:	2021883a 	mov	r16,r4
 1003b14:	10096380 	call	1009638 <__sflags>
 1003b18:	1025883a 	mov	r18,r2
 1003b1c:	8009883a 	mov	r4,r16
 1003b20:	0023883a 	mov	r17,zero
 1003b24:	1000081e 	bne	r2,zero,1003b48 <_fopen_r+0x5c>
 1003b28:	8805883a 	mov	r2,r17
 1003b2c:	dfc00517 	ldw	ra,20(sp)
 1003b30:	dcc00417 	ldw	r19,16(sp)
 1003b34:	dc800317 	ldw	r18,12(sp)
 1003b38:	dc400217 	ldw	r17,8(sp)
 1003b3c:	dc000117 	ldw	r16,4(sp)
 1003b40:	dec00604 	addi	sp,sp,24
 1003b44:	f800283a 	ret
 1003b48:	10039fc0 	call	10039fc <__sfp>
 1003b4c:	1023883a 	mov	r17,r2
 1003b50:	980b883a 	mov	r5,r19
 1003b54:	8009883a 	mov	r4,r16
 1003b58:	01c06d84 	movi	r7,438
 1003b5c:	103ff226 	beq	r2,zero,1003b28 <_fopen_r+0x3c>
 1003b60:	d9800017 	ldw	r6,0(sp)
 1003b64:	10052380 	call	1005238 <_open_r>
 1003b68:	10001816 	blt	r2,zero,1003bcc <_fopen_r+0xe0>
 1003b6c:	00c04034 	movhi	r3,256
 1003b70:	18d69c04 	addi	r3,r3,23152
 1003b74:	923fffcc 	andi	r8,r18,65535
 1003b78:	8880038d 	sth	r2,14(r17)
 1003b7c:	00804034 	movhi	r2,256
 1003b80:	1096bb04 	addi	r2,r2,23276
 1003b84:	88800815 	stw	r2,32(r17)
 1003b88:	88c00915 	stw	r3,36(r17)
 1003b8c:	00804034 	movhi	r2,256
 1003b90:	10968204 	addi	r2,r2,23048
 1003b94:	00c04034 	movhi	r3,256
 1003b98:	18d68004 	addi	r3,r3,23040
 1003b9c:	4200400c 	andi	r8,r8,256
 1003ba0:	8c80030d 	sth	r18,12(r17)
 1003ba4:	8009883a 	mov	r4,r16
 1003ba8:	880b883a 	mov	r5,r17
 1003bac:	000d883a 	mov	r6,zero
 1003bb0:	01c00084 	movi	r7,2
 1003bb4:	88800a15 	stw	r2,40(r17)
 1003bb8:	88c00b15 	stw	r3,44(r17)
 1003bbc:	8c400715 	stw	r17,28(r17)
 1003bc0:	403fd926 	beq	r8,zero,1003b28 <_fopen_r+0x3c>
 1003bc4:	100403c0 	call	100403c <_fseek_r>
 1003bc8:	003fd706 	br	1003b28 <_fopen_r+0x3c>
 1003bcc:	10038500 	call	1003850 <__sfp_lock_acquire>
 1003bd0:	8800030d 	sth	zero,12(r17)
 1003bd4:	10038540 	call	1003854 <__sfp_lock_release>
 1003bd8:	0023883a 	mov	r17,zero
 1003bdc:	003fd206 	br	1003b28 <_fopen_r+0x3c>

01003be0 <fopen>:
 1003be0:	01804074 	movhi	r6,257
 1003be4:	318e6a04 	addi	r6,r6,14760
 1003be8:	2007883a 	mov	r3,r4
 1003bec:	31000017 	ldw	r4,0(r6)
 1003bf0:	280d883a 	mov	r6,r5
 1003bf4:	180b883a 	mov	r5,r3
 1003bf8:	1003aec1 	jmpi	1003aec <_fopen_r>

01003bfc <_malloc_trim_r>:
 1003bfc:	defffb04 	addi	sp,sp,-20
 1003c00:	dcc00315 	stw	r19,12(sp)
 1003c04:	04c04074 	movhi	r19,257
 1003c08:	9cc8ab04 	addi	r19,r19,8876
 1003c0c:	dc800215 	stw	r18,8(sp)
 1003c10:	dc400115 	stw	r17,4(sp)
 1003c14:	dc000015 	stw	r16,0(sp)
 1003c18:	2823883a 	mov	r17,r5
 1003c1c:	2025883a 	mov	r18,r4
 1003c20:	dfc00415 	stw	ra,16(sp)
 1003c24:	100ea580 	call	100ea58 <__malloc_lock>
 1003c28:	98800217 	ldw	r2,8(r19)
 1003c2c:	9009883a 	mov	r4,r18
 1003c30:	000b883a 	mov	r5,zero
 1003c34:	10c00117 	ldw	r3,4(r2)
 1003c38:	00bfff04 	movi	r2,-4
 1003c3c:	18a0703a 	and	r16,r3,r2
 1003c40:	8463c83a 	sub	r17,r16,r17
 1003c44:	8c43fbc4 	addi	r17,r17,4079
 1003c48:	8822d33a 	srli	r17,r17,12
 1003c4c:	0083ffc4 	movi	r2,4095
 1003c50:	8c7fffc4 	addi	r17,r17,-1
 1003c54:	8822933a 	slli	r17,r17,12
 1003c58:	1440060e 	bge	r2,r17,1003c74 <_malloc_trim_r+0x78>
 1003c5c:	10056400 	call	1005640 <_sbrk_r>
 1003c60:	98c00217 	ldw	r3,8(r19)
 1003c64:	9009883a 	mov	r4,r18
 1003c68:	044bc83a 	sub	r5,zero,r17
 1003c6c:	80c7883a 	add	r3,r16,r3
 1003c70:	10c00926 	beq	r2,r3,1003c98 <_malloc_trim_r+0x9c>
 1003c74:	100ea780 	call	100ea78 <__malloc_unlock>
 1003c78:	0005883a 	mov	r2,zero
 1003c7c:	dfc00417 	ldw	ra,16(sp)
 1003c80:	dcc00317 	ldw	r19,12(sp)
 1003c84:	dc800217 	ldw	r18,8(sp)
 1003c88:	dc400117 	ldw	r17,4(sp)
 1003c8c:	dc000017 	ldw	r16,0(sp)
 1003c90:	dec00504 	addi	sp,sp,20
 1003c94:	f800283a 	ret
 1003c98:	9009883a 	mov	r4,r18
 1003c9c:	10056400 	call	1005640 <_sbrk_r>
 1003ca0:	844dc83a 	sub	r6,r16,r17
 1003ca4:	00ffffc4 	movi	r3,-1
 1003ca8:	9009883a 	mov	r4,r18
 1003cac:	000b883a 	mov	r5,zero
 1003cb0:	01c04074 	movhi	r7,257
 1003cb4:	39d76504 	addi	r7,r7,23956
 1003cb8:	31800054 	ori	r6,r6,1
 1003cbc:	10c00926 	beq	r2,r3,1003ce4 <_malloc_trim_r+0xe8>
 1003cc0:	38800017 	ldw	r2,0(r7)
 1003cc4:	98c00217 	ldw	r3,8(r19)
 1003cc8:	9009883a 	mov	r4,r18
 1003ccc:	1445c83a 	sub	r2,r2,r17
 1003cd0:	38800015 	stw	r2,0(r7)
 1003cd4:	19800115 	stw	r6,4(r3)
 1003cd8:	100ea780 	call	100ea78 <__malloc_unlock>
 1003cdc:	00800044 	movi	r2,1
 1003ce0:	003fe606 	br	1003c7c <_malloc_trim_r+0x80>
 1003ce4:	10056400 	call	1005640 <_sbrk_r>
 1003ce8:	99800217 	ldw	r6,8(r19)
 1003cec:	100f883a 	mov	r7,r2
 1003cf0:	9009883a 	mov	r4,r18
 1003cf4:	1187c83a 	sub	r3,r2,r6
 1003cf8:	008003c4 	movi	r2,15
 1003cfc:	19400054 	ori	r5,r3,1
 1003d00:	10ffdc0e 	bge	r2,r3,1003c74 <_malloc_trim_r+0x78>
 1003d04:	00804074 	movhi	r2,257
 1003d08:	108e6d04 	addi	r2,r2,14772
 1003d0c:	10c00017 	ldw	r3,0(r2)
 1003d10:	00804074 	movhi	r2,257
 1003d14:	10976504 	addi	r2,r2,23956
 1003d18:	31400115 	stw	r5,4(r6)
 1003d1c:	38c7c83a 	sub	r3,r7,r3
 1003d20:	10c00015 	stw	r3,0(r2)
 1003d24:	003fd306 	br	1003c74 <_malloc_trim_r+0x78>

01003d28 <_free_r>:
 1003d28:	defffd04 	addi	sp,sp,-12
 1003d2c:	dc400115 	stw	r17,4(sp)
 1003d30:	dc000015 	stw	r16,0(sp)
 1003d34:	dfc00215 	stw	ra,8(sp)
 1003d38:	2821883a 	mov	r16,r5
 1003d3c:	2023883a 	mov	r17,r4
 1003d40:	28005a26 	beq	r5,zero,1003eac <_free_r+0x184>
 1003d44:	100ea580 	call	100ea58 <__malloc_lock>
 1003d48:	823ffe04 	addi	r8,r16,-8
 1003d4c:	41400117 	ldw	r5,4(r8)
 1003d50:	00bfff84 	movi	r2,-2
 1003d54:	02804074 	movhi	r10,257
 1003d58:	5288ab04 	addi	r10,r10,8876
 1003d5c:	288e703a 	and	r7,r5,r2
 1003d60:	41cd883a 	add	r6,r8,r7
 1003d64:	30c00117 	ldw	r3,4(r6)
 1003d68:	51000217 	ldw	r4,8(r10)
 1003d6c:	00bfff04 	movi	r2,-4
 1003d70:	1892703a 	and	r9,r3,r2
 1003d74:	5017883a 	mov	r11,r10
 1003d78:	31006726 	beq	r6,r4,1003f18 <_free_r+0x1f0>
 1003d7c:	2880004c 	andi	r2,r5,1
 1003d80:	1005003a 	cmpeq	r2,r2,zero
 1003d84:	32400115 	stw	r9,4(r6)
 1003d88:	10001a1e 	bne	r2,zero,1003df4 <_free_r+0xcc>
 1003d8c:	000b883a 	mov	r5,zero
 1003d90:	3247883a 	add	r3,r6,r9
 1003d94:	18800117 	ldw	r2,4(r3)
 1003d98:	1080004c 	andi	r2,r2,1
 1003d9c:	1000231e 	bne	r2,zero,1003e2c <_free_r+0x104>
 1003da0:	280ac03a 	cmpne	r5,r5,zero
 1003da4:	3a4f883a 	add	r7,r7,r9
 1003da8:	2800451e 	bne	r5,zero,1003ec0 <_free_r+0x198>
 1003dac:	31000217 	ldw	r4,8(r6)
 1003db0:	00804074 	movhi	r2,257
 1003db4:	1088ad04 	addi	r2,r2,8884
 1003db8:	20807b26 	beq	r4,r2,1003fa8 <_free_r+0x280>
 1003dbc:	30800317 	ldw	r2,12(r6)
 1003dc0:	3a07883a 	add	r3,r7,r8
 1003dc4:	19c00015 	stw	r7,0(r3)
 1003dc8:	11000215 	stw	r4,8(r2)
 1003dcc:	20800315 	stw	r2,12(r4)
 1003dd0:	38800054 	ori	r2,r7,1
 1003dd4:	40800115 	stw	r2,4(r8)
 1003dd8:	28001a26 	beq	r5,zero,1003e44 <_free_r+0x11c>
 1003ddc:	8809883a 	mov	r4,r17
 1003de0:	dfc00217 	ldw	ra,8(sp)
 1003de4:	dc400117 	ldw	r17,4(sp)
 1003de8:	dc000017 	ldw	r16,0(sp)
 1003dec:	dec00304 	addi	sp,sp,12
 1003df0:	100ea781 	jmpi	100ea78 <__malloc_unlock>
 1003df4:	80bffe17 	ldw	r2,-8(r16)
 1003df8:	50c00204 	addi	r3,r10,8
 1003dfc:	4091c83a 	sub	r8,r8,r2
 1003e00:	41000217 	ldw	r4,8(r8)
 1003e04:	388f883a 	add	r7,r7,r2
 1003e08:	20c06126 	beq	r4,r3,1003f90 <_free_r+0x268>
 1003e0c:	40800317 	ldw	r2,12(r8)
 1003e10:	3247883a 	add	r3,r6,r9
 1003e14:	000b883a 	mov	r5,zero
 1003e18:	11000215 	stw	r4,8(r2)
 1003e1c:	20800315 	stw	r2,12(r4)
 1003e20:	18800117 	ldw	r2,4(r3)
 1003e24:	1080004c 	andi	r2,r2,1
 1003e28:	103fdd26 	beq	r2,zero,1003da0 <_free_r+0x78>
 1003e2c:	38800054 	ori	r2,r7,1
 1003e30:	3a07883a 	add	r3,r7,r8
 1003e34:	280ac03a 	cmpne	r5,r5,zero
 1003e38:	40800115 	stw	r2,4(r8)
 1003e3c:	19c00015 	stw	r7,0(r3)
 1003e40:	283fe61e 	bne	r5,zero,1003ddc <_free_r+0xb4>
 1003e44:	00807fc4 	movi	r2,511
 1003e48:	11c01f2e 	bgeu	r2,r7,1003ec8 <_free_r+0x1a0>
 1003e4c:	3806d27a 	srli	r3,r7,9
 1003e50:	1800481e 	bne	r3,zero,1003f74 <_free_r+0x24c>
 1003e54:	3804d0fa 	srli	r2,r7,3
 1003e58:	100690fa 	slli	r3,r2,3
 1003e5c:	1acd883a 	add	r6,r3,r11
 1003e60:	31400217 	ldw	r5,8(r6)
 1003e64:	31405926 	beq	r6,r5,1003fcc <_free_r+0x2a4>
 1003e68:	28800117 	ldw	r2,4(r5)
 1003e6c:	00ffff04 	movi	r3,-4
 1003e70:	10c4703a 	and	r2,r2,r3
 1003e74:	3880022e 	bgeu	r7,r2,1003e80 <_free_r+0x158>
 1003e78:	29400217 	ldw	r5,8(r5)
 1003e7c:	317ffa1e 	bne	r6,r5,1003e68 <_free_r+0x140>
 1003e80:	29800317 	ldw	r6,12(r5)
 1003e84:	41800315 	stw	r6,12(r8)
 1003e88:	41400215 	stw	r5,8(r8)
 1003e8c:	8809883a 	mov	r4,r17
 1003e90:	2a000315 	stw	r8,12(r5)
 1003e94:	32000215 	stw	r8,8(r6)
 1003e98:	dfc00217 	ldw	ra,8(sp)
 1003e9c:	dc400117 	ldw	r17,4(sp)
 1003ea0:	dc000017 	ldw	r16,0(sp)
 1003ea4:	dec00304 	addi	sp,sp,12
 1003ea8:	100ea781 	jmpi	100ea78 <__malloc_unlock>
 1003eac:	dfc00217 	ldw	ra,8(sp)
 1003eb0:	dc400117 	ldw	r17,4(sp)
 1003eb4:	dc000017 	ldw	r16,0(sp)
 1003eb8:	dec00304 	addi	sp,sp,12
 1003ebc:	f800283a 	ret
 1003ec0:	31000217 	ldw	r4,8(r6)
 1003ec4:	003fbd06 	br	1003dbc <_free_r+0x94>
 1003ec8:	3806d0fa 	srli	r3,r7,3
 1003ecc:	00800044 	movi	r2,1
 1003ed0:	51400117 	ldw	r5,4(r10)
 1003ed4:	180890fa 	slli	r4,r3,3
 1003ed8:	1807d0ba 	srai	r3,r3,2
 1003edc:	22c9883a 	add	r4,r4,r11
 1003ee0:	21800217 	ldw	r6,8(r4)
 1003ee4:	10c4983a 	sll	r2,r2,r3
 1003ee8:	41000315 	stw	r4,12(r8)
 1003eec:	41800215 	stw	r6,8(r8)
 1003ef0:	288ab03a 	or	r5,r5,r2
 1003ef4:	22000215 	stw	r8,8(r4)
 1003ef8:	8809883a 	mov	r4,r17
 1003efc:	51400115 	stw	r5,4(r10)
 1003f00:	32000315 	stw	r8,12(r6)
 1003f04:	dfc00217 	ldw	ra,8(sp)
 1003f08:	dc400117 	ldw	r17,4(sp)
 1003f0c:	dc000017 	ldw	r16,0(sp)
 1003f10:	dec00304 	addi	sp,sp,12
 1003f14:	100ea781 	jmpi	100ea78 <__malloc_unlock>
 1003f18:	2880004c 	andi	r2,r5,1
 1003f1c:	3a4d883a 	add	r6,r7,r9
 1003f20:	1000071e 	bne	r2,zero,1003f40 <_free_r+0x218>
 1003f24:	80bffe17 	ldw	r2,-8(r16)
 1003f28:	4091c83a 	sub	r8,r8,r2
 1003f2c:	41000317 	ldw	r4,12(r8)
 1003f30:	40c00217 	ldw	r3,8(r8)
 1003f34:	308d883a 	add	r6,r6,r2
 1003f38:	20c00215 	stw	r3,8(r4)
 1003f3c:	19000315 	stw	r4,12(r3)
 1003f40:	00804074 	movhi	r2,257
 1003f44:	108e6c04 	addi	r2,r2,14768
 1003f48:	11000017 	ldw	r4,0(r2)
 1003f4c:	30c00054 	ori	r3,r6,1
 1003f50:	52000215 	stw	r8,8(r10)
 1003f54:	40c00115 	stw	r3,4(r8)
 1003f58:	313fa036 	bltu	r6,r4,1003ddc <_free_r+0xb4>
 1003f5c:	00804074 	movhi	r2,257
 1003f60:	10955404 	addi	r2,r2,21840
 1003f64:	11400017 	ldw	r5,0(r2)
 1003f68:	8809883a 	mov	r4,r17
 1003f6c:	1003bfc0 	call	1003bfc <_malloc_trim_r>
 1003f70:	003f9a06 	br	1003ddc <_free_r+0xb4>
 1003f74:	00800104 	movi	r2,4
 1003f78:	10c0072e 	bgeu	r2,r3,1003f98 <_free_r+0x270>
 1003f7c:	00800504 	movi	r2,20
 1003f80:	10c01936 	bltu	r2,r3,1003fe8 <_free_r+0x2c0>
 1003f84:	188016c4 	addi	r2,r3,91
 1003f88:	100690fa 	slli	r3,r2,3
 1003f8c:	003fb306 	br	1003e5c <_free_r+0x134>
 1003f90:	01400044 	movi	r5,1
 1003f94:	003f7e06 	br	1003d90 <_free_r+0x68>
 1003f98:	3804d1ba 	srli	r2,r7,6
 1003f9c:	10800e04 	addi	r2,r2,56
 1003fa0:	100690fa 	slli	r3,r2,3
 1003fa4:	003fad06 	br	1003e5c <_free_r+0x134>
 1003fa8:	22000315 	stw	r8,12(r4)
 1003fac:	22000215 	stw	r8,8(r4)
 1003fb0:	3a05883a 	add	r2,r7,r8
 1003fb4:	38c00054 	ori	r3,r7,1
 1003fb8:	11c00015 	stw	r7,0(r2)
 1003fbc:	41000215 	stw	r4,8(r8)
 1003fc0:	40c00115 	stw	r3,4(r8)
 1003fc4:	41000315 	stw	r4,12(r8)
 1003fc8:	003f8406 	br	1003ddc <_free_r+0xb4>
 1003fcc:	1005d0ba 	srai	r2,r2,2
 1003fd0:	00c00044 	movi	r3,1
 1003fd4:	51000117 	ldw	r4,4(r10)
 1003fd8:	1886983a 	sll	r3,r3,r2
 1003fdc:	20c8b03a 	or	r4,r4,r3
 1003fe0:	51000115 	stw	r4,4(r10)
 1003fe4:	003fa706 	br	1003e84 <_free_r+0x15c>
 1003fe8:	00801504 	movi	r2,84
 1003fec:	10c00436 	bltu	r2,r3,1004000 <_free_r+0x2d8>
 1003ff0:	3804d33a 	srli	r2,r7,12
 1003ff4:	10801b84 	addi	r2,r2,110
 1003ff8:	100690fa 	slli	r3,r2,3
 1003ffc:	003f9706 	br	1003e5c <_free_r+0x134>
 1004000:	00805504 	movi	r2,340
 1004004:	10c00436 	bltu	r2,r3,1004018 <_free_r+0x2f0>
 1004008:	3804d3fa 	srli	r2,r7,15
 100400c:	10801dc4 	addi	r2,r2,119
 1004010:	100690fa 	slli	r3,r2,3
 1004014:	003f9106 	br	1003e5c <_free_r+0x134>
 1004018:	00815504 	movi	r2,1364
 100401c:	10c0032e 	bgeu	r2,r3,100402c <_free_r+0x304>
 1004020:	00801f84 	movi	r2,126
 1004024:	00c0fc04 	movi	r3,1008
 1004028:	003f8c06 	br	1003e5c <_free_r+0x134>
 100402c:	3804d4ba 	srli	r2,r7,18
 1004030:	10801f04 	addi	r2,r2,124
 1004034:	100690fa 	slli	r3,r2,3
 1004038:	003f8806 	br	1003e5c <_free_r+0x134>

0100403c <_fseek_r>:
 100403c:	deffe804 	addi	sp,sp,-96
 1004040:	dd801515 	stw	r22,84(sp)
 1004044:	dcc01215 	stw	r19,72(sp)
 1004048:	dc801115 	stw	r18,68(sp)
 100404c:	dc000f15 	stw	r16,60(sp)
 1004050:	dfc01715 	stw	ra,92(sp)
 1004054:	ddc01615 	stw	r23,88(sp)
 1004058:	dd401415 	stw	r21,80(sp)
 100405c:	dd001315 	stw	r20,76(sp)
 1004060:	dc401015 	stw	r17,64(sp)
 1004064:	2025883a 	mov	r18,r4
 1004068:	2821883a 	mov	r16,r5
 100406c:	302d883a 	mov	r22,r6
 1004070:	3827883a 	mov	r19,r7
 1004074:	20000226 	beq	r4,zero,1004080 <_fseek_r+0x44>
 1004078:	20800e17 	ldw	r2,56(r4)
 100407c:	10007826 	beq	r2,zero,1004260 <_fseek_r+0x224>
 1004080:	8080030b 	ldhu	r2,12(r16)
 1004084:	00c04204 	movi	r3,264
 1004088:	1080420c 	andi	r2,r2,264
 100408c:	10c07926 	beq	r2,r3,1004274 <_fseek_r+0x238>
 1004090:	85400a17 	ldw	r21,40(r16)
 1004094:	a800ea26 	beq	r21,zero,1004440 <_fseek_r+0x404>
 1004098:	00800044 	movi	r2,1
 100409c:	98805f26 	beq	r19,r2,100421c <_fseek_r+0x1e0>
 10040a0:	00800084 	movi	r2,2
 10040a4:	98801026 	beq	r19,r2,10040e8 <_fseek_r+0xac>
 10040a8:	98000f26 	beq	r19,zero,10040e8 <_fseek_r+0xac>
 10040ac:	00800584 	movi	r2,22
 10040b0:	013fffc4 	movi	r4,-1
 10040b4:	90800015 	stw	r2,0(r18)
 10040b8:	2005883a 	mov	r2,r4
 10040bc:	dfc01717 	ldw	ra,92(sp)
 10040c0:	ddc01617 	ldw	r23,88(sp)
 10040c4:	dd801517 	ldw	r22,84(sp)
 10040c8:	dd401417 	ldw	r21,80(sp)
 10040cc:	dd001317 	ldw	r20,76(sp)
 10040d0:	dcc01217 	ldw	r19,72(sp)
 10040d4:	dc801117 	ldw	r18,68(sp)
 10040d8:	dc401017 	ldw	r17,64(sp)
 10040dc:	dc000f17 	ldw	r16,60(sp)
 10040e0:	dec01804 	addi	sp,sp,96
 10040e4:	f800283a 	ret
 10040e8:	81800417 	ldw	r6,16(r16)
 10040ec:	0023883a 	mov	r17,zero
 10040f0:	002f883a 	mov	r23,zero
 10040f4:	3000a626 	beq	r6,zero,1004390 <_fseek_r+0x354>
 10040f8:	8100030b 	ldhu	r4,12(r16)
 10040fc:	2082068c 	andi	r2,r4,2074
 1004100:	1000081e 	bne	r2,zero,1004124 <_fseek_r+0xe8>
 1004104:	2081000c 	andi	r2,r4,1024
 1004108:	10001b1e 	bne	r2,zero,1004178 <_fseek_r+0x13c>
 100410c:	00804034 	movhi	r2,256
 1004110:	10968204 	addi	r2,r2,23048
 1004114:	a8800926 	beq	r21,r2,100413c <_fseek_r+0x100>
 1004118:	8080030b 	ldhu	r2,12(r16)
 100411c:	10820014 	ori	r2,r2,2048
 1004120:	8080030d 	sth	r2,12(r16)
 1004124:	9009883a 	mov	r4,r18
 1004128:	800b883a 	mov	r5,r16
 100412c:	10035c80 	call	10035c8 <_fflush_r>
 1004130:	1000a326 	beq	r2,zero,10043c0 <_fseek_r+0x384>
 1004134:	013fffc4 	movi	r4,-1
 1004138:	003fdf06 	br	10040b8 <_fseek_r+0x7c>
 100413c:	8140038f 	ldh	r5,14(r16)
 1004140:	283ff516 	blt	r5,zero,1004118 <_fseek_r+0xdc>
 1004144:	9009883a 	mov	r4,r18
 1004148:	d80d883a 	mov	r6,sp
 100414c:	100449c0 	call	100449c <_fstat_r>
 1004150:	103ff11e 	bne	r2,zero,1004118 <_fseek_r+0xdc>
 1004154:	d8800117 	ldw	r2,4(sp)
 1004158:	00e00014 	movui	r3,32768
 100415c:	10bc000c 	andi	r2,r2,61440
 1004160:	10ffed1e 	bne	r2,r3,1004118 <_fseek_r+0xdc>
 1004164:	80c0030b 	ldhu	r3,12(r16)
 1004168:	00810004 	movi	r2,1024
 100416c:	80801315 	stw	r2,76(r16)
 1004170:	1886b03a 	or	r3,r3,r2
 1004174:	80c0030d 	sth	r3,12(r16)
 1004178:	9800701e 	bne	r19,zero,100433c <_fseek_r+0x300>
 100417c:	b029883a 	mov	r20,r22
 1004180:	b804c03a 	cmpne	r2,r23,zero
 1004184:	10003f1e 	bne	r2,zero,1004284 <_fseek_r+0x248>
 1004188:	8100030b 	ldhu	r4,12(r16)
 100418c:	2084000c 	andi	r2,r4,4096
 1004190:	1000a126 	beq	r2,zero,1004418 <_fseek_r+0x3dc>
 1004194:	81801417 	ldw	r6,80(r16)
 1004198:	80c00117 	ldw	r3,4(r16)
 100419c:	81400c17 	ldw	r5,48(r16)
 10041a0:	30e3c83a 	sub	r17,r6,r3
 10041a4:	28008026 	beq	r5,zero,10043a8 <_fseek_r+0x36c>
 10041a8:	81c00f17 	ldw	r7,60(r16)
 10041ac:	89e3c83a 	sub	r17,r17,r7
 10041b0:	80800e17 	ldw	r2,56(r16)
 10041b4:	81800417 	ldw	r6,16(r16)
 10041b8:	88c7883a 	add	r3,r17,r3
 10041bc:	1185c83a 	sub	r2,r2,r6
 10041c0:	11cf883a 	add	r7,r2,r7
 10041c4:	1887c83a 	sub	r3,r3,r2
 10041c8:	2088000c 	andi	r2,r4,8192
 10041cc:	10003e1e 	bne	r2,zero,10042c8 <_fseek_r+0x28c>
 10041d0:	a0c03d16 	blt	r20,r3,10042c8 <_fseek_r+0x28c>
 10041d4:	38c5883a 	add	r2,r7,r3
 10041d8:	a0803b2e 	bgeu	r20,r2,10042c8 <_fseek_r+0x28c>
 10041dc:	a0c5c83a 	sub	r2,r20,r3
 10041e0:	3887c83a 	sub	r3,r7,r2
 10041e4:	3085883a 	add	r2,r6,r2
 10041e8:	80800015 	stw	r2,0(r16)
 10041ec:	80c00115 	stw	r3,4(r16)
 10041f0:	28000526 	beq	r5,zero,1004208 <_fseek_r+0x1cc>
 10041f4:	80801004 	addi	r2,r16,64
 10041f8:	28800226 	beq	r5,r2,1004204 <_fseek_r+0x1c8>
 10041fc:	9009883a 	mov	r4,r18
 1004200:	1003d280 	call	1003d28 <_free_r>
 1004204:	80000c15 	stw	zero,48(r16)
 1004208:	8080030b 	ldhu	r2,12(r16)
 100420c:	0009883a 	mov	r4,zero
 1004210:	10bff7cc 	andi	r2,r2,65503
 1004214:	8080030d 	sth	r2,12(r16)
 1004218:	003fa706 	br	10040b8 <_fseek_r+0x7c>
 100421c:	9009883a 	mov	r4,r18
 1004220:	800b883a 	mov	r5,r16
 1004224:	10035c80 	call	10035c8 <_fflush_r>
 1004228:	8100030b 	ldhu	r4,12(r16)
 100422c:	2084000c 	andi	r2,r4,4096
 1004230:	10008726 	beq	r2,zero,1004450 <_fseek_r+0x414>
 1004234:	84401417 	ldw	r17,80(r16)
 1004238:	2080010c 	andi	r2,r4,4
 100423c:	1000171e 	bne	r2,zero,100429c <_fseek_r+0x260>
 1004240:	2080020c 	andi	r2,r4,8
 1004244:	10003b26 	beq	r2,zero,1004334 <_fseek_r+0x2f8>
 1004248:	80800017 	ldw	r2,0(r16)
 100424c:	10003926 	beq	r2,zero,1004334 <_fseek_r+0x2f8>
 1004250:	81800417 	ldw	r6,16(r16)
 1004254:	1185c83a 	sub	r2,r2,r6
 1004258:	88a3883a 	add	r17,r17,r2
 100425c:	00001606 	br	10042b8 <_fseek_r+0x27c>
 1004260:	10038600 	call	1003860 <__sinit>
 1004264:	8080030b 	ldhu	r2,12(r16)
 1004268:	00c04204 	movi	r3,264
 100426c:	1080420c 	andi	r2,r2,264
 1004270:	10ff871e 	bne	r2,r3,1004090 <_fseek_r+0x54>
 1004274:	9009883a 	mov	r4,r18
 1004278:	800b883a 	mov	r5,r16
 100427c:	10035c80 	call	10035c8 <_fflush_r>
 1004280:	003f8306 	br	1004090 <_fseek_r+0x54>
 1004284:	81400c17 	ldw	r5,48(r16)
 1004288:	28004526 	beq	r5,zero,10043a0 <_fseek_r+0x364>
 100428c:	8100030b 	ldhu	r4,12(r16)
 1004290:	80c00117 	ldw	r3,4(r16)
 1004294:	81c00f17 	ldw	r7,60(r16)
 1004298:	003fc506 	br	10041b0 <_fseek_r+0x174>
 100429c:	80c00117 	ldw	r3,4(r16)
 10042a0:	80800c17 	ldw	r2,48(r16)
 10042a4:	88e3c83a 	sub	r17,r17,r3
 10042a8:	10002226 	beq	r2,zero,1004334 <_fseek_r+0x2f8>
 10042ac:	81c00f17 	ldw	r7,60(r16)
 10042b0:	81800417 	ldw	r6,16(r16)
 10042b4:	89e3c83a 	sub	r17,r17,r7
 10042b8:	b46d883a 	add	r22,r22,r17
 10042bc:	0027883a 	mov	r19,zero
 10042c0:	05c00044 	movi	r23,1
 10042c4:	003f8b06 	br	10040f4 <_fseek_r+0xb8>
 10042c8:	80801317 	ldw	r2,76(r16)
 10042cc:	81400717 	ldw	r5,28(r16)
 10042d0:	9009883a 	mov	r4,r18
 10042d4:	0085c83a 	sub	r2,zero,r2
 10042d8:	a0a2703a 	and	r17,r20,r2
 10042dc:	880d883a 	mov	r6,r17
 10042e0:	000f883a 	mov	r7,zero
 10042e4:	a83ee83a 	callr	r21
 10042e8:	00ffffc4 	movi	r3,-1
 10042ec:	10ff8d26 	beq	r2,r3,1004124 <_fseek_r+0xe8>
 10042f0:	80800417 	ldw	r2,16(r16)
 10042f4:	81400c17 	ldw	r5,48(r16)
 10042f8:	80000115 	stw	zero,4(r16)
 10042fc:	80800015 	stw	r2,0(r16)
 1004300:	28000526 	beq	r5,zero,1004318 <_fseek_r+0x2dc>
 1004304:	80801004 	addi	r2,r16,64
 1004308:	28800226 	beq	r5,r2,1004314 <_fseek_r+0x2d8>
 100430c:	9009883a 	mov	r4,r18
 1004310:	1003d280 	call	1003d28 <_free_r>
 1004314:	80000c15 	stw	zero,48(r16)
 1004318:	8080030b 	ldhu	r2,12(r16)
 100431c:	a463c83a 	sub	r17,r20,r17
 1004320:	10bff7cc 	andi	r2,r2,65503
 1004324:	8080030d 	sth	r2,12(r16)
 1004328:	88000c1e 	bne	r17,zero,100435c <_fseek_r+0x320>
 100432c:	0009883a 	mov	r4,zero
 1004330:	003f6106 	br	10040b8 <_fseek_r+0x7c>
 1004334:	81800417 	ldw	r6,16(r16)
 1004338:	003fdf06 	br	10042b8 <_fseek_r+0x27c>
 100433c:	8140038f 	ldh	r5,14(r16)
 1004340:	9009883a 	mov	r4,r18
 1004344:	d80d883a 	mov	r6,sp
 1004348:	100449c0 	call	100449c <_fstat_r>
 100434c:	103f751e 	bne	r2,zero,1004124 <_fseek_r+0xe8>
 1004350:	d8800417 	ldw	r2,16(sp)
 1004354:	b0a9883a 	add	r20,r22,r2
 1004358:	003f8906 	br	1004180 <_fseek_r+0x144>
 100435c:	9009883a 	mov	r4,r18
 1004360:	800b883a 	mov	r5,r16
 1004364:	10054000 	call	1005400 <__srefill_r>
 1004368:	103f6e1e 	bne	r2,zero,1004124 <_fseek_r+0xe8>
 100436c:	80c00117 	ldw	r3,4(r16)
 1004370:	1c7f6c36 	bltu	r3,r17,1004124 <_fseek_r+0xe8>
 1004374:	80800017 	ldw	r2,0(r16)
 1004378:	1c47c83a 	sub	r3,r3,r17
 100437c:	0009883a 	mov	r4,zero
 1004380:	1445883a 	add	r2,r2,r17
 1004384:	80c00115 	stw	r3,4(r16)
 1004388:	80800015 	stw	r2,0(r16)
 100438c:	003f4a06 	br	10040b8 <_fseek_r+0x7c>
 1004390:	9009883a 	mov	r4,r18
 1004394:	800b883a 	mov	r5,r16
 1004398:	10048a40 	call	10048a4 <__smakebuf_r>
 100439c:	003f5606 	br	10040f8 <_fseek_r+0xbc>
 10043a0:	8100030b 	ldhu	r4,12(r16)
 10043a4:	80c00117 	ldw	r3,4(r16)
 10043a8:	80800017 	ldw	r2,0(r16)
 10043ac:	81800417 	ldw	r6,16(r16)
 10043b0:	1185c83a 	sub	r2,r2,r6
 10043b4:	10cf883a 	add	r7,r2,r3
 10043b8:	8887c83a 	sub	r3,r17,r2
 10043bc:	003f8206 	br	10041c8 <_fseek_r+0x18c>
 10043c0:	81400717 	ldw	r5,28(r16)
 10043c4:	b00d883a 	mov	r6,r22
 10043c8:	980f883a 	mov	r7,r19
 10043cc:	9009883a 	mov	r4,r18
 10043d0:	a83ee83a 	callr	r21
 10043d4:	00ffffc4 	movi	r3,-1
 10043d8:	10ff5626 	beq	r2,r3,1004134 <_fseek_r+0xf8>
 10043dc:	81400c17 	ldw	r5,48(r16)
 10043e0:	28000526 	beq	r5,zero,10043f8 <_fseek_r+0x3bc>
 10043e4:	80801004 	addi	r2,r16,64
 10043e8:	28800226 	beq	r5,r2,10043f4 <_fseek_r+0x3b8>
 10043ec:	9009883a 	mov	r4,r18
 10043f0:	1003d280 	call	1003d28 <_free_r>
 10043f4:	80000c15 	stw	zero,48(r16)
 10043f8:	8080030b 	ldhu	r2,12(r16)
 10043fc:	80c00417 	ldw	r3,16(r16)
 1004400:	0009883a 	mov	r4,zero
 1004404:	10bdf7cc 	andi	r2,r2,63455
 1004408:	8080030d 	sth	r2,12(r16)
 100440c:	80c00015 	stw	r3,0(r16)
 1004410:	80000115 	stw	zero,4(r16)
 1004414:	003f2806 	br	10040b8 <_fseek_r+0x7c>
 1004418:	81400717 	ldw	r5,28(r16)
 100441c:	000d883a 	mov	r6,zero
 1004420:	9009883a 	mov	r4,r18
 1004424:	01c00044 	movi	r7,1
 1004428:	a83ee83a 	callr	r21
 100442c:	100d883a 	mov	r6,r2
 1004430:	00bfffc4 	movi	r2,-1
 1004434:	30bf3b26 	beq	r6,r2,1004124 <_fseek_r+0xe8>
 1004438:	8100030b 	ldhu	r4,12(r16)
 100443c:	003f5606 	br	1004198 <_fseek_r+0x15c>
 1004440:	00800744 	movi	r2,29
 1004444:	013fffc4 	movi	r4,-1
 1004448:	90800015 	stw	r2,0(r18)
 100444c:	003f1a06 	br	10040b8 <_fseek_r+0x7c>
 1004450:	81400717 	ldw	r5,28(r16)
 1004454:	980f883a 	mov	r7,r19
 1004458:	9009883a 	mov	r4,r18
 100445c:	000d883a 	mov	r6,zero
 1004460:	a83ee83a 	callr	r21
 1004464:	1023883a 	mov	r17,r2
 1004468:	00bfffc4 	movi	r2,-1
 100446c:	88bf3126 	beq	r17,r2,1004134 <_fseek_r+0xf8>
 1004470:	8100030b 	ldhu	r4,12(r16)
 1004474:	003f7006 	br	1004238 <_fseek_r+0x1fc>

01004478 <fseek>:
 1004478:	00804074 	movhi	r2,257
 100447c:	108e6a04 	addi	r2,r2,14760
 1004480:	2013883a 	mov	r9,r4
 1004484:	11000017 	ldw	r4,0(r2)
 1004488:	2805883a 	mov	r2,r5
 100448c:	300f883a 	mov	r7,r6
 1004490:	480b883a 	mov	r5,r9
 1004494:	100d883a 	mov	r6,r2
 1004498:	100403c1 	jmpi	100403c <_fseek_r>

0100449c <_fstat_r>:
 100449c:	defffd04 	addi	sp,sp,-12
 10044a0:	dc000015 	stw	r16,0(sp)
 10044a4:	04004074 	movhi	r16,257
 10044a8:	84155304 	addi	r16,r16,21836
 10044ac:	dc400115 	stw	r17,4(sp)
 10044b0:	80000015 	stw	zero,0(r16)
 10044b4:	2023883a 	mov	r17,r4
 10044b8:	2809883a 	mov	r4,r5
 10044bc:	300b883a 	mov	r5,r6
 10044c0:	dfc00215 	stw	ra,8(sp)
 10044c4:	100e3900 	call	100e390 <fstat>
 10044c8:	1007883a 	mov	r3,r2
 10044cc:	00bfffc4 	movi	r2,-1
 10044d0:	18800626 	beq	r3,r2,10044ec <_fstat_r+0x50>
 10044d4:	1805883a 	mov	r2,r3
 10044d8:	dfc00217 	ldw	ra,8(sp)
 10044dc:	dc400117 	ldw	r17,4(sp)
 10044e0:	dc000017 	ldw	r16,0(sp)
 10044e4:	dec00304 	addi	sp,sp,12
 10044e8:	f800283a 	ret
 10044ec:	80800017 	ldw	r2,0(r16)
 10044f0:	103ff826 	beq	r2,zero,10044d4 <_fstat_r+0x38>
 10044f4:	88800015 	stw	r2,0(r17)
 10044f8:	1805883a 	mov	r2,r3
 10044fc:	dfc00217 	ldw	ra,8(sp)
 1004500:	dc400117 	ldw	r17,4(sp)
 1004504:	dc000017 	ldw	r16,0(sp)
 1004508:	dec00304 	addi	sp,sp,12
 100450c:	f800283a 	ret

01004510 <_fwalk_reent>:
 1004510:	defff704 	addi	sp,sp,-36
 1004514:	dcc00315 	stw	r19,12(sp)
 1004518:	24c0b804 	addi	r19,r4,736
 100451c:	dd800615 	stw	r22,24(sp)
 1004520:	dd400515 	stw	r21,20(sp)
 1004524:	dfc00815 	stw	ra,32(sp)
 1004528:	ddc00715 	stw	r23,28(sp)
 100452c:	dd000415 	stw	r20,16(sp)
 1004530:	dc800215 	stw	r18,8(sp)
 1004534:	dc400115 	stw	r17,4(sp)
 1004538:	dc000015 	stw	r16,0(sp)
 100453c:	202b883a 	mov	r21,r4
 1004540:	282d883a 	mov	r22,r5
 1004544:	10038500 	call	1003850 <__sfp_lock_acquire>
 1004548:	98002126 	beq	r19,zero,10045d0 <_fwalk_reent+0xc0>
 100454c:	002f883a 	mov	r23,zero
 1004550:	9c800117 	ldw	r18,4(r19)
 1004554:	9c000217 	ldw	r16,8(r19)
 1004558:	90bfffc4 	addi	r2,r18,-1
 100455c:	10000d16 	blt	r2,zero,1004594 <_fwalk_reent+0x84>
 1004560:	0023883a 	mov	r17,zero
 1004564:	053fffc4 	movi	r20,-1
 1004568:	8080030f 	ldh	r2,12(r16)
 100456c:	8c400044 	addi	r17,r17,1
 1004570:	10000626 	beq	r2,zero,100458c <_fwalk_reent+0x7c>
 1004574:	8080038f 	ldh	r2,14(r16)
 1004578:	800b883a 	mov	r5,r16
 100457c:	a809883a 	mov	r4,r21
 1004580:	15000226 	beq	r2,r20,100458c <_fwalk_reent+0x7c>
 1004584:	b03ee83a 	callr	r22
 1004588:	b8aeb03a 	or	r23,r23,r2
 100458c:	84001704 	addi	r16,r16,92
 1004590:	947ff51e 	bne	r18,r17,1004568 <_fwalk_reent+0x58>
 1004594:	9cc00017 	ldw	r19,0(r19)
 1004598:	983fed1e 	bne	r19,zero,1004550 <_fwalk_reent+0x40>
 100459c:	10038540 	call	1003854 <__sfp_lock_release>
 10045a0:	b805883a 	mov	r2,r23
 10045a4:	dfc00817 	ldw	ra,32(sp)
 10045a8:	ddc00717 	ldw	r23,28(sp)
 10045ac:	dd800617 	ldw	r22,24(sp)
 10045b0:	dd400517 	ldw	r21,20(sp)
 10045b4:	dd000417 	ldw	r20,16(sp)
 10045b8:	dcc00317 	ldw	r19,12(sp)
 10045bc:	dc800217 	ldw	r18,8(sp)
 10045c0:	dc400117 	ldw	r17,4(sp)
 10045c4:	dc000017 	ldw	r16,0(sp)
 10045c8:	dec00904 	addi	sp,sp,36
 10045cc:	f800283a 	ret
 10045d0:	002f883a 	mov	r23,zero
 10045d4:	003ff106 	br	100459c <_fwalk_reent+0x8c>

010045d8 <_fwalk>:
 10045d8:	defff804 	addi	sp,sp,-32
 10045dc:	dcc00315 	stw	r19,12(sp)
 10045e0:	24c0b804 	addi	r19,r4,736
 10045e4:	dd400515 	stw	r21,20(sp)
 10045e8:	dfc00715 	stw	ra,28(sp)
 10045ec:	dd800615 	stw	r22,24(sp)
 10045f0:	dd000415 	stw	r20,16(sp)
 10045f4:	dc800215 	stw	r18,8(sp)
 10045f8:	dc400115 	stw	r17,4(sp)
 10045fc:	dc000015 	stw	r16,0(sp)
 1004600:	282b883a 	mov	r21,r5
 1004604:	10038500 	call	1003850 <__sfp_lock_acquire>
 1004608:	98001f26 	beq	r19,zero,1004688 <_fwalk+0xb0>
 100460c:	002d883a 	mov	r22,zero
 1004610:	9c800117 	ldw	r18,4(r19)
 1004614:	9c000217 	ldw	r16,8(r19)
 1004618:	90bfffc4 	addi	r2,r18,-1
 100461c:	10000c16 	blt	r2,zero,1004650 <_fwalk+0x78>
 1004620:	0023883a 	mov	r17,zero
 1004624:	053fffc4 	movi	r20,-1
 1004628:	8080030f 	ldh	r2,12(r16)
 100462c:	8c400044 	addi	r17,r17,1
 1004630:	10000526 	beq	r2,zero,1004648 <_fwalk+0x70>
 1004634:	8080038f 	ldh	r2,14(r16)
 1004638:	8009883a 	mov	r4,r16
 100463c:	15000226 	beq	r2,r20,1004648 <_fwalk+0x70>
 1004640:	a83ee83a 	callr	r21
 1004644:	b0acb03a 	or	r22,r22,r2
 1004648:	84001704 	addi	r16,r16,92
 100464c:	947ff61e 	bne	r18,r17,1004628 <_fwalk+0x50>
 1004650:	9cc00017 	ldw	r19,0(r19)
 1004654:	983fee1e 	bne	r19,zero,1004610 <_fwalk+0x38>
 1004658:	10038540 	call	1003854 <__sfp_lock_release>
 100465c:	b005883a 	mov	r2,r22
 1004660:	dfc00717 	ldw	ra,28(sp)
 1004664:	dd800617 	ldw	r22,24(sp)
 1004668:	dd400517 	ldw	r21,20(sp)
 100466c:	dd000417 	ldw	r20,16(sp)
 1004670:	dcc00317 	ldw	r19,12(sp)
 1004674:	dc800217 	ldw	r18,8(sp)
 1004678:	dc400117 	ldw	r17,4(sp)
 100467c:	dc000017 	ldw	r16,0(sp)
 1004680:	dec00804 	addi	sp,sp,32
 1004684:	f800283a 	ret
 1004688:	002d883a 	mov	r22,zero
 100468c:	003ff206 	br	1004658 <_fwalk+0x80>

01004690 <_fwrite_r>:
 1004690:	defff604 	addi	sp,sp,-40
 1004694:	dc000515 	stw	r16,20(sp)
 1004698:	d9400015 	stw	r5,0(sp)
 100469c:	2021883a 	mov	r16,r4
 10046a0:	300b883a 	mov	r5,r6
 10046a4:	3809883a 	mov	r4,r7
 10046a8:	dcc00815 	stw	r19,32(sp)
 10046ac:	dc800715 	stw	r18,28(sp)
 10046b0:	dc400615 	stw	r17,24(sp)
 10046b4:	dfc00915 	stw	ra,36(sp)
 10046b8:	3825883a 	mov	r18,r7
 10046bc:	3027883a 	mov	r19,r6
 10046c0:	1002f0c0 	call	1002f0c <__mulsi3>
 10046c4:	1023883a 	mov	r17,r2
 10046c8:	00800044 	movi	r2,1
 10046cc:	d8800315 	stw	r2,12(sp)
 10046d0:	dc400115 	stw	r17,4(sp)
 10046d4:	dc400415 	stw	r17,16(sp)
 10046d8:	dec00215 	stw	sp,8(sp)
 10046dc:	80000326 	beq	r16,zero,10046ec <_fwrite_r+0x5c>
 10046e0:	80800e17 	ldw	r2,56(r16)
 10046e4:	8009883a 	mov	r4,r16
 10046e8:	10001226 	beq	r2,zero,1004734 <_fwrite_r+0xa4>
 10046ec:	d9400a17 	ldw	r5,40(sp)
 10046f0:	8009883a 	mov	r4,r16
 10046f4:	d9800204 	addi	r6,sp,8
 10046f8:	10096d80 	call	10096d8 <__sfvwrite_r>
 10046fc:	980b883a 	mov	r5,r19
 1004700:	10000426 	beq	r2,zero,1004714 <_fwrite_r+0x84>
 1004704:	d9000417 	ldw	r4,16(sp)
 1004708:	8909c83a 	sub	r4,r17,r4
 100470c:	100dadc0 	call	100dadc <__udivsi3>
 1004710:	1025883a 	mov	r18,r2
 1004714:	9005883a 	mov	r2,r18
 1004718:	dfc00917 	ldw	ra,36(sp)
 100471c:	dcc00817 	ldw	r19,32(sp)
 1004720:	dc800717 	ldw	r18,28(sp)
 1004724:	dc400617 	ldw	r17,24(sp)
 1004728:	dc000517 	ldw	r16,20(sp)
 100472c:	dec00a04 	addi	sp,sp,40
 1004730:	f800283a 	ret
 1004734:	10038600 	call	1003860 <__sinit>
 1004738:	003fec06 	br	10046ec <_fwrite_r+0x5c>

0100473c <fwrite>:
 100473c:	00804074 	movhi	r2,257
 1004740:	108e6a04 	addi	r2,r2,14760
 1004744:	2017883a 	mov	r11,r4
 1004748:	11000017 	ldw	r4,0(r2)
 100474c:	defffe04 	addi	sp,sp,-8
 1004750:	3013883a 	mov	r9,r6
 1004754:	2805883a 	mov	r2,r5
 1004758:	d9c00015 	stw	r7,0(sp)
 100475c:	580b883a 	mov	r5,r11
 1004760:	100d883a 	mov	r6,r2
 1004764:	480f883a 	mov	r7,r9
 1004768:	dfc00115 	stw	ra,4(sp)
 100476c:	10046900 	call	1004690 <_fwrite_r>
 1004770:	dfc00117 	ldw	ra,4(sp)
 1004774:	dec00204 	addi	sp,sp,8
 1004778:	f800283a 	ret

0100477c <getc>:
 100477c:	defffd04 	addi	sp,sp,-12
 1004780:	dc400115 	stw	r17,4(sp)
 1004784:	04404074 	movhi	r17,257
 1004788:	8c4e6a04 	addi	r17,r17,14760
 100478c:	88c00017 	ldw	r3,0(r17)
 1004790:	dc000015 	stw	r16,0(sp)
 1004794:	dfc00215 	stw	ra,8(sp)
 1004798:	2021883a 	mov	r16,r4
 100479c:	18000326 	beq	r3,zero,10047ac <getc+0x30>
 10047a0:	18800e17 	ldw	r2,56(r3)
 10047a4:	1809883a 	mov	r4,r3
 10047a8:	10000e26 	beq	r2,zero,10047e4 <getc+0x68>
 10047ac:	80800117 	ldw	r2,4(r16)
 10047b0:	800b883a 	mov	r5,r16
 10047b4:	10bfffc4 	addi	r2,r2,-1
 10047b8:	80800115 	stw	r2,4(r16)
 10047bc:	10000f16 	blt	r2,zero,10047fc <getc+0x80>
 10047c0:	80c00017 	ldw	r3,0(r16)
 10047c4:	18800003 	ldbu	r2,0(r3)
 10047c8:	18c00044 	addi	r3,r3,1
 10047cc:	80c00015 	stw	r3,0(r16)
 10047d0:	dfc00217 	ldw	ra,8(sp)
 10047d4:	dc400117 	ldw	r17,4(sp)
 10047d8:	dc000017 	ldw	r16,0(sp)
 10047dc:	dec00304 	addi	sp,sp,12
 10047e0:	f800283a 	ret
 10047e4:	10038600 	call	1003860 <__sinit>
 10047e8:	80800117 	ldw	r2,4(r16)
 10047ec:	800b883a 	mov	r5,r16
 10047f0:	10bfffc4 	addi	r2,r2,-1
 10047f4:	80800115 	stw	r2,4(r16)
 10047f8:	103ff10e 	bge	r2,zero,10047c0 <getc+0x44>
 10047fc:	89000017 	ldw	r4,0(r17)
 1004800:	dfc00217 	ldw	ra,8(sp)
 1004804:	dc400117 	ldw	r17,4(sp)
 1004808:	dc000017 	ldw	r16,0(sp)
 100480c:	dec00304 	addi	sp,sp,12
 1004810:	10055e01 	jmpi	10055e0 <__srget_r>

01004814 <_getc_r>:
 1004814:	defffd04 	addi	sp,sp,-12
 1004818:	dc400115 	stw	r17,4(sp)
 100481c:	dc000015 	stw	r16,0(sp)
 1004820:	dfc00215 	stw	ra,8(sp)
 1004824:	2021883a 	mov	r16,r4
 1004828:	2823883a 	mov	r17,r5
 100482c:	20000226 	beq	r4,zero,1004838 <_getc_r+0x24>
 1004830:	20800e17 	ldw	r2,56(r4)
 1004834:	10000f26 	beq	r2,zero,1004874 <_getc_r+0x60>
 1004838:	88800117 	ldw	r2,4(r17)
 100483c:	8009883a 	mov	r4,r16
 1004840:	880b883a 	mov	r5,r17
 1004844:	10bfffc4 	addi	r2,r2,-1
 1004848:	88800115 	stw	r2,4(r17)
 100484c:	10001016 	blt	r2,zero,1004890 <_getc_r+0x7c>
 1004850:	88c00017 	ldw	r3,0(r17)
 1004854:	18800003 	ldbu	r2,0(r3)
 1004858:	18c00044 	addi	r3,r3,1
 100485c:	88c00015 	stw	r3,0(r17)
 1004860:	dfc00217 	ldw	ra,8(sp)
 1004864:	dc400117 	ldw	r17,4(sp)
 1004868:	dc000017 	ldw	r16,0(sp)
 100486c:	dec00304 	addi	sp,sp,12
 1004870:	f800283a 	ret
 1004874:	10038600 	call	1003860 <__sinit>
 1004878:	88800117 	ldw	r2,4(r17)
 100487c:	8009883a 	mov	r4,r16
 1004880:	880b883a 	mov	r5,r17
 1004884:	10bfffc4 	addi	r2,r2,-1
 1004888:	88800115 	stw	r2,4(r17)
 100488c:	103ff00e 	bge	r2,zero,1004850 <_getc_r+0x3c>
 1004890:	dfc00217 	ldw	ra,8(sp)
 1004894:	dc400117 	ldw	r17,4(sp)
 1004898:	dc000017 	ldw	r16,0(sp)
 100489c:	dec00304 	addi	sp,sp,12
 10048a0:	10055e01 	jmpi	10055e0 <__srget_r>

010048a4 <__smakebuf_r>:
 10048a4:	2880030b 	ldhu	r2,12(r5)
 10048a8:	deffed04 	addi	sp,sp,-76
 10048ac:	dc401015 	stw	r17,64(sp)
 10048b0:	1080008c 	andi	r2,r2,2
 10048b4:	dc000f15 	stw	r16,60(sp)
 10048b8:	dfc01215 	stw	ra,72(sp)
 10048bc:	dc801115 	stw	r18,68(sp)
 10048c0:	2821883a 	mov	r16,r5
 10048c4:	2023883a 	mov	r17,r4
 10048c8:	10000b26 	beq	r2,zero,10048f8 <__smakebuf_r+0x54>
 10048cc:	28c010c4 	addi	r3,r5,67
 10048d0:	00800044 	movi	r2,1
 10048d4:	28800515 	stw	r2,20(r5)
 10048d8:	28c00415 	stw	r3,16(r5)
 10048dc:	28c00015 	stw	r3,0(r5)
 10048e0:	dfc01217 	ldw	ra,72(sp)
 10048e4:	dc801117 	ldw	r18,68(sp)
 10048e8:	dc401017 	ldw	r17,64(sp)
 10048ec:	dc000f17 	ldw	r16,60(sp)
 10048f0:	dec01304 	addi	sp,sp,76
 10048f4:	f800283a 	ret
 10048f8:	2940038f 	ldh	r5,14(r5)
 10048fc:	28002116 	blt	r5,zero,1004984 <__smakebuf_r+0xe0>
 1004900:	d80d883a 	mov	r6,sp
 1004904:	100449c0 	call	100449c <_fstat_r>
 1004908:	10001e16 	blt	r2,zero,1004984 <__smakebuf_r+0xe0>
 100490c:	d8800117 	ldw	r2,4(sp)
 1004910:	00e00014 	movui	r3,32768
 1004914:	113c000c 	andi	r4,r2,61440
 1004918:	20c03126 	beq	r4,r3,10049e0 <__smakebuf_r+0x13c>
 100491c:	8080030b 	ldhu	r2,12(r16)
 1004920:	00c80004 	movi	r3,8192
 1004924:	10820014 	ori	r2,r2,2048
 1004928:	8080030d 	sth	r2,12(r16)
 100492c:	20c01e26 	beq	r4,r3,10049a8 <__smakebuf_r+0x104>
 1004930:	04810004 	movi	r18,1024
 1004934:	8809883a 	mov	r4,r17
 1004938:	900b883a 	mov	r5,r18
 100493c:	1004a600 	call	1004a60 <_malloc_r>
 1004940:	1009883a 	mov	r4,r2
 1004944:	10003126 	beq	r2,zero,1004a0c <__smakebuf_r+0x168>
 1004948:	80c0030b 	ldhu	r3,12(r16)
 100494c:	00804034 	movhi	r2,256
 1004950:	108e5104 	addi	r2,r2,14660
 1004954:	88800f15 	stw	r2,60(r17)
 1004958:	18c02014 	ori	r3,r3,128
 100495c:	84800515 	stw	r18,20(r16)
 1004960:	80c0030d 	sth	r3,12(r16)
 1004964:	81000415 	stw	r4,16(r16)
 1004968:	81000015 	stw	r4,0(r16)
 100496c:	dfc01217 	ldw	ra,72(sp)
 1004970:	dc801117 	ldw	r18,68(sp)
 1004974:	dc401017 	ldw	r17,64(sp)
 1004978:	dc000f17 	ldw	r16,60(sp)
 100497c:	dec01304 	addi	sp,sp,76
 1004980:	f800283a 	ret
 1004984:	80c0030b 	ldhu	r3,12(r16)
 1004988:	1880200c 	andi	r2,r3,128
 100498c:	10000426 	beq	r2,zero,10049a0 <__smakebuf_r+0xfc>
 1004990:	04801004 	movi	r18,64
 1004994:	18820014 	ori	r2,r3,2048
 1004998:	8080030d 	sth	r2,12(r16)
 100499c:	003fe506 	br	1004934 <__smakebuf_r+0x90>
 10049a0:	04810004 	movi	r18,1024
 10049a4:	003ffb06 	br	1004994 <__smakebuf_r+0xf0>
 10049a8:	8140038f 	ldh	r5,14(r16)
 10049ac:	8809883a 	mov	r4,r17
 10049b0:	1009b740 	call	1009b74 <_isatty_r>
 10049b4:	103fde26 	beq	r2,zero,1004930 <__smakebuf_r+0x8c>
 10049b8:	8080030b 	ldhu	r2,12(r16)
 10049bc:	80c010c4 	addi	r3,r16,67
 10049c0:	04810004 	movi	r18,1024
 10049c4:	10800054 	ori	r2,r2,1
 10049c8:	8080030d 	sth	r2,12(r16)
 10049cc:	00800044 	movi	r2,1
 10049d0:	80c00415 	stw	r3,16(r16)
 10049d4:	80800515 	stw	r2,20(r16)
 10049d8:	80c00015 	stw	r3,0(r16)
 10049dc:	003fd506 	br	1004934 <__smakebuf_r+0x90>
 10049e0:	80c00a17 	ldw	r3,40(r16)
 10049e4:	00804034 	movhi	r2,256
 10049e8:	10968204 	addi	r2,r2,23048
 10049ec:	18bfcb1e 	bne	r3,r2,100491c <__smakebuf_r+0x78>
 10049f0:	8080030b 	ldhu	r2,12(r16)
 10049f4:	00c10004 	movi	r3,1024
 10049f8:	1825883a 	mov	r18,r3
 10049fc:	10c4b03a 	or	r2,r2,r3
 1004a00:	8080030d 	sth	r2,12(r16)
 1004a04:	80c01315 	stw	r3,76(r16)
 1004a08:	003fca06 	br	1004934 <__smakebuf_r+0x90>
 1004a0c:	8100030b 	ldhu	r4,12(r16)
 1004a10:	2080800c 	andi	r2,r4,512
 1004a14:	103fb21e 	bne	r2,zero,10048e0 <__smakebuf_r+0x3c>
 1004a18:	80c010c4 	addi	r3,r16,67
 1004a1c:	21000094 	ori	r4,r4,2
 1004a20:	00800044 	movi	r2,1
 1004a24:	80800515 	stw	r2,20(r16)
 1004a28:	8100030d 	sth	r4,12(r16)
 1004a2c:	80c00415 	stw	r3,16(r16)
 1004a30:	80c00015 	stw	r3,0(r16)
 1004a34:	003faa06 	br	10048e0 <__smakebuf_r+0x3c>

01004a38 <free>:
 1004a38:	00804074 	movhi	r2,257
 1004a3c:	108e6a04 	addi	r2,r2,14760
 1004a40:	200b883a 	mov	r5,r4
 1004a44:	11000017 	ldw	r4,0(r2)
 1004a48:	1003d281 	jmpi	1003d28 <_free_r>

01004a4c <malloc>:
 1004a4c:	00804074 	movhi	r2,257
 1004a50:	108e6a04 	addi	r2,r2,14760
 1004a54:	200b883a 	mov	r5,r4
 1004a58:	11000017 	ldw	r4,0(r2)
 1004a5c:	1004a601 	jmpi	1004a60 <_malloc_r>

01004a60 <_malloc_r>:
 1004a60:	defff604 	addi	sp,sp,-40
 1004a64:	28c002c4 	addi	r3,r5,11
 1004a68:	00800584 	movi	r2,22
 1004a6c:	dc800215 	stw	r18,8(sp)
 1004a70:	dfc00915 	stw	ra,36(sp)
 1004a74:	df000815 	stw	fp,32(sp)
 1004a78:	ddc00715 	stw	r23,28(sp)
 1004a7c:	dd800615 	stw	r22,24(sp)
 1004a80:	dd400515 	stw	r21,20(sp)
 1004a84:	dd000415 	stw	r20,16(sp)
 1004a88:	dcc00315 	stw	r19,12(sp)
 1004a8c:	dc400115 	stw	r17,4(sp)
 1004a90:	dc000015 	stw	r16,0(sp)
 1004a94:	2025883a 	mov	r18,r4
 1004a98:	10c01236 	bltu	r2,r3,1004ae4 <_malloc_r+0x84>
 1004a9c:	04400404 	movi	r17,16
 1004aa0:	8940142e 	bgeu	r17,r5,1004af4 <_malloc_r+0x94>
 1004aa4:	00800304 	movi	r2,12
 1004aa8:	0007883a 	mov	r3,zero
 1004aac:	90800015 	stw	r2,0(r18)
 1004ab0:	1805883a 	mov	r2,r3
 1004ab4:	dfc00917 	ldw	ra,36(sp)
 1004ab8:	df000817 	ldw	fp,32(sp)
 1004abc:	ddc00717 	ldw	r23,28(sp)
 1004ac0:	dd800617 	ldw	r22,24(sp)
 1004ac4:	dd400517 	ldw	r21,20(sp)
 1004ac8:	dd000417 	ldw	r20,16(sp)
 1004acc:	dcc00317 	ldw	r19,12(sp)
 1004ad0:	dc800217 	ldw	r18,8(sp)
 1004ad4:	dc400117 	ldw	r17,4(sp)
 1004ad8:	dc000017 	ldw	r16,0(sp)
 1004adc:	dec00a04 	addi	sp,sp,40
 1004ae0:	f800283a 	ret
 1004ae4:	00bffe04 	movi	r2,-8
 1004ae8:	18a2703a 	and	r17,r3,r2
 1004aec:	883fed16 	blt	r17,zero,1004aa4 <_malloc_r+0x44>
 1004af0:	897fec36 	bltu	r17,r5,1004aa4 <_malloc_r+0x44>
 1004af4:	9009883a 	mov	r4,r18
 1004af8:	100ea580 	call	100ea58 <__malloc_lock>
 1004afc:	00807dc4 	movi	r2,503
 1004b00:	14402b2e 	bgeu	r2,r17,1004bb0 <_malloc_r+0x150>
 1004b04:	8806d27a 	srli	r3,r17,9
 1004b08:	18003f1e 	bne	r3,zero,1004c08 <_malloc_r+0x1a8>
 1004b0c:	880cd0fa 	srli	r6,r17,3
 1004b10:	300490fa 	slli	r2,r6,3
 1004b14:	02c04074 	movhi	r11,257
 1004b18:	5ac8ab04 	addi	r11,r11,8876
 1004b1c:	12cb883a 	add	r5,r2,r11
 1004b20:	2c000317 	ldw	r16,12(r5)
 1004b24:	580f883a 	mov	r7,r11
 1004b28:	2c00041e 	bne	r5,r16,1004b3c <_malloc_r+0xdc>
 1004b2c:	00000a06 	br	1004b58 <_malloc_r+0xf8>
 1004b30:	1800860e 	bge	r3,zero,1004d4c <_malloc_r+0x2ec>
 1004b34:	84000317 	ldw	r16,12(r16)
 1004b38:	2c000726 	beq	r5,r16,1004b58 <_malloc_r+0xf8>
 1004b3c:	80800117 	ldw	r2,4(r16)
 1004b40:	00ffff04 	movi	r3,-4
 1004b44:	10c8703a 	and	r4,r2,r3
 1004b48:	2447c83a 	sub	r3,r4,r17
 1004b4c:	008003c4 	movi	r2,15
 1004b50:	10fff70e 	bge	r2,r3,1004b30 <_malloc_r+0xd0>
 1004b54:	31bfffc4 	addi	r6,r6,-1
 1004b58:	32400044 	addi	r9,r6,1
 1004b5c:	02804074 	movhi	r10,257
 1004b60:	5288ad04 	addi	r10,r10,8884
 1004b64:	54000217 	ldw	r16,8(r10)
 1004b68:	8280a026 	beq	r16,r10,1004dec <_malloc_r+0x38c>
 1004b6c:	80800117 	ldw	r2,4(r16)
 1004b70:	00ffff04 	movi	r3,-4
 1004b74:	10ca703a 	and	r5,r2,r3
 1004b78:	2c4dc83a 	sub	r6,r5,r17
 1004b7c:	008003c4 	movi	r2,15
 1004b80:	11808316 	blt	r2,r6,1004d90 <_malloc_r+0x330>
 1004b84:	52800315 	stw	r10,12(r10)
 1004b88:	52800215 	stw	r10,8(r10)
 1004b8c:	30002916 	blt	r6,zero,1004c34 <_malloc_r+0x1d4>
 1004b90:	8147883a 	add	r3,r16,r5
 1004b94:	18800117 	ldw	r2,4(r3)
 1004b98:	9009883a 	mov	r4,r18
 1004b9c:	10800054 	ori	r2,r2,1
 1004ba0:	18800115 	stw	r2,4(r3)
 1004ba4:	100ea780 	call	100ea78 <__malloc_unlock>
 1004ba8:	80c00204 	addi	r3,r16,8
 1004bac:	003fc006 	br	1004ab0 <_malloc_r+0x50>
 1004bb0:	02c04074 	movhi	r11,257
 1004bb4:	5ac8ab04 	addi	r11,r11,8876
 1004bb8:	8ac5883a 	add	r2,r17,r11
 1004bbc:	14000317 	ldw	r16,12(r2)
 1004bc0:	580f883a 	mov	r7,r11
 1004bc4:	8806d0fa 	srli	r3,r17,3
 1004bc8:	14006c26 	beq	r2,r16,1004d7c <_malloc_r+0x31c>
 1004bcc:	80c00117 	ldw	r3,4(r16)
 1004bd0:	00bfff04 	movi	r2,-4
 1004bd4:	81800317 	ldw	r6,12(r16)
 1004bd8:	1886703a 	and	r3,r3,r2
 1004bdc:	80c7883a 	add	r3,r16,r3
 1004be0:	18800117 	ldw	r2,4(r3)
 1004be4:	81400217 	ldw	r5,8(r16)
 1004be8:	9009883a 	mov	r4,r18
 1004bec:	10800054 	ori	r2,r2,1
 1004bf0:	18800115 	stw	r2,4(r3)
 1004bf4:	31400215 	stw	r5,8(r6)
 1004bf8:	29800315 	stw	r6,12(r5)
 1004bfc:	100ea780 	call	100ea78 <__malloc_unlock>
 1004c00:	80c00204 	addi	r3,r16,8
 1004c04:	003faa06 	br	1004ab0 <_malloc_r+0x50>
 1004c08:	00800104 	movi	r2,4
 1004c0c:	10c0052e 	bgeu	r2,r3,1004c24 <_malloc_r+0x1c4>
 1004c10:	00800504 	movi	r2,20
 1004c14:	10c07836 	bltu	r2,r3,1004df8 <_malloc_r+0x398>
 1004c18:	198016c4 	addi	r6,r3,91
 1004c1c:	300490fa 	slli	r2,r6,3
 1004c20:	003fbc06 	br	1004b14 <_malloc_r+0xb4>
 1004c24:	8804d1ba 	srli	r2,r17,6
 1004c28:	11800e04 	addi	r6,r2,56
 1004c2c:	300490fa 	slli	r2,r6,3
 1004c30:	003fb806 	br	1004b14 <_malloc_r+0xb4>
 1004c34:	00807fc4 	movi	r2,511
 1004c38:	1140bb36 	bltu	r2,r5,1004f28 <_malloc_r+0x4c8>
 1004c3c:	2806d0fa 	srli	r3,r5,3
 1004c40:	573ffe04 	addi	fp,r10,-8
 1004c44:	00800044 	movi	r2,1
 1004c48:	180890fa 	slli	r4,r3,3
 1004c4c:	1807d0ba 	srai	r3,r3,2
 1004c50:	e1c00117 	ldw	r7,4(fp)
 1004c54:	5909883a 	add	r4,r11,r4
 1004c58:	21400217 	ldw	r5,8(r4)
 1004c5c:	10c4983a 	sll	r2,r2,r3
 1004c60:	81000315 	stw	r4,12(r16)
 1004c64:	81400215 	stw	r5,8(r16)
 1004c68:	388eb03a 	or	r7,r7,r2
 1004c6c:	2c000315 	stw	r16,12(r5)
 1004c70:	24000215 	stw	r16,8(r4)
 1004c74:	e1c00115 	stw	r7,4(fp)
 1004c78:	4807883a 	mov	r3,r9
 1004c7c:	4800cd16 	blt	r9,zero,1004fb4 <_malloc_r+0x554>
 1004c80:	1807d0ba 	srai	r3,r3,2
 1004c84:	00800044 	movi	r2,1
 1004c88:	10c8983a 	sll	r4,r2,r3
 1004c8c:	39004436 	bltu	r7,r4,1004da0 <_malloc_r+0x340>
 1004c90:	21c4703a 	and	r2,r4,r7
 1004c94:	10000a1e 	bne	r2,zero,1004cc0 <_malloc_r+0x260>
 1004c98:	2109883a 	add	r4,r4,r4
 1004c9c:	00bfff04 	movi	r2,-4
 1004ca0:	4884703a 	and	r2,r9,r2
 1004ca4:	3906703a 	and	r3,r7,r4
 1004ca8:	12400104 	addi	r9,r2,4
 1004cac:	1800041e 	bne	r3,zero,1004cc0 <_malloc_r+0x260>
 1004cb0:	2109883a 	add	r4,r4,r4
 1004cb4:	3904703a 	and	r2,r7,r4
 1004cb8:	4a400104 	addi	r9,r9,4
 1004cbc:	103ffc26 	beq	r2,zero,1004cb0 <_malloc_r+0x250>
 1004cc0:	480490fa 	slli	r2,r9,3
 1004cc4:	4819883a 	mov	r12,r9
 1004cc8:	023fff04 	movi	r8,-4
 1004ccc:	589b883a 	add	r13,r11,r2
 1004cd0:	6807883a 	mov	r3,r13
 1004cd4:	014003c4 	movi	r5,15
 1004cd8:	1c000317 	ldw	r16,12(r3)
 1004cdc:	1c00041e 	bne	r3,r16,1004cf0 <_malloc_r+0x290>
 1004ce0:	0000a706 	br	1004f80 <_malloc_r+0x520>
 1004ce4:	3000ab0e 	bge	r6,zero,1004f94 <_malloc_r+0x534>
 1004ce8:	84000317 	ldw	r16,12(r16)
 1004cec:	1c00a426 	beq	r3,r16,1004f80 <_malloc_r+0x520>
 1004cf0:	80800117 	ldw	r2,4(r16)
 1004cf4:	1204703a 	and	r2,r2,r8
 1004cf8:	144dc83a 	sub	r6,r2,r17
 1004cfc:	29bff90e 	bge	r5,r6,1004ce4 <_malloc_r+0x284>
 1004d00:	81000317 	ldw	r4,12(r16)
 1004d04:	80c00217 	ldw	r3,8(r16)
 1004d08:	89400054 	ori	r5,r17,1
 1004d0c:	8445883a 	add	r2,r16,r17
 1004d10:	20c00215 	stw	r3,8(r4)
 1004d14:	19000315 	stw	r4,12(r3)
 1004d18:	81400115 	stw	r5,4(r16)
 1004d1c:	1187883a 	add	r3,r2,r6
 1004d20:	31000054 	ori	r4,r6,1
 1004d24:	50800315 	stw	r2,12(r10)
 1004d28:	50800215 	stw	r2,8(r10)
 1004d2c:	19800015 	stw	r6,0(r3)
 1004d30:	11000115 	stw	r4,4(r2)
 1004d34:	12800215 	stw	r10,8(r2)
 1004d38:	12800315 	stw	r10,12(r2)
 1004d3c:	9009883a 	mov	r4,r18
 1004d40:	100ea780 	call	100ea78 <__malloc_unlock>
 1004d44:	80c00204 	addi	r3,r16,8
 1004d48:	003f5906 	br	1004ab0 <_malloc_r+0x50>
 1004d4c:	8109883a 	add	r4,r16,r4
 1004d50:	20800117 	ldw	r2,4(r4)
 1004d54:	80c00217 	ldw	r3,8(r16)
 1004d58:	81400317 	ldw	r5,12(r16)
 1004d5c:	10800054 	ori	r2,r2,1
 1004d60:	20800115 	stw	r2,4(r4)
 1004d64:	28c00215 	stw	r3,8(r5)
 1004d68:	19400315 	stw	r5,12(r3)
 1004d6c:	9009883a 	mov	r4,r18
 1004d70:	100ea780 	call	100ea78 <__malloc_unlock>
 1004d74:	80c00204 	addi	r3,r16,8
 1004d78:	003f4d06 	br	1004ab0 <_malloc_r+0x50>
 1004d7c:	80800204 	addi	r2,r16,8
 1004d80:	14000317 	ldw	r16,12(r2)
 1004d84:	143f911e 	bne	r2,r16,1004bcc <_malloc_r+0x16c>
 1004d88:	1a400084 	addi	r9,r3,2
 1004d8c:	003f7306 	br	1004b5c <_malloc_r+0xfc>
 1004d90:	88c00054 	ori	r3,r17,1
 1004d94:	8445883a 	add	r2,r16,r17
 1004d98:	80c00115 	stw	r3,4(r16)
 1004d9c:	003fdf06 	br	1004d1c <_malloc_r+0x2bc>
 1004da0:	e4000217 	ldw	r16,8(fp)
 1004da4:	00bfff04 	movi	r2,-4
 1004da8:	80c00117 	ldw	r3,4(r16)
 1004dac:	802d883a 	mov	r22,r16
 1004db0:	18aa703a 	and	r21,r3,r2
 1004db4:	ac401636 	bltu	r21,r17,1004e10 <_malloc_r+0x3b0>
 1004db8:	ac49c83a 	sub	r4,r21,r17
 1004dbc:	008003c4 	movi	r2,15
 1004dc0:	1100130e 	bge	r2,r4,1004e10 <_malloc_r+0x3b0>
 1004dc4:	88800054 	ori	r2,r17,1
 1004dc8:	8447883a 	add	r3,r16,r17
 1004dcc:	80800115 	stw	r2,4(r16)
 1004dd0:	20800054 	ori	r2,r4,1
 1004dd4:	18800115 	stw	r2,4(r3)
 1004dd8:	e0c00215 	stw	r3,8(fp)
 1004ddc:	9009883a 	mov	r4,r18
 1004de0:	100ea780 	call	100ea78 <__malloc_unlock>
 1004de4:	80c00204 	addi	r3,r16,8
 1004de8:	003f3106 	br	1004ab0 <_malloc_r+0x50>
 1004dec:	39c00117 	ldw	r7,4(r7)
 1004df0:	573ffe04 	addi	fp,r10,-8
 1004df4:	003fa006 	br	1004c78 <_malloc_r+0x218>
 1004df8:	00801504 	movi	r2,84
 1004dfc:	10c06736 	bltu	r2,r3,1004f9c <_malloc_r+0x53c>
 1004e00:	8804d33a 	srli	r2,r17,12
 1004e04:	11801b84 	addi	r6,r2,110
 1004e08:	300490fa 	slli	r2,r6,3
 1004e0c:	003f4106 	br	1004b14 <_malloc_r+0xb4>
 1004e10:	d0a6f117 	ldw	r2,-25660(gp)
 1004e14:	d0e00a17 	ldw	r3,-32728(gp)
 1004e18:	053fffc4 	movi	r20,-1
 1004e1c:	10800404 	addi	r2,r2,16
 1004e20:	88a7883a 	add	r19,r17,r2
 1004e24:	1d000326 	beq	r3,r20,1004e34 <_malloc_r+0x3d4>
 1004e28:	98c3ffc4 	addi	r3,r19,4095
 1004e2c:	00bc0004 	movi	r2,-4096
 1004e30:	18a6703a 	and	r19,r3,r2
 1004e34:	9009883a 	mov	r4,r18
 1004e38:	980b883a 	mov	r5,r19
 1004e3c:	10056400 	call	1005640 <_sbrk_r>
 1004e40:	1009883a 	mov	r4,r2
 1004e44:	15000426 	beq	r2,r20,1004e58 <_malloc_r+0x3f8>
 1004e48:	854b883a 	add	r5,r16,r21
 1004e4c:	1029883a 	mov	r20,r2
 1004e50:	11405a2e 	bgeu	r2,r5,1004fbc <_malloc_r+0x55c>
 1004e54:	87000c26 	beq	r16,fp,1004e88 <_malloc_r+0x428>
 1004e58:	e4000217 	ldw	r16,8(fp)
 1004e5c:	80c00117 	ldw	r3,4(r16)
 1004e60:	00bfff04 	movi	r2,-4
 1004e64:	1884703a 	and	r2,r3,r2
 1004e68:	14400336 	bltu	r2,r17,1004e78 <_malloc_r+0x418>
 1004e6c:	1449c83a 	sub	r4,r2,r17
 1004e70:	008003c4 	movi	r2,15
 1004e74:	113fd316 	blt	r2,r4,1004dc4 <_malloc_r+0x364>
 1004e78:	9009883a 	mov	r4,r18
 1004e7c:	100ea780 	call	100ea78 <__malloc_unlock>
 1004e80:	0007883a 	mov	r3,zero
 1004e84:	003f0a06 	br	1004ab0 <_malloc_r+0x50>
 1004e88:	05c04074 	movhi	r23,257
 1004e8c:	bdd76504 	addi	r23,r23,23956
 1004e90:	b8800017 	ldw	r2,0(r23)
 1004e94:	988d883a 	add	r6,r19,r2
 1004e98:	b9800015 	stw	r6,0(r23)
 1004e9c:	d0e00a17 	ldw	r3,-32728(gp)
 1004ea0:	00bfffc4 	movi	r2,-1
 1004ea4:	18808e26 	beq	r3,r2,10050e0 <_malloc_r+0x680>
 1004ea8:	2145c83a 	sub	r2,r4,r5
 1004eac:	3085883a 	add	r2,r6,r2
 1004eb0:	b8800015 	stw	r2,0(r23)
 1004eb4:	20c001cc 	andi	r3,r4,7
 1004eb8:	18005f1e 	bne	r3,zero,1005038 <_malloc_r+0x5d8>
 1004ebc:	000b883a 	mov	r5,zero
 1004ec0:	a4c5883a 	add	r2,r20,r19
 1004ec4:	1083ffcc 	andi	r2,r2,4095
 1004ec8:	00c40004 	movi	r3,4096
 1004ecc:	1887c83a 	sub	r3,r3,r2
 1004ed0:	28e7883a 	add	r19,r5,r3
 1004ed4:	9009883a 	mov	r4,r18
 1004ed8:	980b883a 	mov	r5,r19
 1004edc:	10056400 	call	1005640 <_sbrk_r>
 1004ee0:	1007883a 	mov	r3,r2
 1004ee4:	00bfffc4 	movi	r2,-1
 1004ee8:	18807a26 	beq	r3,r2,10050d4 <_malloc_r+0x674>
 1004eec:	1d05c83a 	sub	r2,r3,r20
 1004ef0:	9885883a 	add	r2,r19,r2
 1004ef4:	10c00054 	ori	r3,r2,1
 1004ef8:	b8800017 	ldw	r2,0(r23)
 1004efc:	a021883a 	mov	r16,r20
 1004f00:	a0c00115 	stw	r3,4(r20)
 1004f04:	9885883a 	add	r2,r19,r2
 1004f08:	b8800015 	stw	r2,0(r23)
 1004f0c:	e5000215 	stw	r20,8(fp)
 1004f10:	b7003626 	beq	r22,fp,1004fec <_malloc_r+0x58c>
 1004f14:	018003c4 	movi	r6,15
 1004f18:	35404b36 	bltu	r6,r21,1005048 <_malloc_r+0x5e8>
 1004f1c:	00800044 	movi	r2,1
 1004f20:	a0800115 	stw	r2,4(r20)
 1004f24:	003fcd06 	br	1004e5c <_malloc_r+0x3fc>
 1004f28:	2808d27a 	srli	r4,r5,9
 1004f2c:	2000371e 	bne	r4,zero,100500c <_malloc_r+0x5ac>
 1004f30:	2808d0fa 	srli	r4,r5,3
 1004f34:	200690fa 	slli	r3,r4,3
 1004f38:	1ad1883a 	add	r8,r3,r11
 1004f3c:	41800217 	ldw	r6,8(r8)
 1004f40:	41805b26 	beq	r8,r6,10050b0 <_malloc_r+0x650>
 1004f44:	30800117 	ldw	r2,4(r6)
 1004f48:	00ffff04 	movi	r3,-4
 1004f4c:	10c4703a 	and	r2,r2,r3
 1004f50:	2880022e 	bgeu	r5,r2,1004f5c <_malloc_r+0x4fc>
 1004f54:	31800217 	ldw	r6,8(r6)
 1004f58:	41bffa1e 	bne	r8,r6,1004f44 <_malloc_r+0x4e4>
 1004f5c:	32000317 	ldw	r8,12(r6)
 1004f60:	39c00117 	ldw	r7,4(r7)
 1004f64:	82000315 	stw	r8,12(r16)
 1004f68:	81800215 	stw	r6,8(r16)
 1004f6c:	07004074 	movhi	fp,257
 1004f70:	e708ab04 	addi	fp,fp,8876
 1004f74:	34000315 	stw	r16,12(r6)
 1004f78:	44000215 	stw	r16,8(r8)
 1004f7c:	003f3e06 	br	1004c78 <_malloc_r+0x218>
 1004f80:	63000044 	addi	r12,r12,1
 1004f84:	608000cc 	andi	r2,r12,3
 1004f88:	10005d26 	beq	r2,zero,1005100 <_malloc_r+0x6a0>
 1004f8c:	18c00204 	addi	r3,r3,8
 1004f90:	003f5106 	br	1004cd8 <_malloc_r+0x278>
 1004f94:	8089883a 	add	r4,r16,r2
 1004f98:	003f6d06 	br	1004d50 <_malloc_r+0x2f0>
 1004f9c:	00805504 	movi	r2,340
 1004fa0:	10c02036 	bltu	r2,r3,1005024 <_malloc_r+0x5c4>
 1004fa4:	8804d3fa 	srli	r2,r17,15
 1004fa8:	11801dc4 	addi	r6,r2,119
 1004fac:	300490fa 	slli	r2,r6,3
 1004fb0:	003ed806 	br	1004b14 <_malloc_r+0xb4>
 1004fb4:	48c000c4 	addi	r3,r9,3
 1004fb8:	003f3106 	br	1004c80 <_malloc_r+0x220>
 1004fbc:	05c04074 	movhi	r23,257
 1004fc0:	bdd76504 	addi	r23,r23,23956
 1004fc4:	b8800017 	ldw	r2,0(r23)
 1004fc8:	988d883a 	add	r6,r19,r2
 1004fcc:	b9800015 	stw	r6,0(r23)
 1004fd0:	293fb21e 	bne	r5,r4,1004e9c <_malloc_r+0x43c>
 1004fd4:	2083ffcc 	andi	r2,r4,4095
 1004fd8:	103fb01e 	bne	r2,zero,1004e9c <_malloc_r+0x43c>
 1004fdc:	e4000217 	ldw	r16,8(fp)
 1004fe0:	9d45883a 	add	r2,r19,r21
 1004fe4:	10800054 	ori	r2,r2,1
 1004fe8:	80800115 	stw	r2,4(r16)
 1004fec:	b8c00017 	ldw	r3,0(r23)
 1004ff0:	d0a6f217 	ldw	r2,-25656(gp)
 1004ff4:	10c0012e 	bgeu	r2,r3,1004ffc <_malloc_r+0x59c>
 1004ff8:	d0e6f215 	stw	r3,-25656(gp)
 1004ffc:	d0a6f317 	ldw	r2,-25652(gp)
 1005000:	10ff962e 	bgeu	r2,r3,1004e5c <_malloc_r+0x3fc>
 1005004:	d0e6f315 	stw	r3,-25652(gp)
 1005008:	003f9406 	br	1004e5c <_malloc_r+0x3fc>
 100500c:	00800104 	movi	r2,4
 1005010:	11001e36 	bltu	r2,r4,100508c <_malloc_r+0x62c>
 1005014:	2804d1ba 	srli	r2,r5,6
 1005018:	11000e04 	addi	r4,r2,56
 100501c:	200690fa 	slli	r3,r4,3
 1005020:	003fc506 	br	1004f38 <_malloc_r+0x4d8>
 1005024:	00815504 	movi	r2,1364
 1005028:	10c01d2e 	bgeu	r2,r3,10050a0 <_malloc_r+0x640>
 100502c:	01801f84 	movi	r6,126
 1005030:	0080fc04 	movi	r2,1008
 1005034:	003eb706 	br	1004b14 <_malloc_r+0xb4>
 1005038:	00800204 	movi	r2,8
 100503c:	10cbc83a 	sub	r5,r2,r3
 1005040:	2169883a 	add	r20,r4,r5
 1005044:	003f9e06 	br	1004ec0 <_malloc_r+0x460>
 1005048:	00bffe04 	movi	r2,-8
 100504c:	a93ffd04 	addi	r4,r21,-12
 1005050:	2088703a 	and	r4,r4,r2
 1005054:	b10b883a 	add	r5,r22,r4
 1005058:	00c00144 	movi	r3,5
 100505c:	28c00215 	stw	r3,8(r5)
 1005060:	28c00115 	stw	r3,4(r5)
 1005064:	b0800117 	ldw	r2,4(r22)
 1005068:	1080004c 	andi	r2,r2,1
 100506c:	2084b03a 	or	r2,r4,r2
 1005070:	b0800115 	stw	r2,4(r22)
 1005074:	313fdd2e 	bgeu	r6,r4,1004fec <_malloc_r+0x58c>
 1005078:	b1400204 	addi	r5,r22,8
 100507c:	9009883a 	mov	r4,r18
 1005080:	1003d280 	call	1003d28 <_free_r>
 1005084:	e4000217 	ldw	r16,8(fp)
 1005088:	003fd806 	br	1004fec <_malloc_r+0x58c>
 100508c:	00800504 	movi	r2,20
 1005090:	11001536 	bltu	r2,r4,10050e8 <_malloc_r+0x688>
 1005094:	210016c4 	addi	r4,r4,91
 1005098:	200690fa 	slli	r3,r4,3
 100509c:	003fa606 	br	1004f38 <_malloc_r+0x4d8>
 10050a0:	8804d4ba 	srli	r2,r17,18
 10050a4:	11801f04 	addi	r6,r2,124
 10050a8:	300490fa 	slli	r2,r6,3
 10050ac:	003e9906 	br	1004b14 <_malloc_r+0xb4>
 10050b0:	2009d0ba 	srai	r4,r4,2
 10050b4:	01404074 	movhi	r5,257
 10050b8:	2948ab04 	addi	r5,r5,8876
 10050bc:	00c00044 	movi	r3,1
 10050c0:	28800117 	ldw	r2,4(r5)
 10050c4:	1906983a 	sll	r3,r3,r4
 10050c8:	10c4b03a 	or	r2,r2,r3
 10050cc:	28800115 	stw	r2,4(r5)
 10050d0:	003fa306 	br	1004f60 <_malloc_r+0x500>
 10050d4:	0027883a 	mov	r19,zero
 10050d8:	00c00044 	movi	r3,1
 10050dc:	003f8606 	br	1004ef8 <_malloc_r+0x498>
 10050e0:	d1200a15 	stw	r4,-32728(gp)
 10050e4:	003f7306 	br	1004eb4 <_malloc_r+0x454>
 10050e8:	00801504 	movi	r2,84
 10050ec:	11001936 	bltu	r2,r4,1005154 <_malloc_r+0x6f4>
 10050f0:	2804d33a 	srli	r2,r5,12
 10050f4:	11001b84 	addi	r4,r2,110
 10050f8:	200690fa 	slli	r3,r4,3
 10050fc:	003f8e06 	br	1004f38 <_malloc_r+0x4d8>
 1005100:	480b883a 	mov	r5,r9
 1005104:	6807883a 	mov	r3,r13
 1005108:	288000cc 	andi	r2,r5,3
 100510c:	18fffe04 	addi	r3,r3,-8
 1005110:	297fffc4 	addi	r5,r5,-1
 1005114:	10001526 	beq	r2,zero,100516c <_malloc_r+0x70c>
 1005118:	18800217 	ldw	r2,8(r3)
 100511c:	10fffa26 	beq	r2,r3,1005108 <_malloc_r+0x6a8>
 1005120:	2109883a 	add	r4,r4,r4
 1005124:	393f1e36 	bltu	r7,r4,1004da0 <_malloc_r+0x340>
 1005128:	203f1d26 	beq	r4,zero,1004da0 <_malloc_r+0x340>
 100512c:	21c4703a 	and	r2,r4,r7
 1005130:	10000226 	beq	r2,zero,100513c <_malloc_r+0x6dc>
 1005134:	6013883a 	mov	r9,r12
 1005138:	003ee106 	br	1004cc0 <_malloc_r+0x260>
 100513c:	2109883a 	add	r4,r4,r4
 1005140:	3904703a 	and	r2,r7,r4
 1005144:	63000104 	addi	r12,r12,4
 1005148:	103ffc26 	beq	r2,zero,100513c <_malloc_r+0x6dc>
 100514c:	6013883a 	mov	r9,r12
 1005150:	003edb06 	br	1004cc0 <_malloc_r+0x260>
 1005154:	00805504 	movi	r2,340
 1005158:	11000836 	bltu	r2,r4,100517c <_malloc_r+0x71c>
 100515c:	2804d3fa 	srli	r2,r5,15
 1005160:	11001dc4 	addi	r4,r2,119
 1005164:	200690fa 	slli	r3,r4,3
 1005168:	003f7306 	br	1004f38 <_malloc_r+0x4d8>
 100516c:	0104303a 	nor	r2,zero,r4
 1005170:	388e703a 	and	r7,r7,r2
 1005174:	e1c00115 	stw	r7,4(fp)
 1005178:	003fe906 	br	1005120 <_malloc_r+0x6c0>
 100517c:	00815504 	movi	r2,1364
 1005180:	1100032e 	bgeu	r2,r4,1005190 <_malloc_r+0x730>
 1005184:	01001f84 	movi	r4,126
 1005188:	00c0fc04 	movi	r3,1008
 100518c:	003f6a06 	br	1004f38 <_malloc_r+0x4d8>
 1005190:	2804d4ba 	srli	r2,r5,18
 1005194:	11001f04 	addi	r4,r2,124
 1005198:	200690fa 	slli	r3,r4,3
 100519c:	003f6606 	br	1004f38 <_malloc_r+0x4d8>

010051a0 <memset>:
 10051a0:	008000c4 	movi	r2,3
 10051a4:	29403fcc 	andi	r5,r5,255
 10051a8:	2007883a 	mov	r3,r4
 10051ac:	1180022e 	bgeu	r2,r6,10051b8 <memset+0x18>
 10051b0:	2084703a 	and	r2,r4,r2
 10051b4:	10000826 	beq	r2,zero,10051d8 <memset+0x38>
 10051b8:	30000526 	beq	r6,zero,10051d0 <memset+0x30>
 10051bc:	2805883a 	mov	r2,r5
 10051c0:	30cd883a 	add	r6,r6,r3
 10051c4:	18800005 	stb	r2,0(r3)
 10051c8:	18c00044 	addi	r3,r3,1
 10051cc:	19bffd1e 	bne	r3,r6,10051c4 <memset+0x24>
 10051d0:	2005883a 	mov	r2,r4
 10051d4:	f800283a 	ret
 10051d8:	2804923a 	slli	r2,r5,8
 10051dc:	020003c4 	movi	r8,15
 10051e0:	200f883a 	mov	r7,r4
 10051e4:	2884b03a 	or	r2,r5,r2
 10051e8:	1006943a 	slli	r3,r2,16
 10051ec:	10c6b03a 	or	r3,r2,r3
 10051f0:	41800a2e 	bgeu	r8,r6,100521c <memset+0x7c>
 10051f4:	4005883a 	mov	r2,r8
 10051f8:	31bffc04 	addi	r6,r6,-16
 10051fc:	38c00015 	stw	r3,0(r7)
 1005200:	38c00115 	stw	r3,4(r7)
 1005204:	38c00215 	stw	r3,8(r7)
 1005208:	38c00315 	stw	r3,12(r7)
 100520c:	39c00404 	addi	r7,r7,16
 1005210:	11bff936 	bltu	r2,r6,10051f8 <memset+0x58>
 1005214:	008000c4 	movi	r2,3
 1005218:	1180052e 	bgeu	r2,r6,1005230 <memset+0x90>
 100521c:	31bfff04 	addi	r6,r6,-4
 1005220:	008000c4 	movi	r2,3
 1005224:	38c00015 	stw	r3,0(r7)
 1005228:	39c00104 	addi	r7,r7,4
 100522c:	11bffb36 	bltu	r2,r6,100521c <memset+0x7c>
 1005230:	3807883a 	mov	r3,r7
 1005234:	003fe006 	br	10051b8 <memset+0x18>

01005238 <_open_r>:
 1005238:	defffd04 	addi	sp,sp,-12
 100523c:	dc000015 	stw	r16,0(sp)
 1005240:	04004074 	movhi	r16,257
 1005244:	84155304 	addi	r16,r16,21836
 1005248:	dc400115 	stw	r17,4(sp)
 100524c:	80000015 	stw	zero,0(r16)
 1005250:	2023883a 	mov	r17,r4
 1005254:	2809883a 	mov	r4,r5
 1005258:	300b883a 	mov	r5,r6
 100525c:	380d883a 	mov	r6,r7
 1005260:	dfc00215 	stw	ra,8(sp)
 1005264:	100eb900 	call	100eb90 <open>
 1005268:	1007883a 	mov	r3,r2
 100526c:	00bfffc4 	movi	r2,-1
 1005270:	18800626 	beq	r3,r2,100528c <_open_r+0x54>
 1005274:	1805883a 	mov	r2,r3
 1005278:	dfc00217 	ldw	ra,8(sp)
 100527c:	dc400117 	ldw	r17,4(sp)
 1005280:	dc000017 	ldw	r16,0(sp)
 1005284:	dec00304 	addi	sp,sp,12
 1005288:	f800283a 	ret
 100528c:	80800017 	ldw	r2,0(r16)
 1005290:	103ff826 	beq	r2,zero,1005274 <_open_r+0x3c>
 1005294:	88800015 	stw	r2,0(r17)
 1005298:	1805883a 	mov	r2,r3
 100529c:	dfc00217 	ldw	ra,8(sp)
 10052a0:	dc400117 	ldw	r17,4(sp)
 10052a4:	dc000017 	ldw	r16,0(sp)
 10052a8:	dec00304 	addi	sp,sp,12
 10052ac:	f800283a 	ret

010052b0 <printf>:
 10052b0:	defffb04 	addi	sp,sp,-20
 10052b4:	dfc00115 	stw	ra,4(sp)
 10052b8:	d9400215 	stw	r5,8(sp)
 10052bc:	d9800315 	stw	r6,12(sp)
 10052c0:	d9c00415 	stw	r7,16(sp)
 10052c4:	00804074 	movhi	r2,257
 10052c8:	108e6a04 	addi	r2,r2,14760
 10052cc:	10c00017 	ldw	r3,0(r2)
 10052d0:	200b883a 	mov	r5,r4
 10052d4:	d8800204 	addi	r2,sp,8
 10052d8:	19000217 	ldw	r4,8(r3)
 10052dc:	100d883a 	mov	r6,r2
 10052e0:	d8800015 	stw	r2,0(sp)
 10052e4:	1007bf80 	call	1007bf8 <__vfprintf_internal>
 10052e8:	dfc00117 	ldw	ra,4(sp)
 10052ec:	dec00504 	addi	sp,sp,20
 10052f0:	f800283a 	ret

010052f4 <_printf_r>:
 10052f4:	defffc04 	addi	sp,sp,-16
 10052f8:	dfc00115 	stw	ra,4(sp)
 10052fc:	d9800215 	stw	r6,8(sp)
 1005300:	d9c00315 	stw	r7,12(sp)
 1005304:	280d883a 	mov	r6,r5
 1005308:	21400217 	ldw	r5,8(r4)
 100530c:	d8c00204 	addi	r3,sp,8
 1005310:	180f883a 	mov	r7,r3
 1005314:	d8c00015 	stw	r3,0(sp)
 1005318:	1005d340 	call	1005d34 <___vfprintf_internal_r>
 100531c:	dfc00117 	ldw	ra,4(sp)
 1005320:	dec00404 	addi	sp,sp,16
 1005324:	f800283a 	ret

01005328 <putchar>:
 1005328:	00804074 	movhi	r2,257
 100532c:	108e6a04 	addi	r2,r2,14760
 1005330:	11800017 	ldw	r6,0(r2)
 1005334:	200b883a 	mov	r5,r4
 1005338:	3009883a 	mov	r4,r6
 100533c:	31800217 	ldw	r6,8(r6)
 1005340:	100b1141 	jmpi	100b114 <_putc_r>

01005344 <_putchar_r>:
 1005344:	21800217 	ldw	r6,8(r4)
 1005348:	100b1141 	jmpi	100b114 <_putc_r>

0100534c <_puts_r>:
 100534c:	defff604 	addi	sp,sp,-40
 1005350:	dc400715 	stw	r17,28(sp)
 1005354:	2023883a 	mov	r17,r4
 1005358:	2809883a 	mov	r4,r5
 100535c:	dfc00915 	stw	ra,36(sp)
 1005360:	dcc00815 	stw	r19,32(sp)
 1005364:	2827883a 	mov	r19,r5
 1005368:	1005c680 	call	1005c68 <strlen>
 100536c:	89400217 	ldw	r5,8(r17)
 1005370:	00c04074 	movhi	r3,257
 1005374:	18c6d704 	addi	r3,r3,7004
 1005378:	01c00044 	movi	r7,1
 100537c:	12000044 	addi	r8,r2,1
 1005380:	d8c00515 	stw	r3,20(sp)
 1005384:	d9c00615 	stw	r7,24(sp)
 1005388:	d8c00304 	addi	r3,sp,12
 100538c:	01c00084 	movi	r7,2
 1005390:	8809883a 	mov	r4,r17
 1005394:	d80d883a 	mov	r6,sp
 1005398:	d8c00015 	stw	r3,0(sp)
 100539c:	dcc00315 	stw	r19,12(sp)
 10053a0:	da000215 	stw	r8,8(sp)
 10053a4:	d9c00115 	stw	r7,4(sp)
 10053a8:	d8800415 	stw	r2,16(sp)
 10053ac:	10096d80 	call	10096d8 <__sfvwrite_r>
 10053b0:	00ffffc4 	movi	r3,-1
 10053b4:	10000626 	beq	r2,zero,10053d0 <_puts_r+0x84>
 10053b8:	1805883a 	mov	r2,r3
 10053bc:	dfc00917 	ldw	ra,36(sp)
 10053c0:	dcc00817 	ldw	r19,32(sp)
 10053c4:	dc400717 	ldw	r17,28(sp)
 10053c8:	dec00a04 	addi	sp,sp,40
 10053cc:	f800283a 	ret
 10053d0:	00c00284 	movi	r3,10
 10053d4:	1805883a 	mov	r2,r3
 10053d8:	dfc00917 	ldw	ra,36(sp)
 10053dc:	dcc00817 	ldw	r19,32(sp)
 10053e0:	dc400717 	ldw	r17,28(sp)
 10053e4:	dec00a04 	addi	sp,sp,40
 10053e8:	f800283a 	ret

010053ec <puts>:
 10053ec:	00804074 	movhi	r2,257
 10053f0:	108e6a04 	addi	r2,r2,14760
 10053f4:	200b883a 	mov	r5,r4
 10053f8:	11000017 	ldw	r4,0(r2)
 10053fc:	100534c1 	jmpi	100534c <_puts_r>

01005400 <__srefill_r>:
 1005400:	defffd04 	addi	sp,sp,-12
 1005404:	dc400115 	stw	r17,4(sp)
 1005408:	dc000015 	stw	r16,0(sp)
 100540c:	dfc00215 	stw	ra,8(sp)
 1005410:	2023883a 	mov	r17,r4
 1005414:	2821883a 	mov	r16,r5
 1005418:	20000226 	beq	r4,zero,1005424 <__srefill_r+0x24>
 100541c:	20800e17 	ldw	r2,56(r4)
 1005420:	10004126 	beq	r2,zero,1005528 <__srefill_r+0x128>
 1005424:	80c0030b 	ldhu	r3,12(r16)
 1005428:	80000115 	stw	zero,4(r16)
 100542c:	1880080c 	andi	r2,r3,32
 1005430:	1000361e 	bne	r2,zero,100550c <__srefill_r+0x10c>
 1005434:	1880010c 	andi	r2,r3,4
 1005438:	1000211e 	bne	r2,zero,10054c0 <__srefill_r+0xc0>
 100543c:	1880040c 	andi	r2,r3,16
 1005440:	10005026 	beq	r2,zero,1005584 <__srefill_r+0x184>
 1005444:	1880020c 	andi	r2,r3,8
 1005448:	1000541e 	bne	r2,zero,100559c <__srefill_r+0x19c>
 100544c:	8080030b 	ldhu	r2,12(r16)
 1005450:	10800114 	ori	r2,r2,4
 1005454:	8080030d 	sth	r2,12(r16)
 1005458:	80800417 	ldw	r2,16(r16)
 100545c:	10004526 	beq	r2,zero,1005574 <__srefill_r+0x174>
 1005460:	8080030b 	ldhu	r2,12(r16)
 1005464:	108000cc 	andi	r2,r2,3
 1005468:	1000361e 	bne	r2,zero,1005544 <__srefill_r+0x144>
 100546c:	81800417 	ldw	r6,16(r16)
 1005470:	80c00817 	ldw	r3,32(r16)
 1005474:	81400717 	ldw	r5,28(r16)
 1005478:	81c00517 	ldw	r7,20(r16)
 100547c:	8809883a 	mov	r4,r17
 1005480:	81800015 	stw	r6,0(r16)
 1005484:	183ee83a 	callr	r3
 1005488:	80c0030b 	ldhu	r3,12(r16)
 100548c:	1009883a 	mov	r4,r2
 1005490:	80800115 	stw	r2,4(r16)
 1005494:	00b7ffc4 	movi	r2,-8193
 1005498:	1884703a 	and	r2,r3,r2
 100549c:	8080030d 	sth	r2,12(r16)
 10054a0:	0100230e 	bge	zero,r4,1005530 <__srefill_r+0x130>
 10054a4:	0009883a 	mov	r4,zero
 10054a8:	2005883a 	mov	r2,r4
 10054ac:	dfc00217 	ldw	ra,8(sp)
 10054b0:	dc400117 	ldw	r17,4(sp)
 10054b4:	dc000017 	ldw	r16,0(sp)
 10054b8:	dec00304 	addi	sp,sp,12
 10054bc:	f800283a 	ret
 10054c0:	81400c17 	ldw	r5,48(r16)
 10054c4:	283fe426 	beq	r5,zero,1005458 <__srefill_r+0x58>
 10054c8:	80801004 	addi	r2,r16,64
 10054cc:	28800226 	beq	r5,r2,10054d8 <__srefill_r+0xd8>
 10054d0:	8809883a 	mov	r4,r17
 10054d4:	1003d280 	call	1003d28 <_free_r>
 10054d8:	80800f17 	ldw	r2,60(r16)
 10054dc:	80000c15 	stw	zero,48(r16)
 10054e0:	80800115 	stw	r2,4(r16)
 10054e4:	103fdc26 	beq	r2,zero,1005458 <__srefill_r+0x58>
 10054e8:	80800e17 	ldw	r2,56(r16)
 10054ec:	0009883a 	mov	r4,zero
 10054f0:	80800015 	stw	r2,0(r16)
 10054f4:	2005883a 	mov	r2,r4
 10054f8:	dfc00217 	ldw	ra,8(sp)
 10054fc:	dc400117 	ldw	r17,4(sp)
 1005500:	dc000017 	ldw	r16,0(sp)
 1005504:	dec00304 	addi	sp,sp,12
 1005508:	f800283a 	ret
 100550c:	013fffc4 	movi	r4,-1
 1005510:	2005883a 	mov	r2,r4
 1005514:	dfc00217 	ldw	ra,8(sp)
 1005518:	dc400117 	ldw	r17,4(sp)
 100551c:	dc000017 	ldw	r16,0(sp)
 1005520:	dec00304 	addi	sp,sp,12
 1005524:	f800283a 	ret
 1005528:	10038600 	call	1003860 <__sinit>
 100552c:	003fbd06 	br	1005424 <__srefill_r+0x24>
 1005530:	20000b1e 	bne	r4,zero,1005560 <__srefill_r+0x160>
 1005534:	10800814 	ori	r2,r2,32
 1005538:	013fffc4 	movi	r4,-1
 100553c:	8080030d 	sth	r2,12(r16)
 1005540:	003fd906 	br	10054a8 <__srefill_r+0xa8>
 1005544:	00804074 	movhi	r2,257
 1005548:	108e6b04 	addi	r2,r2,14764
 100554c:	11000017 	ldw	r4,0(r2)
 1005550:	01404034 	movhi	r5,256
 1005554:	29557104 	addi	r5,r5,21956
 1005558:	10045d80 	call	10045d8 <_fwalk>
 100555c:	003fc306 	br	100546c <__srefill_r+0x6c>
 1005560:	10801014 	ori	r2,r2,64
 1005564:	013fffc4 	movi	r4,-1
 1005568:	8080030d 	sth	r2,12(r16)
 100556c:	80000115 	stw	zero,4(r16)
 1005570:	003fcd06 	br	10054a8 <__srefill_r+0xa8>
 1005574:	8809883a 	mov	r4,r17
 1005578:	800b883a 	mov	r5,r16
 100557c:	10048a40 	call	10048a4 <__smakebuf_r>
 1005580:	003fb706 	br	1005460 <__srefill_r+0x60>
 1005584:	18c01014 	ori	r3,r3,64
 1005588:	00800244 	movi	r2,9
 100558c:	013fffc4 	movi	r4,-1
 1005590:	88800015 	stw	r2,0(r17)
 1005594:	80c0030d 	sth	r3,12(r16)
 1005598:	003fc306 	br	10054a8 <__srefill_r+0xa8>
 100559c:	8809883a 	mov	r4,r17
 10055a0:	800b883a 	mov	r5,r16
 10055a4:	10035c80 	call	10035c8 <_fflush_r>
 10055a8:	103fd81e 	bne	r2,zero,100550c <__srefill_r+0x10c>
 10055ac:	8080030b 	ldhu	r2,12(r16)
 10055b0:	80000215 	stw	zero,8(r16)
 10055b4:	80000615 	stw	zero,24(r16)
 10055b8:	10bffdcc 	andi	r2,r2,65527
 10055bc:	8080030d 	sth	r2,12(r16)
 10055c0:	003fa206 	br	100544c <__srefill_r+0x4c>

010055c4 <lflush>:
 10055c4:	20c0030b 	ldhu	r3,12(r4)
 10055c8:	01400244 	movi	r5,9
 10055cc:	0005883a 	mov	r2,zero
 10055d0:	18c0024c 	andi	r3,r3,9
 10055d4:	19400126 	beq	r3,r5,10055dc <lflush+0x18>
 10055d8:	f800283a 	ret
 10055dc:	10037c41 	jmpi	10037c4 <fflush>

010055e0 <__srget_r>:
 10055e0:	defffe04 	addi	sp,sp,-8
 10055e4:	dc000015 	stw	r16,0(sp)
 10055e8:	dfc00115 	stw	ra,4(sp)
 10055ec:	2821883a 	mov	r16,r5
 10055f0:	10054000 	call	1005400 <__srefill_r>
 10055f4:	013fffc4 	movi	r4,-1
 10055f8:	1000071e 	bne	r2,zero,1005618 <__srget_r+0x38>
 10055fc:	80800117 	ldw	r2,4(r16)
 1005600:	81000017 	ldw	r4,0(r16)
 1005604:	10bfffc4 	addi	r2,r2,-1
 1005608:	20c00044 	addi	r3,r4,1
 100560c:	80800115 	stw	r2,4(r16)
 1005610:	21000003 	ldbu	r4,0(r4)
 1005614:	80c00015 	stw	r3,0(r16)
 1005618:	2005883a 	mov	r2,r4
 100561c:	dfc00117 	ldw	ra,4(sp)
 1005620:	dc000017 	ldw	r16,0(sp)
 1005624:	dec00204 	addi	sp,sp,8
 1005628:	f800283a 	ret

0100562c <__srget>:
 100562c:	00804074 	movhi	r2,257
 1005630:	108e6a04 	addi	r2,r2,14760
 1005634:	200b883a 	mov	r5,r4
 1005638:	11000017 	ldw	r4,0(r2)
 100563c:	10055e01 	jmpi	10055e0 <__srget_r>

01005640 <_sbrk_r>:
 1005640:	defffd04 	addi	sp,sp,-12
 1005644:	dc000015 	stw	r16,0(sp)
 1005648:	04004074 	movhi	r16,257
 100564c:	84155304 	addi	r16,r16,21836
 1005650:	dc400115 	stw	r17,4(sp)
 1005654:	80000015 	stw	zero,0(r16)
 1005658:	2023883a 	mov	r17,r4
 100565c:	2809883a 	mov	r4,r5
 1005660:	dfc00215 	stw	ra,8(sp)
 1005664:	100ef780 	call	100ef78 <sbrk>
 1005668:	1007883a 	mov	r3,r2
 100566c:	00bfffc4 	movi	r2,-1
 1005670:	18800626 	beq	r3,r2,100568c <_sbrk_r+0x4c>
 1005674:	1805883a 	mov	r2,r3
 1005678:	dfc00217 	ldw	ra,8(sp)
 100567c:	dc400117 	ldw	r17,4(sp)
 1005680:	dc000017 	ldw	r16,0(sp)
 1005684:	dec00304 	addi	sp,sp,12
 1005688:	f800283a 	ret
 100568c:	80800017 	ldw	r2,0(r16)
 1005690:	103ff826 	beq	r2,zero,1005674 <_sbrk_r+0x34>
 1005694:	88800015 	stw	r2,0(r17)
 1005698:	1805883a 	mov	r2,r3
 100569c:	dfc00217 	ldw	ra,8(sp)
 10056a0:	dc400117 	ldw	r17,4(sp)
 10056a4:	dc000017 	ldw	r16,0(sp)
 10056a8:	dec00304 	addi	sp,sp,12
 10056ac:	f800283a 	ret

010056b0 <_raise_r>:
 10056b0:	defffd04 	addi	sp,sp,-12
 10056b4:	008007c4 	movi	r2,31
 10056b8:	dc400115 	stw	r17,4(sp)
 10056bc:	dc000015 	stw	r16,0(sp)
 10056c0:	dfc00215 	stw	ra,8(sp)
 10056c4:	2821883a 	mov	r16,r5
 10056c8:	2023883a 	mov	r17,r4
 10056cc:	11402736 	bltu	r2,r5,100576c <_raise_r+0xbc>
 10056d0:	20c0b717 	ldw	r3,732(r4)
 10056d4:	18001326 	beq	r3,zero,1005724 <_raise_r+0x74>
 10056d8:	2945883a 	add	r2,r5,r5
 10056dc:	1085883a 	add	r2,r2,r2
 10056e0:	188b883a 	add	r5,r3,r2
 10056e4:	28c00017 	ldw	r3,0(r5)
 10056e8:	18000e26 	beq	r3,zero,1005724 <_raise_r+0x74>
 10056ec:	01000044 	movi	r4,1
 10056f0:	19000526 	beq	r3,r4,1005708 <_raise_r+0x58>
 10056f4:	00bfffc4 	movi	r2,-1
 10056f8:	18801326 	beq	r3,r2,1005748 <_raise_r+0x98>
 10056fc:	28000015 	stw	zero,0(r5)
 1005700:	8009883a 	mov	r4,r16
 1005704:	183ee83a 	callr	r3
 1005708:	0007883a 	mov	r3,zero
 100570c:	1805883a 	mov	r2,r3
 1005710:	dfc00217 	ldw	ra,8(sp)
 1005714:	dc400117 	ldw	r17,4(sp)
 1005718:	dc000017 	ldw	r16,0(sp)
 100571c:	dec00304 	addi	sp,sp,12
 1005720:	f800283a 	ret
 1005724:	10059880 	call	1005988 <_getpid_r>
 1005728:	100b883a 	mov	r5,r2
 100572c:	8809883a 	mov	r4,r17
 1005730:	800d883a 	mov	r6,r16
 1005734:	dfc00217 	ldw	ra,8(sp)
 1005738:	dc400117 	ldw	r17,4(sp)
 100573c:	dc000017 	ldw	r16,0(sp)
 1005740:	dec00304 	addi	sp,sp,12
 1005744:	100598c1 	jmpi	100598c <_kill_r>
 1005748:	2007883a 	mov	r3,r4
 100574c:	00800584 	movi	r2,22
 1005750:	88800015 	stw	r2,0(r17)
 1005754:	1805883a 	mov	r2,r3
 1005758:	dfc00217 	ldw	ra,8(sp)
 100575c:	dc400117 	ldw	r17,4(sp)
 1005760:	dc000017 	ldw	r16,0(sp)
 1005764:	dec00304 	addi	sp,sp,12
 1005768:	f800283a 	ret
 100576c:	00800584 	movi	r2,22
 1005770:	00ffffc4 	movi	r3,-1
 1005774:	20800015 	stw	r2,0(r4)
 1005778:	003fe406 	br	100570c <_raise_r+0x5c>

0100577c <raise>:
 100577c:	00804074 	movhi	r2,257
 1005780:	108e6a04 	addi	r2,r2,14760
 1005784:	200b883a 	mov	r5,r4
 1005788:	11000017 	ldw	r4,0(r2)
 100578c:	10056b01 	jmpi	10056b0 <_raise_r>

01005790 <_init_signal_r>:
 1005790:	2080b717 	ldw	r2,732(r4)
 1005794:	defffe04 	addi	sp,sp,-8
 1005798:	dc000015 	stw	r16,0(sp)
 100579c:	dfc00115 	stw	ra,4(sp)
 10057a0:	2021883a 	mov	r16,r4
 10057a4:	10000526 	beq	r2,zero,10057bc <_init_signal_r+0x2c>
 10057a8:	0005883a 	mov	r2,zero
 10057ac:	dfc00117 	ldw	ra,4(sp)
 10057b0:	dc000017 	ldw	r16,0(sp)
 10057b4:	dec00204 	addi	sp,sp,8
 10057b8:	f800283a 	ret
 10057bc:	01402004 	movi	r5,128
 10057c0:	1004a600 	call	1004a60 <_malloc_r>
 10057c4:	1009883a 	mov	r4,r2
 10057c8:	8080b715 	stw	r2,732(r16)
 10057cc:	10000726 	beq	r2,zero,10057ec <_init_signal_r+0x5c>
 10057d0:	0007883a 	mov	r3,zero
 10057d4:	01402004 	movi	r5,128
 10057d8:	20c5883a 	add	r2,r4,r3
 10057dc:	18c00104 	addi	r3,r3,4
 10057e0:	10000015 	stw	zero,0(r2)
 10057e4:	197ffc1e 	bne	r3,r5,10057d8 <_init_signal_r+0x48>
 10057e8:	003fef06 	br	10057a8 <_init_signal_r+0x18>
 10057ec:	00bfffc4 	movi	r2,-1
 10057f0:	003fee06 	br	10057ac <_init_signal_r+0x1c>

010057f4 <_init_signal>:
 10057f4:	00804074 	movhi	r2,257
 10057f8:	108e6a04 	addi	r2,r2,14760
 10057fc:	11000017 	ldw	r4,0(r2)
 1005800:	10057901 	jmpi	1005790 <_init_signal_r>

01005804 <__sigtramp_r>:
 1005804:	defffd04 	addi	sp,sp,-12
 1005808:	008007c4 	movi	r2,31
 100580c:	dc000115 	stw	r16,4(sp)
 1005810:	dfc00215 	stw	ra,8(sp)
 1005814:	2021883a 	mov	r16,r4
 1005818:	11401336 	bltu	r2,r5,1005868 <__sigtramp_r+0x64>
 100581c:	20c0b717 	ldw	r3,732(r4)
 1005820:	18001f26 	beq	r3,zero,10058a0 <__sigtramp_r+0x9c>
 1005824:	2945883a 	add	r2,r5,r5
 1005828:	1085883a 	add	r2,r2,r2
 100582c:	10c9883a 	add	r4,r2,r3
 1005830:	20c00017 	ldw	r3,0(r4)
 1005834:	18001626 	beq	r3,zero,1005890 <__sigtramp_r+0x8c>
 1005838:	00bfffc4 	movi	r2,-1
 100583c:	18801626 	beq	r3,r2,1005898 <__sigtramp_r+0x94>
 1005840:	00800044 	movi	r2,1
 1005844:	18800d26 	beq	r3,r2,100587c <__sigtramp_r+0x78>
 1005848:	20000015 	stw	zero,0(r4)
 100584c:	2809883a 	mov	r4,r5
 1005850:	183ee83a 	callr	r3
 1005854:	0005883a 	mov	r2,zero
 1005858:	dfc00217 	ldw	ra,8(sp)
 100585c:	dc000117 	ldw	r16,4(sp)
 1005860:	dec00304 	addi	sp,sp,12
 1005864:	f800283a 	ret
 1005868:	00bfffc4 	movi	r2,-1
 100586c:	dfc00217 	ldw	ra,8(sp)
 1005870:	dc000117 	ldw	r16,4(sp)
 1005874:	dec00304 	addi	sp,sp,12
 1005878:	f800283a 	ret
 100587c:	008000c4 	movi	r2,3
 1005880:	dfc00217 	ldw	ra,8(sp)
 1005884:	dc000117 	ldw	r16,4(sp)
 1005888:	dec00304 	addi	sp,sp,12
 100588c:	f800283a 	ret
 1005890:	00800044 	movi	r2,1
 1005894:	003ff006 	br	1005858 <__sigtramp_r+0x54>
 1005898:	00800084 	movi	r2,2
 100589c:	003fee06 	br	1005858 <__sigtramp_r+0x54>
 10058a0:	d9400015 	stw	r5,0(sp)
 10058a4:	10057900 	call	1005790 <_init_signal_r>
 10058a8:	d9400017 	ldw	r5,0(sp)
 10058ac:	103fee1e 	bne	r2,zero,1005868 <__sigtramp_r+0x64>
 10058b0:	80c0b717 	ldw	r3,732(r16)
 10058b4:	003fdb06 	br	1005824 <__sigtramp_r+0x20>

010058b8 <__sigtramp>:
 10058b8:	00804074 	movhi	r2,257
 10058bc:	108e6a04 	addi	r2,r2,14760
 10058c0:	200b883a 	mov	r5,r4
 10058c4:	11000017 	ldw	r4,0(r2)
 10058c8:	10058041 	jmpi	1005804 <__sigtramp_r>

010058cc <_signal_r>:
 10058cc:	defffc04 	addi	sp,sp,-16
 10058d0:	008007c4 	movi	r2,31
 10058d4:	dc800215 	stw	r18,8(sp)
 10058d8:	dc400115 	stw	r17,4(sp)
 10058dc:	dc000015 	stw	r16,0(sp)
 10058e0:	dfc00315 	stw	ra,12(sp)
 10058e4:	2823883a 	mov	r17,r5
 10058e8:	00ffffc4 	movi	r3,-1
 10058ec:	3025883a 	mov	r18,r6
 10058f0:	2021883a 	mov	r16,r4
 10058f4:	1140092e 	bgeu	r2,r5,100591c <_signal_r+0x50>
 10058f8:	00800584 	movi	r2,22
 10058fc:	20800015 	stw	r2,0(r4)
 1005900:	1805883a 	mov	r2,r3
 1005904:	dfc00317 	ldw	ra,12(sp)
 1005908:	dc800217 	ldw	r18,8(sp)
 100590c:	dc400117 	ldw	r17,4(sp)
 1005910:	dc000017 	ldw	r16,0(sp)
 1005914:	dec00404 	addi	sp,sp,16
 1005918:	f800283a 	ret
 100591c:	2140b717 	ldw	r5,732(r4)
 1005920:	28000c26 	beq	r5,zero,1005954 <_signal_r+0x88>
 1005924:	8c45883a 	add	r2,r17,r17
 1005928:	1085883a 	add	r2,r2,r2
 100592c:	1145883a 	add	r2,r2,r5
 1005930:	10c00017 	ldw	r3,0(r2)
 1005934:	14800015 	stw	r18,0(r2)
 1005938:	1805883a 	mov	r2,r3
 100593c:	dfc00317 	ldw	ra,12(sp)
 1005940:	dc800217 	ldw	r18,8(sp)
 1005944:	dc400117 	ldw	r17,4(sp)
 1005948:	dc000017 	ldw	r16,0(sp)
 100594c:	dec00404 	addi	sp,sp,16
 1005950:	f800283a 	ret
 1005954:	10057900 	call	1005790 <_init_signal_r>
 1005958:	1000021e 	bne	r2,zero,1005964 <_signal_r+0x98>
 100595c:	8140b717 	ldw	r5,732(r16)
 1005960:	003ff006 	br	1005924 <_signal_r+0x58>
 1005964:	00ffffc4 	movi	r3,-1
 1005968:	003fe506 	br	1005900 <_signal_r+0x34>

0100596c <signal>:
 100596c:	01804074 	movhi	r6,257
 1005970:	318e6a04 	addi	r6,r6,14760
 1005974:	2007883a 	mov	r3,r4
 1005978:	31000017 	ldw	r4,0(r6)
 100597c:	280d883a 	mov	r6,r5
 1005980:	180b883a 	mov	r5,r3
 1005984:	10058cc1 	jmpi	10058cc <_signal_r>

01005988 <_getpid_r>:
 1005988:	100e4c81 	jmpi	100e4c8 <getpid>

0100598c <_kill_r>:
 100598c:	defffd04 	addi	sp,sp,-12
 1005990:	dc000015 	stw	r16,0(sp)
 1005994:	04004074 	movhi	r16,257
 1005998:	84155304 	addi	r16,r16,21836
 100599c:	dc400115 	stw	r17,4(sp)
 10059a0:	80000015 	stw	zero,0(r16)
 10059a4:	2023883a 	mov	r17,r4
 10059a8:	2809883a 	mov	r4,r5
 10059ac:	300b883a 	mov	r5,r6
 10059b0:	dfc00215 	stw	ra,8(sp)
 10059b4:	100e60c0 	call	100e60c <kill>
 10059b8:	1007883a 	mov	r3,r2
 10059bc:	00bfffc4 	movi	r2,-1
 10059c0:	18800626 	beq	r3,r2,10059dc <_kill_r+0x50>
 10059c4:	1805883a 	mov	r2,r3
 10059c8:	dfc00217 	ldw	ra,8(sp)
 10059cc:	dc400117 	ldw	r17,4(sp)
 10059d0:	dc000017 	ldw	r16,0(sp)
 10059d4:	dec00304 	addi	sp,sp,12
 10059d8:	f800283a 	ret
 10059dc:	80800017 	ldw	r2,0(r16)
 10059e0:	103ff826 	beq	r2,zero,10059c4 <_kill_r+0x38>
 10059e4:	88800015 	stw	r2,0(r17)
 10059e8:	1805883a 	mov	r2,r3
 10059ec:	dfc00217 	ldw	ra,8(sp)
 10059f0:	dc400117 	ldw	r17,4(sp)
 10059f4:	dc000017 	ldw	r16,0(sp)
 10059f8:	dec00304 	addi	sp,sp,12
 10059fc:	f800283a 	ret

01005a00 <__sclose>:
 1005a00:	2940038f 	ldh	r5,14(r5)
 1005a04:	1007dd01 	jmpi	1007dd0 <_close_r>

01005a08 <__sseek>:
 1005a08:	defffe04 	addi	sp,sp,-8
 1005a0c:	dc000015 	stw	r16,0(sp)
 1005a10:	2821883a 	mov	r16,r5
 1005a14:	2940038f 	ldh	r5,14(r5)
 1005a18:	dfc00115 	stw	ra,4(sp)
 1005a1c:	1009ca80 	call	1009ca8 <_lseek_r>
 1005a20:	1007883a 	mov	r3,r2
 1005a24:	00bfffc4 	movi	r2,-1
 1005a28:	18800926 	beq	r3,r2,1005a50 <__sseek+0x48>
 1005a2c:	8080030b 	ldhu	r2,12(r16)
 1005a30:	80c01415 	stw	r3,80(r16)
 1005a34:	10840014 	ori	r2,r2,4096
 1005a38:	8080030d 	sth	r2,12(r16)
 1005a3c:	1805883a 	mov	r2,r3
 1005a40:	dfc00117 	ldw	ra,4(sp)
 1005a44:	dc000017 	ldw	r16,0(sp)
 1005a48:	dec00204 	addi	sp,sp,8
 1005a4c:	f800283a 	ret
 1005a50:	8080030b 	ldhu	r2,12(r16)
 1005a54:	10bbffcc 	andi	r2,r2,61439
 1005a58:	8080030d 	sth	r2,12(r16)
 1005a5c:	1805883a 	mov	r2,r3
 1005a60:	dfc00117 	ldw	ra,4(sp)
 1005a64:	dc000017 	ldw	r16,0(sp)
 1005a68:	dec00204 	addi	sp,sp,8
 1005a6c:	f800283a 	ret

01005a70 <__swrite>:
 1005a70:	2880030b 	ldhu	r2,12(r5)
 1005a74:	defffb04 	addi	sp,sp,-20
 1005a78:	dcc00315 	stw	r19,12(sp)
 1005a7c:	1080400c 	andi	r2,r2,256
 1005a80:	dc800215 	stw	r18,8(sp)
 1005a84:	dc400115 	stw	r17,4(sp)
 1005a88:	dc000015 	stw	r16,0(sp)
 1005a8c:	3027883a 	mov	r19,r6
 1005a90:	3825883a 	mov	r18,r7
 1005a94:	dfc00415 	stw	ra,16(sp)
 1005a98:	2821883a 	mov	r16,r5
 1005a9c:	000d883a 	mov	r6,zero
 1005aa0:	01c00084 	movi	r7,2
 1005aa4:	2023883a 	mov	r17,r4
 1005aa8:	10000226 	beq	r2,zero,1005ab4 <__swrite+0x44>
 1005aac:	2940038f 	ldh	r5,14(r5)
 1005ab0:	1009ca80 	call	1009ca8 <_lseek_r>
 1005ab4:	8080030b 	ldhu	r2,12(r16)
 1005ab8:	8140038f 	ldh	r5,14(r16)
 1005abc:	8809883a 	mov	r4,r17
 1005ac0:	10bbffcc 	andi	r2,r2,61439
 1005ac4:	980d883a 	mov	r6,r19
 1005ac8:	900f883a 	mov	r7,r18
 1005acc:	8080030d 	sth	r2,12(r16)
 1005ad0:	dfc00417 	ldw	ra,16(sp)
 1005ad4:	dcc00317 	ldw	r19,12(sp)
 1005ad8:	dc800217 	ldw	r18,8(sp)
 1005adc:	dc400117 	ldw	r17,4(sp)
 1005ae0:	dc000017 	ldw	r16,0(sp)
 1005ae4:	dec00504 	addi	sp,sp,20
 1005ae8:	1007c1c1 	jmpi	1007c1c <_write_r>

01005aec <__sread>:
 1005aec:	defffe04 	addi	sp,sp,-8
 1005af0:	dc000015 	stw	r16,0(sp)
 1005af4:	2821883a 	mov	r16,r5
 1005af8:	2940038f 	ldh	r5,14(r5)
 1005afc:	dfc00115 	stw	ra,4(sp)
 1005b00:	100b1fc0 	call	100b1fc <_read_r>
 1005b04:	1007883a 	mov	r3,r2
 1005b08:	10000816 	blt	r2,zero,1005b2c <__sread+0x40>
 1005b0c:	80801417 	ldw	r2,80(r16)
 1005b10:	10c5883a 	add	r2,r2,r3
 1005b14:	80801415 	stw	r2,80(r16)
 1005b18:	1805883a 	mov	r2,r3
 1005b1c:	dfc00117 	ldw	ra,4(sp)
 1005b20:	dc000017 	ldw	r16,0(sp)
 1005b24:	dec00204 	addi	sp,sp,8
 1005b28:	f800283a 	ret
 1005b2c:	8080030b 	ldhu	r2,12(r16)
 1005b30:	10bbffcc 	andi	r2,r2,61439
 1005b34:	8080030d 	sth	r2,12(r16)
 1005b38:	1805883a 	mov	r2,r3
 1005b3c:	dfc00117 	ldw	ra,4(sp)
 1005b40:	dc000017 	ldw	r16,0(sp)
 1005b44:	dec00204 	addi	sp,sp,8
 1005b48:	f800283a 	ret

01005b4c <strcat>:
 1005b4c:	defffe04 	addi	sp,sp,-8
 1005b50:	208000cc 	andi	r2,r4,3
 1005b54:	dc000015 	stw	r16,0(sp)
 1005b58:	dfc00115 	stw	ra,4(sp)
 1005b5c:	2021883a 	mov	r16,r4
 1005b60:	1000161e 	bne	r2,zero,1005bbc <strcat+0x70>
 1005b64:	20c00017 	ldw	r3,0(r4)
 1005b68:	01bfbff4 	movhi	r6,65279
 1005b6c:	31bfbfc4 	addi	r6,r6,-257
 1005b70:	02202074 	movhi	r8,32897
 1005b74:	42202004 	addi	r8,r8,-32640
 1005b78:	1985883a 	add	r2,r3,r6
 1005b7c:	1204703a 	and	r2,r2,r8
 1005b80:	00c6303a 	nor	r3,zero,r3
 1005b84:	1886703a 	and	r3,r3,r2
 1005b88:	18000c1e 	bne	r3,zero,1005bbc <strcat+0x70>
 1005b8c:	300f883a 	mov	r7,r6
 1005b90:	400d883a 	mov	r6,r8
 1005b94:	21000104 	addi	r4,r4,4
 1005b98:	20800017 	ldw	r2,0(r4)
 1005b9c:	11c7883a 	add	r3,r2,r7
 1005ba0:	1986703a 	and	r3,r3,r6
 1005ba4:	0084303a 	nor	r2,zero,r2
 1005ba8:	10c4703a 	and	r2,r2,r3
 1005bac:	103ff926 	beq	r2,zero,1005b94 <strcat+0x48>
 1005bb0:	20800007 	ldb	r2,0(r4)
 1005bb4:	10000326 	beq	r2,zero,1005bc4 <strcat+0x78>
 1005bb8:	21000044 	addi	r4,r4,1
 1005bbc:	20800007 	ldb	r2,0(r4)
 1005bc0:	103ffd1e 	bne	r2,zero,1005bb8 <strcat+0x6c>
 1005bc4:	1005bdc0 	call	1005bdc <strcpy>
 1005bc8:	8005883a 	mov	r2,r16
 1005bcc:	dfc00117 	ldw	ra,4(sp)
 1005bd0:	dc000017 	ldw	r16,0(sp)
 1005bd4:	dec00204 	addi	sp,sp,8
 1005bd8:	f800283a 	ret

01005bdc <strcpy>:
 1005bdc:	2904b03a 	or	r2,r5,r4
 1005be0:	108000cc 	andi	r2,r2,3
 1005be4:	10000826 	beq	r2,zero,1005c08 <strcpy+0x2c>
 1005be8:	2007883a 	mov	r3,r4
 1005bec:	28800003 	ldbu	r2,0(r5)
 1005bf0:	29400044 	addi	r5,r5,1
 1005bf4:	18800005 	stb	r2,0(r3)
 1005bf8:	18c00044 	addi	r3,r3,1
 1005bfc:	103ffb1e 	bne	r2,zero,1005bec <strcpy+0x10>
 1005c00:	2005883a 	mov	r2,r4
 1005c04:	f800283a 	ret
 1005c08:	29800017 	ldw	r6,0(r5)
 1005c0c:	023fbff4 	movhi	r8,65279
 1005c10:	423fbfc4 	addi	r8,r8,-257
 1005c14:	02a02074 	movhi	r10,32897
 1005c18:	52a02004 	addi	r10,r10,-32640
 1005c1c:	3205883a 	add	r2,r6,r8
 1005c20:	0186303a 	nor	r3,zero,r6
 1005c24:	10c4703a 	and	r2,r2,r3
 1005c28:	1284703a 	and	r2,r2,r10
 1005c2c:	200f883a 	mov	r7,r4
 1005c30:	10000b1e 	bne	r2,zero,1005c60 <strcpy+0x84>
 1005c34:	4013883a 	mov	r9,r8
 1005c38:	5011883a 	mov	r8,r10
 1005c3c:	39800015 	stw	r6,0(r7)
 1005c40:	29400104 	addi	r5,r5,4
 1005c44:	29800017 	ldw	r6,0(r5)
 1005c48:	39c00104 	addi	r7,r7,4
 1005c4c:	3245883a 	add	r2,r6,r9
 1005c50:	0186303a 	nor	r3,zero,r6
 1005c54:	10c4703a 	and	r2,r2,r3
 1005c58:	1204703a 	and	r2,r2,r8
 1005c5c:	103ff726 	beq	r2,zero,1005c3c <strcpy+0x60>
 1005c60:	3807883a 	mov	r3,r7
 1005c64:	003fe106 	br	1005bec <strcpy+0x10>

01005c68 <strlen>:
 1005c68:	208000cc 	andi	r2,r4,3
 1005c6c:	2011883a 	mov	r8,r4
 1005c70:	1000161e 	bne	r2,zero,1005ccc <strlen+0x64>
 1005c74:	20c00017 	ldw	r3,0(r4)
 1005c78:	017fbff4 	movhi	r5,65279
 1005c7c:	297fbfc4 	addi	r5,r5,-257
 1005c80:	01e02074 	movhi	r7,32897
 1005c84:	39e02004 	addi	r7,r7,-32640
 1005c88:	1945883a 	add	r2,r3,r5
 1005c8c:	11c4703a 	and	r2,r2,r7
 1005c90:	00c6303a 	nor	r3,zero,r3
 1005c94:	1886703a 	and	r3,r3,r2
 1005c98:	18000c1e 	bne	r3,zero,1005ccc <strlen+0x64>
 1005c9c:	280d883a 	mov	r6,r5
 1005ca0:	380b883a 	mov	r5,r7
 1005ca4:	21000104 	addi	r4,r4,4
 1005ca8:	20800017 	ldw	r2,0(r4)
 1005cac:	1187883a 	add	r3,r2,r6
 1005cb0:	1946703a 	and	r3,r3,r5
 1005cb4:	0084303a 	nor	r2,zero,r2
 1005cb8:	10c4703a 	and	r2,r2,r3
 1005cbc:	103ff926 	beq	r2,zero,1005ca4 <strlen+0x3c>
 1005cc0:	20800007 	ldb	r2,0(r4)
 1005cc4:	10000326 	beq	r2,zero,1005cd4 <strlen+0x6c>
 1005cc8:	21000044 	addi	r4,r4,1
 1005ccc:	20800007 	ldb	r2,0(r4)
 1005cd0:	103ffd1e 	bne	r2,zero,1005cc8 <strlen+0x60>
 1005cd4:	2205c83a 	sub	r2,r4,r8
 1005cd8:	f800283a 	ret

01005cdc <__sprint_r>:
 1005cdc:	30800217 	ldw	r2,8(r6)
 1005ce0:	defffe04 	addi	sp,sp,-8
 1005ce4:	dc000015 	stw	r16,0(sp)
 1005ce8:	dfc00115 	stw	ra,4(sp)
 1005cec:	3021883a 	mov	r16,r6
 1005cf0:	0007883a 	mov	r3,zero
 1005cf4:	1000061e 	bne	r2,zero,1005d10 <__sprint_r+0x34>
 1005cf8:	1805883a 	mov	r2,r3
 1005cfc:	30000115 	stw	zero,4(r6)
 1005d00:	dfc00117 	ldw	ra,4(sp)
 1005d04:	dc000017 	ldw	r16,0(sp)
 1005d08:	dec00204 	addi	sp,sp,8
 1005d0c:	f800283a 	ret
 1005d10:	10096d80 	call	10096d8 <__sfvwrite_r>
 1005d14:	1007883a 	mov	r3,r2
 1005d18:	1805883a 	mov	r2,r3
 1005d1c:	80000115 	stw	zero,4(r16)
 1005d20:	80000215 	stw	zero,8(r16)
 1005d24:	dfc00117 	ldw	ra,4(sp)
 1005d28:	dc000017 	ldw	r16,0(sp)
 1005d2c:	dec00204 	addi	sp,sp,8
 1005d30:	f800283a 	ret

01005d34 <___vfprintf_internal_r>:
 1005d34:	defea404 	addi	sp,sp,-1392
 1005d38:	dd815815 	stw	r22,1376(sp)
 1005d3c:	dc015215 	stw	r16,1352(sp)
 1005d40:	d9c15115 	stw	r7,1348(sp)
 1005d44:	dfc15b15 	stw	ra,1388(sp)
 1005d48:	df015a15 	stw	fp,1384(sp)
 1005d4c:	ddc15915 	stw	r23,1380(sp)
 1005d50:	dd415715 	stw	r21,1372(sp)
 1005d54:	dd015615 	stw	r20,1368(sp)
 1005d58:	dcc15515 	stw	r19,1364(sp)
 1005d5c:	dc815415 	stw	r18,1360(sp)
 1005d60:	dc415315 	stw	r17,1356(sp)
 1005d64:	282d883a 	mov	r22,r5
 1005d68:	3021883a 	mov	r16,r6
 1005d6c:	d9014f15 	stw	r4,1340(sp)
 1005d70:	1009bec0 	call	1009bec <_localeconv_r>
 1005d74:	10800017 	ldw	r2,0(r2)
 1005d78:	d9c15117 	ldw	r7,1348(sp)
 1005d7c:	d8814915 	stw	r2,1316(sp)
 1005d80:	d8814f17 	ldw	r2,1340(sp)
 1005d84:	10000226 	beq	r2,zero,1005d90 <___vfprintf_internal_r+0x5c>
 1005d88:	10800e17 	ldw	r2,56(r2)
 1005d8c:	10020d26 	beq	r2,zero,10065c4 <___vfprintf_internal_r+0x890>
 1005d90:	b080030b 	ldhu	r2,12(r22)
 1005d94:	1080020c 	andi	r2,r2,8
 1005d98:	10020e26 	beq	r2,zero,10065d4 <___vfprintf_internal_r+0x8a0>
 1005d9c:	b0800417 	ldw	r2,16(r22)
 1005da0:	10020c26 	beq	r2,zero,10065d4 <___vfprintf_internal_r+0x8a0>
 1005da4:	b200030b 	ldhu	r8,12(r22)
 1005da8:	00800284 	movi	r2,10
 1005dac:	40c0068c 	andi	r3,r8,26
 1005db0:	18802f1e 	bne	r3,r2,1005e70 <___vfprintf_internal_r+0x13c>
 1005db4:	b080038f 	ldh	r2,14(r22)
 1005db8:	10002d16 	blt	r2,zero,1005e70 <___vfprintf_internal_r+0x13c>
 1005dbc:	b240038b 	ldhu	r9,14(r22)
 1005dc0:	b2800717 	ldw	r10,28(r22)
 1005dc4:	b2c00917 	ldw	r11,36(r22)
 1005dc8:	d9014f17 	ldw	r4,1340(sp)
 1005dcc:	dc402904 	addi	r17,sp,164
 1005dd0:	d8804004 	addi	r2,sp,256
 1005dd4:	00c10004 	movi	r3,1024
 1005dd8:	423fff4c 	andi	r8,r8,65533
 1005ddc:	800d883a 	mov	r6,r16
 1005de0:	880b883a 	mov	r5,r17
 1005de4:	da002c0d 	sth	r8,176(sp)
 1005de8:	da402c8d 	sth	r9,178(sp)
 1005dec:	da803015 	stw	r10,192(sp)
 1005df0:	dac03215 	stw	r11,200(sp)
 1005df4:	d8802d15 	stw	r2,180(sp)
 1005df8:	d8c02e15 	stw	r3,184(sp)
 1005dfc:	d8802915 	stw	r2,164(sp)
 1005e00:	d8c02b15 	stw	r3,172(sp)
 1005e04:	d8002f15 	stw	zero,188(sp)
 1005e08:	1005d340 	call	1005d34 <___vfprintf_internal_r>
 1005e0c:	d8814b15 	stw	r2,1324(sp)
 1005e10:	10000416 	blt	r2,zero,1005e24 <___vfprintf_internal_r+0xf0>
 1005e14:	d9014f17 	ldw	r4,1340(sp)
 1005e18:	880b883a 	mov	r5,r17
 1005e1c:	10035c80 	call	10035c8 <_fflush_r>
 1005e20:	1002321e 	bne	r2,zero,10066ec <___vfprintf_internal_r+0x9b8>
 1005e24:	d8802c0b 	ldhu	r2,176(sp)
 1005e28:	1080100c 	andi	r2,r2,64
 1005e2c:	10000326 	beq	r2,zero,1005e3c <___vfprintf_internal_r+0x108>
 1005e30:	b080030b 	ldhu	r2,12(r22)
 1005e34:	10801014 	ori	r2,r2,64
 1005e38:	b080030d 	sth	r2,12(r22)
 1005e3c:	d8814b17 	ldw	r2,1324(sp)
 1005e40:	dfc15b17 	ldw	ra,1388(sp)
 1005e44:	df015a17 	ldw	fp,1384(sp)
 1005e48:	ddc15917 	ldw	r23,1380(sp)
 1005e4c:	dd815817 	ldw	r22,1376(sp)
 1005e50:	dd415717 	ldw	r21,1372(sp)
 1005e54:	dd015617 	ldw	r20,1368(sp)
 1005e58:	dcc15517 	ldw	r19,1364(sp)
 1005e5c:	dc815417 	ldw	r18,1360(sp)
 1005e60:	dc415317 	ldw	r17,1356(sp)
 1005e64:	dc015217 	ldw	r16,1352(sp)
 1005e68:	dec15c04 	addi	sp,sp,1392
 1005e6c:	f800283a 	ret
 1005e70:	0005883a 	mov	r2,zero
 1005e74:	0007883a 	mov	r3,zero
 1005e78:	dd401904 	addi	r21,sp,100
 1005e7c:	d8814215 	stw	r2,1288(sp)
 1005e80:	802f883a 	mov	r23,r16
 1005e84:	d8c14315 	stw	r3,1292(sp)
 1005e88:	d8014b15 	stw	zero,1324(sp)
 1005e8c:	d8014815 	stw	zero,1312(sp)
 1005e90:	d8014415 	stw	zero,1296(sp)
 1005e94:	d8014715 	stw	zero,1308(sp)
 1005e98:	dd400c15 	stw	r21,48(sp)
 1005e9c:	d8000e15 	stw	zero,56(sp)
 1005ea0:	d8000d15 	stw	zero,52(sp)
 1005ea4:	b8800007 	ldb	r2,0(r23)
 1005ea8:	10001926 	beq	r2,zero,1005f10 <___vfprintf_internal_r+0x1dc>
 1005eac:	00c00944 	movi	r3,37
 1005eb0:	10c01726 	beq	r2,r3,1005f10 <___vfprintf_internal_r+0x1dc>
 1005eb4:	b821883a 	mov	r16,r23
 1005eb8:	00000106 	br	1005ec0 <___vfprintf_internal_r+0x18c>
 1005ebc:	10c00326 	beq	r2,r3,1005ecc <___vfprintf_internal_r+0x198>
 1005ec0:	84000044 	addi	r16,r16,1
 1005ec4:	80800007 	ldb	r2,0(r16)
 1005ec8:	103ffc1e 	bne	r2,zero,1005ebc <___vfprintf_internal_r+0x188>
 1005ecc:	85e7c83a 	sub	r19,r16,r23
 1005ed0:	98000e26 	beq	r19,zero,1005f0c <___vfprintf_internal_r+0x1d8>
 1005ed4:	dc800e17 	ldw	r18,56(sp)
 1005ed8:	dc400d17 	ldw	r17,52(sp)
 1005edc:	008001c4 	movi	r2,7
 1005ee0:	94e5883a 	add	r18,r18,r19
 1005ee4:	8c400044 	addi	r17,r17,1
 1005ee8:	adc00015 	stw	r23,0(r21)
 1005eec:	dc800e15 	stw	r18,56(sp)
 1005ef0:	acc00115 	stw	r19,4(r21)
 1005ef4:	dc400d15 	stw	r17,52(sp)
 1005ef8:	14428b16 	blt	r2,r17,1006928 <___vfprintf_internal_r+0xbf4>
 1005efc:	ad400204 	addi	r21,r21,8
 1005f00:	d9014b17 	ldw	r4,1324(sp)
 1005f04:	24c9883a 	add	r4,r4,r19
 1005f08:	d9014b15 	stw	r4,1324(sp)
 1005f0c:	802f883a 	mov	r23,r16
 1005f10:	b8800007 	ldb	r2,0(r23)
 1005f14:	10013c26 	beq	r2,zero,1006408 <___vfprintf_internal_r+0x6d4>
 1005f18:	bdc00044 	addi	r23,r23,1
 1005f1c:	d8000405 	stb	zero,16(sp)
 1005f20:	b8c00007 	ldb	r3,0(r23)
 1005f24:	04ffffc4 	movi	r19,-1
 1005f28:	d8014c15 	stw	zero,1328(sp)
 1005f2c:	d8014a15 	stw	zero,1320(sp)
 1005f30:	d8c14d15 	stw	r3,1332(sp)
 1005f34:	bdc00044 	addi	r23,r23,1
 1005f38:	d9414d17 	ldw	r5,1332(sp)
 1005f3c:	00801604 	movi	r2,88
 1005f40:	28fff804 	addi	r3,r5,-32
 1005f44:	10c06036 	bltu	r2,r3,10060c8 <___vfprintf_internal_r+0x394>
 1005f48:	18c5883a 	add	r2,r3,r3
 1005f4c:	1085883a 	add	r2,r2,r2
 1005f50:	00c04034 	movhi	r3,256
 1005f54:	18d7d904 	addi	r3,r3,24420
 1005f58:	10c5883a 	add	r2,r2,r3
 1005f5c:	11000017 	ldw	r4,0(r2)
 1005f60:	2000683a 	jmp	r4
 1005f64:	01006ed8 	cmpnei	r4,zero,443
 1005f68:	010060c8 	cmpgei	r4,zero,387
 1005f6c:	010060c8 	cmpgei	r4,zero,387
 1005f70:	01006ec4 	movi	r4,443
 1005f74:	010060c8 	cmpgei	r4,zero,387
 1005f78:	010060c8 	cmpgei	r4,zero,387
 1005f7c:	010060c8 	cmpgei	r4,zero,387
 1005f80:	010060c8 	cmpgei	r4,zero,387
 1005f84:	010060c8 	cmpgei	r4,zero,387
 1005f88:	010060c8 	cmpgei	r4,zero,387
 1005f8c:	01006ca4 	muli	r4,zero,434
 1005f90:	01006eb4 	movhi	r4,442
 1005f94:	010060c8 	cmpgei	r4,zero,387
 1005f98:	01006cbc 	xorhi	r4,zero,434
 1005f9c:	01006f5c 	xori	r4,zero,445
 1005fa0:	010060c8 	cmpgei	r4,zero,387
 1005fa4:	01006f48 	cmpgei	r4,zero,445
 1005fa8:	01006f04 	movi	r4,444
 1005fac:	01006f04 	movi	r4,444
 1005fb0:	01006f04 	movi	r4,444
 1005fb4:	01006f04 	movi	r4,444
 1005fb8:	01006f04 	movi	r4,444
 1005fbc:	01006f04 	movi	r4,444
 1005fc0:	01006f04 	movi	r4,444
 1005fc4:	01006f04 	movi	r4,444
 1005fc8:	01006f04 	movi	r4,444
 1005fcc:	010060c8 	cmpgei	r4,zero,387
 1005fd0:	010060c8 	cmpgei	r4,zero,387
 1005fd4:	010060c8 	cmpgei	r4,zero,387
 1005fd8:	010060c8 	cmpgei	r4,zero,387
 1005fdc:	010060c8 	cmpgei	r4,zero,387
 1005fe0:	010060c8 	cmpgei	r4,zero,387
 1005fe4:	010060c8 	cmpgei	r4,zero,387
 1005fe8:	010060c8 	cmpgei	r4,zero,387
 1005fec:	010060c8 	cmpgei	r4,zero,387
 1005ff0:	010060c8 	cmpgei	r4,zero,387
 1005ff4:	01006720 	cmpeqi	r4,zero,412
 1005ff8:	01006d8c 	andi	r4,zero,438
 1005ffc:	010060c8 	cmpgei	r4,zero,387
 1006000:	01006d8c 	andi	r4,zero,438
 1006004:	010060c8 	cmpgei	r4,zero,387
 1006008:	010060c8 	cmpgei	r4,zero,387
 100600c:	010060c8 	cmpgei	r4,zero,387
 1006010:	010060c8 	cmpgei	r4,zero,387
 1006014:	01006ef0 	cmpltui	r4,zero,443
 1006018:	010060c8 	cmpgei	r4,zero,387
 100601c:	010060c8 	cmpgei	r4,zero,387
 1006020:	010067d4 	movui	r4,415
 1006024:	010060c8 	cmpgei	r4,zero,387
 1006028:	010060c8 	cmpgei	r4,zero,387
 100602c:	010060c8 	cmpgei	r4,zero,387
 1006030:	010060c8 	cmpgei	r4,zero,387
 1006034:	010060c8 	cmpgei	r4,zero,387
 1006038:	01006820 	cmpeqi	r4,zero,416
 100603c:	010060c8 	cmpgei	r4,zero,387
 1006040:	010060c8 	cmpgei	r4,zero,387
 1006044:	01006e40 	call	1006e4 <__alt_mem_onchip_memory2_0+0x1006e4>
 1006048:	010060c8 	cmpgei	r4,zero,387
 100604c:	010060c8 	cmpgei	r4,zero,387
 1006050:	010060c8 	cmpgei	r4,zero,387
 1006054:	010060c8 	cmpgei	r4,zero,387
 1006058:	010060c8 	cmpgei	r4,zero,387
 100605c:	010060c8 	cmpgei	r4,zero,387
 1006060:	010060c8 	cmpgei	r4,zero,387
 1006064:	010060c8 	cmpgei	r4,zero,387
 1006068:	010060c8 	cmpgei	r4,zero,387
 100606c:	010060c8 	cmpgei	r4,zero,387
 1006070:	01006e14 	movui	r4,440
 1006074:	0100672c 	andhi	r4,zero,412
 1006078:	01006d8c 	andi	r4,zero,438
 100607c:	01006d8c 	andi	r4,zero,438
 1006080:	01006d8c 	andi	r4,zero,438
 1006084:	01006d78 	rdprs	r4,zero,437
 1006088:	0100672c 	andhi	r4,zero,412
 100608c:	010060c8 	cmpgei	r4,zero,387
 1006090:	010060c8 	cmpgei	r4,zero,387
 1006094:	01006d00 	call	1006d0 <__alt_mem_onchip_memory2_0+0x1006d0>
 1006098:	010060c8 	cmpgei	r4,zero,387
 100609c:	01006cd0 	cmplti	r4,zero,435
 10060a0:	010067e0 	cmpeqi	r4,zero,415
 10060a4:	01006d30 	cmpltui	r4,zero,436
 10060a8:	01006d1c 	xori	r4,zero,436
 10060ac:	010060c8 	cmpgei	r4,zero,387
 10060b0:	01006fc4 	movi	r4,447
 10060b4:	010060c8 	cmpgei	r4,zero,387
 10060b8:	0100682c 	andhi	r4,zero,416
 10060bc:	010060c8 	cmpgei	r4,zero,387
 10060c0:	010060c8 	cmpgei	r4,zero,387
 10060c4:	01006ea4 	muli	r4,zero,442
 10060c8:	d9014d17 	ldw	r4,1332(sp)
 10060cc:	2000ce26 	beq	r4,zero,1006408 <___vfprintf_internal_r+0x6d4>
 10060d0:	01400044 	movi	r5,1
 10060d4:	d9800f04 	addi	r6,sp,60
 10060d8:	d9c14015 	stw	r7,1280(sp)
 10060dc:	d9414515 	stw	r5,1300(sp)
 10060e0:	d9814115 	stw	r6,1284(sp)
 10060e4:	280f883a 	mov	r7,r5
 10060e8:	d9000f05 	stb	r4,60(sp)
 10060ec:	d8000405 	stb	zero,16(sp)
 10060f0:	d8014615 	stw	zero,1304(sp)
 10060f4:	d8c14c17 	ldw	r3,1328(sp)
 10060f8:	1880008c 	andi	r2,r3,2
 10060fc:	1005003a 	cmpeq	r2,r2,zero
 1006100:	d8815015 	stw	r2,1344(sp)
 1006104:	1000031e 	bne	r2,zero,1006114 <___vfprintf_internal_r+0x3e0>
 1006108:	d9014517 	ldw	r4,1300(sp)
 100610c:	21000084 	addi	r4,r4,2
 1006110:	d9014515 	stw	r4,1300(sp)
 1006114:	d9414c17 	ldw	r5,1328(sp)
 1006118:	2940210c 	andi	r5,r5,132
 100611c:	d9414e15 	stw	r5,1336(sp)
 1006120:	28002d1e 	bne	r5,zero,10061d8 <___vfprintf_internal_r+0x4a4>
 1006124:	d9814a17 	ldw	r6,1320(sp)
 1006128:	d8814517 	ldw	r2,1300(sp)
 100612c:	30a1c83a 	sub	r16,r6,r2
 1006130:	0400290e 	bge	zero,r16,10061d8 <___vfprintf_internal_r+0x4a4>
 1006134:	00800404 	movi	r2,16
 1006138:	14045e0e 	bge	r2,r16,10072b4 <___vfprintf_internal_r+0x1580>
 100613c:	dc800e17 	ldw	r18,56(sp)
 1006140:	dc400d17 	ldw	r17,52(sp)
 1006144:	1027883a 	mov	r19,r2
 1006148:	07004074 	movhi	fp,257
 100614c:	e706f384 	addi	fp,fp,7118
 1006150:	050001c4 	movi	r20,7
 1006154:	00000306 	br	1006164 <___vfprintf_internal_r+0x430>
 1006158:	843ffc04 	addi	r16,r16,-16
 100615c:	ad400204 	addi	r21,r21,8
 1006160:	9c00130e 	bge	r19,r16,10061b0 <___vfprintf_internal_r+0x47c>
 1006164:	94800404 	addi	r18,r18,16
 1006168:	8c400044 	addi	r17,r17,1
 100616c:	af000015 	stw	fp,0(r21)
 1006170:	acc00115 	stw	r19,4(r21)
 1006174:	dc800e15 	stw	r18,56(sp)
 1006178:	dc400d15 	stw	r17,52(sp)
 100617c:	a47ff60e 	bge	r20,r17,1006158 <___vfprintf_internal_r+0x424>
 1006180:	d9014f17 	ldw	r4,1340(sp)
 1006184:	b00b883a 	mov	r5,r22
 1006188:	d9800c04 	addi	r6,sp,48
 100618c:	d9c15115 	stw	r7,1348(sp)
 1006190:	1005cdc0 	call	1005cdc <__sprint_r>
 1006194:	d9c15117 	ldw	r7,1348(sp)
 1006198:	10009e1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 100619c:	843ffc04 	addi	r16,r16,-16
 10061a0:	dc800e17 	ldw	r18,56(sp)
 10061a4:	dc400d17 	ldw	r17,52(sp)
 10061a8:	dd401904 	addi	r21,sp,100
 10061ac:	9c3fed16 	blt	r19,r16,1006164 <___vfprintf_internal_r+0x430>
 10061b0:	9425883a 	add	r18,r18,r16
 10061b4:	8c400044 	addi	r17,r17,1
 10061b8:	008001c4 	movi	r2,7
 10061bc:	af000015 	stw	fp,0(r21)
 10061c0:	ac000115 	stw	r16,4(r21)
 10061c4:	dc800e15 	stw	r18,56(sp)
 10061c8:	dc400d15 	stw	r17,52(sp)
 10061cc:	1441f516 	blt	r2,r17,10069a4 <___vfprintf_internal_r+0xc70>
 10061d0:	ad400204 	addi	r21,r21,8
 10061d4:	00000206 	br	10061e0 <___vfprintf_internal_r+0x4ac>
 10061d8:	dc800e17 	ldw	r18,56(sp)
 10061dc:	dc400d17 	ldw	r17,52(sp)
 10061e0:	d8800407 	ldb	r2,16(sp)
 10061e4:	10000b26 	beq	r2,zero,1006214 <___vfprintf_internal_r+0x4e0>
 10061e8:	00800044 	movi	r2,1
 10061ec:	94800044 	addi	r18,r18,1
 10061f0:	8c400044 	addi	r17,r17,1
 10061f4:	a8800115 	stw	r2,4(r21)
 10061f8:	d8c00404 	addi	r3,sp,16
 10061fc:	008001c4 	movi	r2,7
 1006200:	a8c00015 	stw	r3,0(r21)
 1006204:	dc800e15 	stw	r18,56(sp)
 1006208:	dc400d15 	stw	r17,52(sp)
 100620c:	1441da16 	blt	r2,r17,1006978 <___vfprintf_internal_r+0xc44>
 1006210:	ad400204 	addi	r21,r21,8
 1006214:	d9015017 	ldw	r4,1344(sp)
 1006218:	20000b1e 	bne	r4,zero,1006248 <___vfprintf_internal_r+0x514>
 100621c:	d8800444 	addi	r2,sp,17
 1006220:	94800084 	addi	r18,r18,2
 1006224:	8c400044 	addi	r17,r17,1
 1006228:	a8800015 	stw	r2,0(r21)
 100622c:	00c00084 	movi	r3,2
 1006230:	008001c4 	movi	r2,7
 1006234:	a8c00115 	stw	r3,4(r21)
 1006238:	dc800e15 	stw	r18,56(sp)
 100623c:	dc400d15 	stw	r17,52(sp)
 1006240:	1441c216 	blt	r2,r17,100694c <___vfprintf_internal_r+0xc18>
 1006244:	ad400204 	addi	r21,r21,8
 1006248:	d9414e17 	ldw	r5,1336(sp)
 100624c:	00802004 	movi	r2,128
 1006250:	2880b126 	beq	r5,r2,1006518 <___vfprintf_internal_r+0x7e4>
 1006254:	d8c14617 	ldw	r3,1304(sp)
 1006258:	19e1c83a 	sub	r16,r3,r7
 100625c:	0400260e 	bge	zero,r16,10062f8 <___vfprintf_internal_r+0x5c4>
 1006260:	00800404 	movi	r2,16
 1006264:	1403cf0e 	bge	r2,r16,10071a4 <___vfprintf_internal_r+0x1470>
 1006268:	1027883a 	mov	r19,r2
 100626c:	07004074 	movhi	fp,257
 1006270:	e706ef84 	addi	fp,fp,7102
 1006274:	050001c4 	movi	r20,7
 1006278:	00000306 	br	1006288 <___vfprintf_internal_r+0x554>
 100627c:	843ffc04 	addi	r16,r16,-16
 1006280:	ad400204 	addi	r21,r21,8
 1006284:	9c00130e 	bge	r19,r16,10062d4 <___vfprintf_internal_r+0x5a0>
 1006288:	94800404 	addi	r18,r18,16
 100628c:	8c400044 	addi	r17,r17,1
 1006290:	af000015 	stw	fp,0(r21)
 1006294:	acc00115 	stw	r19,4(r21)
 1006298:	dc800e15 	stw	r18,56(sp)
 100629c:	dc400d15 	stw	r17,52(sp)
 10062a0:	a47ff60e 	bge	r20,r17,100627c <___vfprintf_internal_r+0x548>
 10062a4:	d9014f17 	ldw	r4,1340(sp)
 10062a8:	b00b883a 	mov	r5,r22
 10062ac:	d9800c04 	addi	r6,sp,48
 10062b0:	d9c15115 	stw	r7,1348(sp)
 10062b4:	1005cdc0 	call	1005cdc <__sprint_r>
 10062b8:	d9c15117 	ldw	r7,1348(sp)
 10062bc:	1000551e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10062c0:	843ffc04 	addi	r16,r16,-16
 10062c4:	dc800e17 	ldw	r18,56(sp)
 10062c8:	dc400d17 	ldw	r17,52(sp)
 10062cc:	dd401904 	addi	r21,sp,100
 10062d0:	9c3fed16 	blt	r19,r16,1006288 <___vfprintf_internal_r+0x554>
 10062d4:	9425883a 	add	r18,r18,r16
 10062d8:	8c400044 	addi	r17,r17,1
 10062dc:	008001c4 	movi	r2,7
 10062e0:	af000015 	stw	fp,0(r21)
 10062e4:	ac000115 	stw	r16,4(r21)
 10062e8:	dc800e15 	stw	r18,56(sp)
 10062ec:	dc400d15 	stw	r17,52(sp)
 10062f0:	14418216 	blt	r2,r17,10068fc <___vfprintf_internal_r+0xbc8>
 10062f4:	ad400204 	addi	r21,r21,8
 10062f8:	d9014c17 	ldw	r4,1328(sp)
 10062fc:	2080400c 	andi	r2,r4,256
 1006300:	10004a1e 	bne	r2,zero,100642c <___vfprintf_internal_r+0x6f8>
 1006304:	d9414117 	ldw	r5,1284(sp)
 1006308:	91e5883a 	add	r18,r18,r7
 100630c:	8c400044 	addi	r17,r17,1
 1006310:	008001c4 	movi	r2,7
 1006314:	a9400015 	stw	r5,0(r21)
 1006318:	a9c00115 	stw	r7,4(r21)
 100631c:	dc800e15 	stw	r18,56(sp)
 1006320:	dc400d15 	stw	r17,52(sp)
 1006324:	14416716 	blt	r2,r17,10068c4 <___vfprintf_internal_r+0xb90>
 1006328:	a8c00204 	addi	r3,r21,8
 100632c:	d9814c17 	ldw	r6,1328(sp)
 1006330:	3080010c 	andi	r2,r6,4
 1006334:	10002826 	beq	r2,zero,10063d8 <___vfprintf_internal_r+0x6a4>
 1006338:	d8814a17 	ldw	r2,1320(sp)
 100633c:	d9014517 	ldw	r4,1300(sp)
 1006340:	1121c83a 	sub	r16,r2,r4
 1006344:	0400240e 	bge	zero,r16,10063d8 <___vfprintf_internal_r+0x6a4>
 1006348:	00800404 	movi	r2,16
 100634c:	1404550e 	bge	r2,r16,10074a4 <___vfprintf_internal_r+0x1770>
 1006350:	dc400d17 	ldw	r17,52(sp)
 1006354:	1027883a 	mov	r19,r2
 1006358:	07004074 	movhi	fp,257
 100635c:	e706f384 	addi	fp,fp,7118
 1006360:	050001c4 	movi	r20,7
 1006364:	00000306 	br	1006374 <___vfprintf_internal_r+0x640>
 1006368:	843ffc04 	addi	r16,r16,-16
 100636c:	18c00204 	addi	r3,r3,8
 1006370:	9c00110e 	bge	r19,r16,10063b8 <___vfprintf_internal_r+0x684>
 1006374:	94800404 	addi	r18,r18,16
 1006378:	8c400044 	addi	r17,r17,1
 100637c:	1f000015 	stw	fp,0(r3)
 1006380:	1cc00115 	stw	r19,4(r3)
 1006384:	dc800e15 	stw	r18,56(sp)
 1006388:	dc400d15 	stw	r17,52(sp)
 100638c:	a47ff60e 	bge	r20,r17,1006368 <___vfprintf_internal_r+0x634>
 1006390:	d9014f17 	ldw	r4,1340(sp)
 1006394:	b00b883a 	mov	r5,r22
 1006398:	d9800c04 	addi	r6,sp,48
 100639c:	1005cdc0 	call	1005cdc <__sprint_r>
 10063a0:	10001c1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10063a4:	843ffc04 	addi	r16,r16,-16
 10063a8:	dc800e17 	ldw	r18,56(sp)
 10063ac:	dc400d17 	ldw	r17,52(sp)
 10063b0:	d8c01904 	addi	r3,sp,100
 10063b4:	9c3fef16 	blt	r19,r16,1006374 <___vfprintf_internal_r+0x640>
 10063b8:	9425883a 	add	r18,r18,r16
 10063bc:	8c400044 	addi	r17,r17,1
 10063c0:	008001c4 	movi	r2,7
 10063c4:	1f000015 	stw	fp,0(r3)
 10063c8:	1c000115 	stw	r16,4(r3)
 10063cc:	dc800e15 	stw	r18,56(sp)
 10063d0:	dc400d15 	stw	r17,52(sp)
 10063d4:	1440cb16 	blt	r2,r17,1006704 <___vfprintf_internal_r+0x9d0>
 10063d8:	d8814a17 	ldw	r2,1320(sp)
 10063dc:	d9414517 	ldw	r5,1300(sp)
 10063e0:	1140010e 	bge	r2,r5,10063e8 <___vfprintf_internal_r+0x6b4>
 10063e4:	2805883a 	mov	r2,r5
 10063e8:	d9814b17 	ldw	r6,1324(sp)
 10063ec:	308d883a 	add	r6,r6,r2
 10063f0:	d9814b15 	stw	r6,1324(sp)
 10063f4:	90013b1e 	bne	r18,zero,10068e4 <___vfprintf_internal_r+0xbb0>
 10063f8:	d9c14017 	ldw	r7,1280(sp)
 10063fc:	dd401904 	addi	r21,sp,100
 1006400:	d8000d15 	stw	zero,52(sp)
 1006404:	003ea706 	br	1005ea4 <___vfprintf_internal_r+0x170>
 1006408:	d8800e17 	ldw	r2,56(sp)
 100640c:	1005451e 	bne	r2,zero,1007924 <___vfprintf_internal_r+0x1bf0>
 1006410:	d8000d15 	stw	zero,52(sp)
 1006414:	b080030b 	ldhu	r2,12(r22)
 1006418:	1080100c 	andi	r2,r2,64
 100641c:	103e8726 	beq	r2,zero,1005e3c <___vfprintf_internal_r+0x108>
 1006420:	00bfffc4 	movi	r2,-1
 1006424:	d8814b15 	stw	r2,1324(sp)
 1006428:	003e8406 	br	1005e3c <___vfprintf_internal_r+0x108>
 100642c:	d9814d17 	ldw	r6,1332(sp)
 1006430:	00801944 	movi	r2,101
 1006434:	11806e16 	blt	r2,r6,10065f0 <___vfprintf_internal_r+0x8bc>
 1006438:	d9414717 	ldw	r5,1308(sp)
 100643c:	00c00044 	movi	r3,1
 1006440:	1943490e 	bge	r3,r5,1007168 <___vfprintf_internal_r+0x1434>
 1006444:	d8814117 	ldw	r2,1284(sp)
 1006448:	94800044 	addi	r18,r18,1
 100644c:	8c400044 	addi	r17,r17,1
 1006450:	a8800015 	stw	r2,0(r21)
 1006454:	008001c4 	movi	r2,7
 1006458:	a8c00115 	stw	r3,4(r21)
 100645c:	dc800e15 	stw	r18,56(sp)
 1006460:	dc400d15 	stw	r17,52(sp)
 1006464:	1441ca16 	blt	r2,r17,1006b90 <___vfprintf_internal_r+0xe5c>
 1006468:	a8c00204 	addi	r3,r21,8
 100646c:	d9014917 	ldw	r4,1316(sp)
 1006470:	00800044 	movi	r2,1
 1006474:	94800044 	addi	r18,r18,1
 1006478:	8c400044 	addi	r17,r17,1
 100647c:	18800115 	stw	r2,4(r3)
 1006480:	008001c4 	movi	r2,7
 1006484:	19000015 	stw	r4,0(r3)
 1006488:	dc800e15 	stw	r18,56(sp)
 100648c:	dc400d15 	stw	r17,52(sp)
 1006490:	1441b616 	blt	r2,r17,1006b6c <___vfprintf_internal_r+0xe38>
 1006494:	1cc00204 	addi	r19,r3,8
 1006498:	d9014217 	ldw	r4,1288(sp)
 100649c:	d9414317 	ldw	r5,1292(sp)
 10064a0:	000d883a 	mov	r6,zero
 10064a4:	000f883a 	mov	r7,zero
 10064a8:	100d41c0 	call	100d41c <__nedf2>
 10064ac:	10017426 	beq	r2,zero,1006a80 <___vfprintf_internal_r+0xd4c>
 10064b0:	d9414717 	ldw	r5,1308(sp)
 10064b4:	d9814117 	ldw	r6,1284(sp)
 10064b8:	8c400044 	addi	r17,r17,1
 10064bc:	2c85883a 	add	r2,r5,r18
 10064c0:	14bfffc4 	addi	r18,r2,-1
 10064c4:	28bfffc4 	addi	r2,r5,-1
 10064c8:	30c00044 	addi	r3,r6,1
 10064cc:	98800115 	stw	r2,4(r19)
 10064d0:	008001c4 	movi	r2,7
 10064d4:	98c00015 	stw	r3,0(r19)
 10064d8:	dc800e15 	stw	r18,56(sp)
 10064dc:	dc400d15 	stw	r17,52(sp)
 10064e0:	14418e16 	blt	r2,r17,1006b1c <___vfprintf_internal_r+0xde8>
 10064e4:	9cc00204 	addi	r19,r19,8
 10064e8:	d9414817 	ldw	r5,1312(sp)
 10064ec:	d8800804 	addi	r2,sp,32
 10064f0:	8c400044 	addi	r17,r17,1
 10064f4:	9165883a 	add	r18,r18,r5
 10064f8:	98800015 	stw	r2,0(r19)
 10064fc:	008001c4 	movi	r2,7
 1006500:	99400115 	stw	r5,4(r19)
 1006504:	dc800e15 	stw	r18,56(sp)
 1006508:	dc400d15 	stw	r17,52(sp)
 100650c:	1440ed16 	blt	r2,r17,10068c4 <___vfprintf_internal_r+0xb90>
 1006510:	98c00204 	addi	r3,r19,8
 1006514:	003f8506 	br	100632c <___vfprintf_internal_r+0x5f8>
 1006518:	d9814a17 	ldw	r6,1320(sp)
 100651c:	d8814517 	ldw	r2,1300(sp)
 1006520:	30a1c83a 	sub	r16,r6,r2
 1006524:	043f4b0e 	bge	zero,r16,1006254 <___vfprintf_internal_r+0x520>
 1006528:	00800404 	movi	r2,16
 100652c:	14043a0e 	bge	r2,r16,1007618 <___vfprintf_internal_r+0x18e4>
 1006530:	1027883a 	mov	r19,r2
 1006534:	07004074 	movhi	fp,257
 1006538:	e706ef84 	addi	fp,fp,7102
 100653c:	050001c4 	movi	r20,7
 1006540:	00000306 	br	1006550 <___vfprintf_internal_r+0x81c>
 1006544:	843ffc04 	addi	r16,r16,-16
 1006548:	ad400204 	addi	r21,r21,8
 100654c:	9c00130e 	bge	r19,r16,100659c <___vfprintf_internal_r+0x868>
 1006550:	94800404 	addi	r18,r18,16
 1006554:	8c400044 	addi	r17,r17,1
 1006558:	af000015 	stw	fp,0(r21)
 100655c:	acc00115 	stw	r19,4(r21)
 1006560:	dc800e15 	stw	r18,56(sp)
 1006564:	dc400d15 	stw	r17,52(sp)
 1006568:	a47ff60e 	bge	r20,r17,1006544 <___vfprintf_internal_r+0x810>
 100656c:	d9014f17 	ldw	r4,1340(sp)
 1006570:	b00b883a 	mov	r5,r22
 1006574:	d9800c04 	addi	r6,sp,48
 1006578:	d9c15115 	stw	r7,1348(sp)
 100657c:	1005cdc0 	call	1005cdc <__sprint_r>
 1006580:	d9c15117 	ldw	r7,1348(sp)
 1006584:	103fa31e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006588:	843ffc04 	addi	r16,r16,-16
 100658c:	dc800e17 	ldw	r18,56(sp)
 1006590:	dc400d17 	ldw	r17,52(sp)
 1006594:	dd401904 	addi	r21,sp,100
 1006598:	9c3fed16 	blt	r19,r16,1006550 <___vfprintf_internal_r+0x81c>
 100659c:	9425883a 	add	r18,r18,r16
 10065a0:	8c400044 	addi	r17,r17,1
 10065a4:	008001c4 	movi	r2,7
 10065a8:	af000015 	stw	fp,0(r21)
 10065ac:	ac000115 	stw	r16,4(r21)
 10065b0:	dc800e15 	stw	r18,56(sp)
 10065b4:	dc400d15 	stw	r17,52(sp)
 10065b8:	14416116 	blt	r2,r17,1006b40 <___vfprintf_internal_r+0xe0c>
 10065bc:	ad400204 	addi	r21,r21,8
 10065c0:	003f2406 	br	1006254 <___vfprintf_internal_r+0x520>
 10065c4:	d9014f17 	ldw	r4,1340(sp)
 10065c8:	10038600 	call	1003860 <__sinit>
 10065cc:	d9c15117 	ldw	r7,1348(sp)
 10065d0:	003def06 	br	1005d90 <___vfprintf_internal_r+0x5c>
 10065d4:	d9014f17 	ldw	r4,1340(sp)
 10065d8:	b00b883a 	mov	r5,r22
 10065dc:	d9c15115 	stw	r7,1348(sp)
 10065e0:	1007c940 	call	1007c94 <__swsetup_r>
 10065e4:	d9c15117 	ldw	r7,1348(sp)
 10065e8:	103dee26 	beq	r2,zero,1005da4 <___vfprintf_internal_r+0x70>
 10065ec:	003f8c06 	br	1006420 <___vfprintf_internal_r+0x6ec>
 10065f0:	d9014217 	ldw	r4,1288(sp)
 10065f4:	d9414317 	ldw	r5,1292(sp)
 10065f8:	000d883a 	mov	r6,zero
 10065fc:	000f883a 	mov	r7,zero
 1006600:	100d3940 	call	100d394 <__eqdf2>
 1006604:	1000f21e 	bne	r2,zero,10069d0 <___vfprintf_internal_r+0xc9c>
 1006608:	00804074 	movhi	r2,257
 100660c:	1086ef04 	addi	r2,r2,7100
 1006610:	94800044 	addi	r18,r18,1
 1006614:	8c400044 	addi	r17,r17,1
 1006618:	a8800015 	stw	r2,0(r21)
 100661c:	00c00044 	movi	r3,1
 1006620:	008001c4 	movi	r2,7
 1006624:	a8c00115 	stw	r3,4(r21)
 1006628:	dc800e15 	stw	r18,56(sp)
 100662c:	dc400d15 	stw	r17,52(sp)
 1006630:	14430016 	blt	r2,r17,1007234 <___vfprintf_internal_r+0x1500>
 1006634:	a8c00204 	addi	r3,r21,8
 1006638:	d8800517 	ldw	r2,20(sp)
 100663c:	d9014717 	ldw	r4,1308(sp)
 1006640:	11015c0e 	bge	r2,r4,1006bb4 <___vfprintf_internal_r+0xe80>
 1006644:	dc400d17 	ldw	r17,52(sp)
 1006648:	d9814917 	ldw	r6,1316(sp)
 100664c:	00800044 	movi	r2,1
 1006650:	94800044 	addi	r18,r18,1
 1006654:	8c400044 	addi	r17,r17,1
 1006658:	18800115 	stw	r2,4(r3)
 100665c:	008001c4 	movi	r2,7
 1006660:	19800015 	stw	r6,0(r3)
 1006664:	dc800e15 	stw	r18,56(sp)
 1006668:	dc400d15 	stw	r17,52(sp)
 100666c:	14431616 	blt	r2,r17,10072c8 <___vfprintf_internal_r+0x1594>
 1006670:	18c00204 	addi	r3,r3,8
 1006674:	d8814717 	ldw	r2,1308(sp)
 1006678:	143fffc4 	addi	r16,r2,-1
 100667c:	043f2b0e 	bge	zero,r16,100632c <___vfprintf_internal_r+0x5f8>
 1006680:	00800404 	movi	r2,16
 1006684:	1402a80e 	bge	r2,r16,1007128 <___vfprintf_internal_r+0x13f4>
 1006688:	dc400d17 	ldw	r17,52(sp)
 100668c:	1027883a 	mov	r19,r2
 1006690:	07004074 	movhi	fp,257
 1006694:	e706ef84 	addi	fp,fp,7102
 1006698:	050001c4 	movi	r20,7
 100669c:	00000306 	br	10066ac <___vfprintf_internal_r+0x978>
 10066a0:	18c00204 	addi	r3,r3,8
 10066a4:	843ffc04 	addi	r16,r16,-16
 10066a8:	9c02a20e 	bge	r19,r16,1007134 <___vfprintf_internal_r+0x1400>
 10066ac:	94800404 	addi	r18,r18,16
 10066b0:	8c400044 	addi	r17,r17,1
 10066b4:	1f000015 	stw	fp,0(r3)
 10066b8:	1cc00115 	stw	r19,4(r3)
 10066bc:	dc800e15 	stw	r18,56(sp)
 10066c0:	dc400d15 	stw	r17,52(sp)
 10066c4:	a47ff60e 	bge	r20,r17,10066a0 <___vfprintf_internal_r+0x96c>
 10066c8:	d9014f17 	ldw	r4,1340(sp)
 10066cc:	b00b883a 	mov	r5,r22
 10066d0:	d9800c04 	addi	r6,sp,48
 10066d4:	1005cdc0 	call	1005cdc <__sprint_r>
 10066d8:	103f4e1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10066dc:	dc800e17 	ldw	r18,56(sp)
 10066e0:	dc400d17 	ldw	r17,52(sp)
 10066e4:	d8c01904 	addi	r3,sp,100
 10066e8:	003fee06 	br	10066a4 <___vfprintf_internal_r+0x970>
 10066ec:	d8802c0b 	ldhu	r2,176(sp)
 10066f0:	00ffffc4 	movi	r3,-1
 10066f4:	d8c14b15 	stw	r3,1324(sp)
 10066f8:	1080100c 	andi	r2,r2,64
 10066fc:	103dcc1e 	bne	r2,zero,1005e30 <___vfprintf_internal_r+0xfc>
 1006700:	003dce06 	br	1005e3c <___vfprintf_internal_r+0x108>
 1006704:	d9014f17 	ldw	r4,1340(sp)
 1006708:	b00b883a 	mov	r5,r22
 100670c:	d9800c04 	addi	r6,sp,48
 1006710:	1005cdc0 	call	1005cdc <__sprint_r>
 1006714:	103f3f1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006718:	dc800e17 	ldw	r18,56(sp)
 100671c:	003f2e06 	br	10063d8 <___vfprintf_internal_r+0x6a4>
 1006720:	d9414c17 	ldw	r5,1328(sp)
 1006724:	29400414 	ori	r5,r5,16
 1006728:	d9414c15 	stw	r5,1328(sp)
 100672c:	d9814c17 	ldw	r6,1328(sp)
 1006730:	3080080c 	andi	r2,r6,32
 1006734:	10014f1e 	bne	r2,zero,1006c74 <___vfprintf_internal_r+0xf40>
 1006738:	d8c14c17 	ldw	r3,1328(sp)
 100673c:	1880040c 	andi	r2,r3,16
 1006740:	1002f01e 	bne	r2,zero,1007304 <___vfprintf_internal_r+0x15d0>
 1006744:	d9014c17 	ldw	r4,1328(sp)
 1006748:	2080100c 	andi	r2,r4,64
 100674c:	1002ed26 	beq	r2,zero,1007304 <___vfprintf_internal_r+0x15d0>
 1006750:	3880000f 	ldh	r2,0(r7)
 1006754:	39c00104 	addi	r7,r7,4
 1006758:	d9c14015 	stw	r7,1280(sp)
 100675c:	1023d7fa 	srai	r17,r2,31
 1006760:	1021883a 	mov	r16,r2
 1006764:	88037816 	blt	r17,zero,1007548 <___vfprintf_internal_r+0x1814>
 1006768:	01000044 	movi	r4,1
 100676c:	98000416 	blt	r19,zero,1006780 <___vfprintf_internal_r+0xa4c>
 1006770:	d8c14c17 	ldw	r3,1328(sp)
 1006774:	00bfdfc4 	movi	r2,-129
 1006778:	1886703a 	and	r3,r3,r2
 100677c:	d8c14c15 	stw	r3,1328(sp)
 1006780:	8444b03a 	or	r2,r16,r17
 1006784:	10022c1e 	bne	r2,zero,1007038 <___vfprintf_internal_r+0x1304>
 1006788:	98022b1e 	bne	r19,zero,1007038 <___vfprintf_internal_r+0x1304>
 100678c:	20803fcc 	andi	r2,r4,255
 1006790:	1002a126 	beq	r2,zero,1007218 <___vfprintf_internal_r+0x14e4>
 1006794:	d8c01904 	addi	r3,sp,100
 1006798:	dd000f04 	addi	r20,sp,60
 100679c:	d8c14115 	stw	r3,1284(sp)
 10067a0:	d8c14117 	ldw	r3,1284(sp)
 10067a4:	dcc14515 	stw	r19,1300(sp)
 10067a8:	a0c5c83a 	sub	r2,r20,r3
 10067ac:	11c00a04 	addi	r7,r2,40
 10067b0:	99c0010e 	bge	r19,r7,10067b8 <___vfprintf_internal_r+0xa84>
 10067b4:	d9c14515 	stw	r7,1300(sp)
 10067b8:	dcc14615 	stw	r19,1304(sp)
 10067bc:	d8800407 	ldb	r2,16(sp)
 10067c0:	103e4c26 	beq	r2,zero,10060f4 <___vfprintf_internal_r+0x3c0>
 10067c4:	d8814517 	ldw	r2,1300(sp)
 10067c8:	10800044 	addi	r2,r2,1
 10067cc:	d8814515 	stw	r2,1300(sp)
 10067d0:	003e4806 	br	10060f4 <___vfprintf_internal_r+0x3c0>
 10067d4:	d9814c17 	ldw	r6,1328(sp)
 10067d8:	31800414 	ori	r6,r6,16
 10067dc:	d9814c15 	stw	r6,1328(sp)
 10067e0:	d8c14c17 	ldw	r3,1328(sp)
 10067e4:	1880080c 	andi	r2,r3,32
 10067e8:	1001271e 	bne	r2,zero,1006c88 <___vfprintf_internal_r+0xf54>
 10067ec:	d9414c17 	ldw	r5,1328(sp)
 10067f0:	2880040c 	andi	r2,r5,16
 10067f4:	1002bc1e 	bne	r2,zero,10072e8 <___vfprintf_internal_r+0x15b4>
 10067f8:	d9814c17 	ldw	r6,1328(sp)
 10067fc:	3080100c 	andi	r2,r6,64
 1006800:	1002b926 	beq	r2,zero,10072e8 <___vfprintf_internal_r+0x15b4>
 1006804:	3c00000b 	ldhu	r16,0(r7)
 1006808:	0009883a 	mov	r4,zero
 100680c:	39c00104 	addi	r7,r7,4
 1006810:	0023883a 	mov	r17,zero
 1006814:	d9c14015 	stw	r7,1280(sp)
 1006818:	d8000405 	stb	zero,16(sp)
 100681c:	003fd306 	br	100676c <___vfprintf_internal_r+0xa38>
 1006820:	d9014c17 	ldw	r4,1328(sp)
 1006824:	21000414 	ori	r4,r4,16
 1006828:	d9014c15 	stw	r4,1328(sp)
 100682c:	d9414c17 	ldw	r5,1328(sp)
 1006830:	2880080c 	andi	r2,r5,32
 1006834:	1001081e 	bne	r2,zero,1006c58 <___vfprintf_internal_r+0xf24>
 1006838:	d8c14c17 	ldw	r3,1328(sp)
 100683c:	1880040c 	andi	r2,r3,16
 1006840:	1002b61e 	bne	r2,zero,100731c <___vfprintf_internal_r+0x15e8>
 1006844:	d9014c17 	ldw	r4,1328(sp)
 1006848:	2080100c 	andi	r2,r4,64
 100684c:	1002b326 	beq	r2,zero,100731c <___vfprintf_internal_r+0x15e8>
 1006850:	3c00000b 	ldhu	r16,0(r7)
 1006854:	01000044 	movi	r4,1
 1006858:	39c00104 	addi	r7,r7,4
 100685c:	0023883a 	mov	r17,zero
 1006860:	d9c14015 	stw	r7,1280(sp)
 1006864:	d8000405 	stb	zero,16(sp)
 1006868:	003fc006 	br	100676c <___vfprintf_internal_r+0xa38>
 100686c:	d9014f17 	ldw	r4,1340(sp)
 1006870:	b00b883a 	mov	r5,r22
 1006874:	d9800c04 	addi	r6,sp,48
 1006878:	1005cdc0 	call	1005cdc <__sprint_r>
 100687c:	103ee51e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006880:	dc800e17 	ldw	r18,56(sp)
 1006884:	d8c01904 	addi	r3,sp,100
 1006888:	d9814c17 	ldw	r6,1328(sp)
 100688c:	3080004c 	andi	r2,r6,1
 1006890:	1005003a 	cmpeq	r2,r2,zero
 1006894:	103ea51e 	bne	r2,zero,100632c <___vfprintf_internal_r+0x5f8>
 1006898:	00800044 	movi	r2,1
 100689c:	dc400d17 	ldw	r17,52(sp)
 10068a0:	18800115 	stw	r2,4(r3)
 10068a4:	d8814917 	ldw	r2,1316(sp)
 10068a8:	94800044 	addi	r18,r18,1
 10068ac:	8c400044 	addi	r17,r17,1
 10068b0:	18800015 	stw	r2,0(r3)
 10068b4:	008001c4 	movi	r2,7
 10068b8:	dc800e15 	stw	r18,56(sp)
 10068bc:	dc400d15 	stw	r17,52(sp)
 10068c0:	1442240e 	bge	r2,r17,1007154 <___vfprintf_internal_r+0x1420>
 10068c4:	d9014f17 	ldw	r4,1340(sp)
 10068c8:	b00b883a 	mov	r5,r22
 10068cc:	d9800c04 	addi	r6,sp,48
 10068d0:	1005cdc0 	call	1005cdc <__sprint_r>
 10068d4:	103ecf1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10068d8:	dc800e17 	ldw	r18,56(sp)
 10068dc:	d8c01904 	addi	r3,sp,100
 10068e0:	003e9206 	br	100632c <___vfprintf_internal_r+0x5f8>
 10068e4:	d9014f17 	ldw	r4,1340(sp)
 10068e8:	b00b883a 	mov	r5,r22
 10068ec:	d9800c04 	addi	r6,sp,48
 10068f0:	1005cdc0 	call	1005cdc <__sprint_r>
 10068f4:	103ec026 	beq	r2,zero,10063f8 <___vfprintf_internal_r+0x6c4>
 10068f8:	003ec606 	br	1006414 <___vfprintf_internal_r+0x6e0>
 10068fc:	d9014f17 	ldw	r4,1340(sp)
 1006900:	b00b883a 	mov	r5,r22
 1006904:	d9800c04 	addi	r6,sp,48
 1006908:	d9c15115 	stw	r7,1348(sp)
 100690c:	1005cdc0 	call	1005cdc <__sprint_r>
 1006910:	d9c15117 	ldw	r7,1348(sp)
 1006914:	103ebf1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006918:	dc800e17 	ldw	r18,56(sp)
 100691c:	dc400d17 	ldw	r17,52(sp)
 1006920:	dd401904 	addi	r21,sp,100
 1006924:	003e7406 	br	10062f8 <___vfprintf_internal_r+0x5c4>
 1006928:	d9014f17 	ldw	r4,1340(sp)
 100692c:	b00b883a 	mov	r5,r22
 1006930:	d9800c04 	addi	r6,sp,48
 1006934:	d9c15115 	stw	r7,1348(sp)
 1006938:	1005cdc0 	call	1005cdc <__sprint_r>
 100693c:	d9c15117 	ldw	r7,1348(sp)
 1006940:	103eb41e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006944:	dd401904 	addi	r21,sp,100
 1006948:	003d6d06 	br	1005f00 <___vfprintf_internal_r+0x1cc>
 100694c:	d9014f17 	ldw	r4,1340(sp)
 1006950:	b00b883a 	mov	r5,r22
 1006954:	d9800c04 	addi	r6,sp,48
 1006958:	d9c15115 	stw	r7,1348(sp)
 100695c:	1005cdc0 	call	1005cdc <__sprint_r>
 1006960:	d9c15117 	ldw	r7,1348(sp)
 1006964:	103eab1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006968:	dc800e17 	ldw	r18,56(sp)
 100696c:	dc400d17 	ldw	r17,52(sp)
 1006970:	dd401904 	addi	r21,sp,100
 1006974:	003e3406 	br	1006248 <___vfprintf_internal_r+0x514>
 1006978:	d9014f17 	ldw	r4,1340(sp)
 100697c:	b00b883a 	mov	r5,r22
 1006980:	d9800c04 	addi	r6,sp,48
 1006984:	d9c15115 	stw	r7,1348(sp)
 1006988:	1005cdc0 	call	1005cdc <__sprint_r>
 100698c:	d9c15117 	ldw	r7,1348(sp)
 1006990:	103ea01e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006994:	dc800e17 	ldw	r18,56(sp)
 1006998:	dc400d17 	ldw	r17,52(sp)
 100699c:	dd401904 	addi	r21,sp,100
 10069a0:	003e1c06 	br	1006214 <___vfprintf_internal_r+0x4e0>
 10069a4:	d9014f17 	ldw	r4,1340(sp)
 10069a8:	b00b883a 	mov	r5,r22
 10069ac:	d9800c04 	addi	r6,sp,48
 10069b0:	d9c15115 	stw	r7,1348(sp)
 10069b4:	1005cdc0 	call	1005cdc <__sprint_r>
 10069b8:	d9c15117 	ldw	r7,1348(sp)
 10069bc:	103e951e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10069c0:	dc800e17 	ldw	r18,56(sp)
 10069c4:	dc400d17 	ldw	r17,52(sp)
 10069c8:	dd401904 	addi	r21,sp,100
 10069cc:	003e0406 	br	10061e0 <___vfprintf_internal_r+0x4ac>
 10069d0:	d9000517 	ldw	r4,20(sp)
 10069d4:	0102580e 	bge	zero,r4,1007338 <___vfprintf_internal_r+0x1604>
 10069d8:	d9814717 	ldw	r6,1308(sp)
 10069dc:	21807a16 	blt	r4,r6,1006bc8 <___vfprintf_internal_r+0xe94>
 10069e0:	d8814117 	ldw	r2,1284(sp)
 10069e4:	91a5883a 	add	r18,r18,r6
 10069e8:	8c400044 	addi	r17,r17,1
 10069ec:	a8800015 	stw	r2,0(r21)
 10069f0:	008001c4 	movi	r2,7
 10069f4:	a9800115 	stw	r6,4(r21)
 10069f8:	dc800e15 	stw	r18,56(sp)
 10069fc:	dc400d15 	stw	r17,52(sp)
 1006a00:	1442fc16 	blt	r2,r17,10075f4 <___vfprintf_internal_r+0x18c0>
 1006a04:	a8c00204 	addi	r3,r21,8
 1006a08:	d9414717 	ldw	r5,1308(sp)
 1006a0c:	2161c83a 	sub	r16,r4,r5
 1006a10:	043f9d0e 	bge	zero,r16,1006888 <___vfprintf_internal_r+0xb54>
 1006a14:	00800404 	movi	r2,16
 1006a18:	1402190e 	bge	r2,r16,1007280 <___vfprintf_internal_r+0x154c>
 1006a1c:	dc400d17 	ldw	r17,52(sp)
 1006a20:	1027883a 	mov	r19,r2
 1006a24:	07004074 	movhi	fp,257
 1006a28:	e706ef84 	addi	fp,fp,7102
 1006a2c:	050001c4 	movi	r20,7
 1006a30:	00000306 	br	1006a40 <___vfprintf_internal_r+0xd0c>
 1006a34:	18c00204 	addi	r3,r3,8
 1006a38:	843ffc04 	addi	r16,r16,-16
 1006a3c:	9c02130e 	bge	r19,r16,100728c <___vfprintf_internal_r+0x1558>
 1006a40:	94800404 	addi	r18,r18,16
 1006a44:	8c400044 	addi	r17,r17,1
 1006a48:	1f000015 	stw	fp,0(r3)
 1006a4c:	1cc00115 	stw	r19,4(r3)
 1006a50:	dc800e15 	stw	r18,56(sp)
 1006a54:	dc400d15 	stw	r17,52(sp)
 1006a58:	a47ff60e 	bge	r20,r17,1006a34 <___vfprintf_internal_r+0xd00>
 1006a5c:	d9014f17 	ldw	r4,1340(sp)
 1006a60:	b00b883a 	mov	r5,r22
 1006a64:	d9800c04 	addi	r6,sp,48
 1006a68:	1005cdc0 	call	1005cdc <__sprint_r>
 1006a6c:	103e691e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006a70:	dc800e17 	ldw	r18,56(sp)
 1006a74:	dc400d17 	ldw	r17,52(sp)
 1006a78:	d8c01904 	addi	r3,sp,100
 1006a7c:	003fee06 	br	1006a38 <___vfprintf_internal_r+0xd04>
 1006a80:	d8814717 	ldw	r2,1308(sp)
 1006a84:	143fffc4 	addi	r16,r2,-1
 1006a88:	043e970e 	bge	zero,r16,10064e8 <___vfprintf_internal_r+0x7b4>
 1006a8c:	00800404 	movi	r2,16
 1006a90:	1400180e 	bge	r2,r16,1006af4 <___vfprintf_internal_r+0xdc0>
 1006a94:	1029883a 	mov	r20,r2
 1006a98:	07004074 	movhi	fp,257
 1006a9c:	e706ef84 	addi	fp,fp,7102
 1006aa0:	054001c4 	movi	r21,7
 1006aa4:	00000306 	br	1006ab4 <___vfprintf_internal_r+0xd80>
 1006aa8:	9cc00204 	addi	r19,r19,8
 1006aac:	843ffc04 	addi	r16,r16,-16
 1006ab0:	a400120e 	bge	r20,r16,1006afc <___vfprintf_internal_r+0xdc8>
 1006ab4:	94800404 	addi	r18,r18,16
 1006ab8:	8c400044 	addi	r17,r17,1
 1006abc:	9f000015 	stw	fp,0(r19)
 1006ac0:	9d000115 	stw	r20,4(r19)
 1006ac4:	dc800e15 	stw	r18,56(sp)
 1006ac8:	dc400d15 	stw	r17,52(sp)
 1006acc:	ac7ff60e 	bge	r21,r17,1006aa8 <___vfprintf_internal_r+0xd74>
 1006ad0:	d9014f17 	ldw	r4,1340(sp)
 1006ad4:	b00b883a 	mov	r5,r22
 1006ad8:	d9800c04 	addi	r6,sp,48
 1006adc:	1005cdc0 	call	1005cdc <__sprint_r>
 1006ae0:	103e4c1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006ae4:	dc800e17 	ldw	r18,56(sp)
 1006ae8:	dc400d17 	ldw	r17,52(sp)
 1006aec:	dcc01904 	addi	r19,sp,100
 1006af0:	003fee06 	br	1006aac <___vfprintf_internal_r+0xd78>
 1006af4:	07004074 	movhi	fp,257
 1006af8:	e706ef84 	addi	fp,fp,7102
 1006afc:	9425883a 	add	r18,r18,r16
 1006b00:	8c400044 	addi	r17,r17,1
 1006b04:	008001c4 	movi	r2,7
 1006b08:	9f000015 	stw	fp,0(r19)
 1006b0c:	9c000115 	stw	r16,4(r19)
 1006b10:	dc800e15 	stw	r18,56(sp)
 1006b14:	dc400d15 	stw	r17,52(sp)
 1006b18:	147e720e 	bge	r2,r17,10064e4 <___vfprintf_internal_r+0x7b0>
 1006b1c:	d9014f17 	ldw	r4,1340(sp)
 1006b20:	b00b883a 	mov	r5,r22
 1006b24:	d9800c04 	addi	r6,sp,48
 1006b28:	1005cdc0 	call	1005cdc <__sprint_r>
 1006b2c:	103e391e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006b30:	dc800e17 	ldw	r18,56(sp)
 1006b34:	dc400d17 	ldw	r17,52(sp)
 1006b38:	dcc01904 	addi	r19,sp,100
 1006b3c:	003e6a06 	br	10064e8 <___vfprintf_internal_r+0x7b4>
 1006b40:	d9014f17 	ldw	r4,1340(sp)
 1006b44:	b00b883a 	mov	r5,r22
 1006b48:	d9800c04 	addi	r6,sp,48
 1006b4c:	d9c15115 	stw	r7,1348(sp)
 1006b50:	1005cdc0 	call	1005cdc <__sprint_r>
 1006b54:	d9c15117 	ldw	r7,1348(sp)
 1006b58:	103e2e1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006b5c:	dc800e17 	ldw	r18,56(sp)
 1006b60:	dc400d17 	ldw	r17,52(sp)
 1006b64:	dd401904 	addi	r21,sp,100
 1006b68:	003dba06 	br	1006254 <___vfprintf_internal_r+0x520>
 1006b6c:	d9014f17 	ldw	r4,1340(sp)
 1006b70:	b00b883a 	mov	r5,r22
 1006b74:	d9800c04 	addi	r6,sp,48
 1006b78:	1005cdc0 	call	1005cdc <__sprint_r>
 1006b7c:	103e251e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006b80:	dc800e17 	ldw	r18,56(sp)
 1006b84:	dc400d17 	ldw	r17,52(sp)
 1006b88:	dcc01904 	addi	r19,sp,100
 1006b8c:	003e4206 	br	1006498 <___vfprintf_internal_r+0x764>
 1006b90:	d9014f17 	ldw	r4,1340(sp)
 1006b94:	b00b883a 	mov	r5,r22
 1006b98:	d9800c04 	addi	r6,sp,48
 1006b9c:	1005cdc0 	call	1005cdc <__sprint_r>
 1006ba0:	103e1c1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1006ba4:	dc800e17 	ldw	r18,56(sp)
 1006ba8:	dc400d17 	ldw	r17,52(sp)
 1006bac:	d8c01904 	addi	r3,sp,100
 1006bb0:	003e2e06 	br	100646c <___vfprintf_internal_r+0x738>
 1006bb4:	d9414c17 	ldw	r5,1328(sp)
 1006bb8:	2880004c 	andi	r2,r5,1
 1006bbc:	1005003a 	cmpeq	r2,r2,zero
 1006bc0:	103dda1e 	bne	r2,zero,100632c <___vfprintf_internal_r+0x5f8>
 1006bc4:	003e9f06 	br	1006644 <___vfprintf_internal_r+0x910>
 1006bc8:	d8c14117 	ldw	r3,1284(sp)
 1006bcc:	9125883a 	add	r18,r18,r4
 1006bd0:	8c400044 	addi	r17,r17,1
 1006bd4:	008001c4 	movi	r2,7
 1006bd8:	a8c00015 	stw	r3,0(r21)
 1006bdc:	a9000115 	stw	r4,4(r21)
 1006be0:	dc800e15 	stw	r18,56(sp)
 1006be4:	dc400d15 	stw	r17,52(sp)
 1006be8:	14426c16 	blt	r2,r17,100759c <___vfprintf_internal_r+0x1868>
 1006bec:	a8c00204 	addi	r3,r21,8
 1006bf0:	d9414917 	ldw	r5,1316(sp)
 1006bf4:	00800044 	movi	r2,1
 1006bf8:	94800044 	addi	r18,r18,1
 1006bfc:	8c400044 	addi	r17,r17,1
 1006c00:	18800115 	stw	r2,4(r3)
 1006c04:	008001c4 	movi	r2,7
 1006c08:	19400015 	stw	r5,0(r3)
 1006c0c:	dc800e15 	stw	r18,56(sp)
 1006c10:	dc400d15 	stw	r17,52(sp)
 1006c14:	2021883a 	mov	r16,r4
 1006c18:	14425616 	blt	r2,r17,1007574 <___vfprintf_internal_r+0x1840>
 1006c1c:	19400204 	addi	r5,r3,8
 1006c20:	d9814717 	ldw	r6,1308(sp)
 1006c24:	8c400044 	addi	r17,r17,1
 1006c28:	dc400d15 	stw	r17,52(sp)
 1006c2c:	3107c83a 	sub	r3,r6,r4
 1006c30:	d9014117 	ldw	r4,1284(sp)
 1006c34:	90e5883a 	add	r18,r18,r3
 1006c38:	28c00115 	stw	r3,4(r5)
 1006c3c:	8105883a 	add	r2,r16,r4
 1006c40:	28800015 	stw	r2,0(r5)
 1006c44:	008001c4 	movi	r2,7
 1006c48:	dc800e15 	stw	r18,56(sp)
 1006c4c:	147f1d16 	blt	r2,r17,10068c4 <___vfprintf_internal_r+0xb90>
 1006c50:	28c00204 	addi	r3,r5,8
 1006c54:	003db506 	br	100632c <___vfprintf_internal_r+0x5f8>
 1006c58:	3c000017 	ldw	r16,0(r7)
 1006c5c:	3c400117 	ldw	r17,4(r7)
 1006c60:	39800204 	addi	r6,r7,8
 1006c64:	01000044 	movi	r4,1
 1006c68:	d9814015 	stw	r6,1280(sp)
 1006c6c:	d8000405 	stb	zero,16(sp)
 1006c70:	003ebe06 	br	100676c <___vfprintf_internal_r+0xa38>
 1006c74:	3c000017 	ldw	r16,0(r7)
 1006c78:	3c400117 	ldw	r17,4(r7)
 1006c7c:	38800204 	addi	r2,r7,8
 1006c80:	d8814015 	stw	r2,1280(sp)
 1006c84:	003eb706 	br	1006764 <___vfprintf_internal_r+0xa30>
 1006c88:	3c000017 	ldw	r16,0(r7)
 1006c8c:	3c400117 	ldw	r17,4(r7)
 1006c90:	39000204 	addi	r4,r7,8
 1006c94:	d9014015 	stw	r4,1280(sp)
 1006c98:	0009883a 	mov	r4,zero
 1006c9c:	d8000405 	stb	zero,16(sp)
 1006ca0:	003eb206 	br	100676c <___vfprintf_internal_r+0xa38>
 1006ca4:	38c00017 	ldw	r3,0(r7)
 1006ca8:	39c00104 	addi	r7,r7,4
 1006cac:	d8c14a15 	stw	r3,1320(sp)
 1006cb0:	1800d70e 	bge	r3,zero,1007010 <___vfprintf_internal_r+0x12dc>
 1006cb4:	00c7c83a 	sub	r3,zero,r3
 1006cb8:	d8c14a15 	stw	r3,1320(sp)
 1006cbc:	d9014c17 	ldw	r4,1328(sp)
 1006cc0:	b8c00007 	ldb	r3,0(r23)
 1006cc4:	21000114 	ori	r4,r4,4
 1006cc8:	d9014c15 	stw	r4,1328(sp)
 1006ccc:	003c9806 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006cd0:	d9814c17 	ldw	r6,1328(sp)
 1006cd4:	3080080c 	andi	r2,r6,32
 1006cd8:	1001f626 	beq	r2,zero,10074b4 <___vfprintf_internal_r+0x1780>
 1006cdc:	d9014b17 	ldw	r4,1324(sp)
 1006ce0:	38800017 	ldw	r2,0(r7)
 1006ce4:	39c00104 	addi	r7,r7,4
 1006ce8:	d9c14015 	stw	r7,1280(sp)
 1006cec:	2007d7fa 	srai	r3,r4,31
 1006cf0:	d9c14017 	ldw	r7,1280(sp)
 1006cf4:	11000015 	stw	r4,0(r2)
 1006cf8:	10c00115 	stw	r3,4(r2)
 1006cfc:	003c6906 	br	1005ea4 <___vfprintf_internal_r+0x170>
 1006d00:	b8c00007 	ldb	r3,0(r23)
 1006d04:	00801b04 	movi	r2,108
 1006d08:	18825526 	beq	r3,r2,1007660 <___vfprintf_internal_r+0x192c>
 1006d0c:	d9414c17 	ldw	r5,1328(sp)
 1006d10:	29400414 	ori	r5,r5,16
 1006d14:	d9414c15 	stw	r5,1328(sp)
 1006d18:	003c8506 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006d1c:	d9814c17 	ldw	r6,1328(sp)
 1006d20:	b8c00007 	ldb	r3,0(r23)
 1006d24:	31800814 	ori	r6,r6,32
 1006d28:	d9814c15 	stw	r6,1328(sp)
 1006d2c:	003c8006 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006d30:	d8814c17 	ldw	r2,1328(sp)
 1006d34:	3c000017 	ldw	r16,0(r7)
 1006d38:	00c01e04 	movi	r3,120
 1006d3c:	10800094 	ori	r2,r2,2
 1006d40:	d8814c15 	stw	r2,1328(sp)
 1006d44:	39c00104 	addi	r7,r7,4
 1006d48:	01404074 	movhi	r5,257
 1006d4c:	2946d804 	addi	r5,r5,7008
 1006d50:	00800c04 	movi	r2,48
 1006d54:	0023883a 	mov	r17,zero
 1006d58:	01000084 	movi	r4,2
 1006d5c:	d9c14015 	stw	r7,1280(sp)
 1006d60:	d8c14d15 	stw	r3,1332(sp)
 1006d64:	d9414415 	stw	r5,1296(sp)
 1006d68:	d8800445 	stb	r2,17(sp)
 1006d6c:	d8c00485 	stb	r3,18(sp)
 1006d70:	d8000405 	stb	zero,16(sp)
 1006d74:	003e7d06 	br	100676c <___vfprintf_internal_r+0xa38>
 1006d78:	d8814c17 	ldw	r2,1328(sp)
 1006d7c:	b8c00007 	ldb	r3,0(r23)
 1006d80:	10801014 	ori	r2,r2,64
 1006d84:	d8814c15 	stw	r2,1328(sp)
 1006d88:	003c6906 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006d8c:	d9414c17 	ldw	r5,1328(sp)
 1006d90:	2880020c 	andi	r2,r5,8
 1006d94:	1001e526 	beq	r2,zero,100752c <___vfprintf_internal_r+0x17f8>
 1006d98:	39800017 	ldw	r6,0(r7)
 1006d9c:	38800204 	addi	r2,r7,8
 1006da0:	d8814015 	stw	r2,1280(sp)
 1006da4:	d9814215 	stw	r6,1288(sp)
 1006da8:	39c00117 	ldw	r7,4(r7)
 1006dac:	d9c14315 	stw	r7,1292(sp)
 1006db0:	d9014217 	ldw	r4,1288(sp)
 1006db4:	d9414317 	ldw	r5,1292(sp)
 1006db8:	100b8680 	call	100b868 <__isinfd>
 1006dbc:	10021d26 	beq	r2,zero,1007634 <___vfprintf_internal_r+0x1900>
 1006dc0:	d9014217 	ldw	r4,1288(sp)
 1006dc4:	d9414317 	ldw	r5,1292(sp)
 1006dc8:	000d883a 	mov	r6,zero
 1006dcc:	000f883a 	mov	r7,zero
 1006dd0:	100d5b40 	call	100d5b4 <__ltdf2>
 1006dd4:	1002d016 	blt	r2,zero,1007918 <___vfprintf_internal_r+0x1be4>
 1006dd8:	d9414d17 	ldw	r5,1332(sp)
 1006ddc:	008011c4 	movi	r2,71
 1006de0:	11421016 	blt	r2,r5,1007624 <___vfprintf_internal_r+0x18f0>
 1006de4:	01804074 	movhi	r6,257
 1006de8:	3186dd04 	addi	r6,r6,7028
 1006dec:	d9814115 	stw	r6,1284(sp)
 1006df0:	d9014c17 	ldw	r4,1328(sp)
 1006df4:	00c000c4 	movi	r3,3
 1006df8:	00bfdfc4 	movi	r2,-129
 1006dfc:	2088703a 	and	r4,r4,r2
 1006e00:	180f883a 	mov	r7,r3
 1006e04:	d8c14515 	stw	r3,1300(sp)
 1006e08:	d9014c15 	stw	r4,1328(sp)
 1006e0c:	d8014615 	stw	zero,1304(sp)
 1006e10:	003e6a06 	br	10067bc <___vfprintf_internal_r+0xa88>
 1006e14:	38800017 	ldw	r2,0(r7)
 1006e18:	00c00044 	movi	r3,1
 1006e1c:	39c00104 	addi	r7,r7,4
 1006e20:	d9c14015 	stw	r7,1280(sp)
 1006e24:	d9000f04 	addi	r4,sp,60
 1006e28:	180f883a 	mov	r7,r3
 1006e2c:	d8c14515 	stw	r3,1300(sp)
 1006e30:	d9014115 	stw	r4,1284(sp)
 1006e34:	d8800f05 	stb	r2,60(sp)
 1006e38:	d8000405 	stb	zero,16(sp)
 1006e3c:	003cac06 	br	10060f0 <___vfprintf_internal_r+0x3bc>
 1006e40:	01404074 	movhi	r5,257
 1006e44:	2946e304 	addi	r5,r5,7052
 1006e48:	d9414415 	stw	r5,1296(sp)
 1006e4c:	d9814c17 	ldw	r6,1328(sp)
 1006e50:	3080080c 	andi	r2,r6,32
 1006e54:	1000ff26 	beq	r2,zero,1007254 <___vfprintf_internal_r+0x1520>
 1006e58:	3c000017 	ldw	r16,0(r7)
 1006e5c:	3c400117 	ldw	r17,4(r7)
 1006e60:	38800204 	addi	r2,r7,8
 1006e64:	d8814015 	stw	r2,1280(sp)
 1006e68:	d9414c17 	ldw	r5,1328(sp)
 1006e6c:	2880004c 	andi	r2,r5,1
 1006e70:	1005003a 	cmpeq	r2,r2,zero
 1006e74:	1000b91e 	bne	r2,zero,100715c <___vfprintf_internal_r+0x1428>
 1006e78:	8444b03a 	or	r2,r16,r17
 1006e7c:	1000b726 	beq	r2,zero,100715c <___vfprintf_internal_r+0x1428>
 1006e80:	d9814d17 	ldw	r6,1332(sp)
 1006e84:	29400094 	ori	r5,r5,2
 1006e88:	00800c04 	movi	r2,48
 1006e8c:	01000084 	movi	r4,2
 1006e90:	d9414c15 	stw	r5,1328(sp)
 1006e94:	d8800445 	stb	r2,17(sp)
 1006e98:	d9800485 	stb	r6,18(sp)
 1006e9c:	d8000405 	stb	zero,16(sp)
 1006ea0:	003e3206 	br	100676c <___vfprintf_internal_r+0xa38>
 1006ea4:	01804074 	movhi	r6,257
 1006ea8:	3186d804 	addi	r6,r6,7008
 1006eac:	d9814415 	stw	r6,1296(sp)
 1006eb0:	003fe606 	br	1006e4c <___vfprintf_internal_r+0x1118>
 1006eb4:	00800ac4 	movi	r2,43
 1006eb8:	d8800405 	stb	r2,16(sp)
 1006ebc:	b8c00007 	ldb	r3,0(r23)
 1006ec0:	003c1b06 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006ec4:	d8814c17 	ldw	r2,1328(sp)
 1006ec8:	b8c00007 	ldb	r3,0(r23)
 1006ecc:	10800054 	ori	r2,r2,1
 1006ed0:	d8814c15 	stw	r2,1328(sp)
 1006ed4:	003c1606 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006ed8:	d8800407 	ldb	r2,16(sp)
 1006edc:	10004c1e 	bne	r2,zero,1007010 <___vfprintf_internal_r+0x12dc>
 1006ee0:	00800804 	movi	r2,32
 1006ee4:	d8800405 	stb	r2,16(sp)
 1006ee8:	b8c00007 	ldb	r3,0(r23)
 1006eec:	003c1006 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006ef0:	d9814c17 	ldw	r6,1328(sp)
 1006ef4:	b8c00007 	ldb	r3,0(r23)
 1006ef8:	31800214 	ori	r6,r6,8
 1006efc:	d9814c15 	stw	r6,1328(sp)
 1006f00:	003c0b06 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006f04:	0009883a 	mov	r4,zero
 1006f08:	04000244 	movi	r16,9
 1006f0c:	01400284 	movi	r5,10
 1006f10:	d9c15115 	stw	r7,1348(sp)
 1006f14:	1002f0c0 	call	1002f0c <__mulsi3>
 1006f18:	b9000007 	ldb	r4,0(r23)
 1006f1c:	d8c14d17 	ldw	r3,1332(sp)
 1006f20:	bdc00044 	addi	r23,r23,1
 1006f24:	d9014d15 	stw	r4,1332(sp)
 1006f28:	d9414d17 	ldw	r5,1332(sp)
 1006f2c:	1885883a 	add	r2,r3,r2
 1006f30:	113ff404 	addi	r4,r2,-48
 1006f34:	28bff404 	addi	r2,r5,-48
 1006f38:	d9c15117 	ldw	r7,1348(sp)
 1006f3c:	80bff32e 	bgeu	r16,r2,1006f0c <___vfprintf_internal_r+0x11d8>
 1006f40:	d9014a15 	stw	r4,1320(sp)
 1006f44:	003bfc06 	br	1005f38 <___vfprintf_internal_r+0x204>
 1006f48:	d8814c17 	ldw	r2,1328(sp)
 1006f4c:	b8c00007 	ldb	r3,0(r23)
 1006f50:	10802014 	ori	r2,r2,128
 1006f54:	d8814c15 	stw	r2,1328(sp)
 1006f58:	003bf506 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1006f5c:	b8c00007 	ldb	r3,0(r23)
 1006f60:	00800a84 	movi	r2,42
 1006f64:	bdc00044 	addi	r23,r23,1
 1006f68:	18831826 	beq	r3,r2,1007bcc <___vfprintf_internal_r+0x1e98>
 1006f6c:	d8c14d15 	stw	r3,1332(sp)
 1006f70:	18bff404 	addi	r2,r3,-48
 1006f74:	00c00244 	movi	r3,9
 1006f78:	18827b36 	bltu	r3,r2,1007968 <___vfprintf_internal_r+0x1c34>
 1006f7c:	1821883a 	mov	r16,r3
 1006f80:	0009883a 	mov	r4,zero
 1006f84:	01400284 	movi	r5,10
 1006f88:	d9c15115 	stw	r7,1348(sp)
 1006f8c:	1002f0c0 	call	1002f0c <__mulsi3>
 1006f90:	d9414d17 	ldw	r5,1332(sp)
 1006f94:	b9800007 	ldb	r6,0(r23)
 1006f98:	d9c15117 	ldw	r7,1348(sp)
 1006f9c:	1145883a 	add	r2,r2,r5
 1006fa0:	113ff404 	addi	r4,r2,-48
 1006fa4:	30bff404 	addi	r2,r6,-48
 1006fa8:	d9814d15 	stw	r6,1332(sp)
 1006fac:	bdc00044 	addi	r23,r23,1
 1006fb0:	80bff42e 	bgeu	r16,r2,1006f84 <___vfprintf_internal_r+0x1250>
 1006fb4:	2027883a 	mov	r19,r4
 1006fb8:	203bdf0e 	bge	r4,zero,1005f38 <___vfprintf_internal_r+0x204>
 1006fbc:	04ffffc4 	movi	r19,-1
 1006fc0:	003bdd06 	br	1005f38 <___vfprintf_internal_r+0x204>
 1006fc4:	d8000405 	stb	zero,16(sp)
 1006fc8:	39800017 	ldw	r6,0(r7)
 1006fcc:	39c00104 	addi	r7,r7,4
 1006fd0:	d9c14015 	stw	r7,1280(sp)
 1006fd4:	d9814115 	stw	r6,1284(sp)
 1006fd8:	3001c926 	beq	r6,zero,1007700 <___vfprintf_internal_r+0x19cc>
 1006fdc:	98000e16 	blt	r19,zero,1007018 <___vfprintf_internal_r+0x12e4>
 1006fe0:	d9014117 	ldw	r4,1284(sp)
 1006fe4:	000b883a 	mov	r5,zero
 1006fe8:	980d883a 	mov	r6,r19
 1006fec:	1009d200 	call	1009d20 <memchr>
 1006ff0:	10025926 	beq	r2,zero,1007958 <___vfprintf_internal_r+0x1c24>
 1006ff4:	d8c14117 	ldw	r3,1284(sp)
 1006ff8:	10cfc83a 	sub	r7,r2,r3
 1006ffc:	99c19e16 	blt	r19,r7,1007678 <___vfprintf_internal_r+0x1944>
 1007000:	d9c14515 	stw	r7,1300(sp)
 1007004:	38000916 	blt	r7,zero,100702c <___vfprintf_internal_r+0x12f8>
 1007008:	d8014615 	stw	zero,1304(sp)
 100700c:	003deb06 	br	10067bc <___vfprintf_internal_r+0xa88>
 1007010:	b8c00007 	ldb	r3,0(r23)
 1007014:	003bc606 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1007018:	d9014117 	ldw	r4,1284(sp)
 100701c:	1005c680 	call	1005c68 <strlen>
 1007020:	d8814515 	stw	r2,1300(sp)
 1007024:	100f883a 	mov	r7,r2
 1007028:	103ff70e 	bge	r2,zero,1007008 <___vfprintf_internal_r+0x12d4>
 100702c:	d8014515 	stw	zero,1300(sp)
 1007030:	d8014615 	stw	zero,1304(sp)
 1007034:	003de106 	br	10067bc <___vfprintf_internal_r+0xa88>
 1007038:	20c03fcc 	andi	r3,r4,255
 100703c:	00800044 	movi	r2,1
 1007040:	18802d26 	beq	r3,r2,10070f8 <___vfprintf_internal_r+0x13c4>
 1007044:	18800e36 	bltu	r3,r2,1007080 <___vfprintf_internal_r+0x134c>
 1007048:	00800084 	movi	r2,2
 100704c:	1880fa26 	beq	r3,r2,1007438 <___vfprintf_internal_r+0x1704>
 1007050:	01004074 	movhi	r4,257
 1007054:	2106e804 	addi	r4,r4,7072
 1007058:	1005c680 	call	1005c68 <strlen>
 100705c:	100f883a 	mov	r7,r2
 1007060:	dcc14515 	stw	r19,1300(sp)
 1007064:	9880010e 	bge	r19,r2,100706c <___vfprintf_internal_r+0x1338>
 1007068:	d8814515 	stw	r2,1300(sp)
 100706c:	00804074 	movhi	r2,257
 1007070:	1086e804 	addi	r2,r2,7072
 1007074:	dcc14615 	stw	r19,1304(sp)
 1007078:	d8814115 	stw	r2,1284(sp)
 100707c:	003dcf06 	br	10067bc <___vfprintf_internal_r+0xa88>
 1007080:	d9401904 	addi	r5,sp,100
 1007084:	dd000f04 	addi	r20,sp,60
 1007088:	d9414115 	stw	r5,1284(sp)
 100708c:	880a977a 	slli	r5,r17,29
 1007090:	d9814117 	ldw	r6,1284(sp)
 1007094:	8004d0fa 	srli	r2,r16,3
 1007098:	8806d0fa 	srli	r3,r17,3
 100709c:	810001cc 	andi	r4,r16,7
 10070a0:	2884b03a 	or	r2,r5,r2
 10070a4:	31bfffc4 	addi	r6,r6,-1
 10070a8:	21000c04 	addi	r4,r4,48
 10070ac:	d9814115 	stw	r6,1284(sp)
 10070b0:	10cab03a 	or	r5,r2,r3
 10070b4:	31000005 	stb	r4,0(r6)
 10070b8:	1021883a 	mov	r16,r2
 10070bc:	1823883a 	mov	r17,r3
 10070c0:	283ff21e 	bne	r5,zero,100708c <___vfprintf_internal_r+0x1358>
 10070c4:	d8c14c17 	ldw	r3,1328(sp)
 10070c8:	1880004c 	andi	r2,r3,1
 10070cc:	1005003a 	cmpeq	r2,r2,zero
 10070d0:	103db31e 	bne	r2,zero,10067a0 <___vfprintf_internal_r+0xa6c>
 10070d4:	20803fcc 	andi	r2,r4,255
 10070d8:	1080201c 	xori	r2,r2,128
 10070dc:	10bfe004 	addi	r2,r2,-128
 10070e0:	00c00c04 	movi	r3,48
 10070e4:	10fdae26 	beq	r2,r3,10067a0 <___vfprintf_internal_r+0xa6c>
 10070e8:	31bfffc4 	addi	r6,r6,-1
 10070ec:	d9814115 	stw	r6,1284(sp)
 10070f0:	30c00005 	stb	r3,0(r6)
 10070f4:	003daa06 	br	10067a0 <___vfprintf_internal_r+0xa6c>
 10070f8:	88800068 	cmpgeui	r2,r17,1
 10070fc:	10002c1e 	bne	r2,zero,10071b0 <___vfprintf_internal_r+0x147c>
 1007100:	8800021e 	bne	r17,zero,100710c <___vfprintf_internal_r+0x13d8>
 1007104:	00800244 	movi	r2,9
 1007108:	14002936 	bltu	r2,r16,10071b0 <___vfprintf_internal_r+0x147c>
 100710c:	d90018c4 	addi	r4,sp,99
 1007110:	dd000f04 	addi	r20,sp,60
 1007114:	d9014115 	stw	r4,1284(sp)
 1007118:	d9014117 	ldw	r4,1284(sp)
 100711c:	80800c04 	addi	r2,r16,48
 1007120:	20800005 	stb	r2,0(r4)
 1007124:	003d9e06 	br	10067a0 <___vfprintf_internal_r+0xa6c>
 1007128:	dc400d17 	ldw	r17,52(sp)
 100712c:	07004074 	movhi	fp,257
 1007130:	e706ef84 	addi	fp,fp,7102
 1007134:	9425883a 	add	r18,r18,r16
 1007138:	8c400044 	addi	r17,r17,1
 100713c:	008001c4 	movi	r2,7
 1007140:	1f000015 	stw	fp,0(r3)
 1007144:	1c000115 	stw	r16,4(r3)
 1007148:	dc800e15 	stw	r18,56(sp)
 100714c:	dc400d15 	stw	r17,52(sp)
 1007150:	147ddc16 	blt	r2,r17,10068c4 <___vfprintf_internal_r+0xb90>
 1007154:	18c00204 	addi	r3,r3,8
 1007158:	003c7406 	br	100632c <___vfprintf_internal_r+0x5f8>
 100715c:	01000084 	movi	r4,2
 1007160:	d8000405 	stb	zero,16(sp)
 1007164:	003d8106 	br	100676c <___vfprintf_internal_r+0xa38>
 1007168:	d9814c17 	ldw	r6,1328(sp)
 100716c:	30c4703a 	and	r2,r6,r3
 1007170:	1005003a 	cmpeq	r2,r2,zero
 1007174:	103cb326 	beq	r2,zero,1006444 <___vfprintf_internal_r+0x710>
 1007178:	d9014117 	ldw	r4,1284(sp)
 100717c:	94800044 	addi	r18,r18,1
 1007180:	8c400044 	addi	r17,r17,1
 1007184:	008001c4 	movi	r2,7
 1007188:	a9000015 	stw	r4,0(r21)
 100718c:	a8c00115 	stw	r3,4(r21)
 1007190:	dc800e15 	stw	r18,56(sp)
 1007194:	dc400d15 	stw	r17,52(sp)
 1007198:	147e6016 	blt	r2,r17,1006b1c <___vfprintf_internal_r+0xde8>
 100719c:	acc00204 	addi	r19,r21,8
 10071a0:	003cd106 	br	10064e8 <___vfprintf_internal_r+0x7b4>
 10071a4:	07004074 	movhi	fp,257
 10071a8:	e706ef84 	addi	fp,fp,7102
 10071ac:	003c4906 	br	10062d4 <___vfprintf_internal_r+0x5a0>
 10071b0:	dd000f04 	addi	r20,sp,60
 10071b4:	dc801904 	addi	r18,sp,100
 10071b8:	8009883a 	mov	r4,r16
 10071bc:	880b883a 	mov	r5,r17
 10071c0:	01800284 	movi	r6,10
 10071c4:	000f883a 	mov	r7,zero
 10071c8:	100c2140 	call	100c214 <__umoddi3>
 10071cc:	12000c04 	addi	r8,r2,48
 10071d0:	94bfffc4 	addi	r18,r18,-1
 10071d4:	8009883a 	mov	r4,r16
 10071d8:	880b883a 	mov	r5,r17
 10071dc:	01800284 	movi	r6,10
 10071e0:	000f883a 	mov	r7,zero
 10071e4:	92000005 	stb	r8,0(r18)
 10071e8:	100bba80 	call	100bba8 <__udivdi3>
 10071ec:	1009883a 	mov	r4,r2
 10071f0:	1021883a 	mov	r16,r2
 10071f4:	18800068 	cmpgeui	r2,r3,1
 10071f8:	1823883a 	mov	r17,r3
 10071fc:	103fee1e 	bne	r2,zero,10071b8 <___vfprintf_internal_r+0x1484>
 1007200:	1800021e 	bne	r3,zero,100720c <___vfprintf_internal_r+0x14d8>
 1007204:	00800244 	movi	r2,9
 1007208:	113feb36 	bltu	r2,r4,10071b8 <___vfprintf_internal_r+0x1484>
 100720c:	94bfffc4 	addi	r18,r18,-1
 1007210:	dc814115 	stw	r18,1284(sp)
 1007214:	003fc006 	br	1007118 <___vfprintf_internal_r+0x13e4>
 1007218:	d9014c17 	ldw	r4,1328(sp)
 100721c:	2080004c 	andi	r2,r4,1
 1007220:	10009a1e 	bne	r2,zero,100748c <___vfprintf_internal_r+0x1758>
 1007224:	d9401904 	addi	r5,sp,100
 1007228:	dd000f04 	addi	r20,sp,60
 100722c:	d9414115 	stw	r5,1284(sp)
 1007230:	003d5b06 	br	10067a0 <___vfprintf_internal_r+0xa6c>
 1007234:	d9014f17 	ldw	r4,1340(sp)
 1007238:	b00b883a 	mov	r5,r22
 100723c:	d9800c04 	addi	r6,sp,48
 1007240:	1005cdc0 	call	1005cdc <__sprint_r>
 1007244:	103c731e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1007248:	dc800e17 	ldw	r18,56(sp)
 100724c:	d8c01904 	addi	r3,sp,100
 1007250:	003cf906 	br	1006638 <___vfprintf_internal_r+0x904>
 1007254:	d8c14c17 	ldw	r3,1328(sp)
 1007258:	1880040c 	andi	r2,r3,16
 100725c:	1000711e 	bne	r2,zero,1007424 <___vfprintf_internal_r+0x16f0>
 1007260:	d9014c17 	ldw	r4,1328(sp)
 1007264:	2080100c 	andi	r2,r4,64
 1007268:	10006e26 	beq	r2,zero,1007424 <___vfprintf_internal_r+0x16f0>
 100726c:	3c00000b 	ldhu	r16,0(r7)
 1007270:	0023883a 	mov	r17,zero
 1007274:	39c00104 	addi	r7,r7,4
 1007278:	d9c14015 	stw	r7,1280(sp)
 100727c:	003efa06 	br	1006e68 <___vfprintf_internal_r+0x1134>
 1007280:	dc400d17 	ldw	r17,52(sp)
 1007284:	07004074 	movhi	fp,257
 1007288:	e706ef84 	addi	fp,fp,7102
 100728c:	9425883a 	add	r18,r18,r16
 1007290:	8c400044 	addi	r17,r17,1
 1007294:	008001c4 	movi	r2,7
 1007298:	1f000015 	stw	fp,0(r3)
 100729c:	1c000115 	stw	r16,4(r3)
 10072a0:	dc800e15 	stw	r18,56(sp)
 10072a4:	dc400d15 	stw	r17,52(sp)
 10072a8:	147d7016 	blt	r2,r17,100686c <___vfprintf_internal_r+0xb38>
 10072ac:	18c00204 	addi	r3,r3,8
 10072b0:	003d7506 	br	1006888 <___vfprintf_internal_r+0xb54>
 10072b4:	dc800e17 	ldw	r18,56(sp)
 10072b8:	dc400d17 	ldw	r17,52(sp)
 10072bc:	07004074 	movhi	fp,257
 10072c0:	e706f384 	addi	fp,fp,7118
 10072c4:	003bba06 	br	10061b0 <___vfprintf_internal_r+0x47c>
 10072c8:	d9014f17 	ldw	r4,1340(sp)
 10072cc:	b00b883a 	mov	r5,r22
 10072d0:	d9800c04 	addi	r6,sp,48
 10072d4:	1005cdc0 	call	1005cdc <__sprint_r>
 10072d8:	103c4e1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10072dc:	dc800e17 	ldw	r18,56(sp)
 10072e0:	d8c01904 	addi	r3,sp,100
 10072e4:	003ce306 	br	1006674 <___vfprintf_internal_r+0x940>
 10072e8:	3c000017 	ldw	r16,0(r7)
 10072ec:	0009883a 	mov	r4,zero
 10072f0:	39c00104 	addi	r7,r7,4
 10072f4:	0023883a 	mov	r17,zero
 10072f8:	d9c14015 	stw	r7,1280(sp)
 10072fc:	d8000405 	stb	zero,16(sp)
 1007300:	003d1a06 	br	100676c <___vfprintf_internal_r+0xa38>
 1007304:	38800017 	ldw	r2,0(r7)
 1007308:	39c00104 	addi	r7,r7,4
 100730c:	d9c14015 	stw	r7,1280(sp)
 1007310:	1023d7fa 	srai	r17,r2,31
 1007314:	1021883a 	mov	r16,r2
 1007318:	003d1206 	br	1006764 <___vfprintf_internal_r+0xa30>
 100731c:	3c000017 	ldw	r16,0(r7)
 1007320:	01000044 	movi	r4,1
 1007324:	39c00104 	addi	r7,r7,4
 1007328:	0023883a 	mov	r17,zero
 100732c:	d9c14015 	stw	r7,1280(sp)
 1007330:	d8000405 	stb	zero,16(sp)
 1007334:	003d0d06 	br	100676c <___vfprintf_internal_r+0xa38>
 1007338:	00804074 	movhi	r2,257
 100733c:	1086ef04 	addi	r2,r2,7100
 1007340:	94800044 	addi	r18,r18,1
 1007344:	8c400044 	addi	r17,r17,1
 1007348:	a8800015 	stw	r2,0(r21)
 100734c:	00c00044 	movi	r3,1
 1007350:	008001c4 	movi	r2,7
 1007354:	a8c00115 	stw	r3,4(r21)
 1007358:	dc800e15 	stw	r18,56(sp)
 100735c:	dc400d15 	stw	r17,52(sp)
 1007360:	1440ca16 	blt	r2,r17,100768c <___vfprintf_internal_r+0x1958>
 1007364:	a8c00204 	addi	r3,r21,8
 1007368:	2000061e 	bne	r4,zero,1007384 <___vfprintf_internal_r+0x1650>
 100736c:	d9414717 	ldw	r5,1308(sp)
 1007370:	2800041e 	bne	r5,zero,1007384 <___vfprintf_internal_r+0x1650>
 1007374:	d9814c17 	ldw	r6,1328(sp)
 1007378:	3080004c 	andi	r2,r6,1
 100737c:	1005003a 	cmpeq	r2,r2,zero
 1007380:	103bea1e 	bne	r2,zero,100632c <___vfprintf_internal_r+0x5f8>
 1007384:	00800044 	movi	r2,1
 1007388:	dc400d17 	ldw	r17,52(sp)
 100738c:	18800115 	stw	r2,4(r3)
 1007390:	d8814917 	ldw	r2,1316(sp)
 1007394:	94800044 	addi	r18,r18,1
 1007398:	8c400044 	addi	r17,r17,1
 100739c:	18800015 	stw	r2,0(r3)
 10073a0:	008001c4 	movi	r2,7
 10073a4:	dc800e15 	stw	r18,56(sp)
 10073a8:	dc400d15 	stw	r17,52(sp)
 10073ac:	1440ca16 	blt	r2,r17,10076d8 <___vfprintf_internal_r+0x19a4>
 10073b0:	18c00204 	addi	r3,r3,8
 10073b4:	0121c83a 	sub	r16,zero,r4
 10073b8:	0400500e 	bge	zero,r16,10074fc <___vfprintf_internal_r+0x17c8>
 10073bc:	00800404 	movi	r2,16
 10073c0:	1400800e 	bge	r2,r16,10075c4 <___vfprintf_internal_r+0x1890>
 10073c4:	1027883a 	mov	r19,r2
 10073c8:	07004074 	movhi	fp,257
 10073cc:	e706ef84 	addi	fp,fp,7102
 10073d0:	050001c4 	movi	r20,7
 10073d4:	00000306 	br	10073e4 <___vfprintf_internal_r+0x16b0>
 10073d8:	18c00204 	addi	r3,r3,8
 10073dc:	843ffc04 	addi	r16,r16,-16
 10073e0:	9c007a0e 	bge	r19,r16,10075cc <___vfprintf_internal_r+0x1898>
 10073e4:	94800404 	addi	r18,r18,16
 10073e8:	8c400044 	addi	r17,r17,1
 10073ec:	1f000015 	stw	fp,0(r3)
 10073f0:	1cc00115 	stw	r19,4(r3)
 10073f4:	dc800e15 	stw	r18,56(sp)
 10073f8:	dc400d15 	stw	r17,52(sp)
 10073fc:	a47ff60e 	bge	r20,r17,10073d8 <___vfprintf_internal_r+0x16a4>
 1007400:	d9014f17 	ldw	r4,1340(sp)
 1007404:	b00b883a 	mov	r5,r22
 1007408:	d9800c04 	addi	r6,sp,48
 100740c:	1005cdc0 	call	1005cdc <__sprint_r>
 1007410:	103c001e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1007414:	dc800e17 	ldw	r18,56(sp)
 1007418:	dc400d17 	ldw	r17,52(sp)
 100741c:	d8c01904 	addi	r3,sp,100
 1007420:	003fee06 	br	10073dc <___vfprintf_internal_r+0x16a8>
 1007424:	3c000017 	ldw	r16,0(r7)
 1007428:	0023883a 	mov	r17,zero
 100742c:	39c00104 	addi	r7,r7,4
 1007430:	d9c14015 	stw	r7,1280(sp)
 1007434:	003e8c06 	br	1006e68 <___vfprintf_internal_r+0x1134>
 1007438:	d9401904 	addi	r5,sp,100
 100743c:	dd000f04 	addi	r20,sp,60
 1007440:	d9414115 	stw	r5,1284(sp)
 1007444:	d9814417 	ldw	r6,1296(sp)
 1007448:	880a973a 	slli	r5,r17,28
 100744c:	8004d13a 	srli	r2,r16,4
 1007450:	810003cc 	andi	r4,r16,15
 1007454:	3109883a 	add	r4,r6,r4
 1007458:	2884b03a 	or	r2,r5,r2
 100745c:	21400003 	ldbu	r5,0(r4)
 1007460:	d9014117 	ldw	r4,1284(sp)
 1007464:	8806d13a 	srli	r3,r17,4
 1007468:	1021883a 	mov	r16,r2
 100746c:	213fffc4 	addi	r4,r4,-1
 1007470:	d9014115 	stw	r4,1284(sp)
 1007474:	d9814117 	ldw	r6,1284(sp)
 1007478:	10c8b03a 	or	r4,r2,r3
 100747c:	1823883a 	mov	r17,r3
 1007480:	31400005 	stb	r5,0(r6)
 1007484:	203fef1e 	bne	r4,zero,1007444 <___vfprintf_internal_r+0x1710>
 1007488:	003cc506 	br	10067a0 <___vfprintf_internal_r+0xa6c>
 100748c:	00800c04 	movi	r2,48
 1007490:	d98018c4 	addi	r6,sp,99
 1007494:	dd000f04 	addi	r20,sp,60
 1007498:	d88018c5 	stb	r2,99(sp)
 100749c:	d9814115 	stw	r6,1284(sp)
 10074a0:	003cbf06 	br	10067a0 <___vfprintf_internal_r+0xa6c>
 10074a4:	dc400d17 	ldw	r17,52(sp)
 10074a8:	07004074 	movhi	fp,257
 10074ac:	e706f384 	addi	fp,fp,7118
 10074b0:	003bc106 	br	10063b8 <___vfprintf_internal_r+0x684>
 10074b4:	d9414c17 	ldw	r5,1328(sp)
 10074b8:	2880040c 	andi	r2,r5,16
 10074bc:	10007c26 	beq	r2,zero,10076b0 <___vfprintf_internal_r+0x197c>
 10074c0:	38800017 	ldw	r2,0(r7)
 10074c4:	39c00104 	addi	r7,r7,4
 10074c8:	d9c14015 	stw	r7,1280(sp)
 10074cc:	d9814b17 	ldw	r6,1324(sp)
 10074d0:	d9c14017 	ldw	r7,1280(sp)
 10074d4:	11800015 	stw	r6,0(r2)
 10074d8:	003a7206 	br	1005ea4 <___vfprintf_internal_r+0x170>
 10074dc:	d9014f17 	ldw	r4,1340(sp)
 10074e0:	b00b883a 	mov	r5,r22
 10074e4:	d9800c04 	addi	r6,sp,48
 10074e8:	1005cdc0 	call	1005cdc <__sprint_r>
 10074ec:	103bc91e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10074f0:	dc800e17 	ldw	r18,56(sp)
 10074f4:	dc400d17 	ldw	r17,52(sp)
 10074f8:	d8c01904 	addi	r3,sp,100
 10074fc:	d9014717 	ldw	r4,1308(sp)
 1007500:	d9414117 	ldw	r5,1284(sp)
 1007504:	8c400044 	addi	r17,r17,1
 1007508:	9125883a 	add	r18,r18,r4
 100750c:	008001c4 	movi	r2,7
 1007510:	19400015 	stw	r5,0(r3)
 1007514:	19000115 	stw	r4,4(r3)
 1007518:	dc800e15 	stw	r18,56(sp)
 100751c:	dc400d15 	stw	r17,52(sp)
 1007520:	147ce816 	blt	r2,r17,10068c4 <___vfprintf_internal_r+0xb90>
 1007524:	18c00204 	addi	r3,r3,8
 1007528:	003b8006 	br	100632c <___vfprintf_internal_r+0x5f8>
 100752c:	38c00017 	ldw	r3,0(r7)
 1007530:	39000204 	addi	r4,r7,8
 1007534:	d9014015 	stw	r4,1280(sp)
 1007538:	d8c14215 	stw	r3,1288(sp)
 100753c:	39c00117 	ldw	r7,4(r7)
 1007540:	d9c14315 	stw	r7,1292(sp)
 1007544:	003e1a06 	br	1006db0 <___vfprintf_internal_r+0x107c>
 1007548:	0005883a 	mov	r2,zero
 100754c:	1409c83a 	sub	r4,r2,r16
 1007550:	1105803a 	cmpltu	r2,r2,r4
 1007554:	044bc83a 	sub	r5,zero,r17
 1007558:	2885c83a 	sub	r2,r5,r2
 100755c:	2021883a 	mov	r16,r4
 1007560:	1023883a 	mov	r17,r2
 1007564:	01000044 	movi	r4,1
 1007568:	00800b44 	movi	r2,45
 100756c:	d8800405 	stb	r2,16(sp)
 1007570:	003c7e06 	br	100676c <___vfprintf_internal_r+0xa38>
 1007574:	d9014f17 	ldw	r4,1340(sp)
 1007578:	b00b883a 	mov	r5,r22
 100757c:	d9800c04 	addi	r6,sp,48
 1007580:	1005cdc0 	call	1005cdc <__sprint_r>
 1007584:	103ba31e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1007588:	dc800e17 	ldw	r18,56(sp)
 100758c:	dc400d17 	ldw	r17,52(sp)
 1007590:	d9000517 	ldw	r4,20(sp)
 1007594:	d9401904 	addi	r5,sp,100
 1007598:	003da106 	br	1006c20 <___vfprintf_internal_r+0xeec>
 100759c:	d9014f17 	ldw	r4,1340(sp)
 10075a0:	b00b883a 	mov	r5,r22
 10075a4:	d9800c04 	addi	r6,sp,48
 10075a8:	1005cdc0 	call	1005cdc <__sprint_r>
 10075ac:	103b991e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10075b0:	dc800e17 	ldw	r18,56(sp)
 10075b4:	dc400d17 	ldw	r17,52(sp)
 10075b8:	d9000517 	ldw	r4,20(sp)
 10075bc:	d8c01904 	addi	r3,sp,100
 10075c0:	003d8b06 	br	1006bf0 <___vfprintf_internal_r+0xebc>
 10075c4:	07004074 	movhi	fp,257
 10075c8:	e706ef84 	addi	fp,fp,7102
 10075cc:	9425883a 	add	r18,r18,r16
 10075d0:	8c400044 	addi	r17,r17,1
 10075d4:	008001c4 	movi	r2,7
 10075d8:	1f000015 	stw	fp,0(r3)
 10075dc:	1c000115 	stw	r16,4(r3)
 10075e0:	dc800e15 	stw	r18,56(sp)
 10075e4:	dc400d15 	stw	r17,52(sp)
 10075e8:	147fbc16 	blt	r2,r17,10074dc <___vfprintf_internal_r+0x17a8>
 10075ec:	18c00204 	addi	r3,r3,8
 10075f0:	003fc206 	br	10074fc <___vfprintf_internal_r+0x17c8>
 10075f4:	d9014f17 	ldw	r4,1340(sp)
 10075f8:	b00b883a 	mov	r5,r22
 10075fc:	d9800c04 	addi	r6,sp,48
 1007600:	1005cdc0 	call	1005cdc <__sprint_r>
 1007604:	103b831e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1007608:	dc800e17 	ldw	r18,56(sp)
 100760c:	d9000517 	ldw	r4,20(sp)
 1007610:	d8c01904 	addi	r3,sp,100
 1007614:	003cfc06 	br	1006a08 <___vfprintf_internal_r+0xcd4>
 1007618:	07004074 	movhi	fp,257
 100761c:	e706ef84 	addi	fp,fp,7102
 1007620:	003bde06 	br	100659c <___vfprintf_internal_r+0x868>
 1007624:	00804074 	movhi	r2,257
 1007628:	1086de04 	addi	r2,r2,7032
 100762c:	d8814115 	stw	r2,1284(sp)
 1007630:	003def06 	br	1006df0 <___vfprintf_internal_r+0x10bc>
 1007634:	d9014217 	ldw	r4,1288(sp)
 1007638:	d9414317 	ldw	r5,1292(sp)
 100763c:	100b8a80 	call	100b8a8 <__isnand>
 1007640:	10003926 	beq	r2,zero,1007728 <___vfprintf_internal_r+0x19f4>
 1007644:	d9414d17 	ldw	r5,1332(sp)
 1007648:	008011c4 	movi	r2,71
 100764c:	1140ce16 	blt	r2,r5,1007988 <___vfprintf_internal_r+0x1c54>
 1007650:	01804074 	movhi	r6,257
 1007654:	3186df04 	addi	r6,r6,7036
 1007658:	d9814115 	stw	r6,1284(sp)
 100765c:	003de406 	br	1006df0 <___vfprintf_internal_r+0x10bc>
 1007660:	d9014c17 	ldw	r4,1328(sp)
 1007664:	bdc00044 	addi	r23,r23,1
 1007668:	b8c00007 	ldb	r3,0(r23)
 100766c:	21000814 	ori	r4,r4,32
 1007670:	d9014c15 	stw	r4,1328(sp)
 1007674:	003a2e06 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1007678:	dcc14515 	stw	r19,1300(sp)
 100767c:	98011016 	blt	r19,zero,1007ac0 <___vfprintf_internal_r+0x1d8c>
 1007680:	980f883a 	mov	r7,r19
 1007684:	d8014615 	stw	zero,1304(sp)
 1007688:	003c4c06 	br	10067bc <___vfprintf_internal_r+0xa88>
 100768c:	d9014f17 	ldw	r4,1340(sp)
 1007690:	b00b883a 	mov	r5,r22
 1007694:	d9800c04 	addi	r6,sp,48
 1007698:	1005cdc0 	call	1005cdc <__sprint_r>
 100769c:	103b5d1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10076a0:	dc800e17 	ldw	r18,56(sp)
 10076a4:	d9000517 	ldw	r4,20(sp)
 10076a8:	d8c01904 	addi	r3,sp,100
 10076ac:	003f2e06 	br	1007368 <___vfprintf_internal_r+0x1634>
 10076b0:	d8c14c17 	ldw	r3,1328(sp)
 10076b4:	1880100c 	andi	r2,r3,64
 10076b8:	1000a026 	beq	r2,zero,100793c <___vfprintf_internal_r+0x1c08>
 10076bc:	38800017 	ldw	r2,0(r7)
 10076c0:	39c00104 	addi	r7,r7,4
 10076c4:	d9c14015 	stw	r7,1280(sp)
 10076c8:	d9014b17 	ldw	r4,1324(sp)
 10076cc:	d9c14017 	ldw	r7,1280(sp)
 10076d0:	1100000d 	sth	r4,0(r2)
 10076d4:	0039f306 	br	1005ea4 <___vfprintf_internal_r+0x170>
 10076d8:	d9014f17 	ldw	r4,1340(sp)
 10076dc:	b00b883a 	mov	r5,r22
 10076e0:	d9800c04 	addi	r6,sp,48
 10076e4:	1005cdc0 	call	1005cdc <__sprint_r>
 10076e8:	103b4a1e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 10076ec:	dc800e17 	ldw	r18,56(sp)
 10076f0:	dc400d17 	ldw	r17,52(sp)
 10076f4:	d9000517 	ldw	r4,20(sp)
 10076f8:	d8c01904 	addi	r3,sp,100
 10076fc:	003f2d06 	br	10073b4 <___vfprintf_internal_r+0x1680>
 1007700:	00800184 	movi	r2,6
 1007704:	14c09a36 	bltu	r2,r19,1007970 <___vfprintf_internal_r+0x1c3c>
 1007708:	dcc14515 	stw	r19,1300(sp)
 100770c:	9800010e 	bge	r19,zero,1007714 <___vfprintf_internal_r+0x19e0>
 1007710:	d8014515 	stw	zero,1300(sp)
 1007714:	00804074 	movhi	r2,257
 1007718:	1086e104 	addi	r2,r2,7044
 100771c:	980f883a 	mov	r7,r19
 1007720:	d8814115 	stw	r2,1284(sp)
 1007724:	003a7206 	br	10060f0 <___vfprintf_internal_r+0x3bc>
 1007728:	00bfffc4 	movi	r2,-1
 100772c:	9880e226 	beq	r19,r2,1007ab8 <___vfprintf_internal_r+0x1d84>
 1007730:	d9414d17 	ldw	r5,1332(sp)
 1007734:	008019c4 	movi	r2,103
 1007738:	2880dc26 	beq	r5,r2,1007aac <___vfprintf_internal_r+0x1d78>
 100773c:	008011c4 	movi	r2,71
 1007740:	2880da26 	beq	r5,r2,1007aac <___vfprintf_internal_r+0x1d78>
 1007744:	d9414c17 	ldw	r5,1328(sp)
 1007748:	d9014317 	ldw	r4,1292(sp)
 100774c:	d9814217 	ldw	r6,1288(sp)
 1007750:	29404014 	ori	r5,r5,256
 1007754:	d9414c15 	stw	r5,1328(sp)
 1007758:	2000cc16 	blt	r4,zero,1007a8c <___vfprintf_internal_r+0x1d58>
 100775c:	3021883a 	mov	r16,r6
 1007760:	2023883a 	mov	r17,r4
 1007764:	0039883a 	mov	fp,zero
 1007768:	d9414d17 	ldw	r5,1332(sp)
 100776c:	00801984 	movi	r2,102
 1007770:	2880b726 	beq	r5,r2,1007a50 <___vfprintf_internal_r+0x1d1c>
 1007774:	00801184 	movi	r2,70
 1007778:	2880b526 	beq	r5,r2,1007a50 <___vfprintf_internal_r+0x1d1c>
 100777c:	00801944 	movi	r2,101
 1007780:	2880c826 	beq	r5,r2,1007aa4 <___vfprintf_internal_r+0x1d70>
 1007784:	00801144 	movi	r2,69
 1007788:	2880c626 	beq	r5,r2,1007aa4 <___vfprintf_internal_r+0x1d70>
 100778c:	9829883a 	mov	r20,r19
 1007790:	d9014f17 	ldw	r4,1340(sp)
 1007794:	d8800504 	addi	r2,sp,20
 1007798:	880d883a 	mov	r6,r17
 100779c:	d8800115 	stw	r2,4(sp)
 10077a0:	d8c00604 	addi	r3,sp,24
 10077a4:	d8800704 	addi	r2,sp,28
 10077a8:	800b883a 	mov	r5,r16
 10077ac:	01c00084 	movi	r7,2
 10077b0:	d8c00215 	stw	r3,8(sp)
 10077b4:	d8800315 	stw	r2,12(sp)
 10077b8:	dd000015 	stw	r20,0(sp)
 10077bc:	10080840 	call	1008084 <_dtoa_r>
 10077c0:	d9814d17 	ldw	r6,1332(sp)
 10077c4:	d8814115 	stw	r2,1284(sp)
 10077c8:	008019c4 	movi	r2,103
 10077cc:	30809526 	beq	r6,r2,1007a24 <___vfprintf_internal_r+0x1cf0>
 10077d0:	d8c14d17 	ldw	r3,1332(sp)
 10077d4:	008011c4 	movi	r2,71
 10077d8:	18809226 	beq	r3,r2,1007a24 <___vfprintf_internal_r+0x1cf0>
 10077dc:	d9414117 	ldw	r5,1284(sp)
 10077e0:	d9814d17 	ldw	r6,1332(sp)
 10077e4:	00801984 	movi	r2,102
 10077e8:	2d25883a 	add	r18,r5,r20
 10077ec:	30808626 	beq	r6,r2,1007a08 <___vfprintf_internal_r+0x1cd4>
 10077f0:	00801184 	movi	r2,70
 10077f4:	30808426 	beq	r6,r2,1007a08 <___vfprintf_internal_r+0x1cd4>
 10077f8:	000d883a 	mov	r6,zero
 10077fc:	000f883a 	mov	r7,zero
 1007800:	880b883a 	mov	r5,r17
 1007804:	8009883a 	mov	r4,r16
 1007808:	100d3940 	call	100d394 <__eqdf2>
 100780c:	1000751e 	bne	r2,zero,10079e4 <___vfprintf_internal_r+0x1cb0>
 1007810:	9005883a 	mov	r2,r18
 1007814:	dc800715 	stw	r18,28(sp)
 1007818:	d9014117 	ldw	r4,1284(sp)
 100781c:	d9414d17 	ldw	r5,1332(sp)
 1007820:	00c019c4 	movi	r3,103
 1007824:	1125c83a 	sub	r18,r2,r4
 1007828:	28c06826 	beq	r5,r3,10079cc <___vfprintf_internal_r+0x1c98>
 100782c:	008011c4 	movi	r2,71
 1007830:	28806626 	beq	r5,r2,10079cc <___vfprintf_internal_r+0x1c98>
 1007834:	d9000517 	ldw	r4,20(sp)
 1007838:	d8c14d17 	ldw	r3,1332(sp)
 100783c:	00801944 	movi	r2,101
 1007840:	10c05516 	blt	r2,r3,1007998 <___vfprintf_internal_r+0x1c64>
 1007844:	213fffc4 	addi	r4,r4,-1
 1007848:	d9000515 	stw	r4,20(sp)
 100784c:	d8c00805 	stb	r3,32(sp)
 1007850:	2021883a 	mov	r16,r4
 1007854:	2000c116 	blt	r4,zero,1007b5c <___vfprintf_internal_r+0x1e28>
 1007858:	00800ac4 	movi	r2,43
 100785c:	d8800845 	stb	r2,33(sp)
 1007860:	00800244 	movi	r2,9
 1007864:	1400af0e 	bge	r2,r16,1007b24 <___vfprintf_internal_r+0x1df0>
 1007868:	1027883a 	mov	r19,r2
 100786c:	dc400b84 	addi	r17,sp,46
 1007870:	8009883a 	mov	r4,r16
 1007874:	01400284 	movi	r5,10
 1007878:	100da7c0 	call	100da7c <__modsi3>
 100787c:	10800c04 	addi	r2,r2,48
 1007880:	8c7fffc4 	addi	r17,r17,-1
 1007884:	8009883a 	mov	r4,r16
 1007888:	01400284 	movi	r5,10
 100788c:	88800005 	stb	r2,0(r17)
 1007890:	100da1c0 	call	100da1c <__divsi3>
 1007894:	1021883a 	mov	r16,r2
 1007898:	98bff516 	blt	r19,r2,1007870 <___vfprintf_internal_r+0x1b3c>
 100789c:	10c00c04 	addi	r3,r2,48
 10078a0:	d88009c4 	addi	r2,sp,39
 10078a4:	108001c4 	addi	r2,r2,7
 10078a8:	897fffc4 	addi	r5,r17,-1
 10078ac:	88ffffc5 	stb	r3,-1(r17)
 10078b0:	2880a72e 	bgeu	r5,r2,1007b50 <___vfprintf_internal_r+0x1e1c>
 10078b4:	1009883a 	mov	r4,r2
 10078b8:	d9800804 	addi	r6,sp,32
 10078bc:	d8c00884 	addi	r3,sp,34
 10078c0:	28800003 	ldbu	r2,0(r5)
 10078c4:	29400044 	addi	r5,r5,1
 10078c8:	18800005 	stb	r2,0(r3)
 10078cc:	18c00044 	addi	r3,r3,1
 10078d0:	293ffb36 	bltu	r5,r4,10078c0 <___vfprintf_internal_r+0x1b8c>
 10078d4:	1987c83a 	sub	r3,r3,r6
 10078d8:	00800044 	movi	r2,1
 10078dc:	d8c14815 	stw	r3,1312(sp)
 10078e0:	90cf883a 	add	r7,r18,r3
 10078e4:	1480960e 	bge	r2,r18,1007b40 <___vfprintf_internal_r+0x1e0c>
 10078e8:	39c00044 	addi	r7,r7,1
 10078ec:	d9c14515 	stw	r7,1300(sp)
 10078f0:	38003416 	blt	r7,zero,10079c4 <___vfprintf_internal_r+0x1c90>
 10078f4:	e0803fcc 	andi	r2,fp,255
 10078f8:	1080201c 	xori	r2,r2,128
 10078fc:	10bfe004 	addi	r2,r2,-128
 1007900:	10004e26 	beq	r2,zero,1007a3c <___vfprintf_internal_r+0x1d08>
 1007904:	00800b44 	movi	r2,45
 1007908:	dc814715 	stw	r18,1308(sp)
 100790c:	d8014615 	stw	zero,1304(sp)
 1007910:	d8800405 	stb	r2,16(sp)
 1007914:	003bab06 	br	10067c4 <___vfprintf_internal_r+0xa90>
 1007918:	00800b44 	movi	r2,45
 100791c:	d8800405 	stb	r2,16(sp)
 1007920:	003d2d06 	br	1006dd8 <___vfprintf_internal_r+0x10a4>
 1007924:	d9014f17 	ldw	r4,1340(sp)
 1007928:	b00b883a 	mov	r5,r22
 100792c:	d9800c04 	addi	r6,sp,48
 1007930:	1005cdc0 	call	1005cdc <__sprint_r>
 1007934:	103ab71e 	bne	r2,zero,1006414 <___vfprintf_internal_r+0x6e0>
 1007938:	003ab506 	br	1006410 <___vfprintf_internal_r+0x6dc>
 100793c:	38800017 	ldw	r2,0(r7)
 1007940:	39c00104 	addi	r7,r7,4
 1007944:	d9c14015 	stw	r7,1280(sp)
 1007948:	d9414b17 	ldw	r5,1324(sp)
 100794c:	d9c14017 	ldw	r7,1280(sp)
 1007950:	11400015 	stw	r5,0(r2)
 1007954:	00395306 	br	1005ea4 <___vfprintf_internal_r+0x170>
 1007958:	980f883a 	mov	r7,r19
 100795c:	dcc14515 	stw	r19,1300(sp)
 1007960:	d8014615 	stw	zero,1304(sp)
 1007964:	003b9506 	br	10067bc <___vfprintf_internal_r+0xa88>
 1007968:	0027883a 	mov	r19,zero
 100796c:	00397206 	br	1005f38 <___vfprintf_internal_r+0x204>
 1007970:	00c04074 	movhi	r3,257
 1007974:	18c6e104 	addi	r3,r3,7044
 1007978:	100f883a 	mov	r7,r2
 100797c:	d8814515 	stw	r2,1300(sp)
 1007980:	d8c14115 	stw	r3,1284(sp)
 1007984:	0039da06 	br	10060f0 <___vfprintf_internal_r+0x3bc>
 1007988:	00804074 	movhi	r2,257
 100798c:	1086e004 	addi	r2,r2,7040
 1007990:	d8814115 	stw	r2,1284(sp)
 1007994:	003d1606 	br	1006df0 <___vfprintf_internal_r+0x10bc>
 1007998:	d9414d17 	ldw	r5,1332(sp)
 100799c:	00801984 	movi	r2,102
 10079a0:	28804926 	beq	r5,r2,1007ac8 <___vfprintf_internal_r+0x1d94>
 10079a4:	200f883a 	mov	r7,r4
 10079a8:	24805716 	blt	r4,r18,1007b08 <___vfprintf_internal_r+0x1dd4>
 10079ac:	d9414c17 	ldw	r5,1328(sp)
 10079b0:	2880004c 	andi	r2,r5,1
 10079b4:	10000126 	beq	r2,zero,10079bc <___vfprintf_internal_r+0x1c88>
 10079b8:	21c00044 	addi	r7,r4,1
 10079bc:	d9c14515 	stw	r7,1300(sp)
 10079c0:	383fcc0e 	bge	r7,zero,10078f4 <___vfprintf_internal_r+0x1bc0>
 10079c4:	d8014515 	stw	zero,1300(sp)
 10079c8:	003fca06 	br	10078f4 <___vfprintf_internal_r+0x1bc0>
 10079cc:	d9000517 	ldw	r4,20(sp)
 10079d0:	00bfff04 	movi	r2,-4
 10079d4:	1100480e 	bge	r2,r4,1007af8 <___vfprintf_internal_r+0x1dc4>
 10079d8:	99004716 	blt	r19,r4,1007af8 <___vfprintf_internal_r+0x1dc4>
 10079dc:	d8c14d15 	stw	r3,1332(sp)
 10079e0:	003ff006 	br	10079a4 <___vfprintf_internal_r+0x1c70>
 10079e4:	d8800717 	ldw	r2,28(sp)
 10079e8:	14bf8b2e 	bgeu	r2,r18,1007818 <___vfprintf_internal_r+0x1ae4>
 10079ec:	9007883a 	mov	r3,r18
 10079f0:	01000c04 	movi	r4,48
 10079f4:	11000005 	stb	r4,0(r2)
 10079f8:	10800044 	addi	r2,r2,1
 10079fc:	d8800715 	stw	r2,28(sp)
 1007a00:	18bffc1e 	bne	r3,r2,10079f4 <___vfprintf_internal_r+0x1cc0>
 1007a04:	003f8406 	br	1007818 <___vfprintf_internal_r+0x1ae4>
 1007a08:	d8814117 	ldw	r2,1284(sp)
 1007a0c:	10c00007 	ldb	r3,0(r2)
 1007a10:	00800c04 	movi	r2,48
 1007a14:	18805b26 	beq	r3,r2,1007b84 <___vfprintf_internal_r+0x1e50>
 1007a18:	d9000517 	ldw	r4,20(sp)
 1007a1c:	9125883a 	add	r18,r18,r4
 1007a20:	003f7506 	br	10077f8 <___vfprintf_internal_r+0x1ac4>
 1007a24:	d9014c17 	ldw	r4,1328(sp)
 1007a28:	2080004c 	andi	r2,r4,1
 1007a2c:	1005003a 	cmpeq	r2,r2,zero
 1007a30:	103f6a26 	beq	r2,zero,10077dc <___vfprintf_internal_r+0x1aa8>
 1007a34:	d8800717 	ldw	r2,28(sp)
 1007a38:	003f7706 	br	1007818 <___vfprintf_internal_r+0x1ae4>
 1007a3c:	d9c14515 	stw	r7,1300(sp)
 1007a40:	38004d16 	blt	r7,zero,1007b78 <___vfprintf_internal_r+0x1e44>
 1007a44:	dc814715 	stw	r18,1308(sp)
 1007a48:	d8014615 	stw	zero,1304(sp)
 1007a4c:	003b5b06 	br	10067bc <___vfprintf_internal_r+0xa88>
 1007a50:	d9014f17 	ldw	r4,1340(sp)
 1007a54:	d8800504 	addi	r2,sp,20
 1007a58:	d8800115 	stw	r2,4(sp)
 1007a5c:	d8c00604 	addi	r3,sp,24
 1007a60:	d8800704 	addi	r2,sp,28
 1007a64:	800b883a 	mov	r5,r16
 1007a68:	880d883a 	mov	r6,r17
 1007a6c:	01c000c4 	movi	r7,3
 1007a70:	d8c00215 	stw	r3,8(sp)
 1007a74:	d8800315 	stw	r2,12(sp)
 1007a78:	dcc00015 	stw	r19,0(sp)
 1007a7c:	9829883a 	mov	r20,r19
 1007a80:	10080840 	call	1008084 <_dtoa_r>
 1007a84:	d8814115 	stw	r2,1284(sp)
 1007a88:	003f5106 	br	10077d0 <___vfprintf_internal_r+0x1a9c>
 1007a8c:	d8c14217 	ldw	r3,1288(sp)
 1007a90:	d9014317 	ldw	r4,1292(sp)
 1007a94:	07000b44 	movi	fp,45
 1007a98:	1821883a 	mov	r16,r3
 1007a9c:	2460003c 	xorhi	r17,r4,32768
 1007aa0:	003f3106 	br	1007768 <___vfprintf_internal_r+0x1a34>
 1007aa4:	9d000044 	addi	r20,r19,1
 1007aa8:	003f3906 	br	1007790 <___vfprintf_internal_r+0x1a5c>
 1007aac:	983f251e 	bne	r19,zero,1007744 <___vfprintf_internal_r+0x1a10>
 1007ab0:	04c00044 	movi	r19,1
 1007ab4:	003f2306 	br	1007744 <___vfprintf_internal_r+0x1a10>
 1007ab8:	04c00184 	movi	r19,6
 1007abc:	003f2106 	br	1007744 <___vfprintf_internal_r+0x1a10>
 1007ac0:	d8014515 	stw	zero,1300(sp)
 1007ac4:	003eee06 	br	1007680 <___vfprintf_internal_r+0x194c>
 1007ac8:	200f883a 	mov	r7,r4
 1007acc:	0100370e 	bge	zero,r4,1007bac <___vfprintf_internal_r+0x1e78>
 1007ad0:	9800031e 	bne	r19,zero,1007ae0 <___vfprintf_internal_r+0x1dac>
 1007ad4:	d9814c17 	ldw	r6,1328(sp)
 1007ad8:	3080004c 	andi	r2,r6,1
 1007adc:	103fb726 	beq	r2,zero,10079bc <___vfprintf_internal_r+0x1c88>
 1007ae0:	20800044 	addi	r2,r4,1
 1007ae4:	98a7883a 	add	r19,r19,r2
 1007ae8:	dcc14515 	stw	r19,1300(sp)
 1007aec:	980f883a 	mov	r7,r19
 1007af0:	983f800e 	bge	r19,zero,10078f4 <___vfprintf_internal_r+0x1bc0>
 1007af4:	003fb306 	br	10079c4 <___vfprintf_internal_r+0x1c90>
 1007af8:	d9814d17 	ldw	r6,1332(sp)
 1007afc:	31bfff84 	addi	r6,r6,-2
 1007b00:	d9814d15 	stw	r6,1332(sp)
 1007b04:	003f4c06 	br	1007838 <___vfprintf_internal_r+0x1b04>
 1007b08:	0100180e 	bge	zero,r4,1007b6c <___vfprintf_internal_r+0x1e38>
 1007b0c:	00800044 	movi	r2,1
 1007b10:	1485883a 	add	r2,r2,r18
 1007b14:	d8814515 	stw	r2,1300(sp)
 1007b18:	100f883a 	mov	r7,r2
 1007b1c:	103f750e 	bge	r2,zero,10078f4 <___vfprintf_internal_r+0x1bc0>
 1007b20:	003fa806 	br	10079c4 <___vfprintf_internal_r+0x1c90>
 1007b24:	80c00c04 	addi	r3,r16,48
 1007b28:	00800c04 	movi	r2,48
 1007b2c:	d8c008c5 	stb	r3,35(sp)
 1007b30:	d9800804 	addi	r6,sp,32
 1007b34:	d8c00904 	addi	r3,sp,36
 1007b38:	d8800885 	stb	r2,34(sp)
 1007b3c:	003f6506 	br	10078d4 <___vfprintf_internal_r+0x1ba0>
 1007b40:	d9014c17 	ldw	r4,1328(sp)
 1007b44:	2084703a 	and	r2,r4,r2
 1007b48:	103f9c26 	beq	r2,zero,10079bc <___vfprintf_internal_r+0x1c88>
 1007b4c:	003f6606 	br	10078e8 <___vfprintf_internal_r+0x1bb4>
 1007b50:	d9800804 	addi	r6,sp,32
 1007b54:	d8c00884 	addi	r3,sp,34
 1007b58:	003f5e06 	br	10078d4 <___vfprintf_internal_r+0x1ba0>
 1007b5c:	00800b44 	movi	r2,45
 1007b60:	0121c83a 	sub	r16,zero,r4
 1007b64:	d8800845 	stb	r2,33(sp)
 1007b68:	003f3d06 	br	1007860 <___vfprintf_internal_r+0x1b2c>
 1007b6c:	00800084 	movi	r2,2
 1007b70:	1105c83a 	sub	r2,r2,r4
 1007b74:	003fe606 	br	1007b10 <___vfprintf_internal_r+0x1ddc>
 1007b78:	d8014515 	stw	zero,1300(sp)
 1007b7c:	dc814715 	stw	r18,1308(sp)
 1007b80:	003fb106 	br	1007a48 <___vfprintf_internal_r+0x1d14>
 1007b84:	000d883a 	mov	r6,zero
 1007b88:	000f883a 	mov	r7,zero
 1007b8c:	8009883a 	mov	r4,r16
 1007b90:	880b883a 	mov	r5,r17
 1007b94:	100d41c0 	call	100d41c <__nedf2>
 1007b98:	103f9f26 	beq	r2,zero,1007a18 <___vfprintf_internal_r+0x1ce4>
 1007b9c:	00800044 	movi	r2,1
 1007ba0:	1509c83a 	sub	r4,r2,r20
 1007ba4:	d9000515 	stw	r4,20(sp)
 1007ba8:	003f9b06 	br	1007a18 <___vfprintf_internal_r+0x1ce4>
 1007bac:	98000d1e 	bne	r19,zero,1007be4 <___vfprintf_internal_r+0x1eb0>
 1007bb0:	d8c14c17 	ldw	r3,1328(sp)
 1007bb4:	1880004c 	andi	r2,r3,1
 1007bb8:	10000a1e 	bne	r2,zero,1007be4 <___vfprintf_internal_r+0x1eb0>
 1007bbc:	01000044 	movi	r4,1
 1007bc0:	200f883a 	mov	r7,r4
 1007bc4:	d9014515 	stw	r4,1300(sp)
 1007bc8:	003f4a06 	br	10078f4 <___vfprintf_internal_r+0x1bc0>
 1007bcc:	3cc00017 	ldw	r19,0(r7)
 1007bd0:	39c00104 	addi	r7,r7,4
 1007bd4:	983d0e0e 	bge	r19,zero,1007010 <___vfprintf_internal_r+0x12dc>
 1007bd8:	b8c00007 	ldb	r3,0(r23)
 1007bdc:	04ffffc4 	movi	r19,-1
 1007be0:	0038d306 	br	1005f30 <___vfprintf_internal_r+0x1fc>
 1007be4:	9cc00084 	addi	r19,r19,2
 1007be8:	dcc14515 	stw	r19,1300(sp)
 1007bec:	980f883a 	mov	r7,r19
 1007bf0:	983f400e 	bge	r19,zero,10078f4 <___vfprintf_internal_r+0x1bc0>
 1007bf4:	003f7306 	br	10079c4 <___vfprintf_internal_r+0x1c90>

01007bf8 <__vfprintf_internal>:
 1007bf8:	00804074 	movhi	r2,257
 1007bfc:	108e6a04 	addi	r2,r2,14760
 1007c00:	2013883a 	mov	r9,r4
 1007c04:	11000017 	ldw	r4,0(r2)
 1007c08:	2805883a 	mov	r2,r5
 1007c0c:	300f883a 	mov	r7,r6
 1007c10:	480b883a 	mov	r5,r9
 1007c14:	100d883a 	mov	r6,r2
 1007c18:	1005d341 	jmpi	1005d34 <___vfprintf_internal_r>

01007c1c <_write_r>:
 1007c1c:	defffd04 	addi	sp,sp,-12
 1007c20:	dc000015 	stw	r16,0(sp)
 1007c24:	04004074 	movhi	r16,257
 1007c28:	84155304 	addi	r16,r16,21836
 1007c2c:	dc400115 	stw	r17,4(sp)
 1007c30:	80000015 	stw	zero,0(r16)
 1007c34:	2023883a 	mov	r17,r4
 1007c38:	2809883a 	mov	r4,r5
 1007c3c:	300b883a 	mov	r5,r6
 1007c40:	380d883a 	mov	r6,r7
 1007c44:	dfc00215 	stw	ra,8(sp)
 1007c48:	100f0340 	call	100f034 <write>
 1007c4c:	1007883a 	mov	r3,r2
 1007c50:	00bfffc4 	movi	r2,-1
 1007c54:	18800626 	beq	r3,r2,1007c70 <_write_r+0x54>
 1007c58:	1805883a 	mov	r2,r3
 1007c5c:	dfc00217 	ldw	ra,8(sp)
 1007c60:	dc400117 	ldw	r17,4(sp)
 1007c64:	dc000017 	ldw	r16,0(sp)
 1007c68:	dec00304 	addi	sp,sp,12
 1007c6c:	f800283a 	ret
 1007c70:	80800017 	ldw	r2,0(r16)
 1007c74:	103ff826 	beq	r2,zero,1007c58 <_write_r+0x3c>
 1007c78:	88800015 	stw	r2,0(r17)
 1007c7c:	1805883a 	mov	r2,r3
 1007c80:	dfc00217 	ldw	ra,8(sp)
 1007c84:	dc400117 	ldw	r17,4(sp)
 1007c88:	dc000017 	ldw	r16,0(sp)
 1007c8c:	dec00304 	addi	sp,sp,12
 1007c90:	f800283a 	ret

01007c94 <__swsetup_r>:
 1007c94:	00804074 	movhi	r2,257
 1007c98:	108e6a04 	addi	r2,r2,14760
 1007c9c:	10c00017 	ldw	r3,0(r2)
 1007ca0:	defffd04 	addi	sp,sp,-12
 1007ca4:	dc400115 	stw	r17,4(sp)
 1007ca8:	dc000015 	stw	r16,0(sp)
 1007cac:	dfc00215 	stw	ra,8(sp)
 1007cb0:	2023883a 	mov	r17,r4
 1007cb4:	2821883a 	mov	r16,r5
 1007cb8:	18000226 	beq	r3,zero,1007cc4 <__swsetup_r+0x30>
 1007cbc:	18800e17 	ldw	r2,56(r3)
 1007cc0:	10001f26 	beq	r2,zero,1007d40 <__swsetup_r+0xac>
 1007cc4:	8100030b 	ldhu	r4,12(r16)
 1007cc8:	2080020c 	andi	r2,r4,8
 1007ccc:	10002826 	beq	r2,zero,1007d70 <__swsetup_r+0xdc>
 1007cd0:	81400417 	ldw	r5,16(r16)
 1007cd4:	28001d26 	beq	r5,zero,1007d4c <__swsetup_r+0xb8>
 1007cd8:	2080004c 	andi	r2,r4,1
 1007cdc:	1005003a 	cmpeq	r2,r2,zero
 1007ce0:	10000b26 	beq	r2,zero,1007d10 <__swsetup_r+0x7c>
 1007ce4:	2080008c 	andi	r2,r4,2
 1007ce8:	10001226 	beq	r2,zero,1007d34 <__swsetup_r+0xa0>
 1007cec:	0005883a 	mov	r2,zero
 1007cf0:	80800215 	stw	r2,8(r16)
 1007cf4:	28000b26 	beq	r5,zero,1007d24 <__swsetup_r+0x90>
 1007cf8:	0005883a 	mov	r2,zero
 1007cfc:	dfc00217 	ldw	ra,8(sp)
 1007d00:	dc400117 	ldw	r17,4(sp)
 1007d04:	dc000017 	ldw	r16,0(sp)
 1007d08:	dec00304 	addi	sp,sp,12
 1007d0c:	f800283a 	ret
 1007d10:	80800517 	ldw	r2,20(r16)
 1007d14:	80000215 	stw	zero,8(r16)
 1007d18:	0085c83a 	sub	r2,zero,r2
 1007d1c:	80800615 	stw	r2,24(r16)
 1007d20:	283ff51e 	bne	r5,zero,1007cf8 <__swsetup_r+0x64>
 1007d24:	2080200c 	andi	r2,r4,128
 1007d28:	103ff326 	beq	r2,zero,1007cf8 <__swsetup_r+0x64>
 1007d2c:	00bfffc4 	movi	r2,-1
 1007d30:	003ff206 	br	1007cfc <__swsetup_r+0x68>
 1007d34:	80800517 	ldw	r2,20(r16)
 1007d38:	80800215 	stw	r2,8(r16)
 1007d3c:	003fed06 	br	1007cf4 <__swsetup_r+0x60>
 1007d40:	1809883a 	mov	r4,r3
 1007d44:	10038600 	call	1003860 <__sinit>
 1007d48:	003fde06 	br	1007cc4 <__swsetup_r+0x30>
 1007d4c:	20c0a00c 	andi	r3,r4,640
 1007d50:	00808004 	movi	r2,512
 1007d54:	18bfe026 	beq	r3,r2,1007cd8 <__swsetup_r+0x44>
 1007d58:	8809883a 	mov	r4,r17
 1007d5c:	800b883a 	mov	r5,r16
 1007d60:	10048a40 	call	10048a4 <__smakebuf_r>
 1007d64:	8100030b 	ldhu	r4,12(r16)
 1007d68:	81400417 	ldw	r5,16(r16)
 1007d6c:	003fda06 	br	1007cd8 <__swsetup_r+0x44>
 1007d70:	2080040c 	andi	r2,r4,16
 1007d74:	103fed26 	beq	r2,zero,1007d2c <__swsetup_r+0x98>
 1007d78:	2080010c 	andi	r2,r4,4
 1007d7c:	10001226 	beq	r2,zero,1007dc8 <__swsetup_r+0x134>
 1007d80:	81400c17 	ldw	r5,48(r16)
 1007d84:	28000526 	beq	r5,zero,1007d9c <__swsetup_r+0x108>
 1007d88:	80801004 	addi	r2,r16,64
 1007d8c:	28800226 	beq	r5,r2,1007d98 <__swsetup_r+0x104>
 1007d90:	8809883a 	mov	r4,r17
 1007d94:	1003d280 	call	1003d28 <_free_r>
 1007d98:	80000c15 	stw	zero,48(r16)
 1007d9c:	8080030b 	ldhu	r2,12(r16)
 1007da0:	81400417 	ldw	r5,16(r16)
 1007da4:	80000115 	stw	zero,4(r16)
 1007da8:	10bff6cc 	andi	r2,r2,65499
 1007dac:	8080030d 	sth	r2,12(r16)
 1007db0:	81400015 	stw	r5,0(r16)
 1007db4:	8080030b 	ldhu	r2,12(r16)
 1007db8:	10800214 	ori	r2,r2,8
 1007dbc:	113fffcc 	andi	r4,r2,65535
 1007dc0:	8080030d 	sth	r2,12(r16)
 1007dc4:	003fc306 	br	1007cd4 <__swsetup_r+0x40>
 1007dc8:	81400417 	ldw	r5,16(r16)
 1007dcc:	003ff906 	br	1007db4 <__swsetup_r+0x120>

01007dd0 <_close_r>:
 1007dd0:	defffd04 	addi	sp,sp,-12
 1007dd4:	dc000015 	stw	r16,0(sp)
 1007dd8:	04004074 	movhi	r16,257
 1007ddc:	84155304 	addi	r16,r16,21836
 1007de0:	dc400115 	stw	r17,4(sp)
 1007de4:	80000015 	stw	zero,0(r16)
 1007de8:	2023883a 	mov	r17,r4
 1007dec:	2809883a 	mov	r4,r5
 1007df0:	dfc00215 	stw	ra,8(sp)
 1007df4:	100e1a40 	call	100e1a4 <close>
 1007df8:	1007883a 	mov	r3,r2
 1007dfc:	00bfffc4 	movi	r2,-1
 1007e00:	18800626 	beq	r3,r2,1007e1c <_close_r+0x4c>
 1007e04:	1805883a 	mov	r2,r3
 1007e08:	dfc00217 	ldw	ra,8(sp)
 1007e0c:	dc400117 	ldw	r17,4(sp)
 1007e10:	dc000017 	ldw	r16,0(sp)
 1007e14:	dec00304 	addi	sp,sp,12
 1007e18:	f800283a 	ret
 1007e1c:	80800017 	ldw	r2,0(r16)
 1007e20:	103ff826 	beq	r2,zero,1007e04 <_close_r+0x34>
 1007e24:	88800015 	stw	r2,0(r17)
 1007e28:	1805883a 	mov	r2,r3
 1007e2c:	dfc00217 	ldw	ra,8(sp)
 1007e30:	dc400117 	ldw	r17,4(sp)
 1007e34:	dc000017 	ldw	r16,0(sp)
 1007e38:	dec00304 	addi	sp,sp,12
 1007e3c:	f800283a 	ret

01007e40 <quorem>:
 1007e40:	28c00417 	ldw	r3,16(r5)
 1007e44:	20800417 	ldw	r2,16(r4)
 1007e48:	defff104 	addi	sp,sp,-60
 1007e4c:	dfc00e15 	stw	ra,56(sp)
 1007e50:	df000d15 	stw	fp,52(sp)
 1007e54:	ddc00c15 	stw	r23,48(sp)
 1007e58:	dd800b15 	stw	r22,44(sp)
 1007e5c:	dd400a15 	stw	r21,40(sp)
 1007e60:	dd000915 	stw	r20,36(sp)
 1007e64:	dcc00815 	stw	r19,32(sp)
 1007e68:	dc800715 	stw	r18,28(sp)
 1007e6c:	dc400615 	stw	r17,24(sp)
 1007e70:	dc000515 	stw	r16,20(sp)
 1007e74:	d9000315 	stw	r4,12(sp)
 1007e78:	d9400415 	stw	r5,16(sp)
 1007e7c:	10c07f16 	blt	r2,r3,100807c <quorem+0x23c>
 1007e80:	1d3fffc4 	addi	r20,r3,-1
 1007e84:	d8c00417 	ldw	r3,16(sp)
 1007e88:	d9000317 	ldw	r4,12(sp)
 1007e8c:	a505883a 	add	r2,r20,r20
 1007e90:	1085883a 	add	r2,r2,r2
 1007e94:	1cc00504 	addi	r19,r3,20
 1007e98:	25c00504 	addi	r23,r4,20
 1007e9c:	98ad883a 	add	r22,r19,r2
 1007ea0:	15c7883a 	add	r3,r2,r23
 1007ea4:	b1400017 	ldw	r5,0(r22)
 1007ea8:	19000017 	ldw	r4,0(r3)
 1007eac:	d8c00015 	stw	r3,0(sp)
 1007eb0:	29400044 	addi	r5,r5,1
 1007eb4:	d9000215 	stw	r4,8(sp)
 1007eb8:	100dadc0 	call	100dadc <__udivsi3>
 1007ebc:	1039883a 	mov	fp,r2
 1007ec0:	10003d1e 	bne	r2,zero,1007fb8 <quorem+0x178>
 1007ec4:	d9400417 	ldw	r5,16(sp)
 1007ec8:	d9000317 	ldw	r4,12(sp)
 1007ecc:	100a0e00 	call	100a0e0 <__mcmp>
 1007ed0:	10002c16 	blt	r2,zero,1007f84 <quorem+0x144>
 1007ed4:	e7000044 	addi	fp,fp,1
 1007ed8:	b80f883a 	mov	r7,r23
 1007edc:	0011883a 	mov	r8,zero
 1007ee0:	0009883a 	mov	r4,zero
 1007ee4:	99400017 	ldw	r5,0(r19)
 1007ee8:	38c00017 	ldw	r3,0(r7)
 1007eec:	9cc00104 	addi	r19,r19,4
 1007ef0:	28bfffcc 	andi	r2,r5,65535
 1007ef4:	2085883a 	add	r2,r4,r2
 1007ef8:	11bfffcc 	andi	r6,r2,65535
 1007efc:	193fffcc 	andi	r4,r3,65535
 1007f00:	1004d43a 	srli	r2,r2,16
 1007f04:	280ad43a 	srli	r5,r5,16
 1007f08:	2189c83a 	sub	r4,r4,r6
 1007f0c:	2209883a 	add	r4,r4,r8
 1007f10:	1806d43a 	srli	r3,r3,16
 1007f14:	288b883a 	add	r5,r5,r2
 1007f18:	200dd43a 	srai	r6,r4,16
 1007f1c:	28bfffcc 	andi	r2,r5,65535
 1007f20:	1887c83a 	sub	r3,r3,r2
 1007f24:	1987883a 	add	r3,r3,r6
 1007f28:	3900000d 	sth	r4,0(r7)
 1007f2c:	38c0008d 	sth	r3,2(r7)
 1007f30:	2808d43a 	srli	r4,r5,16
 1007f34:	39c00104 	addi	r7,r7,4
 1007f38:	1811d43a 	srai	r8,r3,16
 1007f3c:	b4ffe92e 	bgeu	r22,r19,1007ee4 <quorem+0xa4>
 1007f40:	a505883a 	add	r2,r20,r20
 1007f44:	1085883a 	add	r2,r2,r2
 1007f48:	b885883a 	add	r2,r23,r2
 1007f4c:	10c00017 	ldw	r3,0(r2)
 1007f50:	18000c1e 	bne	r3,zero,1007f84 <quorem+0x144>
 1007f54:	113fff04 	addi	r4,r2,-4
 1007f58:	b900082e 	bgeu	r23,r4,1007f7c <quorem+0x13c>
 1007f5c:	10bfff17 	ldw	r2,-4(r2)
 1007f60:	10000326 	beq	r2,zero,1007f70 <quorem+0x130>
 1007f64:	00000506 	br	1007f7c <quorem+0x13c>
 1007f68:	20800017 	ldw	r2,0(r4)
 1007f6c:	1000031e 	bne	r2,zero,1007f7c <quorem+0x13c>
 1007f70:	213fff04 	addi	r4,r4,-4
 1007f74:	a53fffc4 	addi	r20,r20,-1
 1007f78:	b93ffb36 	bltu	r23,r4,1007f68 <quorem+0x128>
 1007f7c:	d9000317 	ldw	r4,12(sp)
 1007f80:	25000415 	stw	r20,16(r4)
 1007f84:	e005883a 	mov	r2,fp
 1007f88:	dfc00e17 	ldw	ra,56(sp)
 1007f8c:	df000d17 	ldw	fp,52(sp)
 1007f90:	ddc00c17 	ldw	r23,48(sp)
 1007f94:	dd800b17 	ldw	r22,44(sp)
 1007f98:	dd400a17 	ldw	r21,40(sp)
 1007f9c:	dd000917 	ldw	r20,36(sp)
 1007fa0:	dcc00817 	ldw	r19,32(sp)
 1007fa4:	dc800717 	ldw	r18,28(sp)
 1007fa8:	dc400617 	ldw	r17,24(sp)
 1007fac:	dc000517 	ldw	r16,20(sp)
 1007fb0:	dec00f04 	addi	sp,sp,60
 1007fb4:	f800283a 	ret
 1007fb8:	b823883a 	mov	r17,r23
 1007fbc:	9825883a 	mov	r18,r19
 1007fc0:	d8000115 	stw	zero,4(sp)
 1007fc4:	002b883a 	mov	r21,zero
 1007fc8:	94000017 	ldw	r16,0(r18)
 1007fcc:	e009883a 	mov	r4,fp
 1007fd0:	94800104 	addi	r18,r18,4
 1007fd4:	817fffcc 	andi	r5,r16,65535
 1007fd8:	1002f0c0 	call	1002f0c <__mulsi3>
 1007fdc:	800ad43a 	srli	r5,r16,16
 1007fe0:	e009883a 	mov	r4,fp
 1007fe4:	a8a1883a 	add	r16,r21,r2
 1007fe8:	1002f0c0 	call	1002f0c <__mulsi3>
 1007fec:	89000017 	ldw	r4,0(r17)
 1007ff0:	80ffffcc 	andi	r3,r16,65535
 1007ff4:	8020d43a 	srli	r16,r16,16
 1007ff8:	217fffcc 	andi	r5,r4,65535
 1007ffc:	28cbc83a 	sub	r5,r5,r3
 1008000:	d8c00117 	ldw	r3,4(sp)
 1008004:	2008d43a 	srli	r4,r4,16
 1008008:	1405883a 	add	r2,r2,r16
 100800c:	28cb883a 	add	r5,r5,r3
 1008010:	280dd43a 	srai	r6,r5,16
 1008014:	10ffffcc 	andi	r3,r2,65535
 1008018:	20c9c83a 	sub	r4,r4,r3
 100801c:	2189883a 	add	r4,r4,r6
 1008020:	8900008d 	sth	r4,2(r17)
 1008024:	2009d43a 	srai	r4,r4,16
 1008028:	8940000d 	sth	r5,0(r17)
 100802c:	102ad43a 	srli	r21,r2,16
 1008030:	8c400104 	addi	r17,r17,4
 1008034:	d9000115 	stw	r4,4(sp)
 1008038:	b4bfe32e 	bgeu	r22,r18,1007fc8 <quorem+0x188>
 100803c:	d9000217 	ldw	r4,8(sp)
 1008040:	203fa01e 	bne	r4,zero,1007ec4 <quorem+0x84>
 1008044:	d8800017 	ldw	r2,0(sp)
 1008048:	10ffff04 	addi	r3,r2,-4
 100804c:	b8c0082e 	bgeu	r23,r3,1008070 <quorem+0x230>
 1008050:	10bfff17 	ldw	r2,-4(r2)
 1008054:	10000326 	beq	r2,zero,1008064 <quorem+0x224>
 1008058:	00000506 	br	1008070 <quorem+0x230>
 100805c:	18800017 	ldw	r2,0(r3)
 1008060:	1000031e 	bne	r2,zero,1008070 <quorem+0x230>
 1008064:	18ffff04 	addi	r3,r3,-4
 1008068:	a53fffc4 	addi	r20,r20,-1
 100806c:	b8fffb36 	bltu	r23,r3,100805c <quorem+0x21c>
 1008070:	d8c00317 	ldw	r3,12(sp)
 1008074:	1d000415 	stw	r20,16(r3)
 1008078:	003f9206 	br	1007ec4 <quorem+0x84>
 100807c:	0005883a 	mov	r2,zero
 1008080:	003fc106 	br	1007f88 <quorem+0x148>

01008084 <_dtoa_r>:
 1008084:	22001017 	ldw	r8,64(r4)
 1008088:	deffda04 	addi	sp,sp,-152
 100808c:	dd402115 	stw	r21,132(sp)
 1008090:	dd002015 	stw	r20,128(sp)
 1008094:	dc801e15 	stw	r18,120(sp)
 1008098:	dc401d15 	stw	r17,116(sp)
 100809c:	dfc02515 	stw	ra,148(sp)
 10080a0:	df002415 	stw	fp,144(sp)
 10080a4:	ddc02315 	stw	r23,140(sp)
 10080a8:	dd802215 	stw	r22,136(sp)
 10080ac:	dcc01f15 	stw	r19,124(sp)
 10080b0:	dc001c15 	stw	r16,112(sp)
 10080b4:	d9001615 	stw	r4,88(sp)
 10080b8:	3023883a 	mov	r17,r6
 10080bc:	2829883a 	mov	r20,r5
 10080c0:	d9c01715 	stw	r7,92(sp)
 10080c4:	dc802817 	ldw	r18,160(sp)
 10080c8:	302b883a 	mov	r21,r6
 10080cc:	40000a26 	beq	r8,zero,10080f8 <_dtoa_r+0x74>
 10080d0:	20801117 	ldw	r2,68(r4)
 10080d4:	400b883a 	mov	r5,r8
 10080d8:	40800115 	stw	r2,4(r8)
 10080dc:	20c01117 	ldw	r3,68(r4)
 10080e0:	00800044 	movi	r2,1
 10080e4:	10c4983a 	sll	r2,r2,r3
 10080e8:	40800215 	stw	r2,8(r8)
 10080ec:	1009f840 	call	1009f84 <_Bfree>
 10080f0:	d8c01617 	ldw	r3,88(sp)
 10080f4:	18001015 	stw	zero,64(r3)
 10080f8:	8800a316 	blt	r17,zero,1008388 <_dtoa_r+0x304>
 10080fc:	90000015 	stw	zero,0(r18)
 1008100:	a8dffc2c 	andhi	r3,r21,32752
 1008104:	009ffc34 	movhi	r2,32752
 1008108:	18809126 	beq	r3,r2,1008350 <_dtoa_r+0x2cc>
 100810c:	000d883a 	mov	r6,zero
 1008110:	000f883a 	mov	r7,zero
 1008114:	a009883a 	mov	r4,r20
 1008118:	a80b883a 	mov	r5,r21
 100811c:	dd001215 	stw	r20,72(sp)
 1008120:	dd401315 	stw	r21,76(sp)
 1008124:	100d41c0 	call	100d41c <__nedf2>
 1008128:	1000171e 	bne	r2,zero,1008188 <_dtoa_r+0x104>
 100812c:	d9802717 	ldw	r6,156(sp)
 1008130:	00800044 	movi	r2,1
 1008134:	30800015 	stw	r2,0(r6)
 1008138:	d8802917 	ldw	r2,164(sp)
 100813c:	10029b26 	beq	r2,zero,1008bac <_dtoa_r+0xb28>
 1008140:	d9002917 	ldw	r4,164(sp)
 1008144:	00804074 	movhi	r2,257
 1008148:	1086ef44 	addi	r2,r2,7101
 100814c:	10ffffc4 	addi	r3,r2,-1
 1008150:	20800015 	stw	r2,0(r4)
 1008154:	1805883a 	mov	r2,r3
 1008158:	dfc02517 	ldw	ra,148(sp)
 100815c:	df002417 	ldw	fp,144(sp)
 1008160:	ddc02317 	ldw	r23,140(sp)
 1008164:	dd802217 	ldw	r22,136(sp)
 1008168:	dd402117 	ldw	r21,132(sp)
 100816c:	dd002017 	ldw	r20,128(sp)
 1008170:	dcc01f17 	ldw	r19,124(sp)
 1008174:	dc801e17 	ldw	r18,120(sp)
 1008178:	dc401d17 	ldw	r17,116(sp)
 100817c:	dc001c17 	ldw	r16,112(sp)
 1008180:	dec02604 	addi	sp,sp,152
 1008184:	f800283a 	ret
 1008188:	d9001617 	ldw	r4,88(sp)
 100818c:	d9401217 	ldw	r5,72(sp)
 1008190:	d8800104 	addi	r2,sp,4
 1008194:	a80d883a 	mov	r6,r21
 1008198:	d9c00204 	addi	r7,sp,8
 100819c:	d8800015 	stw	r2,0(sp)
 10081a0:	100a5c00 	call	100a5c0 <__d2b>
 10081a4:	d8800715 	stw	r2,28(sp)
 10081a8:	a804d53a 	srli	r2,r21,20
 10081ac:	1101ffcc 	andi	r4,r2,2047
 10081b0:	20008626 	beq	r4,zero,10083cc <_dtoa_r+0x348>
 10081b4:	d8c01217 	ldw	r3,72(sp)
 10081b8:	00800434 	movhi	r2,16
 10081bc:	10bfffc4 	addi	r2,r2,-1
 10081c0:	ddc00117 	ldw	r23,4(sp)
 10081c4:	a884703a 	and	r2,r21,r2
 10081c8:	1811883a 	mov	r8,r3
 10081cc:	124ffc34 	orhi	r9,r2,16368
 10081d0:	25bf0044 	addi	r22,r4,-1023
 10081d4:	d8000815 	stw	zero,32(sp)
 10081d8:	0005883a 	mov	r2,zero
 10081dc:	00cffe34 	movhi	r3,16376
 10081e0:	480b883a 	mov	r5,r9
 10081e4:	4009883a 	mov	r4,r8
 10081e8:	180f883a 	mov	r7,r3
 10081ec:	100d883a 	mov	r6,r2
 10081f0:	100cc840 	call	100cc84 <__subdf3>
 10081f4:	0218dbf4 	movhi	r8,25455
 10081f8:	4210d844 	addi	r8,r8,17249
 10081fc:	024ff4f4 	movhi	r9,16339
 1008200:	4a61e9c4 	addi	r9,r9,-30809
 1008204:	480f883a 	mov	r7,r9
 1008208:	400d883a 	mov	r6,r8
 100820c:	180b883a 	mov	r5,r3
 1008210:	1009883a 	mov	r4,r2
 1008214:	100cd780 	call	100cd78 <__muldf3>
 1008218:	0222d874 	movhi	r8,35681
 100821c:	42322cc4 	addi	r8,r8,-14157
 1008220:	024ff1f4 	movhi	r9,16327
 1008224:	4a628a04 	addi	r9,r9,-30168
 1008228:	480f883a 	mov	r7,r9
 100822c:	400d883a 	mov	r6,r8
 1008230:	180b883a 	mov	r5,r3
 1008234:	1009883a 	mov	r4,r2
 1008238:	100cd040 	call	100cd04 <__adddf3>
 100823c:	b009883a 	mov	r4,r22
 1008240:	1021883a 	mov	r16,r2
 1008244:	1823883a 	mov	r17,r3
 1008248:	100d63c0 	call	100d63c <__floatsidf>
 100824c:	021427f4 	movhi	r8,20639
 1008250:	421e7ec4 	addi	r8,r8,31227
 1008254:	024ff4f4 	movhi	r9,16339
 1008258:	4a5104c4 	addi	r9,r9,17427
 100825c:	480f883a 	mov	r7,r9
 1008260:	400d883a 	mov	r6,r8
 1008264:	180b883a 	mov	r5,r3
 1008268:	1009883a 	mov	r4,r2
 100826c:	100cd780 	call	100cd78 <__muldf3>
 1008270:	180f883a 	mov	r7,r3
 1008274:	880b883a 	mov	r5,r17
 1008278:	100d883a 	mov	r6,r2
 100827c:	8009883a 	mov	r4,r16
 1008280:	100cd040 	call	100cd04 <__adddf3>
 1008284:	1009883a 	mov	r4,r2
 1008288:	180b883a 	mov	r5,r3
 100828c:	1021883a 	mov	r16,r2
 1008290:	1823883a 	mov	r17,r3
 1008294:	100d7340 	call	100d734 <__fixdfsi>
 1008298:	000d883a 	mov	r6,zero
 100829c:	000f883a 	mov	r7,zero
 10082a0:	8009883a 	mov	r4,r16
 10082a4:	880b883a 	mov	r5,r17
 10082a8:	d8800d15 	stw	r2,52(sp)
 10082ac:	100d5b40 	call	100d5b4 <__ltdf2>
 10082b0:	10031716 	blt	r2,zero,1008f10 <_dtoa_r+0xe8c>
 10082b4:	d8c00d17 	ldw	r3,52(sp)
 10082b8:	00800584 	movi	r2,22
 10082bc:	10c1482e 	bgeu	r2,r3,10087e0 <_dtoa_r+0x75c>
 10082c0:	01000044 	movi	r4,1
 10082c4:	d9000c15 	stw	r4,48(sp)
 10082c8:	bd85c83a 	sub	r2,r23,r22
 10082cc:	11bfffc4 	addi	r6,r2,-1
 10082d0:	30030b16 	blt	r6,zero,1008f00 <_dtoa_r+0xe7c>
 10082d4:	d9800a15 	stw	r6,40(sp)
 10082d8:	d8001115 	stw	zero,68(sp)
 10082dc:	d8c00d17 	ldw	r3,52(sp)
 10082e0:	1802ff16 	blt	r3,zero,1008ee0 <_dtoa_r+0xe5c>
 10082e4:	d9000a17 	ldw	r4,40(sp)
 10082e8:	d8c00915 	stw	r3,36(sp)
 10082ec:	d8001015 	stw	zero,64(sp)
 10082f0:	20c9883a 	add	r4,r4,r3
 10082f4:	d9000a15 	stw	r4,40(sp)
 10082f8:	d9001717 	ldw	r4,92(sp)
 10082fc:	00800244 	movi	r2,9
 1008300:	11004636 	bltu	r2,r4,100841c <_dtoa_r+0x398>
 1008304:	00800144 	movi	r2,5
 1008308:	11020416 	blt	r2,r4,1008b1c <_dtoa_r+0xa98>
 100830c:	04400044 	movi	r17,1
 1008310:	d8c01717 	ldw	r3,92(sp)
 1008314:	00800144 	movi	r2,5
 1008318:	10c1ed36 	bltu	r2,r3,1008ad0 <_dtoa_r+0xa4c>
 100831c:	18c5883a 	add	r2,r3,r3
 1008320:	1085883a 	add	r2,r2,r2
 1008324:	00c04074 	movhi	r3,257
 1008328:	18e0ce04 	addi	r3,r3,-31944
 100832c:	10c5883a 	add	r2,r2,r3
 1008330:	11000017 	ldw	r4,0(r2)
 1008334:	2000683a 	jmp	r4
 1008338:	01008424 	muli	r4,zero,528
 100833c:	01008424 	muli	r4,zero,528
 1008340:	01008e24 	muli	r4,zero,568
 1008344:	01008dfc 	xorhi	r4,zero,567
 1008348:	01008e40 	call	1008e4 <__alt_mem_onchip_memory2_0+0x1008e4>
 100834c:	01008e4c 	andi	r4,zero,569
 1008350:	d9002717 	ldw	r4,156(sp)
 1008354:	0089c3c4 	movi	r2,9999
 1008358:	20800015 	stw	r2,0(r4)
 100835c:	a0001026 	beq	r20,zero,10083a0 <_dtoa_r+0x31c>
 1008360:	00c04074 	movhi	r3,257
 1008364:	18c6fb04 	addi	r3,r3,7148
 1008368:	d9802917 	ldw	r6,164(sp)
 100836c:	303f7926 	beq	r6,zero,1008154 <_dtoa_r+0xd0>
 1008370:	188000c7 	ldb	r2,3(r3)
 1008374:	190000c4 	addi	r4,r3,3
 1008378:	1000101e 	bne	r2,zero,10083bc <_dtoa_r+0x338>
 100837c:	d8802917 	ldw	r2,164(sp)
 1008380:	11000015 	stw	r4,0(r2)
 1008384:	003f7306 	br	1008154 <_dtoa_r+0xd0>
 1008388:	00a00034 	movhi	r2,32768
 100838c:	10bfffc4 	addi	r2,r2,-1
 1008390:	00c00044 	movi	r3,1
 1008394:	88aa703a 	and	r21,r17,r2
 1008398:	90c00015 	stw	r3,0(r18)
 100839c:	003f5806 	br	1008100 <_dtoa_r+0x7c>
 10083a0:	00800434 	movhi	r2,16
 10083a4:	10bfffc4 	addi	r2,r2,-1
 10083a8:	a884703a 	and	r2,r21,r2
 10083ac:	103fec1e 	bne	r2,zero,1008360 <_dtoa_r+0x2dc>
 10083b0:	00c04074 	movhi	r3,257
 10083b4:	18c6f804 	addi	r3,r3,7136
 10083b8:	003feb06 	br	1008368 <_dtoa_r+0x2e4>
 10083bc:	d8802917 	ldw	r2,164(sp)
 10083c0:	19000204 	addi	r4,r3,8
 10083c4:	11000015 	stw	r4,0(r2)
 10083c8:	003f6206 	br	1008154 <_dtoa_r+0xd0>
 10083cc:	ddc00117 	ldw	r23,4(sp)
 10083d0:	d8800217 	ldw	r2,8(sp)
 10083d4:	01000804 	movi	r4,32
 10083d8:	b8c10c84 	addi	r3,r23,1074
 10083dc:	18a3883a 	add	r17,r3,r2
 10083e0:	2441b80e 	bge	r4,r17,1008ac4 <_dtoa_r+0xa40>
 10083e4:	00c01004 	movi	r3,64
 10083e8:	1c47c83a 	sub	r3,r3,r17
 10083ec:	88bff804 	addi	r2,r17,-32
 10083f0:	a8c6983a 	sll	r3,r21,r3
 10083f4:	a084d83a 	srl	r2,r20,r2
 10083f8:	1888b03a 	or	r4,r3,r2
 10083fc:	100d80c0 	call	100d80c <__floatunsidf>
 1008400:	1011883a 	mov	r8,r2
 1008404:	00bf8434 	movhi	r2,65040
 1008408:	01000044 	movi	r4,1
 100840c:	10d3883a 	add	r9,r2,r3
 1008410:	8dbef344 	addi	r22,r17,-1075
 1008414:	d9000815 	stw	r4,32(sp)
 1008418:	003f6f06 	br	10081d8 <_dtoa_r+0x154>
 100841c:	d8001715 	stw	zero,92(sp)
 1008420:	04400044 	movi	r17,1
 1008424:	00bfffc4 	movi	r2,-1
 1008428:	00c00044 	movi	r3,1
 100842c:	d8800e15 	stw	r2,56(sp)
 1008430:	d8002615 	stw	zero,152(sp)
 1008434:	d8800f15 	stw	r2,60(sp)
 1008438:	d8c00b15 	stw	r3,44(sp)
 100843c:	1021883a 	mov	r16,r2
 1008440:	d8801617 	ldw	r2,88(sp)
 1008444:	10001115 	stw	zero,68(r2)
 1008448:	d8801617 	ldw	r2,88(sp)
 100844c:	11401117 	ldw	r5,68(r2)
 1008450:	1009883a 	mov	r4,r2
 1008454:	100a5040 	call	100a504 <_Balloc>
 1008458:	d8c01617 	ldw	r3,88(sp)
 100845c:	d8800515 	stw	r2,20(sp)
 1008460:	18801015 	stw	r2,64(r3)
 1008464:	00800384 	movi	r2,14
 1008468:	14006836 	bltu	r2,r16,100860c <_dtoa_r+0x588>
 100846c:	8805003a 	cmpeq	r2,r17,zero
 1008470:	1000661e 	bne	r2,zero,100860c <_dtoa_r+0x588>
 1008474:	d9000d17 	ldw	r4,52(sp)
 1008478:	0102300e 	bge	zero,r4,1008d3c <_dtoa_r+0xcb8>
 100847c:	208003cc 	andi	r2,r4,15
 1008480:	100490fa 	slli	r2,r2,3
 1008484:	2025d13a 	srai	r18,r4,4
 1008488:	00c04074 	movhi	r3,257
 100848c:	18c70c04 	addi	r3,r3,7216
 1008490:	10c5883a 	add	r2,r2,r3
 1008494:	90c0040c 	andi	r3,r18,16
 1008498:	14000017 	ldw	r16,0(r2)
 100849c:	14400117 	ldw	r17,4(r2)
 10084a0:	18036a1e 	bne	r3,zero,100924c <_dtoa_r+0x11c8>
 10084a4:	05800084 	movi	r22,2
 10084a8:	90001026 	beq	r18,zero,10084ec <_dtoa_r+0x468>
 10084ac:	04c04074 	movhi	r19,257
 10084b0:	9cc73e04 	addi	r19,r19,7416
 10084b4:	9080004c 	andi	r2,r18,1
 10084b8:	1005003a 	cmpeq	r2,r2,zero
 10084bc:	1000081e 	bne	r2,zero,10084e0 <_dtoa_r+0x45c>
 10084c0:	99800017 	ldw	r6,0(r19)
 10084c4:	99c00117 	ldw	r7,4(r19)
 10084c8:	880b883a 	mov	r5,r17
 10084cc:	8009883a 	mov	r4,r16
 10084d0:	100cd780 	call	100cd78 <__muldf3>
 10084d4:	1021883a 	mov	r16,r2
 10084d8:	b5800044 	addi	r22,r22,1
 10084dc:	1823883a 	mov	r17,r3
 10084e0:	9025d07a 	srai	r18,r18,1
 10084e4:	9cc00204 	addi	r19,r19,8
 10084e8:	903ff21e 	bne	r18,zero,10084b4 <_dtoa_r+0x430>
 10084ec:	a80b883a 	mov	r5,r21
 10084f0:	a009883a 	mov	r4,r20
 10084f4:	880f883a 	mov	r7,r17
 10084f8:	800d883a 	mov	r6,r16
 10084fc:	100d13c0 	call	100d13c <__divdf3>
 1008500:	1029883a 	mov	r20,r2
 1008504:	182b883a 	mov	r21,r3
 1008508:	d8c00c17 	ldw	r3,48(sp)
 100850c:	1805003a 	cmpeq	r2,r3,zero
 1008510:	1000081e 	bne	r2,zero,1008534 <_dtoa_r+0x4b0>
 1008514:	0005883a 	mov	r2,zero
 1008518:	00cffc34 	movhi	r3,16368
 100851c:	180f883a 	mov	r7,r3
 1008520:	a009883a 	mov	r4,r20
 1008524:	a80b883a 	mov	r5,r21
 1008528:	100d883a 	mov	r6,r2
 100852c:	100d5b40 	call	100d5b4 <__ltdf2>
 1008530:	1003fe16 	blt	r2,zero,100952c <_dtoa_r+0x14a8>
 1008534:	b009883a 	mov	r4,r22
 1008538:	100d63c0 	call	100d63c <__floatsidf>
 100853c:	180b883a 	mov	r5,r3
 1008540:	1009883a 	mov	r4,r2
 1008544:	a00d883a 	mov	r6,r20
 1008548:	a80f883a 	mov	r7,r21
 100854c:	100cd780 	call	100cd78 <__muldf3>
 1008550:	0011883a 	mov	r8,zero
 1008554:	02500734 	movhi	r9,16412
 1008558:	1009883a 	mov	r4,r2
 100855c:	180b883a 	mov	r5,r3
 1008560:	480f883a 	mov	r7,r9
 1008564:	400d883a 	mov	r6,r8
 1008568:	100cd040 	call	100cd04 <__adddf3>
 100856c:	d9000f17 	ldw	r4,60(sp)
 1008570:	102d883a 	mov	r22,r2
 1008574:	00bf3034 	movhi	r2,64704
 1008578:	18b9883a 	add	fp,r3,r2
 100857c:	e02f883a 	mov	r23,fp
 1008580:	20028f1e 	bne	r4,zero,1008fc0 <_dtoa_r+0xf3c>
 1008584:	0005883a 	mov	r2,zero
 1008588:	00d00534 	movhi	r3,16404
 100858c:	a009883a 	mov	r4,r20
 1008590:	a80b883a 	mov	r5,r21
 1008594:	180f883a 	mov	r7,r3
 1008598:	100d883a 	mov	r6,r2
 100859c:	100cc840 	call	100cc84 <__subdf3>
 10085a0:	1009883a 	mov	r4,r2
 10085a4:	e00f883a 	mov	r7,fp
 10085a8:	180b883a 	mov	r5,r3
 10085ac:	b00d883a 	mov	r6,r22
 10085b0:	1025883a 	mov	r18,r2
 10085b4:	1827883a 	mov	r19,r3
 10085b8:	100d4a40 	call	100d4a4 <__gtdf2>
 10085bc:	00834f16 	blt	zero,r2,10092fc <_dtoa_r+0x1278>
 10085c0:	e0e0003c 	xorhi	r3,fp,32768
 10085c4:	9009883a 	mov	r4,r18
 10085c8:	980b883a 	mov	r5,r19
 10085cc:	180f883a 	mov	r7,r3
 10085d0:	b00d883a 	mov	r6,r22
 10085d4:	100d5b40 	call	100d5b4 <__ltdf2>
 10085d8:	1000080e 	bge	r2,zero,10085fc <_dtoa_r+0x578>
 10085dc:	0027883a 	mov	r19,zero
 10085e0:	0025883a 	mov	r18,zero
 10085e4:	d8802617 	ldw	r2,152(sp)
 10085e8:	df000517 	ldw	fp,20(sp)
 10085ec:	d8000615 	stw	zero,24(sp)
 10085f0:	0084303a 	nor	r2,zero,r2
 10085f4:	d8800d15 	stw	r2,52(sp)
 10085f8:	00019b06 	br	1008c68 <_dtoa_r+0xbe4>
 10085fc:	d9801217 	ldw	r6,72(sp)
 1008600:	d8801317 	ldw	r2,76(sp)
 1008604:	3029883a 	mov	r20,r6
 1008608:	102b883a 	mov	r21,r2
 100860c:	d8c00217 	ldw	r3,8(sp)
 1008610:	18008516 	blt	r3,zero,1008828 <_dtoa_r+0x7a4>
 1008614:	d9000d17 	ldw	r4,52(sp)
 1008618:	00800384 	movi	r2,14
 100861c:	11008216 	blt	r2,r4,1008828 <_dtoa_r+0x7a4>
 1008620:	200490fa 	slli	r2,r4,3
 1008624:	d9802617 	ldw	r6,152(sp)
 1008628:	00c04074 	movhi	r3,257
 100862c:	18c70c04 	addi	r3,r3,7216
 1008630:	10c5883a 	add	r2,r2,r3
 1008634:	14800017 	ldw	r18,0(r2)
 1008638:	14c00117 	ldw	r19,4(r2)
 100863c:	30031e16 	blt	r6,zero,10092b8 <_dtoa_r+0x1234>
 1008640:	d9000517 	ldw	r4,20(sp)
 1008644:	d8c00f17 	ldw	r3,60(sp)
 1008648:	a823883a 	mov	r17,r21
 100864c:	a021883a 	mov	r16,r20
 1008650:	192b883a 	add	r21,r3,r4
 1008654:	2039883a 	mov	fp,r4
 1008658:	00000f06 	br	1008698 <_dtoa_r+0x614>
 100865c:	0005883a 	mov	r2,zero
 1008660:	00d00934 	movhi	r3,16420
 1008664:	5009883a 	mov	r4,r10
 1008668:	580b883a 	mov	r5,r11
 100866c:	180f883a 	mov	r7,r3
 1008670:	100d883a 	mov	r6,r2
 1008674:	100cd780 	call	100cd78 <__muldf3>
 1008678:	180b883a 	mov	r5,r3
 100867c:	000d883a 	mov	r6,zero
 1008680:	000f883a 	mov	r7,zero
 1008684:	1009883a 	mov	r4,r2
 1008688:	1021883a 	mov	r16,r2
 100868c:	1823883a 	mov	r17,r3
 1008690:	100d41c0 	call	100d41c <__nedf2>
 1008694:	10004526 	beq	r2,zero,10087ac <_dtoa_r+0x728>
 1008698:	900d883a 	mov	r6,r18
 100869c:	980f883a 	mov	r7,r19
 10086a0:	8009883a 	mov	r4,r16
 10086a4:	880b883a 	mov	r5,r17
 10086a8:	100d13c0 	call	100d13c <__divdf3>
 10086ac:	180b883a 	mov	r5,r3
 10086b0:	1009883a 	mov	r4,r2
 10086b4:	100d7340 	call	100d734 <__fixdfsi>
 10086b8:	1009883a 	mov	r4,r2
 10086bc:	1029883a 	mov	r20,r2
 10086c0:	100d63c0 	call	100d63c <__floatsidf>
 10086c4:	180f883a 	mov	r7,r3
 10086c8:	9009883a 	mov	r4,r18
 10086cc:	980b883a 	mov	r5,r19
 10086d0:	100d883a 	mov	r6,r2
 10086d4:	100cd780 	call	100cd78 <__muldf3>
 10086d8:	180f883a 	mov	r7,r3
 10086dc:	880b883a 	mov	r5,r17
 10086e0:	8009883a 	mov	r4,r16
 10086e4:	100d883a 	mov	r6,r2
 10086e8:	100cc840 	call	100cc84 <__subdf3>
 10086ec:	1015883a 	mov	r10,r2
 10086f0:	a0800c04 	addi	r2,r20,48
 10086f4:	e0800005 	stb	r2,0(fp)
 10086f8:	e7000044 	addi	fp,fp,1
 10086fc:	1817883a 	mov	r11,r3
 1008700:	e57fd61e 	bne	fp,r21,100865c <_dtoa_r+0x5d8>
 1008704:	500d883a 	mov	r6,r10
 1008708:	180f883a 	mov	r7,r3
 100870c:	5009883a 	mov	r4,r10
 1008710:	180b883a 	mov	r5,r3
 1008714:	100cd040 	call	100cd04 <__adddf3>
 1008718:	100d883a 	mov	r6,r2
 100871c:	9009883a 	mov	r4,r18
 1008720:	980b883a 	mov	r5,r19
 1008724:	180f883a 	mov	r7,r3
 1008728:	1021883a 	mov	r16,r2
 100872c:	1823883a 	mov	r17,r3
 1008730:	100d5b40 	call	100d5b4 <__ltdf2>
 1008734:	10000816 	blt	r2,zero,1008758 <_dtoa_r+0x6d4>
 1008738:	980b883a 	mov	r5,r19
 100873c:	800d883a 	mov	r6,r16
 1008740:	880f883a 	mov	r7,r17
 1008744:	9009883a 	mov	r4,r18
 1008748:	100d3940 	call	100d394 <__eqdf2>
 100874c:	1000171e 	bne	r2,zero,10087ac <_dtoa_r+0x728>
 1008750:	a080004c 	andi	r2,r20,1
 1008754:	10001526 	beq	r2,zero,10087ac <_dtoa_r+0x728>
 1008758:	d8800d17 	ldw	r2,52(sp)
 100875c:	d8800415 	stw	r2,16(sp)
 1008760:	e009883a 	mov	r4,fp
 1008764:	213fffc4 	addi	r4,r4,-1
 1008768:	20c00007 	ldb	r3,0(r4)
 100876c:	00800e44 	movi	r2,57
 1008770:	1880081e 	bne	r3,r2,1008794 <_dtoa_r+0x710>
 1008774:	d8800517 	ldw	r2,20(sp)
 1008778:	113ffa1e 	bne	r2,r4,1008764 <_dtoa_r+0x6e0>
 100877c:	d8c00417 	ldw	r3,16(sp)
 1008780:	d9800517 	ldw	r6,20(sp)
 1008784:	00800c04 	movi	r2,48
 1008788:	18c00044 	addi	r3,r3,1
 100878c:	d8c00415 	stw	r3,16(sp)
 1008790:	30800005 	stb	r2,0(r6)
 1008794:	20800003 	ldbu	r2,0(r4)
 1008798:	d8c00417 	ldw	r3,16(sp)
 100879c:	27000044 	addi	fp,r4,1
 10087a0:	10800044 	addi	r2,r2,1
 10087a4:	d8c00d15 	stw	r3,52(sp)
 10087a8:	20800005 	stb	r2,0(r4)
 10087ac:	d9001617 	ldw	r4,88(sp)
 10087b0:	d9400717 	ldw	r5,28(sp)
 10087b4:	1009f840 	call	1009f84 <_Bfree>
 10087b8:	e0000005 	stb	zero,0(fp)
 10087bc:	d9800d17 	ldw	r6,52(sp)
 10087c0:	d8c02717 	ldw	r3,156(sp)
 10087c4:	d9002917 	ldw	r4,164(sp)
 10087c8:	30800044 	addi	r2,r6,1
 10087cc:	18800015 	stw	r2,0(r3)
 10087d0:	20029c26 	beq	r4,zero,1009244 <_dtoa_r+0x11c0>
 10087d4:	d8c00517 	ldw	r3,20(sp)
 10087d8:	27000015 	stw	fp,0(r4)
 10087dc:	003e5d06 	br	1008154 <_dtoa_r+0xd0>
 10087e0:	d9800d17 	ldw	r6,52(sp)
 10087e4:	00c04074 	movhi	r3,257
 10087e8:	18c70c04 	addi	r3,r3,7216
 10087ec:	d9001217 	ldw	r4,72(sp)
 10087f0:	300490fa 	slli	r2,r6,3
 10087f4:	d9401317 	ldw	r5,76(sp)
 10087f8:	10c5883a 	add	r2,r2,r3
 10087fc:	12000017 	ldw	r8,0(r2)
 1008800:	12400117 	ldw	r9,4(r2)
 1008804:	400d883a 	mov	r6,r8
 1008808:	480f883a 	mov	r7,r9
 100880c:	100d5b40 	call	100d5b4 <__ltdf2>
 1008810:	1000030e 	bge	r2,zero,1008820 <_dtoa_r+0x79c>
 1008814:	d8800d17 	ldw	r2,52(sp)
 1008818:	10bfffc4 	addi	r2,r2,-1
 100881c:	d8800d15 	stw	r2,52(sp)
 1008820:	d8000c15 	stw	zero,48(sp)
 1008824:	003ea806 	br	10082c8 <_dtoa_r+0x244>
 1008828:	d9000b17 	ldw	r4,44(sp)
 100882c:	202cc03a 	cmpne	r22,r4,zero
 1008830:	b000c71e 	bne	r22,zero,1008b50 <_dtoa_r+0xacc>
 1008834:	dc001117 	ldw	r16,68(sp)
 1008838:	dc801017 	ldw	r18,64(sp)
 100883c:	0027883a 	mov	r19,zero
 1008840:	04000b0e 	bge	zero,r16,1008870 <_dtoa_r+0x7ec>
 1008844:	d8c00a17 	ldw	r3,40(sp)
 1008848:	00c0090e 	bge	zero,r3,1008870 <_dtoa_r+0x7ec>
 100884c:	8005883a 	mov	r2,r16
 1008850:	1c011316 	blt	r3,r16,1008ca0 <_dtoa_r+0xc1c>
 1008854:	d9000a17 	ldw	r4,40(sp)
 1008858:	d9801117 	ldw	r6,68(sp)
 100885c:	80a1c83a 	sub	r16,r16,r2
 1008860:	2089c83a 	sub	r4,r4,r2
 1008864:	308dc83a 	sub	r6,r6,r2
 1008868:	d9000a15 	stw	r4,40(sp)
 100886c:	d9801115 	stw	r6,68(sp)
 1008870:	d8801017 	ldw	r2,64(sp)
 1008874:	0080150e 	bge	zero,r2,10088cc <_dtoa_r+0x848>
 1008878:	d8c00b17 	ldw	r3,44(sp)
 100887c:	1805003a 	cmpeq	r2,r3,zero
 1008880:	1001c91e 	bne	r2,zero,1008fa8 <_dtoa_r+0xf24>
 1008884:	04800e0e 	bge	zero,r18,10088c0 <_dtoa_r+0x83c>
 1008888:	d9001617 	ldw	r4,88(sp)
 100888c:	980b883a 	mov	r5,r19
 1008890:	900d883a 	mov	r6,r18
 1008894:	100add00 	call	100add0 <__pow5mult>
 1008898:	d9001617 	ldw	r4,88(sp)
 100889c:	d9800717 	ldw	r6,28(sp)
 10088a0:	100b883a 	mov	r5,r2
 10088a4:	1027883a 	mov	r19,r2
 10088a8:	100aa140 	call	100aa14 <__multiply>
 10088ac:	d9001617 	ldw	r4,88(sp)
 10088b0:	d9400717 	ldw	r5,28(sp)
 10088b4:	1023883a 	mov	r17,r2
 10088b8:	1009f840 	call	1009f84 <_Bfree>
 10088bc:	dc400715 	stw	r17,28(sp)
 10088c0:	d9001017 	ldw	r4,64(sp)
 10088c4:	248dc83a 	sub	r6,r4,r18
 10088c8:	30010e1e 	bne	r6,zero,1008d04 <_dtoa_r+0xc80>
 10088cc:	d9001617 	ldw	r4,88(sp)
 10088d0:	04400044 	movi	r17,1
 10088d4:	880b883a 	mov	r5,r17
 10088d8:	100ac680 	call	100ac68 <__i2b>
 10088dc:	d9800917 	ldw	r6,36(sp)
 10088e0:	1025883a 	mov	r18,r2
 10088e4:	0180040e 	bge	zero,r6,10088f8 <_dtoa_r+0x874>
 10088e8:	d9001617 	ldw	r4,88(sp)
 10088ec:	100b883a 	mov	r5,r2
 10088f0:	100add00 	call	100add0 <__pow5mult>
 10088f4:	1025883a 	mov	r18,r2
 10088f8:	d8801717 	ldw	r2,92(sp)
 10088fc:	8880f30e 	bge	r17,r2,1008ccc <_dtoa_r+0xc48>
 1008900:	0023883a 	mov	r17,zero
 1008904:	d9800917 	ldw	r6,36(sp)
 1008908:	30019e1e 	bne	r6,zero,1008f84 <_dtoa_r+0xf00>
 100890c:	00c00044 	movi	r3,1
 1008910:	d9000a17 	ldw	r4,40(sp)
 1008914:	20c5883a 	add	r2,r4,r3
 1008918:	10c007cc 	andi	r3,r2,31
 100891c:	1800841e 	bne	r3,zero,1008b30 <_dtoa_r+0xaac>
 1008920:	00800704 	movi	r2,28
 1008924:	d9000a17 	ldw	r4,40(sp)
 1008928:	d9801117 	ldw	r6,68(sp)
 100892c:	80a1883a 	add	r16,r16,r2
 1008930:	2089883a 	add	r4,r4,r2
 1008934:	308d883a 	add	r6,r6,r2
 1008938:	d9000a15 	stw	r4,40(sp)
 100893c:	d9801115 	stw	r6,68(sp)
 1008940:	d8801117 	ldw	r2,68(sp)
 1008944:	0080050e 	bge	zero,r2,100895c <_dtoa_r+0x8d8>
 1008948:	d9400717 	ldw	r5,28(sp)
 100894c:	d9001617 	ldw	r4,88(sp)
 1008950:	100d883a 	mov	r6,r2
 1008954:	100a8c80 	call	100a8c8 <__lshift>
 1008958:	d8800715 	stw	r2,28(sp)
 100895c:	d8c00a17 	ldw	r3,40(sp)
 1008960:	00c0050e 	bge	zero,r3,1008978 <_dtoa_r+0x8f4>
 1008964:	d9001617 	ldw	r4,88(sp)
 1008968:	900b883a 	mov	r5,r18
 100896c:	180d883a 	mov	r6,r3
 1008970:	100a8c80 	call	100a8c8 <__lshift>
 1008974:	1025883a 	mov	r18,r2
 1008978:	d9000c17 	ldw	r4,48(sp)
 100897c:	2005003a 	cmpeq	r2,r4,zero
 1008980:	10016f26 	beq	r2,zero,1008f40 <_dtoa_r+0xebc>
 1008984:	d9000f17 	ldw	r4,60(sp)
 1008988:	0102170e 	bge	zero,r4,10091e8 <_dtoa_r+0x1164>
 100898c:	d9800b17 	ldw	r6,44(sp)
 1008990:	3005003a 	cmpeq	r2,r6,zero
 1008994:	1000881e 	bne	r2,zero,1008bb8 <_dtoa_r+0xb34>
 1008998:	0400050e 	bge	zero,r16,10089b0 <_dtoa_r+0x92c>
 100899c:	d9001617 	ldw	r4,88(sp)
 10089a0:	980b883a 	mov	r5,r19
 10089a4:	800d883a 	mov	r6,r16
 10089a8:	100a8c80 	call	100a8c8 <__lshift>
 10089ac:	1027883a 	mov	r19,r2
 10089b0:	8804c03a 	cmpne	r2,r17,zero
 10089b4:	1002541e 	bne	r2,zero,1009308 <_dtoa_r+0x1284>
 10089b8:	980b883a 	mov	r5,r19
 10089bc:	dd800517 	ldw	r22,20(sp)
 10089c0:	dcc00615 	stw	r19,24(sp)
 10089c4:	a700004c 	andi	fp,r20,1
 10089c8:	2827883a 	mov	r19,r5
 10089cc:	d9000717 	ldw	r4,28(sp)
 10089d0:	900b883a 	mov	r5,r18
 10089d4:	1007e400 	call	1007e40 <quorem>
 10089d8:	d9000717 	ldw	r4,28(sp)
 10089dc:	d9400617 	ldw	r5,24(sp)
 10089e0:	1023883a 	mov	r17,r2
 10089e4:	8dc00c04 	addi	r23,r17,48
 10089e8:	100a0e00 	call	100a0e0 <__mcmp>
 10089ec:	d9001617 	ldw	r4,88(sp)
 10089f0:	900b883a 	mov	r5,r18
 10089f4:	980d883a 	mov	r6,r19
 10089f8:	1029883a 	mov	r20,r2
 10089fc:	100a73c0 	call	100a73c <__mdiff>
 1008a00:	102b883a 	mov	r21,r2
 1008a04:	10800317 	ldw	r2,12(r2)
 1008a08:	1001281e 	bne	r2,zero,1008eac <_dtoa_r+0xe28>
 1008a0c:	d9000717 	ldw	r4,28(sp)
 1008a10:	a80b883a 	mov	r5,r21
 1008a14:	100a0e00 	call	100a0e0 <__mcmp>
 1008a18:	d9001617 	ldw	r4,88(sp)
 1008a1c:	1021883a 	mov	r16,r2
 1008a20:	a80b883a 	mov	r5,r21
 1008a24:	1009f840 	call	1009f84 <_Bfree>
 1008a28:	8000041e 	bne	r16,zero,1008a3c <_dtoa_r+0x9b8>
 1008a2c:	d8801717 	ldw	r2,92(sp)
 1008a30:	1000021e 	bne	r2,zero,1008a3c <_dtoa_r+0x9b8>
 1008a34:	e004c03a 	cmpne	r2,fp,zero
 1008a38:	10011726 	beq	r2,zero,1008e98 <_dtoa_r+0xe14>
 1008a3c:	a0010616 	blt	r20,zero,1008e58 <_dtoa_r+0xdd4>
 1008a40:	a000041e 	bne	r20,zero,1008a54 <_dtoa_r+0x9d0>
 1008a44:	d8c01717 	ldw	r3,92(sp)
 1008a48:	1800021e 	bne	r3,zero,1008a54 <_dtoa_r+0x9d0>
 1008a4c:	e004c03a 	cmpne	r2,fp,zero
 1008a50:	10010126 	beq	r2,zero,1008e58 <_dtoa_r+0xdd4>
 1008a54:	04023d16 	blt	zero,r16,100934c <_dtoa_r+0x12c8>
 1008a58:	b5c00005 	stb	r23,0(r22)
 1008a5c:	d9800517 	ldw	r6,20(sp)
 1008a60:	d9000f17 	ldw	r4,60(sp)
 1008a64:	b5800044 	addi	r22,r22,1
 1008a68:	3105883a 	add	r2,r6,r4
 1008a6c:	b0806526 	beq	r22,r2,1008c04 <_dtoa_r+0xb80>
 1008a70:	d9400717 	ldw	r5,28(sp)
 1008a74:	d9001617 	ldw	r4,88(sp)
 1008a78:	01800284 	movi	r6,10
 1008a7c:	000f883a 	mov	r7,zero
 1008a80:	100aca40 	call	100aca4 <__multadd>
 1008a84:	d8800715 	stw	r2,28(sp)
 1008a88:	d8800617 	ldw	r2,24(sp)
 1008a8c:	14c10c26 	beq	r2,r19,1008ec0 <_dtoa_r+0xe3c>
 1008a90:	d9400617 	ldw	r5,24(sp)
 1008a94:	d9001617 	ldw	r4,88(sp)
 1008a98:	01800284 	movi	r6,10
 1008a9c:	000f883a 	mov	r7,zero
 1008aa0:	100aca40 	call	100aca4 <__multadd>
 1008aa4:	d9001617 	ldw	r4,88(sp)
 1008aa8:	980b883a 	mov	r5,r19
 1008aac:	01800284 	movi	r6,10
 1008ab0:	000f883a 	mov	r7,zero
 1008ab4:	d8800615 	stw	r2,24(sp)
 1008ab8:	100aca40 	call	100aca4 <__multadd>
 1008abc:	1027883a 	mov	r19,r2
 1008ac0:	003fc206 	br	10089cc <_dtoa_r+0x948>
 1008ac4:	2445c83a 	sub	r2,r4,r17
 1008ac8:	a088983a 	sll	r4,r20,r2
 1008acc:	003e4b06 	br	10083fc <_dtoa_r+0x378>
 1008ad0:	01bfffc4 	movi	r6,-1
 1008ad4:	00800044 	movi	r2,1
 1008ad8:	d9800e15 	stw	r6,56(sp)
 1008adc:	d9800f15 	stw	r6,60(sp)
 1008ae0:	d8800b15 	stw	r2,44(sp)
 1008ae4:	d8c01617 	ldw	r3,88(sp)
 1008ae8:	008005c4 	movi	r2,23
 1008aec:	18001115 	stw	zero,68(r3)
 1008af0:	1580082e 	bgeu	r2,r22,1008b14 <_dtoa_r+0xa90>
 1008af4:	00c00104 	movi	r3,4
 1008af8:	0009883a 	mov	r4,zero
 1008afc:	18c7883a 	add	r3,r3,r3
 1008b00:	18800504 	addi	r2,r3,20
 1008b04:	21000044 	addi	r4,r4,1
 1008b08:	b0bffc2e 	bgeu	r22,r2,1008afc <_dtoa_r+0xa78>
 1008b0c:	d9801617 	ldw	r6,88(sp)
 1008b10:	31001115 	stw	r4,68(r6)
 1008b14:	dc000f17 	ldw	r16,60(sp)
 1008b18:	003e4b06 	br	1008448 <_dtoa_r+0x3c4>
 1008b1c:	d9801717 	ldw	r6,92(sp)
 1008b20:	0023883a 	mov	r17,zero
 1008b24:	31bfff04 	addi	r6,r6,-4
 1008b28:	d9801715 	stw	r6,92(sp)
 1008b2c:	003df806 	br	1008310 <_dtoa_r+0x28c>
 1008b30:	00800804 	movi	r2,32
 1008b34:	10c9c83a 	sub	r4,r2,r3
 1008b38:	00c00104 	movi	r3,4
 1008b3c:	19005a16 	blt	r3,r4,1008ca8 <_dtoa_r+0xc24>
 1008b40:	008000c4 	movi	r2,3
 1008b44:	113f7e16 	blt	r2,r4,1008940 <_dtoa_r+0x8bc>
 1008b48:	20800704 	addi	r2,r4,28
 1008b4c:	003f7506 	br	1008924 <_dtoa_r+0x8a0>
 1008b50:	d9801717 	ldw	r6,92(sp)
 1008b54:	00800044 	movi	r2,1
 1008b58:	1180a10e 	bge	r2,r6,1008de0 <_dtoa_r+0xd5c>
 1008b5c:	d9800f17 	ldw	r6,60(sp)
 1008b60:	d8c01017 	ldw	r3,64(sp)
 1008b64:	30bfffc4 	addi	r2,r6,-1
 1008b68:	1881c616 	blt	r3,r2,1009284 <_dtoa_r+0x1200>
 1008b6c:	18a5c83a 	sub	r18,r3,r2
 1008b70:	d8800f17 	ldw	r2,60(sp)
 1008b74:	10026216 	blt	r2,zero,1009500 <_dtoa_r+0x147c>
 1008b78:	dc001117 	ldw	r16,68(sp)
 1008b7c:	1007883a 	mov	r3,r2
 1008b80:	d9800a17 	ldw	r6,40(sp)
 1008b84:	d8801117 	ldw	r2,68(sp)
 1008b88:	d9001617 	ldw	r4,88(sp)
 1008b8c:	30cd883a 	add	r6,r6,r3
 1008b90:	10c5883a 	add	r2,r2,r3
 1008b94:	01400044 	movi	r5,1
 1008b98:	d9800a15 	stw	r6,40(sp)
 1008b9c:	d8801115 	stw	r2,68(sp)
 1008ba0:	100ac680 	call	100ac68 <__i2b>
 1008ba4:	1027883a 	mov	r19,r2
 1008ba8:	003f2506 	br	1008840 <_dtoa_r+0x7bc>
 1008bac:	00c04074 	movhi	r3,257
 1008bb0:	18c6ef04 	addi	r3,r3,7100
 1008bb4:	003d6706 	br	1008154 <_dtoa_r+0xd0>
 1008bb8:	dd800517 	ldw	r22,20(sp)
 1008bbc:	04000044 	movi	r16,1
 1008bc0:	00000706 	br	1008be0 <_dtoa_r+0xb5c>
 1008bc4:	d9400717 	ldw	r5,28(sp)
 1008bc8:	d9001617 	ldw	r4,88(sp)
 1008bcc:	01800284 	movi	r6,10
 1008bd0:	000f883a 	mov	r7,zero
 1008bd4:	100aca40 	call	100aca4 <__multadd>
 1008bd8:	d8800715 	stw	r2,28(sp)
 1008bdc:	84000044 	addi	r16,r16,1
 1008be0:	d9000717 	ldw	r4,28(sp)
 1008be4:	900b883a 	mov	r5,r18
 1008be8:	1007e400 	call	1007e40 <quorem>
 1008bec:	15c00c04 	addi	r23,r2,48
 1008bf0:	b5c00005 	stb	r23,0(r22)
 1008bf4:	d8c00f17 	ldw	r3,60(sp)
 1008bf8:	b5800044 	addi	r22,r22,1
 1008bfc:	80fff116 	blt	r16,r3,1008bc4 <_dtoa_r+0xb40>
 1008c00:	d8000615 	stw	zero,24(sp)
 1008c04:	d9400717 	ldw	r5,28(sp)
 1008c08:	d9001617 	ldw	r4,88(sp)
 1008c0c:	01800044 	movi	r6,1
 1008c10:	100a8c80 	call	100a8c8 <__lshift>
 1008c14:	1009883a 	mov	r4,r2
 1008c18:	900b883a 	mov	r5,r18
 1008c1c:	d8800715 	stw	r2,28(sp)
 1008c20:	100a0e00 	call	100a0e0 <__mcmp>
 1008c24:	00803c0e 	bge	zero,r2,1008d18 <_dtoa_r+0xc94>
 1008c28:	b009883a 	mov	r4,r22
 1008c2c:	213fffc4 	addi	r4,r4,-1
 1008c30:	21400003 	ldbu	r5,0(r4)
 1008c34:	00800e44 	movi	r2,57
 1008c38:	28c03fcc 	andi	r3,r5,255
 1008c3c:	18c0201c 	xori	r3,r3,128
 1008c40:	18ffe004 	addi	r3,r3,-128
 1008c44:	1881981e 	bne	r3,r2,10092a8 <_dtoa_r+0x1224>
 1008c48:	d9800517 	ldw	r6,20(sp)
 1008c4c:	21bff71e 	bne	r4,r6,1008c2c <_dtoa_r+0xba8>
 1008c50:	d8800d17 	ldw	r2,52(sp)
 1008c54:	37000044 	addi	fp,r6,1
 1008c58:	10800044 	addi	r2,r2,1
 1008c5c:	d8800d15 	stw	r2,52(sp)
 1008c60:	00800c44 	movi	r2,49
 1008c64:	30800005 	stb	r2,0(r6)
 1008c68:	d9001617 	ldw	r4,88(sp)
 1008c6c:	900b883a 	mov	r5,r18
 1008c70:	1009f840 	call	1009f84 <_Bfree>
 1008c74:	983ecd26 	beq	r19,zero,10087ac <_dtoa_r+0x728>
 1008c78:	d8c00617 	ldw	r3,24(sp)
 1008c7c:	18000426 	beq	r3,zero,1008c90 <_dtoa_r+0xc0c>
 1008c80:	1cc00326 	beq	r3,r19,1008c90 <_dtoa_r+0xc0c>
 1008c84:	d9001617 	ldw	r4,88(sp)
 1008c88:	180b883a 	mov	r5,r3
 1008c8c:	1009f840 	call	1009f84 <_Bfree>
 1008c90:	d9001617 	ldw	r4,88(sp)
 1008c94:	980b883a 	mov	r5,r19
 1008c98:	1009f840 	call	1009f84 <_Bfree>
 1008c9c:	003ec306 	br	10087ac <_dtoa_r+0x728>
 1008ca0:	1805883a 	mov	r2,r3
 1008ca4:	003eeb06 	br	1008854 <_dtoa_r+0x7d0>
 1008ca8:	d9800a17 	ldw	r6,40(sp)
 1008cac:	d8c01117 	ldw	r3,68(sp)
 1008cb0:	20bfff04 	addi	r2,r4,-4
 1008cb4:	308d883a 	add	r6,r6,r2
 1008cb8:	1887883a 	add	r3,r3,r2
 1008cbc:	80a1883a 	add	r16,r16,r2
 1008cc0:	d9800a15 	stw	r6,40(sp)
 1008cc4:	d8c01115 	stw	r3,68(sp)
 1008cc8:	003f1d06 	br	1008940 <_dtoa_r+0x8bc>
 1008ccc:	a03f0c1e 	bne	r20,zero,1008900 <_dtoa_r+0x87c>
 1008cd0:	00800434 	movhi	r2,16
 1008cd4:	10bfffc4 	addi	r2,r2,-1
 1008cd8:	a884703a 	and	r2,r21,r2
 1008cdc:	103f081e 	bne	r2,zero,1008900 <_dtoa_r+0x87c>
 1008ce0:	a89ffc2c 	andhi	r2,r21,32752
 1008ce4:	103f0626 	beq	r2,zero,1008900 <_dtoa_r+0x87c>
 1008ce8:	d8c01117 	ldw	r3,68(sp)
 1008cec:	d9000a17 	ldw	r4,40(sp)
 1008cf0:	18c00044 	addi	r3,r3,1
 1008cf4:	21000044 	addi	r4,r4,1
 1008cf8:	d8c01115 	stw	r3,68(sp)
 1008cfc:	d9000a15 	stw	r4,40(sp)
 1008d00:	003f0006 	br	1008904 <_dtoa_r+0x880>
 1008d04:	d9400717 	ldw	r5,28(sp)
 1008d08:	d9001617 	ldw	r4,88(sp)
 1008d0c:	100add00 	call	100add0 <__pow5mult>
 1008d10:	d8800715 	stw	r2,28(sp)
 1008d14:	003eed06 	br	10088cc <_dtoa_r+0x848>
 1008d18:	1000021e 	bne	r2,zero,1008d24 <_dtoa_r+0xca0>
 1008d1c:	b880004c 	andi	r2,r23,1
 1008d20:	103fc11e 	bne	r2,zero,1008c28 <_dtoa_r+0xba4>
 1008d24:	b5bfffc4 	addi	r22,r22,-1
 1008d28:	b0c00007 	ldb	r3,0(r22)
 1008d2c:	00800c04 	movi	r2,48
 1008d30:	18bffc26 	beq	r3,r2,1008d24 <_dtoa_r+0xca0>
 1008d34:	b7000044 	addi	fp,r22,1
 1008d38:	003fcb06 	br	1008c68 <_dtoa_r+0xbe4>
 1008d3c:	d9800d17 	ldw	r6,52(sp)
 1008d40:	018fc83a 	sub	r7,zero,r6
 1008d44:	3801f726 	beq	r7,zero,1009524 <_dtoa_r+0x14a0>
 1008d48:	398003cc 	andi	r6,r7,15
 1008d4c:	300c90fa 	slli	r6,r6,3
 1008d50:	01404074 	movhi	r5,257
 1008d54:	29470c04 	addi	r5,r5,7216
 1008d58:	d9001217 	ldw	r4,72(sp)
 1008d5c:	314d883a 	add	r6,r6,r5
 1008d60:	30c00117 	ldw	r3,4(r6)
 1008d64:	30800017 	ldw	r2,0(r6)
 1008d68:	d9401317 	ldw	r5,76(sp)
 1008d6c:	3821d13a 	srai	r16,r7,4
 1008d70:	100d883a 	mov	r6,r2
 1008d74:	180f883a 	mov	r7,r3
 1008d78:	100cd780 	call	100cd78 <__muldf3>
 1008d7c:	1011883a 	mov	r8,r2
 1008d80:	1813883a 	mov	r9,r3
 1008d84:	1029883a 	mov	r20,r2
 1008d88:	182b883a 	mov	r21,r3
 1008d8c:	8001e526 	beq	r16,zero,1009524 <_dtoa_r+0x14a0>
 1008d90:	05800084 	movi	r22,2
 1008d94:	04404074 	movhi	r17,257
 1008d98:	8c473e04 	addi	r17,r17,7416
 1008d9c:	8080004c 	andi	r2,r16,1
 1008da0:	1005003a 	cmpeq	r2,r2,zero
 1008da4:	1000081e 	bne	r2,zero,1008dc8 <_dtoa_r+0xd44>
 1008da8:	89800017 	ldw	r6,0(r17)
 1008dac:	89c00117 	ldw	r7,4(r17)
 1008db0:	480b883a 	mov	r5,r9
 1008db4:	4009883a 	mov	r4,r8
 1008db8:	100cd780 	call	100cd78 <__muldf3>
 1008dbc:	1011883a 	mov	r8,r2
 1008dc0:	b5800044 	addi	r22,r22,1
 1008dc4:	1813883a 	mov	r9,r3
 1008dc8:	8021d07a 	srai	r16,r16,1
 1008dcc:	8c400204 	addi	r17,r17,8
 1008dd0:	803ff21e 	bne	r16,zero,1008d9c <_dtoa_r+0xd18>
 1008dd4:	4029883a 	mov	r20,r8
 1008dd8:	482b883a 	mov	r21,r9
 1008ddc:	003dca06 	br	1008508 <_dtoa_r+0x484>
 1008de0:	d9000817 	ldw	r4,32(sp)
 1008de4:	2005003a 	cmpeq	r2,r4,zero
 1008de8:	1001f61e 	bne	r2,zero,10095c4 <_dtoa_r+0x1540>
 1008dec:	dc001117 	ldw	r16,68(sp)
 1008df0:	dc801017 	ldw	r18,64(sp)
 1008df4:	18c10cc4 	addi	r3,r3,1075
 1008df8:	003f6106 	br	1008b80 <_dtoa_r+0xafc>
 1008dfc:	d8000b15 	stw	zero,44(sp)
 1008e00:	d9802617 	ldw	r6,152(sp)
 1008e04:	d8c00d17 	ldw	r3,52(sp)
 1008e08:	30800044 	addi	r2,r6,1
 1008e0c:	18ad883a 	add	r22,r3,r2
 1008e10:	b13fffc4 	addi	r4,r22,-1
 1008e14:	d9000e15 	stw	r4,56(sp)
 1008e18:	0581f60e 	bge	zero,r22,10095f4 <_dtoa_r+0x1570>
 1008e1c:	dd800f15 	stw	r22,60(sp)
 1008e20:	003f3006 	br	1008ae4 <_dtoa_r+0xa60>
 1008e24:	d8000b15 	stw	zero,44(sp)
 1008e28:	d9002617 	ldw	r4,152(sp)
 1008e2c:	0101eb0e 	bge	zero,r4,10095dc <_dtoa_r+0x1558>
 1008e30:	202d883a 	mov	r22,r4
 1008e34:	d9000e15 	stw	r4,56(sp)
 1008e38:	d9000f15 	stw	r4,60(sp)
 1008e3c:	003f2906 	br	1008ae4 <_dtoa_r+0xa60>
 1008e40:	01800044 	movi	r6,1
 1008e44:	d9800b15 	stw	r6,44(sp)
 1008e48:	003ff706 	br	1008e28 <_dtoa_r+0xda4>
 1008e4c:	01000044 	movi	r4,1
 1008e50:	d9000b15 	stw	r4,44(sp)
 1008e54:	003fea06 	br	1008e00 <_dtoa_r+0xd7c>
 1008e58:	04000c0e 	bge	zero,r16,1008e8c <_dtoa_r+0xe08>
 1008e5c:	d9400717 	ldw	r5,28(sp)
 1008e60:	d9001617 	ldw	r4,88(sp)
 1008e64:	01800044 	movi	r6,1
 1008e68:	100a8c80 	call	100a8c8 <__lshift>
 1008e6c:	1009883a 	mov	r4,r2
 1008e70:	900b883a 	mov	r5,r18
 1008e74:	d8800715 	stw	r2,28(sp)
 1008e78:	100a0e00 	call	100a0e0 <__mcmp>
 1008e7c:	0081e00e 	bge	zero,r2,1009600 <_dtoa_r+0x157c>
 1008e80:	bdc00044 	addi	r23,r23,1
 1008e84:	00800e84 	movi	r2,58
 1008e88:	b881a226 	beq	r23,r2,1009514 <_dtoa_r+0x1490>
 1008e8c:	b7000044 	addi	fp,r22,1
 1008e90:	b5c00005 	stb	r23,0(r22)
 1008e94:	003f7406 	br	1008c68 <_dtoa_r+0xbe4>
 1008e98:	00800e44 	movi	r2,57
 1008e9c:	b8819d26 	beq	r23,r2,1009514 <_dtoa_r+0x1490>
 1008ea0:	053ffa0e 	bge	zero,r20,1008e8c <_dtoa_r+0xe08>
 1008ea4:	8dc00c44 	addi	r23,r17,49
 1008ea8:	003ff806 	br	1008e8c <_dtoa_r+0xe08>
 1008eac:	d9001617 	ldw	r4,88(sp)
 1008eb0:	a80b883a 	mov	r5,r21
 1008eb4:	04000044 	movi	r16,1
 1008eb8:	1009f840 	call	1009f84 <_Bfree>
 1008ebc:	003edf06 	br	1008a3c <_dtoa_r+0x9b8>
 1008ec0:	d9001617 	ldw	r4,88(sp)
 1008ec4:	980b883a 	mov	r5,r19
 1008ec8:	01800284 	movi	r6,10
 1008ecc:	000f883a 	mov	r7,zero
 1008ed0:	100aca40 	call	100aca4 <__multadd>
 1008ed4:	1027883a 	mov	r19,r2
 1008ed8:	d8800615 	stw	r2,24(sp)
 1008edc:	003ebb06 	br	10089cc <_dtoa_r+0x948>
 1008ee0:	d9801117 	ldw	r6,68(sp)
 1008ee4:	d8800d17 	ldw	r2,52(sp)
 1008ee8:	d8000915 	stw	zero,36(sp)
 1008eec:	308dc83a 	sub	r6,r6,r2
 1008ef0:	0087c83a 	sub	r3,zero,r2
 1008ef4:	d9801115 	stw	r6,68(sp)
 1008ef8:	d8c01015 	stw	r3,64(sp)
 1008efc:	003cfe06 	br	10082f8 <_dtoa_r+0x274>
 1008f00:	018dc83a 	sub	r6,zero,r6
 1008f04:	d9801115 	stw	r6,68(sp)
 1008f08:	d8000a15 	stw	zero,40(sp)
 1008f0c:	003cf306 	br	10082dc <_dtoa_r+0x258>
 1008f10:	d9000d17 	ldw	r4,52(sp)
 1008f14:	100d63c0 	call	100d63c <__floatsidf>
 1008f18:	880b883a 	mov	r5,r17
 1008f1c:	8009883a 	mov	r4,r16
 1008f20:	180f883a 	mov	r7,r3
 1008f24:	100d883a 	mov	r6,r2
 1008f28:	100d41c0 	call	100d41c <__nedf2>
 1008f2c:	103ce126 	beq	r2,zero,10082b4 <_dtoa_r+0x230>
 1008f30:	d9800d17 	ldw	r6,52(sp)
 1008f34:	31bfffc4 	addi	r6,r6,-1
 1008f38:	d9800d15 	stw	r6,52(sp)
 1008f3c:	003cdd06 	br	10082b4 <_dtoa_r+0x230>
 1008f40:	d9000717 	ldw	r4,28(sp)
 1008f44:	900b883a 	mov	r5,r18
 1008f48:	100a0e00 	call	100a0e0 <__mcmp>
 1008f4c:	103e8d0e 	bge	r2,zero,1008984 <_dtoa_r+0x900>
 1008f50:	d9400717 	ldw	r5,28(sp)
 1008f54:	d9001617 	ldw	r4,88(sp)
 1008f58:	01800284 	movi	r6,10
 1008f5c:	000f883a 	mov	r7,zero
 1008f60:	100aca40 	call	100aca4 <__multadd>
 1008f64:	d9800d17 	ldw	r6,52(sp)
 1008f68:	d8800715 	stw	r2,28(sp)
 1008f6c:	31bfffc4 	addi	r6,r6,-1
 1008f70:	d9800d15 	stw	r6,52(sp)
 1008f74:	b001a71e 	bne	r22,zero,1009614 <_dtoa_r+0x1590>
 1008f78:	d8800e17 	ldw	r2,56(sp)
 1008f7c:	d8800f15 	stw	r2,60(sp)
 1008f80:	003e8006 	br	1008984 <_dtoa_r+0x900>
 1008f84:	90800417 	ldw	r2,16(r18)
 1008f88:	1085883a 	add	r2,r2,r2
 1008f8c:	1085883a 	add	r2,r2,r2
 1008f90:	1485883a 	add	r2,r2,r18
 1008f94:	11000417 	ldw	r4,16(r2)
 1008f98:	1009fac0 	call	1009fac <__hi0bits>
 1008f9c:	00c00804 	movi	r3,32
 1008fa0:	1887c83a 	sub	r3,r3,r2
 1008fa4:	003e5a06 	br	1008910 <_dtoa_r+0x88c>
 1008fa8:	d9400717 	ldw	r5,28(sp)
 1008fac:	d9801017 	ldw	r6,64(sp)
 1008fb0:	d9001617 	ldw	r4,88(sp)
 1008fb4:	100add00 	call	100add0 <__pow5mult>
 1008fb8:	d8800715 	stw	r2,28(sp)
 1008fbc:	003e4306 	br	10088cc <_dtoa_r+0x848>
 1008fc0:	d9800f17 	ldw	r6,60(sp)
 1008fc4:	d8800d17 	ldw	r2,52(sp)
 1008fc8:	d9800315 	stw	r6,12(sp)
 1008fcc:	d8800415 	stw	r2,16(sp)
 1008fd0:	d8c00b17 	ldw	r3,44(sp)
 1008fd4:	1805003a 	cmpeq	r2,r3,zero
 1008fd8:	1000e21e 	bne	r2,zero,1009364 <_dtoa_r+0x12e0>
 1008fdc:	d9000317 	ldw	r4,12(sp)
 1008fe0:	0005883a 	mov	r2,zero
 1008fe4:	00cff834 	movhi	r3,16352
 1008fe8:	200c90fa 	slli	r6,r4,3
 1008fec:	01004074 	movhi	r4,257
 1008ff0:	21070c04 	addi	r4,r4,7216
 1008ff4:	180b883a 	mov	r5,r3
 1008ff8:	310d883a 	add	r6,r6,r4
 1008ffc:	327fff17 	ldw	r9,-4(r6)
 1009000:	323ffe17 	ldw	r8,-8(r6)
 1009004:	1009883a 	mov	r4,r2
 1009008:	480f883a 	mov	r7,r9
 100900c:	400d883a 	mov	r6,r8
 1009010:	100d13c0 	call	100d13c <__divdf3>
 1009014:	180b883a 	mov	r5,r3
 1009018:	b00d883a 	mov	r6,r22
 100901c:	b80f883a 	mov	r7,r23
 1009020:	1009883a 	mov	r4,r2
 1009024:	100cc840 	call	100cc84 <__subdf3>
 1009028:	a80b883a 	mov	r5,r21
 100902c:	a009883a 	mov	r4,r20
 1009030:	d8c01915 	stw	r3,100(sp)
 1009034:	d8801815 	stw	r2,96(sp)
 1009038:	100d7340 	call	100d734 <__fixdfsi>
 100903c:	1009883a 	mov	r4,r2
 1009040:	1027883a 	mov	r19,r2
 1009044:	100d63c0 	call	100d63c <__floatsidf>
 1009048:	a80b883a 	mov	r5,r21
 100904c:	a009883a 	mov	r4,r20
 1009050:	180f883a 	mov	r7,r3
 1009054:	100d883a 	mov	r6,r2
 1009058:	100cc840 	call	100cc84 <__subdf3>
 100905c:	d9801817 	ldw	r6,96(sp)
 1009060:	1823883a 	mov	r17,r3
 1009064:	d8801415 	stw	r2,80(sp)
 1009068:	302d883a 	mov	r22,r6
 100906c:	d9800517 	ldw	r6,20(sp)
 1009070:	9cc00c04 	addi	r19,r19,48
 1009074:	dc401515 	stw	r17,84(sp)
 1009078:	d8c01917 	ldw	r3,100(sp)
 100907c:	34c00005 	stb	r19,0(r6)
 1009080:	d8800517 	ldw	r2,20(sp)
 1009084:	d9401917 	ldw	r5,100(sp)
 1009088:	d9801417 	ldw	r6,80(sp)
 100908c:	b009883a 	mov	r4,r22
 1009090:	880f883a 	mov	r7,r17
 1009094:	182f883a 	mov	r23,r3
 1009098:	17000044 	addi	fp,r2,1
 100909c:	100d4a40 	call	100d4a4 <__gtdf2>
 10090a0:	00804e16 	blt	zero,r2,10091dc <_dtoa_r+0x1158>
 10090a4:	d9801417 	ldw	r6,80(sp)
 10090a8:	0005883a 	mov	r2,zero
 10090ac:	00cffc34 	movhi	r3,16368
 10090b0:	180b883a 	mov	r5,r3
 10090b4:	880f883a 	mov	r7,r17
 10090b8:	1009883a 	mov	r4,r2
 10090bc:	100cc840 	call	100cc84 <__subdf3>
 10090c0:	d9401917 	ldw	r5,100(sp)
 10090c4:	180f883a 	mov	r7,r3
 10090c8:	b009883a 	mov	r4,r22
 10090cc:	100d883a 	mov	r6,r2
 10090d0:	100d4a40 	call	100d4a4 <__gtdf2>
 10090d4:	00bda216 	blt	zero,r2,1008760 <_dtoa_r+0x6dc>
 10090d8:	d8c00317 	ldw	r3,12(sp)
 10090dc:	00800044 	movi	r2,1
 10090e0:	10c01216 	blt	r2,r3,100912c <_dtoa_r+0x10a8>
 10090e4:	003d4506 	br	10085fc <_dtoa_r+0x578>
 10090e8:	d9801417 	ldw	r6,80(sp)
 10090ec:	0005883a 	mov	r2,zero
 10090f0:	00cffc34 	movhi	r3,16368
 10090f4:	180b883a 	mov	r5,r3
 10090f8:	880f883a 	mov	r7,r17
 10090fc:	1009883a 	mov	r4,r2
 1009100:	100cc840 	call	100cc84 <__subdf3>
 1009104:	d9c01b17 	ldw	r7,108(sp)
 1009108:	180b883a 	mov	r5,r3
 100910c:	1009883a 	mov	r4,r2
 1009110:	b00d883a 	mov	r6,r22
 1009114:	100d5b40 	call	100d5b4 <__ltdf2>
 1009118:	103d9116 	blt	r2,zero,1008760 <_dtoa_r+0x6dc>
 100911c:	d9800517 	ldw	r6,20(sp)
 1009120:	d9000317 	ldw	r4,12(sp)
 1009124:	3105883a 	add	r2,r6,r4
 1009128:	e0bd3426 	beq	fp,r2,10085fc <_dtoa_r+0x578>
 100912c:	04500934 	movhi	r17,16420
 1009130:	0021883a 	mov	r16,zero
 1009134:	b80b883a 	mov	r5,r23
 1009138:	b009883a 	mov	r4,r22
 100913c:	800d883a 	mov	r6,r16
 1009140:	880f883a 	mov	r7,r17
 1009144:	100cd780 	call	100cd78 <__muldf3>
 1009148:	d9401517 	ldw	r5,84(sp)
 100914c:	d9001417 	ldw	r4,80(sp)
 1009150:	880f883a 	mov	r7,r17
 1009154:	000d883a 	mov	r6,zero
 1009158:	d8801a15 	stw	r2,104(sp)
 100915c:	d8c01b15 	stw	r3,108(sp)
 1009160:	100cd780 	call	100cd78 <__muldf3>
 1009164:	180b883a 	mov	r5,r3
 1009168:	1009883a 	mov	r4,r2
 100916c:	1823883a 	mov	r17,r3
 1009170:	1021883a 	mov	r16,r2
 1009174:	100d7340 	call	100d734 <__fixdfsi>
 1009178:	1009883a 	mov	r4,r2
 100917c:	102b883a 	mov	r21,r2
 1009180:	100d63c0 	call	100d63c <__floatsidf>
 1009184:	880b883a 	mov	r5,r17
 1009188:	8009883a 	mov	r4,r16
 100918c:	180f883a 	mov	r7,r3
 1009190:	100d883a 	mov	r6,r2
 1009194:	100cc840 	call	100cc84 <__subdf3>
 1009198:	1021883a 	mov	r16,r2
 100919c:	d9001b17 	ldw	r4,108(sp)
 10091a0:	1823883a 	mov	r17,r3
 10091a4:	dc001415 	stw	r16,80(sp)
 10091a8:	ad400c04 	addi	r21,r21,48
 10091ac:	dc401515 	stw	r17,84(sp)
 10091b0:	d8801a17 	ldw	r2,104(sp)
 10091b4:	e5400005 	stb	r21,0(fp)
 10091b8:	202f883a 	mov	r23,r4
 10091bc:	d9c01b17 	ldw	r7,108(sp)
 10091c0:	d9001417 	ldw	r4,80(sp)
 10091c4:	880b883a 	mov	r5,r17
 10091c8:	100d883a 	mov	r6,r2
 10091cc:	102d883a 	mov	r22,r2
 10091d0:	e7000044 	addi	fp,fp,1
 10091d4:	100d5b40 	call	100d5b4 <__ltdf2>
 10091d8:	103fc30e 	bge	r2,zero,10090e8 <_dtoa_r+0x1064>
 10091dc:	d9000417 	ldw	r4,16(sp)
 10091e0:	d9000d15 	stw	r4,52(sp)
 10091e4:	003d7106 	br	10087ac <_dtoa_r+0x728>
 10091e8:	d9801717 	ldw	r6,92(sp)
 10091ec:	00800084 	movi	r2,2
 10091f0:	11bde60e 	bge	r2,r6,100898c <_dtoa_r+0x908>
 10091f4:	203cfb1e 	bne	r4,zero,10085e4 <_dtoa_r+0x560>
 10091f8:	d9001617 	ldw	r4,88(sp)
 10091fc:	900b883a 	mov	r5,r18
 1009200:	01800144 	movi	r6,5
 1009204:	000f883a 	mov	r7,zero
 1009208:	100aca40 	call	100aca4 <__multadd>
 100920c:	d9000717 	ldw	r4,28(sp)
 1009210:	100b883a 	mov	r5,r2
 1009214:	1025883a 	mov	r18,r2
 1009218:	100a0e00 	call	100a0e0 <__mcmp>
 100921c:	00bcf10e 	bge	zero,r2,10085e4 <_dtoa_r+0x560>
 1009220:	d8c00d17 	ldw	r3,52(sp)
 1009224:	d9000517 	ldw	r4,20(sp)
 1009228:	d8000615 	stw	zero,24(sp)
 100922c:	18c00044 	addi	r3,r3,1
 1009230:	d8c00d15 	stw	r3,52(sp)
 1009234:	00800c44 	movi	r2,49
 1009238:	27000044 	addi	fp,r4,1
 100923c:	20800005 	stb	r2,0(r4)
 1009240:	003e8906 	br	1008c68 <_dtoa_r+0xbe4>
 1009244:	d8c00517 	ldw	r3,20(sp)
 1009248:	003bc206 	br	1008154 <_dtoa_r+0xd0>
 100924c:	01804074 	movhi	r6,257
 1009250:	31873e04 	addi	r6,r6,7416
 1009254:	30c00917 	ldw	r3,36(r6)
 1009258:	30800817 	ldw	r2,32(r6)
 100925c:	d9001217 	ldw	r4,72(sp)
 1009260:	d9401317 	ldw	r5,76(sp)
 1009264:	180f883a 	mov	r7,r3
 1009268:	100d883a 	mov	r6,r2
 100926c:	100d13c0 	call	100d13c <__divdf3>
 1009270:	948003cc 	andi	r18,r18,15
 1009274:	058000c4 	movi	r22,3
 1009278:	1029883a 	mov	r20,r2
 100927c:	182b883a 	mov	r21,r3
 1009280:	003c8906 	br	10084a8 <_dtoa_r+0x424>
 1009284:	d9001017 	ldw	r4,64(sp)
 1009288:	d9800917 	ldw	r6,36(sp)
 100928c:	0025883a 	mov	r18,zero
 1009290:	1105c83a 	sub	r2,r2,r4
 1009294:	2089883a 	add	r4,r4,r2
 1009298:	308d883a 	add	r6,r6,r2
 100929c:	d9001015 	stw	r4,64(sp)
 10092a0:	d9800915 	stw	r6,36(sp)
 10092a4:	003e3206 	br	1008b70 <_dtoa_r+0xaec>
 10092a8:	28800044 	addi	r2,r5,1
 10092ac:	27000044 	addi	fp,r4,1
 10092b0:	20800005 	stb	r2,0(r4)
 10092b4:	003e6c06 	br	1008c68 <_dtoa_r+0xbe4>
 10092b8:	d8800f17 	ldw	r2,60(sp)
 10092bc:	00bce016 	blt	zero,r2,1008640 <_dtoa_r+0x5bc>
 10092c0:	d9800f17 	ldw	r6,60(sp)
 10092c4:	303cc51e 	bne	r6,zero,10085dc <_dtoa_r+0x558>
 10092c8:	0005883a 	mov	r2,zero
 10092cc:	00d00534 	movhi	r3,16404
 10092d0:	980b883a 	mov	r5,r19
 10092d4:	180f883a 	mov	r7,r3
 10092d8:	9009883a 	mov	r4,r18
 10092dc:	100d883a 	mov	r6,r2
 10092e0:	100cd780 	call	100cd78 <__muldf3>
 10092e4:	180b883a 	mov	r5,r3
 10092e8:	a80f883a 	mov	r7,r21
 10092ec:	1009883a 	mov	r4,r2
 10092f0:	a00d883a 	mov	r6,r20
 10092f4:	100d52c0 	call	100d52c <__gedf2>
 10092f8:	103cb80e 	bge	r2,zero,10085dc <_dtoa_r+0x558>
 10092fc:	0027883a 	mov	r19,zero
 1009300:	0025883a 	mov	r18,zero
 1009304:	003fc606 	br	1009220 <_dtoa_r+0x119c>
 1009308:	99400117 	ldw	r5,4(r19)
 100930c:	d9001617 	ldw	r4,88(sp)
 1009310:	100a5040 	call	100a504 <_Balloc>
 1009314:	99800417 	ldw	r6,16(r19)
 1009318:	11000304 	addi	r4,r2,12
 100931c:	99400304 	addi	r5,r19,12
 1009320:	318d883a 	add	r6,r6,r6
 1009324:	318d883a 	add	r6,r6,r6
 1009328:	31800204 	addi	r6,r6,8
 100932c:	1023883a 	mov	r17,r2
 1009330:	1009e040 	call	1009e04 <memcpy>
 1009334:	d9001617 	ldw	r4,88(sp)
 1009338:	880b883a 	mov	r5,r17
 100933c:	01800044 	movi	r6,1
 1009340:	100a8c80 	call	100a8c8 <__lshift>
 1009344:	100b883a 	mov	r5,r2
 1009348:	003d9c06 	br	10089bc <_dtoa_r+0x938>
 100934c:	00800e44 	movi	r2,57
 1009350:	b8807026 	beq	r23,r2,1009514 <_dtoa_r+0x1490>
 1009354:	b8800044 	addi	r2,r23,1
 1009358:	b7000044 	addi	fp,r22,1
 100935c:	b0800005 	stb	r2,0(r22)
 1009360:	003e4106 	br	1008c68 <_dtoa_r+0xbe4>
 1009364:	d8800317 	ldw	r2,12(sp)
 1009368:	01804074 	movhi	r6,257
 100936c:	31870c04 	addi	r6,r6,7216
 1009370:	b009883a 	mov	r4,r22
 1009374:	100e90fa 	slli	r7,r2,3
 1009378:	b80b883a 	mov	r5,r23
 100937c:	398f883a 	add	r7,r7,r6
 1009380:	38bffe17 	ldw	r2,-8(r7)
 1009384:	d9800517 	ldw	r6,20(sp)
 1009388:	38ffff17 	ldw	r3,-4(r7)
 100938c:	37000044 	addi	fp,r6,1
 1009390:	180f883a 	mov	r7,r3
 1009394:	100d883a 	mov	r6,r2
 1009398:	100cd780 	call	100cd78 <__muldf3>
 100939c:	a80b883a 	mov	r5,r21
 10093a0:	a009883a 	mov	r4,r20
 10093a4:	182f883a 	mov	r23,r3
 10093a8:	102d883a 	mov	r22,r2
 10093ac:	100d7340 	call	100d734 <__fixdfsi>
 10093b0:	1009883a 	mov	r4,r2
 10093b4:	1027883a 	mov	r19,r2
 10093b8:	100d63c0 	call	100d63c <__floatsidf>
 10093bc:	a80b883a 	mov	r5,r21
 10093c0:	a009883a 	mov	r4,r20
 10093c4:	180f883a 	mov	r7,r3
 10093c8:	100d883a 	mov	r6,r2
 10093cc:	100cc840 	call	100cc84 <__subdf3>
 10093d0:	180b883a 	mov	r5,r3
 10093d4:	d8c00517 	ldw	r3,20(sp)
 10093d8:	9cc00c04 	addi	r19,r19,48
 10093dc:	1009883a 	mov	r4,r2
 10093e0:	1cc00005 	stb	r19,0(r3)
 10093e4:	2021883a 	mov	r16,r4
 10093e8:	d9000317 	ldw	r4,12(sp)
 10093ec:	00800044 	movi	r2,1
 10093f0:	2823883a 	mov	r17,r5
 10093f4:	20802226 	beq	r4,r2,1009480 <_dtoa_r+0x13fc>
 10093f8:	1029883a 	mov	r20,r2
 10093fc:	0005883a 	mov	r2,zero
 1009400:	00d00934 	movhi	r3,16420
 1009404:	180f883a 	mov	r7,r3
 1009408:	100d883a 	mov	r6,r2
 100940c:	880b883a 	mov	r5,r17
 1009410:	8009883a 	mov	r4,r16
 1009414:	100cd780 	call	100cd78 <__muldf3>
 1009418:	180b883a 	mov	r5,r3
 100941c:	1009883a 	mov	r4,r2
 1009420:	1823883a 	mov	r17,r3
 1009424:	1021883a 	mov	r16,r2
 1009428:	100d7340 	call	100d734 <__fixdfsi>
 100942c:	1009883a 	mov	r4,r2
 1009430:	102b883a 	mov	r21,r2
 1009434:	100d63c0 	call	100d63c <__floatsidf>
 1009438:	880b883a 	mov	r5,r17
 100943c:	8009883a 	mov	r4,r16
 1009440:	180f883a 	mov	r7,r3
 1009444:	100d883a 	mov	r6,r2
 1009448:	100cc840 	call	100cc84 <__subdf3>
 100944c:	180b883a 	mov	r5,r3
 1009450:	d8c00517 	ldw	r3,20(sp)
 1009454:	1009883a 	mov	r4,r2
 1009458:	ad400c04 	addi	r21,r21,48
 100945c:	1d05883a 	add	r2,r3,r20
 1009460:	15400005 	stb	r21,0(r2)
 1009464:	2021883a 	mov	r16,r4
 1009468:	d9000317 	ldw	r4,12(sp)
 100946c:	a5000044 	addi	r20,r20,1
 1009470:	2823883a 	mov	r17,r5
 1009474:	a13fe11e 	bne	r20,r4,10093fc <_dtoa_r+0x1378>
 1009478:	e505883a 	add	r2,fp,r20
 100947c:	173fffc4 	addi	fp,r2,-1
 1009480:	0025883a 	mov	r18,zero
 1009484:	04cff834 	movhi	r19,16352
 1009488:	b009883a 	mov	r4,r22
 100948c:	b80b883a 	mov	r5,r23
 1009490:	900d883a 	mov	r6,r18
 1009494:	980f883a 	mov	r7,r19
 1009498:	100cd040 	call	100cd04 <__adddf3>
 100949c:	180b883a 	mov	r5,r3
 10094a0:	1009883a 	mov	r4,r2
 10094a4:	800d883a 	mov	r6,r16
 10094a8:	880f883a 	mov	r7,r17
 10094ac:	100d5b40 	call	100d5b4 <__ltdf2>
 10094b0:	103cab16 	blt	r2,zero,1008760 <_dtoa_r+0x6dc>
 10094b4:	0009883a 	mov	r4,zero
 10094b8:	980b883a 	mov	r5,r19
 10094bc:	b80f883a 	mov	r7,r23
 10094c0:	b00d883a 	mov	r6,r22
 10094c4:	100cc840 	call	100cc84 <__subdf3>
 10094c8:	180b883a 	mov	r5,r3
 10094cc:	880f883a 	mov	r7,r17
 10094d0:	1009883a 	mov	r4,r2
 10094d4:	800d883a 	mov	r6,r16
 10094d8:	100d4a40 	call	100d4a4 <__gtdf2>
 10094dc:	00bc470e 	bge	zero,r2,10085fc <_dtoa_r+0x578>
 10094e0:	00c00c04 	movi	r3,48
 10094e4:	e73fffc4 	addi	fp,fp,-1
 10094e8:	e0800007 	ldb	r2,0(fp)
 10094ec:	10fffd26 	beq	r2,r3,10094e4 <_dtoa_r+0x1460>
 10094f0:	d9800417 	ldw	r6,16(sp)
 10094f4:	e7000044 	addi	fp,fp,1
 10094f8:	d9800d15 	stw	r6,52(sp)
 10094fc:	003cab06 	br	10087ac <_dtoa_r+0x728>
 1009500:	d8c00f17 	ldw	r3,60(sp)
 1009504:	d9001117 	ldw	r4,68(sp)
 1009508:	20e1c83a 	sub	r16,r4,r3
 100950c:	0007883a 	mov	r3,zero
 1009510:	003d9b06 	br	1008b80 <_dtoa_r+0xafc>
 1009514:	00800e44 	movi	r2,57
 1009518:	b0800005 	stb	r2,0(r22)
 100951c:	b5800044 	addi	r22,r22,1
 1009520:	003dc106 	br	1008c28 <_dtoa_r+0xba4>
 1009524:	05800084 	movi	r22,2
 1009528:	003bf706 	br	1008508 <_dtoa_r+0x484>
 100952c:	d9000f17 	ldw	r4,60(sp)
 1009530:	013c000e 	bge	zero,r4,1008534 <_dtoa_r+0x4b0>
 1009534:	d9800e17 	ldw	r6,56(sp)
 1009538:	01bc300e 	bge	zero,r6,10085fc <_dtoa_r+0x578>
 100953c:	0005883a 	mov	r2,zero
 1009540:	00d00934 	movhi	r3,16420
 1009544:	a80b883a 	mov	r5,r21
 1009548:	180f883a 	mov	r7,r3
 100954c:	a009883a 	mov	r4,r20
 1009550:	100d883a 	mov	r6,r2
 1009554:	100cd780 	call	100cd78 <__muldf3>
 1009558:	b1000044 	addi	r4,r22,1
 100955c:	1021883a 	mov	r16,r2
 1009560:	1823883a 	mov	r17,r3
 1009564:	100d63c0 	call	100d63c <__floatsidf>
 1009568:	880b883a 	mov	r5,r17
 100956c:	8009883a 	mov	r4,r16
 1009570:	180f883a 	mov	r7,r3
 1009574:	100d883a 	mov	r6,r2
 1009578:	100cd780 	call	100cd78 <__muldf3>
 100957c:	0011883a 	mov	r8,zero
 1009580:	02500734 	movhi	r9,16412
 1009584:	180b883a 	mov	r5,r3
 1009588:	480f883a 	mov	r7,r9
 100958c:	1009883a 	mov	r4,r2
 1009590:	400d883a 	mov	r6,r8
 1009594:	100cd040 	call	100cd04 <__adddf3>
 1009598:	102d883a 	mov	r22,r2
 100959c:	00bf3034 	movhi	r2,64704
 10095a0:	10ef883a 	add	r23,r2,r3
 10095a4:	d8800d17 	ldw	r2,52(sp)
 10095a8:	d8c00e17 	ldw	r3,56(sp)
 10095ac:	8029883a 	mov	r20,r16
 10095b0:	10bfffc4 	addi	r2,r2,-1
 10095b4:	882b883a 	mov	r21,r17
 10095b8:	d8800415 	stw	r2,16(sp)
 10095bc:	d8c00315 	stw	r3,12(sp)
 10095c0:	003e8306 	br	1008fd0 <_dtoa_r+0xf4c>
 10095c4:	d8800117 	ldw	r2,4(sp)
 10095c8:	dc001117 	ldw	r16,68(sp)
 10095cc:	dc801017 	ldw	r18,64(sp)
 10095d0:	00c00d84 	movi	r3,54
 10095d4:	1887c83a 	sub	r3,r3,r2
 10095d8:	003d6906 	br	1008b80 <_dtoa_r+0xafc>
 10095dc:	01800044 	movi	r6,1
 10095e0:	3021883a 	mov	r16,r6
 10095e4:	d9800f15 	stw	r6,60(sp)
 10095e8:	d9802615 	stw	r6,152(sp)
 10095ec:	d9800e15 	stw	r6,56(sp)
 10095f0:	003b9306 	br	1008440 <_dtoa_r+0x3bc>
 10095f4:	b021883a 	mov	r16,r22
 10095f8:	dd800f15 	stw	r22,60(sp)
 10095fc:	003b9006 	br	1008440 <_dtoa_r+0x3bc>
 1009600:	103e221e 	bne	r2,zero,1008e8c <_dtoa_r+0xe08>
 1009604:	b880004c 	andi	r2,r23,1
 1009608:	1005003a 	cmpeq	r2,r2,zero
 100960c:	103e1f1e 	bne	r2,zero,1008e8c <_dtoa_r+0xe08>
 1009610:	003e1b06 	br	1008e80 <_dtoa_r+0xdfc>
 1009614:	d9001617 	ldw	r4,88(sp)
 1009618:	980b883a 	mov	r5,r19
 100961c:	01800284 	movi	r6,10
 1009620:	000f883a 	mov	r7,zero
 1009624:	100aca40 	call	100aca4 <__multadd>
 1009628:	d8c00e17 	ldw	r3,56(sp)
 100962c:	1027883a 	mov	r19,r2
 1009630:	d8c00f15 	stw	r3,60(sp)
 1009634:	003cd306 	br	1008984 <_dtoa_r+0x900>

01009638 <__sflags>:
 1009638:	28c00007 	ldb	r3,0(r5)
 100963c:	00801c84 	movi	r2,114
 1009640:	18800926 	beq	r3,r2,1009668 <__sflags+0x30>
 1009644:	00801dc4 	movi	r2,119
 1009648:	18801426 	beq	r3,r2,100969c <__sflags+0x64>
 100964c:	00801844 	movi	r2,97
 1009650:	18801626 	beq	r3,r2,10096ac <__sflags+0x74>
 1009654:	0007883a 	mov	r3,zero
 1009658:	00800584 	movi	r2,22
 100965c:	20800015 	stw	r2,0(r4)
 1009660:	1805883a 	mov	r2,r3
 1009664:	f800283a 	ret
 1009668:	000f883a 	mov	r7,zero
 100966c:	0011883a 	mov	r8,zero
 1009670:	00c00104 	movi	r3,4
 1009674:	28800047 	ldb	r2,1(r5)
 1009678:	10000426 	beq	r2,zero,100968c <__sflags+0x54>
 100967c:	01000ac4 	movi	r4,43
 1009680:	11000e26 	beq	r2,r4,10096bc <__sflags+0x84>
 1009684:	28800087 	ldb	r2,2(r5)
 1009688:	11000c26 	beq	r2,r4,10096bc <__sflags+0x84>
 100968c:	3a04b03a 	or	r2,r7,r8
 1009690:	30800015 	stw	r2,0(r6)
 1009694:	1805883a 	mov	r2,r3
 1009698:	f800283a 	ret
 100969c:	01c00044 	movi	r7,1
 10096a0:	02018004 	movi	r8,1536
 10096a4:	00c00204 	movi	r3,8
 10096a8:	003ff206 	br	1009674 <__sflags+0x3c>
 10096ac:	01c00044 	movi	r7,1
 10096b0:	02008204 	movi	r8,520
 10096b4:	00c04204 	movi	r3,264
 10096b8:	003fee06 	br	1009674 <__sflags+0x3c>
 10096bc:	00bffcc4 	movi	r2,-13
 10096c0:	1884703a 	and	r2,r3,r2
 10096c4:	01c00084 	movi	r7,2
 10096c8:	10c00414 	ori	r3,r2,16
 10096cc:	3a04b03a 	or	r2,r7,r8
 10096d0:	30800015 	stw	r2,0(r6)
 10096d4:	003fef06 	br	1009694 <__sflags+0x5c>

010096d8 <__sfvwrite_r>:
 10096d8:	30800217 	ldw	r2,8(r6)
 10096dc:	defff504 	addi	sp,sp,-44
 10096e0:	df000915 	stw	fp,36(sp)
 10096e4:	dd800715 	stw	r22,28(sp)
 10096e8:	dc800315 	stw	r18,12(sp)
 10096ec:	dfc00a15 	stw	ra,40(sp)
 10096f0:	ddc00815 	stw	r23,32(sp)
 10096f4:	dd400615 	stw	r21,24(sp)
 10096f8:	dd000515 	stw	r20,20(sp)
 10096fc:	dcc00415 	stw	r19,16(sp)
 1009700:	dc400215 	stw	r17,8(sp)
 1009704:	dc000115 	stw	r16,4(sp)
 1009708:	302d883a 	mov	r22,r6
 100970c:	2039883a 	mov	fp,r4
 1009710:	2825883a 	mov	r18,r5
 1009714:	10001c26 	beq	r2,zero,1009788 <__sfvwrite_r+0xb0>
 1009718:	29c0030b 	ldhu	r7,12(r5)
 100971c:	3880020c 	andi	r2,r7,8
 1009720:	10002726 	beq	r2,zero,10097c0 <__sfvwrite_r+0xe8>
 1009724:	28800417 	ldw	r2,16(r5)
 1009728:	10002526 	beq	r2,zero,10097c0 <__sfvwrite_r+0xe8>
 100972c:	3880008c 	andi	r2,r7,2
 1009730:	b5400017 	ldw	r21,0(r22)
 1009734:	10002826 	beq	r2,zero,10097d8 <__sfvwrite_r+0x100>
 1009738:	0021883a 	mov	r16,zero
 100973c:	0023883a 	mov	r17,zero
 1009740:	880d883a 	mov	r6,r17
 1009744:	e009883a 	mov	r4,fp
 1009748:	00810004 	movi	r2,1024
 100974c:	80006e26 	beq	r16,zero,1009908 <__sfvwrite_r+0x230>
 1009750:	800f883a 	mov	r7,r16
 1009754:	91400717 	ldw	r5,28(r18)
 1009758:	1400012e 	bgeu	r2,r16,1009760 <__sfvwrite_r+0x88>
 100975c:	100f883a 	mov	r7,r2
 1009760:	90c00917 	ldw	r3,36(r18)
 1009764:	183ee83a 	callr	r3
 1009768:	1007883a 	mov	r3,r2
 100976c:	80a1c83a 	sub	r16,r16,r2
 1009770:	88a3883a 	add	r17,r17,r2
 1009774:	00806d0e 	bge	zero,r2,100992c <__sfvwrite_r+0x254>
 1009778:	b0800217 	ldw	r2,8(r22)
 100977c:	10c5c83a 	sub	r2,r2,r3
 1009780:	b0800215 	stw	r2,8(r22)
 1009784:	103fee1e 	bne	r2,zero,1009740 <__sfvwrite_r+0x68>
 1009788:	0009883a 	mov	r4,zero
 100978c:	2005883a 	mov	r2,r4
 1009790:	dfc00a17 	ldw	ra,40(sp)
 1009794:	df000917 	ldw	fp,36(sp)
 1009798:	ddc00817 	ldw	r23,32(sp)
 100979c:	dd800717 	ldw	r22,28(sp)
 10097a0:	dd400617 	ldw	r21,24(sp)
 10097a4:	dd000517 	ldw	r20,20(sp)
 10097a8:	dcc00417 	ldw	r19,16(sp)
 10097ac:	dc800317 	ldw	r18,12(sp)
 10097b0:	dc400217 	ldw	r17,8(sp)
 10097b4:	dc000117 	ldw	r16,4(sp)
 10097b8:	dec00b04 	addi	sp,sp,44
 10097bc:	f800283a 	ret
 10097c0:	1007c940 	call	1007c94 <__swsetup_r>
 10097c4:	1000e41e 	bne	r2,zero,1009b58 <__sfvwrite_r+0x480>
 10097c8:	91c0030b 	ldhu	r7,12(r18)
 10097cc:	b5400017 	ldw	r21,0(r22)
 10097d0:	3880008c 	andi	r2,r7,2
 10097d4:	103fd81e 	bne	r2,zero,1009738 <__sfvwrite_r+0x60>
 10097d8:	3880004c 	andi	r2,r7,1
 10097dc:	1005003a 	cmpeq	r2,r2,zero
 10097e0:	10005726 	beq	r2,zero,1009940 <__sfvwrite_r+0x268>
 10097e4:	0029883a 	mov	r20,zero
 10097e8:	002f883a 	mov	r23,zero
 10097ec:	a0004226 	beq	r20,zero,10098f8 <__sfvwrite_r+0x220>
 10097f0:	3880800c 	andi	r2,r7,512
 10097f4:	94000217 	ldw	r16,8(r18)
 10097f8:	10008b26 	beq	r2,zero,1009a28 <__sfvwrite_r+0x350>
 10097fc:	800d883a 	mov	r6,r16
 1009800:	a400a536 	bltu	r20,r16,1009a98 <__sfvwrite_r+0x3c0>
 1009804:	3881200c 	andi	r2,r7,1152
 1009808:	10002726 	beq	r2,zero,10098a8 <__sfvwrite_r+0x1d0>
 100980c:	90800517 	ldw	r2,20(r18)
 1009810:	92000417 	ldw	r8,16(r18)
 1009814:	91400017 	ldw	r5,0(r18)
 1009818:	1087883a 	add	r3,r2,r2
 100981c:	1887883a 	add	r3,r3,r2
 1009820:	1808d7fa 	srli	r4,r3,31
 1009824:	2a21c83a 	sub	r16,r5,r8
 1009828:	80800044 	addi	r2,r16,1
 100982c:	20c9883a 	add	r4,r4,r3
 1009830:	2027d07a 	srai	r19,r4,1
 1009834:	a085883a 	add	r2,r20,r2
 1009838:	980d883a 	mov	r6,r19
 100983c:	9880022e 	bgeu	r19,r2,1009848 <__sfvwrite_r+0x170>
 1009840:	1027883a 	mov	r19,r2
 1009844:	100d883a 	mov	r6,r2
 1009848:	3881000c 	andi	r2,r7,1024
 100984c:	1000b826 	beq	r2,zero,1009b30 <__sfvwrite_r+0x458>
 1009850:	300b883a 	mov	r5,r6
 1009854:	e009883a 	mov	r4,fp
 1009858:	1004a600 	call	1004a60 <_malloc_r>
 100985c:	10003126 	beq	r2,zero,1009924 <__sfvwrite_r+0x24c>
 1009860:	91400417 	ldw	r5,16(r18)
 1009864:	1009883a 	mov	r4,r2
 1009868:	800d883a 	mov	r6,r16
 100986c:	1023883a 	mov	r17,r2
 1009870:	1009e040 	call	1009e04 <memcpy>
 1009874:	90c0030b 	ldhu	r3,12(r18)
 1009878:	00beffc4 	movi	r2,-1025
 100987c:	1886703a 	and	r3,r3,r2
 1009880:	18c02014 	ori	r3,r3,128
 1009884:	90c0030d 	sth	r3,12(r18)
 1009888:	9c07c83a 	sub	r3,r19,r16
 100988c:	8c05883a 	add	r2,r17,r16
 1009890:	a00d883a 	mov	r6,r20
 1009894:	a021883a 	mov	r16,r20
 1009898:	90800015 	stw	r2,0(r18)
 100989c:	90c00215 	stw	r3,8(r18)
 10098a0:	94400415 	stw	r17,16(r18)
 10098a4:	94c00515 	stw	r19,20(r18)
 10098a8:	91000017 	ldw	r4,0(r18)
 10098ac:	b80b883a 	mov	r5,r23
 10098b0:	a023883a 	mov	r17,r20
 10098b4:	1009ea40 	call	1009ea4 <memmove>
 10098b8:	90c00217 	ldw	r3,8(r18)
 10098bc:	90800017 	ldw	r2,0(r18)
 10098c0:	a027883a 	mov	r19,r20
 10098c4:	1c07c83a 	sub	r3,r3,r16
 10098c8:	1405883a 	add	r2,r2,r16
 10098cc:	90c00215 	stw	r3,8(r18)
 10098d0:	a021883a 	mov	r16,r20
 10098d4:	90800015 	stw	r2,0(r18)
 10098d8:	b0800217 	ldw	r2,8(r22)
 10098dc:	1405c83a 	sub	r2,r2,r16
 10098e0:	b0800215 	stw	r2,8(r22)
 10098e4:	103fa826 	beq	r2,zero,1009788 <__sfvwrite_r+0xb0>
 10098e8:	a469c83a 	sub	r20,r20,r17
 10098ec:	91c0030b 	ldhu	r7,12(r18)
 10098f0:	bcef883a 	add	r23,r23,r19
 10098f4:	a03fbe1e 	bne	r20,zero,10097f0 <__sfvwrite_r+0x118>
 10098f8:	adc00017 	ldw	r23,0(r21)
 10098fc:	ad000117 	ldw	r20,4(r21)
 1009900:	ad400204 	addi	r21,r21,8
 1009904:	003fb906 	br	10097ec <__sfvwrite_r+0x114>
 1009908:	ac400017 	ldw	r17,0(r21)
 100990c:	ac000117 	ldw	r16,4(r21)
 1009910:	ad400204 	addi	r21,r21,8
 1009914:	003f8a06 	br	1009740 <__sfvwrite_r+0x68>
 1009918:	91400417 	ldw	r5,16(r18)
 100991c:	e009883a 	mov	r4,fp
 1009920:	1003d280 	call	1003d28 <_free_r>
 1009924:	00800304 	movi	r2,12
 1009928:	e0800015 	stw	r2,0(fp)
 100992c:	9080030b 	ldhu	r2,12(r18)
 1009930:	013fffc4 	movi	r4,-1
 1009934:	10801014 	ori	r2,r2,64
 1009938:	9080030d 	sth	r2,12(r18)
 100993c:	003f9306 	br	100978c <__sfvwrite_r+0xb4>
 1009940:	0027883a 	mov	r19,zero
 1009944:	002f883a 	mov	r23,zero
 1009948:	d8000015 	stw	zero,0(sp)
 100994c:	0029883a 	mov	r20,zero
 1009950:	98001e26 	beq	r19,zero,10099cc <__sfvwrite_r+0x2f4>
 1009954:	d8c00017 	ldw	r3,0(sp)
 1009958:	1804c03a 	cmpne	r2,r3,zero
 100995c:	10005e26 	beq	r2,zero,1009ad8 <__sfvwrite_r+0x400>
 1009960:	9821883a 	mov	r16,r19
 1009964:	a4c0012e 	bgeu	r20,r19,100996c <__sfvwrite_r+0x294>
 1009968:	a021883a 	mov	r16,r20
 100996c:	91000017 	ldw	r4,0(r18)
 1009970:	90800417 	ldw	r2,16(r18)
 1009974:	91800217 	ldw	r6,8(r18)
 1009978:	91c00517 	ldw	r7,20(r18)
 100997c:	1100022e 	bgeu	r2,r4,1009988 <__sfvwrite_r+0x2b0>
 1009980:	31e3883a 	add	r17,r6,r7
 1009984:	8c001616 	blt	r17,r16,10099e0 <__sfvwrite_r+0x308>
 1009988:	81c03816 	blt	r16,r7,1009a6c <__sfvwrite_r+0x394>
 100998c:	90c00917 	ldw	r3,36(r18)
 1009990:	91400717 	ldw	r5,28(r18)
 1009994:	e009883a 	mov	r4,fp
 1009998:	b80d883a 	mov	r6,r23
 100999c:	183ee83a 	callr	r3
 10099a0:	1023883a 	mov	r17,r2
 10099a4:	00bfe10e 	bge	zero,r2,100992c <__sfvwrite_r+0x254>
 10099a8:	a469c83a 	sub	r20,r20,r17
 10099ac:	a0001826 	beq	r20,zero,1009a10 <__sfvwrite_r+0x338>
 10099b0:	b0800217 	ldw	r2,8(r22)
 10099b4:	1445c83a 	sub	r2,r2,r17
 10099b8:	b0800215 	stw	r2,8(r22)
 10099bc:	103f7226 	beq	r2,zero,1009788 <__sfvwrite_r+0xb0>
 10099c0:	9c67c83a 	sub	r19,r19,r17
 10099c4:	bc6f883a 	add	r23,r23,r17
 10099c8:	983fe21e 	bne	r19,zero,1009954 <__sfvwrite_r+0x27c>
 10099cc:	adc00017 	ldw	r23,0(r21)
 10099d0:	acc00117 	ldw	r19,4(r21)
 10099d4:	ad400204 	addi	r21,r21,8
 10099d8:	d8000015 	stw	zero,0(sp)
 10099dc:	003fdc06 	br	1009950 <__sfvwrite_r+0x278>
 10099e0:	b80b883a 	mov	r5,r23
 10099e4:	880d883a 	mov	r6,r17
 10099e8:	1009ea40 	call	1009ea4 <memmove>
 10099ec:	90c00017 	ldw	r3,0(r18)
 10099f0:	e009883a 	mov	r4,fp
 10099f4:	900b883a 	mov	r5,r18
 10099f8:	1c47883a 	add	r3,r3,r17
 10099fc:	90c00015 	stw	r3,0(r18)
 1009a00:	10035c80 	call	10035c8 <_fflush_r>
 1009a04:	103fc91e 	bne	r2,zero,100992c <__sfvwrite_r+0x254>
 1009a08:	a469c83a 	sub	r20,r20,r17
 1009a0c:	a03fe81e 	bne	r20,zero,10099b0 <__sfvwrite_r+0x2d8>
 1009a10:	e009883a 	mov	r4,fp
 1009a14:	900b883a 	mov	r5,r18
 1009a18:	10035c80 	call	10035c8 <_fflush_r>
 1009a1c:	103fc31e 	bne	r2,zero,100992c <__sfvwrite_r+0x254>
 1009a20:	d8000015 	stw	zero,0(sp)
 1009a24:	003fe206 	br	10099b0 <__sfvwrite_r+0x2d8>
 1009a28:	91000017 	ldw	r4,0(r18)
 1009a2c:	90800417 	ldw	r2,16(r18)
 1009a30:	1100022e 	bgeu	r2,r4,1009a3c <__sfvwrite_r+0x364>
 1009a34:	8023883a 	mov	r17,r16
 1009a38:	85003136 	bltu	r16,r20,1009b00 <__sfvwrite_r+0x428>
 1009a3c:	91c00517 	ldw	r7,20(r18)
 1009a40:	a1c01836 	bltu	r20,r7,1009aa4 <__sfvwrite_r+0x3cc>
 1009a44:	90c00917 	ldw	r3,36(r18)
 1009a48:	91400717 	ldw	r5,28(r18)
 1009a4c:	e009883a 	mov	r4,fp
 1009a50:	b80d883a 	mov	r6,r23
 1009a54:	183ee83a 	callr	r3
 1009a58:	1021883a 	mov	r16,r2
 1009a5c:	00bfb30e 	bge	zero,r2,100992c <__sfvwrite_r+0x254>
 1009a60:	1023883a 	mov	r17,r2
 1009a64:	1027883a 	mov	r19,r2
 1009a68:	003f9b06 	br	10098d8 <__sfvwrite_r+0x200>
 1009a6c:	b80b883a 	mov	r5,r23
 1009a70:	800d883a 	mov	r6,r16
 1009a74:	1009ea40 	call	1009ea4 <memmove>
 1009a78:	90c00217 	ldw	r3,8(r18)
 1009a7c:	90800017 	ldw	r2,0(r18)
 1009a80:	8023883a 	mov	r17,r16
 1009a84:	1c07c83a 	sub	r3,r3,r16
 1009a88:	1405883a 	add	r2,r2,r16
 1009a8c:	90c00215 	stw	r3,8(r18)
 1009a90:	90800015 	stw	r2,0(r18)
 1009a94:	003fc406 	br	10099a8 <__sfvwrite_r+0x2d0>
 1009a98:	a00d883a 	mov	r6,r20
 1009a9c:	a021883a 	mov	r16,r20
 1009aa0:	003f8106 	br	10098a8 <__sfvwrite_r+0x1d0>
 1009aa4:	b80b883a 	mov	r5,r23
 1009aa8:	a00d883a 	mov	r6,r20
 1009aac:	1009ea40 	call	1009ea4 <memmove>
 1009ab0:	90c00217 	ldw	r3,8(r18)
 1009ab4:	90800017 	ldw	r2,0(r18)
 1009ab8:	a021883a 	mov	r16,r20
 1009abc:	1d07c83a 	sub	r3,r3,r20
 1009ac0:	1505883a 	add	r2,r2,r20
 1009ac4:	a023883a 	mov	r17,r20
 1009ac8:	a027883a 	mov	r19,r20
 1009acc:	90c00215 	stw	r3,8(r18)
 1009ad0:	90800015 	stw	r2,0(r18)
 1009ad4:	003f8006 	br	10098d8 <__sfvwrite_r+0x200>
 1009ad8:	b809883a 	mov	r4,r23
 1009adc:	01400284 	movi	r5,10
 1009ae0:	980d883a 	mov	r6,r19
 1009ae4:	1009d200 	call	1009d20 <memchr>
 1009ae8:	10001726 	beq	r2,zero,1009b48 <__sfvwrite_r+0x470>
 1009aec:	15c5c83a 	sub	r2,r2,r23
 1009af0:	15000044 	addi	r20,r2,1
 1009af4:	00800044 	movi	r2,1
 1009af8:	d8800015 	stw	r2,0(sp)
 1009afc:	003f9806 	br	1009960 <__sfvwrite_r+0x288>
 1009b00:	b80b883a 	mov	r5,r23
 1009b04:	800d883a 	mov	r6,r16
 1009b08:	1009ea40 	call	1009ea4 <memmove>
 1009b0c:	90c00017 	ldw	r3,0(r18)
 1009b10:	e009883a 	mov	r4,fp
 1009b14:	900b883a 	mov	r5,r18
 1009b18:	1c07883a 	add	r3,r3,r16
 1009b1c:	90c00015 	stw	r3,0(r18)
 1009b20:	8027883a 	mov	r19,r16
 1009b24:	10035c80 	call	10035c8 <_fflush_r>
 1009b28:	103f6b26 	beq	r2,zero,10098d8 <__sfvwrite_r+0x200>
 1009b2c:	003f7f06 	br	100992c <__sfvwrite_r+0x254>
 1009b30:	400b883a 	mov	r5,r8
 1009b34:	e009883a 	mov	r4,fp
 1009b38:	100b2740 	call	100b274 <_realloc_r>
 1009b3c:	103f7626 	beq	r2,zero,1009918 <__sfvwrite_r+0x240>
 1009b40:	1023883a 	mov	r17,r2
 1009b44:	003f5006 	br	1009888 <__sfvwrite_r+0x1b0>
 1009b48:	00c00044 	movi	r3,1
 1009b4c:	9d000044 	addi	r20,r19,1
 1009b50:	d8c00015 	stw	r3,0(sp)
 1009b54:	003f8206 	br	1009960 <__sfvwrite_r+0x288>
 1009b58:	9080030b 	ldhu	r2,12(r18)
 1009b5c:	00c00244 	movi	r3,9
 1009b60:	013fffc4 	movi	r4,-1
 1009b64:	10801014 	ori	r2,r2,64
 1009b68:	9080030d 	sth	r2,12(r18)
 1009b6c:	e0c00015 	stw	r3,0(fp)
 1009b70:	003f0606 	br	100978c <__sfvwrite_r+0xb4>

01009b74 <_isatty_r>:
 1009b74:	defffd04 	addi	sp,sp,-12
 1009b78:	dc000015 	stw	r16,0(sp)
 1009b7c:	04004074 	movhi	r16,257
 1009b80:	84155304 	addi	r16,r16,21836
 1009b84:	dc400115 	stw	r17,4(sp)
 1009b88:	80000015 	stw	zero,0(r16)
 1009b8c:	2023883a 	mov	r17,r4
 1009b90:	2809883a 	mov	r4,r5
 1009b94:	dfc00215 	stw	ra,8(sp)
 1009b98:	100e4e80 	call	100e4e8 <isatty>
 1009b9c:	1007883a 	mov	r3,r2
 1009ba0:	00bfffc4 	movi	r2,-1
 1009ba4:	18800626 	beq	r3,r2,1009bc0 <_isatty_r+0x4c>
 1009ba8:	1805883a 	mov	r2,r3
 1009bac:	dfc00217 	ldw	ra,8(sp)
 1009bb0:	dc400117 	ldw	r17,4(sp)
 1009bb4:	dc000017 	ldw	r16,0(sp)
 1009bb8:	dec00304 	addi	sp,sp,12
 1009bbc:	f800283a 	ret
 1009bc0:	80800017 	ldw	r2,0(r16)
 1009bc4:	103ff826 	beq	r2,zero,1009ba8 <_isatty_r+0x34>
 1009bc8:	88800015 	stw	r2,0(r17)
 1009bcc:	1805883a 	mov	r2,r3
 1009bd0:	dfc00217 	ldw	ra,8(sp)
 1009bd4:	dc400117 	ldw	r17,4(sp)
 1009bd8:	dc000017 	ldw	r16,0(sp)
 1009bdc:	dec00304 	addi	sp,sp,12
 1009be0:	f800283a 	ret

01009be4 <__locale_charset>:
 1009be4:	d0a00c17 	ldw	r2,-32720(gp)
 1009be8:	f800283a 	ret

01009bec <_localeconv_r>:
 1009bec:	00804074 	movhi	r2,257
 1009bf0:	10870004 	addi	r2,r2,7168
 1009bf4:	f800283a 	ret

01009bf8 <localeconv>:
 1009bf8:	00804074 	movhi	r2,257
 1009bfc:	108e6a04 	addi	r2,r2,14760
 1009c00:	11000017 	ldw	r4,0(r2)
 1009c04:	1009bec1 	jmpi	1009bec <_localeconv_r>

01009c08 <_setlocale_r>:
 1009c08:	defffc04 	addi	sp,sp,-16
 1009c0c:	00c04074 	movhi	r3,257
 1009c10:	18c6d604 	addi	r3,r3,7000
 1009c14:	dc800215 	stw	r18,8(sp)
 1009c18:	dc400115 	stw	r17,4(sp)
 1009c1c:	dc000015 	stw	r16,0(sp)
 1009c20:	2023883a 	mov	r17,r4
 1009c24:	2825883a 	mov	r18,r5
 1009c28:	dfc00315 	stw	ra,12(sp)
 1009c2c:	3021883a 	mov	r16,r6
 1009c30:	3009883a 	mov	r4,r6
 1009c34:	180b883a 	mov	r5,r3
 1009c38:	30000926 	beq	r6,zero,1009c60 <_setlocale_r+0x58>
 1009c3c:	100b8d80 	call	100b8d8 <strcmp>
 1009c40:	8009883a 	mov	r4,r16
 1009c44:	01404074 	movhi	r5,257
 1009c48:	2946e704 	addi	r5,r5,7068
 1009c4c:	10000b1e 	bne	r2,zero,1009c7c <_setlocale_r+0x74>
 1009c50:	8c000d15 	stw	r16,52(r17)
 1009c54:	8c800c15 	stw	r18,48(r17)
 1009c58:	00c04074 	movhi	r3,257
 1009c5c:	18c6d604 	addi	r3,r3,7000
 1009c60:	1805883a 	mov	r2,r3
 1009c64:	dfc00317 	ldw	ra,12(sp)
 1009c68:	dc800217 	ldw	r18,8(sp)
 1009c6c:	dc400117 	ldw	r17,4(sp)
 1009c70:	dc000017 	ldw	r16,0(sp)
 1009c74:	dec00404 	addi	sp,sp,16
 1009c78:	f800283a 	ret
 1009c7c:	100b8d80 	call	100b8d8 <strcmp>
 1009c80:	0007883a 	mov	r3,zero
 1009c84:	103ff226 	beq	r2,zero,1009c50 <_setlocale_r+0x48>
 1009c88:	003ff506 	br	1009c60 <_setlocale_r+0x58>

01009c8c <setlocale>:
 1009c8c:	01804074 	movhi	r6,257
 1009c90:	318e6a04 	addi	r6,r6,14760
 1009c94:	2007883a 	mov	r3,r4
 1009c98:	31000017 	ldw	r4,0(r6)
 1009c9c:	280d883a 	mov	r6,r5
 1009ca0:	180b883a 	mov	r5,r3
 1009ca4:	1009c081 	jmpi	1009c08 <_setlocale_r>

01009ca8 <_lseek_r>:
 1009ca8:	defffd04 	addi	sp,sp,-12
 1009cac:	dc000015 	stw	r16,0(sp)
 1009cb0:	04004074 	movhi	r16,257
 1009cb4:	84155304 	addi	r16,r16,21836
 1009cb8:	dc400115 	stw	r17,4(sp)
 1009cbc:	80000015 	stw	zero,0(r16)
 1009cc0:	2023883a 	mov	r17,r4
 1009cc4:	2809883a 	mov	r4,r5
 1009cc8:	300b883a 	mov	r5,r6
 1009ccc:	380d883a 	mov	r6,r7
 1009cd0:	dfc00215 	stw	ra,8(sp)
 1009cd4:	100e8980 	call	100e898 <lseek>
 1009cd8:	1007883a 	mov	r3,r2
 1009cdc:	00bfffc4 	movi	r2,-1
 1009ce0:	18800626 	beq	r3,r2,1009cfc <_lseek_r+0x54>
 1009ce4:	1805883a 	mov	r2,r3
 1009ce8:	dfc00217 	ldw	ra,8(sp)
 1009cec:	dc400117 	ldw	r17,4(sp)
 1009cf0:	dc000017 	ldw	r16,0(sp)
 1009cf4:	dec00304 	addi	sp,sp,12
 1009cf8:	f800283a 	ret
 1009cfc:	80800017 	ldw	r2,0(r16)
 1009d00:	103ff826 	beq	r2,zero,1009ce4 <_lseek_r+0x3c>
 1009d04:	88800015 	stw	r2,0(r17)
 1009d08:	1805883a 	mov	r2,r3
 1009d0c:	dfc00217 	ldw	ra,8(sp)
 1009d10:	dc400117 	ldw	r17,4(sp)
 1009d14:	dc000017 	ldw	r16,0(sp)
 1009d18:	dec00304 	addi	sp,sp,12
 1009d1c:	f800283a 	ret

01009d20 <memchr>:
 1009d20:	008000c4 	movi	r2,3
 1009d24:	29403fcc 	andi	r5,r5,255
 1009d28:	2007883a 	mov	r3,r4
 1009d2c:	1180022e 	bgeu	r2,r6,1009d38 <memchr+0x18>
 1009d30:	2084703a 	and	r2,r4,r2
 1009d34:	10000b26 	beq	r2,zero,1009d64 <memchr+0x44>
 1009d38:	313fffc4 	addi	r4,r6,-1
 1009d3c:	3000051e 	bne	r6,zero,1009d54 <memchr+0x34>
 1009d40:	00002c06 	br	1009df4 <memchr+0xd4>
 1009d44:	213fffc4 	addi	r4,r4,-1
 1009d48:	00bfffc4 	movi	r2,-1
 1009d4c:	18c00044 	addi	r3,r3,1
 1009d50:	20802826 	beq	r4,r2,1009df4 <memchr+0xd4>
 1009d54:	18800003 	ldbu	r2,0(r3)
 1009d58:	28bffa1e 	bne	r5,r2,1009d44 <memchr+0x24>
 1009d5c:	1805883a 	mov	r2,r3
 1009d60:	f800283a 	ret
 1009d64:	0011883a 	mov	r8,zero
 1009d68:	0007883a 	mov	r3,zero
 1009d6c:	01c00104 	movi	r7,4
 1009d70:	4004923a 	slli	r2,r8,8
 1009d74:	18c00044 	addi	r3,r3,1
 1009d78:	1151883a 	add	r8,r2,r5
 1009d7c:	19fffc1e 	bne	r3,r7,1009d70 <memchr+0x50>
 1009d80:	02bfbff4 	movhi	r10,65279
 1009d84:	52bfbfc4 	addi	r10,r10,-257
 1009d88:	02602074 	movhi	r9,32897
 1009d8c:	4a602004 	addi	r9,r9,-32640
 1009d90:	02c000c4 	movi	r11,3
 1009d94:	20800017 	ldw	r2,0(r4)
 1009d98:	31bfff04 	addi	r6,r6,-4
 1009d9c:	200f883a 	mov	r7,r4
 1009da0:	1204f03a 	xor	r2,r2,r8
 1009da4:	1287883a 	add	r3,r2,r10
 1009da8:	1a46703a 	and	r3,r3,r9
 1009dac:	0084303a 	nor	r2,zero,r2
 1009db0:	10c4703a 	and	r2,r2,r3
 1009db4:	10000b26 	beq	r2,zero,1009de4 <memchr+0xc4>
 1009db8:	20800003 	ldbu	r2,0(r4)
 1009dbc:	28800f26 	beq	r5,r2,1009dfc <memchr+0xdc>
 1009dc0:	20800043 	ldbu	r2,1(r4)
 1009dc4:	21c00044 	addi	r7,r4,1
 1009dc8:	28800c26 	beq	r5,r2,1009dfc <memchr+0xdc>
 1009dcc:	20800083 	ldbu	r2,2(r4)
 1009dd0:	21c00084 	addi	r7,r4,2
 1009dd4:	28800926 	beq	r5,r2,1009dfc <memchr+0xdc>
 1009dd8:	208000c3 	ldbu	r2,3(r4)
 1009ddc:	21c000c4 	addi	r7,r4,3
 1009de0:	28800626 	beq	r5,r2,1009dfc <memchr+0xdc>
 1009de4:	21000104 	addi	r4,r4,4
 1009de8:	59bfea36 	bltu	r11,r6,1009d94 <memchr+0x74>
 1009dec:	2007883a 	mov	r3,r4
 1009df0:	003fd106 	br	1009d38 <memchr+0x18>
 1009df4:	0005883a 	mov	r2,zero
 1009df8:	f800283a 	ret
 1009dfc:	3805883a 	mov	r2,r7
 1009e00:	f800283a 	ret

01009e04 <memcpy>:
 1009e04:	01c003c4 	movi	r7,15
 1009e08:	2007883a 	mov	r3,r4
 1009e0c:	3980032e 	bgeu	r7,r6,1009e1c <memcpy+0x18>
 1009e10:	2904b03a 	or	r2,r5,r4
 1009e14:	108000cc 	andi	r2,r2,3
 1009e18:	10000926 	beq	r2,zero,1009e40 <memcpy+0x3c>
 1009e1c:	30000626 	beq	r6,zero,1009e38 <memcpy+0x34>
 1009e20:	30cd883a 	add	r6,r6,r3
 1009e24:	28800003 	ldbu	r2,0(r5)
 1009e28:	29400044 	addi	r5,r5,1
 1009e2c:	18800005 	stb	r2,0(r3)
 1009e30:	18c00044 	addi	r3,r3,1
 1009e34:	30fffb1e 	bne	r6,r3,1009e24 <memcpy+0x20>
 1009e38:	2005883a 	mov	r2,r4
 1009e3c:	f800283a 	ret
 1009e40:	3811883a 	mov	r8,r7
 1009e44:	200f883a 	mov	r7,r4
 1009e48:	28c00017 	ldw	r3,0(r5)
 1009e4c:	31bffc04 	addi	r6,r6,-16
 1009e50:	38c00015 	stw	r3,0(r7)
 1009e54:	28800117 	ldw	r2,4(r5)
 1009e58:	38800115 	stw	r2,4(r7)
 1009e5c:	28c00217 	ldw	r3,8(r5)
 1009e60:	38c00215 	stw	r3,8(r7)
 1009e64:	28800317 	ldw	r2,12(r5)
 1009e68:	29400404 	addi	r5,r5,16
 1009e6c:	38800315 	stw	r2,12(r7)
 1009e70:	39c00404 	addi	r7,r7,16
 1009e74:	41bff436 	bltu	r8,r6,1009e48 <memcpy+0x44>
 1009e78:	008000c4 	movi	r2,3
 1009e7c:	1180072e 	bgeu	r2,r6,1009e9c <memcpy+0x98>
 1009e80:	1007883a 	mov	r3,r2
 1009e84:	28800017 	ldw	r2,0(r5)
 1009e88:	31bfff04 	addi	r6,r6,-4
 1009e8c:	29400104 	addi	r5,r5,4
 1009e90:	38800015 	stw	r2,0(r7)
 1009e94:	39c00104 	addi	r7,r7,4
 1009e98:	19bffa36 	bltu	r3,r6,1009e84 <memcpy+0x80>
 1009e9c:	3807883a 	mov	r3,r7
 1009ea0:	003fde06 	br	1009e1c <memcpy+0x18>

01009ea4 <memmove>:
 1009ea4:	2807883a 	mov	r3,r5
 1009ea8:	2011883a 	mov	r8,r4
 1009eac:	29000c2e 	bgeu	r5,r4,1009ee0 <memmove+0x3c>
 1009eb0:	298f883a 	add	r7,r5,r6
 1009eb4:	21c00a2e 	bgeu	r4,r7,1009ee0 <memmove+0x3c>
 1009eb8:	30000726 	beq	r6,zero,1009ed8 <memmove+0x34>
 1009ebc:	2187883a 	add	r3,r4,r6
 1009ec0:	198dc83a 	sub	r6,r3,r6
 1009ec4:	39ffffc4 	addi	r7,r7,-1
 1009ec8:	38800003 	ldbu	r2,0(r7)
 1009ecc:	18ffffc4 	addi	r3,r3,-1
 1009ed0:	18800005 	stb	r2,0(r3)
 1009ed4:	19bffb1e 	bne	r3,r6,1009ec4 <memmove+0x20>
 1009ed8:	2005883a 	mov	r2,r4
 1009edc:	f800283a 	ret
 1009ee0:	01c003c4 	movi	r7,15
 1009ee4:	39800a36 	bltu	r7,r6,1009f10 <memmove+0x6c>
 1009ee8:	303ffb26 	beq	r6,zero,1009ed8 <memmove+0x34>
 1009eec:	400f883a 	mov	r7,r8
 1009ef0:	320d883a 	add	r6,r6,r8
 1009ef4:	28800003 	ldbu	r2,0(r5)
 1009ef8:	29400044 	addi	r5,r5,1
 1009efc:	38800005 	stb	r2,0(r7)
 1009f00:	39c00044 	addi	r7,r7,1
 1009f04:	39bffb1e 	bne	r7,r6,1009ef4 <memmove+0x50>
 1009f08:	2005883a 	mov	r2,r4
 1009f0c:	f800283a 	ret
 1009f10:	1904b03a 	or	r2,r3,r4
 1009f14:	108000cc 	andi	r2,r2,3
 1009f18:	103ff31e 	bne	r2,zero,1009ee8 <memmove+0x44>
 1009f1c:	3811883a 	mov	r8,r7
 1009f20:	180b883a 	mov	r5,r3
 1009f24:	200f883a 	mov	r7,r4
 1009f28:	28c00017 	ldw	r3,0(r5)
 1009f2c:	31bffc04 	addi	r6,r6,-16
 1009f30:	38c00015 	stw	r3,0(r7)
 1009f34:	28800117 	ldw	r2,4(r5)
 1009f38:	38800115 	stw	r2,4(r7)
 1009f3c:	28c00217 	ldw	r3,8(r5)
 1009f40:	38c00215 	stw	r3,8(r7)
 1009f44:	28800317 	ldw	r2,12(r5)
 1009f48:	29400404 	addi	r5,r5,16
 1009f4c:	38800315 	stw	r2,12(r7)
 1009f50:	39c00404 	addi	r7,r7,16
 1009f54:	41bff436 	bltu	r8,r6,1009f28 <memmove+0x84>
 1009f58:	008000c4 	movi	r2,3
 1009f5c:	1180072e 	bgeu	r2,r6,1009f7c <memmove+0xd8>
 1009f60:	1007883a 	mov	r3,r2
 1009f64:	28800017 	ldw	r2,0(r5)
 1009f68:	31bfff04 	addi	r6,r6,-4
 1009f6c:	29400104 	addi	r5,r5,4
 1009f70:	38800015 	stw	r2,0(r7)
 1009f74:	39c00104 	addi	r7,r7,4
 1009f78:	19bffa36 	bltu	r3,r6,1009f64 <memmove+0xc0>
 1009f7c:	3811883a 	mov	r8,r7
 1009f80:	003fd906 	br	1009ee8 <memmove+0x44>

01009f84 <_Bfree>:
 1009f84:	28000826 	beq	r5,zero,1009fa8 <_Bfree+0x24>
 1009f88:	28800117 	ldw	r2,4(r5)
 1009f8c:	21001317 	ldw	r4,76(r4)
 1009f90:	1085883a 	add	r2,r2,r2
 1009f94:	1085883a 	add	r2,r2,r2
 1009f98:	1105883a 	add	r2,r2,r4
 1009f9c:	10c00017 	ldw	r3,0(r2)
 1009fa0:	28c00015 	stw	r3,0(r5)
 1009fa4:	11400015 	stw	r5,0(r2)
 1009fa8:	f800283a 	ret

01009fac <__hi0bits>:
 1009fac:	20bfffec 	andhi	r2,r4,65535
 1009fb0:	10001426 	beq	r2,zero,100a004 <__hi0bits+0x58>
 1009fb4:	0007883a 	mov	r3,zero
 1009fb8:	20bfc02c 	andhi	r2,r4,65280
 1009fbc:	1000021e 	bne	r2,zero,1009fc8 <__hi0bits+0x1c>
 1009fc0:	2008923a 	slli	r4,r4,8
 1009fc4:	18c00204 	addi	r3,r3,8
 1009fc8:	20bc002c 	andhi	r2,r4,61440
 1009fcc:	1000021e 	bne	r2,zero,1009fd8 <__hi0bits+0x2c>
 1009fd0:	2008913a 	slli	r4,r4,4
 1009fd4:	18c00104 	addi	r3,r3,4
 1009fd8:	20b0002c 	andhi	r2,r4,49152
 1009fdc:	1000031e 	bne	r2,zero,1009fec <__hi0bits+0x40>
 1009fe0:	2105883a 	add	r2,r4,r4
 1009fe4:	18c00084 	addi	r3,r3,2
 1009fe8:	1089883a 	add	r4,r2,r2
 1009fec:	20000316 	blt	r4,zero,1009ffc <__hi0bits+0x50>
 1009ff0:	2090002c 	andhi	r2,r4,16384
 1009ff4:	10000626 	beq	r2,zero,100a010 <__hi0bits+0x64>
 1009ff8:	18c00044 	addi	r3,r3,1
 1009ffc:	1805883a 	mov	r2,r3
 100a000:	f800283a 	ret
 100a004:	2008943a 	slli	r4,r4,16
 100a008:	00c00404 	movi	r3,16
 100a00c:	003fea06 	br	1009fb8 <__hi0bits+0xc>
 100a010:	00c00804 	movi	r3,32
 100a014:	1805883a 	mov	r2,r3
 100a018:	f800283a 	ret

0100a01c <__lo0bits>:
 100a01c:	20c00017 	ldw	r3,0(r4)
 100a020:	188001cc 	andi	r2,r3,7
 100a024:	10000a26 	beq	r2,zero,100a050 <__lo0bits+0x34>
 100a028:	1880004c 	andi	r2,r3,1
 100a02c:	1005003a 	cmpeq	r2,r2,zero
 100a030:	10002126 	beq	r2,zero,100a0b8 <__lo0bits+0x9c>
 100a034:	1880008c 	andi	r2,r3,2
 100a038:	1000251e 	bne	r2,zero,100a0d0 <__lo0bits+0xb4>
 100a03c:	1804d0ba 	srli	r2,r3,2
 100a040:	01400084 	movi	r5,2
 100a044:	20800015 	stw	r2,0(r4)
 100a048:	2805883a 	mov	r2,r5
 100a04c:	f800283a 	ret
 100a050:	18bfffcc 	andi	r2,r3,65535
 100a054:	10001526 	beq	r2,zero,100a0ac <__lo0bits+0x90>
 100a058:	000b883a 	mov	r5,zero
 100a05c:	18803fcc 	andi	r2,r3,255
 100a060:	1000021e 	bne	r2,zero,100a06c <__lo0bits+0x50>
 100a064:	1806d23a 	srli	r3,r3,8
 100a068:	29400204 	addi	r5,r5,8
 100a06c:	188003cc 	andi	r2,r3,15
 100a070:	1000021e 	bne	r2,zero,100a07c <__lo0bits+0x60>
 100a074:	1806d13a 	srli	r3,r3,4
 100a078:	29400104 	addi	r5,r5,4
 100a07c:	188000cc 	andi	r2,r3,3
 100a080:	1000021e 	bne	r2,zero,100a08c <__lo0bits+0x70>
 100a084:	1806d0ba 	srli	r3,r3,2
 100a088:	29400084 	addi	r5,r5,2
 100a08c:	1880004c 	andi	r2,r3,1
 100a090:	1000031e 	bne	r2,zero,100a0a0 <__lo0bits+0x84>
 100a094:	1806d07a 	srli	r3,r3,1
 100a098:	18000a26 	beq	r3,zero,100a0c4 <__lo0bits+0xa8>
 100a09c:	29400044 	addi	r5,r5,1
 100a0a0:	2805883a 	mov	r2,r5
 100a0a4:	20c00015 	stw	r3,0(r4)
 100a0a8:	f800283a 	ret
 100a0ac:	1806d43a 	srli	r3,r3,16
 100a0b0:	01400404 	movi	r5,16
 100a0b4:	003fe906 	br	100a05c <__lo0bits+0x40>
 100a0b8:	000b883a 	mov	r5,zero
 100a0bc:	2805883a 	mov	r2,r5
 100a0c0:	f800283a 	ret
 100a0c4:	01400804 	movi	r5,32
 100a0c8:	2805883a 	mov	r2,r5
 100a0cc:	f800283a 	ret
 100a0d0:	1804d07a 	srli	r2,r3,1
 100a0d4:	01400044 	movi	r5,1
 100a0d8:	20800015 	stw	r2,0(r4)
 100a0dc:	003fda06 	br	100a048 <__lo0bits+0x2c>

0100a0e0 <__mcmp>:
 100a0e0:	20800417 	ldw	r2,16(r4)
 100a0e4:	28c00417 	ldw	r3,16(r5)
 100a0e8:	10cfc83a 	sub	r7,r2,r3
 100a0ec:	38000c1e 	bne	r7,zero,100a120 <__mcmp+0x40>
 100a0f0:	18c5883a 	add	r2,r3,r3
 100a0f4:	1085883a 	add	r2,r2,r2
 100a0f8:	10c00504 	addi	r3,r2,20
 100a0fc:	21000504 	addi	r4,r4,20
 100a100:	28cb883a 	add	r5,r5,r3
 100a104:	2085883a 	add	r2,r4,r2
 100a108:	10bfff04 	addi	r2,r2,-4
 100a10c:	297fff04 	addi	r5,r5,-4
 100a110:	11800017 	ldw	r6,0(r2)
 100a114:	28c00017 	ldw	r3,0(r5)
 100a118:	30c0031e 	bne	r6,r3,100a128 <__mcmp+0x48>
 100a11c:	20bffa36 	bltu	r4,r2,100a108 <__mcmp+0x28>
 100a120:	3805883a 	mov	r2,r7
 100a124:	f800283a 	ret
 100a128:	30c00336 	bltu	r6,r3,100a138 <__mcmp+0x58>
 100a12c:	01c00044 	movi	r7,1
 100a130:	3805883a 	mov	r2,r7
 100a134:	f800283a 	ret
 100a138:	01ffffc4 	movi	r7,-1
 100a13c:	003ff806 	br	100a120 <__mcmp+0x40>

0100a140 <__ulp>:
 100a140:	295ffc2c 	andhi	r5,r5,32752
 100a144:	013f3034 	movhi	r4,64704
 100a148:	290b883a 	add	r5,r5,r4
 100a14c:	0145c83a 	sub	r2,zero,r5
 100a150:	1007d53a 	srai	r3,r2,20
 100a154:	000d883a 	mov	r6,zero
 100a158:	0140040e 	bge	zero,r5,100a16c <__ulp+0x2c>
 100a15c:	280f883a 	mov	r7,r5
 100a160:	3807883a 	mov	r3,r7
 100a164:	3005883a 	mov	r2,r6
 100a168:	f800283a 	ret
 100a16c:	008004c4 	movi	r2,19
 100a170:	193ffb04 	addi	r4,r3,-20
 100a174:	10c00c0e 	bge	r2,r3,100a1a8 <__ulp+0x68>
 100a178:	008007c4 	movi	r2,31
 100a17c:	1107c83a 	sub	r3,r2,r4
 100a180:	00800784 	movi	r2,30
 100a184:	01400044 	movi	r5,1
 100a188:	11000216 	blt	r2,r4,100a194 <__ulp+0x54>
 100a18c:	00800044 	movi	r2,1
 100a190:	10ca983a 	sll	r5,r2,r3
 100a194:	000f883a 	mov	r7,zero
 100a198:	280d883a 	mov	r6,r5
 100a19c:	3807883a 	mov	r3,r7
 100a1a0:	3005883a 	mov	r2,r6
 100a1a4:	f800283a 	ret
 100a1a8:	00800234 	movhi	r2,8
 100a1ac:	10cfd83a 	sra	r7,r2,r3
 100a1b0:	000d883a 	mov	r6,zero
 100a1b4:	3005883a 	mov	r2,r6
 100a1b8:	3807883a 	mov	r3,r7
 100a1bc:	f800283a 	ret

0100a1c0 <__b2d>:
 100a1c0:	20800417 	ldw	r2,16(r4)
 100a1c4:	defff904 	addi	sp,sp,-28
 100a1c8:	dd000415 	stw	r20,16(sp)
 100a1cc:	1085883a 	add	r2,r2,r2
 100a1d0:	25000504 	addi	r20,r4,20
 100a1d4:	1085883a 	add	r2,r2,r2
 100a1d8:	dc000015 	stw	r16,0(sp)
 100a1dc:	a0a1883a 	add	r16,r20,r2
 100a1e0:	dd400515 	stw	r21,20(sp)
 100a1e4:	857fff17 	ldw	r21,-4(r16)
 100a1e8:	dc400115 	stw	r17,4(sp)
 100a1ec:	dfc00615 	stw	ra,24(sp)
 100a1f0:	a809883a 	mov	r4,r21
 100a1f4:	2823883a 	mov	r17,r5
 100a1f8:	dcc00315 	stw	r19,12(sp)
 100a1fc:	dc800215 	stw	r18,8(sp)
 100a200:	1009fac0 	call	1009fac <__hi0bits>
 100a204:	100b883a 	mov	r5,r2
 100a208:	00800804 	movi	r2,32
 100a20c:	1145c83a 	sub	r2,r2,r5
 100a210:	88800015 	stw	r2,0(r17)
 100a214:	00800284 	movi	r2,10
 100a218:	80ffff04 	addi	r3,r16,-4
 100a21c:	11401416 	blt	r2,r5,100a270 <__b2d+0xb0>
 100a220:	008002c4 	movi	r2,11
 100a224:	1149c83a 	sub	r4,r2,r5
 100a228:	a0c02736 	bltu	r20,r3,100a2c8 <__b2d+0x108>
 100a22c:	000d883a 	mov	r6,zero
 100a230:	28800544 	addi	r2,r5,21
 100a234:	a906d83a 	srl	r3,r21,r4
 100a238:	a884983a 	sll	r2,r21,r2
 100a23c:	1ccffc34 	orhi	r19,r3,16368
 100a240:	11a4b03a 	or	r18,r2,r6
 100a244:	9005883a 	mov	r2,r18
 100a248:	9807883a 	mov	r3,r19
 100a24c:	dfc00617 	ldw	ra,24(sp)
 100a250:	dd400517 	ldw	r21,20(sp)
 100a254:	dd000417 	ldw	r20,16(sp)
 100a258:	dcc00317 	ldw	r19,12(sp)
 100a25c:	dc800217 	ldw	r18,8(sp)
 100a260:	dc400117 	ldw	r17,4(sp)
 100a264:	dc000017 	ldw	r16,0(sp)
 100a268:	dec00704 	addi	sp,sp,28
 100a26c:	f800283a 	ret
 100a270:	a0c00e36 	bltu	r20,r3,100a2ac <__b2d+0xec>
 100a274:	293ffd44 	addi	r4,r5,-11
 100a278:	000d883a 	mov	r6,zero
 100a27c:	20000f26 	beq	r4,zero,100a2bc <__b2d+0xfc>
 100a280:	00800804 	movi	r2,32
 100a284:	110bc83a 	sub	r5,r2,r4
 100a288:	a0c01236 	bltu	r20,r3,100a2d4 <__b2d+0x114>
 100a28c:	000f883a 	mov	r7,zero
 100a290:	a904983a 	sll	r2,r21,r4
 100a294:	3146d83a 	srl	r3,r6,r5
 100a298:	3108983a 	sll	r4,r6,r4
 100a29c:	108ffc34 	orhi	r2,r2,16368
 100a2a0:	18a6b03a 	or	r19,r3,r2
 100a2a4:	3924b03a 	or	r18,r7,r4
 100a2a8:	003fe606 	br	100a244 <__b2d+0x84>
 100a2ac:	293ffd44 	addi	r4,r5,-11
 100a2b0:	81bffe17 	ldw	r6,-8(r16)
 100a2b4:	80fffe04 	addi	r3,r16,-8
 100a2b8:	203ff11e 	bne	r4,zero,100a280 <__b2d+0xc0>
 100a2bc:	accffc34 	orhi	r19,r21,16368
 100a2c0:	3025883a 	mov	r18,r6
 100a2c4:	003fdf06 	br	100a244 <__b2d+0x84>
 100a2c8:	18bfff17 	ldw	r2,-4(r3)
 100a2cc:	110cd83a 	srl	r6,r2,r4
 100a2d0:	003fd706 	br	100a230 <__b2d+0x70>
 100a2d4:	18bfff17 	ldw	r2,-4(r3)
 100a2d8:	114ed83a 	srl	r7,r2,r5
 100a2dc:	003fec06 	br	100a290 <__b2d+0xd0>

0100a2e0 <__ratio>:
 100a2e0:	defff904 	addi	sp,sp,-28
 100a2e4:	dc400215 	stw	r17,8(sp)
 100a2e8:	2823883a 	mov	r17,r5
 100a2ec:	d80b883a 	mov	r5,sp
 100a2f0:	dfc00615 	stw	ra,24(sp)
 100a2f4:	dd000515 	stw	r20,20(sp)
 100a2f8:	dcc00415 	stw	r19,16(sp)
 100a2fc:	dc800315 	stw	r18,12(sp)
 100a300:	2025883a 	mov	r18,r4
 100a304:	100a1c00 	call	100a1c0 <__b2d>
 100a308:	8809883a 	mov	r4,r17
 100a30c:	d9400104 	addi	r5,sp,4
 100a310:	1027883a 	mov	r19,r2
 100a314:	1829883a 	mov	r20,r3
 100a318:	100a1c00 	call	100a1c0 <__b2d>
 100a31c:	89000417 	ldw	r4,16(r17)
 100a320:	91c00417 	ldw	r7,16(r18)
 100a324:	d9800117 	ldw	r6,4(sp)
 100a328:	180b883a 	mov	r5,r3
 100a32c:	390fc83a 	sub	r7,r7,r4
 100a330:	1009883a 	mov	r4,r2
 100a334:	d8800017 	ldw	r2,0(sp)
 100a338:	380e917a 	slli	r7,r7,5
 100a33c:	2011883a 	mov	r8,r4
 100a340:	1185c83a 	sub	r2,r2,r6
 100a344:	11c5883a 	add	r2,r2,r7
 100a348:	1006953a 	slli	r3,r2,20
 100a34c:	2813883a 	mov	r9,r5
 100a350:	00800d0e 	bge	zero,r2,100a388 <__ratio+0xa8>
 100a354:	1d29883a 	add	r20,r3,r20
 100a358:	a00b883a 	mov	r5,r20
 100a35c:	480f883a 	mov	r7,r9
 100a360:	9809883a 	mov	r4,r19
 100a364:	400d883a 	mov	r6,r8
 100a368:	100d13c0 	call	100d13c <__divdf3>
 100a36c:	dfc00617 	ldw	ra,24(sp)
 100a370:	dd000517 	ldw	r20,20(sp)
 100a374:	dcc00417 	ldw	r19,16(sp)
 100a378:	dc800317 	ldw	r18,12(sp)
 100a37c:	dc400217 	ldw	r17,8(sp)
 100a380:	dec00704 	addi	sp,sp,28
 100a384:	f800283a 	ret
 100a388:	28d3c83a 	sub	r9,r5,r3
 100a38c:	003ff206 	br	100a358 <__ratio+0x78>

0100a390 <_mprec_log10>:
 100a390:	defffe04 	addi	sp,sp,-8
 100a394:	008005c4 	movi	r2,23
 100a398:	dc000015 	stw	r16,0(sp)
 100a39c:	dfc00115 	stw	ra,4(sp)
 100a3a0:	2021883a 	mov	r16,r4
 100a3a4:	11000c16 	blt	r2,r4,100a3d8 <_mprec_log10+0x48>
 100a3a8:	200490fa 	slli	r2,r4,3
 100a3ac:	00c04074 	movhi	r3,257
 100a3b0:	18c70c04 	addi	r3,r3,7216
 100a3b4:	10c5883a 	add	r2,r2,r3
 100a3b8:	12400117 	ldw	r9,4(r2)
 100a3bc:	12000017 	ldw	r8,0(r2)
 100a3c0:	4807883a 	mov	r3,r9
 100a3c4:	4005883a 	mov	r2,r8
 100a3c8:	dfc00117 	ldw	ra,4(sp)
 100a3cc:	dc000017 	ldw	r16,0(sp)
 100a3d0:	dec00204 	addi	sp,sp,8
 100a3d4:	f800283a 	ret
 100a3d8:	0011883a 	mov	r8,zero
 100a3dc:	024ffc34 	movhi	r9,16368
 100a3e0:	0005883a 	mov	r2,zero
 100a3e4:	00d00934 	movhi	r3,16420
 100a3e8:	480b883a 	mov	r5,r9
 100a3ec:	4009883a 	mov	r4,r8
 100a3f0:	180f883a 	mov	r7,r3
 100a3f4:	100d883a 	mov	r6,r2
 100a3f8:	100cd780 	call	100cd78 <__muldf3>
 100a3fc:	843fffc4 	addi	r16,r16,-1
 100a400:	1011883a 	mov	r8,r2
 100a404:	1813883a 	mov	r9,r3
 100a408:	803ff51e 	bne	r16,zero,100a3e0 <_mprec_log10+0x50>
 100a40c:	4005883a 	mov	r2,r8
 100a410:	4807883a 	mov	r3,r9
 100a414:	dfc00117 	ldw	ra,4(sp)
 100a418:	dc000017 	ldw	r16,0(sp)
 100a41c:	dec00204 	addi	sp,sp,8
 100a420:	f800283a 	ret

0100a424 <__copybits>:
 100a424:	297fffc4 	addi	r5,r5,-1
 100a428:	30800417 	ldw	r2,16(r6)
 100a42c:	280bd17a 	srai	r5,r5,5
 100a430:	31800504 	addi	r6,r6,20
 100a434:	1085883a 	add	r2,r2,r2
 100a438:	294b883a 	add	r5,r5,r5
 100a43c:	294b883a 	add	r5,r5,r5
 100a440:	1085883a 	add	r2,r2,r2
 100a444:	290b883a 	add	r5,r5,r4
 100a448:	3087883a 	add	r3,r6,r2
 100a44c:	29400104 	addi	r5,r5,4
 100a450:	30c0052e 	bgeu	r6,r3,100a468 <__copybits+0x44>
 100a454:	30800017 	ldw	r2,0(r6)
 100a458:	31800104 	addi	r6,r6,4
 100a45c:	20800015 	stw	r2,0(r4)
 100a460:	21000104 	addi	r4,r4,4
 100a464:	30fffb36 	bltu	r6,r3,100a454 <__copybits+0x30>
 100a468:	2140032e 	bgeu	r4,r5,100a478 <__copybits+0x54>
 100a46c:	20000015 	stw	zero,0(r4)
 100a470:	21000104 	addi	r4,r4,4
 100a474:	217ffd36 	bltu	r4,r5,100a46c <__copybits+0x48>
 100a478:	f800283a 	ret

0100a47c <__any_on>:
 100a47c:	20800417 	ldw	r2,16(r4)
 100a480:	2807d17a 	srai	r3,r5,5
 100a484:	21000504 	addi	r4,r4,20
 100a488:	10c00d0e 	bge	r2,r3,100a4c0 <__any_on+0x44>
 100a48c:	1085883a 	add	r2,r2,r2
 100a490:	1085883a 	add	r2,r2,r2
 100a494:	208d883a 	add	r6,r4,r2
 100a498:	2180182e 	bgeu	r4,r6,100a4fc <__any_on+0x80>
 100a49c:	30bfff17 	ldw	r2,-4(r6)
 100a4a0:	30ffff04 	addi	r3,r6,-4
 100a4a4:	1000041e 	bne	r2,zero,100a4b8 <__any_on+0x3c>
 100a4a8:	20c0142e 	bgeu	r4,r3,100a4fc <__any_on+0x80>
 100a4ac:	18ffff04 	addi	r3,r3,-4
 100a4b0:	18800017 	ldw	r2,0(r3)
 100a4b4:	103ffc26 	beq	r2,zero,100a4a8 <__any_on+0x2c>
 100a4b8:	00800044 	movi	r2,1
 100a4bc:	f800283a 	ret
 100a4c0:	18800a0e 	bge	r3,r2,100a4ec <__any_on+0x70>
 100a4c4:	294007cc 	andi	r5,r5,31
 100a4c8:	28000826 	beq	r5,zero,100a4ec <__any_on+0x70>
 100a4cc:	18c5883a 	add	r2,r3,r3
 100a4d0:	1085883a 	add	r2,r2,r2
 100a4d4:	208d883a 	add	r6,r4,r2
 100a4d8:	30c00017 	ldw	r3,0(r6)
 100a4dc:	1944d83a 	srl	r2,r3,r5
 100a4e0:	1144983a 	sll	r2,r2,r5
 100a4e4:	18bff41e 	bne	r3,r2,100a4b8 <__any_on+0x3c>
 100a4e8:	003feb06 	br	100a498 <__any_on+0x1c>
 100a4ec:	18c5883a 	add	r2,r3,r3
 100a4f0:	1085883a 	add	r2,r2,r2
 100a4f4:	208d883a 	add	r6,r4,r2
 100a4f8:	003fe706 	br	100a498 <__any_on+0x1c>
 100a4fc:	0005883a 	mov	r2,zero
 100a500:	f800283a 	ret

0100a504 <_Balloc>:
 100a504:	20c01317 	ldw	r3,76(r4)
 100a508:	defffb04 	addi	sp,sp,-20
 100a50c:	dcc00315 	stw	r19,12(sp)
 100a510:	dc800215 	stw	r18,8(sp)
 100a514:	dfc00415 	stw	ra,16(sp)
 100a518:	2825883a 	mov	r18,r5
 100a51c:	dc400115 	stw	r17,4(sp)
 100a520:	dc000015 	stw	r16,0(sp)
 100a524:	2027883a 	mov	r19,r4
 100a528:	01800404 	movi	r6,16
 100a52c:	01400104 	movi	r5,4
 100a530:	18001726 	beq	r3,zero,100a590 <_Balloc+0x8c>
 100a534:	01400044 	movi	r5,1
 100a538:	9485883a 	add	r2,r18,r18
 100a53c:	2ca2983a 	sll	r17,r5,r18
 100a540:	1085883a 	add	r2,r2,r2
 100a544:	10c7883a 	add	r3,r2,r3
 100a548:	1c000017 	ldw	r16,0(r3)
 100a54c:	8c4d883a 	add	r6,r17,r17
 100a550:	318d883a 	add	r6,r6,r6
 100a554:	9809883a 	mov	r4,r19
 100a558:	31800504 	addi	r6,r6,20
 100a55c:	80001226 	beq	r16,zero,100a5a8 <_Balloc+0xa4>
 100a560:	80800017 	ldw	r2,0(r16)
 100a564:	18800015 	stw	r2,0(r3)
 100a568:	80000415 	stw	zero,16(r16)
 100a56c:	80000315 	stw	zero,12(r16)
 100a570:	8005883a 	mov	r2,r16
 100a574:	dfc00417 	ldw	ra,16(sp)
 100a578:	dcc00317 	ldw	r19,12(sp)
 100a57c:	dc800217 	ldw	r18,8(sp)
 100a580:	dc400117 	ldw	r17,4(sp)
 100a584:	dc000017 	ldw	r16,0(sp)
 100a588:	dec00504 	addi	sp,sp,20
 100a58c:	f800283a 	ret
 100a590:	100bae00 	call	100bae0 <_calloc_r>
 100a594:	1007883a 	mov	r3,r2
 100a598:	0021883a 	mov	r16,zero
 100a59c:	98801315 	stw	r2,76(r19)
 100a5a0:	103fe41e 	bne	r2,zero,100a534 <_Balloc+0x30>
 100a5a4:	003ff206 	br	100a570 <_Balloc+0x6c>
 100a5a8:	100bae00 	call	100bae0 <_calloc_r>
 100a5ac:	103ff026 	beq	r2,zero,100a570 <_Balloc+0x6c>
 100a5b0:	1021883a 	mov	r16,r2
 100a5b4:	14800115 	stw	r18,4(r2)
 100a5b8:	14400215 	stw	r17,8(r2)
 100a5bc:	003fea06 	br	100a568 <_Balloc+0x64>

0100a5c0 <__d2b>:
 100a5c0:	defff504 	addi	sp,sp,-44
 100a5c4:	dcc00515 	stw	r19,20(sp)
 100a5c8:	04c00044 	movi	r19,1
 100a5cc:	dc000215 	stw	r16,8(sp)
 100a5d0:	2821883a 	mov	r16,r5
 100a5d4:	980b883a 	mov	r5,r19
 100a5d8:	ddc00915 	stw	r23,36(sp)
 100a5dc:	dd800815 	stw	r22,32(sp)
 100a5e0:	dd400715 	stw	r21,28(sp)
 100a5e4:	dd000615 	stw	r20,24(sp)
 100a5e8:	dc800415 	stw	r18,16(sp)
 100a5ec:	dc400315 	stw	r17,12(sp)
 100a5f0:	dfc00a15 	stw	ra,40(sp)
 100a5f4:	3023883a 	mov	r17,r6
 100a5f8:	382d883a 	mov	r22,r7
 100a5fc:	ddc00b17 	ldw	r23,44(sp)
 100a600:	100a5040 	call	100a504 <_Balloc>
 100a604:	1025883a 	mov	r18,r2
 100a608:	00a00034 	movhi	r2,32768
 100a60c:	10bfffc4 	addi	r2,r2,-1
 100a610:	8888703a 	and	r4,r17,r2
 100a614:	202ad53a 	srli	r21,r4,20
 100a618:	00800434 	movhi	r2,16
 100a61c:	10bfffc4 	addi	r2,r2,-1
 100a620:	8886703a 	and	r3,r17,r2
 100a624:	a829003a 	cmpeq	r20,r21,zero
 100a628:	800b883a 	mov	r5,r16
 100a62c:	d8c00115 	stw	r3,4(sp)
 100a630:	94000504 	addi	r16,r18,20
 100a634:	a000021e 	bne	r20,zero,100a640 <__d2b+0x80>
 100a638:	18c00434 	orhi	r3,r3,16
 100a63c:	d8c00115 	stw	r3,4(sp)
 100a640:	28002726 	beq	r5,zero,100a6e0 <__d2b+0x120>
 100a644:	d809883a 	mov	r4,sp
 100a648:	d9400015 	stw	r5,0(sp)
 100a64c:	100a01c0 	call	100a01c <__lo0bits>
 100a650:	100d883a 	mov	r6,r2
 100a654:	10003526 	beq	r2,zero,100a72c <__d2b+0x16c>
 100a658:	d8c00117 	ldw	r3,4(sp)
 100a65c:	00800804 	movi	r2,32
 100a660:	1185c83a 	sub	r2,r2,r6
 100a664:	d9000017 	ldw	r4,0(sp)
 100a668:	1886983a 	sll	r3,r3,r2
 100a66c:	1906b03a 	or	r3,r3,r4
 100a670:	90c00515 	stw	r3,20(r18)
 100a674:	d8c00117 	ldw	r3,4(sp)
 100a678:	1986d83a 	srl	r3,r3,r6
 100a67c:	d8c00115 	stw	r3,4(sp)
 100a680:	180b003a 	cmpeq	r5,r3,zero
 100a684:	00800084 	movi	r2,2
 100a688:	114bc83a 	sub	r5,r2,r5
 100a68c:	80c00115 	stw	r3,4(r16)
 100a690:	91400415 	stw	r5,16(r18)
 100a694:	a0001a1e 	bne	r20,zero,100a700 <__d2b+0x140>
 100a698:	3545883a 	add	r2,r6,r21
 100a69c:	10bef344 	addi	r2,r2,-1075
 100a6a0:	00c00d44 	movi	r3,53
 100a6a4:	b0800015 	stw	r2,0(r22)
 100a6a8:	1987c83a 	sub	r3,r3,r6
 100a6ac:	b8c00015 	stw	r3,0(r23)
 100a6b0:	9005883a 	mov	r2,r18
 100a6b4:	dfc00a17 	ldw	ra,40(sp)
 100a6b8:	ddc00917 	ldw	r23,36(sp)
 100a6bc:	dd800817 	ldw	r22,32(sp)
 100a6c0:	dd400717 	ldw	r21,28(sp)
 100a6c4:	dd000617 	ldw	r20,24(sp)
 100a6c8:	dcc00517 	ldw	r19,20(sp)
 100a6cc:	dc800417 	ldw	r18,16(sp)
 100a6d0:	dc400317 	ldw	r17,12(sp)
 100a6d4:	dc000217 	ldw	r16,8(sp)
 100a6d8:	dec00b04 	addi	sp,sp,44
 100a6dc:	f800283a 	ret
 100a6e0:	d9000104 	addi	r4,sp,4
 100a6e4:	100a01c0 	call	100a01c <__lo0bits>
 100a6e8:	11800804 	addi	r6,r2,32
 100a6ec:	d8800117 	ldw	r2,4(sp)
 100a6f0:	94c00415 	stw	r19,16(r18)
 100a6f4:	980b883a 	mov	r5,r19
 100a6f8:	90800515 	stw	r2,20(r18)
 100a6fc:	a03fe626 	beq	r20,zero,100a698 <__d2b+0xd8>
 100a700:	2945883a 	add	r2,r5,r5
 100a704:	1085883a 	add	r2,r2,r2
 100a708:	1405883a 	add	r2,r2,r16
 100a70c:	113fff17 	ldw	r4,-4(r2)
 100a710:	30fef384 	addi	r3,r6,-1074
 100a714:	2820917a 	slli	r16,r5,5
 100a718:	b0c00015 	stw	r3,0(r22)
 100a71c:	1009fac0 	call	1009fac <__hi0bits>
 100a720:	80a1c83a 	sub	r16,r16,r2
 100a724:	bc000015 	stw	r16,0(r23)
 100a728:	003fe106 	br	100a6b0 <__d2b+0xf0>
 100a72c:	d8800017 	ldw	r2,0(sp)
 100a730:	90800515 	stw	r2,20(r18)
 100a734:	d8c00117 	ldw	r3,4(sp)
 100a738:	003fd106 	br	100a680 <__d2b+0xc0>

0100a73c <__mdiff>:
 100a73c:	defffb04 	addi	sp,sp,-20
 100a740:	dc000015 	stw	r16,0(sp)
 100a744:	2821883a 	mov	r16,r5
 100a748:	dc800215 	stw	r18,8(sp)
 100a74c:	300b883a 	mov	r5,r6
 100a750:	2025883a 	mov	r18,r4
 100a754:	8009883a 	mov	r4,r16
 100a758:	dc400115 	stw	r17,4(sp)
 100a75c:	dfc00415 	stw	ra,16(sp)
 100a760:	dcc00315 	stw	r19,12(sp)
 100a764:	3023883a 	mov	r17,r6
 100a768:	100a0e00 	call	100a0e0 <__mcmp>
 100a76c:	10004226 	beq	r2,zero,100a878 <__mdiff+0x13c>
 100a770:	10005016 	blt	r2,zero,100a8b4 <__mdiff+0x178>
 100a774:	0027883a 	mov	r19,zero
 100a778:	81400117 	ldw	r5,4(r16)
 100a77c:	9009883a 	mov	r4,r18
 100a780:	100a5040 	call	100a504 <_Balloc>
 100a784:	1019883a 	mov	r12,r2
 100a788:	82800417 	ldw	r10,16(r16)
 100a78c:	88800417 	ldw	r2,16(r17)
 100a790:	81800504 	addi	r6,r16,20
 100a794:	5287883a 	add	r3,r10,r10
 100a798:	1085883a 	add	r2,r2,r2
 100a79c:	18c7883a 	add	r3,r3,r3
 100a7a0:	1085883a 	add	r2,r2,r2
 100a7a4:	8a000504 	addi	r8,r17,20
 100a7a8:	64c00315 	stw	r19,12(r12)
 100a7ac:	30db883a 	add	r13,r6,r3
 100a7b0:	4097883a 	add	r11,r8,r2
 100a7b4:	61c00504 	addi	r7,r12,20
 100a7b8:	0013883a 	mov	r9,zero
 100a7bc:	31000017 	ldw	r4,0(r6)
 100a7c0:	41400017 	ldw	r5,0(r8)
 100a7c4:	42000104 	addi	r8,r8,4
 100a7c8:	20bfffcc 	andi	r2,r4,65535
 100a7cc:	28ffffcc 	andi	r3,r5,65535
 100a7d0:	10c5c83a 	sub	r2,r2,r3
 100a7d4:	1245883a 	add	r2,r2,r9
 100a7d8:	2008d43a 	srli	r4,r4,16
 100a7dc:	280ad43a 	srli	r5,r5,16
 100a7e0:	1007d43a 	srai	r3,r2,16
 100a7e4:	3880000d 	sth	r2,0(r7)
 100a7e8:	2149c83a 	sub	r4,r4,r5
 100a7ec:	20c9883a 	add	r4,r4,r3
 100a7f0:	3900008d 	sth	r4,2(r7)
 100a7f4:	31800104 	addi	r6,r6,4
 100a7f8:	39c00104 	addi	r7,r7,4
 100a7fc:	2013d43a 	srai	r9,r4,16
 100a800:	42ffee36 	bltu	r8,r11,100a7bc <__mdiff+0x80>
 100a804:	33400c2e 	bgeu	r6,r13,100a838 <__mdiff+0xfc>
 100a808:	30800017 	ldw	r2,0(r6)
 100a80c:	31800104 	addi	r6,r6,4
 100a810:	10ffffcc 	andi	r3,r2,65535
 100a814:	1a47883a 	add	r3,r3,r9
 100a818:	1004d43a 	srli	r2,r2,16
 100a81c:	1809d43a 	srai	r4,r3,16
 100a820:	38c0000d 	sth	r3,0(r7)
 100a824:	1105883a 	add	r2,r2,r4
 100a828:	3880008d 	sth	r2,2(r7)
 100a82c:	1013d43a 	srai	r9,r2,16
 100a830:	39c00104 	addi	r7,r7,4
 100a834:	337ff436 	bltu	r6,r13,100a808 <__mdiff+0xcc>
 100a838:	38bfff17 	ldw	r2,-4(r7)
 100a83c:	38ffff04 	addi	r3,r7,-4
 100a840:	1000041e 	bne	r2,zero,100a854 <__mdiff+0x118>
 100a844:	18ffff04 	addi	r3,r3,-4
 100a848:	18800017 	ldw	r2,0(r3)
 100a84c:	52bfffc4 	addi	r10,r10,-1
 100a850:	103ffc26 	beq	r2,zero,100a844 <__mdiff+0x108>
 100a854:	6005883a 	mov	r2,r12
 100a858:	62800415 	stw	r10,16(r12)
 100a85c:	dfc00417 	ldw	ra,16(sp)
 100a860:	dcc00317 	ldw	r19,12(sp)
 100a864:	dc800217 	ldw	r18,8(sp)
 100a868:	dc400117 	ldw	r17,4(sp)
 100a86c:	dc000017 	ldw	r16,0(sp)
 100a870:	dec00504 	addi	sp,sp,20
 100a874:	f800283a 	ret
 100a878:	9009883a 	mov	r4,r18
 100a87c:	000b883a 	mov	r5,zero
 100a880:	100a5040 	call	100a504 <_Balloc>
 100a884:	1019883a 	mov	r12,r2
 100a888:	00800044 	movi	r2,1
 100a88c:	60800415 	stw	r2,16(r12)
 100a890:	6005883a 	mov	r2,r12
 100a894:	60000515 	stw	zero,20(r12)
 100a898:	dfc00417 	ldw	ra,16(sp)
 100a89c:	dcc00317 	ldw	r19,12(sp)
 100a8a0:	dc800217 	ldw	r18,8(sp)
 100a8a4:	dc400117 	ldw	r17,4(sp)
 100a8a8:	dc000017 	ldw	r16,0(sp)
 100a8ac:	dec00504 	addi	sp,sp,20
 100a8b0:	f800283a 	ret
 100a8b4:	880d883a 	mov	r6,r17
 100a8b8:	04c00044 	movi	r19,1
 100a8bc:	8023883a 	mov	r17,r16
 100a8c0:	3021883a 	mov	r16,r6
 100a8c4:	003fac06 	br	100a778 <__mdiff+0x3c>

0100a8c8 <__lshift>:
 100a8c8:	defff904 	addi	sp,sp,-28
 100a8cc:	28800417 	ldw	r2,16(r5)
 100a8d0:	dc000015 	stw	r16,0(sp)
 100a8d4:	3021d17a 	srai	r16,r6,5
 100a8d8:	28c00217 	ldw	r3,8(r5)
 100a8dc:	10800044 	addi	r2,r2,1
 100a8e0:	dc400115 	stw	r17,4(sp)
 100a8e4:	80a3883a 	add	r17,r16,r2
 100a8e8:	dd400515 	stw	r21,20(sp)
 100a8ec:	dd000415 	stw	r20,16(sp)
 100a8f0:	dc800215 	stw	r18,8(sp)
 100a8f4:	dfc00615 	stw	ra,24(sp)
 100a8f8:	2825883a 	mov	r18,r5
 100a8fc:	dcc00315 	stw	r19,12(sp)
 100a900:	3029883a 	mov	r20,r6
 100a904:	202b883a 	mov	r21,r4
 100a908:	29400117 	ldw	r5,4(r5)
 100a90c:	1c40030e 	bge	r3,r17,100a91c <__lshift+0x54>
 100a910:	18c7883a 	add	r3,r3,r3
 100a914:	29400044 	addi	r5,r5,1
 100a918:	1c7ffd16 	blt	r3,r17,100a910 <__lshift+0x48>
 100a91c:	a809883a 	mov	r4,r21
 100a920:	100a5040 	call	100a504 <_Balloc>
 100a924:	1027883a 	mov	r19,r2
 100a928:	11400504 	addi	r5,r2,20
 100a92c:	0400090e 	bge	zero,r16,100a954 <__lshift+0x8c>
 100a930:	2805883a 	mov	r2,r5
 100a934:	0007883a 	mov	r3,zero
 100a938:	18c00044 	addi	r3,r3,1
 100a93c:	10000015 	stw	zero,0(r2)
 100a940:	10800104 	addi	r2,r2,4
 100a944:	80fffc1e 	bne	r16,r3,100a938 <__lshift+0x70>
 100a948:	8405883a 	add	r2,r16,r16
 100a94c:	1085883a 	add	r2,r2,r2
 100a950:	288b883a 	add	r5,r5,r2
 100a954:	90800417 	ldw	r2,16(r18)
 100a958:	91000504 	addi	r4,r18,20
 100a95c:	a18007cc 	andi	r6,r20,31
 100a960:	1085883a 	add	r2,r2,r2
 100a964:	1085883a 	add	r2,r2,r2
 100a968:	208f883a 	add	r7,r4,r2
 100a96c:	30001e26 	beq	r6,zero,100a9e8 <__lshift+0x120>
 100a970:	00800804 	movi	r2,32
 100a974:	1191c83a 	sub	r8,r2,r6
 100a978:	0007883a 	mov	r3,zero
 100a97c:	20800017 	ldw	r2,0(r4)
 100a980:	1184983a 	sll	r2,r2,r6
 100a984:	1884b03a 	or	r2,r3,r2
 100a988:	28800015 	stw	r2,0(r5)
 100a98c:	20c00017 	ldw	r3,0(r4)
 100a990:	21000104 	addi	r4,r4,4
 100a994:	29400104 	addi	r5,r5,4
 100a998:	1a06d83a 	srl	r3,r3,r8
 100a99c:	21fff736 	bltu	r4,r7,100a97c <__lshift+0xb4>
 100a9a0:	28c00015 	stw	r3,0(r5)
 100a9a4:	18000126 	beq	r3,zero,100a9ac <__lshift+0xe4>
 100a9a8:	8c400044 	addi	r17,r17,1
 100a9ac:	88bfffc4 	addi	r2,r17,-1
 100a9b0:	98800415 	stw	r2,16(r19)
 100a9b4:	a809883a 	mov	r4,r21
 100a9b8:	900b883a 	mov	r5,r18
 100a9bc:	1009f840 	call	1009f84 <_Bfree>
 100a9c0:	9805883a 	mov	r2,r19
 100a9c4:	dfc00617 	ldw	ra,24(sp)
 100a9c8:	dd400517 	ldw	r21,20(sp)
 100a9cc:	dd000417 	ldw	r20,16(sp)
 100a9d0:	dcc00317 	ldw	r19,12(sp)
 100a9d4:	dc800217 	ldw	r18,8(sp)
 100a9d8:	dc400117 	ldw	r17,4(sp)
 100a9dc:	dc000017 	ldw	r16,0(sp)
 100a9e0:	dec00704 	addi	sp,sp,28
 100a9e4:	f800283a 	ret
 100a9e8:	20800017 	ldw	r2,0(r4)
 100a9ec:	21000104 	addi	r4,r4,4
 100a9f0:	28800015 	stw	r2,0(r5)
 100a9f4:	29400104 	addi	r5,r5,4
 100a9f8:	21ffec2e 	bgeu	r4,r7,100a9ac <__lshift+0xe4>
 100a9fc:	20800017 	ldw	r2,0(r4)
 100aa00:	21000104 	addi	r4,r4,4
 100aa04:	28800015 	stw	r2,0(r5)
 100aa08:	29400104 	addi	r5,r5,4
 100aa0c:	21fff636 	bltu	r4,r7,100a9e8 <__lshift+0x120>
 100aa10:	003fe606 	br	100a9ac <__lshift+0xe4>

0100aa14 <__multiply>:
 100aa14:	defff004 	addi	sp,sp,-64
 100aa18:	dc800815 	stw	r18,32(sp)
 100aa1c:	dc400715 	stw	r17,28(sp)
 100aa20:	2c800417 	ldw	r18,16(r5)
 100aa24:	34400417 	ldw	r17,16(r6)
 100aa28:	dcc00915 	stw	r19,36(sp)
 100aa2c:	dc000615 	stw	r16,24(sp)
 100aa30:	dfc00f15 	stw	ra,60(sp)
 100aa34:	df000e15 	stw	fp,56(sp)
 100aa38:	ddc00d15 	stw	r23,52(sp)
 100aa3c:	dd800c15 	stw	r22,48(sp)
 100aa40:	dd400b15 	stw	r21,44(sp)
 100aa44:	dd000a15 	stw	r20,40(sp)
 100aa48:	2821883a 	mov	r16,r5
 100aa4c:	3027883a 	mov	r19,r6
 100aa50:	9440040e 	bge	r18,r17,100aa64 <__multiply+0x50>
 100aa54:	8825883a 	mov	r18,r17
 100aa58:	2c400417 	ldw	r17,16(r5)
 100aa5c:	2827883a 	mov	r19,r5
 100aa60:	3021883a 	mov	r16,r6
 100aa64:	80800217 	ldw	r2,8(r16)
 100aa68:	9447883a 	add	r3,r18,r17
 100aa6c:	d8c00415 	stw	r3,16(sp)
 100aa70:	81400117 	ldw	r5,4(r16)
 100aa74:	10c0010e 	bge	r2,r3,100aa7c <__multiply+0x68>
 100aa78:	29400044 	addi	r5,r5,1
 100aa7c:	100a5040 	call	100a504 <_Balloc>
 100aa80:	d8800515 	stw	r2,20(sp)
 100aa84:	d9000417 	ldw	r4,16(sp)
 100aa88:	d8c00517 	ldw	r3,20(sp)
 100aa8c:	2105883a 	add	r2,r4,r4
 100aa90:	1085883a 	add	r2,r2,r2
 100aa94:	19000504 	addi	r4,r3,20
 100aa98:	2085883a 	add	r2,r4,r2
 100aa9c:	d8800315 	stw	r2,12(sp)
 100aaa0:	2080052e 	bgeu	r4,r2,100aab8 <__multiply+0xa4>
 100aaa4:	2005883a 	mov	r2,r4
 100aaa8:	d8c00317 	ldw	r3,12(sp)
 100aaac:	10000015 	stw	zero,0(r2)
 100aab0:	10800104 	addi	r2,r2,4
 100aab4:	10fffc36 	bltu	r2,r3,100aaa8 <__multiply+0x94>
 100aab8:	8c45883a 	add	r2,r17,r17
 100aabc:	9487883a 	add	r3,r18,r18
 100aac0:	9dc00504 	addi	r23,r19,20
 100aac4:	1085883a 	add	r2,r2,r2
 100aac8:	84000504 	addi	r16,r16,20
 100aacc:	18c7883a 	add	r3,r3,r3
 100aad0:	b885883a 	add	r2,r23,r2
 100aad4:	dc000015 	stw	r16,0(sp)
 100aad8:	d8800215 	stw	r2,8(sp)
 100aadc:	80f9883a 	add	fp,r16,r3
 100aae0:	b880432e 	bgeu	r23,r2,100abf0 <__multiply+0x1dc>
 100aae4:	d9000115 	stw	r4,4(sp)
 100aae8:	b9000017 	ldw	r4,0(r23)
 100aaec:	253fffcc 	andi	r20,r4,65535
 100aaf0:	a0001a26 	beq	r20,zero,100ab5c <__multiply+0x148>
 100aaf4:	dcc00017 	ldw	r19,0(sp)
 100aaf8:	dc800117 	ldw	r18,4(sp)
 100aafc:	002b883a 	mov	r21,zero
 100ab00:	9c400017 	ldw	r17,0(r19)
 100ab04:	94000017 	ldw	r16,0(r18)
 100ab08:	a009883a 	mov	r4,r20
 100ab0c:	897fffcc 	andi	r5,r17,65535
 100ab10:	1002f0c0 	call	1002f0c <__mulsi3>
 100ab14:	880ad43a 	srli	r5,r17,16
 100ab18:	80ffffcc 	andi	r3,r16,65535
 100ab1c:	a8c7883a 	add	r3,r21,r3
 100ab20:	a009883a 	mov	r4,r20
 100ab24:	10e3883a 	add	r17,r2,r3
 100ab28:	8020d43a 	srli	r16,r16,16
 100ab2c:	1002f0c0 	call	1002f0c <__mulsi3>
 100ab30:	8806d43a 	srli	r3,r17,16
 100ab34:	1405883a 	add	r2,r2,r16
 100ab38:	9cc00104 	addi	r19,r19,4
 100ab3c:	1887883a 	add	r3,r3,r2
 100ab40:	90c0008d 	sth	r3,2(r18)
 100ab44:	9440000d 	sth	r17,0(r18)
 100ab48:	182ad43a 	srli	r21,r3,16
 100ab4c:	94800104 	addi	r18,r18,4
 100ab50:	9f3feb36 	bltu	r19,fp,100ab00 <__multiply+0xec>
 100ab54:	95400015 	stw	r21,0(r18)
 100ab58:	b9000017 	ldw	r4,0(r23)
 100ab5c:	202ad43a 	srli	r21,r4,16
 100ab60:	a8001c26 	beq	r21,zero,100abd4 <__multiply+0x1c0>
 100ab64:	d9000117 	ldw	r4,4(sp)
 100ab68:	dd000017 	ldw	r20,0(sp)
 100ab6c:	002d883a 	mov	r22,zero
 100ab70:	24c00017 	ldw	r19,0(r4)
 100ab74:	2025883a 	mov	r18,r4
 100ab78:	9823883a 	mov	r17,r19
 100ab7c:	a4000017 	ldw	r16,0(r20)
 100ab80:	a809883a 	mov	r4,r21
 100ab84:	a5000104 	addi	r20,r20,4
 100ab88:	817fffcc 	andi	r5,r16,65535
 100ab8c:	1002f0c0 	call	1002f0c <__mulsi3>
 100ab90:	8806d43a 	srli	r3,r17,16
 100ab94:	800ad43a 	srli	r5,r16,16
 100ab98:	94c0000d 	sth	r19,0(r18)
 100ab9c:	b0c7883a 	add	r3,r22,r3
 100aba0:	10e1883a 	add	r16,r2,r3
 100aba4:	9400008d 	sth	r16,2(r18)
 100aba8:	a809883a 	mov	r4,r21
 100abac:	94800104 	addi	r18,r18,4
 100abb0:	1002f0c0 	call	1002f0c <__mulsi3>
 100abb4:	94400017 	ldw	r17,0(r18)
 100abb8:	8020d43a 	srli	r16,r16,16
 100abbc:	88ffffcc 	andi	r3,r17,65535
 100abc0:	10c5883a 	add	r2,r2,r3
 100abc4:	80a7883a 	add	r19,r16,r2
 100abc8:	982cd43a 	srli	r22,r19,16
 100abcc:	a73feb36 	bltu	r20,fp,100ab7c <__multiply+0x168>
 100abd0:	94c00015 	stw	r19,0(r18)
 100abd4:	d8800217 	ldw	r2,8(sp)
 100abd8:	bdc00104 	addi	r23,r23,4
 100abdc:	b880042e 	bgeu	r23,r2,100abf0 <__multiply+0x1dc>
 100abe0:	d8c00117 	ldw	r3,4(sp)
 100abe4:	18c00104 	addi	r3,r3,4
 100abe8:	d8c00115 	stw	r3,4(sp)
 100abec:	003fbe06 	br	100aae8 <__multiply+0xd4>
 100abf0:	d9000417 	ldw	r4,16(sp)
 100abf4:	01000c0e 	bge	zero,r4,100ac28 <__multiply+0x214>
 100abf8:	d8c00317 	ldw	r3,12(sp)
 100abfc:	18bfff17 	ldw	r2,-4(r3)
 100ac00:	18ffff04 	addi	r3,r3,-4
 100ac04:	10000326 	beq	r2,zero,100ac14 <__multiply+0x200>
 100ac08:	00000706 	br	100ac28 <__multiply+0x214>
 100ac0c:	18800017 	ldw	r2,0(r3)
 100ac10:	1000051e 	bne	r2,zero,100ac28 <__multiply+0x214>
 100ac14:	d9000417 	ldw	r4,16(sp)
 100ac18:	18ffff04 	addi	r3,r3,-4
 100ac1c:	213fffc4 	addi	r4,r4,-1
 100ac20:	d9000415 	stw	r4,16(sp)
 100ac24:	203ff91e 	bne	r4,zero,100ac0c <__multiply+0x1f8>
 100ac28:	d8800417 	ldw	r2,16(sp)
 100ac2c:	d8c00517 	ldw	r3,20(sp)
 100ac30:	18800415 	stw	r2,16(r3)
 100ac34:	1805883a 	mov	r2,r3
 100ac38:	dfc00f17 	ldw	ra,60(sp)
 100ac3c:	df000e17 	ldw	fp,56(sp)
 100ac40:	ddc00d17 	ldw	r23,52(sp)
 100ac44:	dd800c17 	ldw	r22,48(sp)
 100ac48:	dd400b17 	ldw	r21,44(sp)
 100ac4c:	dd000a17 	ldw	r20,40(sp)
 100ac50:	dcc00917 	ldw	r19,36(sp)
 100ac54:	dc800817 	ldw	r18,32(sp)
 100ac58:	dc400717 	ldw	r17,28(sp)
 100ac5c:	dc000617 	ldw	r16,24(sp)
 100ac60:	dec01004 	addi	sp,sp,64
 100ac64:	f800283a 	ret

0100ac68 <__i2b>:
 100ac68:	defffd04 	addi	sp,sp,-12
 100ac6c:	dc000015 	stw	r16,0(sp)
 100ac70:	04000044 	movi	r16,1
 100ac74:	dc800115 	stw	r18,4(sp)
 100ac78:	2825883a 	mov	r18,r5
 100ac7c:	800b883a 	mov	r5,r16
 100ac80:	dfc00215 	stw	ra,8(sp)
 100ac84:	100a5040 	call	100a504 <_Balloc>
 100ac88:	14000415 	stw	r16,16(r2)
 100ac8c:	14800515 	stw	r18,20(r2)
 100ac90:	dfc00217 	ldw	ra,8(sp)
 100ac94:	dc800117 	ldw	r18,4(sp)
 100ac98:	dc000017 	ldw	r16,0(sp)
 100ac9c:	dec00304 	addi	sp,sp,12
 100aca0:	f800283a 	ret

0100aca4 <__multadd>:
 100aca4:	defff604 	addi	sp,sp,-40
 100aca8:	dd800615 	stw	r22,24(sp)
 100acac:	2d800417 	ldw	r22,16(r5)
 100acb0:	df000815 	stw	fp,32(sp)
 100acb4:	ddc00715 	stw	r23,28(sp)
 100acb8:	dd400515 	stw	r21,20(sp)
 100acbc:	dd000415 	stw	r20,16(sp)
 100acc0:	dcc00315 	stw	r19,12(sp)
 100acc4:	dc800215 	stw	r18,8(sp)
 100acc8:	dfc00915 	stw	ra,36(sp)
 100accc:	dc400115 	stw	r17,4(sp)
 100acd0:	dc000015 	stw	r16,0(sp)
 100acd4:	282f883a 	mov	r23,r5
 100acd8:	2039883a 	mov	fp,r4
 100acdc:	302b883a 	mov	r21,r6
 100ace0:	3829883a 	mov	r20,r7
 100ace4:	2c800504 	addi	r18,r5,20
 100ace8:	0027883a 	mov	r19,zero
 100acec:	94400017 	ldw	r17,0(r18)
 100acf0:	a80b883a 	mov	r5,r21
 100acf4:	9cc00044 	addi	r19,r19,1
 100acf8:	893fffcc 	andi	r4,r17,65535
 100acfc:	1002f0c0 	call	1002f0c <__mulsi3>
 100ad00:	8808d43a 	srli	r4,r17,16
 100ad04:	1521883a 	add	r16,r2,r20
 100ad08:	a80b883a 	mov	r5,r21
 100ad0c:	1002f0c0 	call	1002f0c <__mulsi3>
 100ad10:	8008d43a 	srli	r4,r16,16
 100ad14:	843fffcc 	andi	r16,r16,65535
 100ad18:	1105883a 	add	r2,r2,r4
 100ad1c:	1006943a 	slli	r3,r2,16
 100ad20:	1028d43a 	srli	r20,r2,16
 100ad24:	1c07883a 	add	r3,r3,r16
 100ad28:	90c00015 	stw	r3,0(r18)
 100ad2c:	94800104 	addi	r18,r18,4
 100ad30:	9dbfee16 	blt	r19,r22,100acec <__multadd+0x48>
 100ad34:	a0000826 	beq	r20,zero,100ad58 <__multadd+0xb4>
 100ad38:	b8800217 	ldw	r2,8(r23)
 100ad3c:	b080130e 	bge	r22,r2,100ad8c <__multadd+0xe8>
 100ad40:	b585883a 	add	r2,r22,r22
 100ad44:	1085883a 	add	r2,r2,r2
 100ad48:	15c5883a 	add	r2,r2,r23
 100ad4c:	b0c00044 	addi	r3,r22,1
 100ad50:	15000515 	stw	r20,20(r2)
 100ad54:	b8c00415 	stw	r3,16(r23)
 100ad58:	b805883a 	mov	r2,r23
 100ad5c:	dfc00917 	ldw	ra,36(sp)
 100ad60:	df000817 	ldw	fp,32(sp)
 100ad64:	ddc00717 	ldw	r23,28(sp)
 100ad68:	dd800617 	ldw	r22,24(sp)
 100ad6c:	dd400517 	ldw	r21,20(sp)
 100ad70:	dd000417 	ldw	r20,16(sp)
 100ad74:	dcc00317 	ldw	r19,12(sp)
 100ad78:	dc800217 	ldw	r18,8(sp)
 100ad7c:	dc400117 	ldw	r17,4(sp)
 100ad80:	dc000017 	ldw	r16,0(sp)
 100ad84:	dec00a04 	addi	sp,sp,40
 100ad88:	f800283a 	ret
 100ad8c:	b9400117 	ldw	r5,4(r23)
 100ad90:	e009883a 	mov	r4,fp
 100ad94:	29400044 	addi	r5,r5,1
 100ad98:	100a5040 	call	100a504 <_Balloc>
 100ad9c:	b9800417 	ldw	r6,16(r23)
 100ada0:	b9400304 	addi	r5,r23,12
 100ada4:	11000304 	addi	r4,r2,12
 100ada8:	318d883a 	add	r6,r6,r6
 100adac:	318d883a 	add	r6,r6,r6
 100adb0:	31800204 	addi	r6,r6,8
 100adb4:	1023883a 	mov	r17,r2
 100adb8:	1009e040 	call	1009e04 <memcpy>
 100adbc:	b80b883a 	mov	r5,r23
 100adc0:	e009883a 	mov	r4,fp
 100adc4:	1009f840 	call	1009f84 <_Bfree>
 100adc8:	882f883a 	mov	r23,r17
 100adcc:	003fdc06 	br	100ad40 <__multadd+0x9c>

0100add0 <__pow5mult>:
 100add0:	defffa04 	addi	sp,sp,-24
 100add4:	308000cc 	andi	r2,r6,3
 100add8:	dd000415 	stw	r20,16(sp)
 100addc:	dcc00315 	stw	r19,12(sp)
 100ade0:	dc000015 	stw	r16,0(sp)
 100ade4:	dfc00515 	stw	ra,20(sp)
 100ade8:	dc800215 	stw	r18,8(sp)
 100adec:	dc400115 	stw	r17,4(sp)
 100adf0:	3021883a 	mov	r16,r6
 100adf4:	2027883a 	mov	r19,r4
 100adf8:	2829883a 	mov	r20,r5
 100adfc:	10002b1e 	bne	r2,zero,100aeac <__pow5mult+0xdc>
 100ae00:	8025d0ba 	srai	r18,r16,2
 100ae04:	90001b26 	beq	r18,zero,100ae74 <__pow5mult+0xa4>
 100ae08:	9c001217 	ldw	r16,72(r19)
 100ae0c:	8000081e 	bne	r16,zero,100ae30 <__pow5mult+0x60>
 100ae10:	00003006 	br	100aed4 <__pow5mult+0x104>
 100ae14:	800b883a 	mov	r5,r16
 100ae18:	800d883a 	mov	r6,r16
 100ae1c:	9809883a 	mov	r4,r19
 100ae20:	90001426 	beq	r18,zero,100ae74 <__pow5mult+0xa4>
 100ae24:	80800017 	ldw	r2,0(r16)
 100ae28:	10001b26 	beq	r2,zero,100ae98 <__pow5mult+0xc8>
 100ae2c:	1021883a 	mov	r16,r2
 100ae30:	9080004c 	andi	r2,r18,1
 100ae34:	1005003a 	cmpeq	r2,r2,zero
 100ae38:	9025d07a 	srai	r18,r18,1
 100ae3c:	800d883a 	mov	r6,r16
 100ae40:	9809883a 	mov	r4,r19
 100ae44:	a00b883a 	mov	r5,r20
 100ae48:	103ff21e 	bne	r2,zero,100ae14 <__pow5mult+0x44>
 100ae4c:	100aa140 	call	100aa14 <__multiply>
 100ae50:	a00b883a 	mov	r5,r20
 100ae54:	9809883a 	mov	r4,r19
 100ae58:	1023883a 	mov	r17,r2
 100ae5c:	1009f840 	call	1009f84 <_Bfree>
 100ae60:	8829883a 	mov	r20,r17
 100ae64:	800b883a 	mov	r5,r16
 100ae68:	800d883a 	mov	r6,r16
 100ae6c:	9809883a 	mov	r4,r19
 100ae70:	903fec1e 	bne	r18,zero,100ae24 <__pow5mult+0x54>
 100ae74:	a005883a 	mov	r2,r20
 100ae78:	dfc00517 	ldw	ra,20(sp)
 100ae7c:	dd000417 	ldw	r20,16(sp)
 100ae80:	dcc00317 	ldw	r19,12(sp)
 100ae84:	dc800217 	ldw	r18,8(sp)
 100ae88:	dc400117 	ldw	r17,4(sp)
 100ae8c:	dc000017 	ldw	r16,0(sp)
 100ae90:	dec00604 	addi	sp,sp,24
 100ae94:	f800283a 	ret
 100ae98:	100aa140 	call	100aa14 <__multiply>
 100ae9c:	80800015 	stw	r2,0(r16)
 100aea0:	1021883a 	mov	r16,r2
 100aea4:	10000015 	stw	zero,0(r2)
 100aea8:	003fe106 	br	100ae30 <__pow5mult+0x60>
 100aeac:	1085883a 	add	r2,r2,r2
 100aeb0:	00c04074 	movhi	r3,257
 100aeb4:	18c75204 	addi	r3,r3,7496
 100aeb8:	1085883a 	add	r2,r2,r2
 100aebc:	10c5883a 	add	r2,r2,r3
 100aec0:	11bfff17 	ldw	r6,-4(r2)
 100aec4:	000f883a 	mov	r7,zero
 100aec8:	100aca40 	call	100aca4 <__multadd>
 100aecc:	1029883a 	mov	r20,r2
 100aed0:	003fcb06 	br	100ae00 <__pow5mult+0x30>
 100aed4:	9809883a 	mov	r4,r19
 100aed8:	01409c44 	movi	r5,625
 100aedc:	100ac680 	call	100ac68 <__i2b>
 100aee0:	98801215 	stw	r2,72(r19)
 100aee4:	1021883a 	mov	r16,r2
 100aee8:	10000015 	stw	zero,0(r2)
 100aeec:	003fd006 	br	100ae30 <__pow5mult+0x60>

0100aef0 <__s2b>:
 100aef0:	defff904 	addi	sp,sp,-28
 100aef4:	dcc00315 	stw	r19,12(sp)
 100aef8:	dc800215 	stw	r18,8(sp)
 100aefc:	2827883a 	mov	r19,r5
 100af00:	2025883a 	mov	r18,r4
 100af04:	01400244 	movi	r5,9
 100af08:	39000204 	addi	r4,r7,8
 100af0c:	dd000415 	stw	r20,16(sp)
 100af10:	dc400115 	stw	r17,4(sp)
 100af14:	dfc00615 	stw	ra,24(sp)
 100af18:	dd400515 	stw	r21,20(sp)
 100af1c:	dc000015 	stw	r16,0(sp)
 100af20:	3829883a 	mov	r20,r7
 100af24:	3023883a 	mov	r17,r6
 100af28:	100da1c0 	call	100da1c <__divsi3>
 100af2c:	00c00044 	movi	r3,1
 100af30:	1880350e 	bge	r3,r2,100b008 <__s2b+0x118>
 100af34:	000b883a 	mov	r5,zero
 100af38:	18c7883a 	add	r3,r3,r3
 100af3c:	29400044 	addi	r5,r5,1
 100af40:	18bffd16 	blt	r3,r2,100af38 <__s2b+0x48>
 100af44:	9009883a 	mov	r4,r18
 100af48:	100a5040 	call	100a504 <_Balloc>
 100af4c:	1011883a 	mov	r8,r2
 100af50:	d8800717 	ldw	r2,28(sp)
 100af54:	00c00044 	movi	r3,1
 100af58:	01800244 	movi	r6,9
 100af5c:	40800515 	stw	r2,20(r8)
 100af60:	40c00415 	stw	r3,16(r8)
 100af64:	3440260e 	bge	r6,r17,100b000 <__s2b+0x110>
 100af68:	3021883a 	mov	r16,r6
 100af6c:	99ab883a 	add	r21,r19,r6
 100af70:	9c05883a 	add	r2,r19,r16
 100af74:	11c00007 	ldb	r7,0(r2)
 100af78:	400b883a 	mov	r5,r8
 100af7c:	9009883a 	mov	r4,r18
 100af80:	39fff404 	addi	r7,r7,-48
 100af84:	01800284 	movi	r6,10
 100af88:	100aca40 	call	100aca4 <__multadd>
 100af8c:	84000044 	addi	r16,r16,1
 100af90:	1011883a 	mov	r8,r2
 100af94:	8c3ff61e 	bne	r17,r16,100af70 <__s2b+0x80>
 100af98:	ac45883a 	add	r2,r21,r17
 100af9c:	117ffe04 	addi	r5,r2,-8
 100afa0:	880d883a 	mov	r6,r17
 100afa4:	35000c0e 	bge	r6,r20,100afd8 <__s2b+0xe8>
 100afa8:	a185c83a 	sub	r2,r20,r6
 100afac:	2821883a 	mov	r16,r5
 100afb0:	28a3883a 	add	r17,r5,r2
 100afb4:	81c00007 	ldb	r7,0(r16)
 100afb8:	400b883a 	mov	r5,r8
 100afbc:	9009883a 	mov	r4,r18
 100afc0:	39fff404 	addi	r7,r7,-48
 100afc4:	01800284 	movi	r6,10
 100afc8:	100aca40 	call	100aca4 <__multadd>
 100afcc:	84000044 	addi	r16,r16,1
 100afd0:	1011883a 	mov	r8,r2
 100afd4:	847ff71e 	bne	r16,r17,100afb4 <__s2b+0xc4>
 100afd8:	4005883a 	mov	r2,r8
 100afdc:	dfc00617 	ldw	ra,24(sp)
 100afe0:	dd400517 	ldw	r21,20(sp)
 100afe4:	dd000417 	ldw	r20,16(sp)
 100afe8:	dcc00317 	ldw	r19,12(sp)
 100afec:	dc800217 	ldw	r18,8(sp)
 100aff0:	dc400117 	ldw	r17,4(sp)
 100aff4:	dc000017 	ldw	r16,0(sp)
 100aff8:	dec00704 	addi	sp,sp,28
 100affc:	f800283a 	ret
 100b000:	99400284 	addi	r5,r19,10
 100b004:	003fe706 	br	100afa4 <__s2b+0xb4>
 100b008:	000b883a 	mov	r5,zero
 100b00c:	003fcd06 	br	100af44 <__s2b+0x54>

0100b010 <putc>:
 100b010:	defffc04 	addi	sp,sp,-16
 100b014:	dc800215 	stw	r18,8(sp)
 100b018:	04804074 	movhi	r18,257
 100b01c:	948e6a04 	addi	r18,r18,14760
 100b020:	90c00017 	ldw	r3,0(r18)
 100b024:	dc400115 	stw	r17,4(sp)
 100b028:	dc000015 	stw	r16,0(sp)
 100b02c:	dfc00315 	stw	ra,12(sp)
 100b030:	2023883a 	mov	r17,r4
 100b034:	2821883a 	mov	r16,r5
 100b038:	18000226 	beq	r3,zero,100b044 <putc+0x34>
 100b03c:	18800e17 	ldw	r2,56(r3)
 100b040:	10001126 	beq	r2,zero,100b088 <putc+0x78>
 100b044:	80800217 	ldw	r2,8(r16)
 100b048:	10ffffc4 	addi	r3,r2,-1
 100b04c:	80c00215 	stw	r3,8(r16)
 100b050:	18001316 	blt	r3,zero,100b0a0 <putc+0x90>
 100b054:	80800017 	ldw	r2,0(r16)
 100b058:	14400005 	stb	r17,0(r2)
 100b05c:	80c00017 	ldw	r3,0(r16)
 100b060:	18800044 	addi	r2,r3,1
 100b064:	18c00003 	ldbu	r3,0(r3)
 100b068:	80800015 	stw	r2,0(r16)
 100b06c:	1805883a 	mov	r2,r3
 100b070:	dfc00317 	ldw	ra,12(sp)
 100b074:	dc800217 	ldw	r18,8(sp)
 100b078:	dc400117 	ldw	r17,4(sp)
 100b07c:	dc000017 	ldw	r16,0(sp)
 100b080:	dec00404 	addi	sp,sp,16
 100b084:	f800283a 	ret
 100b088:	1809883a 	mov	r4,r3
 100b08c:	10038600 	call	1003860 <__sinit>
 100b090:	80800217 	ldw	r2,8(r16)
 100b094:	10ffffc4 	addi	r3,r2,-1
 100b098:	80c00215 	stw	r3,8(r16)
 100b09c:	183fed0e 	bge	r3,zero,100b054 <putc+0x44>
 100b0a0:	80800617 	ldw	r2,24(r16)
 100b0a4:	18800f16 	blt	r3,r2,100b0e4 <putc+0xd4>
 100b0a8:	80800017 	ldw	r2,0(r16)
 100b0ac:	14400005 	stb	r17,0(r2)
 100b0b0:	81000017 	ldw	r4,0(r16)
 100b0b4:	00800284 	movi	r2,10
 100b0b8:	20c00003 	ldbu	r3,0(r4)
 100b0bc:	18801226 	beq	r3,r2,100b108 <putc+0xf8>
 100b0c0:	20800044 	addi	r2,r4,1
 100b0c4:	80800015 	stw	r2,0(r16)
 100b0c8:	1805883a 	mov	r2,r3
 100b0cc:	dfc00317 	ldw	ra,12(sp)
 100b0d0:	dc800217 	ldw	r18,8(sp)
 100b0d4:	dc400117 	ldw	r17,4(sp)
 100b0d8:	dc000017 	ldw	r16,0(sp)
 100b0dc:	dec00404 	addi	sp,sp,16
 100b0e0:	f800283a 	ret
 100b0e4:	91000017 	ldw	r4,0(r18)
 100b0e8:	880b883a 	mov	r5,r17
 100b0ec:	800d883a 	mov	r6,r16
 100b0f0:	dfc00317 	ldw	ra,12(sp)
 100b0f4:	dc800217 	ldw	r18,8(sp)
 100b0f8:	dc400117 	ldw	r17,4(sp)
 100b0fc:	dc000017 	ldw	r16,0(sp)
 100b100:	dec00404 	addi	sp,sp,16
 100b104:	100b9941 	jmpi	100b994 <__swbuf_r>
 100b108:	91000017 	ldw	r4,0(r18)
 100b10c:	180b883a 	mov	r5,r3
 100b110:	003ff606 	br	100b0ec <putc+0xdc>

0100b114 <_putc_r>:
 100b114:	defffc04 	addi	sp,sp,-16
 100b118:	dc400215 	stw	r17,8(sp)
 100b11c:	dc000115 	stw	r16,4(sp)
 100b120:	dfc00315 	stw	ra,12(sp)
 100b124:	2021883a 	mov	r16,r4
 100b128:	2823883a 	mov	r17,r5
 100b12c:	20000226 	beq	r4,zero,100b138 <_putc_r+0x24>
 100b130:	20800e17 	ldw	r2,56(r4)
 100b134:	10001026 	beq	r2,zero,100b178 <_putc_r+0x64>
 100b138:	30800217 	ldw	r2,8(r6)
 100b13c:	10ffffc4 	addi	r3,r2,-1
 100b140:	30c00215 	stw	r3,8(r6)
 100b144:	18001316 	blt	r3,zero,100b194 <_putc_r+0x80>
 100b148:	30800017 	ldw	r2,0(r6)
 100b14c:	14400005 	stb	r17,0(r2)
 100b150:	30c00017 	ldw	r3,0(r6)
 100b154:	18800044 	addi	r2,r3,1
 100b158:	18c00003 	ldbu	r3,0(r3)
 100b15c:	30800015 	stw	r2,0(r6)
 100b160:	1805883a 	mov	r2,r3
 100b164:	dfc00317 	ldw	ra,12(sp)
 100b168:	dc400217 	ldw	r17,8(sp)
 100b16c:	dc000117 	ldw	r16,4(sp)
 100b170:	dec00404 	addi	sp,sp,16
 100b174:	f800283a 	ret
 100b178:	d9800015 	stw	r6,0(sp)
 100b17c:	10038600 	call	1003860 <__sinit>
 100b180:	d9800017 	ldw	r6,0(sp)
 100b184:	30800217 	ldw	r2,8(r6)
 100b188:	10ffffc4 	addi	r3,r2,-1
 100b18c:	30c00215 	stw	r3,8(r6)
 100b190:	183fed0e 	bge	r3,zero,100b148 <_putc_r+0x34>
 100b194:	30800617 	ldw	r2,24(r6)
 100b198:	18800e16 	blt	r3,r2,100b1d4 <_putc_r+0xc0>
 100b19c:	30800017 	ldw	r2,0(r6)
 100b1a0:	14400005 	stb	r17,0(r2)
 100b1a4:	31000017 	ldw	r4,0(r6)
 100b1a8:	00800284 	movi	r2,10
 100b1ac:	20c00003 	ldbu	r3,0(r4)
 100b1b0:	18800f26 	beq	r3,r2,100b1f0 <_putc_r+0xdc>
 100b1b4:	20800044 	addi	r2,r4,1
 100b1b8:	30800015 	stw	r2,0(r6)
 100b1bc:	1805883a 	mov	r2,r3
 100b1c0:	dfc00317 	ldw	ra,12(sp)
 100b1c4:	dc400217 	ldw	r17,8(sp)
 100b1c8:	dc000117 	ldw	r16,4(sp)
 100b1cc:	dec00404 	addi	sp,sp,16
 100b1d0:	f800283a 	ret
 100b1d4:	8009883a 	mov	r4,r16
 100b1d8:	880b883a 	mov	r5,r17
 100b1dc:	dfc00317 	ldw	ra,12(sp)
 100b1e0:	dc400217 	ldw	r17,8(sp)
 100b1e4:	dc000117 	ldw	r16,4(sp)
 100b1e8:	dec00404 	addi	sp,sp,16
 100b1ec:	100b9941 	jmpi	100b994 <__swbuf_r>
 100b1f0:	8009883a 	mov	r4,r16
 100b1f4:	180b883a 	mov	r5,r3
 100b1f8:	003ff806 	br	100b1dc <_putc_r+0xc8>

0100b1fc <_read_r>:
 100b1fc:	defffd04 	addi	sp,sp,-12
 100b200:	dc000015 	stw	r16,0(sp)
 100b204:	04004074 	movhi	r16,257
 100b208:	84155304 	addi	r16,r16,21836
 100b20c:	dc400115 	stw	r17,4(sp)
 100b210:	80000015 	stw	zero,0(r16)
 100b214:	2023883a 	mov	r17,r4
 100b218:	2809883a 	mov	r4,r5
 100b21c:	300b883a 	mov	r5,r6
 100b220:	380d883a 	mov	r6,r7
 100b224:	dfc00215 	stw	ra,8(sp)
 100b228:	100ed7c0 	call	100ed7c <read>
 100b22c:	1007883a 	mov	r3,r2
 100b230:	00bfffc4 	movi	r2,-1
 100b234:	18800626 	beq	r3,r2,100b250 <_read_r+0x54>
 100b238:	1805883a 	mov	r2,r3
 100b23c:	dfc00217 	ldw	ra,8(sp)
 100b240:	dc400117 	ldw	r17,4(sp)
 100b244:	dc000017 	ldw	r16,0(sp)
 100b248:	dec00304 	addi	sp,sp,12
 100b24c:	f800283a 	ret
 100b250:	80800017 	ldw	r2,0(r16)
 100b254:	103ff826 	beq	r2,zero,100b238 <_read_r+0x3c>
 100b258:	88800015 	stw	r2,0(r17)
 100b25c:	1805883a 	mov	r2,r3
 100b260:	dfc00217 	ldw	ra,8(sp)
 100b264:	dc400117 	ldw	r17,4(sp)
 100b268:	dc000017 	ldw	r16,0(sp)
 100b26c:	dec00304 	addi	sp,sp,12
 100b270:	f800283a 	ret

0100b274 <_realloc_r>:
 100b274:	defff404 	addi	sp,sp,-48
 100b278:	dd800815 	stw	r22,32(sp)
 100b27c:	dc800415 	stw	r18,16(sp)
 100b280:	dc400315 	stw	r17,12(sp)
 100b284:	dfc00b15 	stw	ra,44(sp)
 100b288:	df000a15 	stw	fp,40(sp)
 100b28c:	ddc00915 	stw	r23,36(sp)
 100b290:	dd400715 	stw	r21,28(sp)
 100b294:	dd000615 	stw	r20,24(sp)
 100b298:	dcc00515 	stw	r19,20(sp)
 100b29c:	dc000215 	stw	r16,8(sp)
 100b2a0:	2825883a 	mov	r18,r5
 100b2a4:	3023883a 	mov	r17,r6
 100b2a8:	202d883a 	mov	r22,r4
 100b2ac:	2800c926 	beq	r5,zero,100b5d4 <_realloc_r+0x360>
 100b2b0:	100ea580 	call	100ea58 <__malloc_lock>
 100b2b4:	943ffe04 	addi	r16,r18,-8
 100b2b8:	88c002c4 	addi	r3,r17,11
 100b2bc:	00800584 	movi	r2,22
 100b2c0:	82000117 	ldw	r8,4(r16)
 100b2c4:	10c01b2e 	bgeu	r2,r3,100b334 <_realloc_r+0xc0>
 100b2c8:	00bffe04 	movi	r2,-8
 100b2cc:	188e703a 	and	r7,r3,r2
 100b2d0:	3839883a 	mov	fp,r7
 100b2d4:	38001a16 	blt	r7,zero,100b340 <_realloc_r+0xcc>
 100b2d8:	e4401936 	bltu	fp,r17,100b340 <_realloc_r+0xcc>
 100b2dc:	013fff04 	movi	r4,-4
 100b2e0:	4126703a 	and	r19,r8,r4
 100b2e4:	99c02616 	blt	r19,r7,100b380 <_realloc_r+0x10c>
 100b2e8:	802b883a 	mov	r21,r16
 100b2ec:	9829883a 	mov	r20,r19
 100b2f0:	84000204 	addi	r16,r16,8
 100b2f4:	a80f883a 	mov	r7,r21
 100b2f8:	a70dc83a 	sub	r6,r20,fp
 100b2fc:	008003c4 	movi	r2,15
 100b300:	1180c136 	bltu	r2,r6,100b608 <_realloc_r+0x394>
 100b304:	38800117 	ldw	r2,4(r7)
 100b308:	a549883a 	add	r4,r20,r21
 100b30c:	1080004c 	andi	r2,r2,1
 100b310:	a084b03a 	or	r2,r20,r2
 100b314:	38800115 	stw	r2,4(r7)
 100b318:	20c00117 	ldw	r3,4(r4)
 100b31c:	18c00054 	ori	r3,r3,1
 100b320:	20c00115 	stw	r3,4(r4)
 100b324:	b009883a 	mov	r4,r22
 100b328:	100ea780 	call	100ea78 <__malloc_unlock>
 100b32c:	8023883a 	mov	r17,r16
 100b330:	00000606 	br	100b34c <_realloc_r+0xd8>
 100b334:	01c00404 	movi	r7,16
 100b338:	3839883a 	mov	fp,r7
 100b33c:	e47fe72e 	bgeu	fp,r17,100b2dc <_realloc_r+0x68>
 100b340:	00800304 	movi	r2,12
 100b344:	0023883a 	mov	r17,zero
 100b348:	b0800015 	stw	r2,0(r22)
 100b34c:	8805883a 	mov	r2,r17
 100b350:	dfc00b17 	ldw	ra,44(sp)
 100b354:	df000a17 	ldw	fp,40(sp)
 100b358:	ddc00917 	ldw	r23,36(sp)
 100b35c:	dd800817 	ldw	r22,32(sp)
 100b360:	dd400717 	ldw	r21,28(sp)
 100b364:	dd000617 	ldw	r20,24(sp)
 100b368:	dcc00517 	ldw	r19,20(sp)
 100b36c:	dc800417 	ldw	r18,16(sp)
 100b370:	dc400317 	ldw	r17,12(sp)
 100b374:	dc000217 	ldw	r16,8(sp)
 100b378:	dec00c04 	addi	sp,sp,48
 100b37c:	f800283a 	ret
 100b380:	00804074 	movhi	r2,257
 100b384:	1088ab04 	addi	r2,r2,8876
 100b388:	12400217 	ldw	r9,8(r2)
 100b38c:	84cd883a 	add	r6,r16,r19
 100b390:	802b883a 	mov	r21,r16
 100b394:	3240b926 	beq	r6,r9,100b67c <_realloc_r+0x408>
 100b398:	31400117 	ldw	r5,4(r6)
 100b39c:	00bfff84 	movi	r2,-2
 100b3a0:	2884703a 	and	r2,r5,r2
 100b3a4:	1185883a 	add	r2,r2,r6
 100b3a8:	10c00117 	ldw	r3,4(r2)
 100b3ac:	18c0004c 	andi	r3,r3,1
 100b3b0:	1807003a 	cmpeq	r3,r3,zero
 100b3b4:	1800a326 	beq	r3,zero,100b644 <_realloc_r+0x3d0>
 100b3b8:	2908703a 	and	r4,r5,r4
 100b3bc:	9929883a 	add	r20,r19,r4
 100b3c0:	a1c0a30e 	bge	r20,r7,100b650 <_realloc_r+0x3dc>
 100b3c4:	4080004c 	andi	r2,r8,1
 100b3c8:	1000551e 	bne	r2,zero,100b520 <_realloc_r+0x2ac>
 100b3cc:	80800017 	ldw	r2,0(r16)
 100b3d0:	80afc83a 	sub	r23,r16,r2
 100b3d4:	b8c00117 	ldw	r3,4(r23)
 100b3d8:	00bfff04 	movi	r2,-4
 100b3dc:	1884703a 	and	r2,r3,r2
 100b3e0:	30002e26 	beq	r6,zero,100b49c <_realloc_r+0x228>
 100b3e4:	3240b926 	beq	r6,r9,100b6cc <_realloc_r+0x458>
 100b3e8:	98a9883a 	add	r20,r19,r2
 100b3ec:	2509883a 	add	r4,r4,r20
 100b3f0:	d9000015 	stw	r4,0(sp)
 100b3f4:	21c02a16 	blt	r4,r7,100b4a0 <_realloc_r+0x22c>
 100b3f8:	30800317 	ldw	r2,12(r6)
 100b3fc:	30c00217 	ldw	r3,8(r6)
 100b400:	01400904 	movi	r5,36
 100b404:	99bfff04 	addi	r6,r19,-4
 100b408:	18800315 	stw	r2,12(r3)
 100b40c:	10c00215 	stw	r3,8(r2)
 100b410:	b9000317 	ldw	r4,12(r23)
 100b414:	b8800217 	ldw	r2,8(r23)
 100b418:	b82b883a 	mov	r21,r23
 100b41c:	bc000204 	addi	r16,r23,8
 100b420:	20800215 	stw	r2,8(r4)
 100b424:	11000315 	stw	r4,12(r2)
 100b428:	2980e436 	bltu	r5,r6,100b7bc <_realloc_r+0x548>
 100b42c:	008004c4 	movi	r2,19
 100b430:	9009883a 	mov	r4,r18
 100b434:	8011883a 	mov	r8,r16
 100b438:	11800f2e 	bgeu	r2,r6,100b478 <_realloc_r+0x204>
 100b43c:	90800017 	ldw	r2,0(r18)
 100b440:	ba000404 	addi	r8,r23,16
 100b444:	91000204 	addi	r4,r18,8
 100b448:	b8800215 	stw	r2,8(r23)
 100b44c:	90c00117 	ldw	r3,4(r18)
 100b450:	008006c4 	movi	r2,27
 100b454:	b8c00315 	stw	r3,12(r23)
 100b458:	1180072e 	bgeu	r2,r6,100b478 <_realloc_r+0x204>
 100b45c:	90c00217 	ldw	r3,8(r18)
 100b460:	ba000604 	addi	r8,r23,24
 100b464:	91000404 	addi	r4,r18,16
 100b468:	b8c00415 	stw	r3,16(r23)
 100b46c:	90800317 	ldw	r2,12(r18)
 100b470:	b8800515 	stw	r2,20(r23)
 100b474:	3140e726 	beq	r6,r5,100b814 <_realloc_r+0x5a0>
 100b478:	20800017 	ldw	r2,0(r4)
 100b47c:	dd000017 	ldw	r20,0(sp)
 100b480:	b80f883a 	mov	r7,r23
 100b484:	40800015 	stw	r2,0(r8)
 100b488:	20c00117 	ldw	r3,4(r4)
 100b48c:	40c00115 	stw	r3,4(r8)
 100b490:	20800217 	ldw	r2,8(r4)
 100b494:	40800215 	stw	r2,8(r8)
 100b498:	003f9706 	br	100b2f8 <_realloc_r+0x84>
 100b49c:	98a9883a 	add	r20,r19,r2
 100b4a0:	a1c01f16 	blt	r20,r7,100b520 <_realloc_r+0x2ac>
 100b4a4:	b8c00317 	ldw	r3,12(r23)
 100b4a8:	b8800217 	ldw	r2,8(r23)
 100b4ac:	99bfff04 	addi	r6,r19,-4
 100b4b0:	01400904 	movi	r5,36
 100b4b4:	b82b883a 	mov	r21,r23
 100b4b8:	18800215 	stw	r2,8(r3)
 100b4bc:	10c00315 	stw	r3,12(r2)
 100b4c0:	bc000204 	addi	r16,r23,8
 100b4c4:	2980c336 	bltu	r5,r6,100b7d4 <_realloc_r+0x560>
 100b4c8:	008004c4 	movi	r2,19
 100b4cc:	9009883a 	mov	r4,r18
 100b4d0:	8011883a 	mov	r8,r16
 100b4d4:	11800f2e 	bgeu	r2,r6,100b514 <_realloc_r+0x2a0>
 100b4d8:	90800017 	ldw	r2,0(r18)
 100b4dc:	ba000404 	addi	r8,r23,16
 100b4e0:	91000204 	addi	r4,r18,8
 100b4e4:	b8800215 	stw	r2,8(r23)
 100b4e8:	90c00117 	ldw	r3,4(r18)
 100b4ec:	008006c4 	movi	r2,27
 100b4f0:	b8c00315 	stw	r3,12(r23)
 100b4f4:	1180072e 	bgeu	r2,r6,100b514 <_realloc_r+0x2a0>
 100b4f8:	90c00217 	ldw	r3,8(r18)
 100b4fc:	ba000604 	addi	r8,r23,24
 100b500:	91000404 	addi	r4,r18,16
 100b504:	b8c00415 	stw	r3,16(r23)
 100b508:	90800317 	ldw	r2,12(r18)
 100b50c:	b8800515 	stw	r2,20(r23)
 100b510:	3140c726 	beq	r6,r5,100b830 <_realloc_r+0x5bc>
 100b514:	20800017 	ldw	r2,0(r4)
 100b518:	b80f883a 	mov	r7,r23
 100b51c:	003fd906 	br	100b484 <_realloc_r+0x210>
 100b520:	880b883a 	mov	r5,r17
 100b524:	b009883a 	mov	r4,r22
 100b528:	1004a600 	call	1004a60 <_malloc_r>
 100b52c:	1023883a 	mov	r17,r2
 100b530:	10002526 	beq	r2,zero,100b5c8 <_realloc_r+0x354>
 100b534:	80800117 	ldw	r2,4(r16)
 100b538:	00ffff84 	movi	r3,-2
 100b53c:	893ffe04 	addi	r4,r17,-8
 100b540:	10c4703a 	and	r2,r2,r3
 100b544:	8085883a 	add	r2,r16,r2
 100b548:	20809526 	beq	r4,r2,100b7a0 <_realloc_r+0x52c>
 100b54c:	99bfff04 	addi	r6,r19,-4
 100b550:	01c00904 	movi	r7,36
 100b554:	39804536 	bltu	r7,r6,100b66c <_realloc_r+0x3f8>
 100b558:	008004c4 	movi	r2,19
 100b55c:	9009883a 	mov	r4,r18
 100b560:	880b883a 	mov	r5,r17
 100b564:	11800f2e 	bgeu	r2,r6,100b5a4 <_realloc_r+0x330>
 100b568:	90800017 	ldw	r2,0(r18)
 100b56c:	89400204 	addi	r5,r17,8
 100b570:	91000204 	addi	r4,r18,8
 100b574:	88800015 	stw	r2,0(r17)
 100b578:	90c00117 	ldw	r3,4(r18)
 100b57c:	008006c4 	movi	r2,27
 100b580:	88c00115 	stw	r3,4(r17)
 100b584:	1180072e 	bgeu	r2,r6,100b5a4 <_realloc_r+0x330>
 100b588:	90c00217 	ldw	r3,8(r18)
 100b58c:	89400404 	addi	r5,r17,16
 100b590:	91000404 	addi	r4,r18,16
 100b594:	88c00215 	stw	r3,8(r17)
 100b598:	90800317 	ldw	r2,12(r18)
 100b59c:	88800315 	stw	r2,12(r17)
 100b5a0:	31c09126 	beq	r6,r7,100b7e8 <_realloc_r+0x574>
 100b5a4:	20800017 	ldw	r2,0(r4)
 100b5a8:	28800015 	stw	r2,0(r5)
 100b5ac:	20c00117 	ldw	r3,4(r4)
 100b5b0:	28c00115 	stw	r3,4(r5)
 100b5b4:	20800217 	ldw	r2,8(r4)
 100b5b8:	28800215 	stw	r2,8(r5)
 100b5bc:	900b883a 	mov	r5,r18
 100b5c0:	b009883a 	mov	r4,r22
 100b5c4:	1003d280 	call	1003d28 <_free_r>
 100b5c8:	b009883a 	mov	r4,r22
 100b5cc:	100ea780 	call	100ea78 <__malloc_unlock>
 100b5d0:	003f5e06 	br	100b34c <_realloc_r+0xd8>
 100b5d4:	300b883a 	mov	r5,r6
 100b5d8:	dfc00b17 	ldw	ra,44(sp)
 100b5dc:	df000a17 	ldw	fp,40(sp)
 100b5e0:	ddc00917 	ldw	r23,36(sp)
 100b5e4:	dd800817 	ldw	r22,32(sp)
 100b5e8:	dd400717 	ldw	r21,28(sp)
 100b5ec:	dd000617 	ldw	r20,24(sp)
 100b5f0:	dcc00517 	ldw	r19,20(sp)
 100b5f4:	dc800417 	ldw	r18,16(sp)
 100b5f8:	dc400317 	ldw	r17,12(sp)
 100b5fc:	dc000217 	ldw	r16,8(sp)
 100b600:	dec00c04 	addi	sp,sp,48
 100b604:	1004a601 	jmpi	1004a60 <_malloc_r>
 100b608:	38800117 	ldw	r2,4(r7)
 100b60c:	e54b883a 	add	r5,fp,r21
 100b610:	31000054 	ori	r4,r6,1
 100b614:	1080004c 	andi	r2,r2,1
 100b618:	1704b03a 	or	r2,r2,fp
 100b61c:	38800115 	stw	r2,4(r7)
 100b620:	29000115 	stw	r4,4(r5)
 100b624:	2987883a 	add	r3,r5,r6
 100b628:	18800117 	ldw	r2,4(r3)
 100b62c:	29400204 	addi	r5,r5,8
 100b630:	b009883a 	mov	r4,r22
 100b634:	10800054 	ori	r2,r2,1
 100b638:	18800115 	stw	r2,4(r3)
 100b63c:	1003d280 	call	1003d28 <_free_r>
 100b640:	003f3806 	br	100b324 <_realloc_r+0xb0>
 100b644:	000d883a 	mov	r6,zero
 100b648:	0009883a 	mov	r4,zero
 100b64c:	003f5d06 	br	100b3c4 <_realloc_r+0x150>
 100b650:	30c00217 	ldw	r3,8(r6)
 100b654:	30800317 	ldw	r2,12(r6)
 100b658:	800f883a 	mov	r7,r16
 100b65c:	84000204 	addi	r16,r16,8
 100b660:	10c00215 	stw	r3,8(r2)
 100b664:	18800315 	stw	r2,12(r3)
 100b668:	003f2306 	br	100b2f8 <_realloc_r+0x84>
 100b66c:	8809883a 	mov	r4,r17
 100b670:	900b883a 	mov	r5,r18
 100b674:	1009ea40 	call	1009ea4 <memmove>
 100b678:	003fd006 	br	100b5bc <_realloc_r+0x348>
 100b67c:	30800117 	ldw	r2,4(r6)
 100b680:	e0c00404 	addi	r3,fp,16
 100b684:	1108703a 	and	r4,r2,r4
 100b688:	9905883a 	add	r2,r19,r4
 100b68c:	10ff4d16 	blt	r2,r3,100b3c4 <_realloc_r+0x150>
 100b690:	1705c83a 	sub	r2,r2,fp
 100b694:	870b883a 	add	r5,r16,fp
 100b698:	10800054 	ori	r2,r2,1
 100b69c:	28800115 	stw	r2,4(r5)
 100b6a0:	80c00117 	ldw	r3,4(r16)
 100b6a4:	00804074 	movhi	r2,257
 100b6a8:	1088ab04 	addi	r2,r2,8876
 100b6ac:	b009883a 	mov	r4,r22
 100b6b0:	18c0004c 	andi	r3,r3,1
 100b6b4:	e0c6b03a 	or	r3,fp,r3
 100b6b8:	11400215 	stw	r5,8(r2)
 100b6bc:	80c00115 	stw	r3,4(r16)
 100b6c0:	100ea780 	call	100ea78 <__malloc_unlock>
 100b6c4:	84400204 	addi	r17,r16,8
 100b6c8:	003f2006 	br	100b34c <_realloc_r+0xd8>
 100b6cc:	98a9883a 	add	r20,r19,r2
 100b6d0:	2509883a 	add	r4,r4,r20
 100b6d4:	e0800404 	addi	r2,fp,16
 100b6d8:	d9000115 	stw	r4,4(sp)
 100b6dc:	20bf7016 	blt	r4,r2,100b4a0 <_realloc_r+0x22c>
 100b6e0:	b8c00317 	ldw	r3,12(r23)
 100b6e4:	b8800217 	ldw	r2,8(r23)
 100b6e8:	99bfff04 	addi	r6,r19,-4
 100b6ec:	01400904 	movi	r5,36
 100b6f0:	18800215 	stw	r2,8(r3)
 100b6f4:	10c00315 	stw	r3,12(r2)
 100b6f8:	bc400204 	addi	r17,r23,8
 100b6fc:	29804136 	bltu	r5,r6,100b804 <_realloc_r+0x590>
 100b700:	008004c4 	movi	r2,19
 100b704:	9009883a 	mov	r4,r18
 100b708:	880f883a 	mov	r7,r17
 100b70c:	11800f2e 	bgeu	r2,r6,100b74c <_realloc_r+0x4d8>
 100b710:	90800017 	ldw	r2,0(r18)
 100b714:	b9c00404 	addi	r7,r23,16
 100b718:	91000204 	addi	r4,r18,8
 100b71c:	b8800215 	stw	r2,8(r23)
 100b720:	90c00117 	ldw	r3,4(r18)
 100b724:	008006c4 	movi	r2,27
 100b728:	b8c00315 	stw	r3,12(r23)
 100b72c:	1180072e 	bgeu	r2,r6,100b74c <_realloc_r+0x4d8>
 100b730:	90c00217 	ldw	r3,8(r18)
 100b734:	b9c00604 	addi	r7,r23,24
 100b738:	91000404 	addi	r4,r18,16
 100b73c:	b8c00415 	stw	r3,16(r23)
 100b740:	90800317 	ldw	r2,12(r18)
 100b744:	b8800515 	stw	r2,20(r23)
 100b748:	31404026 	beq	r6,r5,100b84c <_realloc_r+0x5d8>
 100b74c:	20800017 	ldw	r2,0(r4)
 100b750:	38800015 	stw	r2,0(r7)
 100b754:	20c00117 	ldw	r3,4(r4)
 100b758:	38c00115 	stw	r3,4(r7)
 100b75c:	20800217 	ldw	r2,8(r4)
 100b760:	38800215 	stw	r2,8(r7)
 100b764:	d8c00117 	ldw	r3,4(sp)
 100b768:	bf0b883a 	add	r5,r23,fp
 100b76c:	b009883a 	mov	r4,r22
 100b770:	1f05c83a 	sub	r2,r3,fp
 100b774:	10800054 	ori	r2,r2,1
 100b778:	28800115 	stw	r2,4(r5)
 100b77c:	b8c00117 	ldw	r3,4(r23)
 100b780:	00804074 	movhi	r2,257
 100b784:	1088ab04 	addi	r2,r2,8876
 100b788:	11400215 	stw	r5,8(r2)
 100b78c:	18c0004c 	andi	r3,r3,1
 100b790:	e0c6b03a 	or	r3,fp,r3
 100b794:	b8c00115 	stw	r3,4(r23)
 100b798:	100ea780 	call	100ea78 <__malloc_unlock>
 100b79c:	003eeb06 	br	100b34c <_realloc_r+0xd8>
 100b7a0:	20800117 	ldw	r2,4(r4)
 100b7a4:	00ffff04 	movi	r3,-4
 100b7a8:	800f883a 	mov	r7,r16
 100b7ac:	10c4703a 	and	r2,r2,r3
 100b7b0:	98a9883a 	add	r20,r19,r2
 100b7b4:	84000204 	addi	r16,r16,8
 100b7b8:	003ecf06 	br	100b2f8 <_realloc_r+0x84>
 100b7bc:	900b883a 	mov	r5,r18
 100b7c0:	8009883a 	mov	r4,r16
 100b7c4:	1009ea40 	call	1009ea4 <memmove>
 100b7c8:	dd000017 	ldw	r20,0(sp)
 100b7cc:	b80f883a 	mov	r7,r23
 100b7d0:	003ec906 	br	100b2f8 <_realloc_r+0x84>
 100b7d4:	900b883a 	mov	r5,r18
 100b7d8:	8009883a 	mov	r4,r16
 100b7dc:	1009ea40 	call	1009ea4 <memmove>
 100b7e0:	b80f883a 	mov	r7,r23
 100b7e4:	003ec406 	br	100b2f8 <_realloc_r+0x84>
 100b7e8:	90c00417 	ldw	r3,16(r18)
 100b7ec:	89400604 	addi	r5,r17,24
 100b7f0:	91000604 	addi	r4,r18,24
 100b7f4:	88c00415 	stw	r3,16(r17)
 100b7f8:	90800517 	ldw	r2,20(r18)
 100b7fc:	88800515 	stw	r2,20(r17)
 100b800:	003f6806 	br	100b5a4 <_realloc_r+0x330>
 100b804:	900b883a 	mov	r5,r18
 100b808:	8809883a 	mov	r4,r17
 100b80c:	1009ea40 	call	1009ea4 <memmove>
 100b810:	003fd406 	br	100b764 <_realloc_r+0x4f0>
 100b814:	90c00417 	ldw	r3,16(r18)
 100b818:	91000604 	addi	r4,r18,24
 100b81c:	ba000804 	addi	r8,r23,32
 100b820:	b8c00615 	stw	r3,24(r23)
 100b824:	90800517 	ldw	r2,20(r18)
 100b828:	b8800715 	stw	r2,28(r23)
 100b82c:	003f1206 	br	100b478 <_realloc_r+0x204>
 100b830:	90c00417 	ldw	r3,16(r18)
 100b834:	91000604 	addi	r4,r18,24
 100b838:	ba000804 	addi	r8,r23,32
 100b83c:	b8c00615 	stw	r3,24(r23)
 100b840:	90800517 	ldw	r2,20(r18)
 100b844:	b8800715 	stw	r2,28(r23)
 100b848:	003f3206 	br	100b514 <_realloc_r+0x2a0>
 100b84c:	90c00417 	ldw	r3,16(r18)
 100b850:	91000604 	addi	r4,r18,24
 100b854:	b9c00804 	addi	r7,r23,32
 100b858:	b8c00615 	stw	r3,24(r23)
 100b85c:	90800517 	ldw	r2,20(r18)
 100b860:	b8800715 	stw	r2,28(r23)
 100b864:	003fb906 	br	100b74c <_realloc_r+0x4d8>

0100b868 <__isinfd>:
 100b868:	200d883a 	mov	r6,r4
 100b86c:	0109c83a 	sub	r4,zero,r4
 100b870:	2188b03a 	or	r4,r4,r6
 100b874:	2008d7fa 	srli	r4,r4,31
 100b878:	00a00034 	movhi	r2,32768
 100b87c:	10bfffc4 	addi	r2,r2,-1
 100b880:	1144703a 	and	r2,r2,r5
 100b884:	2088b03a 	or	r4,r4,r2
 100b888:	009ffc34 	movhi	r2,32752
 100b88c:	1105c83a 	sub	r2,r2,r4
 100b890:	0087c83a 	sub	r3,zero,r2
 100b894:	10c4b03a 	or	r2,r2,r3
 100b898:	1004d7fa 	srli	r2,r2,31
 100b89c:	00c00044 	movi	r3,1
 100b8a0:	1885c83a 	sub	r2,r3,r2
 100b8a4:	f800283a 	ret

0100b8a8 <__isnand>:
 100b8a8:	200d883a 	mov	r6,r4
 100b8ac:	0109c83a 	sub	r4,zero,r4
 100b8b0:	2188b03a 	or	r4,r4,r6
 100b8b4:	2008d7fa 	srli	r4,r4,31
 100b8b8:	00a00034 	movhi	r2,32768
 100b8bc:	10bfffc4 	addi	r2,r2,-1
 100b8c0:	1144703a 	and	r2,r2,r5
 100b8c4:	2088b03a 	or	r4,r4,r2
 100b8c8:	009ffc34 	movhi	r2,32752
 100b8cc:	1105c83a 	sub	r2,r2,r4
 100b8d0:	1004d7fa 	srli	r2,r2,31
 100b8d4:	f800283a 	ret

0100b8d8 <strcmp>:
 100b8d8:	2144b03a 	or	r2,r4,r5
 100b8dc:	108000cc 	andi	r2,r2,3
 100b8e0:	10001d1e 	bne	r2,zero,100b958 <strcmp+0x80>
 100b8e4:	200f883a 	mov	r7,r4
 100b8e8:	28800017 	ldw	r2,0(r5)
 100b8ec:	21000017 	ldw	r4,0(r4)
 100b8f0:	280d883a 	mov	r6,r5
 100b8f4:	2080161e 	bne	r4,r2,100b950 <strcmp+0x78>
 100b8f8:	023fbff4 	movhi	r8,65279
 100b8fc:	423fbfc4 	addi	r8,r8,-257
 100b900:	2207883a 	add	r3,r4,r8
 100b904:	01602074 	movhi	r5,32897
 100b908:	29602004 	addi	r5,r5,-32640
 100b90c:	1946703a 	and	r3,r3,r5
 100b910:	0104303a 	nor	r2,zero,r4
 100b914:	10c4703a 	and	r2,r2,r3
 100b918:	10001c1e 	bne	r2,zero,100b98c <strcmp+0xb4>
 100b91c:	4013883a 	mov	r9,r8
 100b920:	2811883a 	mov	r8,r5
 100b924:	00000106 	br	100b92c <strcmp+0x54>
 100b928:	1800181e 	bne	r3,zero,100b98c <strcmp+0xb4>
 100b92c:	39c00104 	addi	r7,r7,4
 100b930:	39000017 	ldw	r4,0(r7)
 100b934:	31800104 	addi	r6,r6,4
 100b938:	31400017 	ldw	r5,0(r6)
 100b93c:	2245883a 	add	r2,r4,r9
 100b940:	1204703a 	and	r2,r2,r8
 100b944:	0106303a 	nor	r3,zero,r4
 100b948:	1886703a 	and	r3,r3,r2
 100b94c:	217ff626 	beq	r4,r5,100b928 <strcmp+0x50>
 100b950:	3809883a 	mov	r4,r7
 100b954:	300b883a 	mov	r5,r6
 100b958:	20c00007 	ldb	r3,0(r4)
 100b95c:	1800051e 	bne	r3,zero,100b974 <strcmp+0x9c>
 100b960:	00000606 	br	100b97c <strcmp+0xa4>
 100b964:	21000044 	addi	r4,r4,1
 100b968:	20c00007 	ldb	r3,0(r4)
 100b96c:	29400044 	addi	r5,r5,1
 100b970:	18000226 	beq	r3,zero,100b97c <strcmp+0xa4>
 100b974:	28800007 	ldb	r2,0(r5)
 100b978:	18bffa26 	beq	r3,r2,100b964 <strcmp+0x8c>
 100b97c:	20c00003 	ldbu	r3,0(r4)
 100b980:	28800003 	ldbu	r2,0(r5)
 100b984:	1885c83a 	sub	r2,r3,r2
 100b988:	f800283a 	ret
 100b98c:	0005883a 	mov	r2,zero
 100b990:	f800283a 	ret

0100b994 <__swbuf_r>:
 100b994:	defffc04 	addi	sp,sp,-16
 100b998:	dc400215 	stw	r17,8(sp)
 100b99c:	dc000115 	stw	r16,4(sp)
 100b9a0:	dfc00315 	stw	ra,12(sp)
 100b9a4:	2023883a 	mov	r17,r4
 100b9a8:	2821883a 	mov	r16,r5
 100b9ac:	20000226 	beq	r4,zero,100b9b8 <__swbuf_r+0x24>
 100b9b0:	20800e17 	ldw	r2,56(r4)
 100b9b4:	10002f26 	beq	r2,zero,100ba74 <__swbuf_r+0xe0>
 100b9b8:	3080030b 	ldhu	r2,12(r6)
 100b9bc:	30c00617 	ldw	r3,24(r6)
 100b9c0:	1080020c 	andi	r2,r2,8
 100b9c4:	30c00215 	stw	r3,8(r6)
 100b9c8:	10002226 	beq	r2,zero,100ba54 <__swbuf_r+0xc0>
 100b9cc:	30c00417 	ldw	r3,16(r6)
 100b9d0:	18002026 	beq	r3,zero,100ba54 <__swbuf_r+0xc0>
 100b9d4:	31000017 	ldw	r4,0(r6)
 100b9d8:	30800517 	ldw	r2,20(r6)
 100b9dc:	20c7c83a 	sub	r3,r4,r3
 100b9e0:	18802f0e 	bge	r3,r2,100baa0 <__swbuf_r+0x10c>
 100b9e4:	19400044 	addi	r5,r3,1
 100b9e8:	30800217 	ldw	r2,8(r6)
 100b9ec:	84003fcc 	andi	r16,r16,255
 100b9f0:	20c00044 	addi	r3,r4,1
 100b9f4:	10bfffc4 	addi	r2,r2,-1
 100b9f8:	30800215 	stw	r2,8(r6)
 100b9fc:	24000005 	stb	r16,0(r4)
 100ba00:	30800517 	ldw	r2,20(r6)
 100ba04:	30c00015 	stw	r3,0(r6)
 100ba08:	11400c26 	beq	r2,r5,100ba3c <__swbuf_r+0xa8>
 100ba0c:	3080030b 	ldhu	r2,12(r6)
 100ba10:	1080004c 	andi	r2,r2,1
 100ba14:	1005003a 	cmpeq	r2,r2,zero
 100ba18:	10000626 	beq	r2,zero,100ba34 <__swbuf_r+0xa0>
 100ba1c:	8005883a 	mov	r2,r16
 100ba20:	dfc00317 	ldw	ra,12(sp)
 100ba24:	dc400217 	ldw	r17,8(sp)
 100ba28:	dc000117 	ldw	r16,4(sp)
 100ba2c:	dec00404 	addi	sp,sp,16
 100ba30:	f800283a 	ret
 100ba34:	00800284 	movi	r2,10
 100ba38:	80bff81e 	bne	r16,r2,100ba1c <__swbuf_r+0x88>
 100ba3c:	8809883a 	mov	r4,r17
 100ba40:	300b883a 	mov	r5,r6
 100ba44:	10035c80 	call	10035c8 <_fflush_r>
 100ba48:	103ff426 	beq	r2,zero,100ba1c <__swbuf_r+0x88>
 100ba4c:	043fffc4 	movi	r16,-1
 100ba50:	003ff206 	br	100ba1c <__swbuf_r+0x88>
 100ba54:	300b883a 	mov	r5,r6
 100ba58:	8809883a 	mov	r4,r17
 100ba5c:	d9800015 	stw	r6,0(sp)
 100ba60:	1007c940 	call	1007c94 <__swsetup_r>
 100ba64:	d9800017 	ldw	r6,0(sp)
 100ba68:	1000061e 	bne	r2,zero,100ba84 <__swbuf_r+0xf0>
 100ba6c:	30c00417 	ldw	r3,16(r6)
 100ba70:	003fd806 	br	100b9d4 <__swbuf_r+0x40>
 100ba74:	d9800015 	stw	r6,0(sp)
 100ba78:	10038600 	call	1003860 <__sinit>
 100ba7c:	d9800017 	ldw	r6,0(sp)
 100ba80:	003fcd06 	br	100b9b8 <__swbuf_r+0x24>
 100ba84:	3080030b 	ldhu	r2,12(r6)
 100ba88:	00c00244 	movi	r3,9
 100ba8c:	043fffc4 	movi	r16,-1
 100ba90:	10801014 	ori	r2,r2,64
 100ba94:	3080030d 	sth	r2,12(r6)
 100ba98:	88c00015 	stw	r3,0(r17)
 100ba9c:	003fdf06 	br	100ba1c <__swbuf_r+0x88>
 100baa0:	300b883a 	mov	r5,r6
 100baa4:	8809883a 	mov	r4,r17
 100baa8:	d9800015 	stw	r6,0(sp)
 100baac:	10035c80 	call	10035c8 <_fflush_r>
 100bab0:	d9800017 	ldw	r6,0(sp)
 100bab4:	103fe51e 	bne	r2,zero,100ba4c <__swbuf_r+0xb8>
 100bab8:	31000017 	ldw	r4,0(r6)
 100babc:	01400044 	movi	r5,1
 100bac0:	003fc906 	br	100b9e8 <__swbuf_r+0x54>

0100bac4 <__swbuf>:
 100bac4:	01804074 	movhi	r6,257
 100bac8:	318e6a04 	addi	r6,r6,14760
 100bacc:	2007883a 	mov	r3,r4
 100bad0:	31000017 	ldw	r4,0(r6)
 100bad4:	280d883a 	mov	r6,r5
 100bad8:	180b883a 	mov	r5,r3
 100badc:	100b9941 	jmpi	100b994 <__swbuf_r>

0100bae0 <_calloc_r>:
 100bae0:	defffe04 	addi	sp,sp,-8
 100bae4:	dc400015 	stw	r17,0(sp)
 100bae8:	2023883a 	mov	r17,r4
 100baec:	2809883a 	mov	r4,r5
 100baf0:	300b883a 	mov	r5,r6
 100baf4:	dfc00115 	stw	ra,4(sp)
 100baf8:	1002f0c0 	call	1002f0c <__mulsi3>
 100bafc:	100b883a 	mov	r5,r2
 100bb00:	8809883a 	mov	r4,r17
 100bb04:	1004a600 	call	1004a60 <_malloc_r>
 100bb08:	1023883a 	mov	r17,r2
 100bb0c:	01c00904 	movi	r7,36
 100bb10:	10000d26 	beq	r2,zero,100bb48 <_calloc_r+0x68>
 100bb14:	10ffff17 	ldw	r3,-4(r2)
 100bb18:	1009883a 	mov	r4,r2
 100bb1c:	00bfff04 	movi	r2,-4
 100bb20:	1886703a 	and	r3,r3,r2
 100bb24:	1887883a 	add	r3,r3,r2
 100bb28:	180d883a 	mov	r6,r3
 100bb2c:	000b883a 	mov	r5,zero
 100bb30:	38c01736 	bltu	r7,r3,100bb90 <_calloc_r+0xb0>
 100bb34:	008004c4 	movi	r2,19
 100bb38:	10c00836 	bltu	r2,r3,100bb5c <_calloc_r+0x7c>
 100bb3c:	20000215 	stw	zero,8(r4)
 100bb40:	20000015 	stw	zero,0(r4)
 100bb44:	20000115 	stw	zero,4(r4)
 100bb48:	8805883a 	mov	r2,r17
 100bb4c:	dfc00117 	ldw	ra,4(sp)
 100bb50:	dc400017 	ldw	r17,0(sp)
 100bb54:	dec00204 	addi	sp,sp,8
 100bb58:	f800283a 	ret
 100bb5c:	008006c4 	movi	r2,27
 100bb60:	88000015 	stw	zero,0(r17)
 100bb64:	88000115 	stw	zero,4(r17)
 100bb68:	89000204 	addi	r4,r17,8
 100bb6c:	10fff32e 	bgeu	r2,r3,100bb3c <_calloc_r+0x5c>
 100bb70:	88000215 	stw	zero,8(r17)
 100bb74:	88000315 	stw	zero,12(r17)
 100bb78:	89000404 	addi	r4,r17,16
 100bb7c:	19ffef1e 	bne	r3,r7,100bb3c <_calloc_r+0x5c>
 100bb80:	89000604 	addi	r4,r17,24
 100bb84:	88000415 	stw	zero,16(r17)
 100bb88:	88000515 	stw	zero,20(r17)
 100bb8c:	003feb06 	br	100bb3c <_calloc_r+0x5c>
 100bb90:	10051a00 	call	10051a0 <memset>
 100bb94:	8805883a 	mov	r2,r17
 100bb98:	dfc00117 	ldw	ra,4(sp)
 100bb9c:	dc400017 	ldw	r17,0(sp)
 100bba0:	dec00204 	addi	sp,sp,8
 100bba4:	f800283a 	ret

0100bba8 <__udivdi3>:
 100bba8:	defff104 	addi	sp,sp,-60
 100bbac:	0015883a 	mov	r10,zero
 100bbb0:	2005883a 	mov	r2,r4
 100bbb4:	3011883a 	mov	r8,r6
 100bbb8:	df000d15 	stw	fp,52(sp)
 100bbbc:	dd400a15 	stw	r21,40(sp)
 100bbc0:	dcc00815 	stw	r19,32(sp)
 100bbc4:	dfc00e15 	stw	ra,56(sp)
 100bbc8:	ddc00c15 	stw	r23,48(sp)
 100bbcc:	dd800b15 	stw	r22,44(sp)
 100bbd0:	dd000915 	stw	r20,36(sp)
 100bbd4:	dc800715 	stw	r18,28(sp)
 100bbd8:	dc400615 	stw	r17,24(sp)
 100bbdc:	dc000515 	stw	r16,20(sp)
 100bbe0:	da800315 	stw	r10,12(sp)
 100bbe4:	4027883a 	mov	r19,r8
 100bbe8:	1039883a 	mov	fp,r2
 100bbec:	282b883a 	mov	r21,r5
 100bbf0:	da800415 	stw	r10,16(sp)
 100bbf4:	3800401e 	bne	r7,zero,100bcf8 <__udivdi3+0x150>
 100bbf8:	2a006536 	bltu	r5,r8,100bd90 <__udivdi3+0x1e8>
 100bbfc:	4000b526 	beq	r8,zero,100bed4 <__udivdi3+0x32c>
 100bc00:	00bfffd4 	movui	r2,65535
 100bc04:	14c0ad36 	bltu	r2,r19,100bebc <__udivdi3+0x314>
 100bc08:	00803fc4 	movi	r2,255
 100bc0c:	14c15e36 	bltu	r2,r19,100c188 <__udivdi3+0x5e0>
 100bc10:	000b883a 	mov	r5,zero
 100bc14:	0005883a 	mov	r2,zero
 100bc18:	9884d83a 	srl	r2,r19,r2
 100bc1c:	01004074 	movhi	r4,257
 100bc20:	21075a04 	addi	r4,r4,7528
 100bc24:	01800804 	movi	r6,32
 100bc28:	1105883a 	add	r2,r2,r4
 100bc2c:	10c00003 	ldbu	r3,0(r2)
 100bc30:	28c7883a 	add	r3,r5,r3
 100bc34:	30e9c83a 	sub	r20,r6,r3
 100bc38:	a0010a1e 	bne	r20,zero,100c064 <__udivdi3+0x4bc>
 100bc3c:	982ed43a 	srli	r23,r19,16
 100bc40:	acebc83a 	sub	r21,r21,r19
 100bc44:	9dbfffcc 	andi	r22,r19,65535
 100bc48:	05000044 	movi	r20,1
 100bc4c:	a809883a 	mov	r4,r21
 100bc50:	b80b883a 	mov	r5,r23
 100bc54:	100dadc0 	call	100dadc <__udivsi3>
 100bc58:	100b883a 	mov	r5,r2
 100bc5c:	b009883a 	mov	r4,r22
 100bc60:	1021883a 	mov	r16,r2
 100bc64:	1002f0c0 	call	1002f0c <__mulsi3>
 100bc68:	a809883a 	mov	r4,r21
 100bc6c:	b80b883a 	mov	r5,r23
 100bc70:	1023883a 	mov	r17,r2
 100bc74:	100dae40 	call	100dae4 <__umodsi3>
 100bc78:	1004943a 	slli	r2,r2,16
 100bc7c:	e006d43a 	srli	r3,fp,16
 100bc80:	10c4b03a 	or	r2,r2,r3
 100bc84:	1440042e 	bgeu	r2,r17,100bc98 <__udivdi3+0xf0>
 100bc88:	14c5883a 	add	r2,r2,r19
 100bc8c:	843fffc4 	addi	r16,r16,-1
 100bc90:	14c00136 	bltu	r2,r19,100bc98 <__udivdi3+0xf0>
 100bc94:	14415c36 	bltu	r2,r17,100c208 <__udivdi3+0x660>
 100bc98:	1463c83a 	sub	r17,r2,r17
 100bc9c:	8809883a 	mov	r4,r17
 100bca0:	b80b883a 	mov	r5,r23
 100bca4:	100dadc0 	call	100dadc <__udivsi3>
 100bca8:	100b883a 	mov	r5,r2
 100bcac:	b009883a 	mov	r4,r22
 100bcb0:	102b883a 	mov	r21,r2
 100bcb4:	1002f0c0 	call	1002f0c <__mulsi3>
 100bcb8:	8809883a 	mov	r4,r17
 100bcbc:	b80b883a 	mov	r5,r23
 100bcc0:	1025883a 	mov	r18,r2
 100bcc4:	100dae40 	call	100dae4 <__umodsi3>
 100bcc8:	1004943a 	slli	r2,r2,16
 100bccc:	e0ffffcc 	andi	r3,fp,65535
 100bcd0:	10c4b03a 	or	r2,r2,r3
 100bcd4:	1480042e 	bgeu	r2,r18,100bce8 <__udivdi3+0x140>
 100bcd8:	9885883a 	add	r2,r19,r2
 100bcdc:	ad7fffc4 	addi	r21,r21,-1
 100bce0:	14c00136 	bltu	r2,r19,100bce8 <__udivdi3+0x140>
 100bce4:	14813c36 	bltu	r2,r18,100c1d8 <__udivdi3+0x630>
 100bce8:	8004943a 	slli	r2,r16,16
 100bcec:	a009883a 	mov	r4,r20
 100bcf0:	a884b03a 	or	r2,r21,r2
 100bcf4:	00001506 	br	100bd4c <__udivdi3+0x1a4>
 100bcf8:	380d883a 	mov	r6,r7
 100bcfc:	29c06c36 	bltu	r5,r7,100beb0 <__udivdi3+0x308>
 100bd00:	00bfffd4 	movui	r2,65535
 100bd04:	11c06436 	bltu	r2,r7,100be98 <__udivdi3+0x2f0>
 100bd08:	00803fc4 	movi	r2,255
 100bd0c:	11c11836 	bltu	r2,r7,100c170 <__udivdi3+0x5c8>
 100bd10:	000b883a 	mov	r5,zero
 100bd14:	0005883a 	mov	r2,zero
 100bd18:	3084d83a 	srl	r2,r6,r2
 100bd1c:	01004074 	movhi	r4,257
 100bd20:	21075a04 	addi	r4,r4,7528
 100bd24:	01c00804 	movi	r7,32
 100bd28:	1105883a 	add	r2,r2,r4
 100bd2c:	10c00003 	ldbu	r3,0(r2)
 100bd30:	28c7883a 	add	r3,r5,r3
 100bd34:	38edc83a 	sub	r22,r7,r3
 100bd38:	b000731e 	bne	r22,zero,100bf08 <__udivdi3+0x360>
 100bd3c:	35400136 	bltu	r6,r21,100bd44 <__udivdi3+0x19c>
 100bd40:	e4c05b36 	bltu	fp,r19,100beb0 <__udivdi3+0x308>
 100bd44:	00800044 	movi	r2,1
 100bd48:	0009883a 	mov	r4,zero
 100bd4c:	d8800315 	stw	r2,12(sp)
 100bd50:	d9400317 	ldw	r5,12(sp)
 100bd54:	2007883a 	mov	r3,r4
 100bd58:	d9000415 	stw	r4,16(sp)
 100bd5c:	2805883a 	mov	r2,r5
 100bd60:	dfc00e17 	ldw	ra,56(sp)
 100bd64:	df000d17 	ldw	fp,52(sp)
 100bd68:	ddc00c17 	ldw	r23,48(sp)
 100bd6c:	dd800b17 	ldw	r22,44(sp)
 100bd70:	dd400a17 	ldw	r21,40(sp)
 100bd74:	dd000917 	ldw	r20,36(sp)
 100bd78:	dcc00817 	ldw	r19,32(sp)
 100bd7c:	dc800717 	ldw	r18,28(sp)
 100bd80:	dc400617 	ldw	r17,24(sp)
 100bd84:	dc000517 	ldw	r16,20(sp)
 100bd88:	dec00f04 	addi	sp,sp,60
 100bd8c:	f800283a 	ret
 100bd90:	00bfffd4 	movui	r2,65535
 100bd94:	12005636 	bltu	r2,r8,100bef0 <__udivdi3+0x348>
 100bd98:	00803fc4 	movi	r2,255
 100bd9c:	12010036 	bltu	r2,r8,100c1a0 <__udivdi3+0x5f8>
 100bda0:	000b883a 	mov	r5,zero
 100bda4:	0005883a 	mov	r2,zero
 100bda8:	9884d83a 	srl	r2,r19,r2
 100bdac:	01004074 	movhi	r4,257
 100bdb0:	21075a04 	addi	r4,r4,7528
 100bdb4:	01800804 	movi	r6,32
 100bdb8:	1105883a 	add	r2,r2,r4
 100bdbc:	10c00003 	ldbu	r3,0(r2)
 100bdc0:	28c7883a 	add	r3,r5,r3
 100bdc4:	30cbc83a 	sub	r5,r6,r3
 100bdc8:	28000626 	beq	r5,zero,100bde4 <__udivdi3+0x23c>
 100bdcc:	3145c83a 	sub	r2,r6,r5
 100bdd0:	e084d83a 	srl	r2,fp,r2
 100bdd4:	a946983a 	sll	r3,r21,r5
 100bdd8:	e178983a 	sll	fp,fp,r5
 100bddc:	9966983a 	sll	r19,r19,r5
 100bde0:	18aab03a 	or	r21,r3,r2
 100bde4:	982ed43a 	srli	r23,r19,16
 100bde8:	a809883a 	mov	r4,r21
 100bdec:	9cbfffcc 	andi	r18,r19,65535
 100bdf0:	b80b883a 	mov	r5,r23
 100bdf4:	100dadc0 	call	100dadc <__udivsi3>
 100bdf8:	100b883a 	mov	r5,r2
 100bdfc:	9009883a 	mov	r4,r18
 100be00:	1021883a 	mov	r16,r2
 100be04:	1002f0c0 	call	1002f0c <__mulsi3>
 100be08:	a809883a 	mov	r4,r21
 100be0c:	b80b883a 	mov	r5,r23
 100be10:	1023883a 	mov	r17,r2
 100be14:	100dae40 	call	100dae4 <__umodsi3>
 100be18:	1004943a 	slli	r2,r2,16
 100be1c:	e006d43a 	srli	r3,fp,16
 100be20:	10c4b03a 	or	r2,r2,r3
 100be24:	1440042e 	bgeu	r2,r17,100be38 <__udivdi3+0x290>
 100be28:	14c5883a 	add	r2,r2,r19
 100be2c:	843fffc4 	addi	r16,r16,-1
 100be30:	14c00136 	bltu	r2,r19,100be38 <__udivdi3+0x290>
 100be34:	1440ea36 	bltu	r2,r17,100c1e0 <__udivdi3+0x638>
 100be38:	1463c83a 	sub	r17,r2,r17
 100be3c:	8809883a 	mov	r4,r17
 100be40:	b80b883a 	mov	r5,r23
 100be44:	100dadc0 	call	100dadc <__udivsi3>
 100be48:	100b883a 	mov	r5,r2
 100be4c:	9009883a 	mov	r4,r18
 100be50:	102b883a 	mov	r21,r2
 100be54:	1002f0c0 	call	1002f0c <__mulsi3>
 100be58:	8809883a 	mov	r4,r17
 100be5c:	b80b883a 	mov	r5,r23
 100be60:	1025883a 	mov	r18,r2
 100be64:	100dae40 	call	100dae4 <__umodsi3>
 100be68:	1004943a 	slli	r2,r2,16
 100be6c:	e0ffffcc 	andi	r3,fp,65535
 100be70:	10c4b03a 	or	r2,r2,r3
 100be74:	1480042e 	bgeu	r2,r18,100be88 <__udivdi3+0x2e0>
 100be78:	9885883a 	add	r2,r19,r2
 100be7c:	ad7fffc4 	addi	r21,r21,-1
 100be80:	14c00136 	bltu	r2,r19,100be88 <__udivdi3+0x2e0>
 100be84:	1480d936 	bltu	r2,r18,100c1ec <__udivdi3+0x644>
 100be88:	8004943a 	slli	r2,r16,16
 100be8c:	0009883a 	mov	r4,zero
 100be90:	a884b03a 	or	r2,r21,r2
 100be94:	003fad06 	br	100bd4c <__udivdi3+0x1a4>
 100be98:	00804034 	movhi	r2,256
 100be9c:	10bfffc4 	addi	r2,r2,-1
 100bea0:	11c0b636 	bltu	r2,r7,100c17c <__udivdi3+0x5d4>
 100bea4:	01400404 	movi	r5,16
 100bea8:	2805883a 	mov	r2,r5
 100beac:	003f9a06 	br	100bd18 <__udivdi3+0x170>
 100beb0:	0005883a 	mov	r2,zero
 100beb4:	0009883a 	mov	r4,zero
 100beb8:	003fa406 	br	100bd4c <__udivdi3+0x1a4>
 100bebc:	00804034 	movhi	r2,256
 100bec0:	10bfffc4 	addi	r2,r2,-1
 100bec4:	14c0b336 	bltu	r2,r19,100c194 <__udivdi3+0x5ec>
 100bec8:	01400404 	movi	r5,16
 100becc:	2805883a 	mov	r2,r5
 100bed0:	003f5106 	br	100bc18 <__udivdi3+0x70>
 100bed4:	01000044 	movi	r4,1
 100bed8:	000b883a 	mov	r5,zero
 100bedc:	100dadc0 	call	100dadc <__udivsi3>
 100bee0:	1027883a 	mov	r19,r2
 100bee4:	00bfffd4 	movui	r2,65535
 100bee8:	14fff436 	bltu	r2,r19,100bebc <__udivdi3+0x314>
 100beec:	003f4606 	br	100bc08 <__udivdi3+0x60>
 100bef0:	00804034 	movhi	r2,256
 100bef4:	10bfffc4 	addi	r2,r2,-1
 100bef8:	1200ac36 	bltu	r2,r8,100c1ac <__udivdi3+0x604>
 100befc:	01400404 	movi	r5,16
 100bf00:	2805883a 	mov	r2,r5
 100bf04:	003fa806 	br	100bda8 <__udivdi3+0x200>
 100bf08:	3d85c83a 	sub	r2,r7,r22
 100bf0c:	3588983a 	sll	r4,r6,r22
 100bf10:	9886d83a 	srl	r3,r19,r2
 100bf14:	a8a2d83a 	srl	r17,r21,r2
 100bf18:	e084d83a 	srl	r2,fp,r2
 100bf1c:	20eeb03a 	or	r23,r4,r3
 100bf20:	b824d43a 	srli	r18,r23,16
 100bf24:	ad86983a 	sll	r3,r21,r22
 100bf28:	8809883a 	mov	r4,r17
 100bf2c:	900b883a 	mov	r5,r18
 100bf30:	1886b03a 	or	r3,r3,r2
 100bf34:	d8c00115 	stw	r3,4(sp)
 100bf38:	bc3fffcc 	andi	r16,r23,65535
 100bf3c:	100dadc0 	call	100dadc <__udivsi3>
 100bf40:	100b883a 	mov	r5,r2
 100bf44:	8009883a 	mov	r4,r16
 100bf48:	1029883a 	mov	r20,r2
 100bf4c:	1002f0c0 	call	1002f0c <__mulsi3>
 100bf50:	900b883a 	mov	r5,r18
 100bf54:	8809883a 	mov	r4,r17
 100bf58:	102b883a 	mov	r21,r2
 100bf5c:	100dae40 	call	100dae4 <__umodsi3>
 100bf60:	d9400117 	ldw	r5,4(sp)
 100bf64:	1004943a 	slli	r2,r2,16
 100bf68:	9da6983a 	sll	r19,r19,r22
 100bf6c:	2806d43a 	srli	r3,r5,16
 100bf70:	10c4b03a 	or	r2,r2,r3
 100bf74:	1540032e 	bgeu	r2,r21,100bf84 <__udivdi3+0x3dc>
 100bf78:	15c5883a 	add	r2,r2,r23
 100bf7c:	a53fffc4 	addi	r20,r20,-1
 100bf80:	15c0912e 	bgeu	r2,r23,100c1c8 <__udivdi3+0x620>
 100bf84:	1563c83a 	sub	r17,r2,r21
 100bf88:	8809883a 	mov	r4,r17
 100bf8c:	900b883a 	mov	r5,r18
 100bf90:	100dadc0 	call	100dadc <__udivsi3>
 100bf94:	100b883a 	mov	r5,r2
 100bf98:	8009883a 	mov	r4,r16
 100bf9c:	102b883a 	mov	r21,r2
 100bfa0:	1002f0c0 	call	1002f0c <__mulsi3>
 100bfa4:	8809883a 	mov	r4,r17
 100bfa8:	900b883a 	mov	r5,r18
 100bfac:	1021883a 	mov	r16,r2
 100bfb0:	100dae40 	call	100dae4 <__umodsi3>
 100bfb4:	da800117 	ldw	r10,4(sp)
 100bfb8:	1004943a 	slli	r2,r2,16
 100bfbc:	50ffffcc 	andi	r3,r10,65535
 100bfc0:	10c6b03a 	or	r3,r2,r3
 100bfc4:	1c00032e 	bgeu	r3,r16,100bfd4 <__udivdi3+0x42c>
 100bfc8:	1dc7883a 	add	r3,r3,r23
 100bfcc:	ad7fffc4 	addi	r21,r21,-1
 100bfd0:	1dc0792e 	bgeu	r3,r23,100c1b8 <__udivdi3+0x610>
 100bfd4:	a004943a 	slli	r2,r20,16
 100bfd8:	982ed43a 	srli	r23,r19,16
 100bfdc:	9cffffcc 	andi	r19,r19,65535
 100bfe0:	a8a4b03a 	or	r18,r21,r2
 100bfe4:	947fffcc 	andi	r17,r18,65535
 100bfe8:	902ad43a 	srli	r21,r18,16
 100bfec:	8809883a 	mov	r4,r17
 100bff0:	980b883a 	mov	r5,r19
 100bff4:	1c21c83a 	sub	r16,r3,r16
 100bff8:	1002f0c0 	call	1002f0c <__mulsi3>
 100bffc:	8809883a 	mov	r4,r17
 100c000:	b80b883a 	mov	r5,r23
 100c004:	1029883a 	mov	r20,r2
 100c008:	1002f0c0 	call	1002f0c <__mulsi3>
 100c00c:	980b883a 	mov	r5,r19
 100c010:	a809883a 	mov	r4,r21
 100c014:	1023883a 	mov	r17,r2
 100c018:	1002f0c0 	call	1002f0c <__mulsi3>
 100c01c:	a809883a 	mov	r4,r21
 100c020:	b80b883a 	mov	r5,r23
 100c024:	1027883a 	mov	r19,r2
 100c028:	1002f0c0 	call	1002f0c <__mulsi3>
 100c02c:	1009883a 	mov	r4,r2
 100c030:	a004d43a 	srli	r2,r20,16
 100c034:	8ce3883a 	add	r17,r17,r19
 100c038:	1447883a 	add	r3,r2,r17
 100c03c:	1cc0022e 	bgeu	r3,r19,100c048 <__udivdi3+0x4a0>
 100c040:	00800074 	movhi	r2,1
 100c044:	2089883a 	add	r4,r4,r2
 100c048:	1804d43a 	srli	r2,r3,16
 100c04c:	2085883a 	add	r2,r4,r2
 100c050:	80804436 	bltu	r16,r2,100c164 <__udivdi3+0x5bc>
 100c054:	80803e26 	beq	r16,r2,100c150 <__udivdi3+0x5a8>
 100c058:	9005883a 	mov	r2,r18
 100c05c:	0009883a 	mov	r4,zero
 100c060:	003f3a06 	br	100bd4c <__udivdi3+0x1a4>
 100c064:	9d26983a 	sll	r19,r19,r20
 100c068:	3505c83a 	sub	r2,r6,r20
 100c06c:	a8a2d83a 	srl	r17,r21,r2
 100c070:	982ed43a 	srli	r23,r19,16
 100c074:	e084d83a 	srl	r2,fp,r2
 100c078:	ad06983a 	sll	r3,r21,r20
 100c07c:	8809883a 	mov	r4,r17
 100c080:	b80b883a 	mov	r5,r23
 100c084:	1886b03a 	or	r3,r3,r2
 100c088:	d8c00015 	stw	r3,0(sp)
 100c08c:	9dbfffcc 	andi	r22,r19,65535
 100c090:	100dadc0 	call	100dadc <__udivsi3>
 100c094:	100b883a 	mov	r5,r2
 100c098:	b009883a 	mov	r4,r22
 100c09c:	d8800215 	stw	r2,8(sp)
 100c0a0:	1002f0c0 	call	1002f0c <__mulsi3>
 100c0a4:	8809883a 	mov	r4,r17
 100c0a8:	b80b883a 	mov	r5,r23
 100c0ac:	102b883a 	mov	r21,r2
 100c0b0:	100dae40 	call	100dae4 <__umodsi3>
 100c0b4:	d9000017 	ldw	r4,0(sp)
 100c0b8:	1004943a 	slli	r2,r2,16
 100c0bc:	2006d43a 	srli	r3,r4,16
 100c0c0:	10c4b03a 	or	r2,r2,r3
 100c0c4:	1540052e 	bgeu	r2,r21,100c0dc <__udivdi3+0x534>
 100c0c8:	d9400217 	ldw	r5,8(sp)
 100c0cc:	14c5883a 	add	r2,r2,r19
 100c0d0:	297fffc4 	addi	r5,r5,-1
 100c0d4:	d9400215 	stw	r5,8(sp)
 100c0d8:	14c0462e 	bgeu	r2,r19,100c1f4 <__udivdi3+0x64c>
 100c0dc:	1563c83a 	sub	r17,r2,r21
 100c0e0:	8809883a 	mov	r4,r17
 100c0e4:	b80b883a 	mov	r5,r23
 100c0e8:	100dadc0 	call	100dadc <__udivsi3>
 100c0ec:	100b883a 	mov	r5,r2
 100c0f0:	b009883a 	mov	r4,r22
 100c0f4:	1025883a 	mov	r18,r2
 100c0f8:	1002f0c0 	call	1002f0c <__mulsi3>
 100c0fc:	8809883a 	mov	r4,r17
 100c100:	b80b883a 	mov	r5,r23
 100c104:	1021883a 	mov	r16,r2
 100c108:	100dae40 	call	100dae4 <__umodsi3>
 100c10c:	da800017 	ldw	r10,0(sp)
 100c110:	1004943a 	slli	r2,r2,16
 100c114:	50ffffcc 	andi	r3,r10,65535
 100c118:	10c6b03a 	or	r3,r2,r3
 100c11c:	1c00062e 	bgeu	r3,r16,100c138 <__udivdi3+0x590>
 100c120:	1cc7883a 	add	r3,r3,r19
 100c124:	94bfffc4 	addi	r18,r18,-1
 100c128:	1cc00336 	bltu	r3,r19,100c138 <__udivdi3+0x590>
 100c12c:	1c00022e 	bgeu	r3,r16,100c138 <__udivdi3+0x590>
 100c130:	94bfffc4 	addi	r18,r18,-1
 100c134:	1cc7883a 	add	r3,r3,r19
 100c138:	d9000217 	ldw	r4,8(sp)
 100c13c:	e538983a 	sll	fp,fp,r20
 100c140:	1c2bc83a 	sub	r21,r3,r16
 100c144:	2004943a 	slli	r2,r4,16
 100c148:	90a8b03a 	or	r20,r18,r2
 100c14c:	003ebf06 	br	100bc4c <__udivdi3+0xa4>
 100c150:	1804943a 	slli	r2,r3,16
 100c154:	e588983a 	sll	r4,fp,r22
 100c158:	a0ffffcc 	andi	r3,r20,65535
 100c15c:	10c5883a 	add	r2,r2,r3
 100c160:	20bfbd2e 	bgeu	r4,r2,100c058 <__udivdi3+0x4b0>
 100c164:	90bfffc4 	addi	r2,r18,-1
 100c168:	0009883a 	mov	r4,zero
 100c16c:	003ef706 	br	100bd4c <__udivdi3+0x1a4>
 100c170:	01400204 	movi	r5,8
 100c174:	2805883a 	mov	r2,r5
 100c178:	003ee706 	br	100bd18 <__udivdi3+0x170>
 100c17c:	01400604 	movi	r5,24
 100c180:	2805883a 	mov	r2,r5
 100c184:	003ee406 	br	100bd18 <__udivdi3+0x170>
 100c188:	01400204 	movi	r5,8
 100c18c:	2805883a 	mov	r2,r5
 100c190:	003ea106 	br	100bc18 <__udivdi3+0x70>
 100c194:	01400604 	movi	r5,24
 100c198:	2805883a 	mov	r2,r5
 100c19c:	003e9e06 	br	100bc18 <__udivdi3+0x70>
 100c1a0:	01400204 	movi	r5,8
 100c1a4:	2805883a 	mov	r2,r5
 100c1a8:	003eff06 	br	100bda8 <__udivdi3+0x200>
 100c1ac:	01400604 	movi	r5,24
 100c1b0:	2805883a 	mov	r2,r5
 100c1b4:	003efc06 	br	100bda8 <__udivdi3+0x200>
 100c1b8:	1c3f862e 	bgeu	r3,r16,100bfd4 <__udivdi3+0x42c>
 100c1bc:	1dc7883a 	add	r3,r3,r23
 100c1c0:	ad7fffc4 	addi	r21,r21,-1
 100c1c4:	003f8306 	br	100bfd4 <__udivdi3+0x42c>
 100c1c8:	157f6e2e 	bgeu	r2,r21,100bf84 <__udivdi3+0x3dc>
 100c1cc:	a53fffc4 	addi	r20,r20,-1
 100c1d0:	15c5883a 	add	r2,r2,r23
 100c1d4:	003f6b06 	br	100bf84 <__udivdi3+0x3dc>
 100c1d8:	ad7fffc4 	addi	r21,r21,-1
 100c1dc:	003ec206 	br	100bce8 <__udivdi3+0x140>
 100c1e0:	843fffc4 	addi	r16,r16,-1
 100c1e4:	14c5883a 	add	r2,r2,r19
 100c1e8:	003f1306 	br	100be38 <__udivdi3+0x290>
 100c1ec:	ad7fffc4 	addi	r21,r21,-1
 100c1f0:	003f2506 	br	100be88 <__udivdi3+0x2e0>
 100c1f4:	157fb92e 	bgeu	r2,r21,100c0dc <__udivdi3+0x534>
 100c1f8:	297fffc4 	addi	r5,r5,-1
 100c1fc:	14c5883a 	add	r2,r2,r19
 100c200:	d9400215 	stw	r5,8(sp)
 100c204:	003fb506 	br	100c0dc <__udivdi3+0x534>
 100c208:	843fffc4 	addi	r16,r16,-1
 100c20c:	14c5883a 	add	r2,r2,r19
 100c210:	003ea106 	br	100bc98 <__udivdi3+0xf0>

0100c214 <__umoddi3>:
 100c214:	defff004 	addi	sp,sp,-64
 100c218:	3011883a 	mov	r8,r6
 100c21c:	000d883a 	mov	r6,zero
 100c220:	dd400b15 	stw	r21,44(sp)
 100c224:	dcc00915 	stw	r19,36(sp)
 100c228:	dc000615 	stw	r16,24(sp)
 100c22c:	dfc00f15 	stw	ra,60(sp)
 100c230:	df000e15 	stw	fp,56(sp)
 100c234:	ddc00d15 	stw	r23,52(sp)
 100c238:	dd800c15 	stw	r22,48(sp)
 100c23c:	dd000a15 	stw	r20,40(sp)
 100c240:	dc800815 	stw	r18,32(sp)
 100c244:	dc400715 	stw	r17,28(sp)
 100c248:	2817883a 	mov	r11,r5
 100c24c:	d9800415 	stw	r6,16(sp)
 100c250:	4027883a 	mov	r19,r8
 100c254:	d9800515 	stw	r6,20(sp)
 100c258:	2021883a 	mov	r16,r4
 100c25c:	282b883a 	mov	r21,r5
 100c260:	38002c1e 	bne	r7,zero,100c314 <__umoddi3+0x100>
 100c264:	2a005636 	bltu	r5,r8,100c3c0 <__umoddi3+0x1ac>
 100c268:	40009a26 	beq	r8,zero,100c4d4 <__umoddi3+0x2c0>
 100c26c:	00bfffd4 	movui	r2,65535
 100c270:	14c09236 	bltu	r2,r19,100c4bc <__umoddi3+0x2a8>
 100c274:	00803fc4 	movi	r2,255
 100c278:	14c15c36 	bltu	r2,r19,100c7ec <__umoddi3+0x5d8>
 100c27c:	000b883a 	mov	r5,zero
 100c280:	0005883a 	mov	r2,zero
 100c284:	9884d83a 	srl	r2,r19,r2
 100c288:	01004074 	movhi	r4,257
 100c28c:	21075a04 	addi	r4,r4,7528
 100c290:	01800804 	movi	r6,32
 100c294:	1105883a 	add	r2,r2,r4
 100c298:	10c00003 	ldbu	r3,0(r2)
 100c29c:	28c7883a 	add	r3,r5,r3
 100c2a0:	30e5c83a 	sub	r18,r6,r3
 100c2a4:	9000a41e 	bne	r18,zero,100c538 <__umoddi3+0x324>
 100c2a8:	982ed43a 	srli	r23,r19,16
 100c2ac:	acebc83a 	sub	r21,r21,r19
 100c2b0:	9d3fffcc 	andi	r20,r19,65535
 100c2b4:	002d883a 	mov	r22,zero
 100c2b8:	a809883a 	mov	r4,r21
 100c2bc:	b80b883a 	mov	r5,r23
 100c2c0:	100dadc0 	call	100dadc <__udivsi3>
 100c2c4:	100b883a 	mov	r5,r2
 100c2c8:	a009883a 	mov	r4,r20
 100c2cc:	1002f0c0 	call	1002f0c <__mulsi3>
 100c2d0:	a809883a 	mov	r4,r21
 100c2d4:	b80b883a 	mov	r5,r23
 100c2d8:	1023883a 	mov	r17,r2
 100c2dc:	100dae40 	call	100dae4 <__umodsi3>
 100c2e0:	1004943a 	slli	r2,r2,16
 100c2e4:	8006d43a 	srli	r3,r16,16
 100c2e8:	10c4b03a 	or	r2,r2,r3
 100c2ec:	1440032e 	bgeu	r2,r17,100c2fc <__umoddi3+0xe8>
 100c2f0:	14c5883a 	add	r2,r2,r19
 100c2f4:	14c00136 	bltu	r2,r19,100c2fc <__umoddi3+0xe8>
 100c2f8:	14415836 	bltu	r2,r17,100c85c <__umoddi3+0x648>
 100c2fc:	1463c83a 	sub	r17,r2,r17
 100c300:	8809883a 	mov	r4,r17
 100c304:	b80b883a 	mov	r5,r23
 100c308:	100dadc0 	call	100dadc <__udivsi3>
 100c30c:	a009883a 	mov	r4,r20
 100c310:	00005306 	br	100c460 <__umoddi3+0x24c>
 100c314:	380d883a 	mov	r6,r7
 100c318:	29c0132e 	bgeu	r5,r7,100c368 <__umoddi3+0x154>
 100c31c:	d9000415 	stw	r4,16(sp)
 100c320:	d9400515 	stw	r5,20(sp)
 100c324:	d9400417 	ldw	r5,16(sp)
 100c328:	5813883a 	mov	r9,r11
 100c32c:	2811883a 	mov	r8,r5
 100c330:	4005883a 	mov	r2,r8
 100c334:	4807883a 	mov	r3,r9
 100c338:	dfc00f17 	ldw	ra,60(sp)
 100c33c:	df000e17 	ldw	fp,56(sp)
 100c340:	ddc00d17 	ldw	r23,52(sp)
 100c344:	dd800c17 	ldw	r22,48(sp)
 100c348:	dd400b17 	ldw	r21,44(sp)
 100c34c:	dd000a17 	ldw	r20,40(sp)
 100c350:	dcc00917 	ldw	r19,36(sp)
 100c354:	dc800817 	ldw	r18,32(sp)
 100c358:	dc400717 	ldw	r17,28(sp)
 100c35c:	dc000617 	ldw	r16,24(sp)
 100c360:	dec01004 	addi	sp,sp,64
 100c364:	f800283a 	ret
 100c368:	00bfffd4 	movui	r2,65535
 100c36c:	11c06636 	bltu	r2,r7,100c508 <__umoddi3+0x2f4>
 100c370:	00803fc4 	movi	r2,255
 100c374:	11c12036 	bltu	r2,r7,100c7f8 <__umoddi3+0x5e4>
 100c378:	000b883a 	mov	r5,zero
 100c37c:	0005883a 	mov	r2,zero
 100c380:	3084d83a 	srl	r2,r6,r2
 100c384:	01004074 	movhi	r4,257
 100c388:	21075a04 	addi	r4,r4,7528
 100c38c:	01c00804 	movi	r7,32
 100c390:	1105883a 	add	r2,r2,r4
 100c394:	10c00003 	ldbu	r3,0(r2)
 100c398:	28c7883a 	add	r3,r5,r3
 100c39c:	38e5c83a 	sub	r18,r7,r3
 100c3a0:	9000941e 	bne	r18,zero,100c5f4 <__umoddi3+0x3e0>
 100c3a4:	35405e36 	bltu	r6,r21,100c520 <__umoddi3+0x30c>
 100c3a8:	84c05d2e 	bgeu	r16,r19,100c520 <__umoddi3+0x30c>
 100c3ac:	8011883a 	mov	r8,r16
 100c3b0:	a813883a 	mov	r9,r21
 100c3b4:	dc000415 	stw	r16,16(sp)
 100c3b8:	dd400515 	stw	r21,20(sp)
 100c3bc:	003fdc06 	br	100c330 <__umoddi3+0x11c>
 100c3c0:	00bfffd4 	movui	r2,65535
 100c3c4:	12004a36 	bltu	r2,r8,100c4f0 <__umoddi3+0x2dc>
 100c3c8:	00803fc4 	movi	r2,255
 100c3cc:	12010d36 	bltu	r2,r8,100c804 <__umoddi3+0x5f0>
 100c3d0:	000b883a 	mov	r5,zero
 100c3d4:	0005883a 	mov	r2,zero
 100c3d8:	9884d83a 	srl	r2,r19,r2
 100c3dc:	01004074 	movhi	r4,257
 100c3e0:	21075a04 	addi	r4,r4,7528
 100c3e4:	01800804 	movi	r6,32
 100c3e8:	1105883a 	add	r2,r2,r4
 100c3ec:	10c00003 	ldbu	r3,0(r2)
 100c3f0:	28c7883a 	add	r3,r5,r3
 100c3f4:	30c7c83a 	sub	r3,r6,r3
 100c3f8:	1800dc1e 	bne	r3,zero,100c76c <__umoddi3+0x558>
 100c3fc:	002d883a 	mov	r22,zero
 100c400:	982ed43a 	srli	r23,r19,16
 100c404:	a809883a 	mov	r4,r21
 100c408:	9cbfffcc 	andi	r18,r19,65535
 100c40c:	b80b883a 	mov	r5,r23
 100c410:	100dadc0 	call	100dadc <__udivsi3>
 100c414:	100b883a 	mov	r5,r2
 100c418:	9009883a 	mov	r4,r18
 100c41c:	1002f0c0 	call	1002f0c <__mulsi3>
 100c420:	a809883a 	mov	r4,r21
 100c424:	b80b883a 	mov	r5,r23
 100c428:	1023883a 	mov	r17,r2
 100c42c:	100dae40 	call	100dae4 <__umodsi3>
 100c430:	1004943a 	slli	r2,r2,16
 100c434:	8006d43a 	srli	r3,r16,16
 100c438:	10c4b03a 	or	r2,r2,r3
 100c43c:	1440032e 	bgeu	r2,r17,100c44c <__umoddi3+0x238>
 100c440:	14c5883a 	add	r2,r2,r19
 100c444:	14c00136 	bltu	r2,r19,100c44c <__umoddi3+0x238>
 100c448:	14410236 	bltu	r2,r17,100c854 <__umoddi3+0x640>
 100c44c:	1463c83a 	sub	r17,r2,r17
 100c450:	8809883a 	mov	r4,r17
 100c454:	b80b883a 	mov	r5,r23
 100c458:	100dadc0 	call	100dadc <__udivsi3>
 100c45c:	9009883a 	mov	r4,r18
 100c460:	100b883a 	mov	r5,r2
 100c464:	1002f0c0 	call	1002f0c <__mulsi3>
 100c468:	8809883a 	mov	r4,r17
 100c46c:	b80b883a 	mov	r5,r23
 100c470:	102b883a 	mov	r21,r2
 100c474:	100dae40 	call	100dae4 <__umodsi3>
 100c478:	1004943a 	slli	r2,r2,16
 100c47c:	80ffffcc 	andi	r3,r16,65535
 100c480:	10c4b03a 	or	r2,r2,r3
 100c484:	1540042e 	bgeu	r2,r21,100c498 <__umoddi3+0x284>
 100c488:	14c5883a 	add	r2,r2,r19
 100c48c:	14c00236 	bltu	r2,r19,100c498 <__umoddi3+0x284>
 100c490:	1540012e 	bgeu	r2,r21,100c498 <__umoddi3+0x284>
 100c494:	14c5883a 	add	r2,r2,r19
 100c498:	1545c83a 	sub	r2,r2,r21
 100c49c:	1584d83a 	srl	r2,r2,r22
 100c4a0:	0013883a 	mov	r9,zero
 100c4a4:	d8800415 	stw	r2,16(sp)
 100c4a8:	d8c00417 	ldw	r3,16(sp)
 100c4ac:	0005883a 	mov	r2,zero
 100c4b0:	d8800515 	stw	r2,20(sp)
 100c4b4:	1811883a 	mov	r8,r3
 100c4b8:	003f9d06 	br	100c330 <__umoddi3+0x11c>
 100c4bc:	00804034 	movhi	r2,256
 100c4c0:	10bfffc4 	addi	r2,r2,-1
 100c4c4:	14c0c636 	bltu	r2,r19,100c7e0 <__umoddi3+0x5cc>
 100c4c8:	01400404 	movi	r5,16
 100c4cc:	2805883a 	mov	r2,r5
 100c4d0:	003f6c06 	br	100c284 <__umoddi3+0x70>
 100c4d4:	01000044 	movi	r4,1
 100c4d8:	000b883a 	mov	r5,zero
 100c4dc:	100dadc0 	call	100dadc <__udivsi3>
 100c4e0:	1027883a 	mov	r19,r2
 100c4e4:	00bfffd4 	movui	r2,65535
 100c4e8:	14fff436 	bltu	r2,r19,100c4bc <__umoddi3+0x2a8>
 100c4ec:	003f6106 	br	100c274 <__umoddi3+0x60>
 100c4f0:	00804034 	movhi	r2,256
 100c4f4:	10bfffc4 	addi	r2,r2,-1
 100c4f8:	1200c536 	bltu	r2,r8,100c810 <__umoddi3+0x5fc>
 100c4fc:	01400404 	movi	r5,16
 100c500:	2805883a 	mov	r2,r5
 100c504:	003fb406 	br	100c3d8 <__umoddi3+0x1c4>
 100c508:	00804034 	movhi	r2,256
 100c50c:	10bfffc4 	addi	r2,r2,-1
 100c510:	11c0c236 	bltu	r2,r7,100c81c <__umoddi3+0x608>
 100c514:	01400404 	movi	r5,16
 100c518:	2805883a 	mov	r2,r5
 100c51c:	003f9806 	br	100c380 <__umoddi3+0x16c>
 100c520:	84c9c83a 	sub	r4,r16,r19
 100c524:	8105803a 	cmpltu	r2,r16,r4
 100c528:	a987c83a 	sub	r3,r21,r6
 100c52c:	18abc83a 	sub	r21,r3,r2
 100c530:	2021883a 	mov	r16,r4
 100c534:	003f9d06 	br	100c3ac <__umoddi3+0x198>
 100c538:	9ca6983a 	sll	r19,r19,r18
 100c53c:	3485c83a 	sub	r2,r6,r18
 100c540:	a8a2d83a 	srl	r17,r21,r2
 100c544:	982ed43a 	srli	r23,r19,16
 100c548:	ac86983a 	sll	r3,r21,r18
 100c54c:	8084d83a 	srl	r2,r16,r2
 100c550:	8809883a 	mov	r4,r17
 100c554:	b80b883a 	mov	r5,r23
 100c558:	18b8b03a 	or	fp,r3,r2
 100c55c:	9d3fffcc 	andi	r20,r19,65535
 100c560:	100dadc0 	call	100dadc <__udivsi3>
 100c564:	100b883a 	mov	r5,r2
 100c568:	a009883a 	mov	r4,r20
 100c56c:	1002f0c0 	call	1002f0c <__mulsi3>
 100c570:	8809883a 	mov	r4,r17
 100c574:	b80b883a 	mov	r5,r23
 100c578:	102b883a 	mov	r21,r2
 100c57c:	100dae40 	call	100dae4 <__umodsi3>
 100c580:	1004943a 	slli	r2,r2,16
 100c584:	e006d43a 	srli	r3,fp,16
 100c588:	902d883a 	mov	r22,r18
 100c58c:	10c4b03a 	or	r2,r2,r3
 100c590:	1540022e 	bgeu	r2,r21,100c59c <__umoddi3+0x388>
 100c594:	14c5883a 	add	r2,r2,r19
 100c598:	14c0ab2e 	bgeu	r2,r19,100c848 <__umoddi3+0x634>
 100c59c:	1563c83a 	sub	r17,r2,r21
 100c5a0:	8809883a 	mov	r4,r17
 100c5a4:	b80b883a 	mov	r5,r23
 100c5a8:	100dadc0 	call	100dadc <__udivsi3>
 100c5ac:	100b883a 	mov	r5,r2
 100c5b0:	a009883a 	mov	r4,r20
 100c5b4:	1002f0c0 	call	1002f0c <__mulsi3>
 100c5b8:	8809883a 	mov	r4,r17
 100c5bc:	b80b883a 	mov	r5,r23
 100c5c0:	102b883a 	mov	r21,r2
 100c5c4:	100dae40 	call	100dae4 <__umodsi3>
 100c5c8:	1004943a 	slli	r2,r2,16
 100c5cc:	e0ffffcc 	andi	r3,fp,65535
 100c5d0:	10c4b03a 	or	r2,r2,r3
 100c5d4:	1540042e 	bgeu	r2,r21,100c5e8 <__umoddi3+0x3d4>
 100c5d8:	14c5883a 	add	r2,r2,r19
 100c5dc:	14c00236 	bltu	r2,r19,100c5e8 <__umoddi3+0x3d4>
 100c5e0:	1540012e 	bgeu	r2,r21,100c5e8 <__umoddi3+0x3d4>
 100c5e4:	14c5883a 	add	r2,r2,r19
 100c5e8:	84a0983a 	sll	r16,r16,r18
 100c5ec:	156bc83a 	sub	r21,r2,r21
 100c5f0:	003f3106 	br	100c2b8 <__umoddi3+0xa4>
 100c5f4:	3c8fc83a 	sub	r7,r7,r18
 100c5f8:	3486983a 	sll	r3,r6,r18
 100c5fc:	99c4d83a 	srl	r2,r19,r7
 100c600:	a9e2d83a 	srl	r17,r21,r7
 100c604:	ac8c983a 	sll	r6,r21,r18
 100c608:	18acb03a 	or	r22,r3,r2
 100c60c:	b02ed43a 	srli	r23,r22,16
 100c610:	81c4d83a 	srl	r2,r16,r7
 100c614:	8809883a 	mov	r4,r17
 100c618:	b80b883a 	mov	r5,r23
 100c61c:	308cb03a 	or	r6,r6,r2
 100c620:	d9c00315 	stw	r7,12(sp)
 100c624:	d9800215 	stw	r6,8(sp)
 100c628:	b53fffcc 	andi	r20,r22,65535
 100c62c:	100dadc0 	call	100dadc <__udivsi3>
 100c630:	100b883a 	mov	r5,r2
 100c634:	a009883a 	mov	r4,r20
 100c638:	1039883a 	mov	fp,r2
 100c63c:	1002f0c0 	call	1002f0c <__mulsi3>
 100c640:	8809883a 	mov	r4,r17
 100c644:	b80b883a 	mov	r5,r23
 100c648:	102b883a 	mov	r21,r2
 100c64c:	100dae40 	call	100dae4 <__umodsi3>
 100c650:	d9000217 	ldw	r4,8(sp)
 100c654:	1004943a 	slli	r2,r2,16
 100c658:	9ca6983a 	sll	r19,r19,r18
 100c65c:	2006d43a 	srli	r3,r4,16
 100c660:	84a0983a 	sll	r16,r16,r18
 100c664:	dcc00015 	stw	r19,0(sp)
 100c668:	10c4b03a 	or	r2,r2,r3
 100c66c:	dc000115 	stw	r16,4(sp)
 100c670:	1540032e 	bgeu	r2,r21,100c680 <__umoddi3+0x46c>
 100c674:	1585883a 	add	r2,r2,r22
 100c678:	e73fffc4 	addi	fp,fp,-1
 100c67c:	15806e2e 	bgeu	r2,r22,100c838 <__umoddi3+0x624>
 100c680:	1563c83a 	sub	r17,r2,r21
 100c684:	8809883a 	mov	r4,r17
 100c688:	b80b883a 	mov	r5,r23
 100c68c:	100dadc0 	call	100dadc <__udivsi3>
 100c690:	100b883a 	mov	r5,r2
 100c694:	a009883a 	mov	r4,r20
 100c698:	1021883a 	mov	r16,r2
 100c69c:	1002f0c0 	call	1002f0c <__mulsi3>
 100c6a0:	b80b883a 	mov	r5,r23
 100c6a4:	8809883a 	mov	r4,r17
 100c6a8:	1029883a 	mov	r20,r2
 100c6ac:	100dae40 	call	100dae4 <__umodsi3>
 100c6b0:	d9400217 	ldw	r5,8(sp)
 100c6b4:	1004943a 	slli	r2,r2,16
 100c6b8:	28ffffcc 	andi	r3,r5,65535
 100c6bc:	10c4b03a 	or	r2,r2,r3
 100c6c0:	1500032e 	bgeu	r2,r20,100c6d0 <__umoddi3+0x4bc>
 100c6c4:	1585883a 	add	r2,r2,r22
 100c6c8:	843fffc4 	addi	r16,r16,-1
 100c6cc:	1580562e 	bgeu	r2,r22,100c828 <__umoddi3+0x614>
 100c6d0:	d9800017 	ldw	r6,0(sp)
 100c6d4:	e022943a 	slli	r17,fp,16
 100c6d8:	302ed43a 	srli	r23,r6,16
 100c6dc:	8462b03a 	or	r17,r16,r17
 100c6e0:	34ffffcc 	andi	r19,r6,65535
 100c6e4:	882ad43a 	srli	r21,r17,16
 100c6e8:	8c7fffcc 	andi	r17,r17,65535
 100c6ec:	8809883a 	mov	r4,r17
 100c6f0:	980b883a 	mov	r5,r19
 100c6f4:	1521c83a 	sub	r16,r2,r20
 100c6f8:	1002f0c0 	call	1002f0c <__mulsi3>
 100c6fc:	8809883a 	mov	r4,r17
 100c700:	b80b883a 	mov	r5,r23
 100c704:	1029883a 	mov	r20,r2
 100c708:	1002f0c0 	call	1002f0c <__mulsi3>
 100c70c:	980b883a 	mov	r5,r19
 100c710:	a809883a 	mov	r4,r21
 100c714:	1023883a 	mov	r17,r2
 100c718:	1002f0c0 	call	1002f0c <__mulsi3>
 100c71c:	a809883a 	mov	r4,r21
 100c720:	b80b883a 	mov	r5,r23
 100c724:	1027883a 	mov	r19,r2
 100c728:	1002f0c0 	call	1002f0c <__mulsi3>
 100c72c:	100b883a 	mov	r5,r2
 100c730:	a004d43a 	srli	r2,r20,16
 100c734:	8ce3883a 	add	r17,r17,r19
 100c738:	1449883a 	add	r4,r2,r17
 100c73c:	24c0022e 	bgeu	r4,r19,100c748 <__umoddi3+0x534>
 100c740:	00800074 	movhi	r2,1
 100c744:	288b883a 	add	r5,r5,r2
 100c748:	2004d43a 	srli	r2,r4,16
 100c74c:	2008943a 	slli	r4,r4,16
 100c750:	a0ffffcc 	andi	r3,r20,65535
 100c754:	288d883a 	add	r6,r5,r2
 100c758:	20c9883a 	add	r4,r4,r3
 100c75c:	81800b36 	bltu	r16,r6,100c78c <__umoddi3+0x578>
 100c760:	81804026 	beq	r16,r6,100c864 <__umoddi3+0x650>
 100c764:	818dc83a 	sub	r6,r16,r6
 100c768:	00000f06 	br	100c7a8 <__umoddi3+0x594>
 100c76c:	30c5c83a 	sub	r2,r6,r3
 100c770:	182d883a 	mov	r22,r3
 100c774:	8084d83a 	srl	r2,r16,r2
 100c778:	a8c6983a 	sll	r3,r21,r3
 100c77c:	9da6983a 	sll	r19,r19,r22
 100c780:	85a0983a 	sll	r16,r16,r22
 100c784:	18aab03a 	or	r21,r3,r2
 100c788:	003f1d06 	br	100c400 <__umoddi3+0x1ec>
 100c78c:	d8c00017 	ldw	r3,0(sp)
 100c790:	20c5c83a 	sub	r2,r4,r3
 100c794:	2089803a 	cmpltu	r4,r4,r2
 100c798:	3587c83a 	sub	r3,r6,r22
 100c79c:	1907c83a 	sub	r3,r3,r4
 100c7a0:	80cdc83a 	sub	r6,r16,r3
 100c7a4:	1009883a 	mov	r4,r2
 100c7a8:	d9400117 	ldw	r5,4(sp)
 100c7ac:	2905c83a 	sub	r2,r5,r4
 100c7b0:	2887803a 	cmpltu	r3,r5,r2
 100c7b4:	30c7c83a 	sub	r3,r6,r3
 100c7b8:	d9800317 	ldw	r6,12(sp)
 100c7bc:	1484d83a 	srl	r2,r2,r18
 100c7c0:	1988983a 	sll	r4,r3,r6
 100c7c4:	1c86d83a 	srl	r3,r3,r18
 100c7c8:	2088b03a 	or	r4,r4,r2
 100c7cc:	2011883a 	mov	r8,r4
 100c7d0:	1813883a 	mov	r9,r3
 100c7d4:	d9000415 	stw	r4,16(sp)
 100c7d8:	d8c00515 	stw	r3,20(sp)
 100c7dc:	003ed406 	br	100c330 <__umoddi3+0x11c>
 100c7e0:	01400604 	movi	r5,24
 100c7e4:	2805883a 	mov	r2,r5
 100c7e8:	003ea606 	br	100c284 <__umoddi3+0x70>
 100c7ec:	01400204 	movi	r5,8
 100c7f0:	2805883a 	mov	r2,r5
 100c7f4:	003ea306 	br	100c284 <__umoddi3+0x70>
 100c7f8:	01400204 	movi	r5,8
 100c7fc:	2805883a 	mov	r2,r5
 100c800:	003edf06 	br	100c380 <__umoddi3+0x16c>
 100c804:	01400204 	movi	r5,8
 100c808:	2805883a 	mov	r2,r5
 100c80c:	003ef206 	br	100c3d8 <__umoddi3+0x1c4>
 100c810:	01400604 	movi	r5,24
 100c814:	2805883a 	mov	r2,r5
 100c818:	003eef06 	br	100c3d8 <__umoddi3+0x1c4>
 100c81c:	01400604 	movi	r5,24
 100c820:	2805883a 	mov	r2,r5
 100c824:	003ed606 	br	100c380 <__umoddi3+0x16c>
 100c828:	153fa92e 	bgeu	r2,r20,100c6d0 <__umoddi3+0x4bc>
 100c82c:	843fffc4 	addi	r16,r16,-1
 100c830:	1585883a 	add	r2,r2,r22
 100c834:	003fa606 	br	100c6d0 <__umoddi3+0x4bc>
 100c838:	157f912e 	bgeu	r2,r21,100c680 <__umoddi3+0x46c>
 100c83c:	e73fffc4 	addi	fp,fp,-1
 100c840:	1585883a 	add	r2,r2,r22
 100c844:	003f8e06 	br	100c680 <__umoddi3+0x46c>
 100c848:	157f542e 	bgeu	r2,r21,100c59c <__umoddi3+0x388>
 100c84c:	14c5883a 	add	r2,r2,r19
 100c850:	003f5206 	br	100c59c <__umoddi3+0x388>
 100c854:	14c5883a 	add	r2,r2,r19
 100c858:	003efc06 	br	100c44c <__umoddi3+0x238>
 100c85c:	14c5883a 	add	r2,r2,r19
 100c860:	003ea606 	br	100c2fc <__umoddi3+0xe8>
 100c864:	d8800117 	ldw	r2,4(sp)
 100c868:	113fc836 	bltu	r2,r4,100c78c <__umoddi3+0x578>
 100c86c:	000d883a 	mov	r6,zero
 100c870:	003fcd06 	br	100c7a8 <__umoddi3+0x594>

0100c874 <_fpadd_parts>:
 100c874:	defff804 	addi	sp,sp,-32
 100c878:	dcc00315 	stw	r19,12(sp)
 100c87c:	2027883a 	mov	r19,r4
 100c880:	21000017 	ldw	r4,0(r4)
 100c884:	00c00044 	movi	r3,1
 100c888:	dd400515 	stw	r21,20(sp)
 100c88c:	dd000415 	stw	r20,16(sp)
 100c890:	ddc00715 	stw	r23,28(sp)
 100c894:	dd800615 	stw	r22,24(sp)
 100c898:	dc800215 	stw	r18,8(sp)
 100c89c:	dc400115 	stw	r17,4(sp)
 100c8a0:	dc000015 	stw	r16,0(sp)
 100c8a4:	282b883a 	mov	r21,r5
 100c8a8:	3029883a 	mov	r20,r6
 100c8ac:	1900632e 	bgeu	r3,r4,100ca3c <_fpadd_parts+0x1c8>
 100c8b0:	28800017 	ldw	r2,0(r5)
 100c8b4:	1880812e 	bgeu	r3,r2,100cabc <_fpadd_parts+0x248>
 100c8b8:	00c00104 	movi	r3,4
 100c8bc:	20c0dc26 	beq	r4,r3,100cc30 <_fpadd_parts+0x3bc>
 100c8c0:	10c07e26 	beq	r2,r3,100cabc <_fpadd_parts+0x248>
 100c8c4:	00c00084 	movi	r3,2
 100c8c8:	10c06726 	beq	r2,r3,100ca68 <_fpadd_parts+0x1f4>
 100c8cc:	20c07b26 	beq	r4,r3,100cabc <_fpadd_parts+0x248>
 100c8d0:	9dc00217 	ldw	r23,8(r19)
 100c8d4:	28c00217 	ldw	r3,8(r5)
 100c8d8:	9c400317 	ldw	r17,12(r19)
 100c8dc:	2bc00317 	ldw	r15,12(r5)
 100c8e0:	b8cdc83a 	sub	r6,r23,r3
 100c8e4:	9c800417 	ldw	r18,16(r19)
 100c8e8:	2c000417 	ldw	r16,16(r5)
 100c8ec:	3009883a 	mov	r4,r6
 100c8f0:	30009716 	blt	r6,zero,100cb50 <_fpadd_parts+0x2dc>
 100c8f4:	00800fc4 	movi	r2,63
 100c8f8:	11806b16 	blt	r2,r6,100caa8 <_fpadd_parts+0x234>
 100c8fc:	0100a40e 	bge	zero,r4,100cb90 <_fpadd_parts+0x31c>
 100c900:	35bff804 	addi	r22,r6,-32
 100c904:	b000bc16 	blt	r22,zero,100cbf8 <_fpadd_parts+0x384>
 100c908:	8596d83a 	srl	r11,r16,r22
 100c90c:	0019883a 	mov	r12,zero
 100c910:	0013883a 	mov	r9,zero
 100c914:	01000044 	movi	r4,1
 100c918:	0015883a 	mov	r10,zero
 100c91c:	b000be16 	blt	r22,zero,100cc18 <_fpadd_parts+0x3a4>
 100c920:	2590983a 	sll	r8,r4,r22
 100c924:	000f883a 	mov	r7,zero
 100c928:	00bfffc4 	movi	r2,-1
 100c92c:	3889883a 	add	r4,r7,r2
 100c930:	408b883a 	add	r5,r8,r2
 100c934:	21cd803a 	cmpltu	r6,r4,r7
 100c938:	314b883a 	add	r5,r6,r5
 100c93c:	7904703a 	and	r2,r15,r4
 100c940:	8146703a 	and	r3,r16,r5
 100c944:	10c4b03a 	or	r2,r2,r3
 100c948:	10000226 	beq	r2,zero,100c954 <_fpadd_parts+0xe0>
 100c94c:	02400044 	movi	r9,1
 100c950:	0015883a 	mov	r10,zero
 100c954:	5a5eb03a 	or	r15,r11,r9
 100c958:	62a0b03a 	or	r16,r12,r10
 100c95c:	99400117 	ldw	r5,4(r19)
 100c960:	a8800117 	ldw	r2,4(r21)
 100c964:	28806e26 	beq	r5,r2,100cb20 <_fpadd_parts+0x2ac>
 100c968:	28006626 	beq	r5,zero,100cb04 <_fpadd_parts+0x290>
 100c96c:	7c45c83a 	sub	r2,r15,r17
 100c970:	7889803a 	cmpltu	r4,r15,r2
 100c974:	8487c83a 	sub	r3,r16,r18
 100c978:	1909c83a 	sub	r4,r3,r4
 100c97c:	100d883a 	mov	r6,r2
 100c980:	200f883a 	mov	r7,r4
 100c984:	38007716 	blt	r7,zero,100cb64 <_fpadd_parts+0x2f0>
 100c988:	a5c00215 	stw	r23,8(r20)
 100c98c:	a1c00415 	stw	r7,16(r20)
 100c990:	a0000115 	stw	zero,4(r20)
 100c994:	a1800315 	stw	r6,12(r20)
 100c998:	a2000317 	ldw	r8,12(r20)
 100c99c:	a2400417 	ldw	r9,16(r20)
 100c9a0:	00bfffc4 	movi	r2,-1
 100c9a4:	408b883a 	add	r5,r8,r2
 100c9a8:	2a09803a 	cmpltu	r4,r5,r8
 100c9ac:	488d883a 	add	r6,r9,r2
 100c9b0:	01c40034 	movhi	r7,4096
 100c9b4:	39ffffc4 	addi	r7,r7,-1
 100c9b8:	218d883a 	add	r6,r4,r6
 100c9bc:	39801736 	bltu	r7,r6,100ca1c <_fpadd_parts+0x1a8>
 100c9c0:	31c06526 	beq	r6,r7,100cb58 <_fpadd_parts+0x2e4>
 100c9c4:	a3000217 	ldw	r12,8(r20)
 100c9c8:	4209883a 	add	r4,r8,r8
 100c9cc:	00bfffc4 	movi	r2,-1
 100c9d0:	220f803a 	cmpltu	r7,r4,r8
 100c9d4:	4a4b883a 	add	r5,r9,r9
 100c9d8:	394f883a 	add	r7,r7,r5
 100c9dc:	2095883a 	add	r10,r4,r2
 100c9e0:	3897883a 	add	r11,r7,r2
 100c9e4:	510d803a 	cmpltu	r6,r10,r4
 100c9e8:	6099883a 	add	r12,r12,r2
 100c9ec:	32d7883a 	add	r11,r6,r11
 100c9f0:	00840034 	movhi	r2,4096
 100c9f4:	10bfffc4 	addi	r2,r2,-1
 100c9f8:	2011883a 	mov	r8,r4
 100c9fc:	3813883a 	mov	r9,r7
 100ca00:	a1000315 	stw	r4,12(r20)
 100ca04:	a1c00415 	stw	r7,16(r20)
 100ca08:	a3000215 	stw	r12,8(r20)
 100ca0c:	12c00336 	bltu	r2,r11,100ca1c <_fpadd_parts+0x1a8>
 100ca10:	58bfed1e 	bne	r11,r2,100c9c8 <_fpadd_parts+0x154>
 100ca14:	00bfff84 	movi	r2,-2
 100ca18:	12bfeb2e 	bgeu	r2,r10,100c9c8 <_fpadd_parts+0x154>
 100ca1c:	a2800417 	ldw	r10,16(r20)
 100ca20:	008000c4 	movi	r2,3
 100ca24:	00c80034 	movhi	r3,8192
 100ca28:	18ffffc4 	addi	r3,r3,-1
 100ca2c:	a2400317 	ldw	r9,12(r20)
 100ca30:	a0800015 	stw	r2,0(r20)
 100ca34:	1a802336 	bltu	r3,r10,100cac4 <_fpadd_parts+0x250>
 100ca38:	a027883a 	mov	r19,r20
 100ca3c:	9805883a 	mov	r2,r19
 100ca40:	ddc00717 	ldw	r23,28(sp)
 100ca44:	dd800617 	ldw	r22,24(sp)
 100ca48:	dd400517 	ldw	r21,20(sp)
 100ca4c:	dd000417 	ldw	r20,16(sp)
 100ca50:	dcc00317 	ldw	r19,12(sp)
 100ca54:	dc800217 	ldw	r18,8(sp)
 100ca58:	dc400117 	ldw	r17,4(sp)
 100ca5c:	dc000017 	ldw	r16,0(sp)
 100ca60:	dec00804 	addi	sp,sp,32
 100ca64:	f800283a 	ret
 100ca68:	20fff41e 	bne	r4,r3,100ca3c <_fpadd_parts+0x1c8>
 100ca6c:	31000015 	stw	r4,0(r6)
 100ca70:	98800117 	ldw	r2,4(r19)
 100ca74:	30800115 	stw	r2,4(r6)
 100ca78:	98c00217 	ldw	r3,8(r19)
 100ca7c:	30c00215 	stw	r3,8(r6)
 100ca80:	98800317 	ldw	r2,12(r19)
 100ca84:	30800315 	stw	r2,12(r6)
 100ca88:	98c00417 	ldw	r3,16(r19)
 100ca8c:	30c00415 	stw	r3,16(r6)
 100ca90:	98800117 	ldw	r2,4(r19)
 100ca94:	28c00117 	ldw	r3,4(r5)
 100ca98:	3027883a 	mov	r19,r6
 100ca9c:	10c4703a 	and	r2,r2,r3
 100caa0:	30800115 	stw	r2,4(r6)
 100caa4:	003fe506 	br	100ca3c <_fpadd_parts+0x1c8>
 100caa8:	1dc02616 	blt	r3,r23,100cb44 <_fpadd_parts+0x2d0>
 100caac:	0023883a 	mov	r17,zero
 100cab0:	182f883a 	mov	r23,r3
 100cab4:	0025883a 	mov	r18,zero
 100cab8:	003fa806 	br	100c95c <_fpadd_parts+0xe8>
 100cabc:	a827883a 	mov	r19,r21
 100cac0:	003fde06 	br	100ca3c <_fpadd_parts+0x1c8>
 100cac4:	01800044 	movi	r6,1
 100cac8:	500497fa 	slli	r2,r10,31
 100cacc:	4808d07a 	srli	r4,r9,1
 100cad0:	518ad83a 	srl	r5,r10,r6
 100cad4:	a2000217 	ldw	r8,8(r20)
 100cad8:	1108b03a 	or	r4,r2,r4
 100cadc:	0007883a 	mov	r3,zero
 100cae0:	4984703a 	and	r2,r9,r6
 100cae4:	208cb03a 	or	r6,r4,r2
 100cae8:	28ceb03a 	or	r7,r5,r3
 100caec:	42000044 	addi	r8,r8,1
 100caf0:	a027883a 	mov	r19,r20
 100caf4:	a1c00415 	stw	r7,16(r20)
 100caf8:	a2000215 	stw	r8,8(r20)
 100cafc:	a1800315 	stw	r6,12(r20)
 100cb00:	003fce06 	br	100ca3c <_fpadd_parts+0x1c8>
 100cb04:	8bc5c83a 	sub	r2,r17,r15
 100cb08:	8889803a 	cmpltu	r4,r17,r2
 100cb0c:	9407c83a 	sub	r3,r18,r16
 100cb10:	1909c83a 	sub	r4,r3,r4
 100cb14:	100d883a 	mov	r6,r2
 100cb18:	200f883a 	mov	r7,r4
 100cb1c:	003f9906 	br	100c984 <_fpadd_parts+0x110>
 100cb20:	7c45883a 	add	r2,r15,r17
 100cb24:	13c9803a 	cmpltu	r4,r2,r15
 100cb28:	8487883a 	add	r3,r16,r18
 100cb2c:	20c9883a 	add	r4,r4,r3
 100cb30:	a1400115 	stw	r5,4(r20)
 100cb34:	a5c00215 	stw	r23,8(r20)
 100cb38:	a0800315 	stw	r2,12(r20)
 100cb3c:	a1000415 	stw	r4,16(r20)
 100cb40:	003fb606 	br	100ca1c <_fpadd_parts+0x1a8>
 100cb44:	001f883a 	mov	r15,zero
 100cb48:	0021883a 	mov	r16,zero
 100cb4c:	003f8306 	br	100c95c <_fpadd_parts+0xe8>
 100cb50:	018dc83a 	sub	r6,zero,r6
 100cb54:	003f6706 	br	100c8f4 <_fpadd_parts+0x80>
 100cb58:	00bfff84 	movi	r2,-2
 100cb5c:	117faf36 	bltu	r2,r5,100ca1c <_fpadd_parts+0x1a8>
 100cb60:	003f9806 	br	100c9c4 <_fpadd_parts+0x150>
 100cb64:	0005883a 	mov	r2,zero
 100cb68:	1189c83a 	sub	r4,r2,r6
 100cb6c:	1105803a 	cmpltu	r2,r2,r4
 100cb70:	01cbc83a 	sub	r5,zero,r7
 100cb74:	2885c83a 	sub	r2,r5,r2
 100cb78:	01800044 	movi	r6,1
 100cb7c:	a1800115 	stw	r6,4(r20)
 100cb80:	a5c00215 	stw	r23,8(r20)
 100cb84:	a1000315 	stw	r4,12(r20)
 100cb88:	a0800415 	stw	r2,16(r20)
 100cb8c:	003f8206 	br	100c998 <_fpadd_parts+0x124>
 100cb90:	203f7226 	beq	r4,zero,100c95c <_fpadd_parts+0xe8>
 100cb94:	35bff804 	addi	r22,r6,-32
 100cb98:	b9af883a 	add	r23,r23,r6
 100cb9c:	b0003116 	blt	r22,zero,100cc64 <_fpadd_parts+0x3f0>
 100cba0:	959ad83a 	srl	r13,r18,r22
 100cba4:	001d883a 	mov	r14,zero
 100cba8:	000f883a 	mov	r7,zero
 100cbac:	01000044 	movi	r4,1
 100cbb0:	0011883a 	mov	r8,zero
 100cbb4:	b0002516 	blt	r22,zero,100cc4c <_fpadd_parts+0x3d8>
 100cbb8:	2594983a 	sll	r10,r4,r22
 100cbbc:	0013883a 	mov	r9,zero
 100cbc0:	00bfffc4 	movi	r2,-1
 100cbc4:	4889883a 	add	r4,r9,r2
 100cbc8:	508b883a 	add	r5,r10,r2
 100cbcc:	224d803a 	cmpltu	r6,r4,r9
 100cbd0:	314b883a 	add	r5,r6,r5
 100cbd4:	8904703a 	and	r2,r17,r4
 100cbd8:	9146703a 	and	r3,r18,r5
 100cbdc:	10c4b03a 	or	r2,r2,r3
 100cbe0:	10000226 	beq	r2,zero,100cbec <_fpadd_parts+0x378>
 100cbe4:	01c00044 	movi	r7,1
 100cbe8:	0011883a 	mov	r8,zero
 100cbec:	69e2b03a 	or	r17,r13,r7
 100cbf0:	7224b03a 	or	r18,r14,r8
 100cbf4:	003f5906 	br	100c95c <_fpadd_parts+0xe8>
 100cbf8:	8407883a 	add	r3,r16,r16
 100cbfc:	008007c4 	movi	r2,31
 100cc00:	1185c83a 	sub	r2,r2,r6
 100cc04:	1886983a 	sll	r3,r3,r2
 100cc08:	7996d83a 	srl	r11,r15,r6
 100cc0c:	8198d83a 	srl	r12,r16,r6
 100cc10:	1ad6b03a 	or	r11,r3,r11
 100cc14:	003f3e06 	br	100c910 <_fpadd_parts+0x9c>
 100cc18:	2006d07a 	srli	r3,r4,1
 100cc1c:	008007c4 	movi	r2,31
 100cc20:	1185c83a 	sub	r2,r2,r6
 100cc24:	1890d83a 	srl	r8,r3,r2
 100cc28:	218e983a 	sll	r7,r4,r6
 100cc2c:	003f3e06 	br	100c928 <_fpadd_parts+0xb4>
 100cc30:	113f821e 	bne	r2,r4,100ca3c <_fpadd_parts+0x1c8>
 100cc34:	28c00117 	ldw	r3,4(r5)
 100cc38:	98800117 	ldw	r2,4(r19)
 100cc3c:	10ff7f26 	beq	r2,r3,100ca3c <_fpadd_parts+0x1c8>
 100cc40:	04c04074 	movhi	r19,257
 100cc44:	9cc75504 	addi	r19,r19,7508
 100cc48:	003f7c06 	br	100ca3c <_fpadd_parts+0x1c8>
 100cc4c:	2006d07a 	srli	r3,r4,1
 100cc50:	008007c4 	movi	r2,31
 100cc54:	1185c83a 	sub	r2,r2,r6
 100cc58:	1894d83a 	srl	r10,r3,r2
 100cc5c:	2192983a 	sll	r9,r4,r6
 100cc60:	003fd706 	br	100cbc0 <_fpadd_parts+0x34c>
 100cc64:	9487883a 	add	r3,r18,r18
 100cc68:	008007c4 	movi	r2,31
 100cc6c:	1185c83a 	sub	r2,r2,r6
 100cc70:	1886983a 	sll	r3,r3,r2
 100cc74:	899ad83a 	srl	r13,r17,r6
 100cc78:	919cd83a 	srl	r14,r18,r6
 100cc7c:	1b5ab03a 	or	r13,r3,r13
 100cc80:	003fc906 	br	100cba8 <_fpadd_parts+0x334>

0100cc84 <__subdf3>:
 100cc84:	deffea04 	addi	sp,sp,-88
 100cc88:	dcc01415 	stw	r19,80(sp)
 100cc8c:	dcc00404 	addi	r19,sp,16
 100cc90:	2011883a 	mov	r8,r4
 100cc94:	2813883a 	mov	r9,r5
 100cc98:	dc401315 	stw	r17,76(sp)
 100cc9c:	d809883a 	mov	r4,sp
 100cca0:	980b883a 	mov	r5,r19
 100cca4:	dc400904 	addi	r17,sp,36
 100cca8:	dfc01515 	stw	ra,84(sp)
 100ccac:	da400115 	stw	r9,4(sp)
 100ccb0:	d9c00315 	stw	r7,12(sp)
 100ccb4:	da000015 	stw	r8,0(sp)
 100ccb8:	d9800215 	stw	r6,8(sp)
 100ccbc:	100dfa40 	call	100dfa4 <__unpack_d>
 100ccc0:	d9000204 	addi	r4,sp,8
 100ccc4:	880b883a 	mov	r5,r17
 100ccc8:	100dfa40 	call	100dfa4 <__unpack_d>
 100cccc:	d8800a17 	ldw	r2,40(sp)
 100ccd0:	880b883a 	mov	r5,r17
 100ccd4:	9809883a 	mov	r4,r19
 100ccd8:	d9800e04 	addi	r6,sp,56
 100ccdc:	1080005c 	xori	r2,r2,1
 100cce0:	d8800a15 	stw	r2,40(sp)
 100cce4:	100c8740 	call	100c874 <_fpadd_parts>
 100cce8:	1009883a 	mov	r4,r2
 100ccec:	100dc900 	call	100dc90 <__pack_d>
 100ccf0:	dfc01517 	ldw	ra,84(sp)
 100ccf4:	dcc01417 	ldw	r19,80(sp)
 100ccf8:	dc401317 	ldw	r17,76(sp)
 100ccfc:	dec01604 	addi	sp,sp,88
 100cd00:	f800283a 	ret

0100cd04 <__adddf3>:
 100cd04:	deffea04 	addi	sp,sp,-88
 100cd08:	dcc01415 	stw	r19,80(sp)
 100cd0c:	dcc00404 	addi	r19,sp,16
 100cd10:	2011883a 	mov	r8,r4
 100cd14:	2813883a 	mov	r9,r5
 100cd18:	dc401315 	stw	r17,76(sp)
 100cd1c:	d809883a 	mov	r4,sp
 100cd20:	980b883a 	mov	r5,r19
 100cd24:	dc400904 	addi	r17,sp,36
 100cd28:	dfc01515 	stw	ra,84(sp)
 100cd2c:	da400115 	stw	r9,4(sp)
 100cd30:	d9c00315 	stw	r7,12(sp)
 100cd34:	da000015 	stw	r8,0(sp)
 100cd38:	d9800215 	stw	r6,8(sp)
 100cd3c:	100dfa40 	call	100dfa4 <__unpack_d>
 100cd40:	d9000204 	addi	r4,sp,8
 100cd44:	880b883a 	mov	r5,r17
 100cd48:	100dfa40 	call	100dfa4 <__unpack_d>
 100cd4c:	d9800e04 	addi	r6,sp,56
 100cd50:	9809883a 	mov	r4,r19
 100cd54:	880b883a 	mov	r5,r17
 100cd58:	100c8740 	call	100c874 <_fpadd_parts>
 100cd5c:	1009883a 	mov	r4,r2
 100cd60:	100dc900 	call	100dc90 <__pack_d>
 100cd64:	dfc01517 	ldw	ra,84(sp)
 100cd68:	dcc01417 	ldw	r19,80(sp)
 100cd6c:	dc401317 	ldw	r17,76(sp)
 100cd70:	dec01604 	addi	sp,sp,88
 100cd74:	f800283a 	ret

0100cd78 <__muldf3>:
 100cd78:	deffe004 	addi	sp,sp,-128
 100cd7c:	dc401815 	stw	r17,96(sp)
 100cd80:	dc400404 	addi	r17,sp,16
 100cd84:	2011883a 	mov	r8,r4
 100cd88:	2813883a 	mov	r9,r5
 100cd8c:	dc001715 	stw	r16,92(sp)
 100cd90:	d809883a 	mov	r4,sp
 100cd94:	880b883a 	mov	r5,r17
 100cd98:	dc000904 	addi	r16,sp,36
 100cd9c:	dfc01f15 	stw	ra,124(sp)
 100cda0:	da400115 	stw	r9,4(sp)
 100cda4:	d9c00315 	stw	r7,12(sp)
 100cda8:	da000015 	stw	r8,0(sp)
 100cdac:	d9800215 	stw	r6,8(sp)
 100cdb0:	ddc01e15 	stw	r23,120(sp)
 100cdb4:	dd801d15 	stw	r22,116(sp)
 100cdb8:	dd401c15 	stw	r21,112(sp)
 100cdbc:	dd001b15 	stw	r20,108(sp)
 100cdc0:	dcc01a15 	stw	r19,104(sp)
 100cdc4:	dc801915 	stw	r18,100(sp)
 100cdc8:	100dfa40 	call	100dfa4 <__unpack_d>
 100cdcc:	d9000204 	addi	r4,sp,8
 100cdd0:	800b883a 	mov	r5,r16
 100cdd4:	100dfa40 	call	100dfa4 <__unpack_d>
 100cdd8:	d9000417 	ldw	r4,16(sp)
 100cddc:	00800044 	movi	r2,1
 100cde0:	1100102e 	bgeu	r2,r4,100ce24 <__muldf3+0xac>
 100cde4:	d8c00917 	ldw	r3,36(sp)
 100cde8:	10c0062e 	bgeu	r2,r3,100ce04 <__muldf3+0x8c>
 100cdec:	00800104 	movi	r2,4
 100cdf0:	20800a26 	beq	r4,r2,100ce1c <__muldf3+0xa4>
 100cdf4:	1880cc26 	beq	r3,r2,100d128 <__muldf3+0x3b0>
 100cdf8:	00800084 	movi	r2,2
 100cdfc:	20800926 	beq	r4,r2,100ce24 <__muldf3+0xac>
 100ce00:	1880191e 	bne	r3,r2,100ce68 <__muldf3+0xf0>
 100ce04:	d8c00a17 	ldw	r3,40(sp)
 100ce08:	d8800517 	ldw	r2,20(sp)
 100ce0c:	8009883a 	mov	r4,r16
 100ce10:	10c4c03a 	cmpne	r2,r2,r3
 100ce14:	d8800a15 	stw	r2,40(sp)
 100ce18:	00000706 	br	100ce38 <__muldf3+0xc0>
 100ce1c:	00800084 	movi	r2,2
 100ce20:	1880c326 	beq	r3,r2,100d130 <__muldf3+0x3b8>
 100ce24:	d8800517 	ldw	r2,20(sp)
 100ce28:	d8c00a17 	ldw	r3,40(sp)
 100ce2c:	8809883a 	mov	r4,r17
 100ce30:	10c4c03a 	cmpne	r2,r2,r3
 100ce34:	d8800515 	stw	r2,20(sp)
 100ce38:	100dc900 	call	100dc90 <__pack_d>
 100ce3c:	dfc01f17 	ldw	ra,124(sp)
 100ce40:	ddc01e17 	ldw	r23,120(sp)
 100ce44:	dd801d17 	ldw	r22,116(sp)
 100ce48:	dd401c17 	ldw	r21,112(sp)
 100ce4c:	dd001b17 	ldw	r20,108(sp)
 100ce50:	dcc01a17 	ldw	r19,104(sp)
 100ce54:	dc801917 	ldw	r18,100(sp)
 100ce58:	dc401817 	ldw	r17,96(sp)
 100ce5c:	dc001717 	ldw	r16,92(sp)
 100ce60:	dec02004 	addi	sp,sp,128
 100ce64:	f800283a 	ret
 100ce68:	dd800717 	ldw	r22,28(sp)
 100ce6c:	dc800c17 	ldw	r18,48(sp)
 100ce70:	002b883a 	mov	r21,zero
 100ce74:	0023883a 	mov	r17,zero
 100ce78:	a80b883a 	mov	r5,r21
 100ce7c:	b00d883a 	mov	r6,r22
 100ce80:	880f883a 	mov	r7,r17
 100ce84:	ddc00817 	ldw	r23,32(sp)
 100ce88:	dcc00d17 	ldw	r19,52(sp)
 100ce8c:	9009883a 	mov	r4,r18
 100ce90:	100daec0 	call	100daec <__muldi3>
 100ce94:	001b883a 	mov	r13,zero
 100ce98:	680f883a 	mov	r7,r13
 100ce9c:	b009883a 	mov	r4,r22
 100cea0:	000b883a 	mov	r5,zero
 100cea4:	980d883a 	mov	r6,r19
 100cea8:	b82d883a 	mov	r22,r23
 100ceac:	002f883a 	mov	r23,zero
 100ceb0:	db401615 	stw	r13,88(sp)
 100ceb4:	d8801315 	stw	r2,76(sp)
 100ceb8:	d8c01415 	stw	r3,80(sp)
 100cebc:	dcc01515 	stw	r19,84(sp)
 100cec0:	100daec0 	call	100daec <__muldi3>
 100cec4:	b00d883a 	mov	r6,r22
 100cec8:	000b883a 	mov	r5,zero
 100cecc:	9009883a 	mov	r4,r18
 100ced0:	b80f883a 	mov	r7,r23
 100ced4:	1021883a 	mov	r16,r2
 100ced8:	1823883a 	mov	r17,r3
 100cedc:	100daec0 	call	100daec <__muldi3>
 100cee0:	8085883a 	add	r2,r16,r2
 100cee4:	140d803a 	cmpltu	r6,r2,r16
 100cee8:	88c7883a 	add	r3,r17,r3
 100ceec:	30cd883a 	add	r6,r6,r3
 100cef0:	1029883a 	mov	r20,r2
 100cef4:	302b883a 	mov	r21,r6
 100cef8:	da801317 	ldw	r10,76(sp)
 100cefc:	dac01417 	ldw	r11,80(sp)
 100cf00:	db001517 	ldw	r12,84(sp)
 100cf04:	db401617 	ldw	r13,88(sp)
 100cf08:	3440612e 	bgeu	r6,r17,100d090 <__muldf3+0x318>
 100cf0c:	0009883a 	mov	r4,zero
 100cf10:	5105883a 	add	r2,r10,r4
 100cf14:	128d803a 	cmpltu	r6,r2,r10
 100cf18:	5d07883a 	add	r3,r11,r20
 100cf1c:	30cd883a 	add	r6,r6,r3
 100cf20:	0021883a 	mov	r16,zero
 100cf24:	04400044 	movi	r17,1
 100cf28:	1025883a 	mov	r18,r2
 100cf2c:	3027883a 	mov	r19,r6
 100cf30:	32c06236 	bltu	r6,r11,100d0bc <__muldf3+0x344>
 100cf34:	59807a26 	beq	r11,r6,100d120 <__muldf3+0x3a8>
 100cf38:	680b883a 	mov	r5,r13
 100cf3c:	b80f883a 	mov	r7,r23
 100cf40:	6009883a 	mov	r4,r12
 100cf44:	b00d883a 	mov	r6,r22
 100cf48:	100daec0 	call	100daec <__muldi3>
 100cf4c:	1009883a 	mov	r4,r2
 100cf50:	000f883a 	mov	r7,zero
 100cf54:	1545883a 	add	r2,r2,r21
 100cf58:	1111803a 	cmpltu	r8,r2,r4
 100cf5c:	19c7883a 	add	r3,r3,r7
 100cf60:	40c7883a 	add	r3,r8,r3
 100cf64:	88cb883a 	add	r5,r17,r3
 100cf68:	d8c00617 	ldw	r3,24(sp)
 100cf6c:	8089883a 	add	r4,r16,r2
 100cf70:	d8800b17 	ldw	r2,44(sp)
 100cf74:	18c00104 	addi	r3,r3,4
 100cf78:	240d803a 	cmpltu	r6,r4,r16
 100cf7c:	10c7883a 	add	r3,r2,r3
 100cf80:	2013883a 	mov	r9,r4
 100cf84:	d8800a17 	ldw	r2,40(sp)
 100cf88:	d9000517 	ldw	r4,20(sp)
 100cf8c:	314d883a 	add	r6,r6,r5
 100cf90:	3015883a 	mov	r10,r6
 100cf94:	2088c03a 	cmpne	r4,r4,r2
 100cf98:	00880034 	movhi	r2,8192
 100cf9c:	10bfffc4 	addi	r2,r2,-1
 100cfa0:	d9000f15 	stw	r4,60(sp)
 100cfa4:	d8c01015 	stw	r3,64(sp)
 100cfa8:	1180162e 	bgeu	r2,r6,100d004 <__muldf3+0x28c>
 100cfac:	1811883a 	mov	r8,r3
 100cfb0:	101f883a 	mov	r15,r2
 100cfb4:	980497fa 	slli	r2,r19,31
 100cfb8:	9016d07a 	srli	r11,r18,1
 100cfbc:	500697fa 	slli	r3,r10,31
 100cfc0:	480cd07a 	srli	r6,r9,1
 100cfc4:	500ed07a 	srli	r7,r10,1
 100cfc8:	12d6b03a 	or	r11,r2,r11
 100cfcc:	00800044 	movi	r2,1
 100cfd0:	198cb03a 	or	r6,r3,r6
 100cfd4:	4888703a 	and	r4,r9,r2
 100cfd8:	9818d07a 	srli	r12,r19,1
 100cfdc:	001b883a 	mov	r13,zero
 100cfe0:	03a00034 	movhi	r14,32768
 100cfe4:	3013883a 	mov	r9,r6
 100cfe8:	3815883a 	mov	r10,r7
 100cfec:	4091883a 	add	r8,r8,r2
 100cff0:	20000226 	beq	r4,zero,100cffc <__muldf3+0x284>
 100cff4:	5b64b03a 	or	r18,r11,r13
 100cff8:	63a6b03a 	or	r19,r12,r14
 100cffc:	7abfed36 	bltu	r15,r10,100cfb4 <__muldf3+0x23c>
 100d000:	da001015 	stw	r8,64(sp)
 100d004:	00840034 	movhi	r2,4096
 100d008:	10bfffc4 	addi	r2,r2,-1
 100d00c:	12801436 	bltu	r2,r10,100d060 <__muldf3+0x2e8>
 100d010:	da001017 	ldw	r8,64(sp)
 100d014:	101f883a 	mov	r15,r2
 100d018:	4a45883a 	add	r2,r9,r9
 100d01c:	124d803a 	cmpltu	r6,r2,r9
 100d020:	5287883a 	add	r3,r10,r10
 100d024:	9497883a 	add	r11,r18,r18
 100d028:	5c8f803a 	cmpltu	r7,r11,r18
 100d02c:	9cd9883a 	add	r12,r19,r19
 100d030:	01000044 	movi	r4,1
 100d034:	30cd883a 	add	r6,r6,r3
 100d038:	3b0f883a 	add	r7,r7,r12
 100d03c:	423fffc4 	addi	r8,r8,-1
 100d040:	1013883a 	mov	r9,r2
 100d044:	3015883a 	mov	r10,r6
 100d048:	111ab03a 	or	r13,r2,r4
 100d04c:	98003016 	blt	r19,zero,100d110 <__muldf3+0x398>
 100d050:	5825883a 	mov	r18,r11
 100d054:	3827883a 	mov	r19,r7
 100d058:	7abfef2e 	bgeu	r15,r10,100d018 <__muldf3+0x2a0>
 100d05c:	da001015 	stw	r8,64(sp)
 100d060:	00803fc4 	movi	r2,255
 100d064:	488e703a 	and	r7,r9,r2
 100d068:	00802004 	movi	r2,128
 100d06c:	0007883a 	mov	r3,zero
 100d070:	0011883a 	mov	r8,zero
 100d074:	38801826 	beq	r7,r2,100d0d8 <__muldf3+0x360>
 100d078:	008000c4 	movi	r2,3
 100d07c:	d9000e04 	addi	r4,sp,56
 100d080:	da801215 	stw	r10,72(sp)
 100d084:	d8800e15 	stw	r2,56(sp)
 100d088:	da401115 	stw	r9,68(sp)
 100d08c:	003f6a06 	br	100ce38 <__muldf3+0xc0>
 100d090:	89802126 	beq	r17,r6,100d118 <__muldf3+0x3a0>
 100d094:	0009883a 	mov	r4,zero
 100d098:	5105883a 	add	r2,r10,r4
 100d09c:	128d803a 	cmpltu	r6,r2,r10
 100d0a0:	5d07883a 	add	r3,r11,r20
 100d0a4:	30cd883a 	add	r6,r6,r3
 100d0a8:	0021883a 	mov	r16,zero
 100d0ac:	0023883a 	mov	r17,zero
 100d0b0:	1025883a 	mov	r18,r2
 100d0b4:	3027883a 	mov	r19,r6
 100d0b8:	32ff9e2e 	bgeu	r6,r11,100cf34 <__muldf3+0x1bc>
 100d0bc:	00800044 	movi	r2,1
 100d0c0:	8089883a 	add	r4,r16,r2
 100d0c4:	240d803a 	cmpltu	r6,r4,r16
 100d0c8:	344d883a 	add	r6,r6,r17
 100d0cc:	2021883a 	mov	r16,r4
 100d0d0:	3023883a 	mov	r17,r6
 100d0d4:	003f9806 	br	100cf38 <__muldf3+0x1c0>
 100d0d8:	403fe71e 	bne	r8,zero,100d078 <__muldf3+0x300>
 100d0dc:	01004004 	movi	r4,256
 100d0e0:	4904703a 	and	r2,r9,r4
 100d0e4:	10c4b03a 	or	r2,r2,r3
 100d0e8:	103fe31e 	bne	r2,zero,100d078 <__muldf3+0x300>
 100d0ec:	94c4b03a 	or	r2,r18,r19
 100d0f0:	103fe126 	beq	r2,zero,100d078 <__muldf3+0x300>
 100d0f4:	49c5883a 	add	r2,r9,r7
 100d0f8:	1251803a 	cmpltu	r8,r2,r9
 100d0fc:	4291883a 	add	r8,r8,r10
 100d100:	013fc004 	movi	r4,-256
 100d104:	1112703a 	and	r9,r2,r4
 100d108:	4015883a 	mov	r10,r8
 100d10c:	003fda06 	br	100d078 <__muldf3+0x300>
 100d110:	6813883a 	mov	r9,r13
 100d114:	003fce06 	br	100d050 <__muldf3+0x2d8>
 100d118:	143f7c36 	bltu	r2,r16,100cf0c <__muldf3+0x194>
 100d11c:	003fdd06 	br	100d094 <__muldf3+0x31c>
 100d120:	12bf852e 	bgeu	r2,r10,100cf38 <__muldf3+0x1c0>
 100d124:	003fe506 	br	100d0bc <__muldf3+0x344>
 100d128:	00800084 	movi	r2,2
 100d12c:	20bf351e 	bne	r4,r2,100ce04 <__muldf3+0x8c>
 100d130:	01004074 	movhi	r4,257
 100d134:	21075504 	addi	r4,r4,7508
 100d138:	003f3f06 	br	100ce38 <__muldf3+0xc0>

0100d13c <__divdf3>:
 100d13c:	deffed04 	addi	sp,sp,-76
 100d140:	dcc01115 	stw	r19,68(sp)
 100d144:	dcc00404 	addi	r19,sp,16
 100d148:	2011883a 	mov	r8,r4
 100d14c:	2813883a 	mov	r9,r5
 100d150:	dc000e15 	stw	r16,56(sp)
 100d154:	d809883a 	mov	r4,sp
 100d158:	980b883a 	mov	r5,r19
 100d15c:	dc000904 	addi	r16,sp,36
 100d160:	dfc01215 	stw	ra,72(sp)
 100d164:	da400115 	stw	r9,4(sp)
 100d168:	d9c00315 	stw	r7,12(sp)
 100d16c:	da000015 	stw	r8,0(sp)
 100d170:	d9800215 	stw	r6,8(sp)
 100d174:	dc801015 	stw	r18,64(sp)
 100d178:	dc400f15 	stw	r17,60(sp)
 100d17c:	100dfa40 	call	100dfa4 <__unpack_d>
 100d180:	d9000204 	addi	r4,sp,8
 100d184:	800b883a 	mov	r5,r16
 100d188:	100dfa40 	call	100dfa4 <__unpack_d>
 100d18c:	d9000417 	ldw	r4,16(sp)
 100d190:	00800044 	movi	r2,1
 100d194:	11000b2e 	bgeu	r2,r4,100d1c4 <__divdf3+0x88>
 100d198:	d9400917 	ldw	r5,36(sp)
 100d19c:	1140762e 	bgeu	r2,r5,100d378 <__divdf3+0x23c>
 100d1a0:	d8800517 	ldw	r2,20(sp)
 100d1a4:	d8c00a17 	ldw	r3,40(sp)
 100d1a8:	01800104 	movi	r6,4
 100d1ac:	10c4f03a 	xor	r2,r2,r3
 100d1b0:	d8800515 	stw	r2,20(sp)
 100d1b4:	21800226 	beq	r4,r6,100d1c0 <__divdf3+0x84>
 100d1b8:	00800084 	movi	r2,2
 100d1bc:	2080141e 	bne	r4,r2,100d210 <__divdf3+0xd4>
 100d1c0:	29000926 	beq	r5,r4,100d1e8 <__divdf3+0xac>
 100d1c4:	9809883a 	mov	r4,r19
 100d1c8:	100dc900 	call	100dc90 <__pack_d>
 100d1cc:	dfc01217 	ldw	ra,72(sp)
 100d1d0:	dcc01117 	ldw	r19,68(sp)
 100d1d4:	dc801017 	ldw	r18,64(sp)
 100d1d8:	dc400f17 	ldw	r17,60(sp)
 100d1dc:	dc000e17 	ldw	r16,56(sp)
 100d1e0:	dec01304 	addi	sp,sp,76
 100d1e4:	f800283a 	ret
 100d1e8:	01004074 	movhi	r4,257
 100d1ec:	21075504 	addi	r4,r4,7508
 100d1f0:	100dc900 	call	100dc90 <__pack_d>
 100d1f4:	dfc01217 	ldw	ra,72(sp)
 100d1f8:	dcc01117 	ldw	r19,68(sp)
 100d1fc:	dc801017 	ldw	r18,64(sp)
 100d200:	dc400f17 	ldw	r17,60(sp)
 100d204:	dc000e17 	ldw	r16,56(sp)
 100d208:	dec01304 	addi	sp,sp,76
 100d20c:	f800283a 	ret
 100d210:	29805b26 	beq	r5,r6,100d380 <__divdf3+0x244>
 100d214:	28802d26 	beq	r5,r2,100d2cc <__divdf3+0x190>
 100d218:	d8c00617 	ldw	r3,24(sp)
 100d21c:	d8800b17 	ldw	r2,44(sp)
 100d220:	d9c00817 	ldw	r7,32(sp)
 100d224:	dc400d17 	ldw	r17,52(sp)
 100d228:	188bc83a 	sub	r5,r3,r2
 100d22c:	d9800717 	ldw	r6,28(sp)
 100d230:	dc000c17 	ldw	r16,48(sp)
 100d234:	d9400615 	stw	r5,24(sp)
 100d238:	3c403836 	bltu	r7,r17,100d31c <__divdf3+0x1e0>
 100d23c:	89c03626 	beq	r17,r7,100d318 <__divdf3+0x1dc>
 100d240:	0015883a 	mov	r10,zero
 100d244:	001d883a 	mov	r14,zero
 100d248:	02c40034 	movhi	r11,4096
 100d24c:	001f883a 	mov	r15,zero
 100d250:	003f883a 	mov	ra,zero
 100d254:	04800f44 	movi	r18,61
 100d258:	00000f06 	br	100d298 <__divdf3+0x15c>
 100d25c:	601d883a 	mov	r14,r12
 100d260:	681f883a 	mov	r15,r13
 100d264:	400d883a 	mov	r6,r8
 100d268:	100f883a 	mov	r7,r2
 100d26c:	3191883a 	add	r8,r6,r6
 100d270:	5808d07a 	srli	r4,r11,1
 100d274:	4185803a 	cmpltu	r2,r8,r6
 100d278:	39d3883a 	add	r9,r7,r7
 100d27c:	28c6b03a 	or	r3,r5,r3
 100d280:	1245883a 	add	r2,r2,r9
 100d284:	1815883a 	mov	r10,r3
 100d288:	2017883a 	mov	r11,r4
 100d28c:	400d883a 	mov	r6,r8
 100d290:	100f883a 	mov	r7,r2
 100d294:	fc801726 	beq	ra,r18,100d2f4 <__divdf3+0x1b8>
 100d298:	580a97fa 	slli	r5,r11,31
 100d29c:	5006d07a 	srli	r3,r10,1
 100d2a0:	ffc00044 	addi	ra,ra,1
 100d2a4:	3c7ff136 	bltu	r7,r17,100d26c <__divdf3+0x130>
 100d2a8:	3411c83a 	sub	r8,r6,r16
 100d2ac:	3205803a 	cmpltu	r2,r6,r8
 100d2b0:	3c53c83a 	sub	r9,r7,r17
 100d2b4:	7298b03a 	or	r12,r14,r10
 100d2b8:	7adab03a 	or	r13,r15,r11
 100d2bc:	4885c83a 	sub	r2,r9,r2
 100d2c0:	89ffe61e 	bne	r17,r7,100d25c <__divdf3+0x120>
 100d2c4:	343fe936 	bltu	r6,r16,100d26c <__divdf3+0x130>
 100d2c8:	003fe406 	br	100d25c <__divdf3+0x120>
 100d2cc:	9809883a 	mov	r4,r19
 100d2d0:	d9800415 	stw	r6,16(sp)
 100d2d4:	100dc900 	call	100dc90 <__pack_d>
 100d2d8:	dfc01217 	ldw	ra,72(sp)
 100d2dc:	dcc01117 	ldw	r19,68(sp)
 100d2e0:	dc801017 	ldw	r18,64(sp)
 100d2e4:	dc400f17 	ldw	r17,60(sp)
 100d2e8:	dc000e17 	ldw	r16,56(sp)
 100d2ec:	dec01304 	addi	sp,sp,76
 100d2f0:	f800283a 	ret
 100d2f4:	00803fc4 	movi	r2,255
 100d2f8:	7090703a 	and	r8,r14,r2
 100d2fc:	00802004 	movi	r2,128
 100d300:	0007883a 	mov	r3,zero
 100d304:	0013883a 	mov	r9,zero
 100d308:	40800d26 	beq	r8,r2,100d340 <__divdf3+0x204>
 100d30c:	dbc00815 	stw	r15,32(sp)
 100d310:	db800715 	stw	r14,28(sp)
 100d314:	003fab06 	br	100d1c4 <__divdf3+0x88>
 100d318:	343fc92e 	bgeu	r6,r16,100d240 <__divdf3+0x104>
 100d31c:	3185883a 	add	r2,r6,r6
 100d320:	1189803a 	cmpltu	r4,r2,r6
 100d324:	39c7883a 	add	r3,r7,r7
 100d328:	20c9883a 	add	r4,r4,r3
 100d32c:	297fffc4 	addi	r5,r5,-1
 100d330:	100d883a 	mov	r6,r2
 100d334:	200f883a 	mov	r7,r4
 100d338:	d9400615 	stw	r5,24(sp)
 100d33c:	003fc006 	br	100d240 <__divdf3+0x104>
 100d340:	483ff21e 	bne	r9,zero,100d30c <__divdf3+0x1d0>
 100d344:	01004004 	movi	r4,256
 100d348:	7104703a 	and	r2,r14,r4
 100d34c:	10c4b03a 	or	r2,r2,r3
 100d350:	103fee1e 	bne	r2,zero,100d30c <__divdf3+0x1d0>
 100d354:	31c4b03a 	or	r2,r6,r7
 100d358:	103fec26 	beq	r2,zero,100d30c <__divdf3+0x1d0>
 100d35c:	7205883a 	add	r2,r14,r8
 100d360:	1391803a 	cmpltu	r8,r2,r14
 100d364:	43d1883a 	add	r8,r8,r15
 100d368:	013fc004 	movi	r4,-256
 100d36c:	111c703a 	and	r14,r2,r4
 100d370:	401f883a 	mov	r15,r8
 100d374:	003fe506 	br	100d30c <__divdf3+0x1d0>
 100d378:	8009883a 	mov	r4,r16
 100d37c:	003f9206 	br	100d1c8 <__divdf3+0x8c>
 100d380:	9809883a 	mov	r4,r19
 100d384:	d8000715 	stw	zero,28(sp)
 100d388:	d8000815 	stw	zero,32(sp)
 100d38c:	d8000615 	stw	zero,24(sp)
 100d390:	003f8d06 	br	100d1c8 <__divdf3+0x8c>

0100d394 <__eqdf2>:
 100d394:	deffef04 	addi	sp,sp,-68
 100d398:	dc400f15 	stw	r17,60(sp)
 100d39c:	dc400404 	addi	r17,sp,16
 100d3a0:	2005883a 	mov	r2,r4
 100d3a4:	2807883a 	mov	r3,r5
 100d3a8:	dc000e15 	stw	r16,56(sp)
 100d3ac:	d809883a 	mov	r4,sp
 100d3b0:	880b883a 	mov	r5,r17
 100d3b4:	dc000904 	addi	r16,sp,36
 100d3b8:	d8c00115 	stw	r3,4(sp)
 100d3bc:	d8800015 	stw	r2,0(sp)
 100d3c0:	d9800215 	stw	r6,8(sp)
 100d3c4:	dfc01015 	stw	ra,64(sp)
 100d3c8:	d9c00315 	stw	r7,12(sp)
 100d3cc:	100dfa40 	call	100dfa4 <__unpack_d>
 100d3d0:	d9000204 	addi	r4,sp,8
 100d3d4:	800b883a 	mov	r5,r16
 100d3d8:	100dfa40 	call	100dfa4 <__unpack_d>
 100d3dc:	d8800417 	ldw	r2,16(sp)
 100d3e0:	00c00044 	movi	r3,1
 100d3e4:	180d883a 	mov	r6,r3
 100d3e8:	1880062e 	bgeu	r3,r2,100d404 <__eqdf2+0x70>
 100d3ec:	d8800917 	ldw	r2,36(sp)
 100d3f0:	8809883a 	mov	r4,r17
 100d3f4:	800b883a 	mov	r5,r16
 100d3f8:	1880022e 	bgeu	r3,r2,100d404 <__eqdf2+0x70>
 100d3fc:	100e0dc0 	call	100e0dc <__fpcmp_parts_d>
 100d400:	100d883a 	mov	r6,r2
 100d404:	3005883a 	mov	r2,r6
 100d408:	dfc01017 	ldw	ra,64(sp)
 100d40c:	dc400f17 	ldw	r17,60(sp)
 100d410:	dc000e17 	ldw	r16,56(sp)
 100d414:	dec01104 	addi	sp,sp,68
 100d418:	f800283a 	ret

0100d41c <__nedf2>:
 100d41c:	deffef04 	addi	sp,sp,-68
 100d420:	dc400f15 	stw	r17,60(sp)
 100d424:	dc400404 	addi	r17,sp,16
 100d428:	2005883a 	mov	r2,r4
 100d42c:	2807883a 	mov	r3,r5
 100d430:	dc000e15 	stw	r16,56(sp)
 100d434:	d809883a 	mov	r4,sp
 100d438:	880b883a 	mov	r5,r17
 100d43c:	dc000904 	addi	r16,sp,36
 100d440:	d8c00115 	stw	r3,4(sp)
 100d444:	d8800015 	stw	r2,0(sp)
 100d448:	d9800215 	stw	r6,8(sp)
 100d44c:	dfc01015 	stw	ra,64(sp)
 100d450:	d9c00315 	stw	r7,12(sp)
 100d454:	100dfa40 	call	100dfa4 <__unpack_d>
 100d458:	d9000204 	addi	r4,sp,8
 100d45c:	800b883a 	mov	r5,r16
 100d460:	100dfa40 	call	100dfa4 <__unpack_d>
 100d464:	d8800417 	ldw	r2,16(sp)
 100d468:	00c00044 	movi	r3,1
 100d46c:	180d883a 	mov	r6,r3
 100d470:	1880062e 	bgeu	r3,r2,100d48c <__nedf2+0x70>
 100d474:	d8800917 	ldw	r2,36(sp)
 100d478:	8809883a 	mov	r4,r17
 100d47c:	800b883a 	mov	r5,r16
 100d480:	1880022e 	bgeu	r3,r2,100d48c <__nedf2+0x70>
 100d484:	100e0dc0 	call	100e0dc <__fpcmp_parts_d>
 100d488:	100d883a 	mov	r6,r2
 100d48c:	3005883a 	mov	r2,r6
 100d490:	dfc01017 	ldw	ra,64(sp)
 100d494:	dc400f17 	ldw	r17,60(sp)
 100d498:	dc000e17 	ldw	r16,56(sp)
 100d49c:	dec01104 	addi	sp,sp,68
 100d4a0:	f800283a 	ret

0100d4a4 <__gtdf2>:
 100d4a4:	deffef04 	addi	sp,sp,-68
 100d4a8:	dc400f15 	stw	r17,60(sp)
 100d4ac:	dc400404 	addi	r17,sp,16
 100d4b0:	2005883a 	mov	r2,r4
 100d4b4:	2807883a 	mov	r3,r5
 100d4b8:	dc000e15 	stw	r16,56(sp)
 100d4bc:	d809883a 	mov	r4,sp
 100d4c0:	880b883a 	mov	r5,r17
 100d4c4:	dc000904 	addi	r16,sp,36
 100d4c8:	d8c00115 	stw	r3,4(sp)
 100d4cc:	d8800015 	stw	r2,0(sp)
 100d4d0:	d9800215 	stw	r6,8(sp)
 100d4d4:	dfc01015 	stw	ra,64(sp)
 100d4d8:	d9c00315 	stw	r7,12(sp)
 100d4dc:	100dfa40 	call	100dfa4 <__unpack_d>
 100d4e0:	d9000204 	addi	r4,sp,8
 100d4e4:	800b883a 	mov	r5,r16
 100d4e8:	100dfa40 	call	100dfa4 <__unpack_d>
 100d4ec:	d8800417 	ldw	r2,16(sp)
 100d4f0:	00c00044 	movi	r3,1
 100d4f4:	01bfffc4 	movi	r6,-1
 100d4f8:	1880062e 	bgeu	r3,r2,100d514 <__gtdf2+0x70>
 100d4fc:	d8800917 	ldw	r2,36(sp)
 100d500:	8809883a 	mov	r4,r17
 100d504:	800b883a 	mov	r5,r16
 100d508:	1880022e 	bgeu	r3,r2,100d514 <__gtdf2+0x70>
 100d50c:	100e0dc0 	call	100e0dc <__fpcmp_parts_d>
 100d510:	100d883a 	mov	r6,r2
 100d514:	3005883a 	mov	r2,r6
 100d518:	dfc01017 	ldw	ra,64(sp)
 100d51c:	dc400f17 	ldw	r17,60(sp)
 100d520:	dc000e17 	ldw	r16,56(sp)
 100d524:	dec01104 	addi	sp,sp,68
 100d528:	f800283a 	ret

0100d52c <__gedf2>:
 100d52c:	deffef04 	addi	sp,sp,-68
 100d530:	dc400f15 	stw	r17,60(sp)
 100d534:	dc400404 	addi	r17,sp,16
 100d538:	2005883a 	mov	r2,r4
 100d53c:	2807883a 	mov	r3,r5
 100d540:	dc000e15 	stw	r16,56(sp)
 100d544:	d809883a 	mov	r4,sp
 100d548:	880b883a 	mov	r5,r17
 100d54c:	dc000904 	addi	r16,sp,36
 100d550:	d8c00115 	stw	r3,4(sp)
 100d554:	d8800015 	stw	r2,0(sp)
 100d558:	d9800215 	stw	r6,8(sp)
 100d55c:	dfc01015 	stw	ra,64(sp)
 100d560:	d9c00315 	stw	r7,12(sp)
 100d564:	100dfa40 	call	100dfa4 <__unpack_d>
 100d568:	d9000204 	addi	r4,sp,8
 100d56c:	800b883a 	mov	r5,r16
 100d570:	100dfa40 	call	100dfa4 <__unpack_d>
 100d574:	d8800417 	ldw	r2,16(sp)
 100d578:	00c00044 	movi	r3,1
 100d57c:	01bfffc4 	movi	r6,-1
 100d580:	1880062e 	bgeu	r3,r2,100d59c <__gedf2+0x70>
 100d584:	d8800917 	ldw	r2,36(sp)
 100d588:	8809883a 	mov	r4,r17
 100d58c:	800b883a 	mov	r5,r16
 100d590:	1880022e 	bgeu	r3,r2,100d59c <__gedf2+0x70>
 100d594:	100e0dc0 	call	100e0dc <__fpcmp_parts_d>
 100d598:	100d883a 	mov	r6,r2
 100d59c:	3005883a 	mov	r2,r6
 100d5a0:	dfc01017 	ldw	ra,64(sp)
 100d5a4:	dc400f17 	ldw	r17,60(sp)
 100d5a8:	dc000e17 	ldw	r16,56(sp)
 100d5ac:	dec01104 	addi	sp,sp,68
 100d5b0:	f800283a 	ret

0100d5b4 <__ltdf2>:
 100d5b4:	deffef04 	addi	sp,sp,-68
 100d5b8:	dc400f15 	stw	r17,60(sp)
 100d5bc:	dc400404 	addi	r17,sp,16
 100d5c0:	2005883a 	mov	r2,r4
 100d5c4:	2807883a 	mov	r3,r5
 100d5c8:	dc000e15 	stw	r16,56(sp)
 100d5cc:	d809883a 	mov	r4,sp
 100d5d0:	880b883a 	mov	r5,r17
 100d5d4:	dc000904 	addi	r16,sp,36
 100d5d8:	d8c00115 	stw	r3,4(sp)
 100d5dc:	d8800015 	stw	r2,0(sp)
 100d5e0:	d9800215 	stw	r6,8(sp)
 100d5e4:	dfc01015 	stw	ra,64(sp)
 100d5e8:	d9c00315 	stw	r7,12(sp)
 100d5ec:	100dfa40 	call	100dfa4 <__unpack_d>
 100d5f0:	d9000204 	addi	r4,sp,8
 100d5f4:	800b883a 	mov	r5,r16
 100d5f8:	100dfa40 	call	100dfa4 <__unpack_d>
 100d5fc:	d8800417 	ldw	r2,16(sp)
 100d600:	00c00044 	movi	r3,1
 100d604:	180d883a 	mov	r6,r3
 100d608:	1880062e 	bgeu	r3,r2,100d624 <__ltdf2+0x70>
 100d60c:	d8800917 	ldw	r2,36(sp)
 100d610:	8809883a 	mov	r4,r17
 100d614:	800b883a 	mov	r5,r16
 100d618:	1880022e 	bgeu	r3,r2,100d624 <__ltdf2+0x70>
 100d61c:	100e0dc0 	call	100e0dc <__fpcmp_parts_d>
 100d620:	100d883a 	mov	r6,r2
 100d624:	3005883a 	mov	r2,r6
 100d628:	dfc01017 	ldw	ra,64(sp)
 100d62c:	dc400f17 	ldw	r17,60(sp)
 100d630:	dc000e17 	ldw	r16,56(sp)
 100d634:	dec01104 	addi	sp,sp,68
 100d638:	f800283a 	ret

0100d63c <__floatsidf>:
 100d63c:	2006d7fa 	srli	r3,r4,31
 100d640:	defff604 	addi	sp,sp,-40
 100d644:	008000c4 	movi	r2,3
 100d648:	dfc00915 	stw	ra,36(sp)
 100d64c:	dcc00815 	stw	r19,32(sp)
 100d650:	dc800715 	stw	r18,28(sp)
 100d654:	dc400615 	stw	r17,24(sp)
 100d658:	dc000515 	stw	r16,20(sp)
 100d65c:	d8800015 	stw	r2,0(sp)
 100d660:	d8c00115 	stw	r3,4(sp)
 100d664:	20000f1e 	bne	r4,zero,100d6a4 <__floatsidf+0x68>
 100d668:	00800084 	movi	r2,2
 100d66c:	d8800015 	stw	r2,0(sp)
 100d670:	d809883a 	mov	r4,sp
 100d674:	100dc900 	call	100dc90 <__pack_d>
 100d678:	1009883a 	mov	r4,r2
 100d67c:	180b883a 	mov	r5,r3
 100d680:	2005883a 	mov	r2,r4
 100d684:	2807883a 	mov	r3,r5
 100d688:	dfc00917 	ldw	ra,36(sp)
 100d68c:	dcc00817 	ldw	r19,32(sp)
 100d690:	dc800717 	ldw	r18,28(sp)
 100d694:	dc400617 	ldw	r17,24(sp)
 100d698:	dc000517 	ldw	r16,20(sp)
 100d69c:	dec00a04 	addi	sp,sp,40
 100d6a0:	f800283a 	ret
 100d6a4:	00800f04 	movi	r2,60
 100d6a8:	1807003a 	cmpeq	r3,r3,zero
 100d6ac:	d8800215 	stw	r2,8(sp)
 100d6b0:	18001126 	beq	r3,zero,100d6f8 <__floatsidf+0xbc>
 100d6b4:	0027883a 	mov	r19,zero
 100d6b8:	2025883a 	mov	r18,r4
 100d6bc:	d9000315 	stw	r4,12(sp)
 100d6c0:	dcc00415 	stw	r19,16(sp)
 100d6c4:	100dc100 	call	100dc10 <__clzsi2>
 100d6c8:	11000744 	addi	r4,r2,29
 100d6cc:	013fe80e 	bge	zero,r4,100d670 <__floatsidf+0x34>
 100d6d0:	10bfff44 	addi	r2,r2,-3
 100d6d4:	10000c16 	blt	r2,zero,100d708 <__floatsidf+0xcc>
 100d6d8:	90a2983a 	sll	r17,r18,r2
 100d6dc:	0021883a 	mov	r16,zero
 100d6e0:	d8800217 	ldw	r2,8(sp)
 100d6e4:	dc400415 	stw	r17,16(sp)
 100d6e8:	dc000315 	stw	r16,12(sp)
 100d6ec:	1105c83a 	sub	r2,r2,r4
 100d6f0:	d8800215 	stw	r2,8(sp)
 100d6f4:	003fde06 	br	100d670 <__floatsidf+0x34>
 100d6f8:	00a00034 	movhi	r2,32768
 100d6fc:	20800a26 	beq	r4,r2,100d728 <__floatsidf+0xec>
 100d700:	0109c83a 	sub	r4,zero,r4
 100d704:	003feb06 	br	100d6b4 <__floatsidf+0x78>
 100d708:	9006d07a 	srli	r3,r18,1
 100d70c:	008007c4 	movi	r2,31
 100d710:	1105c83a 	sub	r2,r2,r4
 100d714:	1886d83a 	srl	r3,r3,r2
 100d718:	9922983a 	sll	r17,r19,r4
 100d71c:	9120983a 	sll	r16,r18,r4
 100d720:	1c62b03a 	or	r17,r3,r17
 100d724:	003fee06 	br	100d6e0 <__floatsidf+0xa4>
 100d728:	0009883a 	mov	r4,zero
 100d72c:	01707834 	movhi	r5,49632
 100d730:	003fd306 	br	100d680 <__floatsidf+0x44>

0100d734 <__fixdfsi>:
 100d734:	defff804 	addi	sp,sp,-32
 100d738:	2005883a 	mov	r2,r4
 100d73c:	2807883a 	mov	r3,r5
 100d740:	d809883a 	mov	r4,sp
 100d744:	d9400204 	addi	r5,sp,8
 100d748:	d8c00115 	stw	r3,4(sp)
 100d74c:	d8800015 	stw	r2,0(sp)
 100d750:	dfc00715 	stw	ra,28(sp)
 100d754:	100dfa40 	call	100dfa4 <__unpack_d>
 100d758:	d8c00217 	ldw	r3,8(sp)
 100d75c:	00800084 	movi	r2,2
 100d760:	1880051e 	bne	r3,r2,100d778 <__fixdfsi+0x44>
 100d764:	0007883a 	mov	r3,zero
 100d768:	1805883a 	mov	r2,r3
 100d76c:	dfc00717 	ldw	ra,28(sp)
 100d770:	dec00804 	addi	sp,sp,32
 100d774:	f800283a 	ret
 100d778:	00800044 	movi	r2,1
 100d77c:	10fff92e 	bgeu	r2,r3,100d764 <__fixdfsi+0x30>
 100d780:	00800104 	movi	r2,4
 100d784:	18800426 	beq	r3,r2,100d798 <__fixdfsi+0x64>
 100d788:	d8c00417 	ldw	r3,16(sp)
 100d78c:	183ff516 	blt	r3,zero,100d764 <__fixdfsi+0x30>
 100d790:	00800784 	movi	r2,30
 100d794:	10c0080e 	bge	r2,r3,100d7b8 <__fixdfsi+0x84>
 100d798:	d8800317 	ldw	r2,12(sp)
 100d79c:	1000121e 	bne	r2,zero,100d7e8 <__fixdfsi+0xb4>
 100d7a0:	00e00034 	movhi	r3,32768
 100d7a4:	18ffffc4 	addi	r3,r3,-1
 100d7a8:	1805883a 	mov	r2,r3
 100d7ac:	dfc00717 	ldw	ra,28(sp)
 100d7b0:	dec00804 	addi	sp,sp,32
 100d7b4:	f800283a 	ret
 100d7b8:	00800f04 	movi	r2,60
 100d7bc:	10d1c83a 	sub	r8,r2,r3
 100d7c0:	40bff804 	addi	r2,r8,-32
 100d7c4:	d9800517 	ldw	r6,20(sp)
 100d7c8:	d9c00617 	ldw	r7,24(sp)
 100d7cc:	10000816 	blt	r2,zero,100d7f0 <__fixdfsi+0xbc>
 100d7d0:	3888d83a 	srl	r4,r7,r2
 100d7d4:	d8800317 	ldw	r2,12(sp)
 100d7d8:	2007883a 	mov	r3,r4
 100d7dc:	103fe226 	beq	r2,zero,100d768 <__fixdfsi+0x34>
 100d7e0:	0107c83a 	sub	r3,zero,r4
 100d7e4:	003fe006 	br	100d768 <__fixdfsi+0x34>
 100d7e8:	00e00034 	movhi	r3,32768
 100d7ec:	003fde06 	br	100d768 <__fixdfsi+0x34>
 100d7f0:	39c7883a 	add	r3,r7,r7
 100d7f4:	008007c4 	movi	r2,31
 100d7f8:	1205c83a 	sub	r2,r2,r8
 100d7fc:	1886983a 	sll	r3,r3,r2
 100d800:	3208d83a 	srl	r4,r6,r8
 100d804:	1908b03a 	or	r4,r3,r4
 100d808:	003ff206 	br	100d7d4 <__fixdfsi+0xa0>

0100d80c <__floatunsidf>:
 100d80c:	defff204 	addi	sp,sp,-56
 100d810:	dfc00d15 	stw	ra,52(sp)
 100d814:	ddc00c15 	stw	r23,48(sp)
 100d818:	dd800b15 	stw	r22,44(sp)
 100d81c:	dd400a15 	stw	r21,40(sp)
 100d820:	dd000915 	stw	r20,36(sp)
 100d824:	dcc00815 	stw	r19,32(sp)
 100d828:	dc800715 	stw	r18,28(sp)
 100d82c:	dc400615 	stw	r17,24(sp)
 100d830:	dc000515 	stw	r16,20(sp)
 100d834:	d8000115 	stw	zero,4(sp)
 100d838:	20000f1e 	bne	r4,zero,100d878 <__floatunsidf+0x6c>
 100d83c:	00800084 	movi	r2,2
 100d840:	d8800015 	stw	r2,0(sp)
 100d844:	d809883a 	mov	r4,sp
 100d848:	100dc900 	call	100dc90 <__pack_d>
 100d84c:	dfc00d17 	ldw	ra,52(sp)
 100d850:	ddc00c17 	ldw	r23,48(sp)
 100d854:	dd800b17 	ldw	r22,44(sp)
 100d858:	dd400a17 	ldw	r21,40(sp)
 100d85c:	dd000917 	ldw	r20,36(sp)
 100d860:	dcc00817 	ldw	r19,32(sp)
 100d864:	dc800717 	ldw	r18,28(sp)
 100d868:	dc400617 	ldw	r17,24(sp)
 100d86c:	dc000517 	ldw	r16,20(sp)
 100d870:	dec00e04 	addi	sp,sp,56
 100d874:	f800283a 	ret
 100d878:	008000c4 	movi	r2,3
 100d87c:	00c00f04 	movi	r3,60
 100d880:	002f883a 	mov	r23,zero
 100d884:	202d883a 	mov	r22,r4
 100d888:	d8800015 	stw	r2,0(sp)
 100d88c:	d8c00215 	stw	r3,8(sp)
 100d890:	d9000315 	stw	r4,12(sp)
 100d894:	ddc00415 	stw	r23,16(sp)
 100d898:	100dc100 	call	100dc10 <__clzsi2>
 100d89c:	12400744 	addi	r9,r2,29
 100d8a0:	48000b16 	blt	r9,zero,100d8d0 <__floatunsidf+0xc4>
 100d8a4:	483fe726 	beq	r9,zero,100d844 <__floatunsidf+0x38>
 100d8a8:	10bfff44 	addi	r2,r2,-3
 100d8ac:	10002e16 	blt	r2,zero,100d968 <__floatunsidf+0x15c>
 100d8b0:	b0a2983a 	sll	r17,r22,r2
 100d8b4:	0021883a 	mov	r16,zero
 100d8b8:	d8800217 	ldw	r2,8(sp)
 100d8bc:	dc400415 	stw	r17,16(sp)
 100d8c0:	dc000315 	stw	r16,12(sp)
 100d8c4:	1245c83a 	sub	r2,r2,r9
 100d8c8:	d8800215 	stw	r2,8(sp)
 100d8cc:	003fdd06 	br	100d844 <__floatunsidf+0x38>
 100d8d0:	0255c83a 	sub	r10,zero,r9
 100d8d4:	51bff804 	addi	r6,r10,-32
 100d8d8:	30001b16 	blt	r6,zero,100d948 <__floatunsidf+0x13c>
 100d8dc:	b9a8d83a 	srl	r20,r23,r6
 100d8e0:	002b883a 	mov	r21,zero
 100d8e4:	000f883a 	mov	r7,zero
 100d8e8:	01000044 	movi	r4,1
 100d8ec:	0011883a 	mov	r8,zero
 100d8f0:	30002516 	blt	r6,zero,100d988 <__floatunsidf+0x17c>
 100d8f4:	21a6983a 	sll	r19,r4,r6
 100d8f8:	0025883a 	mov	r18,zero
 100d8fc:	00bfffc4 	movi	r2,-1
 100d900:	9089883a 	add	r4,r18,r2
 100d904:	988b883a 	add	r5,r19,r2
 100d908:	248d803a 	cmpltu	r6,r4,r18
 100d90c:	314b883a 	add	r5,r6,r5
 100d910:	b104703a 	and	r2,r22,r4
 100d914:	b946703a 	and	r3,r23,r5
 100d918:	10c4b03a 	or	r2,r2,r3
 100d91c:	10000226 	beq	r2,zero,100d928 <__floatunsidf+0x11c>
 100d920:	01c00044 	movi	r7,1
 100d924:	0011883a 	mov	r8,zero
 100d928:	d9000217 	ldw	r4,8(sp)
 100d92c:	a1c4b03a 	or	r2,r20,r7
 100d930:	aa06b03a 	or	r3,r21,r8
 100d934:	2249c83a 	sub	r4,r4,r9
 100d938:	d8c00415 	stw	r3,16(sp)
 100d93c:	d9000215 	stw	r4,8(sp)
 100d940:	d8800315 	stw	r2,12(sp)
 100d944:	003fbf06 	br	100d844 <__floatunsidf+0x38>
 100d948:	bdc7883a 	add	r3,r23,r23
 100d94c:	008007c4 	movi	r2,31
 100d950:	1285c83a 	sub	r2,r2,r10
 100d954:	1886983a 	sll	r3,r3,r2
 100d958:	b2a8d83a 	srl	r20,r22,r10
 100d95c:	baaad83a 	srl	r21,r23,r10
 100d960:	1d28b03a 	or	r20,r3,r20
 100d964:	003fdf06 	br	100d8e4 <__floatunsidf+0xd8>
 100d968:	b006d07a 	srli	r3,r22,1
 100d96c:	008007c4 	movi	r2,31
 100d970:	1245c83a 	sub	r2,r2,r9
 100d974:	1886d83a 	srl	r3,r3,r2
 100d978:	ba62983a 	sll	r17,r23,r9
 100d97c:	b260983a 	sll	r16,r22,r9
 100d980:	1c62b03a 	or	r17,r3,r17
 100d984:	003fcc06 	br	100d8b8 <__floatunsidf+0xac>
 100d988:	2006d07a 	srli	r3,r4,1
 100d98c:	008007c4 	movi	r2,31
 100d990:	1285c83a 	sub	r2,r2,r10
 100d994:	18a6d83a 	srl	r19,r3,r2
 100d998:	22a4983a 	sll	r18,r4,r10
 100d99c:	003fd706 	br	100d8fc <__floatunsidf+0xf0>

0100d9a0 <udivmodsi4>:
 100d9a0:	29001b2e 	bgeu	r5,r4,100da10 <udivmodsi4+0x70>
 100d9a4:	28001a16 	blt	r5,zero,100da10 <udivmodsi4+0x70>
 100d9a8:	00800044 	movi	r2,1
 100d9ac:	0007883a 	mov	r3,zero
 100d9b0:	01c007c4 	movi	r7,31
 100d9b4:	00000306 	br	100d9c4 <udivmodsi4+0x24>
 100d9b8:	19c01326 	beq	r3,r7,100da08 <udivmodsi4+0x68>
 100d9bc:	18c00044 	addi	r3,r3,1
 100d9c0:	28000416 	blt	r5,zero,100d9d4 <udivmodsi4+0x34>
 100d9c4:	294b883a 	add	r5,r5,r5
 100d9c8:	1085883a 	add	r2,r2,r2
 100d9cc:	293ffa36 	bltu	r5,r4,100d9b8 <udivmodsi4+0x18>
 100d9d0:	10000d26 	beq	r2,zero,100da08 <udivmodsi4+0x68>
 100d9d4:	0007883a 	mov	r3,zero
 100d9d8:	21400236 	bltu	r4,r5,100d9e4 <udivmodsi4+0x44>
 100d9dc:	2149c83a 	sub	r4,r4,r5
 100d9e0:	1886b03a 	or	r3,r3,r2
 100d9e4:	1004d07a 	srli	r2,r2,1
 100d9e8:	280ad07a 	srli	r5,r5,1
 100d9ec:	103ffa1e 	bne	r2,zero,100d9d8 <udivmodsi4+0x38>
 100d9f0:	30000226 	beq	r6,zero,100d9fc <udivmodsi4+0x5c>
 100d9f4:	2005883a 	mov	r2,r4
 100d9f8:	f800283a 	ret
 100d9fc:	1809883a 	mov	r4,r3
 100da00:	2005883a 	mov	r2,r4
 100da04:	f800283a 	ret
 100da08:	0007883a 	mov	r3,zero
 100da0c:	003ff806 	br	100d9f0 <udivmodsi4+0x50>
 100da10:	00800044 	movi	r2,1
 100da14:	0007883a 	mov	r3,zero
 100da18:	003fef06 	br	100d9d8 <udivmodsi4+0x38>

0100da1c <__divsi3>:
 100da1c:	defffe04 	addi	sp,sp,-8
 100da20:	dc000015 	stw	r16,0(sp)
 100da24:	dfc00115 	stw	ra,4(sp)
 100da28:	0021883a 	mov	r16,zero
 100da2c:	20000c16 	blt	r4,zero,100da60 <__divsi3+0x44>
 100da30:	000d883a 	mov	r6,zero
 100da34:	28000e16 	blt	r5,zero,100da70 <__divsi3+0x54>
 100da38:	100d9a00 	call	100d9a0 <udivmodsi4>
 100da3c:	1007883a 	mov	r3,r2
 100da40:	8005003a 	cmpeq	r2,r16,zero
 100da44:	1000011e 	bne	r2,zero,100da4c <__divsi3+0x30>
 100da48:	00c7c83a 	sub	r3,zero,r3
 100da4c:	1805883a 	mov	r2,r3
 100da50:	dfc00117 	ldw	ra,4(sp)
 100da54:	dc000017 	ldw	r16,0(sp)
 100da58:	dec00204 	addi	sp,sp,8
 100da5c:	f800283a 	ret
 100da60:	0109c83a 	sub	r4,zero,r4
 100da64:	04000044 	movi	r16,1
 100da68:	000d883a 	mov	r6,zero
 100da6c:	283ff20e 	bge	r5,zero,100da38 <__divsi3+0x1c>
 100da70:	014bc83a 	sub	r5,zero,r5
 100da74:	8021003a 	cmpeq	r16,r16,zero
 100da78:	003fef06 	br	100da38 <__divsi3+0x1c>

0100da7c <__modsi3>:
 100da7c:	deffff04 	addi	sp,sp,-4
 100da80:	dfc00015 	stw	ra,0(sp)
 100da84:	01800044 	movi	r6,1
 100da88:	2807883a 	mov	r3,r5
 100da8c:	20000416 	blt	r4,zero,100daa0 <__modsi3+0x24>
 100da90:	28000c16 	blt	r5,zero,100dac4 <__modsi3+0x48>
 100da94:	dfc00017 	ldw	ra,0(sp)
 100da98:	dec00104 	addi	sp,sp,4
 100da9c:	100d9a01 	jmpi	100d9a0 <udivmodsi4>
 100daa0:	0109c83a 	sub	r4,zero,r4
 100daa4:	28000b16 	blt	r5,zero,100dad4 <__modsi3+0x58>
 100daa8:	180b883a 	mov	r5,r3
 100daac:	01800044 	movi	r6,1
 100dab0:	100d9a00 	call	100d9a0 <udivmodsi4>
 100dab4:	0085c83a 	sub	r2,zero,r2
 100dab8:	dfc00017 	ldw	ra,0(sp)
 100dabc:	dec00104 	addi	sp,sp,4
 100dac0:	f800283a 	ret
 100dac4:	014bc83a 	sub	r5,zero,r5
 100dac8:	dfc00017 	ldw	ra,0(sp)
 100dacc:	dec00104 	addi	sp,sp,4
 100dad0:	100d9a01 	jmpi	100d9a0 <udivmodsi4>
 100dad4:	0147c83a 	sub	r3,zero,r5
 100dad8:	003ff306 	br	100daa8 <__modsi3+0x2c>

0100dadc <__udivsi3>:
 100dadc:	000d883a 	mov	r6,zero
 100dae0:	100d9a01 	jmpi	100d9a0 <udivmodsi4>

0100dae4 <__umodsi3>:
 100dae4:	01800044 	movi	r6,1
 100dae8:	100d9a01 	jmpi	100d9a0 <udivmodsi4>

0100daec <__muldi3>:
 100daec:	defff204 	addi	sp,sp,-56
 100daf0:	df000c15 	stw	fp,48(sp)
 100daf4:	3038d43a 	srli	fp,r6,16
 100daf8:	dd000815 	stw	r20,32(sp)
 100dafc:	dc400515 	stw	r17,20(sp)
 100db00:	2028d43a 	srli	r20,r4,16
 100db04:	247fffcc 	andi	r17,r4,65535
 100db08:	dc000415 	stw	r16,16(sp)
 100db0c:	343fffcc 	andi	r16,r6,65535
 100db10:	dcc00715 	stw	r19,28(sp)
 100db14:	d9000015 	stw	r4,0(sp)
 100db18:	2827883a 	mov	r19,r5
 100db1c:	8809883a 	mov	r4,r17
 100db20:	d9400115 	stw	r5,4(sp)
 100db24:	800b883a 	mov	r5,r16
 100db28:	d9800215 	stw	r6,8(sp)
 100db2c:	dfc00d15 	stw	ra,52(sp)
 100db30:	d9c00315 	stw	r7,12(sp)
 100db34:	dd800a15 	stw	r22,40(sp)
 100db38:	dd400915 	stw	r21,36(sp)
 100db3c:	302d883a 	mov	r22,r6
 100db40:	ddc00b15 	stw	r23,44(sp)
 100db44:	dc800615 	stw	r18,24(sp)
 100db48:	1002f0c0 	call	1002f0c <__mulsi3>
 100db4c:	8809883a 	mov	r4,r17
 100db50:	e00b883a 	mov	r5,fp
 100db54:	102b883a 	mov	r21,r2
 100db58:	1002f0c0 	call	1002f0c <__mulsi3>
 100db5c:	800b883a 	mov	r5,r16
 100db60:	a009883a 	mov	r4,r20
 100db64:	1023883a 	mov	r17,r2
 100db68:	1002f0c0 	call	1002f0c <__mulsi3>
 100db6c:	a009883a 	mov	r4,r20
 100db70:	e00b883a 	mov	r5,fp
 100db74:	1021883a 	mov	r16,r2
 100db78:	1002f0c0 	call	1002f0c <__mulsi3>
 100db7c:	a8ffffcc 	andi	r3,r21,65535
 100db80:	a82ad43a 	srli	r21,r21,16
 100db84:	8c23883a 	add	r17,r17,r16
 100db88:	1011883a 	mov	r8,r2
 100db8c:	ac6b883a 	add	r21,r21,r17
 100db90:	a804943a 	slli	r2,r21,16
 100db94:	b009883a 	mov	r4,r22
 100db98:	980b883a 	mov	r5,r19
 100db9c:	10c7883a 	add	r3,r2,r3
 100dba0:	a812d43a 	srli	r9,r21,16
 100dba4:	180d883a 	mov	r6,r3
 100dba8:	ac00022e 	bgeu	r21,r16,100dbb4 <__muldi3+0xc8>
 100dbac:	00800074 	movhi	r2,1
 100dbb0:	4091883a 	add	r8,r8,r2
 100dbb4:	4267883a 	add	r19,r8,r9
 100dbb8:	302d883a 	mov	r22,r6
 100dbbc:	1002f0c0 	call	1002f0c <__mulsi3>
 100dbc0:	d9400317 	ldw	r5,12(sp)
 100dbc4:	d9000017 	ldw	r4,0(sp)
 100dbc8:	1023883a 	mov	r17,r2
 100dbcc:	1002f0c0 	call	1002f0c <__mulsi3>
 100dbd0:	14cb883a 	add	r5,r2,r19
 100dbd4:	894b883a 	add	r5,r17,r5
 100dbd8:	b005883a 	mov	r2,r22
 100dbdc:	2807883a 	mov	r3,r5
 100dbe0:	dfc00d17 	ldw	ra,52(sp)
 100dbe4:	df000c17 	ldw	fp,48(sp)
 100dbe8:	ddc00b17 	ldw	r23,44(sp)
 100dbec:	dd800a17 	ldw	r22,40(sp)
 100dbf0:	dd400917 	ldw	r21,36(sp)
 100dbf4:	dd000817 	ldw	r20,32(sp)
 100dbf8:	dcc00717 	ldw	r19,28(sp)
 100dbfc:	dc800617 	ldw	r18,24(sp)
 100dc00:	dc400517 	ldw	r17,20(sp)
 100dc04:	dc000417 	ldw	r16,16(sp)
 100dc08:	dec00e04 	addi	sp,sp,56
 100dc0c:	f800283a 	ret

0100dc10 <__clzsi2>:
 100dc10:	00bfffd4 	movui	r2,65535
 100dc14:	11000e36 	bltu	r2,r4,100dc50 <__clzsi2+0x40>
 100dc18:	00803fc4 	movi	r2,255
 100dc1c:	01400204 	movi	r5,8
 100dc20:	0007883a 	mov	r3,zero
 100dc24:	11001036 	bltu	r2,r4,100dc68 <__clzsi2+0x58>
 100dc28:	000b883a 	mov	r5,zero
 100dc2c:	20c6d83a 	srl	r3,r4,r3
 100dc30:	00804074 	movhi	r2,257
 100dc34:	10875a04 	addi	r2,r2,7528
 100dc38:	1887883a 	add	r3,r3,r2
 100dc3c:	18800003 	ldbu	r2,0(r3)
 100dc40:	00c00804 	movi	r3,32
 100dc44:	2885883a 	add	r2,r5,r2
 100dc48:	1885c83a 	sub	r2,r3,r2
 100dc4c:	f800283a 	ret
 100dc50:	01400404 	movi	r5,16
 100dc54:	00804034 	movhi	r2,256
 100dc58:	10bfffc4 	addi	r2,r2,-1
 100dc5c:	2807883a 	mov	r3,r5
 100dc60:	113ff22e 	bgeu	r2,r4,100dc2c <__clzsi2+0x1c>
 100dc64:	01400604 	movi	r5,24
 100dc68:	2807883a 	mov	r3,r5
 100dc6c:	20c6d83a 	srl	r3,r4,r3
 100dc70:	00804074 	movhi	r2,257
 100dc74:	10875a04 	addi	r2,r2,7528
 100dc78:	1887883a 	add	r3,r3,r2
 100dc7c:	18800003 	ldbu	r2,0(r3)
 100dc80:	00c00804 	movi	r3,32
 100dc84:	2885883a 	add	r2,r5,r2
 100dc88:	1885c83a 	sub	r2,r3,r2
 100dc8c:	f800283a 	ret

0100dc90 <__pack_d>:
 100dc90:	20c00017 	ldw	r3,0(r4)
 100dc94:	defffd04 	addi	sp,sp,-12
 100dc98:	dc000015 	stw	r16,0(sp)
 100dc9c:	dc800215 	stw	r18,8(sp)
 100dca0:	dc400115 	stw	r17,4(sp)
 100dca4:	00800044 	movi	r2,1
 100dca8:	22000317 	ldw	r8,12(r4)
 100dcac:	001f883a 	mov	r15,zero
 100dcb0:	22400417 	ldw	r9,16(r4)
 100dcb4:	24000117 	ldw	r16,4(r4)
 100dcb8:	10c0552e 	bgeu	r2,r3,100de10 <__pack_d+0x180>
 100dcbc:	00800104 	movi	r2,4
 100dcc0:	18804f26 	beq	r3,r2,100de00 <__pack_d+0x170>
 100dcc4:	00800084 	movi	r2,2
 100dcc8:	18800226 	beq	r3,r2,100dcd4 <__pack_d+0x44>
 100dccc:	4244b03a 	or	r2,r8,r9
 100dcd0:	10001a1e 	bne	r2,zero,100dd3c <__pack_d+0xac>
 100dcd4:	000d883a 	mov	r6,zero
 100dcd8:	000f883a 	mov	r7,zero
 100dcdc:	0011883a 	mov	r8,zero
 100dce0:	00800434 	movhi	r2,16
 100dce4:	10bfffc4 	addi	r2,r2,-1
 100dce8:	301d883a 	mov	r14,r6
 100dcec:	3884703a 	and	r2,r7,r2
 100dcf0:	400a953a 	slli	r5,r8,20
 100dcf4:	79bffc2c 	andhi	r6,r15,65520
 100dcf8:	308cb03a 	or	r6,r6,r2
 100dcfc:	00e00434 	movhi	r3,32784
 100dd00:	18ffffc4 	addi	r3,r3,-1
 100dd04:	800497fa 	slli	r2,r16,31
 100dd08:	30c6703a 	and	r3,r6,r3
 100dd0c:	1946b03a 	or	r3,r3,r5
 100dd10:	01600034 	movhi	r5,32768
 100dd14:	297fffc4 	addi	r5,r5,-1
 100dd18:	194a703a 	and	r5,r3,r5
 100dd1c:	288ab03a 	or	r5,r5,r2
 100dd20:	2807883a 	mov	r3,r5
 100dd24:	7005883a 	mov	r2,r14
 100dd28:	dc800217 	ldw	r18,8(sp)
 100dd2c:	dc400117 	ldw	r17,4(sp)
 100dd30:	dc000017 	ldw	r16,0(sp)
 100dd34:	dec00304 	addi	sp,sp,12
 100dd38:	f800283a 	ret
 100dd3c:	21000217 	ldw	r4,8(r4)
 100dd40:	00bf0084 	movi	r2,-1022
 100dd44:	20803f16 	blt	r4,r2,100de44 <__pack_d+0x1b4>
 100dd48:	0080ffc4 	movi	r2,1023
 100dd4c:	11002c16 	blt	r2,r4,100de00 <__pack_d+0x170>
 100dd50:	00803fc4 	movi	r2,255
 100dd54:	408c703a 	and	r6,r8,r2
 100dd58:	00802004 	movi	r2,128
 100dd5c:	0007883a 	mov	r3,zero
 100dd60:	000f883a 	mov	r7,zero
 100dd64:	2280ffc4 	addi	r10,r4,1023
 100dd68:	30801e26 	beq	r6,r2,100dde4 <__pack_d+0x154>
 100dd6c:	00801fc4 	movi	r2,127
 100dd70:	4089883a 	add	r4,r8,r2
 100dd74:	220d803a 	cmpltu	r6,r4,r8
 100dd78:	324d883a 	add	r6,r6,r9
 100dd7c:	2011883a 	mov	r8,r4
 100dd80:	3013883a 	mov	r9,r6
 100dd84:	00880034 	movhi	r2,8192
 100dd88:	10bfffc4 	addi	r2,r2,-1
 100dd8c:	12400d36 	bltu	r2,r9,100ddc4 <__pack_d+0x134>
 100dd90:	4804963a 	slli	r2,r9,24
 100dd94:	400cd23a 	srli	r6,r8,8
 100dd98:	480ed23a 	srli	r7,r9,8
 100dd9c:	013fffc4 	movi	r4,-1
 100dda0:	118cb03a 	or	r6,r2,r6
 100dda4:	01400434 	movhi	r5,16
 100dda8:	297fffc4 	addi	r5,r5,-1
 100ddac:	3104703a 	and	r2,r6,r4
 100ddb0:	3946703a 	and	r3,r7,r5
 100ddb4:	5201ffcc 	andi	r8,r10,2047
 100ddb8:	100d883a 	mov	r6,r2
 100ddbc:	180f883a 	mov	r7,r3
 100ddc0:	003fc706 	br	100dce0 <__pack_d+0x50>
 100ddc4:	480897fa 	slli	r4,r9,31
 100ddc8:	4004d07a 	srli	r2,r8,1
 100ddcc:	4806d07a 	srli	r3,r9,1
 100ddd0:	52800044 	addi	r10,r10,1
 100ddd4:	2084b03a 	or	r2,r4,r2
 100ddd8:	1011883a 	mov	r8,r2
 100dddc:	1813883a 	mov	r9,r3
 100dde0:	003feb06 	br	100dd90 <__pack_d+0x100>
 100dde4:	383fe11e 	bne	r7,zero,100dd6c <__pack_d+0xdc>
 100dde8:	01004004 	movi	r4,256
 100ddec:	4104703a 	and	r2,r8,r4
 100ddf0:	10c4b03a 	or	r2,r2,r3
 100ddf4:	103fe326 	beq	r2,zero,100dd84 <__pack_d+0xf4>
 100ddf8:	3005883a 	mov	r2,r6
 100ddfc:	003fdc06 	br	100dd70 <__pack_d+0xe0>
 100de00:	000d883a 	mov	r6,zero
 100de04:	000f883a 	mov	r7,zero
 100de08:	0201ffc4 	movi	r8,2047
 100de0c:	003fb406 	br	100dce0 <__pack_d+0x50>
 100de10:	0005883a 	mov	r2,zero
 100de14:	00c00234 	movhi	r3,8
 100de18:	408cb03a 	or	r6,r8,r2
 100de1c:	48ceb03a 	or	r7,r9,r3
 100de20:	013fffc4 	movi	r4,-1
 100de24:	01400434 	movhi	r5,16
 100de28:	297fffc4 	addi	r5,r5,-1
 100de2c:	3104703a 	and	r2,r6,r4
 100de30:	3946703a 	and	r3,r7,r5
 100de34:	100d883a 	mov	r6,r2
 100de38:	180f883a 	mov	r7,r3
 100de3c:	0201ffc4 	movi	r8,2047
 100de40:	003fa706 	br	100dce0 <__pack_d+0x50>
 100de44:	1109c83a 	sub	r4,r2,r4
 100de48:	00800e04 	movi	r2,56
 100de4c:	11004316 	blt	r2,r4,100df5c <__pack_d+0x2cc>
 100de50:	21fff804 	addi	r7,r4,-32
 100de54:	38004516 	blt	r7,zero,100df6c <__pack_d+0x2dc>
 100de58:	49d8d83a 	srl	r12,r9,r7
 100de5c:	001b883a 	mov	r13,zero
 100de60:	0023883a 	mov	r17,zero
 100de64:	01400044 	movi	r5,1
 100de68:	0025883a 	mov	r18,zero
 100de6c:	38004716 	blt	r7,zero,100df8c <__pack_d+0x2fc>
 100de70:	29d6983a 	sll	r11,r5,r7
 100de74:	0015883a 	mov	r10,zero
 100de78:	00bfffc4 	movi	r2,-1
 100de7c:	5089883a 	add	r4,r10,r2
 100de80:	588b883a 	add	r5,r11,r2
 100de84:	228d803a 	cmpltu	r6,r4,r10
 100de88:	314b883a 	add	r5,r6,r5
 100de8c:	4104703a 	and	r2,r8,r4
 100de90:	4946703a 	and	r3,r9,r5
 100de94:	10c4b03a 	or	r2,r2,r3
 100de98:	10000226 	beq	r2,zero,100dea4 <__pack_d+0x214>
 100de9c:	04400044 	movi	r17,1
 100dea0:	0025883a 	mov	r18,zero
 100dea4:	00803fc4 	movi	r2,255
 100dea8:	644eb03a 	or	r7,r12,r17
 100deac:	3892703a 	and	r9,r7,r2
 100deb0:	00802004 	movi	r2,128
 100deb4:	6c90b03a 	or	r8,r13,r18
 100deb8:	0015883a 	mov	r10,zero
 100debc:	48801626 	beq	r9,r2,100df18 <__pack_d+0x288>
 100dec0:	01001fc4 	movi	r4,127
 100dec4:	3905883a 	add	r2,r7,r4
 100dec8:	11cd803a 	cmpltu	r6,r2,r7
 100decc:	320d883a 	add	r6,r6,r8
 100ded0:	100f883a 	mov	r7,r2
 100ded4:	00840034 	movhi	r2,4096
 100ded8:	10bfffc4 	addi	r2,r2,-1
 100dedc:	3011883a 	mov	r8,r6
 100dee0:	0007883a 	mov	r3,zero
 100dee4:	11801b36 	bltu	r2,r6,100df54 <__pack_d+0x2c4>
 100dee8:	4004963a 	slli	r2,r8,24
 100deec:	3808d23a 	srli	r4,r7,8
 100def0:	400ad23a 	srli	r5,r8,8
 100def4:	1813883a 	mov	r9,r3
 100def8:	1108b03a 	or	r4,r2,r4
 100defc:	00bfffc4 	movi	r2,-1
 100df00:	00c00434 	movhi	r3,16
 100df04:	18ffffc4 	addi	r3,r3,-1
 100df08:	208c703a 	and	r6,r4,r2
 100df0c:	28ce703a 	and	r7,r5,r3
 100df10:	4a01ffcc 	andi	r8,r9,2047
 100df14:	003f7206 	br	100dce0 <__pack_d+0x50>
 100df18:	503fe91e 	bne	r10,zero,100dec0 <__pack_d+0x230>
 100df1c:	01004004 	movi	r4,256
 100df20:	3904703a 	and	r2,r7,r4
 100df24:	0007883a 	mov	r3,zero
 100df28:	10c4b03a 	or	r2,r2,r3
 100df2c:	10000626 	beq	r2,zero,100df48 <__pack_d+0x2b8>
 100df30:	3a45883a 	add	r2,r7,r9
 100df34:	11cd803a 	cmpltu	r6,r2,r7
 100df38:	320d883a 	add	r6,r6,r8
 100df3c:	100f883a 	mov	r7,r2
 100df40:	3011883a 	mov	r8,r6
 100df44:	0007883a 	mov	r3,zero
 100df48:	00840034 	movhi	r2,4096
 100df4c:	10bfffc4 	addi	r2,r2,-1
 100df50:	123fe52e 	bgeu	r2,r8,100dee8 <__pack_d+0x258>
 100df54:	00c00044 	movi	r3,1
 100df58:	003fe306 	br	100dee8 <__pack_d+0x258>
 100df5c:	0009883a 	mov	r4,zero
 100df60:	0013883a 	mov	r9,zero
 100df64:	000b883a 	mov	r5,zero
 100df68:	003fe406 	br	100defc <__pack_d+0x26c>
 100df6c:	4a47883a 	add	r3,r9,r9
 100df70:	008007c4 	movi	r2,31
 100df74:	1105c83a 	sub	r2,r2,r4
 100df78:	1886983a 	sll	r3,r3,r2
 100df7c:	4118d83a 	srl	r12,r8,r4
 100df80:	491ad83a 	srl	r13,r9,r4
 100df84:	1b18b03a 	or	r12,r3,r12
 100df88:	003fb506 	br	100de60 <__pack_d+0x1d0>
 100df8c:	2806d07a 	srli	r3,r5,1
 100df90:	008007c4 	movi	r2,31
 100df94:	1105c83a 	sub	r2,r2,r4
 100df98:	1896d83a 	srl	r11,r3,r2
 100df9c:	2914983a 	sll	r10,r5,r4
 100dfa0:	003fb506 	br	100de78 <__pack_d+0x1e8>

0100dfa4 <__unpack_d>:
 100dfa4:	20c00117 	ldw	r3,4(r4)
 100dfa8:	22400017 	ldw	r9,0(r4)
 100dfac:	00800434 	movhi	r2,16
 100dfb0:	10bfffc4 	addi	r2,r2,-1
 100dfb4:	1808d53a 	srli	r4,r3,20
 100dfb8:	180cd7fa 	srli	r6,r3,31
 100dfbc:	1894703a 	and	r10,r3,r2
 100dfc0:	2201ffcc 	andi	r8,r4,2047
 100dfc4:	281b883a 	mov	r13,r5
 100dfc8:	4817883a 	mov	r11,r9
 100dfcc:	29800115 	stw	r6,4(r5)
 100dfd0:	5019883a 	mov	r12,r10
 100dfd4:	40001e1e 	bne	r8,zero,100e050 <__unpack_d+0xac>
 100dfd8:	4a84b03a 	or	r2,r9,r10
 100dfdc:	10001926 	beq	r2,zero,100e044 <__unpack_d+0xa0>
 100dfe0:	4804d63a 	srli	r2,r9,24
 100dfe4:	500c923a 	slli	r6,r10,8
 100dfe8:	013f0084 	movi	r4,-1022
 100dfec:	00c40034 	movhi	r3,4096
 100dff0:	18ffffc4 	addi	r3,r3,-1
 100dff4:	118cb03a 	or	r6,r2,r6
 100dff8:	008000c4 	movi	r2,3
 100dffc:	480a923a 	slli	r5,r9,8
 100e000:	68800015 	stw	r2,0(r13)
 100e004:	69000215 	stw	r4,8(r13)
 100e008:	19800b36 	bltu	r3,r6,100e038 <__unpack_d+0x94>
 100e00c:	200f883a 	mov	r7,r4
 100e010:	1811883a 	mov	r8,r3
 100e014:	2945883a 	add	r2,r5,r5
 100e018:	1149803a 	cmpltu	r4,r2,r5
 100e01c:	3187883a 	add	r3,r6,r6
 100e020:	20c9883a 	add	r4,r4,r3
 100e024:	100b883a 	mov	r5,r2
 100e028:	200d883a 	mov	r6,r4
 100e02c:	39ffffc4 	addi	r7,r7,-1
 100e030:	413ff82e 	bgeu	r8,r4,100e014 <__unpack_d+0x70>
 100e034:	69c00215 	stw	r7,8(r13)
 100e038:	69800415 	stw	r6,16(r13)
 100e03c:	69400315 	stw	r5,12(r13)
 100e040:	f800283a 	ret
 100e044:	00800084 	movi	r2,2
 100e048:	28800015 	stw	r2,0(r5)
 100e04c:	f800283a 	ret
 100e050:	0081ffc4 	movi	r2,2047
 100e054:	40800f26 	beq	r8,r2,100e094 <__unpack_d+0xf0>
 100e058:	480cd63a 	srli	r6,r9,24
 100e05c:	5006923a 	slli	r3,r10,8
 100e060:	4804923a 	slli	r2,r9,8
 100e064:	0009883a 	mov	r4,zero
 100e068:	30c6b03a 	or	r3,r6,r3
 100e06c:	01440034 	movhi	r5,4096
 100e070:	110cb03a 	or	r6,r2,r4
 100e074:	423f0044 	addi	r8,r8,-1023
 100e078:	194eb03a 	or	r7,r3,r5
 100e07c:	008000c4 	movi	r2,3
 100e080:	69c00415 	stw	r7,16(r13)
 100e084:	6a000215 	stw	r8,8(r13)
 100e088:	68800015 	stw	r2,0(r13)
 100e08c:	69800315 	stw	r6,12(r13)
 100e090:	f800283a 	ret
 100e094:	4a84b03a 	or	r2,r9,r10
 100e098:	1000031e 	bne	r2,zero,100e0a8 <__unpack_d+0x104>
 100e09c:	00800104 	movi	r2,4
 100e0a0:	28800015 	stw	r2,0(r5)
 100e0a4:	f800283a 	ret
 100e0a8:	0009883a 	mov	r4,zero
 100e0ac:	01400234 	movhi	r5,8
 100e0b0:	4904703a 	and	r2,r9,r4
 100e0b4:	5146703a 	and	r3,r10,r5
 100e0b8:	10c4b03a 	or	r2,r2,r3
 100e0bc:	10000526 	beq	r2,zero,100e0d4 <__unpack_d+0x130>
 100e0c0:	00800044 	movi	r2,1
 100e0c4:	68800015 	stw	r2,0(r13)
 100e0c8:	6b000415 	stw	r12,16(r13)
 100e0cc:	6ac00315 	stw	r11,12(r13)
 100e0d0:	f800283a 	ret
 100e0d4:	68000015 	stw	zero,0(r13)
 100e0d8:	003ffb06 	br	100e0c8 <__unpack_d+0x124>

0100e0dc <__fpcmp_parts_d>:
 100e0dc:	21800017 	ldw	r6,0(r4)
 100e0e0:	00c00044 	movi	r3,1
 100e0e4:	19800a2e 	bgeu	r3,r6,100e110 <__fpcmp_parts_d+0x34>
 100e0e8:	28800017 	ldw	r2,0(r5)
 100e0ec:	1880082e 	bgeu	r3,r2,100e110 <__fpcmp_parts_d+0x34>
 100e0f0:	00c00104 	movi	r3,4
 100e0f4:	30c02626 	beq	r6,r3,100e190 <__fpcmp_parts_d+0xb4>
 100e0f8:	10c02226 	beq	r2,r3,100e184 <__fpcmp_parts_d+0xa8>
 100e0fc:	00c00084 	movi	r3,2
 100e100:	30c00526 	beq	r6,r3,100e118 <__fpcmp_parts_d+0x3c>
 100e104:	10c0071e 	bne	r2,r3,100e124 <__fpcmp_parts_d+0x48>
 100e108:	20800117 	ldw	r2,4(r4)
 100e10c:	1000091e 	bne	r2,zero,100e134 <__fpcmp_parts_d+0x58>
 100e110:	00800044 	movi	r2,1
 100e114:	f800283a 	ret
 100e118:	10c01a1e 	bne	r2,r3,100e184 <__fpcmp_parts_d+0xa8>
 100e11c:	0005883a 	mov	r2,zero
 100e120:	f800283a 	ret
 100e124:	22000117 	ldw	r8,4(r4)
 100e128:	28800117 	ldw	r2,4(r5)
 100e12c:	40800326 	beq	r8,r2,100e13c <__fpcmp_parts_d+0x60>
 100e130:	403ff726 	beq	r8,zero,100e110 <__fpcmp_parts_d+0x34>
 100e134:	00bfffc4 	movi	r2,-1
 100e138:	f800283a 	ret
 100e13c:	20c00217 	ldw	r3,8(r4)
 100e140:	28800217 	ldw	r2,8(r5)
 100e144:	10fffa16 	blt	r2,r3,100e130 <__fpcmp_parts_d+0x54>
 100e148:	18800916 	blt	r3,r2,100e170 <__fpcmp_parts_d+0x94>
 100e14c:	21c00417 	ldw	r7,16(r4)
 100e150:	28c00417 	ldw	r3,16(r5)
 100e154:	21800317 	ldw	r6,12(r4)
 100e158:	28800317 	ldw	r2,12(r5)
 100e15c:	19fff436 	bltu	r3,r7,100e130 <__fpcmp_parts_d+0x54>
 100e160:	38c00526 	beq	r7,r3,100e178 <__fpcmp_parts_d+0x9c>
 100e164:	38c00236 	bltu	r7,r3,100e170 <__fpcmp_parts_d+0x94>
 100e168:	19ffec1e 	bne	r3,r7,100e11c <__fpcmp_parts_d+0x40>
 100e16c:	30bfeb2e 	bgeu	r6,r2,100e11c <__fpcmp_parts_d+0x40>
 100e170:	403fe71e 	bne	r8,zero,100e110 <__fpcmp_parts_d+0x34>
 100e174:	003fef06 	br	100e134 <__fpcmp_parts_d+0x58>
 100e178:	11bffa2e 	bgeu	r2,r6,100e164 <__fpcmp_parts_d+0x88>
 100e17c:	403fe426 	beq	r8,zero,100e110 <__fpcmp_parts_d+0x34>
 100e180:	003fec06 	br	100e134 <__fpcmp_parts_d+0x58>
 100e184:	28800117 	ldw	r2,4(r5)
 100e188:	103fe11e 	bne	r2,zero,100e110 <__fpcmp_parts_d+0x34>
 100e18c:	003fe906 	br	100e134 <__fpcmp_parts_d+0x58>
 100e190:	11bfdd1e 	bne	r2,r6,100e108 <__fpcmp_parts_d+0x2c>
 100e194:	28c00117 	ldw	r3,4(r5)
 100e198:	20800117 	ldw	r2,4(r4)
 100e19c:	1885c83a 	sub	r2,r3,r2
 100e1a0:	f800283a 	ret

0100e1a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100e1a4:	defff804 	addi	sp,sp,-32
 100e1a8:	dfc00715 	stw	ra,28(sp)
 100e1ac:	df000615 	stw	fp,24(sp)
 100e1b0:	df000604 	addi	fp,sp,24
 100e1b4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100e1b8:	e0bffc17 	ldw	r2,-16(fp)
 100e1bc:	1004803a 	cmplt	r2,r2,zero
 100e1c0:	1000091e 	bne	r2,zero,100e1e8 <close+0x44>
 100e1c4:	e13ffc17 	ldw	r4,-16(fp)
 100e1c8:	01400304 	movi	r5,12
 100e1cc:	1002f0c0 	call	1002f0c <__mulsi3>
 100e1d0:	1007883a 	mov	r3,r2
 100e1d4:	00804074 	movhi	r2,257
 100e1d8:	1089ba04 	addi	r2,r2,9960
 100e1dc:	1887883a 	add	r3,r3,r2
 100e1e0:	e0ffff15 	stw	r3,-4(fp)
 100e1e4:	00000106 	br	100e1ec <close+0x48>
 100e1e8:	e03fff15 	stw	zero,-4(fp)
 100e1ec:	e0bfff17 	ldw	r2,-4(fp)
 100e1f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100e1f4:	e0bffb17 	ldw	r2,-20(fp)
 100e1f8:	1005003a 	cmpeq	r2,r2,zero
 100e1fc:	10001d1e 	bne	r2,zero,100e274 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100e200:	e0bffb17 	ldw	r2,-20(fp)
 100e204:	10800017 	ldw	r2,0(r2)
 100e208:	10800417 	ldw	r2,16(r2)
 100e20c:	1005003a 	cmpeq	r2,r2,zero
 100e210:	1000071e 	bne	r2,zero,100e230 <close+0x8c>
 100e214:	e0bffb17 	ldw	r2,-20(fp)
 100e218:	10800017 	ldw	r2,0(r2)
 100e21c:	10800417 	ldw	r2,16(r2)
 100e220:	e13ffb17 	ldw	r4,-20(fp)
 100e224:	103ee83a 	callr	r2
 100e228:	e0bffe15 	stw	r2,-8(fp)
 100e22c:	00000106 	br	100e234 <close+0x90>
 100e230:	e03ffe15 	stw	zero,-8(fp)
 100e234:	e0bffe17 	ldw	r2,-8(fp)
 100e238:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100e23c:	e13ffc17 	ldw	r4,-16(fp)
 100e240:	100ef000 	call	100ef00 <alt_release_fd>
    if (rval < 0)
 100e244:	e0bffa17 	ldw	r2,-24(fp)
 100e248:	1004403a 	cmpge	r2,r2,zero
 100e24c:	1000071e 	bne	r2,zero,100e26c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100e250:	100e2a40 	call	100e2a4 <alt_get_errno>
 100e254:	e0fffa17 	ldw	r3,-24(fp)
 100e258:	00c7c83a 	sub	r3,zero,r3
 100e25c:	10c00015 	stw	r3,0(r2)
      return -1;
 100e260:	00bfffc4 	movi	r2,-1
 100e264:	e0bffd15 	stw	r2,-12(fp)
 100e268:	00000806 	br	100e28c <close+0xe8>
    }
    return 0;
 100e26c:	e03ffd15 	stw	zero,-12(fp)
 100e270:	00000606 	br	100e28c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e274:	100e2a40 	call	100e2a4 <alt_get_errno>
 100e278:	1007883a 	mov	r3,r2
 100e27c:	00801444 	movi	r2,81
 100e280:	18800015 	stw	r2,0(r3)
    return -1;
 100e284:	00bfffc4 	movi	r2,-1
 100e288:	e0bffd15 	stw	r2,-12(fp)
 100e28c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100e290:	e037883a 	mov	sp,fp
 100e294:	dfc00117 	ldw	ra,4(sp)
 100e298:	df000017 	ldw	fp,0(sp)
 100e29c:	dec00204 	addi	sp,sp,8
 100e2a0:	f800283a 	ret

0100e2a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e2a4:	defffd04 	addi	sp,sp,-12
 100e2a8:	dfc00215 	stw	ra,8(sp)
 100e2ac:	df000115 	stw	fp,4(sp)
 100e2b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e2b4:	00804074 	movhi	r2,257
 100e2b8:	108e7504 	addi	r2,r2,14804
 100e2bc:	10800017 	ldw	r2,0(r2)
 100e2c0:	1005003a 	cmpeq	r2,r2,zero
 100e2c4:	1000061e 	bne	r2,zero,100e2e0 <alt_get_errno+0x3c>
 100e2c8:	00804074 	movhi	r2,257
 100e2cc:	108e7504 	addi	r2,r2,14804
 100e2d0:	10800017 	ldw	r2,0(r2)
 100e2d4:	103ee83a 	callr	r2
 100e2d8:	e0bfff15 	stw	r2,-4(fp)
 100e2dc:	00000306 	br	100e2ec <alt_get_errno+0x48>
 100e2e0:	00804074 	movhi	r2,257
 100e2e4:	10955304 	addi	r2,r2,21836
 100e2e8:	e0bfff15 	stw	r2,-4(fp)
 100e2ec:	e0bfff17 	ldw	r2,-4(fp)
}
 100e2f0:	e037883a 	mov	sp,fp
 100e2f4:	dfc00117 	ldw	ra,4(sp)
 100e2f8:	df000017 	ldw	fp,0(sp)
 100e2fc:	dec00204 	addi	sp,sp,8
 100e300:	f800283a 	ret

0100e304 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100e304:	defffc04 	addi	sp,sp,-16
 100e308:	df000315 	stw	fp,12(sp)
 100e30c:	df000304 	addi	fp,sp,12
 100e310:	e13ffd15 	stw	r4,-12(fp)
 100e314:	e17ffe15 	stw	r5,-8(fp)
 100e318:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100e31c:	e0bfff17 	ldw	r2,-4(fp)
}
 100e320:	e037883a 	mov	sp,fp
 100e324:	df000017 	ldw	fp,0(sp)
 100e328:	dec00104 	addi	sp,sp,4
 100e32c:	f800283a 	ret

0100e330 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100e330:	defffd04 	addi	sp,sp,-12
 100e334:	df000215 	stw	fp,8(sp)
 100e338:	df000204 	addi	fp,sp,8
 100e33c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100e340:	e0bfff17 	ldw	r2,-4(fp)
 100e344:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100e348:	e0bffe17 	ldw	r2,-8(fp)
 100e34c:	1005003a 	cmpeq	r2,r2,zero
 100e350:	1000021e 	bne	r2,zero,100e35c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100e354:	002af070 	cmpltui	zero,zero,43969
 100e358:	00000106 	br	100e360 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100e35c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100e360:	e037883a 	mov	sp,fp
 100e364:	df000017 	ldw	fp,0(sp)
 100e368:	dec00104 	addi	sp,sp,4
 100e36c:	f800283a 	ret

0100e370 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100e370:	defffd04 	addi	sp,sp,-12
 100e374:	dfc00215 	stw	ra,8(sp)
 100e378:	df000115 	stw	fp,4(sp)
 100e37c:	df000104 	addi	fp,sp,4
 100e380:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100e384:	e13fff17 	ldw	r4,-4(fp)
 100e388:	100e3300 	call	100e330 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100e38c:	003fff06 	br	100e38c <_exit+0x1c>

0100e390 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100e390:	defff904 	addi	sp,sp,-28
 100e394:	dfc00615 	stw	ra,24(sp)
 100e398:	df000515 	stw	fp,20(sp)
 100e39c:	df000504 	addi	fp,sp,20
 100e3a0:	e13ffc15 	stw	r4,-16(fp)
 100e3a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e3a8:	e0bffc17 	ldw	r2,-16(fp)
 100e3ac:	1004803a 	cmplt	r2,r2,zero
 100e3b0:	1000091e 	bne	r2,zero,100e3d8 <fstat+0x48>
 100e3b4:	e13ffc17 	ldw	r4,-16(fp)
 100e3b8:	01400304 	movi	r5,12
 100e3bc:	1002f0c0 	call	1002f0c <__mulsi3>
 100e3c0:	1007883a 	mov	r3,r2
 100e3c4:	00804074 	movhi	r2,257
 100e3c8:	1089ba04 	addi	r2,r2,9960
 100e3cc:	1887883a 	add	r3,r3,r2
 100e3d0:	e0ffff15 	stw	r3,-4(fp)
 100e3d4:	00000106 	br	100e3dc <fstat+0x4c>
 100e3d8:	e03fff15 	stw	zero,-4(fp)
 100e3dc:	e0bfff17 	ldw	r2,-4(fp)
 100e3e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100e3e4:	e0bffb17 	ldw	r2,-20(fp)
 100e3e8:	1005003a 	cmpeq	r2,r2,zero
 100e3ec:	1000121e 	bne	r2,zero,100e438 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100e3f0:	e0bffb17 	ldw	r2,-20(fp)
 100e3f4:	10800017 	ldw	r2,0(r2)
 100e3f8:	10800817 	ldw	r2,32(r2)
 100e3fc:	1005003a 	cmpeq	r2,r2,zero
 100e400:	1000081e 	bne	r2,zero,100e424 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100e404:	e0bffb17 	ldw	r2,-20(fp)
 100e408:	10800017 	ldw	r2,0(r2)
 100e40c:	10800817 	ldw	r2,32(r2)
 100e410:	e13ffb17 	ldw	r4,-20(fp)
 100e414:	e17ffd17 	ldw	r5,-12(fp)
 100e418:	103ee83a 	callr	r2
 100e41c:	e0bffe15 	stw	r2,-8(fp)
 100e420:	00000b06 	br	100e450 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100e424:	e0fffd17 	ldw	r3,-12(fp)
 100e428:	00880004 	movi	r2,8192
 100e42c:	18800115 	stw	r2,4(r3)
      return 0;
 100e430:	e03ffe15 	stw	zero,-8(fp)
 100e434:	00000606 	br	100e450 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e438:	100e4680 	call	100e468 <alt_get_errno>
 100e43c:	1007883a 	mov	r3,r2
 100e440:	00801444 	movi	r2,81
 100e444:	18800015 	stw	r2,0(r3)
    return -1;
 100e448:	00bfffc4 	movi	r2,-1
 100e44c:	e0bffe15 	stw	r2,-8(fp)
 100e450:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100e454:	e037883a 	mov	sp,fp
 100e458:	dfc00117 	ldw	ra,4(sp)
 100e45c:	df000017 	ldw	fp,0(sp)
 100e460:	dec00204 	addi	sp,sp,8
 100e464:	f800283a 	ret

0100e468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e468:	defffd04 	addi	sp,sp,-12
 100e46c:	dfc00215 	stw	ra,8(sp)
 100e470:	df000115 	stw	fp,4(sp)
 100e474:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e478:	00804074 	movhi	r2,257
 100e47c:	108e7504 	addi	r2,r2,14804
 100e480:	10800017 	ldw	r2,0(r2)
 100e484:	1005003a 	cmpeq	r2,r2,zero
 100e488:	1000061e 	bne	r2,zero,100e4a4 <alt_get_errno+0x3c>
 100e48c:	00804074 	movhi	r2,257
 100e490:	108e7504 	addi	r2,r2,14804
 100e494:	10800017 	ldw	r2,0(r2)
 100e498:	103ee83a 	callr	r2
 100e49c:	e0bfff15 	stw	r2,-4(fp)
 100e4a0:	00000306 	br	100e4b0 <alt_get_errno+0x48>
 100e4a4:	00804074 	movhi	r2,257
 100e4a8:	10955304 	addi	r2,r2,21836
 100e4ac:	e0bfff15 	stw	r2,-4(fp)
 100e4b0:	e0bfff17 	ldw	r2,-4(fp)
}
 100e4b4:	e037883a 	mov	sp,fp
 100e4b8:	dfc00117 	ldw	ra,4(sp)
 100e4bc:	df000017 	ldw	fp,0(sp)
 100e4c0:	dec00204 	addi	sp,sp,8
 100e4c4:	f800283a 	ret

0100e4c8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 100e4c8:	deffff04 	addi	sp,sp,-4
 100e4cc:	df000015 	stw	fp,0(sp)
 100e4d0:	d839883a 	mov	fp,sp
  return 0;
 100e4d4:	0005883a 	mov	r2,zero
}
 100e4d8:	e037883a 	mov	sp,fp
 100e4dc:	df000017 	ldw	fp,0(sp)
 100e4e0:	dec00104 	addi	sp,sp,4
 100e4e4:	f800283a 	ret

0100e4e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100e4e8:	deffeb04 	addi	sp,sp,-84
 100e4ec:	dfc01415 	stw	ra,80(sp)
 100e4f0:	df001315 	stw	fp,76(sp)
 100e4f4:	df001304 	addi	fp,sp,76
 100e4f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e4fc:	e0bffd17 	ldw	r2,-12(fp)
 100e500:	1004803a 	cmplt	r2,r2,zero
 100e504:	1000091e 	bne	r2,zero,100e52c <isatty+0x44>
 100e508:	e13ffd17 	ldw	r4,-12(fp)
 100e50c:	01400304 	movi	r5,12
 100e510:	1002f0c0 	call	1002f0c <__mulsi3>
 100e514:	1007883a 	mov	r3,r2
 100e518:	00804074 	movhi	r2,257
 100e51c:	1089ba04 	addi	r2,r2,9960
 100e520:	1887883a 	add	r3,r3,r2
 100e524:	e0ffff15 	stw	r3,-4(fp)
 100e528:	00000106 	br	100e530 <isatty+0x48>
 100e52c:	e03fff15 	stw	zero,-4(fp)
 100e530:	e0bfff17 	ldw	r2,-4(fp)
 100e534:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100e538:	e0bfed17 	ldw	r2,-76(fp)
 100e53c:	1005003a 	cmpeq	r2,r2,zero
 100e540:	10000f1e 	bne	r2,zero,100e580 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100e544:	e0bfed17 	ldw	r2,-76(fp)
 100e548:	10800017 	ldw	r2,0(r2)
 100e54c:	10800817 	ldw	r2,32(r2)
 100e550:	1004c03a 	cmpne	r2,r2,zero
 100e554:	1000031e 	bne	r2,zero,100e564 <isatty+0x7c>
    {
      return 1;
 100e558:	00800044 	movi	r2,1
 100e55c:	e0bffe15 	stw	r2,-8(fp)
 100e560:	00000c06 	br	100e594 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100e564:	e17fee04 	addi	r5,fp,-72
 100e568:	e13ffd17 	ldw	r4,-12(fp)
 100e56c:	100e3900 	call	100e390 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100e570:	e0bfef17 	ldw	r2,-68(fp)
 100e574:	10880020 	cmpeqi	r2,r2,8192
 100e578:	e0bffe15 	stw	r2,-8(fp)
 100e57c:	00000506 	br	100e594 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e580:	100e5ac0 	call	100e5ac <alt_get_errno>
 100e584:	1007883a 	mov	r3,r2
 100e588:	00801444 	movi	r2,81
 100e58c:	18800015 	stw	r2,0(r3)
    return 0;
 100e590:	e03ffe15 	stw	zero,-8(fp)
 100e594:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100e598:	e037883a 	mov	sp,fp
 100e59c:	dfc00117 	ldw	ra,4(sp)
 100e5a0:	df000017 	ldw	fp,0(sp)
 100e5a4:	dec00204 	addi	sp,sp,8
 100e5a8:	f800283a 	ret

0100e5ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e5ac:	defffd04 	addi	sp,sp,-12
 100e5b0:	dfc00215 	stw	ra,8(sp)
 100e5b4:	df000115 	stw	fp,4(sp)
 100e5b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e5bc:	00804074 	movhi	r2,257
 100e5c0:	108e7504 	addi	r2,r2,14804
 100e5c4:	10800017 	ldw	r2,0(r2)
 100e5c8:	1005003a 	cmpeq	r2,r2,zero
 100e5cc:	1000061e 	bne	r2,zero,100e5e8 <alt_get_errno+0x3c>
 100e5d0:	00804074 	movhi	r2,257
 100e5d4:	108e7504 	addi	r2,r2,14804
 100e5d8:	10800017 	ldw	r2,0(r2)
 100e5dc:	103ee83a 	callr	r2
 100e5e0:	e0bfff15 	stw	r2,-4(fp)
 100e5e4:	00000306 	br	100e5f4 <alt_get_errno+0x48>
 100e5e8:	00804074 	movhi	r2,257
 100e5ec:	10955304 	addi	r2,r2,21836
 100e5f0:	e0bfff15 	stw	r2,-4(fp)
 100e5f4:	e0bfff17 	ldw	r2,-4(fp)
}
 100e5f8:	e037883a 	mov	sp,fp
 100e5fc:	dfc00117 	ldw	ra,4(sp)
 100e600:	df000017 	ldw	fp,0(sp)
 100e604:	dec00204 	addi	sp,sp,8
 100e608:	f800283a 	ret

0100e60c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 100e60c:	defffa04 	addi	sp,sp,-24
 100e610:	dfc00515 	stw	ra,20(sp)
 100e614:	df000415 	stw	fp,16(sp)
 100e618:	df000404 	addi	fp,sp,16
 100e61c:	e13ffd15 	stw	r4,-12(fp)
 100e620:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 100e624:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 100e628:	e0bffd17 	ldw	r2,-12(fp)
 100e62c:	10800048 	cmpgei	r2,r2,1
 100e630:	1000301e 	bne	r2,zero,100e6f4 <kill+0xe8>
  {
    switch (sig)
 100e634:	e0bffe17 	ldw	r2,-8(fp)
 100e638:	10800828 	cmpgeui	r2,r2,32
 100e63c:	10002a1e 	bne	r2,zero,100e6e8 <kill+0xdc>
 100e640:	e0bffe17 	ldw	r2,-8(fp)
 100e644:	1085883a 	add	r2,r2,r2
 100e648:	1087883a 	add	r3,r2,r2
 100e64c:	00804074 	movhi	r2,257
 100e650:	10b99804 	addi	r2,r2,-6560
 100e654:	1885883a 	add	r2,r3,r2
 100e658:	10800017 	ldw	r2,0(r2)
 100e65c:	1000683a 	jmp	r2
 100e660:	0100e708 	cmpgei	r4,zero,924
 100e664:	0100e6e8 	cmpgeui	r4,zero,923
 100e668:	0100e6e8 	cmpgeui	r4,zero,923
 100e66c:	0100e6e0 	cmpeqi	r4,zero,923
 100e670:	0100e6e0 	cmpeqi	r4,zero,923
 100e674:	0100e6e0 	cmpeqi	r4,zero,923
 100e678:	0100e6e0 	cmpeqi	r4,zero,923
 100e67c:	0100e6e8 	cmpgeui	r4,zero,923
 100e680:	0100e6e0 	cmpeqi	r4,zero,923
 100e684:	0100e6e0 	cmpeqi	r4,zero,923
 100e688:	0100e6e0 	cmpeqi	r4,zero,923
 100e68c:	0100e6e0 	cmpeqi	r4,zero,923
 100e690:	0100e6e0 	cmpeqi	r4,zero,923
 100e694:	0100e6e0 	cmpeqi	r4,zero,923
 100e698:	0100e6e0 	cmpeqi	r4,zero,923
 100e69c:	0100e6e0 	cmpeqi	r4,zero,923
 100e6a0:	0100e708 	cmpgei	r4,zero,924
 100e6a4:	0100e6e8 	cmpgeui	r4,zero,923
 100e6a8:	0100e6e8 	cmpgeui	r4,zero,923
 100e6ac:	0100e6e8 	cmpgeui	r4,zero,923
 100e6b0:	0100e708 	cmpgei	r4,zero,924
 100e6b4:	0100e6e8 	cmpgeui	r4,zero,923
 100e6b8:	0100e6e8 	cmpgeui	r4,zero,923
 100e6bc:	0100e6e0 	cmpeqi	r4,zero,923
 100e6c0:	0100e6e0 	cmpeqi	r4,zero,923
 100e6c4:	0100e6e0 	cmpeqi	r4,zero,923
 100e6c8:	0100e6e0 	cmpeqi	r4,zero,923
 100e6cc:	0100e6e0 	cmpeqi	r4,zero,923
 100e6d0:	0100e6e8 	cmpgeui	r4,zero,923
 100e6d4:	0100e6e8 	cmpgeui	r4,zero,923
 100e6d8:	0100e6e0 	cmpeqi	r4,zero,923
 100e6dc:	0100e6e0 	cmpeqi	r4,zero,923
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 100e6e0:	0009883a 	mov	r4,zero
 100e6e4:	100e3700 	call	100e370 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 100e6e8:	00800584 	movi	r2,22
 100e6ec:	e0bffc15 	stw	r2,-16(fp)
 100e6f0:	00000506 	br	100e708 <kill+0xfc>
    }
  }

  else if (pid > 0)
 100e6f4:	e0bffd17 	ldw	r2,-12(fp)
 100e6f8:	10800050 	cmplti	r2,r2,1
 100e6fc:	1000021e 	bne	r2,zero,100e708 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 100e700:	008000c4 	movi	r2,3
 100e704:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 100e708:	e0bffc17 	ldw	r2,-16(fp)
 100e70c:	1005003a 	cmpeq	r2,r2,zero
 100e710:	1000071e 	bne	r2,zero,100e730 <kill+0x124>
  {
    ALT_ERRNO = status;
 100e714:	100e74c0 	call	100e74c <alt_get_errno>
 100e718:	1007883a 	mov	r3,r2
 100e71c:	e0bffc17 	ldw	r2,-16(fp)
 100e720:	18800015 	stw	r2,0(r3)
    return -1;
 100e724:	00bfffc4 	movi	r2,-1
 100e728:	e0bfff15 	stw	r2,-4(fp)
 100e72c:	00000106 	br	100e734 <kill+0x128>
  }

  return 0;
 100e730:	e03fff15 	stw	zero,-4(fp)
 100e734:	e0bfff17 	ldw	r2,-4(fp)
}
 100e738:	e037883a 	mov	sp,fp
 100e73c:	dfc00117 	ldw	ra,4(sp)
 100e740:	df000017 	ldw	fp,0(sp)
 100e744:	dec00204 	addi	sp,sp,8
 100e748:	f800283a 	ret

0100e74c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e74c:	defffd04 	addi	sp,sp,-12
 100e750:	dfc00215 	stw	ra,8(sp)
 100e754:	df000115 	stw	fp,4(sp)
 100e758:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e75c:	00804074 	movhi	r2,257
 100e760:	108e7504 	addi	r2,r2,14804
 100e764:	10800017 	ldw	r2,0(r2)
 100e768:	1005003a 	cmpeq	r2,r2,zero
 100e76c:	1000061e 	bne	r2,zero,100e788 <alt_get_errno+0x3c>
 100e770:	00804074 	movhi	r2,257
 100e774:	108e7504 	addi	r2,r2,14804
 100e778:	10800017 	ldw	r2,0(r2)
 100e77c:	103ee83a 	callr	r2
 100e780:	e0bfff15 	stw	r2,-4(fp)
 100e784:	00000306 	br	100e794 <alt_get_errno+0x48>
 100e788:	00804074 	movhi	r2,257
 100e78c:	10955304 	addi	r2,r2,21836
 100e790:	e0bfff15 	stw	r2,-4(fp)
 100e794:	e0bfff17 	ldw	r2,-4(fp)
}
 100e798:	e037883a 	mov	sp,fp
 100e79c:	dfc00117 	ldw	ra,4(sp)
 100e7a0:	df000017 	ldw	fp,0(sp)
 100e7a4:	dec00204 	addi	sp,sp,8
 100e7a8:	f800283a 	ret

0100e7ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100e7ac:	defffe04 	addi	sp,sp,-8
 100e7b0:	dfc00115 	stw	ra,4(sp)
 100e7b4:	df000015 	stw	fp,0(sp)
 100e7b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100e7bc:	01004074 	movhi	r4,257
 100e7c0:	210e7a04 	addi	r4,r4,14824
 100e7c4:	01404074 	movhi	r5,257
 100e7c8:	2947ab04 	addi	r5,r5,7852
 100e7cc:	01804074 	movhi	r6,257
 100e7d0:	318e7a04 	addi	r6,r6,14824
 100e7d4:	100e82c0 	call	100e82c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100e7d8:	01004034 	movhi	r4,256
 100e7dc:	21000804 	addi	r4,r4,32
 100e7e0:	01404034 	movhi	r5,256
 100e7e4:	29400804 	addi	r5,r5,32
 100e7e8:	01804034 	movhi	r6,256
 100e7ec:	31806d04 	addi	r6,r6,436
 100e7f0:	100e82c0 	call	100e82c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100e7f4:	01004074 	movhi	r4,257
 100e7f8:	2105ca04 	addi	r4,r4,5928
 100e7fc:	01404074 	movhi	r5,257
 100e800:	2945ca04 	addi	r5,r5,5928
 100e804:	01804074 	movhi	r6,257
 100e808:	3187ab04 	addi	r6,r6,7852
 100e80c:	100e82c0 	call	100e82c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100e810:	101087c0 	call	101087c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100e814:	1010cf80 	call	1010cf8 <alt_icache_flush_all>
}
 100e818:	e037883a 	mov	sp,fp
 100e81c:	dfc00117 	ldw	ra,4(sp)
 100e820:	df000017 	ldw	fp,0(sp)
 100e824:	dec00204 	addi	sp,sp,8
 100e828:	f800283a 	ret

0100e82c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100e82c:	defffc04 	addi	sp,sp,-16
 100e830:	df000315 	stw	fp,12(sp)
 100e834:	df000304 	addi	fp,sp,12
 100e838:	e13ffd15 	stw	r4,-12(fp)
 100e83c:	e17ffe15 	stw	r5,-8(fp)
 100e840:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100e844:	e0fffe17 	ldw	r3,-8(fp)
 100e848:	e0bffd17 	ldw	r2,-12(fp)
 100e84c:	18800e26 	beq	r3,r2,100e888 <alt_load_section+0x5c>
  {
    while( to != end )
 100e850:	00000a06 	br	100e87c <alt_load_section+0x50>
    {
      *to++ = *from++;
 100e854:	e0bffd17 	ldw	r2,-12(fp)
 100e858:	10c00017 	ldw	r3,0(r2)
 100e85c:	e0bffe17 	ldw	r2,-8(fp)
 100e860:	10c00015 	stw	r3,0(r2)
 100e864:	e0bffe17 	ldw	r2,-8(fp)
 100e868:	10800104 	addi	r2,r2,4
 100e86c:	e0bffe15 	stw	r2,-8(fp)
 100e870:	e0bffd17 	ldw	r2,-12(fp)
 100e874:	10800104 	addi	r2,r2,4
 100e878:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100e87c:	e0fffe17 	ldw	r3,-8(fp)
 100e880:	e0bfff17 	ldw	r2,-4(fp)
 100e884:	18bff31e 	bne	r3,r2,100e854 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100e888:	e037883a 	mov	sp,fp
 100e88c:	df000017 	ldw	fp,0(sp)
 100e890:	dec00104 	addi	sp,sp,4
 100e894:	f800283a 	ret

0100e898 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100e898:	defff804 	addi	sp,sp,-32
 100e89c:	dfc00715 	stw	ra,28(sp)
 100e8a0:	df000615 	stw	fp,24(sp)
 100e8a4:	df000604 	addi	fp,sp,24
 100e8a8:	e13ffc15 	stw	r4,-16(fp)
 100e8ac:	e17ffd15 	stw	r5,-12(fp)
 100e8b0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100e8b4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e8b8:	e0bffc17 	ldw	r2,-16(fp)
 100e8bc:	1004803a 	cmplt	r2,r2,zero
 100e8c0:	1000091e 	bne	r2,zero,100e8e8 <lseek+0x50>
 100e8c4:	e13ffc17 	ldw	r4,-16(fp)
 100e8c8:	01400304 	movi	r5,12
 100e8cc:	1002f0c0 	call	1002f0c <__mulsi3>
 100e8d0:	1007883a 	mov	r3,r2
 100e8d4:	00804074 	movhi	r2,257
 100e8d8:	1089ba04 	addi	r2,r2,9960
 100e8dc:	1887883a 	add	r3,r3,r2
 100e8e0:	e0ffff15 	stw	r3,-4(fp)
 100e8e4:	00000106 	br	100e8ec <lseek+0x54>
 100e8e8:	e03fff15 	stw	zero,-4(fp)
 100e8ec:	e0bfff17 	ldw	r2,-4(fp)
 100e8f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100e8f4:	e0bffb17 	ldw	r2,-20(fp)
 100e8f8:	1005003a 	cmpeq	r2,r2,zero
 100e8fc:	1000111e 	bne	r2,zero,100e944 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100e900:	e0bffb17 	ldw	r2,-20(fp)
 100e904:	10800017 	ldw	r2,0(r2)
 100e908:	10800717 	ldw	r2,28(r2)
 100e90c:	1005003a 	cmpeq	r2,r2,zero
 100e910:	1000091e 	bne	r2,zero,100e938 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100e914:	e0bffb17 	ldw	r2,-20(fp)
 100e918:	10800017 	ldw	r2,0(r2)
 100e91c:	10800717 	ldw	r2,28(r2)
 100e920:	e13ffb17 	ldw	r4,-20(fp)
 100e924:	e17ffd17 	ldw	r5,-12(fp)
 100e928:	e1bffe17 	ldw	r6,-8(fp)
 100e92c:	103ee83a 	callr	r2
 100e930:	e0bffa15 	stw	r2,-24(fp)
 100e934:	00000506 	br	100e94c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100e938:	00bfde84 	movi	r2,-134
 100e93c:	e0bffa15 	stw	r2,-24(fp)
 100e940:	00000206 	br	100e94c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100e944:	00bfebc4 	movi	r2,-81
 100e948:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100e94c:	e0bffa17 	ldw	r2,-24(fp)
 100e950:	1004403a 	cmpge	r2,r2,zero
 100e954:	1000071e 	bne	r2,zero,100e974 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100e958:	100e98c0 	call	100e98c <alt_get_errno>
 100e95c:	1007883a 	mov	r3,r2
 100e960:	e0bffa17 	ldw	r2,-24(fp)
 100e964:	0085c83a 	sub	r2,zero,r2
 100e968:	18800015 	stw	r2,0(r3)
    rc = -1;
 100e96c:	00bfffc4 	movi	r2,-1
 100e970:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100e974:	e0bffa17 	ldw	r2,-24(fp)
}
 100e978:	e037883a 	mov	sp,fp
 100e97c:	dfc00117 	ldw	ra,4(sp)
 100e980:	df000017 	ldw	fp,0(sp)
 100e984:	dec00204 	addi	sp,sp,8
 100e988:	f800283a 	ret

0100e98c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e98c:	defffd04 	addi	sp,sp,-12
 100e990:	dfc00215 	stw	ra,8(sp)
 100e994:	df000115 	stw	fp,4(sp)
 100e998:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100e99c:	00804074 	movhi	r2,257
 100e9a0:	108e7504 	addi	r2,r2,14804
 100e9a4:	10800017 	ldw	r2,0(r2)
 100e9a8:	1005003a 	cmpeq	r2,r2,zero
 100e9ac:	1000061e 	bne	r2,zero,100e9c8 <alt_get_errno+0x3c>
 100e9b0:	00804074 	movhi	r2,257
 100e9b4:	108e7504 	addi	r2,r2,14804
 100e9b8:	10800017 	ldw	r2,0(r2)
 100e9bc:	103ee83a 	callr	r2
 100e9c0:	e0bfff15 	stw	r2,-4(fp)
 100e9c4:	00000306 	br	100e9d4 <alt_get_errno+0x48>
 100e9c8:	00804074 	movhi	r2,257
 100e9cc:	10955304 	addi	r2,r2,21836
 100e9d0:	e0bfff15 	stw	r2,-4(fp)
 100e9d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100e9d8:	e037883a 	mov	sp,fp
 100e9dc:	dfc00117 	ldw	ra,4(sp)
 100e9e0:	df000017 	ldw	fp,0(sp)
 100e9e4:	dec00204 	addi	sp,sp,8
 100e9e8:	f800283a 	ret

0100e9ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100e9ec:	defffd04 	addi	sp,sp,-12
 100e9f0:	dfc00215 	stw	ra,8(sp)
 100e9f4:	df000115 	stw	fp,4(sp)
 100e9f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100e9fc:	0009883a 	mov	r4,zero
 100ea00:	100f1b80 	call	100f1b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ea04:	100f1ec0 	call	100f1ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ea08:	01004074 	movhi	r4,257
 100ea0c:	21079d04 	addi	r4,r4,7796
 100ea10:	01404074 	movhi	r5,257
 100ea14:	29479d04 	addi	r5,r5,7796
 100ea18:	01804074 	movhi	r6,257
 100ea1c:	31879d04 	addi	r6,r6,7796
 100ea20:	10110b80 	call	10110b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ea24:	10109ac0 	call	10109ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ea28:	01004074 	movhi	r4,257
 100ea2c:	21028404 	addi	r4,r4,2576
 100ea30:	10112f40 	call	10112f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ea34:	d126f717 	ldw	r4,-25636(gp)
 100ea38:	d166f817 	ldw	r5,-25632(gp)
 100ea3c:	d1a6f917 	ldw	r6,-25628(gp)
 100ea40:	10015cc0 	call	10015cc <main>
 100ea44:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ea48:	01000044 	movi	r4,1
 100ea4c:	100e1a40 	call	100e1a4 <close>
  exit (result);
 100ea50:	e13fff17 	ldw	r4,-4(fp)
 100ea54:	10113080 	call	1011308 <exit>

0100ea58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100ea58:	defffe04 	addi	sp,sp,-8
 100ea5c:	df000115 	stw	fp,4(sp)
 100ea60:	df000104 	addi	fp,sp,4
 100ea64:	e13fff15 	stw	r4,-4(fp)
}
 100ea68:	e037883a 	mov	sp,fp
 100ea6c:	df000017 	ldw	fp,0(sp)
 100ea70:	dec00104 	addi	sp,sp,4
 100ea74:	f800283a 	ret

0100ea78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100ea78:	defffe04 	addi	sp,sp,-8
 100ea7c:	df000115 	stw	fp,4(sp)
 100ea80:	df000104 	addi	fp,sp,4
 100ea84:	e13fff15 	stw	r4,-4(fp)
}
 100ea88:	e037883a 	mov	sp,fp
 100ea8c:	df000017 	ldw	fp,0(sp)
 100ea90:	dec00104 	addi	sp,sp,4
 100ea94:	f800283a 	ret

0100ea98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100ea98:	defffa04 	addi	sp,sp,-24
 100ea9c:	dfc00515 	stw	ra,20(sp)
 100eaa0:	df000415 	stw	fp,16(sp)
 100eaa4:	dc000315 	stw	r16,12(sp)
 100eaa8:	df000304 	addi	fp,sp,12
 100eaac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100eab0:	e0bffe17 	ldw	r2,-8(fp)
 100eab4:	10800217 	ldw	r2,8(r2)
 100eab8:	10d00034 	orhi	r3,r2,16384
 100eabc:	e0bffe17 	ldw	r2,-8(fp)
 100eac0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100eac4:	e03ffd15 	stw	zero,-12(fp)
 100eac8:	00002306 	br	100eb58 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100eacc:	e13ffd17 	ldw	r4,-12(fp)
 100ead0:	04004074 	movhi	r16,257
 100ead4:	8409ba04 	addi	r16,r16,9960
 100ead8:	01400304 	movi	r5,12
 100eadc:	1002f0c0 	call	1002f0c <__mulsi3>
 100eae0:	1405883a 	add	r2,r2,r16
 100eae4:	10c00017 	ldw	r3,0(r2)
 100eae8:	e0bffe17 	ldw	r2,-8(fp)
 100eaec:	10800017 	ldw	r2,0(r2)
 100eaf0:	1880161e 	bne	r3,r2,100eb4c <alt_file_locked+0xb4>
 100eaf4:	e13ffd17 	ldw	r4,-12(fp)
 100eaf8:	04004074 	movhi	r16,257
 100eafc:	8409ba04 	addi	r16,r16,9960
 100eb00:	01400304 	movi	r5,12
 100eb04:	1002f0c0 	call	1002f0c <__mulsi3>
 100eb08:	1405883a 	add	r2,r2,r16
 100eb0c:	10800204 	addi	r2,r2,8
 100eb10:	10800017 	ldw	r2,0(r2)
 100eb14:	1004403a 	cmpge	r2,r2,zero
 100eb18:	10000c1e 	bne	r2,zero,100eb4c <alt_file_locked+0xb4>
 100eb1c:	e13ffd17 	ldw	r4,-12(fp)
 100eb20:	01400304 	movi	r5,12
 100eb24:	1002f0c0 	call	1002f0c <__mulsi3>
 100eb28:	1007883a 	mov	r3,r2
 100eb2c:	00804074 	movhi	r2,257
 100eb30:	1089ba04 	addi	r2,r2,9960
 100eb34:	1887883a 	add	r3,r3,r2
 100eb38:	e0bffe17 	ldw	r2,-8(fp)
 100eb3c:	18800326 	beq	r3,r2,100eb4c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100eb40:	00bffcc4 	movi	r2,-13
 100eb44:	e0bfff15 	stw	r2,-4(fp)
 100eb48:	00000a06 	br	100eb74 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100eb4c:	e0bffd17 	ldw	r2,-12(fp)
 100eb50:	10800044 	addi	r2,r2,1
 100eb54:	e0bffd15 	stw	r2,-12(fp)
 100eb58:	00804074 	movhi	r2,257
 100eb5c:	108e7404 	addi	r2,r2,14800
 100eb60:	10800017 	ldw	r2,0(r2)
 100eb64:	1007883a 	mov	r3,r2
 100eb68:	e0bffd17 	ldw	r2,-12(fp)
 100eb6c:	18bfd72e 	bgeu	r3,r2,100eacc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100eb70:	e03fff15 	stw	zero,-4(fp)
 100eb74:	e0bfff17 	ldw	r2,-4(fp)
}
 100eb78:	e037883a 	mov	sp,fp
 100eb7c:	dfc00217 	ldw	ra,8(sp)
 100eb80:	df000117 	ldw	fp,4(sp)
 100eb84:	dc000017 	ldw	r16,0(sp)
 100eb88:	dec00304 	addi	sp,sp,12
 100eb8c:	f800283a 	ret

0100eb90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100eb90:	defff404 	addi	sp,sp,-48
 100eb94:	dfc00b15 	stw	ra,44(sp)
 100eb98:	df000a15 	stw	fp,40(sp)
 100eb9c:	df000a04 	addi	fp,sp,40
 100eba0:	e13ffb15 	stw	r4,-20(fp)
 100eba4:	e17ffc15 	stw	r5,-16(fp)
 100eba8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100ebac:	00bfffc4 	movi	r2,-1
 100ebb0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100ebb4:	00bffb44 	movi	r2,-19
 100ebb8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100ebbc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100ebc0:	e13ffb17 	ldw	r4,-20(fp)
 100ebc4:	01404074 	movhi	r5,257
 100ebc8:	294e7204 	addi	r5,r5,14792
 100ebcc:	1010a740 	call	1010a74 <alt_find_dev>
 100ebd0:	e0bffa15 	stw	r2,-24(fp)
 100ebd4:	e0bffa17 	ldw	r2,-24(fp)
 100ebd8:	1004c03a 	cmpne	r2,r2,zero
 100ebdc:	1000051e 	bne	r2,zero,100ebf4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100ebe0:	e13ffb17 	ldw	r4,-20(fp)
 100ebe4:	1010b080 	call	1010b08 <alt_find_file>
 100ebe8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100ebec:	00800044 	movi	r2,1
 100ebf0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100ebf4:	e0bffa17 	ldw	r2,-24(fp)
 100ebf8:	1005003a 	cmpeq	r2,r2,zero
 100ebfc:	1000311e 	bne	r2,zero,100ecc4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100ec00:	e13ffa17 	ldw	r4,-24(fp)
 100ec04:	1010c280 	call	1010c28 <alt_get_fd>
 100ec08:	e0bff815 	stw	r2,-32(fp)
 100ec0c:	e0bff817 	ldw	r2,-32(fp)
 100ec10:	1004403a 	cmpge	r2,r2,zero
 100ec14:	1000031e 	bne	r2,zero,100ec24 <open+0x94>
    {
      status = index;
 100ec18:	e0bff817 	ldw	r2,-32(fp)
 100ec1c:	e0bff715 	stw	r2,-36(fp)
 100ec20:	00002a06 	br	100eccc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 100ec24:	e13ff817 	ldw	r4,-32(fp)
 100ec28:	01400304 	movi	r5,12
 100ec2c:	1002f0c0 	call	1002f0c <__mulsi3>
 100ec30:	1007883a 	mov	r3,r2
 100ec34:	00804074 	movhi	r2,257
 100ec38:	1089ba04 	addi	r2,r2,9960
 100ec3c:	1885883a 	add	r2,r3,r2
 100ec40:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100ec44:	e0fffc17 	ldw	r3,-16(fp)
 100ec48:	00900034 	movhi	r2,16384
 100ec4c:	10bfffc4 	addi	r2,r2,-1
 100ec50:	1886703a 	and	r3,r3,r2
 100ec54:	e0bff917 	ldw	r2,-28(fp)
 100ec58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100ec5c:	e0bff617 	ldw	r2,-40(fp)
 100ec60:	1004c03a 	cmpne	r2,r2,zero
 100ec64:	1000061e 	bne	r2,zero,100ec80 <open+0xf0>
 100ec68:	e13ff917 	ldw	r4,-28(fp)
 100ec6c:	100ea980 	call	100ea98 <alt_file_locked>
 100ec70:	e0bff715 	stw	r2,-36(fp)
 100ec74:	e0bff717 	ldw	r2,-36(fp)
 100ec78:	1004803a 	cmplt	r2,r2,zero
 100ec7c:	1000131e 	bne	r2,zero,100eccc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100ec80:	e0bffa17 	ldw	r2,-24(fp)
 100ec84:	10800317 	ldw	r2,12(r2)
 100ec88:	1005003a 	cmpeq	r2,r2,zero
 100ec8c:	1000091e 	bne	r2,zero,100ecb4 <open+0x124>
 100ec90:	e0bffa17 	ldw	r2,-24(fp)
 100ec94:	10800317 	ldw	r2,12(r2)
 100ec98:	e13ff917 	ldw	r4,-28(fp)
 100ec9c:	e17ffb17 	ldw	r5,-20(fp)
 100eca0:	e1bffc17 	ldw	r6,-16(fp)
 100eca4:	e1fffd17 	ldw	r7,-12(fp)
 100eca8:	103ee83a 	callr	r2
 100ecac:	e0bfff15 	stw	r2,-4(fp)
 100ecb0:	00000106 	br	100ecb8 <open+0x128>
 100ecb4:	e03fff15 	stw	zero,-4(fp)
 100ecb8:	e0bfff17 	ldw	r2,-4(fp)
 100ecbc:	e0bff715 	stw	r2,-36(fp)
 100ecc0:	00000206 	br	100eccc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100ecc4:	00bffb44 	movi	r2,-19
 100ecc8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100eccc:	e0bff717 	ldw	r2,-36(fp)
 100ecd0:	1004403a 	cmpge	r2,r2,zero
 100ecd4:	1000091e 	bne	r2,zero,100ecfc <open+0x16c>
  {
    alt_release_fd (index);  
 100ecd8:	e13ff817 	ldw	r4,-32(fp)
 100ecdc:	100ef000 	call	100ef00 <alt_release_fd>
    ALT_ERRNO = -status;
 100ece0:	100ed1c0 	call	100ed1c <alt_get_errno>
 100ece4:	e0fff717 	ldw	r3,-36(fp)
 100ece8:	00c7c83a 	sub	r3,zero,r3
 100ecec:	10c00015 	stw	r3,0(r2)
    return -1;
 100ecf0:	00bfffc4 	movi	r2,-1
 100ecf4:	e0bffe15 	stw	r2,-8(fp)
 100ecf8:	00000206 	br	100ed04 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 100ecfc:	e0bff817 	ldw	r2,-32(fp)
 100ed00:	e0bffe15 	stw	r2,-8(fp)
 100ed04:	e0bffe17 	ldw	r2,-8(fp)
}
 100ed08:	e037883a 	mov	sp,fp
 100ed0c:	dfc00117 	ldw	ra,4(sp)
 100ed10:	df000017 	ldw	fp,0(sp)
 100ed14:	dec00204 	addi	sp,sp,8
 100ed18:	f800283a 	ret

0100ed1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ed1c:	defffd04 	addi	sp,sp,-12
 100ed20:	dfc00215 	stw	ra,8(sp)
 100ed24:	df000115 	stw	fp,4(sp)
 100ed28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ed2c:	00804074 	movhi	r2,257
 100ed30:	108e7504 	addi	r2,r2,14804
 100ed34:	10800017 	ldw	r2,0(r2)
 100ed38:	1005003a 	cmpeq	r2,r2,zero
 100ed3c:	1000061e 	bne	r2,zero,100ed58 <alt_get_errno+0x3c>
 100ed40:	00804074 	movhi	r2,257
 100ed44:	108e7504 	addi	r2,r2,14804
 100ed48:	10800017 	ldw	r2,0(r2)
 100ed4c:	103ee83a 	callr	r2
 100ed50:	e0bfff15 	stw	r2,-4(fp)
 100ed54:	00000306 	br	100ed64 <alt_get_errno+0x48>
 100ed58:	00804074 	movhi	r2,257
 100ed5c:	10955304 	addi	r2,r2,21836
 100ed60:	e0bfff15 	stw	r2,-4(fp)
 100ed64:	e0bfff17 	ldw	r2,-4(fp)
}
 100ed68:	e037883a 	mov	sp,fp
 100ed6c:	dfc00117 	ldw	ra,4(sp)
 100ed70:	df000017 	ldw	fp,0(sp)
 100ed74:	dec00204 	addi	sp,sp,8
 100ed78:	f800283a 	ret

0100ed7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100ed7c:	defff704 	addi	sp,sp,-36
 100ed80:	dfc00815 	stw	ra,32(sp)
 100ed84:	df000715 	stw	fp,28(sp)
 100ed88:	df000704 	addi	fp,sp,28
 100ed8c:	e13ffb15 	stw	r4,-20(fp)
 100ed90:	e17ffc15 	stw	r5,-16(fp)
 100ed94:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ed98:	e0bffb17 	ldw	r2,-20(fp)
 100ed9c:	1004803a 	cmplt	r2,r2,zero
 100eda0:	1000091e 	bne	r2,zero,100edc8 <read+0x4c>
 100eda4:	e13ffb17 	ldw	r4,-20(fp)
 100eda8:	01400304 	movi	r5,12
 100edac:	1002f0c0 	call	1002f0c <__mulsi3>
 100edb0:	1007883a 	mov	r3,r2
 100edb4:	00804074 	movhi	r2,257
 100edb8:	1089ba04 	addi	r2,r2,9960
 100edbc:	1887883a 	add	r3,r3,r2
 100edc0:	e0ffff15 	stw	r3,-4(fp)
 100edc4:	00000106 	br	100edcc <read+0x50>
 100edc8:	e03fff15 	stw	zero,-4(fp)
 100edcc:	e0bfff17 	ldw	r2,-4(fp)
 100edd0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100edd4:	e0bffa17 	ldw	r2,-24(fp)
 100edd8:	1005003a 	cmpeq	r2,r2,zero
 100eddc:	1000241e 	bne	r2,zero,100ee70 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100ede0:	e0bffa17 	ldw	r2,-24(fp)
 100ede4:	10800217 	ldw	r2,8(r2)
 100ede8:	108000cc 	andi	r2,r2,3
 100edec:	10800060 	cmpeqi	r2,r2,1
 100edf0:	10001a1e 	bne	r2,zero,100ee5c <read+0xe0>
 100edf4:	e0bffa17 	ldw	r2,-24(fp)
 100edf8:	10800017 	ldw	r2,0(r2)
 100edfc:	10800517 	ldw	r2,20(r2)
 100ee00:	1005003a 	cmpeq	r2,r2,zero
 100ee04:	1000151e 	bne	r2,zero,100ee5c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100ee08:	e0bffa17 	ldw	r2,-24(fp)
 100ee0c:	10800017 	ldw	r2,0(r2)
 100ee10:	10800517 	ldw	r2,20(r2)
 100ee14:	e17ffc17 	ldw	r5,-16(fp)
 100ee18:	e1bffd17 	ldw	r6,-12(fp)
 100ee1c:	e13ffa17 	ldw	r4,-24(fp)
 100ee20:	103ee83a 	callr	r2
 100ee24:	e0bff915 	stw	r2,-28(fp)
 100ee28:	e0bff917 	ldw	r2,-28(fp)
 100ee2c:	1004403a 	cmpge	r2,r2,zero
 100ee30:	1000071e 	bne	r2,zero,100ee50 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100ee34:	100eea00 	call	100eea0 <alt_get_errno>
 100ee38:	e0fff917 	ldw	r3,-28(fp)
 100ee3c:	00c7c83a 	sub	r3,zero,r3
 100ee40:	10c00015 	stw	r3,0(r2)
          return -1;
 100ee44:	00bfffc4 	movi	r2,-1
 100ee48:	e0bffe15 	stw	r2,-8(fp)
 100ee4c:	00000e06 	br	100ee88 <read+0x10c>
        }
        return rval;
 100ee50:	e0bff917 	ldw	r2,-28(fp)
 100ee54:	e0bffe15 	stw	r2,-8(fp)
 100ee58:	00000b06 	br	100ee88 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100ee5c:	100eea00 	call	100eea0 <alt_get_errno>
 100ee60:	1007883a 	mov	r3,r2
 100ee64:	00800344 	movi	r2,13
 100ee68:	18800015 	stw	r2,0(r3)
 100ee6c:	00000406 	br	100ee80 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100ee70:	100eea00 	call	100eea0 <alt_get_errno>
 100ee74:	1007883a 	mov	r3,r2
 100ee78:	00801444 	movi	r2,81
 100ee7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100ee80:	00bfffc4 	movi	r2,-1
 100ee84:	e0bffe15 	stw	r2,-8(fp)
 100ee88:	e0bffe17 	ldw	r2,-8(fp)
}
 100ee8c:	e037883a 	mov	sp,fp
 100ee90:	dfc00117 	ldw	ra,4(sp)
 100ee94:	df000017 	ldw	fp,0(sp)
 100ee98:	dec00204 	addi	sp,sp,8
 100ee9c:	f800283a 	ret

0100eea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100eea0:	defffd04 	addi	sp,sp,-12
 100eea4:	dfc00215 	stw	ra,8(sp)
 100eea8:	df000115 	stw	fp,4(sp)
 100eeac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100eeb0:	00804074 	movhi	r2,257
 100eeb4:	108e7504 	addi	r2,r2,14804
 100eeb8:	10800017 	ldw	r2,0(r2)
 100eebc:	1005003a 	cmpeq	r2,r2,zero
 100eec0:	1000061e 	bne	r2,zero,100eedc <alt_get_errno+0x3c>
 100eec4:	00804074 	movhi	r2,257
 100eec8:	108e7504 	addi	r2,r2,14804
 100eecc:	10800017 	ldw	r2,0(r2)
 100eed0:	103ee83a 	callr	r2
 100eed4:	e0bfff15 	stw	r2,-4(fp)
 100eed8:	00000306 	br	100eee8 <alt_get_errno+0x48>
 100eedc:	00804074 	movhi	r2,257
 100eee0:	10955304 	addi	r2,r2,21836
 100eee4:	e0bfff15 	stw	r2,-4(fp)
 100eee8:	e0bfff17 	ldw	r2,-4(fp)
}
 100eeec:	e037883a 	mov	sp,fp
 100eef0:	dfc00117 	ldw	ra,4(sp)
 100eef4:	df000017 	ldw	fp,0(sp)
 100eef8:	dec00204 	addi	sp,sp,8
 100eefc:	f800283a 	ret

0100ef00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100ef00:	defffc04 	addi	sp,sp,-16
 100ef04:	dfc00315 	stw	ra,12(sp)
 100ef08:	df000215 	stw	fp,8(sp)
 100ef0c:	dc000115 	stw	r16,4(sp)
 100ef10:	df000104 	addi	fp,sp,4
 100ef14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100ef18:	e0bfff17 	ldw	r2,-4(fp)
 100ef1c:	108000d0 	cmplti	r2,r2,3
 100ef20:	10000f1e 	bne	r2,zero,100ef60 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100ef24:	e13fff17 	ldw	r4,-4(fp)
 100ef28:	04004074 	movhi	r16,257
 100ef2c:	8409ba04 	addi	r16,r16,9960
 100ef30:	01400304 	movi	r5,12
 100ef34:	1002f0c0 	call	1002f0c <__mulsi3>
 100ef38:	1405883a 	add	r2,r2,r16
 100ef3c:	10800204 	addi	r2,r2,8
 100ef40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100ef44:	e13fff17 	ldw	r4,-4(fp)
 100ef48:	04004074 	movhi	r16,257
 100ef4c:	8409ba04 	addi	r16,r16,9960
 100ef50:	01400304 	movi	r5,12
 100ef54:	1002f0c0 	call	1002f0c <__mulsi3>
 100ef58:	1405883a 	add	r2,r2,r16
 100ef5c:	10000015 	stw	zero,0(r2)
  }
}
 100ef60:	e037883a 	mov	sp,fp
 100ef64:	dfc00217 	ldw	ra,8(sp)
 100ef68:	df000117 	ldw	fp,4(sp)
 100ef6c:	dc000017 	ldw	r16,0(sp)
 100ef70:	dec00304 	addi	sp,sp,12
 100ef74:	f800283a 	ret

0100ef78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100ef78:	defff804 	addi	sp,sp,-32
 100ef7c:	df000715 	stw	fp,28(sp)
 100ef80:	df000704 	addi	fp,sp,28
 100ef84:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ef88:	0005303a 	rdctl	r2,status
 100ef8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ef90:	e0fffb17 	ldw	r3,-20(fp)
 100ef94:	00bfff84 	movi	r2,-2
 100ef98:	1884703a 	and	r2,r3,r2
 100ef9c:	1001703a 	wrctl	status,r2
  
  return context;
 100efa0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100efa4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100efa8:	d0a01317 	ldw	r2,-32692(gp)
 100efac:	10c000c4 	addi	r3,r2,3
 100efb0:	00bfff04 	movi	r2,-4
 100efb4:	1884703a 	and	r2,r3,r2
 100efb8:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100efbc:	d0e01317 	ldw	r3,-32692(gp)
 100efc0:	e0bffe17 	ldw	r2,-8(fp)
 100efc4:	1887883a 	add	r3,r3,r2
 100efc8:	00806034 	movhi	r2,384
 100efcc:	10800004 	addi	r2,r2,0
 100efd0:	10c0072e 	bgeu	r2,r3,100eff0 <sbrk+0x78>
 100efd4:	e0bffd17 	ldw	r2,-12(fp)
 100efd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100efdc:	e0bffa17 	ldw	r2,-24(fp)
 100efe0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100efe4:	00bfffc4 	movi	r2,-1
 100efe8:	e0bfff15 	stw	r2,-4(fp)
 100efec:	00000c06 	br	100f020 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100eff0:	d0a01317 	ldw	r2,-32692(gp)
 100eff4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100eff8:	d0e01317 	ldw	r3,-32692(gp)
 100effc:	e0bffe17 	ldw	r2,-8(fp)
 100f000:	1885883a 	add	r2,r3,r2
 100f004:	d0a01315 	stw	r2,-32692(gp)
 100f008:	e0bffd17 	ldw	r2,-12(fp)
 100f00c:	e0bff915 	stw	r2,-28(fp)
 100f010:	e0bff917 	ldw	r2,-28(fp)
 100f014:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100f018:	e0bffc17 	ldw	r2,-16(fp)
 100f01c:	e0bfff15 	stw	r2,-4(fp)
 100f020:	e0bfff17 	ldw	r2,-4(fp)
} 
 100f024:	e037883a 	mov	sp,fp
 100f028:	df000017 	ldw	fp,0(sp)
 100f02c:	dec00104 	addi	sp,sp,4
 100f030:	f800283a 	ret

0100f034 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100f034:	defff704 	addi	sp,sp,-36
 100f038:	dfc00815 	stw	ra,32(sp)
 100f03c:	df000715 	stw	fp,28(sp)
 100f040:	df000704 	addi	fp,sp,28
 100f044:	e13ffb15 	stw	r4,-20(fp)
 100f048:	e17ffc15 	stw	r5,-16(fp)
 100f04c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f050:	e0bffb17 	ldw	r2,-20(fp)
 100f054:	1004803a 	cmplt	r2,r2,zero
 100f058:	1000091e 	bne	r2,zero,100f080 <write+0x4c>
 100f05c:	e13ffb17 	ldw	r4,-20(fp)
 100f060:	01400304 	movi	r5,12
 100f064:	1002f0c0 	call	1002f0c <__mulsi3>
 100f068:	1007883a 	mov	r3,r2
 100f06c:	00804074 	movhi	r2,257
 100f070:	1089ba04 	addi	r2,r2,9960
 100f074:	1887883a 	add	r3,r3,r2
 100f078:	e0ffff15 	stw	r3,-4(fp)
 100f07c:	00000106 	br	100f084 <write+0x50>
 100f080:	e03fff15 	stw	zero,-4(fp)
 100f084:	e0bfff17 	ldw	r2,-4(fp)
 100f088:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100f08c:	e0bffa17 	ldw	r2,-24(fp)
 100f090:	1005003a 	cmpeq	r2,r2,zero
 100f094:	1000241e 	bne	r2,zero,100f128 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100f098:	e0bffa17 	ldw	r2,-24(fp)
 100f09c:	10800217 	ldw	r2,8(r2)
 100f0a0:	108000cc 	andi	r2,r2,3
 100f0a4:	1005003a 	cmpeq	r2,r2,zero
 100f0a8:	10001a1e 	bne	r2,zero,100f114 <write+0xe0>
 100f0ac:	e0bffa17 	ldw	r2,-24(fp)
 100f0b0:	10800017 	ldw	r2,0(r2)
 100f0b4:	10800617 	ldw	r2,24(r2)
 100f0b8:	1005003a 	cmpeq	r2,r2,zero
 100f0bc:	1000151e 	bne	r2,zero,100f114 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100f0c0:	e0bffa17 	ldw	r2,-24(fp)
 100f0c4:	10800017 	ldw	r2,0(r2)
 100f0c8:	10800617 	ldw	r2,24(r2)
 100f0cc:	e17ffc17 	ldw	r5,-16(fp)
 100f0d0:	e1bffd17 	ldw	r6,-12(fp)
 100f0d4:	e13ffa17 	ldw	r4,-24(fp)
 100f0d8:	103ee83a 	callr	r2
 100f0dc:	e0bff915 	stw	r2,-28(fp)
 100f0e0:	e0bff917 	ldw	r2,-28(fp)
 100f0e4:	1004403a 	cmpge	r2,r2,zero
 100f0e8:	1000071e 	bne	r2,zero,100f108 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100f0ec:	100f1580 	call	100f158 <alt_get_errno>
 100f0f0:	e0fff917 	ldw	r3,-28(fp)
 100f0f4:	00c7c83a 	sub	r3,zero,r3
 100f0f8:	10c00015 	stw	r3,0(r2)
        return -1;
 100f0fc:	00bfffc4 	movi	r2,-1
 100f100:	e0bffe15 	stw	r2,-8(fp)
 100f104:	00000e06 	br	100f140 <write+0x10c>
      }
      return rval;
 100f108:	e0bff917 	ldw	r2,-28(fp)
 100f10c:	e0bffe15 	stw	r2,-8(fp)
 100f110:	00000b06 	br	100f140 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100f114:	100f1580 	call	100f158 <alt_get_errno>
 100f118:	1007883a 	mov	r3,r2
 100f11c:	00800344 	movi	r2,13
 100f120:	18800015 	stw	r2,0(r3)
 100f124:	00000406 	br	100f138 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100f128:	100f1580 	call	100f158 <alt_get_errno>
 100f12c:	1007883a 	mov	r3,r2
 100f130:	00801444 	movi	r2,81
 100f134:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100f138:	00bfffc4 	movi	r2,-1
 100f13c:	e0bffe15 	stw	r2,-8(fp)
 100f140:	e0bffe17 	ldw	r2,-8(fp)
}
 100f144:	e037883a 	mov	sp,fp
 100f148:	dfc00117 	ldw	ra,4(sp)
 100f14c:	df000017 	ldw	fp,0(sp)
 100f150:	dec00204 	addi	sp,sp,8
 100f154:	f800283a 	ret

0100f158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f158:	defffd04 	addi	sp,sp,-12
 100f15c:	dfc00215 	stw	ra,8(sp)
 100f160:	df000115 	stw	fp,4(sp)
 100f164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100f168:	00804074 	movhi	r2,257
 100f16c:	108e7504 	addi	r2,r2,14804
 100f170:	10800017 	ldw	r2,0(r2)
 100f174:	1005003a 	cmpeq	r2,r2,zero
 100f178:	1000061e 	bne	r2,zero,100f194 <alt_get_errno+0x3c>
 100f17c:	00804074 	movhi	r2,257
 100f180:	108e7504 	addi	r2,r2,14804
 100f184:	10800017 	ldw	r2,0(r2)
 100f188:	103ee83a 	callr	r2
 100f18c:	e0bfff15 	stw	r2,-4(fp)
 100f190:	00000306 	br	100f1a0 <alt_get_errno+0x48>
 100f194:	00804074 	movhi	r2,257
 100f198:	10955304 	addi	r2,r2,21836
 100f19c:	e0bfff15 	stw	r2,-4(fp)
 100f1a0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1a4:	e037883a 	mov	sp,fp
 100f1a8:	dfc00117 	ldw	ra,4(sp)
 100f1ac:	df000017 	ldw	fp,0(sp)
 100f1b0:	dec00204 	addi	sp,sp,8
 100f1b4:	f800283a 	ret

0100f1b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100f1b8:	defffd04 	addi	sp,sp,-12
 100f1bc:	dfc00215 	stw	ra,8(sp)
 100f1c0:	df000115 	stw	fp,4(sp)
 100f1c4:	df000104 	addi	fp,sp,4
 100f1c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 100f1cc:	10112d40 	call	10112d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100f1d0:	00800044 	movi	r2,1
 100f1d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100f1d8:	e037883a 	mov	sp,fp
 100f1dc:	dfc00117 	ldw	ra,4(sp)
 100f1e0:	df000017 	ldw	fp,0(sp)
 100f1e4:	dec00204 	addi	sp,sp,8
 100f1e8:	f800283a 	ret

0100f1ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100f1ec:	defffe04 	addi	sp,sp,-8
 100f1f0:	dfc00115 	stw	ra,4(sp)
 100f1f4:	df000015 	stw	fp,0(sp)
 100f1f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100f1fc:	01004074 	movhi	r4,257
 100f200:	210a2404 	addi	r4,r4,10384
 100f204:	000b883a 	mov	r5,zero
 100f208:	000d883a 	mov	r6,zero
 100f20c:	100f3d00 	call	100f3d0 <altera_avalon_jtag_uart_init>
 100f210:	01004074 	movhi	r4,257
 100f214:	210a1a04 	addi	r4,r4,10344
 100f218:	100f2500 	call	100f250 <alt_dev_reg>
    FIFOED_AVALON_UART_INIT ( ESP8266, esp8266);
 100f21c:	01004074 	movhi	r4,257
 100f220:	210e3c04 	addi	r4,r4,14576
 100f224:	000b883a 	mov	r5,zero
 100f228:	01800084 	movi	r6,2
 100f22c:	10104700 	call	1010470 <fifoed_avalon_uart_init>
 100f230:	01004074 	movhi	r4,257
 100f234:	210e3204 	addi	r4,r4,14536
 100f238:	100f2500 	call	100f250 <alt_dev_reg>
}
 100f23c:	e037883a 	mov	sp,fp
 100f240:	dfc00117 	ldw	ra,4(sp)
 100f244:	df000017 	ldw	fp,0(sp)
 100f248:	dec00204 	addi	sp,sp,8
 100f24c:	f800283a 	ret

0100f250 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100f250:	defffd04 	addi	sp,sp,-12
 100f254:	dfc00215 	stw	ra,8(sp)
 100f258:	df000115 	stw	fp,4(sp)
 100f25c:	df000104 	addi	fp,sp,4
 100f260:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100f264:	e13fff17 	ldw	r4,-4(fp)
 100f268:	01404074 	movhi	r5,257
 100f26c:	294e7204 	addi	r5,r5,14792
 100f270:	10108980 	call	1010898 <alt_dev_llist_insert>
}
 100f274:	e037883a 	mov	sp,fp
 100f278:	dfc00117 	ldw	ra,4(sp)
 100f27c:	df000017 	ldw	fp,0(sp)
 100f280:	dec00204 	addi	sp,sp,8
 100f284:	f800283a 	ret

0100f288 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100f288:	defffa04 	addi	sp,sp,-24
 100f28c:	dfc00515 	stw	ra,20(sp)
 100f290:	df000415 	stw	fp,16(sp)
 100f294:	df000404 	addi	fp,sp,16
 100f298:	e13ffd15 	stw	r4,-12(fp)
 100f29c:	e17ffe15 	stw	r5,-8(fp)
 100f2a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f2a4:	e0bffd17 	ldw	r2,-12(fp)
 100f2a8:	10800017 	ldw	r2,0(r2)
 100f2ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100f2b0:	e0bffc17 	ldw	r2,-16(fp)
 100f2b4:	11000a04 	addi	r4,r2,40
 100f2b8:	e0bffd17 	ldw	r2,-12(fp)
 100f2bc:	11c00217 	ldw	r7,8(r2)
 100f2c0:	e17ffe17 	ldw	r5,-8(fp)
 100f2c4:	e1bfff17 	ldw	r6,-4(fp)
 100f2c8:	100f8d00 	call	100f8d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100f2cc:	e037883a 	mov	sp,fp
 100f2d0:	dfc00117 	ldw	ra,4(sp)
 100f2d4:	df000017 	ldw	fp,0(sp)
 100f2d8:	dec00204 	addi	sp,sp,8
 100f2dc:	f800283a 	ret

0100f2e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100f2e0:	defffa04 	addi	sp,sp,-24
 100f2e4:	dfc00515 	stw	ra,20(sp)
 100f2e8:	df000415 	stw	fp,16(sp)
 100f2ec:	df000404 	addi	fp,sp,16
 100f2f0:	e13ffd15 	stw	r4,-12(fp)
 100f2f4:	e17ffe15 	stw	r5,-8(fp)
 100f2f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f2fc:	e0bffd17 	ldw	r2,-12(fp)
 100f300:	10800017 	ldw	r2,0(r2)
 100f304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100f308:	e0bffc17 	ldw	r2,-16(fp)
 100f30c:	11000a04 	addi	r4,r2,40
 100f310:	e0bffd17 	ldw	r2,-12(fp)
 100f314:	11c00217 	ldw	r7,8(r2)
 100f318:	e17ffe17 	ldw	r5,-8(fp)
 100f31c:	e1bfff17 	ldw	r6,-4(fp)
 100f320:	100faf40 	call	100faf4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100f324:	e037883a 	mov	sp,fp
 100f328:	dfc00117 	ldw	ra,4(sp)
 100f32c:	df000017 	ldw	fp,0(sp)
 100f330:	dec00204 	addi	sp,sp,8
 100f334:	f800283a 	ret

0100f338 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100f338:	defffc04 	addi	sp,sp,-16
 100f33c:	dfc00315 	stw	ra,12(sp)
 100f340:	df000215 	stw	fp,8(sp)
 100f344:	df000204 	addi	fp,sp,8
 100f348:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f34c:	e0bfff17 	ldw	r2,-4(fp)
 100f350:	10800017 	ldw	r2,0(r2)
 100f354:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100f358:	e0bffe17 	ldw	r2,-8(fp)
 100f35c:	11000a04 	addi	r4,r2,40
 100f360:	e0bfff17 	ldw	r2,-4(fp)
 100f364:	11400217 	ldw	r5,8(r2)
 100f368:	100f7680 	call	100f768 <altera_avalon_jtag_uart_close>
}
 100f36c:	e037883a 	mov	sp,fp
 100f370:	dfc00117 	ldw	ra,4(sp)
 100f374:	df000017 	ldw	fp,0(sp)
 100f378:	dec00204 	addi	sp,sp,8
 100f37c:	f800283a 	ret

0100f380 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100f380:	defffa04 	addi	sp,sp,-24
 100f384:	dfc00515 	stw	ra,20(sp)
 100f388:	df000415 	stw	fp,16(sp)
 100f38c:	df000404 	addi	fp,sp,16
 100f390:	e13ffd15 	stw	r4,-12(fp)
 100f394:	e17ffe15 	stw	r5,-8(fp)
 100f398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100f39c:	e0bffd17 	ldw	r2,-12(fp)
 100f3a0:	10800017 	ldw	r2,0(r2)
 100f3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100f3a8:	e0bffc17 	ldw	r2,-16(fp)
 100f3ac:	11000a04 	addi	r4,r2,40
 100f3b0:	e17ffe17 	ldw	r5,-8(fp)
 100f3b4:	e1bfff17 	ldw	r6,-4(fp)
 100f3b8:	100f7dc0 	call	100f7dc <altera_avalon_jtag_uart_ioctl>
}
 100f3bc:	e037883a 	mov	sp,fp
 100f3c0:	dfc00117 	ldw	ra,4(sp)
 100f3c4:	df000017 	ldw	fp,0(sp)
 100f3c8:	dec00204 	addi	sp,sp,8
 100f3cc:	f800283a 	ret

0100f3d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100f3d0:	defffa04 	addi	sp,sp,-24
 100f3d4:	dfc00515 	stw	ra,20(sp)
 100f3d8:	df000415 	stw	fp,16(sp)
 100f3dc:	df000404 	addi	fp,sp,16
 100f3e0:	e13ffd15 	stw	r4,-12(fp)
 100f3e4:	e17ffe15 	stw	r5,-8(fp)
 100f3e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f3ec:	e0fffd17 	ldw	r3,-12(fp)
 100f3f0:	00800044 	movi	r2,1
 100f3f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100f3f8:	e0bffd17 	ldw	r2,-12(fp)
 100f3fc:	10800017 	ldw	r2,0(r2)
 100f400:	11000104 	addi	r4,r2,4
 100f404:	e0bffd17 	ldw	r2,-12(fp)
 100f408:	10800817 	ldw	r2,32(r2)
 100f40c:	1007883a 	mov	r3,r2
 100f410:	2005883a 	mov	r2,r4
 100f414:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100f418:	e13ffe17 	ldw	r4,-8(fp)
 100f41c:	e17fff17 	ldw	r5,-4(fp)
 100f420:	d8000015 	stw	zero,0(sp)
 100f424:	01804074 	movhi	r6,257
 100f428:	31bd2404 	addi	r6,r6,-2928
 100f42c:	e1fffd17 	ldw	r7,-12(fp)
 100f430:	1010d140 	call	1010d14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100f434:	e0bffd17 	ldw	r2,-12(fp)
 100f438:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100f43c:	e0bffd17 	ldw	r2,-12(fp)
 100f440:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100f444:	00804074 	movhi	r2,257
 100f448:	10955e04 	addi	r2,r2,21880
 100f44c:	10800017 	ldw	r2,0(r2)
 100f450:	100b883a 	mov	r5,r2
 100f454:	01804074 	movhi	r6,257
 100f458:	31bdae04 	addi	r6,r6,-2376
 100f45c:	e1fffd17 	ldw	r7,-12(fp)
 100f460:	10107280 	call	1010728 <alt_alarm_start>
 100f464:	1004403a 	cmpge	r2,r2,zero
 100f468:	1000041e 	bne	r2,zero,100f47c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100f46c:	e0fffd17 	ldw	r3,-12(fp)
 100f470:	00a00034 	movhi	r2,32768
 100f474:	10bfffc4 	addi	r2,r2,-1
 100f478:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100f47c:	e037883a 	mov	sp,fp
 100f480:	dfc00117 	ldw	ra,4(sp)
 100f484:	df000017 	ldw	fp,0(sp)
 100f488:	dec00204 	addi	sp,sp,8
 100f48c:	f800283a 	ret

0100f490 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100f490:	defff804 	addi	sp,sp,-32
 100f494:	df000715 	stw	fp,28(sp)
 100f498:	df000704 	addi	fp,sp,28
 100f49c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100f4a0:	e0bfff17 	ldw	r2,-4(fp)
 100f4a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100f4a8:	e0bffe17 	ldw	r2,-8(fp)
 100f4ac:	10800017 	ldw	r2,0(r2)
 100f4b0:	e0bffd15 	stw	r2,-12(fp)
 100f4b4:	00000006 	br	100f4b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f4b8:	e0bffd17 	ldw	r2,-12(fp)
 100f4bc:	10800104 	addi	r2,r2,4
 100f4c0:	10800037 	ldwio	r2,0(r2)
 100f4c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100f4c8:	e0bffc17 	ldw	r2,-16(fp)
 100f4cc:	1080c00c 	andi	r2,r2,768
 100f4d0:	1005003a 	cmpeq	r2,r2,zero
 100f4d4:	1000741e 	bne	r2,zero,100f6a8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100f4d8:	e0bffc17 	ldw	r2,-16(fp)
 100f4dc:	1080400c 	andi	r2,r2,256
 100f4e0:	1005003a 	cmpeq	r2,r2,zero
 100f4e4:	1000351e 	bne	r2,zero,100f5bc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100f4e8:	00800074 	movhi	r2,1
 100f4ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f4f0:	e0bffe17 	ldw	r2,-8(fp)
 100f4f4:	10800a17 	ldw	r2,40(r2)
 100f4f8:	10800044 	addi	r2,r2,1
 100f4fc:	1081ffcc 	andi	r2,r2,2047
 100f500:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100f504:	e0bffe17 	ldw	r2,-8(fp)
 100f508:	10c00b17 	ldw	r3,44(r2)
 100f50c:	e0bffa17 	ldw	r2,-24(fp)
 100f510:	18801626 	beq	r3,r2,100f56c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100f514:	e0bffd17 	ldw	r2,-12(fp)
 100f518:	10800037 	ldwio	r2,0(r2)
 100f51c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100f520:	e0bffb17 	ldw	r2,-20(fp)
 100f524:	10a0000c 	andi	r2,r2,32768
 100f528:	1005003a 	cmpeq	r2,r2,zero
 100f52c:	10000f1e 	bne	r2,zero,100f56c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100f530:	e0bffe17 	ldw	r2,-8(fp)
 100f534:	10c00a17 	ldw	r3,40(r2)
 100f538:	e0bffb17 	ldw	r2,-20(fp)
 100f53c:	1009883a 	mov	r4,r2
 100f540:	e0bffe17 	ldw	r2,-8(fp)
 100f544:	1885883a 	add	r2,r3,r2
 100f548:	10800e04 	addi	r2,r2,56
 100f54c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f550:	e0bffe17 	ldw	r2,-8(fp)
 100f554:	10800a17 	ldw	r2,40(r2)
 100f558:	10800044 	addi	r2,r2,1
 100f55c:	10c1ffcc 	andi	r3,r2,2047
 100f560:	e0bffe17 	ldw	r2,-8(fp)
 100f564:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100f568:	003fe106 	br	100f4f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100f56c:	e0bffb17 	ldw	r2,-20(fp)
 100f570:	10bfffec 	andhi	r2,r2,65535
 100f574:	1005003a 	cmpeq	r2,r2,zero
 100f578:	1000101e 	bne	r2,zero,100f5bc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f57c:	e0bffe17 	ldw	r2,-8(fp)
 100f580:	10c00817 	ldw	r3,32(r2)
 100f584:	00bfff84 	movi	r2,-2
 100f588:	1886703a 	and	r3,r3,r2
 100f58c:	e0bffe17 	ldw	r2,-8(fp)
 100f590:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100f594:	e0bffd17 	ldw	r2,-12(fp)
 100f598:	11000104 	addi	r4,r2,4
 100f59c:	e0bffe17 	ldw	r2,-8(fp)
 100f5a0:	10800817 	ldw	r2,32(r2)
 100f5a4:	1007883a 	mov	r3,r2
 100f5a8:	2005883a 	mov	r2,r4
 100f5ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f5b0:	e0bffd17 	ldw	r2,-12(fp)
 100f5b4:	10800104 	addi	r2,r2,4
 100f5b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100f5bc:	e0bffc17 	ldw	r2,-16(fp)
 100f5c0:	1080800c 	andi	r2,r2,512
 100f5c4:	1005003a 	cmpeq	r2,r2,zero
 100f5c8:	103fbb1e 	bne	r2,zero,100f4b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100f5cc:	e0bffc17 	ldw	r2,-16(fp)
 100f5d0:	10bfffec 	andhi	r2,r2,65535
 100f5d4:	1004d43a 	srli	r2,r2,16
 100f5d8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f5dc:	00001506 	br	100f634 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100f5e0:	e13ffd17 	ldw	r4,-12(fp)
 100f5e4:	e0bffe17 	ldw	r2,-8(fp)
 100f5e8:	10c00d17 	ldw	r3,52(r2)
 100f5ec:	e0bffe17 	ldw	r2,-8(fp)
 100f5f0:	1885883a 	add	r2,r3,r2
 100f5f4:	10820e04 	addi	r2,r2,2104
 100f5f8:	10800003 	ldbu	r2,0(r2)
 100f5fc:	10c03fcc 	andi	r3,r2,255
 100f600:	18c0201c 	xori	r3,r3,128
 100f604:	18ffe004 	addi	r3,r3,-128
 100f608:	2005883a 	mov	r2,r4
 100f60c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f610:	e0bffe17 	ldw	r2,-8(fp)
 100f614:	10800d17 	ldw	r2,52(r2)
 100f618:	10800044 	addi	r2,r2,1
 100f61c:	10c1ffcc 	andi	r3,r2,2047
 100f620:	e0bffe17 	ldw	r2,-8(fp)
 100f624:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100f628:	e0bff917 	ldw	r2,-28(fp)
 100f62c:	10bfffc4 	addi	r2,r2,-1
 100f630:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f634:	e0bff917 	ldw	r2,-28(fp)
 100f638:	1005003a 	cmpeq	r2,r2,zero
 100f63c:	1000051e 	bne	r2,zero,100f654 <altera_avalon_jtag_uart_irq+0x1c4>
 100f640:	e0bffe17 	ldw	r2,-8(fp)
 100f644:	10c00d17 	ldw	r3,52(r2)
 100f648:	e0bffe17 	ldw	r2,-8(fp)
 100f64c:	10800c17 	ldw	r2,48(r2)
 100f650:	18bfe31e 	bne	r3,r2,100f5e0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100f654:	e0bff917 	ldw	r2,-28(fp)
 100f658:	1005003a 	cmpeq	r2,r2,zero
 100f65c:	103f961e 	bne	r2,zero,100f4b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100f660:	e0bffe17 	ldw	r2,-8(fp)
 100f664:	10c00817 	ldw	r3,32(r2)
 100f668:	00bfff44 	movi	r2,-3
 100f66c:	1886703a 	and	r3,r3,r2
 100f670:	e0bffe17 	ldw	r2,-8(fp)
 100f674:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f678:	e0bffe17 	ldw	r2,-8(fp)
 100f67c:	10800017 	ldw	r2,0(r2)
 100f680:	11000104 	addi	r4,r2,4
 100f684:	e0bffe17 	ldw	r2,-8(fp)
 100f688:	10800817 	ldw	r2,32(r2)
 100f68c:	1007883a 	mov	r3,r2
 100f690:	2005883a 	mov	r2,r4
 100f694:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f698:	e0bffd17 	ldw	r2,-12(fp)
 100f69c:	10800104 	addi	r2,r2,4
 100f6a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100f6a4:	003f8406 	br	100f4b8 <altera_avalon_jtag_uart_irq+0x28>
}
 100f6a8:	e037883a 	mov	sp,fp
 100f6ac:	df000017 	ldw	fp,0(sp)
 100f6b0:	dec00104 	addi	sp,sp,4
 100f6b4:	f800283a 	ret

0100f6b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100f6b8:	defffc04 	addi	sp,sp,-16
 100f6bc:	df000315 	stw	fp,12(sp)
 100f6c0:	df000304 	addi	fp,sp,12
 100f6c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100f6c8:	e0bfff17 	ldw	r2,-4(fp)
 100f6cc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100f6d0:	e0bffe17 	ldw	r2,-8(fp)
 100f6d4:	10800017 	ldw	r2,0(r2)
 100f6d8:	10800104 	addi	r2,r2,4
 100f6dc:	10800037 	ldwio	r2,0(r2)
 100f6e0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100f6e4:	e0bffd17 	ldw	r2,-12(fp)
 100f6e8:	1081000c 	andi	r2,r2,1024
 100f6ec:	1005003a 	cmpeq	r2,r2,zero
 100f6f0:	10000c1e 	bne	r2,zero,100f724 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100f6f4:	e0bffe17 	ldw	r2,-8(fp)
 100f6f8:	10800017 	ldw	r2,0(r2)
 100f6fc:	11000104 	addi	r4,r2,4
 100f700:	e0bffe17 	ldw	r2,-8(fp)
 100f704:	10800817 	ldw	r2,32(r2)
 100f708:	10810014 	ori	r2,r2,1024
 100f70c:	1007883a 	mov	r3,r2
 100f710:	2005883a 	mov	r2,r4
 100f714:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100f718:	e0bffe17 	ldw	r2,-8(fp)
 100f71c:	10000915 	stw	zero,36(r2)
 100f720:	00000a06 	br	100f74c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100f724:	e0bffe17 	ldw	r2,-8(fp)
 100f728:	10c00917 	ldw	r3,36(r2)
 100f72c:	00a00034 	movhi	r2,32768
 100f730:	10bfff04 	addi	r2,r2,-4
 100f734:	10c00536 	bltu	r2,r3,100f74c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100f738:	e0bffe17 	ldw	r2,-8(fp)
 100f73c:	10800917 	ldw	r2,36(r2)
 100f740:	10c00044 	addi	r3,r2,1
 100f744:	e0bffe17 	ldw	r2,-8(fp)
 100f748:	10c00915 	stw	r3,36(r2)
 100f74c:	00804074 	movhi	r2,257
 100f750:	10955e04 	addi	r2,r2,21880
 100f754:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100f758:	e037883a 	mov	sp,fp
 100f75c:	df000017 	ldw	fp,0(sp)
 100f760:	dec00104 	addi	sp,sp,4
 100f764:	f800283a 	ret

0100f768 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100f768:	defffc04 	addi	sp,sp,-16
 100f76c:	df000315 	stw	fp,12(sp)
 100f770:	df000304 	addi	fp,sp,12
 100f774:	e13ffd15 	stw	r4,-12(fp)
 100f778:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f77c:	00000706 	br	100f79c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100f780:	e0bffe17 	ldw	r2,-8(fp)
 100f784:	1090000c 	andi	r2,r2,16384
 100f788:	1005003a 	cmpeq	r2,r2,zero
 100f78c:	1000031e 	bne	r2,zero,100f79c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100f790:	00bffd44 	movi	r2,-11
 100f794:	e0bfff15 	stw	r2,-4(fp)
 100f798:	00000b06 	br	100f7c8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f79c:	e0bffd17 	ldw	r2,-12(fp)
 100f7a0:	10c00d17 	ldw	r3,52(r2)
 100f7a4:	e0bffd17 	ldw	r2,-12(fp)
 100f7a8:	10800c17 	ldw	r2,48(r2)
 100f7ac:	18800526 	beq	r3,r2,100f7c4 <altera_avalon_jtag_uart_close+0x5c>
 100f7b0:	e0bffd17 	ldw	r2,-12(fp)
 100f7b4:	10c00917 	ldw	r3,36(r2)
 100f7b8:	e0bffd17 	ldw	r2,-12(fp)
 100f7bc:	10800117 	ldw	r2,4(r2)
 100f7c0:	18bfef36 	bltu	r3,r2,100f780 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100f7c4:	e03fff15 	stw	zero,-4(fp)
 100f7c8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f7cc:	e037883a 	mov	sp,fp
 100f7d0:	df000017 	ldw	fp,0(sp)
 100f7d4:	dec00104 	addi	sp,sp,4
 100f7d8:	f800283a 	ret

0100f7dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100f7dc:	defff804 	addi	sp,sp,-32
 100f7e0:	df000715 	stw	fp,28(sp)
 100f7e4:	df000704 	addi	fp,sp,28
 100f7e8:	e13ffb15 	stw	r4,-20(fp)
 100f7ec:	e17ffc15 	stw	r5,-16(fp)
 100f7f0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100f7f4:	00bff9c4 	movi	r2,-25
 100f7f8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100f7fc:	e0bffc17 	ldw	r2,-16(fp)
 100f800:	e0bfff15 	stw	r2,-4(fp)
 100f804:	e0ffff17 	ldw	r3,-4(fp)
 100f808:	189a8060 	cmpeqi	r2,r3,27137
 100f80c:	1000041e 	bne	r2,zero,100f820 <altera_avalon_jtag_uart_ioctl+0x44>
 100f810:	e0ffff17 	ldw	r3,-4(fp)
 100f814:	189a80a0 	cmpeqi	r2,r3,27138
 100f818:	10001b1e 	bne	r2,zero,100f888 <altera_avalon_jtag_uart_ioctl+0xac>
 100f81c:	00002706 	br	100f8bc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100f820:	e0bffb17 	ldw	r2,-20(fp)
 100f824:	10c00117 	ldw	r3,4(r2)
 100f828:	00a00034 	movhi	r2,32768
 100f82c:	10bfffc4 	addi	r2,r2,-1
 100f830:	18802226 	beq	r3,r2,100f8bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100f834:	e0bffd17 	ldw	r2,-12(fp)
 100f838:	10800017 	ldw	r2,0(r2)
 100f83c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100f840:	e0bff917 	ldw	r2,-28(fp)
 100f844:	10800090 	cmplti	r2,r2,2
 100f848:	1000071e 	bne	r2,zero,100f868 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f84c:	e0fff917 	ldw	r3,-28(fp)
 100f850:	00a00034 	movhi	r2,32768
 100f854:	10bfffc4 	addi	r2,r2,-1
 100f858:	18800326 	beq	r3,r2,100f868 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f85c:	e0bff917 	ldw	r2,-28(fp)
 100f860:	e0bffe15 	stw	r2,-8(fp)
 100f864:	00000306 	br	100f874 <altera_avalon_jtag_uart_ioctl+0x98>
 100f868:	00e00034 	movhi	r3,32768
 100f86c:	18ffff84 	addi	r3,r3,-2
 100f870:	e0fffe15 	stw	r3,-8(fp)
 100f874:	e0bffb17 	ldw	r2,-20(fp)
 100f878:	e0fffe17 	ldw	r3,-8(fp)
 100f87c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100f880:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100f884:	00000d06 	br	100f8bc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100f888:	e0bffb17 	ldw	r2,-20(fp)
 100f88c:	10c00117 	ldw	r3,4(r2)
 100f890:	00a00034 	movhi	r2,32768
 100f894:	10bfffc4 	addi	r2,r2,-1
 100f898:	18800826 	beq	r3,r2,100f8bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100f89c:	e13ffd17 	ldw	r4,-12(fp)
 100f8a0:	e0bffb17 	ldw	r2,-20(fp)
 100f8a4:	10c00917 	ldw	r3,36(r2)
 100f8a8:	e0bffb17 	ldw	r2,-20(fp)
 100f8ac:	10800117 	ldw	r2,4(r2)
 100f8b0:	1885803a 	cmpltu	r2,r3,r2
 100f8b4:	20800015 	stw	r2,0(r4)
      rc = 0;
 100f8b8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100f8bc:	e0bffa17 	ldw	r2,-24(fp)
}
 100f8c0:	e037883a 	mov	sp,fp
 100f8c4:	df000017 	ldw	fp,0(sp)
 100f8c8:	dec00104 	addi	sp,sp,4
 100f8cc:	f800283a 	ret

0100f8d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100f8d0:	defff204 	addi	sp,sp,-56
 100f8d4:	dfc00d15 	stw	ra,52(sp)
 100f8d8:	df000c15 	stw	fp,48(sp)
 100f8dc:	df000c04 	addi	fp,sp,48
 100f8e0:	e13ffb15 	stw	r4,-20(fp)
 100f8e4:	e17ffc15 	stw	r5,-16(fp)
 100f8e8:	e1bffd15 	stw	r6,-12(fp)
 100f8ec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100f8f0:	e0bffc17 	ldw	r2,-16(fp)
 100f8f4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f8f8:	00004806 	br	100fa1c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100f8fc:	e0bffb17 	ldw	r2,-20(fp)
 100f900:	10800a17 	ldw	r2,40(r2)
 100f904:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100f908:	e0bffb17 	ldw	r2,-20(fp)
 100f90c:	10800b17 	ldw	r2,44(r2)
 100f910:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100f914:	e0fff717 	ldw	r3,-36(fp)
 100f918:	e0bff617 	ldw	r2,-40(fp)
 100f91c:	18800536 	bltu	r3,r2,100f934 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100f920:	e0bff717 	ldw	r2,-36(fp)
 100f924:	e0fff617 	ldw	r3,-40(fp)
 100f928:	10c5c83a 	sub	r2,r2,r3
 100f92c:	e0bff815 	stw	r2,-32(fp)
 100f930:	00000406 	br	100f944 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100f934:	00820004 	movi	r2,2048
 100f938:	e0fff617 	ldw	r3,-40(fp)
 100f93c:	10c5c83a 	sub	r2,r2,r3
 100f940:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100f944:	e0bff817 	ldw	r2,-32(fp)
 100f948:	1005003a 	cmpeq	r2,r2,zero
 100f94c:	10001f1e 	bne	r2,zero,100f9cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100f950:	e0fffd17 	ldw	r3,-12(fp)
 100f954:	e0bff817 	ldw	r2,-32(fp)
 100f958:	1880022e 	bgeu	r3,r2,100f964 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100f95c:	e0bffd17 	ldw	r2,-12(fp)
 100f960:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100f964:	e0bffb17 	ldw	r2,-20(fp)
 100f968:	10c00e04 	addi	r3,r2,56
 100f96c:	e0bff617 	ldw	r2,-40(fp)
 100f970:	1887883a 	add	r3,r3,r2
 100f974:	e0bffa17 	ldw	r2,-24(fp)
 100f978:	1009883a 	mov	r4,r2
 100f97c:	180b883a 	mov	r5,r3
 100f980:	e1bff817 	ldw	r6,-32(fp)
 100f984:	1009e040 	call	1009e04 <memcpy>
      ptr   += n;
 100f988:	e0fff817 	ldw	r3,-32(fp)
 100f98c:	e0bffa17 	ldw	r2,-24(fp)
 100f990:	10c5883a 	add	r2,r2,r3
 100f994:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100f998:	e0fffd17 	ldw	r3,-12(fp)
 100f99c:	e0bff817 	ldw	r2,-32(fp)
 100f9a0:	1885c83a 	sub	r2,r3,r2
 100f9a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f9a8:	e0fff617 	ldw	r3,-40(fp)
 100f9ac:	e0bff817 	ldw	r2,-32(fp)
 100f9b0:	1885883a 	add	r2,r3,r2
 100f9b4:	10c1ffcc 	andi	r3,r2,2047
 100f9b8:	e0bffb17 	ldw	r2,-20(fp)
 100f9bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100f9c0:	e0bffd17 	ldw	r2,-12(fp)
 100f9c4:	10800048 	cmpgei	r2,r2,1
 100f9c8:	103fcc1e 	bne	r2,zero,100f8fc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100f9cc:	e0fffa17 	ldw	r3,-24(fp)
 100f9d0:	e0bffc17 	ldw	r2,-16(fp)
 100f9d4:	1880141e 	bne	r3,r2,100fa28 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100f9d8:	e0bffe17 	ldw	r2,-8(fp)
 100f9dc:	1090000c 	andi	r2,r2,16384
 100f9e0:	1004c03a 	cmpne	r2,r2,zero
 100f9e4:	1000101e 	bne	r2,zero,100fa28 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100f9e8:	e0bffb17 	ldw	r2,-20(fp)
 100f9ec:	10c00a17 	ldw	r3,40(r2)
 100f9f0:	e0bff717 	ldw	r2,-36(fp)
 100f9f4:	1880051e 	bne	r3,r2,100fa0c <altera_avalon_jtag_uart_read+0x13c>
 100f9f8:	e0bffb17 	ldw	r2,-20(fp)
 100f9fc:	10c00917 	ldw	r3,36(r2)
 100fa00:	e0bffb17 	ldw	r2,-20(fp)
 100fa04:	10800117 	ldw	r2,4(r2)
 100fa08:	18bff736 	bltu	r3,r2,100f9e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100fa0c:	e0bffb17 	ldw	r2,-20(fp)
 100fa10:	10c00a17 	ldw	r3,40(r2)
 100fa14:	e0bff717 	ldw	r2,-36(fp)
 100fa18:	18800326 	beq	r3,r2,100fa28 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100fa1c:	e0bffd17 	ldw	r2,-12(fp)
 100fa20:	10800048 	cmpgei	r2,r2,1
 100fa24:	103fb51e 	bne	r2,zero,100f8fc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100fa28:	e0fffa17 	ldw	r3,-24(fp)
 100fa2c:	e0bffc17 	ldw	r2,-16(fp)
 100fa30:	18801926 	beq	r3,r2,100fa98 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fa34:	0005303a 	rdctl	r2,status
 100fa38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fa3c:	e0fff517 	ldw	r3,-44(fp)
 100fa40:	00bfff84 	movi	r2,-2
 100fa44:	1884703a 	and	r2,r3,r2
 100fa48:	1001703a 	wrctl	status,r2
  
  return context;
 100fa4c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100fa50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100fa54:	e0bffb17 	ldw	r2,-20(fp)
 100fa58:	10800817 	ldw	r2,32(r2)
 100fa5c:	10c00054 	ori	r3,r2,1
 100fa60:	e0bffb17 	ldw	r2,-20(fp)
 100fa64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100fa68:	e0bffb17 	ldw	r2,-20(fp)
 100fa6c:	10800017 	ldw	r2,0(r2)
 100fa70:	11000104 	addi	r4,r2,4
 100fa74:	e0bffb17 	ldw	r2,-20(fp)
 100fa78:	10800817 	ldw	r2,32(r2)
 100fa7c:	1007883a 	mov	r3,r2
 100fa80:	2005883a 	mov	r2,r4
 100fa84:	10c00035 	stwio	r3,0(r2)
 100fa88:	e0bff917 	ldw	r2,-28(fp)
 100fa8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fa90:	e0bff417 	ldw	r2,-48(fp)
 100fa94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100fa98:	e0fffa17 	ldw	r3,-24(fp)
 100fa9c:	e0bffc17 	ldw	r2,-16(fp)
 100faa0:	18800526 	beq	r3,r2,100fab8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100faa4:	e0fffa17 	ldw	r3,-24(fp)
 100faa8:	e0bffc17 	ldw	r2,-16(fp)
 100faac:	1887c83a 	sub	r3,r3,r2
 100fab0:	e0ffff15 	stw	r3,-4(fp)
 100fab4:	00000906 	br	100fadc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100fab8:	e0bffe17 	ldw	r2,-8(fp)
 100fabc:	1090000c 	andi	r2,r2,16384
 100fac0:	1005003a 	cmpeq	r2,r2,zero
 100fac4:	1000031e 	bne	r2,zero,100fad4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100fac8:	00bffd44 	movi	r2,-11
 100facc:	e0bfff15 	stw	r2,-4(fp)
 100fad0:	00000206 	br	100fadc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100fad4:	00bffec4 	movi	r2,-5
 100fad8:	e0bfff15 	stw	r2,-4(fp)
 100fadc:	e0bfff17 	ldw	r2,-4(fp)
}
 100fae0:	e037883a 	mov	sp,fp
 100fae4:	dfc00117 	ldw	ra,4(sp)
 100fae8:	df000017 	ldw	fp,0(sp)
 100faec:	dec00204 	addi	sp,sp,8
 100faf0:	f800283a 	ret

0100faf4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100faf4:	defff204 	addi	sp,sp,-56
 100faf8:	dfc00d15 	stw	ra,52(sp)
 100fafc:	df000c15 	stw	fp,48(sp)
 100fb00:	df000c04 	addi	fp,sp,48
 100fb04:	e13ffb15 	stw	r4,-20(fp)
 100fb08:	e17ffc15 	stw	r5,-16(fp)
 100fb0c:	e1bffd15 	stw	r6,-12(fp)
 100fb10:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100fb14:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100fb18:	e0bffc17 	ldw	r2,-16(fp)
 100fb1c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fb20:	00003a06 	br	100fc0c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100fb24:	e0bffb17 	ldw	r2,-20(fp)
 100fb28:	10800c17 	ldw	r2,48(r2)
 100fb2c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100fb30:	e0bffb17 	ldw	r2,-20(fp)
 100fb34:	10800d17 	ldw	r2,52(r2)
 100fb38:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100fb3c:	e0fffa17 	ldw	r3,-24(fp)
 100fb40:	e0bff917 	ldw	r2,-28(fp)
 100fb44:	1880062e 	bgeu	r3,r2,100fb60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100fb48:	e0fff917 	ldw	r3,-28(fp)
 100fb4c:	e0bffa17 	ldw	r2,-24(fp)
 100fb50:	1885c83a 	sub	r2,r3,r2
 100fb54:	10bfffc4 	addi	r2,r2,-1
 100fb58:	e0bff815 	stw	r2,-32(fp)
 100fb5c:	00000c06 	br	100fb90 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100fb60:	e0bff917 	ldw	r2,-28(fp)
 100fb64:	1005003a 	cmpeq	r2,r2,zero
 100fb68:	1000051e 	bne	r2,zero,100fb80 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100fb6c:	00820004 	movi	r2,2048
 100fb70:	e0fffa17 	ldw	r3,-24(fp)
 100fb74:	10c5c83a 	sub	r2,r2,r3
 100fb78:	e0bff815 	stw	r2,-32(fp)
 100fb7c:	00000406 	br	100fb90 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100fb80:	0081ffc4 	movi	r2,2047
 100fb84:	e0fffa17 	ldw	r3,-24(fp)
 100fb88:	10c5c83a 	sub	r2,r2,r3
 100fb8c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100fb90:	e0bff817 	ldw	r2,-32(fp)
 100fb94:	1005003a 	cmpeq	r2,r2,zero
 100fb98:	10001f1e 	bne	r2,zero,100fc18 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100fb9c:	e0fffd17 	ldw	r3,-12(fp)
 100fba0:	e0bff817 	ldw	r2,-32(fp)
 100fba4:	1880022e 	bgeu	r3,r2,100fbb0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100fba8:	e0bffd17 	ldw	r2,-12(fp)
 100fbac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100fbb0:	e0bffb17 	ldw	r2,-20(fp)
 100fbb4:	10c20e04 	addi	r3,r2,2104
 100fbb8:	e0bffa17 	ldw	r2,-24(fp)
 100fbbc:	1885883a 	add	r2,r3,r2
 100fbc0:	e0fffc17 	ldw	r3,-16(fp)
 100fbc4:	1009883a 	mov	r4,r2
 100fbc8:	180b883a 	mov	r5,r3
 100fbcc:	e1bff817 	ldw	r6,-32(fp)
 100fbd0:	1009e040 	call	1009e04 <memcpy>
      ptr   += n;
 100fbd4:	e0fff817 	ldw	r3,-32(fp)
 100fbd8:	e0bffc17 	ldw	r2,-16(fp)
 100fbdc:	10c5883a 	add	r2,r2,r3
 100fbe0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100fbe4:	e0fffd17 	ldw	r3,-12(fp)
 100fbe8:	e0bff817 	ldw	r2,-32(fp)
 100fbec:	1885c83a 	sub	r2,r3,r2
 100fbf0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100fbf4:	e0fffa17 	ldw	r3,-24(fp)
 100fbf8:	e0bff817 	ldw	r2,-32(fp)
 100fbfc:	1885883a 	add	r2,r3,r2
 100fc00:	10c1ffcc 	andi	r3,r2,2047
 100fc04:	e0bffb17 	ldw	r2,-20(fp)
 100fc08:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fc0c:	e0bffd17 	ldw	r2,-12(fp)
 100fc10:	10800048 	cmpgei	r2,r2,1
 100fc14:	103fc31e 	bne	r2,zero,100fb24 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fc18:	0005303a 	rdctl	r2,status
 100fc1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fc20:	e0fff517 	ldw	r3,-44(fp)
 100fc24:	00bfff84 	movi	r2,-2
 100fc28:	1884703a 	and	r2,r3,r2
 100fc2c:	1001703a 	wrctl	status,r2
  
  return context;
 100fc30:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100fc34:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100fc38:	e0bffb17 	ldw	r2,-20(fp)
 100fc3c:	10800817 	ldw	r2,32(r2)
 100fc40:	10c00094 	ori	r3,r2,2
 100fc44:	e0bffb17 	ldw	r2,-20(fp)
 100fc48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100fc4c:	e0bffb17 	ldw	r2,-20(fp)
 100fc50:	10800017 	ldw	r2,0(r2)
 100fc54:	11000104 	addi	r4,r2,4
 100fc58:	e0bffb17 	ldw	r2,-20(fp)
 100fc5c:	10800817 	ldw	r2,32(r2)
 100fc60:	1007883a 	mov	r3,r2
 100fc64:	2005883a 	mov	r2,r4
 100fc68:	10c00035 	stwio	r3,0(r2)
 100fc6c:	e0bff717 	ldw	r2,-36(fp)
 100fc70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fc74:	e0bff417 	ldw	r2,-48(fp)
 100fc78:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100fc7c:	e0bffd17 	ldw	r2,-12(fp)
 100fc80:	10800050 	cmplti	r2,r2,1
 100fc84:	1000111e 	bne	r2,zero,100fccc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100fc88:	e0bffe17 	ldw	r2,-8(fp)
 100fc8c:	1090000c 	andi	r2,r2,16384
 100fc90:	1004c03a 	cmpne	r2,r2,zero
 100fc94:	1000101e 	bne	r2,zero,100fcd8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100fc98:	e0bffb17 	ldw	r2,-20(fp)
 100fc9c:	10c00d17 	ldw	r3,52(r2)
 100fca0:	e0bff917 	ldw	r2,-28(fp)
 100fca4:	1880051e 	bne	r3,r2,100fcbc <altera_avalon_jtag_uart_write+0x1c8>
 100fca8:	e0bffb17 	ldw	r2,-20(fp)
 100fcac:	10c00917 	ldw	r3,36(r2)
 100fcb0:	e0bffb17 	ldw	r2,-20(fp)
 100fcb4:	10800117 	ldw	r2,4(r2)
 100fcb8:	18bff736 	bltu	r3,r2,100fc98 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100fcbc:	e0bffb17 	ldw	r2,-20(fp)
 100fcc0:	10c00d17 	ldw	r3,52(r2)
 100fcc4:	e0bff917 	ldw	r2,-28(fp)
 100fcc8:	18800326 	beq	r3,r2,100fcd8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100fccc:	e0bffd17 	ldw	r2,-12(fp)
 100fcd0:	10800048 	cmpgei	r2,r2,1
 100fcd4:	103fcd1e 	bne	r2,zero,100fc0c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100fcd8:	e0fffc17 	ldw	r3,-16(fp)
 100fcdc:	e0bff617 	ldw	r2,-40(fp)
 100fce0:	18800526 	beq	r3,r2,100fcf8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100fce4:	e0fffc17 	ldw	r3,-16(fp)
 100fce8:	e0bff617 	ldw	r2,-40(fp)
 100fcec:	1887c83a 	sub	r3,r3,r2
 100fcf0:	e0ffff15 	stw	r3,-4(fp)
 100fcf4:	00000906 	br	100fd1c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100fcf8:	e0bffe17 	ldw	r2,-8(fp)
 100fcfc:	1090000c 	andi	r2,r2,16384
 100fd00:	1005003a 	cmpeq	r2,r2,zero
 100fd04:	1000031e 	bne	r2,zero,100fd14 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100fd08:	00bffd44 	movi	r2,-11
 100fd0c:	e0bfff15 	stw	r2,-4(fp)
 100fd10:	00000206 	br	100fd1c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100fd14:	00bffec4 	movi	r2,-5
 100fd18:	e0bfff15 	stw	r2,-4(fp)
 100fd1c:	e0bfff17 	ldw	r2,-4(fp)
}
 100fd20:	e037883a 	mov	sp,fp
 100fd24:	dfc00117 	ldw	ra,4(sp)
 100fd28:	df000017 	ldw	fp,0(sp)
 100fd2c:	dec00204 	addi	sp,sp,8
 100fd30:	f800283a 	ret

0100fd34 <fifoed_avalon_uart_read>:
 * transfered from a circular buffer. The interrupt handler is then responsible
 * for copying data from the device into this buffer.
 */

int fifoed_avalon_uart_read (fifoed_avalon_uart_state* sp, char* ptr, int len, int flags)
{
 100fd34:	defff304 	addi	sp,sp,-52
 100fd38:	dfc00c15 	stw	ra,48(sp)
 100fd3c:	df000b15 	stw	fp,44(sp)
 100fd40:	df000b04 	addi	fp,sp,44
 100fd44:	e13ffc15 	stw	r4,-16(fp)
 100fd48:	e17ffd15 	stw	r5,-12(fp)
 100fd4c:	e1bffe15 	stw	r6,-8(fp)
 100fd50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
 // alt_u32         next; //9.3.1 patch

  int count                = 0;
 100fd54:	e03ff915 	stw	zero,-28(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 100fd58:	e0bfff17 	ldw	r2,-4(fp)
 100fd5c:	1090000c 	andi	r2,r2,16384
 100fd60:	1005003a 	cmpeq	r2,r2,zero
 100fd64:	e0bffa15 	stw	r2,-24(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100fd68:	00001906 	br	100fdd0 <fifoed_avalon_uart_read+0x9c>
    {
      count++;
 100fd6c:	e0bff917 	ldw	r2,-28(fp)
 100fd70:	10800044 	addi	r2,r2,1
 100fd74:	e0bff915 	stw	r2,-28(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 100fd78:	e0bffc17 	ldw	r2,-16(fp)
 100fd7c:	10c00217 	ldw	r3,8(r2)
 100fd80:	e0bffc17 	ldw	r2,-16(fp)
 100fd84:	1885883a 	add	r2,r3,r2
 100fd88:	10800704 	addi	r2,r2,28
 100fd8c:	10800003 	ldbu	r2,0(r2)
 100fd90:	1007883a 	mov	r3,r2
 100fd94:	e0bffd17 	ldw	r2,-12(fp)
 100fd98:	10c00005 	stb	r3,0(r2)
 100fd9c:	e0bffd17 	ldw	r2,-12(fp)
 100fda0:	10800044 	addi	r2,r2,1
 100fda4:	e0bffd15 	stw	r2,-12(fp)
      
  //  9.3.1 patch  sp->rx_start = (++sp->rx_start) & FIFOED_AVALON_UART_BUF_MSK;
      ++sp->rx_start;
 100fda8:	e0bffc17 	ldw	r2,-16(fp)
 100fdac:	10800217 	ldw	r2,8(r2)
 100fdb0:	10c00044 	addi	r3,r2,1
 100fdb4:	e0bffc17 	ldw	r2,-16(fp)
 100fdb8:	10c00215 	stw	r3,8(r2)
      sp->rx_start = sp->rx_start & FIFOED_AVALON_UART_BUF_MSK; 
 100fdbc:	e0bffc17 	ldw	r2,-16(fp)
 100fdc0:	10800217 	ldw	r2,8(r2)
 100fdc4:	10c00fcc 	andi	r3,r2,63
 100fdc8:	e0bffc17 	ldw	r2,-16(fp)
 100fdcc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100fdd0:	e0fff917 	ldw	r3,-28(fp)
 100fdd4:	e0bffe17 	ldw	r2,-8(fp)
 100fdd8:	1880050e 	bge	r3,r2,100fdf0 <fifoed_avalon_uart_read+0xbc>
 100fddc:	e0bffc17 	ldw	r2,-16(fp)
 100fde0:	10c00217 	ldw	r3,8(r2)
 100fde4:	e0bffc17 	ldw	r2,-16(fp)
 100fde8:	10800317 	ldw	r2,12(r2)
 100fdec:	18bfdf1e 	bne	r3,r2,100fd6c <fifoed_avalon_uart_read+0x38>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 100fdf0:	e0bff917 	ldw	r2,-28(fp)
 100fdf4:	1004c03a 	cmpne	r2,r2,zero
 100fdf8:	1000261e 	bne	r2,zero,100fe94 <fifoed_avalon_uart_read+0x160>
 100fdfc:	e0bffc17 	ldw	r2,-16(fp)
 100fe00:	10c00217 	ldw	r3,8(r2)
 100fe04:	e0bffc17 	ldw	r2,-16(fp)
 100fe08:	10800317 	ldw	r2,12(r2)
 100fe0c:	1880211e 	bne	r3,r2,100fe94 <fifoed_avalon_uart_read+0x160>
    {
      if (!block)
 100fe10:	e0bffa17 	ldw	r2,-24(fp)
 100fe14:	1004c03a 	cmpne	r2,r2,zero
 100fe18:	1000051e 	bne	r2,zero,100fe30 <fifoed_avalon_uart_read+0xfc>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 100fe1c:	100ff280 	call	100ff28 <alt_get_errno>
 100fe20:	1007883a 	mov	r3,r2
 100fe24:	008002c4 	movi	r2,11
 100fe28:	18800015 	stw	r2,0(r3)
        break;
 100fe2c:	00001f06 	br	100feac <fifoed_avalon_uart_read+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fe30:	0005303a 	rdctl	r2,status
 100fe34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fe38:	e0fff817 	ldw	r3,-32(fp)
 100fe3c:	00bfff84 	movi	r2,-2
 100fe40:	1884703a 	and	r2,r3,r2
 100fe44:	1001703a 	wrctl	status,r2
  
  return context;
 100fe48:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 100fe4c:	e0bffb15 	stw	r2,-20(fp)
       sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 100fe50:	e0bffc17 	ldw	r2,-16(fp)
 100fe54:	10800117 	ldw	r2,4(r2)
 100fe58:	10c02014 	ori	r3,r2,128
 100fe5c:	e0bffc17 	ldw	r2,-16(fp)
 100fe60:	10c00115 	stw	r3,4(r2)
       IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100fe64:	e0bffc17 	ldw	r2,-16(fp)
 100fe68:	10800017 	ldw	r2,0(r2)
 100fe6c:	11000304 	addi	r4,r2,12
 100fe70:	e0bffc17 	ldw	r2,-16(fp)
 100fe74:	10800117 	ldw	r2,4(r2)
 100fe78:	1007883a 	mov	r3,r2
 100fe7c:	2005883a 	mov	r2,r4
 100fe80:	10c00035 	stwio	r3,0(r2)
 100fe84:	e0bffb17 	ldw	r2,-20(fp)
 100fe88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fe8c:	e0bff717 	ldw	r2,-36(fp)
 100fe90:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 100fe94:	e0bff917 	ldw	r2,-28(fp)
 100fe98:	1004c03a 	cmpne	r2,r2,zero
 100fe9c:	1000031e 	bne	r2,zero,100feac <fifoed_avalon_uart_read+0x178>
 100fea0:	e0bffe17 	ldw	r2,-8(fp)
 100fea4:	1004c03a 	cmpne	r2,r2,zero
 100fea8:	103fc91e 	bne	r2,zero,100fdd0 <fifoed_avalon_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100feac:	0005303a 	rdctl	r2,status
 100feb0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100feb4:	e0fff617 	ldw	r3,-40(fp)
 100feb8:	00bfff84 	movi	r2,-2
 100febc:	1884703a 	and	r2,r3,r2
 100fec0:	1001703a 	wrctl	status,r2
  
  return context;
 100fec4:	e0bff617 	ldw	r2,-40(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 100fec8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 100fecc:	e0bffc17 	ldw	r2,-16(fp)
 100fed0:	10800117 	ldw	r2,4(r2)
 100fed4:	10c02014 	ori	r3,r2,128
 100fed8:	e0bffc17 	ldw	r2,-16(fp)
 100fedc:	10c00115 	stw	r3,4(r2)
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100fee0:	e0bffc17 	ldw	r2,-16(fp)
 100fee4:	10800017 	ldw	r2,0(r2)
 100fee8:	11000304 	addi	r4,r2,12
 100feec:	e0bffc17 	ldw	r2,-16(fp)
 100fef0:	10800117 	ldw	r2,4(r2)
 100fef4:	1007883a 	mov	r3,r2
 100fef8:	2005883a 	mov	r2,r4
 100fefc:	10c00035 	stwio	r3,0(r2)
 100ff00:	e0bffb17 	ldw	r2,-20(fp)
 100ff04:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ff08:	e0bff517 	ldw	r2,-44(fp)
 100ff0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
 100ff10:	e0bff917 	ldw	r2,-28(fp)
}
 100ff14:	e037883a 	mov	sp,fp
 100ff18:	dfc00117 	ldw	ra,4(sp)
 100ff1c:	df000017 	ldw	fp,0(sp)
 100ff20:	dec00204 	addi	sp,sp,8
 100ff24:	f800283a 	ret

0100ff28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ff28:	defffd04 	addi	sp,sp,-12
 100ff2c:	dfc00215 	stw	ra,8(sp)
 100ff30:	df000115 	stw	fp,4(sp)
 100ff34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ff38:	00804074 	movhi	r2,257
 100ff3c:	108e7504 	addi	r2,r2,14804
 100ff40:	10800017 	ldw	r2,0(r2)
 100ff44:	1005003a 	cmpeq	r2,r2,zero
 100ff48:	1000061e 	bne	r2,zero,100ff64 <alt_get_errno+0x3c>
 100ff4c:	00804074 	movhi	r2,257
 100ff50:	108e7504 	addi	r2,r2,14804
 100ff54:	10800017 	ldw	r2,0(r2)
 100ff58:	103ee83a 	callr	r2
 100ff5c:	e0bfff15 	stw	r2,-4(fp)
 100ff60:	00000306 	br	100ff70 <alt_get_errno+0x48>
 100ff64:	00804074 	movhi	r2,257
 100ff68:	10955304 	addi	r2,r2,21836
 100ff6c:	e0bfff15 	stw	r2,-4(fp)
 100ff70:	e0bfff17 	ldw	r2,-4(fp)
}
 100ff74:	e037883a 	mov	sp,fp
 100ff78:	dfc00117 	ldw	ra,4(sp)
 100ff7c:	df000017 	ldw	fp,0(sp)
 100ff80:	dec00204 	addi	sp,sp,8
 100ff84:	f800283a 	ret

0100ff88 <fifoed_avalon_uart_write>:
 * transfered to a circular buffer. The interrupt handler is then responsible
 * for copying data from this buffer into the device.
 */

int fifoed_avalon_uart_write (fifoed_avalon_uart_state* sp, const char* ptr, int len, int flags)
{
 100ff88:	defff204 	addi	sp,sp,-56
 100ff8c:	dfc00d15 	stw	ra,52(sp)
 100ff90:	df000c15 	stw	fp,48(sp)
 100ff94:	df000c04 	addi	fp,sp,48
 100ff98:	e13ffc15 	stw	r4,-16(fp)
 100ff9c:	e17ffd15 	stw	r5,-12(fp)
 100ffa0:	e1bffe15 	stw	r6,-8(fp)
 100ffa4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int count                = len;
 100ffa8:	e0bffe17 	ldw	r2,-8(fp)
 100ffac:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 100ffb0:	e0bfff17 	ldw	r2,-4(fp)
 100ffb4:	1090000c 	andi	r2,r2,16384
 100ffb8:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 100ffbc:	00004006 	br	10100c0 <fifoed_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 100ffc0:	e0bffc17 	ldw	r2,-16(fp)
 100ffc4:	10800517 	ldw	r2,20(r2)
 100ffc8:	10800044 	addi	r2,r2,1
 100ffcc:	10800fcc 	andi	r2,r2,63
 100ffd0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 100ffd4:	e0bffc17 	ldw	r2,-16(fp)
 100ffd8:	10c00417 	ldw	r3,16(r2)
 100ffdc:	e0bff917 	ldw	r2,-28(fp)
 100ffe0:	1880251e 	bne	r3,r2,1010078 <fifoed_avalon_uart_write+0xf0>
    {
      if (no_block)
 100ffe4:	e0bffa17 	ldw	r2,-24(fp)
 100ffe8:	1005003a 	cmpeq	r2,r2,zero
 100ffec:	1000051e 	bne	r2,zero,1010004 <fifoed_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 100fff0:	100ff280 	call	100ff28 <alt_get_errno>
 100fff4:	1007883a 	mov	r3,r2
 100fff8:	008002c4 	movi	r2,11
 100fffc:	18800015 	stw	r2,0(r3)
        break;
 1010000:	00003206 	br	10100cc <fifoed_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010004:	0005303a 	rdctl	r2,status
 1010008:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101000c:	e0fff717 	ldw	r3,-36(fp)
 1010010:	00bfff84 	movi	r2,-2
 1010014:	1884703a 	and	r2,r3,r2
 1010018:	1001703a 	wrctl	status,r2
  
  return context;
 101001c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 1010020:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 1010024:	e0bffc17 	ldw	r2,-16(fp)
 1010028:	10800117 	ldw	r2,4(r2)
 101002c:	10c11014 	ori	r3,r2,1088
 1010030:	e0bffc17 	ldw	r2,-16(fp)
 1010034:	10c00115 	stw	r3,4(r2)
                        FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1010038:	e0bffc17 	ldw	r2,-16(fp)
 101003c:	10800017 	ldw	r2,0(r2)
 1010040:	11000304 	addi	r4,r2,12
 1010044:	e0bffc17 	ldw	r2,-16(fp)
 1010048:	10800117 	ldw	r2,4(r2)
 101004c:	1007883a 	mov	r3,r2
 1010050:	2005883a 	mov	r2,r4
 1010054:	10c00035 	stwio	r3,0(r2)
 1010058:	e0bffb17 	ldw	r2,-20(fp)
 101005c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010060:	e0bff617 	ldw	r2,-40(fp)
 1010064:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events,
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 1010068:	e0bffc17 	ldw	r2,-16(fp)
 101006c:	10c00417 	ldw	r3,16(r2)
 1010070:	e0bff917 	ldw	r2,-28(fp)
 1010074:	18bffc26 	beq	r3,r2,1010068 <fifoed_avalon_uart_write+0xe0>
      }
    }

    count--;
 1010078:	e0bff817 	ldw	r2,-32(fp)
 101007c:	10bfffc4 	addi	r2,r2,-1
 1010080:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 1010084:	e0bffc17 	ldw	r2,-16(fp)
 1010088:	10c00517 	ldw	r3,20(r2)
 101008c:	e0bffd17 	ldw	r2,-12(fp)
 1010090:	10800003 	ldbu	r2,0(r2)
 1010094:	1009883a 	mov	r4,r2
 1010098:	e0bffc17 	ldw	r2,-16(fp)
 101009c:	1885883a 	add	r2,r3,r2
 10100a0:	10801704 	addi	r2,r2,92
 10100a4:	11000005 	stb	r4,0(r2)
 10100a8:	e0bffd17 	ldw	r2,-12(fp)
 10100ac:	10800044 	addi	r2,r2,1
 10100b0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 10100b4:	e0fffc17 	ldw	r3,-16(fp)
 10100b8:	e0bff917 	ldw	r2,-28(fp)
 10100bc:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 10100c0:	e0bff817 	ldw	r2,-32(fp)
 10100c4:	1004c03a 	cmpne	r2,r2,zero
 10100c8:	103fbd1e 	bne	r2,zero,100ffc0 <fifoed_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10100cc:	0005303a 	rdctl	r2,status
 10100d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10100d4:	e0fff517 	ldw	r3,-44(fp)
 10100d8:	00bfff84 	movi	r2,-2
 10100dc:	1884703a 	and	r2,r3,r2
 10100e0:	1001703a 	wrctl	status,r2
  
  return context;
 10100e4:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 10100e8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 10100ec:	e0bffc17 	ldw	r2,-16(fp)
 10100f0:	10800117 	ldw	r2,4(r2)
 10100f4:	10c11014 	ori	r3,r2,1088
 10100f8:	e0bffc17 	ldw	r2,-16(fp)
 10100fc:	10c00115 	stw	r3,4(r2)
                 FIFOED_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1010100:	e0bffc17 	ldw	r2,-16(fp)
 1010104:	10800017 	ldw	r2,0(r2)
 1010108:	11000304 	addi	r4,r2,12
 101010c:	e0bffc17 	ldw	r2,-16(fp)
 1010110:	10800117 	ldw	r2,4(r2)
 1010114:	1007883a 	mov	r3,r2
 1010118:	2005883a 	mov	r2,r4
 101011c:	10c00035 	stwio	r3,0(r2)
 1010120:	e0bffb17 	ldw	r2,-20(fp)
 1010124:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010128:	e0bff417 	ldw	r2,-48(fp)
 101012c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 1010130:	e0fffe17 	ldw	r3,-8(fp)
 1010134:	e0bff817 	ldw	r2,-32(fp)
 1010138:	1885c83a 	sub	r2,r3,r2
}
 101013c:	e037883a 	mov	sp,fp
 1010140:	dfc00117 	ldw	ra,4(sp)
 1010144:	df000017 	ldw	fp,0(sp)
 1010148:	dec00204 	addi	sp,sp,8
 101014c:	f800283a 	ret

01010150 <fifoed_avalon_uart_rxirq>:
 * dat ready to be processed.
 */

static void fifoed_avalon_uart_rxirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
 1010150:	defffc04 	addi	sp,sp,-16
 1010154:	df000315 	stw	fp,12(sp)
 1010158:	df000304 	addi	fp,sp,12
 101015c:	e13ffe15 	stw	r4,-8(fp)
 1010160:	e17fff15 	stw	r5,-4(fp)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
 1010164:	00002f06 	br	1010224 <fifoed_avalon_uart_rxirq+0xd4>
  if (sp->rx_end == sp->rx_start)
 1010168:	e0bffe17 	ldw	r2,-8(fp)
 101016c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 1010170:	e0bffe17 	ldw	r2,-8(fp)
 1010174:	10800317 	ldw	r2,12(r2)
 1010178:	10800044 	addi	r2,r2,1
 101017c:	10800fcc 	andi	r2,r2,63
 1010180:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_FIFOED_AVALON_UART_RXDATA(sp->base);
 1010184:	e0bffe17 	ldw	r2,-8(fp)
 1010188:	11000317 	ldw	r4,12(r2)
 101018c:	e0bffe17 	ldw	r2,-8(fp)
 1010190:	10800017 	ldw	r2,0(r2)
 1010194:	10800037 	ldwio	r2,0(r2)
 1010198:	1007883a 	mov	r3,r2
 101019c:	e0bffe17 	ldw	r2,-8(fp)
 10101a0:	2085883a 	add	r2,r4,r2
 10101a4:	10800704 	addi	r2,r2,28
 10101a8:	10c00005 	stb	r3,0(r2)
  /* If there was an error, discard the data */

// i have left this in tack but it is not necissarily right.
// next version of the fifo will track the errors in the fifo. 

  if (status & (FIFOED_AVALON_UART_STATUS_PE_MSK | 
 10101ac:	e0bfff17 	ldw	r2,-4(fp)
 10101b0:	108000cc 	andi	r2,r2,3
 10101b4:	1004c03a 	cmpne	r2,r2,zero
 10101b8:	1000211e 	bne	r2,zero,1010240 <fifoed_avalon_uart_rxirq+0xf0>
                  FIFOED_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  }

  sp->rx_end = next;
 10101bc:	e0fffe17 	ldw	r3,-8(fp)
 10101c0:	e0bffd17 	ldw	r2,-12(fp)
 10101c4:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & FIFOED_AVALON_UART_BUF_MSK;
 10101c8:	e0bffe17 	ldw	r2,-8(fp)
 10101cc:	10800317 	ldw	r2,12(r2)
 10101d0:	10800044 	addi	r2,r2,1
 10101d4:	10800fcc 	andi	r2,r2,63
 10101d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 10101dc:	e0bffe17 	ldw	r2,-8(fp)
 10101e0:	10c00217 	ldw	r3,8(r2)
 10101e4:	e0bffd17 	ldw	r2,-12(fp)
 10101e8:	18800e1e 	bne	r3,r2,1010224 <fifoed_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
 10101ec:	e0bffe17 	ldw	r2,-8(fp)
 10101f0:	10c00117 	ldw	r3,4(r2)
 10101f4:	00bfdfc4 	movi	r2,-129
 10101f8:	1886703a 	and	r3,r3,r2
 10101fc:	e0bffe17 	ldw	r2,-8(fp)
 1010200:	10c00115 	stw	r3,4(r2)
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1010204:	e0bffe17 	ldw	r2,-8(fp)
 1010208:	10800017 	ldw	r2,0(r2)
 101020c:	11000304 	addi	r4,r2,12
 1010210:	e0bffe17 	ldw	r2,-8(fp)
 1010214:	10800117 	ldw	r2,4(r2)
 1010218:	1007883a 	mov	r3,r2
 101021c:	2005883a 	mov	r2,r4
 1010220:	10c00035 	stwio	r3,0(r2)
   * previously empty.
   */
// allow to read as many as it can.
// (KN) fix the erronous status check (should be bit-wise AND rather than logical AND)
// while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) && FIFOED_AVALON_UART_STATUS_RRDY_MSK){
while ( IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_RRDY_MSK){
 1010224:	e0bffe17 	ldw	r2,-8(fp)
 1010228:	10800017 	ldw	r2,0(r2)
 101022c:	10800204 	addi	r2,r2,8
 1010230:	10800037 	ldwio	r2,0(r2)
 1010234:	1080200c 	andi	r2,r2,128
 1010238:	1004c03a 	cmpne	r2,r2,zero
 101023c:	103fca1e 	bne	r2,zero,1010168 <fifoed_avalon_uart_rxirq+0x18>
  {
    sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  }   
}
}
 1010240:	e037883a 	mov	sp,fp
 1010244:	df000017 	ldw	fp,0(sp)
 1010248:	dec00104 	addi	sp,sp,4
 101024c:	f800283a 	ret

01010250 <fifoed_avalon_uart_txirq>:
 * data ready to be processed.
 */

static void fifoed_avalon_uart_txirq (fifoed_avalon_uart_state* sp,
                                   alt_u32              status)
{
 1010250:	defffd04 	addi	sp,sp,-12
 1010254:	df000215 	stw	fp,8(sp)
 1010258:	df000204 	addi	fp,sp,8
 101025c:	e13ffe15 	stw	r4,-8(fp)
 1010260:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 1010264:	e0bffe17 	ldw	r2,-8(fp)
 1010268:	10c00417 	ldw	r3,16(r2)
 101026c:	e0bffe17 	ldw	r2,-8(fp)
 1010270:	10800517 	ldw	r2,20(r2)
 1010274:	18804326 	beq	r3,r2,1010384 <fifoed_avalon_uart_txirq+0x134>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
 1010278:	e0bffe17 	ldw	r2,-8(fp)
 101027c:	10800617 	ldw	r2,24(r2)
 1010280:	1080008c 	andi	r2,r2,2
 1010284:	1005003a 	cmpeq	r2,r2,zero
 1010288:	1000041e 	bne	r2,zero,101029c <fifoed_avalon_uart_txirq+0x4c>
 101028c:	e0bfff17 	ldw	r2,-4(fp)
 1010290:	1082000c 	andi	r2,r2,2048
 1010294:	1005003a 	cmpeq	r2,r2,zero
 1010298:	10002b1e 	bne	r2,zero,1010348 <fifoed_avalon_uart_txirq+0xf8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & FIFOED_AVALON_UART_BUF_MSK))
 101029c:	e0bffe17 	ldw	r2,-8(fp)
 10102a0:	10800417 	ldw	r2,16(r2)
 10102a4:	00001606 	br	1010300 <fifoed_avalon_uart_txirq+0xb0>
      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
          (IORD_FIFOED_AVALON_UART_STATUS(sp->base) & FIFOED_AVALON_UART_STATUS_TRDY_MSK))
          {
              IOWR_FIFOED_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 10102a8:	e0bffe17 	ldw	r2,-8(fp)
 10102ac:	10800017 	ldw	r2,0(r2)
 10102b0:	11000104 	addi	r4,r2,4
 10102b4:	e0bffe17 	ldw	r2,-8(fp)
 10102b8:	10c00417 	ldw	r3,16(r2)
 10102bc:	e0bffe17 	ldw	r2,-8(fp)
 10102c0:	1885883a 	add	r2,r3,r2
 10102c4:	10801704 	addi	r2,r2,92
 10102c8:	10800003 	ldbu	r2,0(r2)
 10102cc:	10c03fcc 	andi	r3,r2,255
 10102d0:	2005883a 	mov	r2,r4
 10102d4:	10c00035 	stwio	r3,0(r2)

              sp->tx_start = (++sp->tx_start) & FIFOED_AVALON_UART_BUF_MSK;
 10102d8:	e0bffe17 	ldw	r2,-8(fp)
 10102dc:	10800417 	ldw	r2,16(r2)
 10102e0:	10c00044 	addi	r3,r2,1
 10102e4:	e0bffe17 	ldw	r2,-8(fp)
 10102e8:	10c00415 	stw	r3,16(r2)
 10102ec:	e0bffe17 	ldw	r2,-8(fp)
 10102f0:	10800417 	ldw	r2,16(r2)
 10102f4:	10c00fcc 	andi	r3,r2,63
 10102f8:	e0bffe17 	ldw	r2,-8(fp)
 10102fc:	10c00415 	stw	r3,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */
      // updated to allow mutiple writes here if the fifos are enabled.
       while ((sp->tx_start != sp->tx_end) &&
 1010300:	e0bffe17 	ldw	r2,-8(fp)
 1010304:	10c00417 	ldw	r3,16(r2)
 1010308:	e0bffe17 	ldw	r2,-8(fp)
 101030c:	10800517 	ldw	r2,20(r2)
 1010310:	18800726 	beq	r3,r2,1010330 <fifoed_avalon_uart_txirq+0xe0>
 1010314:	e0bffe17 	ldw	r2,-8(fp)
 1010318:	10800017 	ldw	r2,0(r2)
 101031c:	10800204 	addi	r2,r2,8
 1010320:	10800037 	ldwio	r2,0(r2)
 1010324:	1080100c 	andi	r2,r2,64
 1010328:	1004c03a 	cmpne	r2,r2,zero
 101032c:	103fde1e 	bne	r2,zero,10102a8 <fifoed_avalon_uart_txirq+0x58>
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
 1010330:	e0bffe17 	ldw	r2,-8(fp)
 1010334:	10800117 	ldw	r2,4(r2)
 1010338:	10c01014 	ori	r3,r2,64
 101033c:	e0bffe17 	ldw	r2,-8(fp)
 1010340:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & FIFOED_AVALON_UART_FC) ||
 1010344:	00000f06 	br	1010384 <fifoed_avalon_uart_txirq+0x134>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_FIFOED_AVALON_UART_STATUS(sp->base);
 1010348:	e0bffe17 	ldw	r2,-8(fp)
 101034c:	10800017 	ldw	r2,0(r2)
 1010350:	10800204 	addi	r2,r2,8
 1010354:	10800037 	ldwio	r2,0(r2)
 1010358:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & FIFOED_AVALON_UART_STATUS_CTS_MSK))
 101035c:	e0bfff17 	ldw	r2,-4(fp)
 1010360:	1082000c 	andi	r2,r2,2048
 1010364:	1004c03a 	cmpne	r2,r2,zero
 1010368:	1000061e 	bne	r2,zero,1010384 <fifoed_avalon_uart_txirq+0x134>
      {
        sp->ctrl &= ~FIFOED_AVALON_UART_CONTROL_TRDY_MSK;
 101036c:	e0bffe17 	ldw	r2,-8(fp)
 1010370:	10c00117 	ldw	r3,4(r2)
 1010374:	00bfefc4 	movi	r2,-65
 1010378:	1886703a 	and	r3,r3,r2
 101037c:	e0bffe17 	ldw	r2,-8(fp)
 1010380:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 1010384:	e0bffe17 	ldw	r2,-8(fp)
 1010388:	10c00417 	ldw	r3,16(r2)
 101038c:	e0bffe17 	ldw	r2,-8(fp)
 1010390:	10800517 	ldw	r2,20(r2)
 1010394:	1880061e 	bne	r3,r2,10103b0 <fifoed_avalon_uart_txirq+0x160>
  {
    sp->ctrl &= ~(FIFOED_AVALON_UART_CONTROL_TRDY_MSK |
 1010398:	e0bffe17 	ldw	r2,-8(fp)
 101039c:	10c00117 	ldw	r3,4(r2)
 10103a0:	00beefc4 	movi	r2,-1089
 10103a4:	1886703a 	and	r3,r3,r2
 10103a8:	e0bffe17 	ldw	r2,-8(fp)
 10103ac:	10c00115 	stw	r3,4(r2)
                    FIFOED_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_FIFOED_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 10103b0:	e0bffe17 	ldw	r2,-8(fp)
 10103b4:	10800017 	ldw	r2,0(r2)
 10103b8:	11000304 	addi	r4,r2,12
 10103bc:	e0bffe17 	ldw	r2,-8(fp)
 10103c0:	10800117 	ldw	r2,4(r2)
 10103c4:	1007883a 	mov	r3,r2
 10103c8:	2005883a 	mov	r2,r4
 10103cc:	10c00035 	stwio	r3,0(r2)
}
 10103d0:	e037883a 	mov	sp,fp
 10103d4:	df000017 	ldw	fp,0(sp)
 10103d8:	dec00104 	addi	sp,sp,4
 10103dc:	f800283a 	ret

010103e0 <fifoed_avalon_uart_irq>:
 #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void fifoed_avalon_uart_irq(void* context)
#else
static void fifoed_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 10103e0:	defffa04 	addi	sp,sp,-24
 10103e4:	dfc00515 	stw	ra,20(sp)
 10103e8:	df000415 	stw	fp,16(sp)
 10103ec:	df000404 	addi	fp,sp,16
 10103f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  fifoed_avalon_uart_state* sp = (fifoed_avalon_uart_state*) context;
 10103f4:	e0bfff17 	ldw	r2,-4(fp)
 10103f8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 10103fc:	e0bffd17 	ldw	r2,-12(fp)
 1010400:	10800017 	ldw	r2,0(r2)
 1010404:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_FIFOED_AVALON_UART_STATUS(base);
 1010408:	e0bffc17 	ldw	r2,-16(fp)
 101040c:	10800204 	addi	r2,r2,8
 1010410:	10800037 	ldwio	r2,0(r2)
 1010414:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */

  IOWR_FIFOED_AVALON_UART_STATUS(base, 0);
 1010418:	e0bffc17 	ldw	r2,-16(fp)
 101041c:	10800204 	addi	r2,r2,8
 1010420:	10000035 	stwio	zero,0(r2)

  /* process a read irq */
 
  if (status & FIFOED_AVALON_UART_STATUS_RRDY_MSK)
 1010424:	e0bffe17 	ldw	r2,-8(fp)
 1010428:	1080200c 	andi	r2,r2,128
 101042c:	1005003a 	cmpeq	r2,r2,zero
 1010430:	1000031e 	bne	r2,zero,1010440 <fifoed_avalon_uart_irq+0x60>
  {
    fifoed_avalon_uart_rxirq (sp, status);
 1010434:	e13ffd17 	ldw	r4,-12(fp)
 1010438:	e17ffe17 	ldw	r5,-8(fp)
 101043c:	10101500 	call	1010150 <fifoed_avalon_uart_rxirq>
  }

  /* process a write irq */

  if (status & (FIFOED_AVALON_UART_STATUS_TRDY_MSK | 
 1010440:	e0bffe17 	ldw	r2,-8(fp)
 1010444:	1081100c 	andi	r2,r2,1088
 1010448:	1005003a 	cmpeq	r2,r2,zero
 101044c:	1000031e 	bne	r2,zero,101045c <fifoed_avalon_uart_irq+0x7c>
                  FIFOED_AVALON_UART_STATUS_DCTS_MSK))
  {
    fifoed_avalon_uart_txirq (sp, status);
 1010450:	e13ffd17 	ldw	r4,-12(fp)
 1010454:	e17ffe17 	ldw	r5,-8(fp)
 1010458:	10102500 	call	1010250 <fifoed_avalon_uart_txirq>
  }
}
 101045c:	e037883a 	mov	sp,fp
 1010460:	dfc00117 	ldw	ra,4(sp)
 1010464:	df000017 	ldw	fp,0(sp)
 1010468:	dec00204 	addi	sp,sp,8
 101046c:	f800283a 	ret

01010470 <fifoed_avalon_uart_init>:
 * through a call to alt_dev_reg().
 */

void fifoed_avalon_uart_init (fifoed_avalon_uart_state* sp,alt_u32 irq_controller_id,
      alt_u32 irq)
{
 1010470:	defff704 	addi	sp,sp,-36
 1010474:	dfc00815 	stw	ra,32(sp)
 1010478:	df000715 	stw	fp,28(sp)
 101047c:	df000704 	addi	fp,sp,28
 1010480:	e13ffc15 	stw	r4,-16(fp)
 1010484:	e17ffd15 	stw	r5,-12(fp)
 1010488:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 101048c:	e0bffc17 	ldw	r2,-16(fp)
 1010490:	10800017 	ldw	r2,0(r2)
 1010494:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 1010498:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */

  error = ALT_FLAG_CREATE (&sp->events, 0)    ||
 101049c:	1004c03a 	cmpne	r2,r2,zero
 10104a0:	1000061e 	bne	r2,zero,10104bc <fifoed_avalon_uart_init+0x4c>
 10104a4:	0005883a 	mov	r2,zero
 10104a8:	1004c03a 	cmpne	r2,r2,zero
 10104ac:	1000031e 	bne	r2,zero,10104bc <fifoed_avalon_uart_init+0x4c>
 10104b0:	0005883a 	mov	r2,zero
 10104b4:	1005003a 	cmpeq	r2,r2,zero
 10104b8:	1000031e 	bne	r2,zero,10104c8 <fifoed_avalon_uart_init+0x58>
 10104bc:	00800044 	movi	r2,1
 10104c0:	e0bfff15 	stw	r2,-4(fp)
 10104c4:	00000106 	br	10104cc <fifoed_avalon_uart_init+0x5c>
 10104c8:	e03fff15 	stw	zero,-4(fp)
 10104cc:	e0bfff17 	ldw	r2,-4(fp)
 10104d0:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)   ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 10104d4:	e0bffa17 	ldw	r2,-24(fp)
 10104d8:	1004c03a 	cmpne	r2,r2,zero
 10104dc:	1000111e 	bne	r2,zero,1010524 <fifoed_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */

    sp->ctrl = FIFOED_AVALON_UART_CONTROL_RTS_MSK  |
 10104e0:	e0fffc17 	ldw	r3,-16(fp)
 10104e4:	00832004 	movi	r2,3200
 10104e8:	18800115 	stw	r2,4(r3)
                FIFOED_AVALON_UART_CONTROL_RRDY_MSK |
                FIFOED_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_FIFOED_AVALON_UART_CONTROL(base, sp->ctrl);
 10104ec:	e0bffb17 	ldw	r2,-20(fp)
 10104f0:	11000304 	addi	r4,r2,12
 10104f4:	e0bffc17 	ldw	r2,-16(fp)
 10104f8:	10800117 	ldw	r2,4(r2)
 10104fc:	1007883a 	mov	r3,r2
 1010500:	2005883a 	mov	r2,r4
 1010504:	10c00035 	stwio	r3,0(r2)

    /* register the interrupt handler */

//    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, fifoed_avalon_uart_irq, sp,
 1010508:	d8000015 	stw	zero,0(sp)
 101050c:	e13ffd17 	ldw	r4,-12(fp)
 1010510:	e17ffe17 	ldw	r5,-8(fp)
 1010514:	01804074 	movhi	r6,257
 1010518:	3180f804 	addi	r6,r6,992
 101051c:	e1fffc17 	ldw	r7,-16(fp)
 1010520:	1010d140 	call	1010d14 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, fifoed_avalon_uart_irq);
#endif
  }
}
 1010524:	e037883a 	mov	sp,fp
 1010528:	dfc00117 	ldw	ra,4(sp)
 101052c:	df000017 	ldw	fp,0(sp)
 1010530:	dec00204 	addi	sp,sp,8
 1010534:	f800283a 	ret

01010538 <fifoed_avalon_uart_classic_read>:
extern int fifoed_avalon_uart_ioctl(fifoed_avalon_uart_state* sp,
  int req, void* arg);

int fifoed_avalon_uart_classic_read(fifoed_avalon_uart_state* sp,
  char* buffer, int space, int flags)
  {
 1010538:	defffa04 	addi	sp,sp,-24
 101053c:	dfc00515 	stw	ra,20(sp)
 1010540:	df000415 	stw	fp,16(sp)
 1010544:	df000404 	addi	fp,sp,16
 1010548:	e13ffc15 	stw	r4,-16(fp)
 101054c:	e17ffd15 	stw	r5,-12(fp)
 1010550:	e1bffe15 	stw	r6,-8(fp)
 1010554:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_read( sp,
 1010558:	e13ffc17 	ldw	r4,-16(fp)
 101055c:	e17ffd17 	ldw	r5,-12(fp)
 1010560:	e1bffe17 	ldw	r6,-8(fp)
 1010564:	e1ffff17 	ldw	r7,-4(fp)
 1010568:	100fd340 	call	100fd34 <fifoed_avalon_uart_read>
  buffer, space,  flags);
  }
 101056c:	e037883a 	mov	sp,fp
 1010570:	dfc00117 	ldw	ra,4(sp)
 1010574:	df000017 	ldw	fp,0(sp)
 1010578:	dec00204 	addi	sp,sp,8
 101057c:	f800283a 	ret

01010580 <fifoed_avalon_uart_classic_write>:

  int fifoed_avalon_uart_classic_write(fifoed_avalon_uart_state* sp,
  const char* ptr, int count, int flags)
  {
 1010580:	defffa04 	addi	sp,sp,-24
 1010584:	dfc00515 	stw	ra,20(sp)
 1010588:	df000415 	stw	fp,16(sp)
 101058c:	df000404 	addi	fp,sp,16
 1010590:	e13ffc15 	stw	r4,-16(fp)
 1010594:	e17ffd15 	stw	r5,-12(fp)
 1010598:	e1bffe15 	stw	r6,-8(fp)
 101059c:	e1ffff15 	stw	r7,-4(fp)
     return fifoed_avalon_uart_write( sp,
 10105a0:	e13ffc17 	ldw	r4,-16(fp)
 10105a4:	e17ffd17 	ldw	r5,-12(fp)
 10105a8:	e1bffe17 	ldw	r6,-8(fp)
 10105ac:	e1ffff17 	ldw	r7,-4(fp)
 10105b0:	100ff880 	call	100ff88 <fifoed_avalon_uart_write>
  ptr, count,  flags);
  }
 10105b4:	e037883a 	mov	sp,fp
 10105b8:	dfc00117 	ldw	ra,4(sp)
 10105bc:	df000017 	ldw	fp,0(sp)
 10105c0:	dec00204 	addi	sp,sp,8
 10105c4:	f800283a 	ret

010105c8 <fifoed_avalon_uart_read_fd>:
 *
 */

int
fifoed_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10105c8:	defffa04 	addi	sp,sp,-24
 10105cc:	dfc00515 	stw	ra,20(sp)
 10105d0:	df000415 	stw	fp,16(sp)
 10105d4:	df000404 	addi	fp,sp,16
 10105d8:	e13ffd15 	stw	r4,-12(fp)
 10105dc:	e17ffe15 	stw	r5,-8(fp)
 10105e0:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 10105e4:	e0bffd17 	ldw	r2,-12(fp)
 10105e8:	10800017 	ldw	r2,0(r2)
 10105ec:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
 10105f0:	e0bffc17 	ldw	r2,-16(fp)
 10105f4:	11000a04 	addi	r4,r2,40
 10105f8:	e0bffd17 	ldw	r2,-12(fp)
 10105fc:	11c00217 	ldw	r7,8(r2)
 1010600:	e17ffe17 	ldw	r5,-8(fp)
 1010604:	e1bfff17 	ldw	r6,-4(fp)
 1010608:	100fd340 	call	100fd34 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
 101060c:	e037883a 	mov	sp,fp
 1010610:	dfc00117 	ldw	ra,4(sp)
 1010614:	df000017 	ldw	fp,0(sp)
 1010618:	dec00204 	addi	sp,sp,8
 101061c:	f800283a 	ret

01010620 <fifoed_avalon_uart_write_fd>:

int
fifoed_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1010620:	defffa04 	addi	sp,sp,-24
 1010624:	dfc00515 	stw	ra,20(sp)
 1010628:	df000415 	stw	fp,16(sp)
 101062c:	df000404 	addi	fp,sp,16
 1010630:	e13ffd15 	stw	r4,-12(fp)
 1010634:	e17ffe15 	stw	r5,-8(fp)
 1010638:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 101063c:	e0bffd17 	ldw	r2,-12(fp)
 1010640:	10800017 	ldw	r2,0(r2)
 1010644:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
 1010648:	e0bffc17 	ldw	r2,-16(fp)
 101064c:	11000a04 	addi	r4,r2,40
 1010650:	e0bffd17 	ldw	r2,-12(fp)
 1010654:	11c00217 	ldw	r7,8(r2)
 1010658:	e17ffe17 	ldw	r5,-8(fp)
 101065c:	e1bfff17 	ldw	r6,-4(fp)
 1010660:	100ff880 	call	100ff88 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
 1010664:	e037883a 	mov	sp,fp
 1010668:	dfc00117 	ldw	ra,4(sp)
 101066c:	df000017 	ldw	fp,0(sp)
 1010670:	dec00204 	addi	sp,sp,8
 1010674:	f800283a 	ret

01010678 <fifoed_avalon_uart_classic_read_fd>:
int
 fifoed_avalon_uart_classic_read_fd(alt_fd* fd, char* buffer, int space)
{
 1010678:	defffa04 	addi	sp,sp,-24
 101067c:	dfc00515 	stw	ra,20(sp)
 1010680:	df000415 	stw	fp,16(sp)
 1010684:	df000404 	addi	fp,sp,16
 1010688:	e13ffd15 	stw	r4,-12(fp)
 101068c:	e17ffe15 	stw	r5,-8(fp)
 1010690:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 1010694:	e0bffd17 	ldw	r2,-12(fp)
 1010698:	10800017 	ldw	r2,0(r2)
 101069c:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_read(&dev->state, buffer, space,
 10106a0:	e0bffc17 	ldw	r2,-16(fp)
 10106a4:	11000a04 	addi	r4,r2,40
 10106a8:	e0bffd17 	ldw	r2,-12(fp)
 10106ac:	11c00217 	ldw	r7,8(r2)
 10106b0:	e17ffe17 	ldw	r5,-8(fp)
 10106b4:	e1bfff17 	ldw	r6,-4(fp)
 10106b8:	100fd340 	call	100fd34 <fifoed_avalon_uart_read>
      fd->fd_flags);
}
 10106bc:	e037883a 	mov	sp,fp
 10106c0:	dfc00117 	ldw	ra,4(sp)
 10106c4:	df000017 	ldw	fp,0(sp)
 10106c8:	dec00204 	addi	sp,sp,8
 10106cc:	f800283a 	ret

010106d0 <fifoed_avalon_uart_classic_write_fd>:

int
fifoed_avalon_uart_classic_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10106d0:	defffa04 	addi	sp,sp,-24
 10106d4:	dfc00515 	stw	ra,20(sp)
 10106d8:	df000415 	stw	fp,16(sp)
 10106dc:	df000404 	addi	fp,sp,16
 10106e0:	e13ffd15 	stw	r4,-12(fp)
 10106e4:	e17ffe15 	stw	r5,-8(fp)
 10106e8:	e1bfff15 	stw	r6,-4(fp)
    fifoed_avalon_uart_dev* dev = (fifoed_avalon_uart_dev*) fd->dev;
 10106ec:	e0bffd17 	ldw	r2,-12(fp)
 10106f0:	10800017 	ldw	r2,0(r2)
 10106f4:	e0bffc15 	stw	r2,-16(fp)

    return fifoed_avalon_uart_write(&dev->state, buffer, space,
 10106f8:	e0bffc17 	ldw	r2,-16(fp)
 10106fc:	11000a04 	addi	r4,r2,40
 1010700:	e0bffd17 	ldw	r2,-12(fp)
 1010704:	11c00217 	ldw	r7,8(r2)
 1010708:	e17ffe17 	ldw	r5,-8(fp)
 101070c:	e1bfff17 	ldw	r6,-4(fp)
 1010710:	100ff880 	call	100ff88 <fifoed_avalon_uart_write>
      fd->fd_flags);
}
 1010714:	e037883a 	mov	sp,fp
 1010718:	dfc00117 	ldw	ra,4(sp)
 101071c:	df000017 	ldw	fp,0(sp)
 1010720:	dec00204 	addi	sp,sp,8
 1010724:	f800283a 	ret

01010728 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1010728:	defff404 	addi	sp,sp,-48
 101072c:	df000b15 	stw	fp,44(sp)
 1010730:	df000b04 	addi	fp,sp,44
 1010734:	e13ffb15 	stw	r4,-20(fp)
 1010738:	e17ffc15 	stw	r5,-16(fp)
 101073c:	e1bffd15 	stw	r6,-12(fp)
 1010740:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1010744:	e03ff915 	stw	zero,-28(fp)
 1010748:	00804074 	movhi	r2,257
 101074c:	10955e04 	addi	r2,r2,21880
 1010750:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1010754:	1005003a 	cmpeq	r2,r2,zero
 1010758:	1000411e 	bne	r2,zero,1010860 <alt_alarm_start+0x138>
  {
    if (alarm)
 101075c:	e0bffb17 	ldw	r2,-20(fp)
 1010760:	1005003a 	cmpeq	r2,r2,zero
 1010764:	10003b1e 	bne	r2,zero,1010854 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1010768:	e0fffb17 	ldw	r3,-20(fp)
 101076c:	e0bffd17 	ldw	r2,-12(fp)
 1010770:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1010774:	e0fffb17 	ldw	r3,-20(fp)
 1010778:	e0bffe17 	ldw	r2,-8(fp)
 101077c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010780:	0005303a 	rdctl	r2,status
 1010784:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010788:	e0fff817 	ldw	r3,-32(fp)
 101078c:	00bfff84 	movi	r2,-2
 1010790:	1884703a 	and	r2,r3,r2
 1010794:	1001703a 	wrctl	status,r2
  
  return context;
 1010798:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101079c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10107a0:	00804074 	movhi	r2,257
 10107a4:	10955f04 	addi	r2,r2,21884
 10107a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10107ac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10107b0:	e0fffc17 	ldw	r3,-16(fp)
 10107b4:	e0bff917 	ldw	r2,-28(fp)
 10107b8:	1885883a 	add	r2,r3,r2
 10107bc:	10c00044 	addi	r3,r2,1
 10107c0:	e0bffb17 	ldw	r2,-20(fp)
 10107c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10107c8:	e0bffb17 	ldw	r2,-20(fp)
 10107cc:	10c00217 	ldw	r3,8(r2)
 10107d0:	e0bff917 	ldw	r2,-28(fp)
 10107d4:	1880042e 	bgeu	r3,r2,10107e8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10107d8:	e0fffb17 	ldw	r3,-20(fp)
 10107dc:	00800044 	movi	r2,1
 10107e0:	18800405 	stb	r2,16(r3)
 10107e4:	00000206 	br	10107f0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10107e8:	e0bffb17 	ldw	r2,-20(fp)
 10107ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10107f0:	e0fffb17 	ldw	r3,-20(fp)
 10107f4:	00804074 	movhi	r2,257
 10107f8:	108e7804 	addi	r2,r2,14816
 10107fc:	e0bff615 	stw	r2,-40(fp)
 1010800:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010804:	e0fff717 	ldw	r3,-36(fp)
 1010808:	e0bff617 	ldw	r2,-40(fp)
 101080c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010810:	e0bff617 	ldw	r2,-40(fp)
 1010814:	10c00017 	ldw	r3,0(r2)
 1010818:	e0bff717 	ldw	r2,-36(fp)
 101081c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010820:	e0bff617 	ldw	r2,-40(fp)
 1010824:	10c00017 	ldw	r3,0(r2)
 1010828:	e0bff717 	ldw	r2,-36(fp)
 101082c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010830:	e0fff617 	ldw	r3,-40(fp)
 1010834:	e0bff717 	ldw	r2,-36(fp)
 1010838:	18800015 	stw	r2,0(r3)
 101083c:	e0bffa17 	ldw	r2,-24(fp)
 1010840:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010844:	e0bff517 	ldw	r2,-44(fp)
 1010848:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101084c:	e03fff15 	stw	zero,-4(fp)
 1010850:	00000506 	br	1010868 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1010854:	00bffa84 	movi	r2,-22
 1010858:	e0bfff15 	stw	r2,-4(fp)
 101085c:	00000206 	br	1010868 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1010860:	00bfde84 	movi	r2,-134
 1010864:	e0bfff15 	stw	r2,-4(fp)
 1010868:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101086c:	e037883a 	mov	sp,fp
 1010870:	df000017 	ldw	fp,0(sp)
 1010874:	dec00104 	addi	sp,sp,4
 1010878:	f800283a 	ret

0101087c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101087c:	deffff04 	addi	sp,sp,-4
 1010880:	df000015 	stw	fp,0(sp)
 1010884:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1010888:	e037883a 	mov	sp,fp
 101088c:	df000017 	ldw	fp,0(sp)
 1010890:	dec00104 	addi	sp,sp,4
 1010894:	f800283a 	ret

01010898 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1010898:	defff904 	addi	sp,sp,-28
 101089c:	dfc00615 	stw	ra,24(sp)
 10108a0:	df000515 	stw	fp,20(sp)
 10108a4:	df000504 	addi	fp,sp,20
 10108a8:	e13ffd15 	stw	r4,-12(fp)
 10108ac:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10108b0:	e0bffd17 	ldw	r2,-12(fp)
 10108b4:	1005003a 	cmpeq	r2,r2,zero
 10108b8:	1000041e 	bne	r2,zero,10108cc <alt_dev_llist_insert+0x34>
 10108bc:	e0bffd17 	ldw	r2,-12(fp)
 10108c0:	10800217 	ldw	r2,8(r2)
 10108c4:	1004c03a 	cmpne	r2,r2,zero
 10108c8:	1000071e 	bne	r2,zero,10108e8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10108cc:	101094c0 	call	101094c <alt_get_errno>
 10108d0:	1007883a 	mov	r3,r2
 10108d4:	00800584 	movi	r2,22
 10108d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10108dc:	00bffa84 	movi	r2,-22
 10108e0:	e0bfff15 	stw	r2,-4(fp)
 10108e4:	00001306 	br	1010934 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10108e8:	e0fffd17 	ldw	r3,-12(fp)
 10108ec:	e0bffe17 	ldw	r2,-8(fp)
 10108f0:	e0bffb15 	stw	r2,-20(fp)
 10108f4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10108f8:	e0fffc17 	ldw	r3,-16(fp)
 10108fc:	e0bffb17 	ldw	r2,-20(fp)
 1010900:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010904:	e0bffb17 	ldw	r2,-20(fp)
 1010908:	10c00017 	ldw	r3,0(r2)
 101090c:	e0bffc17 	ldw	r2,-16(fp)
 1010910:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010914:	e0bffb17 	ldw	r2,-20(fp)
 1010918:	10c00017 	ldw	r3,0(r2)
 101091c:	e0bffc17 	ldw	r2,-16(fp)
 1010920:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010924:	e0fffb17 	ldw	r3,-20(fp)
 1010928:	e0bffc17 	ldw	r2,-16(fp)
 101092c:	18800015 	stw	r2,0(r3)

  return 0;  
 1010930:	e03fff15 	stw	zero,-4(fp)
 1010934:	e0bfff17 	ldw	r2,-4(fp)
}
 1010938:	e037883a 	mov	sp,fp
 101093c:	dfc00117 	ldw	ra,4(sp)
 1010940:	df000017 	ldw	fp,0(sp)
 1010944:	dec00204 	addi	sp,sp,8
 1010948:	f800283a 	ret

0101094c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101094c:	defffd04 	addi	sp,sp,-12
 1010950:	dfc00215 	stw	ra,8(sp)
 1010954:	df000115 	stw	fp,4(sp)
 1010958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101095c:	00804074 	movhi	r2,257
 1010960:	108e7504 	addi	r2,r2,14804
 1010964:	10800017 	ldw	r2,0(r2)
 1010968:	1005003a 	cmpeq	r2,r2,zero
 101096c:	1000061e 	bne	r2,zero,1010988 <alt_get_errno+0x3c>
 1010970:	00804074 	movhi	r2,257
 1010974:	108e7504 	addi	r2,r2,14804
 1010978:	10800017 	ldw	r2,0(r2)
 101097c:	103ee83a 	callr	r2
 1010980:	e0bfff15 	stw	r2,-4(fp)
 1010984:	00000306 	br	1010994 <alt_get_errno+0x48>
 1010988:	00804074 	movhi	r2,257
 101098c:	10955304 	addi	r2,r2,21836
 1010990:	e0bfff15 	stw	r2,-4(fp)
 1010994:	e0bfff17 	ldw	r2,-4(fp)
}
 1010998:	e037883a 	mov	sp,fp
 101099c:	dfc00117 	ldw	ra,4(sp)
 10109a0:	df000017 	ldw	fp,0(sp)
 10109a4:	dec00204 	addi	sp,sp,8
 10109a8:	f800283a 	ret

010109ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10109ac:	defffd04 	addi	sp,sp,-12
 10109b0:	dfc00215 	stw	ra,8(sp)
 10109b4:	df000115 	stw	fp,4(sp)
 10109b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10109bc:	00bfff04 	movi	r2,-4
 10109c0:	00c04074 	movhi	r3,257
 10109c4:	18c5ca04 	addi	r3,r3,5928
 10109c8:	1885883a 	add	r2,r3,r2
 10109cc:	e0bfff15 	stw	r2,-4(fp)
 10109d0:	00000606 	br	10109ec <_do_ctors+0x40>
        (*ctor) (); 
 10109d4:	e0bfff17 	ldw	r2,-4(fp)
 10109d8:	10800017 	ldw	r2,0(r2)
 10109dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10109e0:	e0bfff17 	ldw	r2,-4(fp)
 10109e4:	10bfff04 	addi	r2,r2,-4
 10109e8:	e0bfff15 	stw	r2,-4(fp)
 10109ec:	e0ffff17 	ldw	r3,-4(fp)
 10109f0:	00804074 	movhi	r2,257
 10109f4:	1085c804 	addi	r2,r2,5920
 10109f8:	18bff62e 	bgeu	r3,r2,10109d4 <_do_ctors+0x28>
        (*ctor) (); 
}
 10109fc:	e037883a 	mov	sp,fp
 1010a00:	dfc00117 	ldw	ra,4(sp)
 1010a04:	df000017 	ldw	fp,0(sp)
 1010a08:	dec00204 	addi	sp,sp,8
 1010a0c:	f800283a 	ret

01010a10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010a10:	defffd04 	addi	sp,sp,-12
 1010a14:	dfc00215 	stw	ra,8(sp)
 1010a18:	df000115 	stw	fp,4(sp)
 1010a1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010a20:	00bfff04 	movi	r2,-4
 1010a24:	00c04074 	movhi	r3,257
 1010a28:	18c5ca04 	addi	r3,r3,5928
 1010a2c:	1885883a 	add	r2,r3,r2
 1010a30:	e0bfff15 	stw	r2,-4(fp)
 1010a34:	00000606 	br	1010a50 <_do_dtors+0x40>
        (*dtor) (); 
 1010a38:	e0bfff17 	ldw	r2,-4(fp)
 1010a3c:	10800017 	ldw	r2,0(r2)
 1010a40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010a44:	e0bfff17 	ldw	r2,-4(fp)
 1010a48:	10bfff04 	addi	r2,r2,-4
 1010a4c:	e0bfff15 	stw	r2,-4(fp)
 1010a50:	e0ffff17 	ldw	r3,-4(fp)
 1010a54:	00804074 	movhi	r2,257
 1010a58:	1085ca04 	addi	r2,r2,5928
 1010a5c:	18bff62e 	bgeu	r3,r2,1010a38 <_do_dtors+0x28>
        (*dtor) (); 
}
 1010a60:	e037883a 	mov	sp,fp
 1010a64:	dfc00117 	ldw	ra,4(sp)
 1010a68:	df000017 	ldw	fp,0(sp)
 1010a6c:	dec00204 	addi	sp,sp,8
 1010a70:	f800283a 	ret

01010a74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1010a74:	defff904 	addi	sp,sp,-28
 1010a78:	dfc00615 	stw	ra,24(sp)
 1010a7c:	df000515 	stw	fp,20(sp)
 1010a80:	df000504 	addi	fp,sp,20
 1010a84:	e13ffd15 	stw	r4,-12(fp)
 1010a88:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1010a8c:	e0bffe17 	ldw	r2,-8(fp)
 1010a90:	10800017 	ldw	r2,0(r2)
 1010a94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1010a98:	e13ffd17 	ldw	r4,-12(fp)
 1010a9c:	1005c680 	call	1005c68 <strlen>
 1010aa0:	10800044 	addi	r2,r2,1
 1010aa4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010aa8:	00000d06 	br	1010ae0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1010aac:	e0bffc17 	ldw	r2,-16(fp)
 1010ab0:	11000217 	ldw	r4,8(r2)
 1010ab4:	e1bffb17 	ldw	r6,-20(fp)
 1010ab8:	e17ffd17 	ldw	r5,-12(fp)
 1010abc:	10113400 	call	1011340 <memcmp>
 1010ac0:	1004c03a 	cmpne	r2,r2,zero
 1010ac4:	1000031e 	bne	r2,zero,1010ad4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1010ac8:	e0bffc17 	ldw	r2,-16(fp)
 1010acc:	e0bfff15 	stw	r2,-4(fp)
 1010ad0:	00000706 	br	1010af0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1010ad4:	e0bffc17 	ldw	r2,-16(fp)
 1010ad8:	10800017 	ldw	r2,0(r2)
 1010adc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010ae0:	e0fffe17 	ldw	r3,-8(fp)
 1010ae4:	e0bffc17 	ldw	r2,-16(fp)
 1010ae8:	10fff01e 	bne	r2,r3,1010aac <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1010aec:	e03fff15 	stw	zero,-4(fp)
 1010af0:	e0bfff17 	ldw	r2,-4(fp)
}
 1010af4:	e037883a 	mov	sp,fp
 1010af8:	dfc00117 	ldw	ra,4(sp)
 1010afc:	df000017 	ldw	fp,0(sp)
 1010b00:	dec00204 	addi	sp,sp,8
 1010b04:	f800283a 	ret

01010b08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1010b08:	defffa04 	addi	sp,sp,-24
 1010b0c:	dfc00515 	stw	ra,20(sp)
 1010b10:	df000415 	stw	fp,16(sp)
 1010b14:	df000404 	addi	fp,sp,16
 1010b18:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1010b1c:	00804074 	movhi	r2,257
 1010b20:	108e7004 	addi	r2,r2,14784
 1010b24:	10800017 	ldw	r2,0(r2)
 1010b28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010b2c:	00003306 	br	1010bfc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1010b30:	e0bffd17 	ldw	r2,-12(fp)
 1010b34:	11000217 	ldw	r4,8(r2)
 1010b38:	1005c680 	call	1005c68 <strlen>
 1010b3c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1010b40:	e0bffd17 	ldw	r2,-12(fp)
 1010b44:	10c00217 	ldw	r3,8(r2)
 1010b48:	e0bffc17 	ldw	r2,-16(fp)
 1010b4c:	1885883a 	add	r2,r3,r2
 1010b50:	10bfffc4 	addi	r2,r2,-1
 1010b54:	10800003 	ldbu	r2,0(r2)
 1010b58:	10803fcc 	andi	r2,r2,255
 1010b5c:	1080201c 	xori	r2,r2,128
 1010b60:	10bfe004 	addi	r2,r2,-128
 1010b64:	10800bd8 	cmpnei	r2,r2,47
 1010b68:	1000031e 	bne	r2,zero,1010b78 <alt_find_file+0x70>
    {
      len -= 1;
 1010b6c:	e0bffc17 	ldw	r2,-16(fp)
 1010b70:	10bfffc4 	addi	r2,r2,-1
 1010b74:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1010b78:	e0bffc17 	ldw	r2,-16(fp)
 1010b7c:	1007883a 	mov	r3,r2
 1010b80:	e0bffe17 	ldw	r2,-8(fp)
 1010b84:	1885883a 	add	r2,r3,r2
 1010b88:	10800003 	ldbu	r2,0(r2)
 1010b8c:	10803fcc 	andi	r2,r2,255
 1010b90:	1080201c 	xori	r2,r2,128
 1010b94:	10bfe004 	addi	r2,r2,-128
 1010b98:	10800be0 	cmpeqi	r2,r2,47
 1010b9c:	10000a1e 	bne	r2,zero,1010bc8 <alt_find_file+0xc0>
 1010ba0:	e0bffc17 	ldw	r2,-16(fp)
 1010ba4:	1007883a 	mov	r3,r2
 1010ba8:	e0bffe17 	ldw	r2,-8(fp)
 1010bac:	1885883a 	add	r2,r3,r2
 1010bb0:	10800003 	ldbu	r2,0(r2)
 1010bb4:	10803fcc 	andi	r2,r2,255
 1010bb8:	1080201c 	xori	r2,r2,128
 1010bbc:	10bfe004 	addi	r2,r2,-128
 1010bc0:	1004c03a 	cmpne	r2,r2,zero
 1010bc4:	10000a1e 	bne	r2,zero,1010bf0 <alt_find_file+0xe8>
 1010bc8:	e0bffd17 	ldw	r2,-12(fp)
 1010bcc:	11000217 	ldw	r4,8(r2)
 1010bd0:	e1bffc17 	ldw	r6,-16(fp)
 1010bd4:	e17ffe17 	ldw	r5,-8(fp)
 1010bd8:	10113400 	call	1011340 <memcmp>
 1010bdc:	1004c03a 	cmpne	r2,r2,zero
 1010be0:	1000031e 	bne	r2,zero,1010bf0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1010be4:	e0bffd17 	ldw	r2,-12(fp)
 1010be8:	e0bfff15 	stw	r2,-4(fp)
 1010bec:	00000806 	br	1010c10 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1010bf0:	e0bffd17 	ldw	r2,-12(fp)
 1010bf4:	10800017 	ldw	r2,0(r2)
 1010bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1010bfc:	00c04074 	movhi	r3,257
 1010c00:	18ce7004 	addi	r3,r3,14784
 1010c04:	e0bffd17 	ldw	r2,-12(fp)
 1010c08:	10ffc91e 	bne	r2,r3,1010b30 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1010c0c:	e03fff15 	stw	zero,-4(fp)
 1010c10:	e0bfff17 	ldw	r2,-4(fp)
}
 1010c14:	e037883a 	mov	sp,fp
 1010c18:	dfc00117 	ldw	ra,4(sp)
 1010c1c:	df000017 	ldw	fp,0(sp)
 1010c20:	dec00204 	addi	sp,sp,8
 1010c24:	f800283a 	ret

01010c28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1010c28:	defffa04 	addi	sp,sp,-24
 1010c2c:	dfc00515 	stw	ra,20(sp)
 1010c30:	df000415 	stw	fp,16(sp)
 1010c34:	dc000315 	stw	r16,12(sp)
 1010c38:	df000304 	addi	fp,sp,12
 1010c3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1010c40:	00bffa04 	movi	r2,-24
 1010c44:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010c48:	e03ffe15 	stw	zero,-8(fp)
 1010c4c:	00002006 	br	1010cd0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1010c50:	e13ffe17 	ldw	r4,-8(fp)
 1010c54:	04004074 	movhi	r16,257
 1010c58:	8409ba04 	addi	r16,r16,9960
 1010c5c:	01400304 	movi	r5,12
 1010c60:	1002f0c0 	call	1002f0c <__mulsi3>
 1010c64:	1405883a 	add	r2,r2,r16
 1010c68:	10800017 	ldw	r2,0(r2)
 1010c6c:	1004c03a 	cmpne	r2,r2,zero
 1010c70:	1000141e 	bne	r2,zero,1010cc4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1010c74:	e13ffe17 	ldw	r4,-8(fp)
 1010c78:	04004074 	movhi	r16,257
 1010c7c:	8409ba04 	addi	r16,r16,9960
 1010c80:	01400304 	movi	r5,12
 1010c84:	1002f0c0 	call	1002f0c <__mulsi3>
 1010c88:	1407883a 	add	r3,r2,r16
 1010c8c:	e0bfff17 	ldw	r2,-4(fp)
 1010c90:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1010c94:	00804074 	movhi	r2,257
 1010c98:	108e7404 	addi	r2,r2,14800
 1010c9c:	10c00017 	ldw	r3,0(r2)
 1010ca0:	e0bffe17 	ldw	r2,-8(fp)
 1010ca4:	1880040e 	bge	r3,r2,1010cb8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1010ca8:	00c04074 	movhi	r3,257
 1010cac:	18ce7404 	addi	r3,r3,14800
 1010cb0:	e0bffe17 	ldw	r2,-8(fp)
 1010cb4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1010cb8:	e0bffe17 	ldw	r2,-8(fp)
 1010cbc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1010cc0:	00000606 	br	1010cdc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1010cc4:	e0bffe17 	ldw	r2,-8(fp)
 1010cc8:	10800044 	addi	r2,r2,1
 1010ccc:	e0bffe15 	stw	r2,-8(fp)
 1010cd0:	e0bffe17 	ldw	r2,-8(fp)
 1010cd4:	10800810 	cmplti	r2,r2,32
 1010cd8:	103fdd1e 	bne	r2,zero,1010c50 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1010cdc:	e0bffd17 	ldw	r2,-12(fp)
}
 1010ce0:	e037883a 	mov	sp,fp
 1010ce4:	dfc00217 	ldw	ra,8(sp)
 1010ce8:	df000117 	ldw	fp,4(sp)
 1010cec:	dc000017 	ldw	r16,0(sp)
 1010cf0:	dec00304 	addi	sp,sp,12
 1010cf4:	f800283a 	ret

01010cf8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010cf8:	deffff04 	addi	sp,sp,-4
 1010cfc:	df000015 	stw	fp,0(sp)
 1010d00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1010d04:	e037883a 	mov	sp,fp
 1010d08:	df000017 	ldw	fp,0(sp)
 1010d0c:	dec00104 	addi	sp,sp,4
 1010d10:	f800283a 	ret

01010d14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010d14:	defff904 	addi	sp,sp,-28
 1010d18:	dfc00615 	stw	ra,24(sp)
 1010d1c:	df000515 	stw	fp,20(sp)
 1010d20:	df000504 	addi	fp,sp,20
 1010d24:	e13ffc15 	stw	r4,-16(fp)
 1010d28:	e17ffd15 	stw	r5,-12(fp)
 1010d2c:	e1bffe15 	stw	r6,-8(fp)
 1010d30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010d34:	e0800217 	ldw	r2,8(fp)
 1010d38:	d8800015 	stw	r2,0(sp)
 1010d3c:	e13ffc17 	ldw	r4,-16(fp)
 1010d40:	e17ffd17 	ldw	r5,-12(fp)
 1010d44:	e1bffe17 	ldw	r6,-8(fp)
 1010d48:	e1ffff17 	ldw	r7,-4(fp)
 1010d4c:	1010ee80 	call	1010ee8 <alt_iic_isr_register>
}  
 1010d50:	e037883a 	mov	sp,fp
 1010d54:	dfc00117 	ldw	ra,4(sp)
 1010d58:	df000017 	ldw	fp,0(sp)
 1010d5c:	dec00204 	addi	sp,sp,8
 1010d60:	f800283a 	ret

01010d64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1010d64:	defff904 	addi	sp,sp,-28
 1010d68:	df000615 	stw	fp,24(sp)
 1010d6c:	df000604 	addi	fp,sp,24
 1010d70:	e13ffe15 	stw	r4,-8(fp)
 1010d74:	e17fff15 	stw	r5,-4(fp)
 1010d78:	e0bfff17 	ldw	r2,-4(fp)
 1010d7c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010d80:	0005303a 	rdctl	r2,status
 1010d84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d88:	e0fffb17 	ldw	r3,-20(fp)
 1010d8c:	00bfff84 	movi	r2,-2
 1010d90:	1884703a 	and	r2,r3,r2
 1010d94:	1001703a 	wrctl	status,r2
  
  return context;
 1010d98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010d9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1010da0:	e0fffc17 	ldw	r3,-16(fp)
 1010da4:	00800044 	movi	r2,1
 1010da8:	10c4983a 	sll	r2,r2,r3
 1010dac:	1007883a 	mov	r3,r2
 1010db0:	00804074 	movhi	r2,257
 1010db4:	10955d04 	addi	r2,r2,21876
 1010db8:	10800017 	ldw	r2,0(r2)
 1010dbc:	1886b03a 	or	r3,r3,r2
 1010dc0:	00804074 	movhi	r2,257
 1010dc4:	10955d04 	addi	r2,r2,21876
 1010dc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010dcc:	00804074 	movhi	r2,257
 1010dd0:	10955d04 	addi	r2,r2,21876
 1010dd4:	10800017 	ldw	r2,0(r2)
 1010dd8:	100170fa 	wrctl	ienable,r2
 1010ddc:	e0bffd17 	ldw	r2,-12(fp)
 1010de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010de4:	e0bffa17 	ldw	r2,-24(fp)
 1010de8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010dec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1010df0:	e037883a 	mov	sp,fp
 1010df4:	df000017 	ldw	fp,0(sp)
 1010df8:	dec00104 	addi	sp,sp,4
 1010dfc:	f800283a 	ret

01010e00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010e00:	defff904 	addi	sp,sp,-28
 1010e04:	df000615 	stw	fp,24(sp)
 1010e08:	df000604 	addi	fp,sp,24
 1010e0c:	e13ffe15 	stw	r4,-8(fp)
 1010e10:	e17fff15 	stw	r5,-4(fp)
 1010e14:	e0bfff17 	ldw	r2,-4(fp)
 1010e18:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e1c:	0005303a 	rdctl	r2,status
 1010e20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e24:	e0fffb17 	ldw	r3,-20(fp)
 1010e28:	00bfff84 	movi	r2,-2
 1010e2c:	1884703a 	and	r2,r3,r2
 1010e30:	1001703a 	wrctl	status,r2
  
  return context;
 1010e34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010e38:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1010e3c:	e0fffc17 	ldw	r3,-16(fp)
 1010e40:	00800044 	movi	r2,1
 1010e44:	10c4983a 	sll	r2,r2,r3
 1010e48:	0084303a 	nor	r2,zero,r2
 1010e4c:	1007883a 	mov	r3,r2
 1010e50:	00804074 	movhi	r2,257
 1010e54:	10955d04 	addi	r2,r2,21876
 1010e58:	10800017 	ldw	r2,0(r2)
 1010e5c:	1886703a 	and	r3,r3,r2
 1010e60:	00804074 	movhi	r2,257
 1010e64:	10955d04 	addi	r2,r2,21876
 1010e68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010e6c:	00804074 	movhi	r2,257
 1010e70:	10955d04 	addi	r2,r2,21876
 1010e74:	10800017 	ldw	r2,0(r2)
 1010e78:	100170fa 	wrctl	ienable,r2
 1010e7c:	e0bffd17 	ldw	r2,-12(fp)
 1010e80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010e84:	e0bffa17 	ldw	r2,-24(fp)
 1010e88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010e8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1010e90:	e037883a 	mov	sp,fp
 1010e94:	df000017 	ldw	fp,0(sp)
 1010e98:	dec00104 	addi	sp,sp,4
 1010e9c:	f800283a 	ret

01010ea0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1010ea0:	defffc04 	addi	sp,sp,-16
 1010ea4:	df000315 	stw	fp,12(sp)
 1010ea8:	df000304 	addi	fp,sp,12
 1010eac:	e13ffe15 	stw	r4,-8(fp)
 1010eb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1010eb4:	000530fa 	rdctl	r2,ienable
 1010eb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010ebc:	e0ffff17 	ldw	r3,-4(fp)
 1010ec0:	00800044 	movi	r2,1
 1010ec4:	10c4983a 	sll	r2,r2,r3
 1010ec8:	1007883a 	mov	r3,r2
 1010ecc:	e0bffd17 	ldw	r2,-12(fp)
 1010ed0:	1884703a 	and	r2,r3,r2
 1010ed4:	1004c03a 	cmpne	r2,r2,zero
}
 1010ed8:	e037883a 	mov	sp,fp
 1010edc:	df000017 	ldw	fp,0(sp)
 1010ee0:	dec00104 	addi	sp,sp,4
 1010ee4:	f800283a 	ret

01010ee8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010ee8:	defff404 	addi	sp,sp,-48
 1010eec:	dfc00b15 	stw	ra,44(sp)
 1010ef0:	df000a15 	stw	fp,40(sp)
 1010ef4:	df000a04 	addi	fp,sp,40
 1010ef8:	e13ffb15 	stw	r4,-20(fp)
 1010efc:	e17ffc15 	stw	r5,-16(fp)
 1010f00:	e1bffd15 	stw	r6,-12(fp)
 1010f04:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1010f08:	00bffa84 	movi	r2,-22
 1010f0c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010f10:	e0bffc17 	ldw	r2,-16(fp)
 1010f14:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010f18:	e0bff917 	ldw	r2,-28(fp)
 1010f1c:	10800808 	cmpgei	r2,r2,32
 1010f20:	1000291e 	bne	r2,zero,1010fc8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010f24:	0005303a 	rdctl	r2,status
 1010f28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010f2c:	e0fff717 	ldw	r3,-36(fp)
 1010f30:	00bfff84 	movi	r2,-2
 1010f34:	1884703a 	and	r2,r3,r2
 1010f38:	1001703a 	wrctl	status,r2
  
  return context;
 1010f3c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010f40:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1010f44:	e0bff917 	ldw	r2,-28(fp)
 1010f48:	00c04074 	movhi	r3,257
 1010f4c:	18d76f04 	addi	r3,r3,23996
 1010f50:	100490fa 	slli	r2,r2,3
 1010f54:	10c7883a 	add	r3,r2,r3
 1010f58:	e0bffd17 	ldw	r2,-12(fp)
 1010f5c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1010f60:	e0bff917 	ldw	r2,-28(fp)
 1010f64:	00c04074 	movhi	r3,257
 1010f68:	18d76f04 	addi	r3,r3,23996
 1010f6c:	100490fa 	slli	r2,r2,3
 1010f70:	10c5883a 	add	r2,r2,r3
 1010f74:	10c00104 	addi	r3,r2,4
 1010f78:	e0bffe17 	ldw	r2,-8(fp)
 1010f7c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1010f80:	e0bffd17 	ldw	r2,-12(fp)
 1010f84:	1005003a 	cmpeq	r2,r2,zero
 1010f88:	1000051e 	bne	r2,zero,1010fa0 <alt_iic_isr_register+0xb8>
 1010f8c:	e17ff917 	ldw	r5,-28(fp)
 1010f90:	e13ffb17 	ldw	r4,-20(fp)
 1010f94:	1010d640 	call	1010d64 <alt_ic_irq_enable>
 1010f98:	e0bfff15 	stw	r2,-4(fp)
 1010f9c:	00000406 	br	1010fb0 <alt_iic_isr_register+0xc8>
 1010fa0:	e17ff917 	ldw	r5,-28(fp)
 1010fa4:	e13ffb17 	ldw	r4,-20(fp)
 1010fa8:	1010e000 	call	1010e00 <alt_ic_irq_disable>
 1010fac:	e0bfff15 	stw	r2,-4(fp)
 1010fb0:	e0bfff17 	ldw	r2,-4(fp)
 1010fb4:	e0bffa15 	stw	r2,-24(fp)
 1010fb8:	e0bff817 	ldw	r2,-32(fp)
 1010fbc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010fc0:	e0bff617 	ldw	r2,-40(fp)
 1010fc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1010fc8:	e0bffa17 	ldw	r2,-24(fp)
}
 1010fcc:	e037883a 	mov	sp,fp
 1010fd0:	dfc00117 	ldw	ra,4(sp)
 1010fd4:	df000017 	ldw	fp,0(sp)
 1010fd8:	dec00204 	addi	sp,sp,8
 1010fdc:	f800283a 	ret

01010fe0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010fe0:	defff804 	addi	sp,sp,-32
 1010fe4:	dfc00715 	stw	ra,28(sp)
 1010fe8:	df000615 	stw	fp,24(sp)
 1010fec:	dc000515 	stw	r16,20(sp)
 1010ff0:	df000504 	addi	fp,sp,20
 1010ff4:	e13ffc15 	stw	r4,-16(fp)
 1010ff8:	e17ffd15 	stw	r5,-12(fp)
 1010ffc:	e1bffe15 	stw	r6,-8(fp)
 1011000:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1011004:	e13ffd17 	ldw	r4,-12(fp)
 1011008:	e17ffe17 	ldw	r5,-8(fp)
 101100c:	e1bfff17 	ldw	r6,-4(fp)
 1011010:	100eb900 	call	100eb90 <open>
 1011014:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1011018:	e0bffb17 	ldw	r2,-20(fp)
 101101c:	1004803a 	cmplt	r2,r2,zero
 1011020:	10001f1e 	bne	r2,zero,10110a0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1011024:	e13ffb17 	ldw	r4,-20(fp)
 1011028:	04004074 	movhi	r16,257
 101102c:	8409ba04 	addi	r16,r16,9960
 1011030:	01400304 	movi	r5,12
 1011034:	1002f0c0 	call	1002f0c <__mulsi3>
 1011038:	1405883a 	add	r2,r2,r16
 101103c:	10c00017 	ldw	r3,0(r2)
 1011040:	e0bffc17 	ldw	r2,-16(fp)
 1011044:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1011048:	e13ffb17 	ldw	r4,-20(fp)
 101104c:	04004074 	movhi	r16,257
 1011050:	8409ba04 	addi	r16,r16,9960
 1011054:	01400304 	movi	r5,12
 1011058:	1002f0c0 	call	1002f0c <__mulsi3>
 101105c:	1405883a 	add	r2,r2,r16
 1011060:	10800104 	addi	r2,r2,4
 1011064:	10c00017 	ldw	r3,0(r2)
 1011068:	e0bffc17 	ldw	r2,-16(fp)
 101106c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1011070:	e13ffb17 	ldw	r4,-20(fp)
 1011074:	04004074 	movhi	r16,257
 1011078:	8409ba04 	addi	r16,r16,9960
 101107c:	01400304 	movi	r5,12
 1011080:	1002f0c0 	call	1002f0c <__mulsi3>
 1011084:	1405883a 	add	r2,r2,r16
 1011088:	10800204 	addi	r2,r2,8
 101108c:	10c00017 	ldw	r3,0(r2)
 1011090:	e0bffc17 	ldw	r2,-16(fp)
 1011094:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1011098:	e13ffb17 	ldw	r4,-20(fp)
 101109c:	100ef000 	call	100ef00 <alt_release_fd>
  }
} 
 10110a0:	e037883a 	mov	sp,fp
 10110a4:	dfc00217 	ldw	ra,8(sp)
 10110a8:	df000117 	ldw	fp,4(sp)
 10110ac:	dc000017 	ldw	r16,0(sp)
 10110b0:	dec00304 	addi	sp,sp,12
 10110b4:	f800283a 	ret

010110b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10110b8:	defffb04 	addi	sp,sp,-20
 10110bc:	dfc00415 	stw	ra,16(sp)
 10110c0:	df000315 	stw	fp,12(sp)
 10110c4:	df000304 	addi	fp,sp,12
 10110c8:	e13ffd15 	stw	r4,-12(fp)
 10110cc:	e17ffe15 	stw	r5,-8(fp)
 10110d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10110d4:	01004074 	movhi	r4,257
 10110d8:	2109bd04 	addi	r4,r4,9972
 10110dc:	e17ffd17 	ldw	r5,-12(fp)
 10110e0:	01800044 	movi	r6,1
 10110e4:	01c07fc4 	movi	r7,511
 10110e8:	1010fe00 	call	1010fe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10110ec:	01004074 	movhi	r4,257
 10110f0:	2109ba04 	addi	r4,r4,9960
 10110f4:	e17ffe17 	ldw	r5,-8(fp)
 10110f8:	000d883a 	mov	r6,zero
 10110fc:	01c07fc4 	movi	r7,511
 1011100:	1010fe00 	call	1010fe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1011104:	01004074 	movhi	r4,257
 1011108:	2109c004 	addi	r4,r4,9984
 101110c:	e17fff17 	ldw	r5,-4(fp)
 1011110:	01800044 	movi	r6,1
 1011114:	01c07fc4 	movi	r7,511
 1011118:	1010fe00 	call	1010fe0 <alt_open_fd>
}  
 101111c:	e037883a 	mov	sp,fp
 1011120:	dfc00117 	ldw	ra,4(sp)
 1011124:	df000017 	ldw	fp,0(sp)
 1011128:	dec00204 	addi	sp,sp,8
 101112c:	f800283a 	ret

01011130 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011130:	defffa04 	addi	sp,sp,-24
 1011134:	df000515 	stw	fp,20(sp)
 1011138:	df000504 	addi	fp,sp,20
 101113c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011140:	0005303a 	rdctl	r2,status
 1011144:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011148:	e0fffd17 	ldw	r3,-12(fp)
 101114c:	00bfff84 	movi	r2,-2
 1011150:	1884703a 	and	r2,r3,r2
 1011154:	1001703a 	wrctl	status,r2
  
  return context;
 1011158:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 101115c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1011160:	e0bfff17 	ldw	r2,-4(fp)
 1011164:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1011168:	e0bffc17 	ldw	r2,-16(fp)
 101116c:	10c00017 	ldw	r3,0(r2)
 1011170:	e0bffc17 	ldw	r2,-16(fp)
 1011174:	10800117 	ldw	r2,4(r2)
 1011178:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 101117c:	e0bffc17 	ldw	r2,-16(fp)
 1011180:	10c00117 	ldw	r3,4(r2)
 1011184:	e0bffc17 	ldw	r2,-16(fp)
 1011188:	10800017 	ldw	r2,0(r2)
 101118c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1011190:	e0fffc17 	ldw	r3,-16(fp)
 1011194:	e0bffc17 	ldw	r2,-16(fp)
 1011198:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101119c:	e0fffc17 	ldw	r3,-16(fp)
 10111a0:	e0bffc17 	ldw	r2,-16(fp)
 10111a4:	18800015 	stw	r2,0(r3)
 10111a8:	e0bffe17 	ldw	r2,-8(fp)
 10111ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10111b0:	e0bffb17 	ldw	r2,-20(fp)
 10111b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10111b8:	e037883a 	mov	sp,fp
 10111bc:	df000017 	ldw	fp,0(sp)
 10111c0:	dec00104 	addi	sp,sp,4
 10111c4:	f800283a 	ret

010111c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10111c8:	defffb04 	addi	sp,sp,-20
 10111cc:	dfc00415 	stw	ra,16(sp)
 10111d0:	df000315 	stw	fp,12(sp)
 10111d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10111d8:	d0a01517 	ldw	r2,-32684(gp)
 10111dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10111e0:	d0a6fc17 	ldw	r2,-25616(gp)
 10111e4:	10800044 	addi	r2,r2,1
 10111e8:	d0a6fc15 	stw	r2,-25616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10111ec:	00003106 	br	10112b4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10111f0:	e0bffe17 	ldw	r2,-8(fp)
 10111f4:	10800017 	ldw	r2,0(r2)
 10111f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10111fc:	e0bffe17 	ldw	r2,-8(fp)
 1011200:	10800403 	ldbu	r2,16(r2)
 1011204:	10803fcc 	andi	r2,r2,255
 1011208:	1005003a 	cmpeq	r2,r2,zero
 101120c:	1000051e 	bne	r2,zero,1011224 <alt_tick+0x5c>
 1011210:	d0a6fc17 	ldw	r2,-25616(gp)
 1011214:	1004c03a 	cmpne	r2,r2,zero
 1011218:	1000021e 	bne	r2,zero,1011224 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101121c:	e0bffe17 	ldw	r2,-8(fp)
 1011220:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011224:	e0bffe17 	ldw	r2,-8(fp)
 1011228:	10c00217 	ldw	r3,8(r2)
 101122c:	d0a6fc17 	ldw	r2,-25616(gp)
 1011230:	10c01e36 	bltu	r2,r3,10112ac <alt_tick+0xe4>
 1011234:	e0bffe17 	ldw	r2,-8(fp)
 1011238:	10800403 	ldbu	r2,16(r2)
 101123c:	10803fcc 	andi	r2,r2,255
 1011240:	1004c03a 	cmpne	r2,r2,zero
 1011244:	1000191e 	bne	r2,zero,10112ac <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011248:	e0bffe17 	ldw	r2,-8(fp)
 101124c:	10c00317 	ldw	r3,12(r2)
 1011250:	e0bffe17 	ldw	r2,-8(fp)
 1011254:	11000517 	ldw	r4,20(r2)
 1011258:	183ee83a 	callr	r3
 101125c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1011260:	e0bffd17 	ldw	r2,-12(fp)
 1011264:	1004c03a 	cmpne	r2,r2,zero
 1011268:	1000031e 	bne	r2,zero,1011278 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 101126c:	e13ffe17 	ldw	r4,-8(fp)
 1011270:	10111300 	call	1011130 <alt_alarm_stop>
 1011274:	00000d06 	br	10112ac <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1011278:	e0bffe17 	ldw	r2,-8(fp)
 101127c:	10c00217 	ldw	r3,8(r2)
 1011280:	e0bffd17 	ldw	r2,-12(fp)
 1011284:	1887883a 	add	r3,r3,r2
 1011288:	e0bffe17 	ldw	r2,-8(fp)
 101128c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1011290:	e0bffe17 	ldw	r2,-8(fp)
 1011294:	10c00217 	ldw	r3,8(r2)
 1011298:	d0a6fc17 	ldw	r2,-25616(gp)
 101129c:	1880032e 	bgeu	r3,r2,10112ac <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10112a0:	e0fffe17 	ldw	r3,-8(fp)
 10112a4:	00800044 	movi	r2,1
 10112a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10112ac:	e0bfff17 	ldw	r2,-4(fp)
 10112b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10112b4:	d0e01504 	addi	r3,gp,-32684
 10112b8:	e0bffe17 	ldw	r2,-8(fp)
 10112bc:	10ffcc1e 	bne	r2,r3,10111f0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10112c0:	e037883a 	mov	sp,fp
 10112c4:	dfc00117 	ldw	ra,4(sp)
 10112c8:	df000017 	ldw	fp,0(sp)
 10112cc:	dec00204 	addi	sp,sp,8
 10112d0:	f800283a 	ret

010112d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10112d4:	deffff04 	addi	sp,sp,-4
 10112d8:	df000015 	stw	fp,0(sp)
 10112dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10112e0:	000170fa 	wrctl	ienable,zero
}
 10112e4:	e037883a 	mov	sp,fp
 10112e8:	df000017 	ldw	fp,0(sp)
 10112ec:	dec00104 	addi	sp,sp,4
 10112f0:	f800283a 	ret

010112f4 <atexit>:
 10112f4:	200b883a 	mov	r5,r4
 10112f8:	000d883a 	mov	r6,zero
 10112fc:	0009883a 	mov	r4,zero
 1011300:	000f883a 	mov	r7,zero
 1011304:	10113b41 	jmpi	10113b4 <__register_exitproc>

01011308 <exit>:
 1011308:	defffe04 	addi	sp,sp,-8
 101130c:	000b883a 	mov	r5,zero
 1011310:	dc000015 	stw	r16,0(sp)
 1011314:	dfc00115 	stw	ra,4(sp)
 1011318:	2021883a 	mov	r16,r4
 101131c:	10114ec0 	call	10114ec <__call_exitprocs>
 1011320:	00804074 	movhi	r2,257
 1011324:	108e6b04 	addi	r2,r2,14764
 1011328:	11000017 	ldw	r4,0(r2)
 101132c:	20800f17 	ldw	r2,60(r4)
 1011330:	10000126 	beq	r2,zero,1011338 <exit+0x30>
 1011334:	103ee83a 	callr	r2
 1011338:	8009883a 	mov	r4,r16
 101133c:	100e3700 	call	100e370 <_exit>

01011340 <memcmp>:
 1011340:	00c000c4 	movi	r3,3
 1011344:	1980032e 	bgeu	r3,r6,1011354 <memcmp+0x14>
 1011348:	2144b03a 	or	r2,r4,r5
 101134c:	10c4703a 	and	r2,r2,r3
 1011350:	10000f26 	beq	r2,zero,1011390 <memcmp+0x50>
 1011354:	31ffffc4 	addi	r7,r6,-1
 1011358:	3000061e 	bne	r6,zero,1011374 <memcmp+0x34>
 101135c:	00000a06 	br	1011388 <memcmp+0x48>
 1011360:	39ffffc4 	addi	r7,r7,-1
 1011364:	00bfffc4 	movi	r2,-1
 1011368:	21000044 	addi	r4,r4,1
 101136c:	29400044 	addi	r5,r5,1
 1011370:	38800526 	beq	r7,r2,1011388 <memcmp+0x48>
 1011374:	20c00003 	ldbu	r3,0(r4)
 1011378:	28800003 	ldbu	r2,0(r5)
 101137c:	18bff826 	beq	r3,r2,1011360 <memcmp+0x20>
 1011380:	1885c83a 	sub	r2,r3,r2
 1011384:	f800283a 	ret
 1011388:	0005883a 	mov	r2,zero
 101138c:	f800283a 	ret
 1011390:	180f883a 	mov	r7,r3
 1011394:	20c00017 	ldw	r3,0(r4)
 1011398:	28800017 	ldw	r2,0(r5)
 101139c:	18bfed1e 	bne	r3,r2,1011354 <memcmp+0x14>
 10113a0:	31bfff04 	addi	r6,r6,-4
 10113a4:	21000104 	addi	r4,r4,4
 10113a8:	29400104 	addi	r5,r5,4
 10113ac:	39bff936 	bltu	r7,r6,1011394 <memcmp+0x54>
 10113b0:	003fe806 	br	1011354 <memcmp+0x14>

010113b4 <__register_exitproc>:
 10113b4:	defffa04 	addi	sp,sp,-24
 10113b8:	00804074 	movhi	r2,257
 10113bc:	108e6b04 	addi	r2,r2,14764
 10113c0:	dc000015 	stw	r16,0(sp)
 10113c4:	14000017 	ldw	r16,0(r2)
 10113c8:	dd000415 	stw	r20,16(sp)
 10113cc:	2829883a 	mov	r20,r5
 10113d0:	81405217 	ldw	r5,328(r16)
 10113d4:	dcc00315 	stw	r19,12(sp)
 10113d8:	dc800215 	stw	r18,8(sp)
 10113dc:	dc400115 	stw	r17,4(sp)
 10113e0:	dfc00515 	stw	ra,20(sp)
 10113e4:	2023883a 	mov	r17,r4
 10113e8:	3027883a 	mov	r19,r6
 10113ec:	3825883a 	mov	r18,r7
 10113f0:	28002526 	beq	r5,zero,1011488 <__register_exitproc+0xd4>
 10113f4:	29000117 	ldw	r4,4(r5)
 10113f8:	008007c4 	movi	r2,31
 10113fc:	11002716 	blt	r2,r4,101149c <__register_exitproc+0xe8>
 1011400:	8800101e 	bne	r17,zero,1011444 <__register_exitproc+0x90>
 1011404:	2105883a 	add	r2,r4,r4
 1011408:	1085883a 	add	r2,r2,r2
 101140c:	20c00044 	addi	r3,r4,1
 1011410:	1145883a 	add	r2,r2,r5
 1011414:	0009883a 	mov	r4,zero
 1011418:	15000215 	stw	r20,8(r2)
 101141c:	28c00115 	stw	r3,4(r5)
 1011420:	2005883a 	mov	r2,r4
 1011424:	dfc00517 	ldw	ra,20(sp)
 1011428:	dd000417 	ldw	r20,16(sp)
 101142c:	dcc00317 	ldw	r19,12(sp)
 1011430:	dc800217 	ldw	r18,8(sp)
 1011434:	dc400117 	ldw	r17,4(sp)
 1011438:	dc000017 	ldw	r16,0(sp)
 101143c:	dec00604 	addi	sp,sp,24
 1011440:	f800283a 	ret
 1011444:	29802204 	addi	r6,r5,136
 1011448:	00800044 	movi	r2,1
 101144c:	110e983a 	sll	r7,r2,r4
 1011450:	30c04017 	ldw	r3,256(r6)
 1011454:	2105883a 	add	r2,r4,r4
 1011458:	1085883a 	add	r2,r2,r2
 101145c:	1185883a 	add	r2,r2,r6
 1011460:	19c6b03a 	or	r3,r3,r7
 1011464:	14802015 	stw	r18,128(r2)
 1011468:	14c00015 	stw	r19,0(r2)
 101146c:	00800084 	movi	r2,2
 1011470:	30c04015 	stw	r3,256(r6)
 1011474:	88bfe31e 	bne	r17,r2,1011404 <__register_exitproc+0x50>
 1011478:	30804117 	ldw	r2,260(r6)
 101147c:	11c4b03a 	or	r2,r2,r7
 1011480:	30804115 	stw	r2,260(r6)
 1011484:	003fdf06 	br	1011404 <__register_exitproc+0x50>
 1011488:	00804074 	movhi	r2,257
 101148c:	1097af04 	addi	r2,r2,24252
 1011490:	100b883a 	mov	r5,r2
 1011494:	80805215 	stw	r2,328(r16)
 1011498:	003fd606 	br	10113f4 <__register_exitproc+0x40>
 101149c:	00804034 	movhi	r2,256
 10114a0:	10929304 	addi	r2,r2,19020
 10114a4:	1000021e 	bne	r2,zero,10114b0 <__register_exitproc+0xfc>
 10114a8:	013fffc4 	movi	r4,-1
 10114ac:	003fdc06 	br	1011420 <__register_exitproc+0x6c>
 10114b0:	01006404 	movi	r4,400
 10114b4:	103ee83a 	callr	r2
 10114b8:	1007883a 	mov	r3,r2
 10114bc:	103ffa26 	beq	r2,zero,10114a8 <__register_exitproc+0xf4>
 10114c0:	80805217 	ldw	r2,328(r16)
 10114c4:	180b883a 	mov	r5,r3
 10114c8:	18000115 	stw	zero,4(r3)
 10114cc:	18800015 	stw	r2,0(r3)
 10114d0:	80c05215 	stw	r3,328(r16)
 10114d4:	18006215 	stw	zero,392(r3)
 10114d8:	18006315 	stw	zero,396(r3)
 10114dc:	0009883a 	mov	r4,zero
 10114e0:	883fc826 	beq	r17,zero,1011404 <__register_exitproc+0x50>
 10114e4:	003fd706 	br	1011444 <__register_exitproc+0x90>

010114e8 <register_fini>:
 10114e8:	f800283a 	ret

010114ec <__call_exitprocs>:
 10114ec:	00804074 	movhi	r2,257
 10114f0:	108e6b04 	addi	r2,r2,14764
 10114f4:	10800017 	ldw	r2,0(r2)
 10114f8:	defff304 	addi	sp,sp,-52
 10114fc:	df000b15 	stw	fp,44(sp)
 1011500:	d8800115 	stw	r2,4(sp)
 1011504:	00804034 	movhi	r2,256
 1011508:	10928e04 	addi	r2,r2,19000
 101150c:	1005003a 	cmpeq	r2,r2,zero
 1011510:	d8800215 	stw	r2,8(sp)
 1011514:	d8800117 	ldw	r2,4(sp)
 1011518:	dd400815 	stw	r21,32(sp)
 101151c:	dd000715 	stw	r20,28(sp)
 1011520:	10805204 	addi	r2,r2,328
 1011524:	dfc00c15 	stw	ra,48(sp)
 1011528:	ddc00a15 	stw	r23,40(sp)
 101152c:	dd800915 	stw	r22,36(sp)
 1011530:	dcc00615 	stw	r19,24(sp)
 1011534:	dc800515 	stw	r18,20(sp)
 1011538:	dc400415 	stw	r17,16(sp)
 101153c:	dc000315 	stw	r16,12(sp)
 1011540:	282b883a 	mov	r21,r5
 1011544:	2039883a 	mov	fp,r4
 1011548:	d8800015 	stw	r2,0(sp)
 101154c:	2829003a 	cmpeq	r20,r5,zero
 1011550:	d8800117 	ldw	r2,4(sp)
 1011554:	14405217 	ldw	r17,328(r2)
 1011558:	88001026 	beq	r17,zero,101159c <__call_exitprocs+0xb0>
 101155c:	ddc00017 	ldw	r23,0(sp)
 1011560:	88800117 	ldw	r2,4(r17)
 1011564:	8c802204 	addi	r18,r17,136
 1011568:	143fffc4 	addi	r16,r2,-1
 101156c:	80000916 	blt	r16,zero,1011594 <__call_exitprocs+0xa8>
 1011570:	05bfffc4 	movi	r22,-1
 1011574:	a000151e 	bne	r20,zero,10115cc <__call_exitprocs+0xe0>
 1011578:	8409883a 	add	r4,r16,r16
 101157c:	2105883a 	add	r2,r4,r4
 1011580:	1485883a 	add	r2,r2,r18
 1011584:	10c02017 	ldw	r3,128(r2)
 1011588:	a8c01126 	beq	r21,r3,10115d0 <__call_exitprocs+0xe4>
 101158c:	843fffc4 	addi	r16,r16,-1
 1011590:	85bff81e 	bne	r16,r22,1011574 <__call_exitprocs+0x88>
 1011594:	d8800217 	ldw	r2,8(sp)
 1011598:	10003126 	beq	r2,zero,1011660 <__call_exitprocs+0x174>
 101159c:	dfc00c17 	ldw	ra,48(sp)
 10115a0:	df000b17 	ldw	fp,44(sp)
 10115a4:	ddc00a17 	ldw	r23,40(sp)
 10115a8:	dd800917 	ldw	r22,36(sp)
 10115ac:	dd400817 	ldw	r21,32(sp)
 10115b0:	dd000717 	ldw	r20,28(sp)
 10115b4:	dcc00617 	ldw	r19,24(sp)
 10115b8:	dc800517 	ldw	r18,20(sp)
 10115bc:	dc400417 	ldw	r17,16(sp)
 10115c0:	dc000317 	ldw	r16,12(sp)
 10115c4:	dec00d04 	addi	sp,sp,52
 10115c8:	f800283a 	ret
 10115cc:	8409883a 	add	r4,r16,r16
 10115d0:	88c00117 	ldw	r3,4(r17)
 10115d4:	2105883a 	add	r2,r4,r4
 10115d8:	1445883a 	add	r2,r2,r17
 10115dc:	18ffffc4 	addi	r3,r3,-1
 10115e0:	11800217 	ldw	r6,8(r2)
 10115e4:	1c001526 	beq	r3,r16,101163c <__call_exitprocs+0x150>
 10115e8:	10000215 	stw	zero,8(r2)
 10115ec:	303fe726 	beq	r6,zero,101158c <__call_exitprocs+0xa0>
 10115f0:	00c00044 	movi	r3,1
 10115f4:	1c06983a 	sll	r3,r3,r16
 10115f8:	90804017 	ldw	r2,256(r18)
 10115fc:	8cc00117 	ldw	r19,4(r17)
 1011600:	1884703a 	and	r2,r3,r2
 1011604:	10001426 	beq	r2,zero,1011658 <__call_exitprocs+0x16c>
 1011608:	90804117 	ldw	r2,260(r18)
 101160c:	1884703a 	and	r2,r3,r2
 1011610:	10000c1e 	bne	r2,zero,1011644 <__call_exitprocs+0x158>
 1011614:	2105883a 	add	r2,r4,r4
 1011618:	1485883a 	add	r2,r2,r18
 101161c:	11400017 	ldw	r5,0(r2)
 1011620:	e009883a 	mov	r4,fp
 1011624:	303ee83a 	callr	r6
 1011628:	88800117 	ldw	r2,4(r17)
 101162c:	98bfc81e 	bne	r19,r2,1011550 <__call_exitprocs+0x64>
 1011630:	b8800017 	ldw	r2,0(r23)
 1011634:	147fd526 	beq	r2,r17,101158c <__call_exitprocs+0xa0>
 1011638:	003fc506 	br	1011550 <__call_exitprocs+0x64>
 101163c:	8c000115 	stw	r16,4(r17)
 1011640:	003fea06 	br	10115ec <__call_exitprocs+0x100>
 1011644:	2105883a 	add	r2,r4,r4
 1011648:	1485883a 	add	r2,r2,r18
 101164c:	11000017 	ldw	r4,0(r2)
 1011650:	303ee83a 	callr	r6
 1011654:	003ff406 	br	1011628 <__call_exitprocs+0x13c>
 1011658:	303ee83a 	callr	r6
 101165c:	003ff206 	br	1011628 <__call_exitprocs+0x13c>
 1011660:	88800117 	ldw	r2,4(r17)
 1011664:	1000081e 	bne	r2,zero,1011688 <__call_exitprocs+0x19c>
 1011668:	89000017 	ldw	r4,0(r17)
 101166c:	20000726 	beq	r4,zero,101168c <__call_exitprocs+0x1a0>
 1011670:	b9000015 	stw	r4,0(r23)
 1011674:	8809883a 	mov	r4,r17
 1011678:	1004a380 	call	1004a38 <free>
 101167c:	bc400017 	ldw	r17,0(r23)
 1011680:	883fb71e 	bne	r17,zero,1011560 <__call_exitprocs+0x74>
 1011684:	003fc506 	br	101159c <__call_exitprocs+0xb0>
 1011688:	89000017 	ldw	r4,0(r17)
 101168c:	882f883a 	mov	r23,r17
 1011690:	2023883a 	mov	r17,r4
 1011694:	883fb21e 	bne	r17,zero,1011560 <__call_exitprocs+0x74>
 1011698:	003fc006 	br	101159c <__call_exitprocs+0xb0>
 101169c:	0201ffff 	0x201ffff
 10116a0:	ffff0000 	call	ffff000 <__alt_data_end+0xe7ff000>
 10116a4:	00000201 	jmpi	20 <__alt_mem_onchip_memory2_0+0x20>
 10116a8:	010d0bff 	0x10d0bff
 10116ac:	7f010002 	0x7f010002
 10116b0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116b4:	01011a60 	cmpeqi	r4,zero,1129
 10116b8:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0>
 10116bc:	010d0bff 	0x10d0bff
 10116c0:	01000004 	movi	r4,0
 10116c4:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 10116c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116cc:	010d0bff 	0x10d0bff
 10116d0:	01000004 	movi	r4,0
 10116d4:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 10116d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116dc:	010d0bff 	0x10d0bff
 10116e0:	01000004 	movi	r4,0
 10116e4:	00000101 	jmpi	10 <__alt_mem_onchip_memory2_0+0x10>
 10116e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116ec:	010d0bff 	0x10d0bff
 10116f0:	7f010002 	0x7f010002
 10116f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10116f8:	01011a60 	cmpeqi	r4,zero,1129
 10116fc:	00000001 	jmpi	0 <__alt_mem_onchip_memory2_0>
 1011700:	01090bff 	0x1090bff
 1011704:	7f010002 	0x7f010002
	...
 1011710:	01090bff 	0x1090bff
 1011714:	7f010002 	0x7f010002
	...
 1011720:	01000250 	cmplti	r4,zero,9
 1011724:	010114e8 	cmpgeui	r4,zero,1107
